
Dual_Core__High_Level_Arch_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abb0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0810ae50  0810ae50  0001ae50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810b4c0  0810b4c0  0001b4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810b4c8  0810b4c8  0001b4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810b4cc  0810b4cc  0001b4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  10000000  0810b4d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003bc  10000088  0810b554  00020088  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  10000444  0810b554  00020444  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   000240c3  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046b1  00000000  00000000  00044177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c70  00000000  00000000  00048828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a78  00000000  00000000  0004a498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041754  00000000  00000000  0004bf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002812d  00000000  00000000  0008d664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a2e49  00000000  00000000  000b5791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002585da  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007aec  00000000  00000000  0025862c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000088 	.word	0x10000088
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810ae38 	.word	0x0810ae38

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000008c 	.word	0x1000008c
 81002dc:	0810ae38 	.word	0x0810ae38

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_drsub>:
 8100380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100384:	e002      	b.n	810038c <__adddf3>
 8100386:	bf00      	nop

08100388 <__aeabi_dsub>:
 8100388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810038c <__adddf3>:
 810038c:	b530      	push	{r4, r5, lr}
 810038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8100392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8100396:	ea94 0f05 	teq	r4, r5
 810039a:	bf08      	it	eq
 810039c:	ea90 0f02 	teqeq	r0, r2
 81003a0:	bf1f      	itttt	ne
 81003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003b2:	f000 80e2 	beq.w	810057a <__adddf3+0x1ee>
 81003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003be:	bfb8      	it	lt
 81003c0:	426d      	neglt	r5, r5
 81003c2:	dd0c      	ble.n	81003de <__adddf3+0x52>
 81003c4:	442c      	add	r4, r5
 81003c6:	ea80 0202 	eor.w	r2, r0, r2
 81003ca:	ea81 0303 	eor.w	r3, r1, r3
 81003ce:	ea82 0000 	eor.w	r0, r2, r0
 81003d2:	ea83 0101 	eor.w	r1, r3, r1
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	2d36      	cmp	r5, #54	; 0x36
 81003e0:	bf88      	it	hi
 81003e2:	bd30      	pophi	{r4, r5, pc}
 81003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 81003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 81003f4:	d002      	beq.n	81003fc <__adddf3+0x70>
 81003f6:	4240      	negs	r0, r0
 81003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100408:	d002      	beq.n	8100410 <__adddf3+0x84>
 810040a:	4252      	negs	r2, r2
 810040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100410:	ea94 0f05 	teq	r4, r5
 8100414:	f000 80a7 	beq.w	8100566 <__adddf3+0x1da>
 8100418:	f1a4 0401 	sub.w	r4, r4, #1
 810041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100420:	db0d      	blt.n	810043e <__adddf3+0xb2>
 8100422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100426:	fa22 f205 	lsr.w	r2, r2, r5
 810042a:	1880      	adds	r0, r0, r2
 810042c:	f141 0100 	adc.w	r1, r1, #0
 8100430:	fa03 f20e 	lsl.w	r2, r3, lr
 8100434:	1880      	adds	r0, r0, r2
 8100436:	fa43 f305 	asr.w	r3, r3, r5
 810043a:	4159      	adcs	r1, r3
 810043c:	e00e      	b.n	810045c <__adddf3+0xd0>
 810043e:	f1a5 0520 	sub.w	r5, r5, #32
 8100442:	f10e 0e20 	add.w	lr, lr, #32
 8100446:	2a01      	cmp	r2, #1
 8100448:	fa03 fc0e 	lsl.w	ip, r3, lr
 810044c:	bf28      	it	cs
 810044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100452:	fa43 f305 	asr.w	r3, r3, r5
 8100456:	18c0      	adds	r0, r0, r3
 8100458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100460:	d507      	bpl.n	8100472 <__adddf3+0xe6>
 8100462:	f04f 0e00 	mov.w	lr, #0
 8100466:	f1dc 0c00 	rsbs	ip, ip, #0
 810046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100476:	d31b      	bcc.n	81004b0 <__adddf3+0x124>
 8100478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810047c:	d30c      	bcc.n	8100498 <__adddf3+0x10c>
 810047e:	0849      	lsrs	r1, r1, #1
 8100480:	ea5f 0030 	movs.w	r0, r0, rrx
 8100484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100488:	f104 0401 	add.w	r4, r4, #1
 810048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8100490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8100494:	f080 809a 	bcs.w	81005cc <__adddf3+0x240>
 8100498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 810049c:	bf08      	it	eq
 810049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004a2:	f150 0000 	adcs.w	r0, r0, #0
 81004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004aa:	ea41 0105 	orr.w	r1, r1, r5
 81004ae:	bd30      	pop	{r4, r5, pc}
 81004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004b4:	4140      	adcs	r0, r0
 81004b6:	eb41 0101 	adc.w	r1, r1, r1
 81004ba:	3c01      	subs	r4, #1
 81004bc:	bf28      	it	cs
 81004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004c2:	d2e9      	bcs.n	8100498 <__adddf3+0x10c>
 81004c4:	f091 0f00 	teq	r1, #0
 81004c8:	bf04      	itt	eq
 81004ca:	4601      	moveq	r1, r0
 81004cc:	2000      	moveq	r0, #0
 81004ce:	fab1 f381 	clz	r3, r1
 81004d2:	bf08      	it	eq
 81004d4:	3320      	addeq	r3, #32
 81004d6:	f1a3 030b 	sub.w	r3, r3, #11
 81004da:	f1b3 0220 	subs.w	r2, r3, #32
 81004de:	da0c      	bge.n	81004fa <__adddf3+0x16e>
 81004e0:	320c      	adds	r2, #12
 81004e2:	dd08      	ble.n	81004f6 <__adddf3+0x16a>
 81004e4:	f102 0c14 	add.w	ip, r2, #20
 81004e8:	f1c2 020c 	rsb	r2, r2, #12
 81004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 81004f0:	fa21 f102 	lsr.w	r1, r1, r2
 81004f4:	e00c      	b.n	8100510 <__adddf3+0x184>
 81004f6:	f102 0214 	add.w	r2, r2, #20
 81004fa:	bfd8      	it	le
 81004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8100500:	fa01 f102 	lsl.w	r1, r1, r2
 8100504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100508:	bfdc      	itt	le
 810050a:	ea41 010c 	orrle.w	r1, r1, ip
 810050e:	4090      	lslle	r0, r2
 8100510:	1ae4      	subs	r4, r4, r3
 8100512:	bfa2      	ittt	ge
 8100514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100518:	4329      	orrge	r1, r5
 810051a:	bd30      	popge	{r4, r5, pc}
 810051c:	ea6f 0404 	mvn.w	r4, r4
 8100520:	3c1f      	subs	r4, #31
 8100522:	da1c      	bge.n	810055e <__adddf3+0x1d2>
 8100524:	340c      	adds	r4, #12
 8100526:	dc0e      	bgt.n	8100546 <__adddf3+0x1ba>
 8100528:	f104 0414 	add.w	r4, r4, #20
 810052c:	f1c4 0220 	rsb	r2, r4, #32
 8100530:	fa20 f004 	lsr.w	r0, r0, r4
 8100534:	fa01 f302 	lsl.w	r3, r1, r2
 8100538:	ea40 0003 	orr.w	r0, r0, r3
 810053c:	fa21 f304 	lsr.w	r3, r1, r4
 8100540:	ea45 0103 	orr.w	r1, r5, r3
 8100544:	bd30      	pop	{r4, r5, pc}
 8100546:	f1c4 040c 	rsb	r4, r4, #12
 810054a:	f1c4 0220 	rsb	r2, r4, #32
 810054e:	fa20 f002 	lsr.w	r0, r0, r2
 8100552:	fa01 f304 	lsl.w	r3, r1, r4
 8100556:	ea40 0003 	orr.w	r0, r0, r3
 810055a:	4629      	mov	r1, r5
 810055c:	bd30      	pop	{r4, r5, pc}
 810055e:	fa21 f004 	lsr.w	r0, r1, r4
 8100562:	4629      	mov	r1, r5
 8100564:	bd30      	pop	{r4, r5, pc}
 8100566:	f094 0f00 	teq	r4, #0
 810056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810056e:	bf06      	itte	eq
 8100570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100574:	3401      	addeq	r4, #1
 8100576:	3d01      	subne	r5, #1
 8100578:	e74e      	b.n	8100418 <__adddf3+0x8c>
 810057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810057e:	bf18      	it	ne
 8100580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100584:	d029      	beq.n	81005da <__adddf3+0x24e>
 8100586:	ea94 0f05 	teq	r4, r5
 810058a:	bf08      	it	eq
 810058c:	ea90 0f02 	teqeq	r0, r2
 8100590:	d005      	beq.n	810059e <__adddf3+0x212>
 8100592:	ea54 0c00 	orrs.w	ip, r4, r0
 8100596:	bf04      	itt	eq
 8100598:	4619      	moveq	r1, r3
 810059a:	4610      	moveq	r0, r2
 810059c:	bd30      	pop	{r4, r5, pc}
 810059e:	ea91 0f03 	teq	r1, r3
 81005a2:	bf1e      	ittt	ne
 81005a4:	2100      	movne	r1, #0
 81005a6:	2000      	movne	r0, #0
 81005a8:	bd30      	popne	{r4, r5, pc}
 81005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005ae:	d105      	bne.n	81005bc <__adddf3+0x230>
 81005b0:	0040      	lsls	r0, r0, #1
 81005b2:	4149      	adcs	r1, r1
 81005b4:	bf28      	it	cs
 81005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ba:	bd30      	pop	{r4, r5, pc}
 81005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005c0:	bf3c      	itt	cc
 81005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005c6:	bd30      	popcc	{r4, r5, pc}
 81005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005d4:	f04f 0000 	mov.w	r0, #0
 81005d8:	bd30      	pop	{r4, r5, pc}
 81005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005de:	bf1a      	itte	ne
 81005e0:	4619      	movne	r1, r3
 81005e2:	4610      	movne	r0, r2
 81005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005e8:	bf1c      	itt	ne
 81005ea:	460b      	movne	r3, r1
 81005ec:	4602      	movne	r2, r0
 81005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 81005f2:	bf06      	itte	eq
 81005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 81005f8:	ea91 0f03 	teqeq	r1, r3
 81005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100600:	bd30      	pop	{r4, r5, pc}
 8100602:	bf00      	nop

08100604 <__aeabi_ui2d>:
 8100604:	f090 0f00 	teq	r0, #0
 8100608:	bf04      	itt	eq
 810060a:	2100      	moveq	r1, #0
 810060c:	4770      	bxeq	lr
 810060e:	b530      	push	{r4, r5, lr}
 8100610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100618:	f04f 0500 	mov.w	r5, #0
 810061c:	f04f 0100 	mov.w	r1, #0
 8100620:	e750      	b.n	81004c4 <__adddf3+0x138>
 8100622:	bf00      	nop

08100624 <__aeabi_i2d>:
 8100624:	f090 0f00 	teq	r0, #0
 8100628:	bf04      	itt	eq
 810062a:	2100      	moveq	r1, #0
 810062c:	4770      	bxeq	lr
 810062e:	b530      	push	{r4, r5, lr}
 8100630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810063c:	bf48      	it	mi
 810063e:	4240      	negmi	r0, r0
 8100640:	f04f 0100 	mov.w	r1, #0
 8100644:	e73e      	b.n	81004c4 <__adddf3+0x138>
 8100646:	bf00      	nop

08100648 <__aeabi_f2d>:
 8100648:	0042      	lsls	r2, r0, #1
 810064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100656:	bf1f      	itttt	ne
 8100658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100664:	4770      	bxne	lr
 8100666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810066a:	bf08      	it	eq
 810066c:	4770      	bxeq	lr
 810066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100672:	bf04      	itt	eq
 8100674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100678:	4770      	bxeq	lr
 810067a:	b530      	push	{r4, r5, lr}
 810067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100688:	e71c      	b.n	81004c4 <__adddf3+0x138>
 810068a:	bf00      	nop

0810068c <__aeabi_ul2d>:
 810068c:	ea50 0201 	orrs.w	r2, r0, r1
 8100690:	bf08      	it	eq
 8100692:	4770      	bxeq	lr
 8100694:	b530      	push	{r4, r5, lr}
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	e00a      	b.n	81006b2 <__aeabi_l2d+0x16>

0810069c <__aeabi_l2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006aa:	d502      	bpl.n	81006b2 <__aeabi_l2d+0x16>
 81006ac:	4240      	negs	r0, r0
 81006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006be:	f43f aed8 	beq.w	8100472 <__adddf3+0xe6>
 81006c2:	f04f 0203 	mov.w	r2, #3
 81006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006ca:	bf18      	it	ne
 81006cc:	3203      	addne	r2, #3
 81006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006d2:	bf18      	it	ne
 81006d4:	3203      	addne	r2, #3
 81006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006da:	f1c2 0320 	rsb	r3, r2, #32
 81006de:	fa00 fc03 	lsl.w	ip, r0, r3
 81006e2:	fa20 f002 	lsr.w	r0, r0, r2
 81006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006ea:	ea40 000e 	orr.w	r0, r0, lr
 81006ee:	fa21 f102 	lsr.w	r1, r1, r2
 81006f2:	4414      	add	r4, r2
 81006f4:	e6bd      	b.n	8100472 <__adddf3+0xe6>
 81006f6:	bf00      	nop

081006f8 <__gedf2>:
 81006f8:	f04f 3cff 	mov.w	ip, #4294967295
 81006fc:	e006      	b.n	810070c <__cmpdf2+0x4>
 81006fe:	bf00      	nop

08100700 <__ledf2>:
 8100700:	f04f 0c01 	mov.w	ip, #1
 8100704:	e002      	b.n	810070c <__cmpdf2+0x4>
 8100706:	bf00      	nop

08100708 <__cmpdf2>:
 8100708:	f04f 0c01 	mov.w	ip, #1
 810070c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100710:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100714:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100718:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 810071c:	bf18      	it	ne
 810071e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100722:	d01b      	beq.n	810075c <__cmpdf2+0x54>
 8100724:	b001      	add	sp, #4
 8100726:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 810072a:	bf0c      	ite	eq
 810072c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100730:	ea91 0f03 	teqne	r1, r3
 8100734:	bf02      	ittt	eq
 8100736:	ea90 0f02 	teqeq	r0, r2
 810073a:	2000      	moveq	r0, #0
 810073c:	4770      	bxeq	lr
 810073e:	f110 0f00 	cmn.w	r0, #0
 8100742:	ea91 0f03 	teq	r1, r3
 8100746:	bf58      	it	pl
 8100748:	4299      	cmppl	r1, r3
 810074a:	bf08      	it	eq
 810074c:	4290      	cmpeq	r0, r2
 810074e:	bf2c      	ite	cs
 8100750:	17d8      	asrcs	r0, r3, #31
 8100752:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100756:	f040 0001 	orr.w	r0, r0, #1
 810075a:	4770      	bx	lr
 810075c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100764:	d102      	bne.n	810076c <__cmpdf2+0x64>
 8100766:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 810076a:	d107      	bne.n	810077c <__cmpdf2+0x74>
 810076c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100770:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100774:	d1d6      	bne.n	8100724 <__cmpdf2+0x1c>
 8100776:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 810077a:	d0d3      	beq.n	8100724 <__cmpdf2+0x1c>
 810077c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100780:	4770      	bx	lr
 8100782:	bf00      	nop

08100784 <__aeabi_cdrcmple>:
 8100784:	4684      	mov	ip, r0
 8100786:	4610      	mov	r0, r2
 8100788:	4662      	mov	r2, ip
 810078a:	468c      	mov	ip, r1
 810078c:	4619      	mov	r1, r3
 810078e:	4663      	mov	r3, ip
 8100790:	e000      	b.n	8100794 <__aeabi_cdcmpeq>
 8100792:	bf00      	nop

08100794 <__aeabi_cdcmpeq>:
 8100794:	b501      	push	{r0, lr}
 8100796:	f7ff ffb7 	bl	8100708 <__cmpdf2>
 810079a:	2800      	cmp	r0, #0
 810079c:	bf48      	it	mi
 810079e:	f110 0f00 	cmnmi.w	r0, #0
 81007a2:	bd01      	pop	{r0, pc}

081007a4 <__aeabi_dcmpeq>:
 81007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007a8:	f7ff fff4 	bl	8100794 <__aeabi_cdcmpeq>
 81007ac:	bf0c      	ite	eq
 81007ae:	2001      	moveq	r0, #1
 81007b0:	2000      	movne	r0, #0
 81007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 81007b6:	bf00      	nop

081007b8 <__aeabi_dcmplt>:
 81007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007bc:	f7ff ffea 	bl	8100794 <__aeabi_cdcmpeq>
 81007c0:	bf34      	ite	cc
 81007c2:	2001      	movcc	r0, #1
 81007c4:	2000      	movcs	r0, #0
 81007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 81007ca:	bf00      	nop

081007cc <__aeabi_dcmple>:
 81007cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007d0:	f7ff ffe0 	bl	8100794 <__aeabi_cdcmpeq>
 81007d4:	bf94      	ite	ls
 81007d6:	2001      	movls	r0, #1
 81007d8:	2000      	movhi	r0, #0
 81007da:	f85d fb08 	ldr.w	pc, [sp], #8
 81007de:	bf00      	nop

081007e0 <__aeabi_dcmpge>:
 81007e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007e4:	f7ff ffce 	bl	8100784 <__aeabi_cdrcmple>
 81007e8:	bf94      	ite	ls
 81007ea:	2001      	movls	r0, #1
 81007ec:	2000      	movhi	r0, #0
 81007ee:	f85d fb08 	ldr.w	pc, [sp], #8
 81007f2:	bf00      	nop

081007f4 <__aeabi_dcmpgt>:
 81007f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007f8:	f7ff ffc4 	bl	8100784 <__aeabi_cdrcmple>
 81007fc:	bf34      	ite	cc
 81007fe:	2001      	movcc	r0, #1
 8100800:	2000      	movcs	r0, #0
 8100802:	f85d fb08 	ldr.w	pc, [sp], #8
 8100806:	bf00      	nop

08100808 <__aeabi_d2iz>:
 8100808:	ea4f 0241 	mov.w	r2, r1, lsl #1
 810080c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100810:	d215      	bcs.n	810083e <__aeabi_d2iz+0x36>
 8100812:	d511      	bpl.n	8100838 <__aeabi_d2iz+0x30>
 8100814:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100818:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 810081c:	d912      	bls.n	8100844 <__aeabi_d2iz+0x3c>
 810081e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100822:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100826:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 810082a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 810082e:	fa23 f002 	lsr.w	r0, r3, r2
 8100832:	bf18      	it	ne
 8100834:	4240      	negne	r0, r0
 8100836:	4770      	bx	lr
 8100838:	f04f 0000 	mov.w	r0, #0
 810083c:	4770      	bx	lr
 810083e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100842:	d105      	bne.n	8100850 <__aeabi_d2iz+0x48>
 8100844:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100848:	bf08      	it	eq
 810084a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 810084e:	4770      	bx	lr
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	4770      	bx	lr
 8100856:	bf00      	nop

08100858 <__aeabi_uldivmod>:
 8100858:	b953      	cbnz	r3, 8100870 <__aeabi_uldivmod+0x18>
 810085a:	b94a      	cbnz	r2, 8100870 <__aeabi_uldivmod+0x18>
 810085c:	2900      	cmp	r1, #0
 810085e:	bf08      	it	eq
 8100860:	2800      	cmpeq	r0, #0
 8100862:	bf1c      	itt	ne
 8100864:	f04f 31ff 	movne.w	r1, #4294967295
 8100868:	f04f 30ff 	movne.w	r0, #4294967295
 810086c:	f000 b974 	b.w	8100b58 <__aeabi_idiv0>
 8100870:	f1ad 0c08 	sub.w	ip, sp, #8
 8100874:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100878:	f000 f806 	bl	8100888 <__udivmoddi4>
 810087c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100884:	b004      	add	sp, #16
 8100886:	4770      	bx	lr

08100888 <__udivmoddi4>:
 8100888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810088c:	9d08      	ldr	r5, [sp, #32]
 810088e:	4604      	mov	r4, r0
 8100890:	468e      	mov	lr, r1
 8100892:	2b00      	cmp	r3, #0
 8100894:	d14d      	bne.n	8100932 <__udivmoddi4+0xaa>
 8100896:	428a      	cmp	r2, r1
 8100898:	4694      	mov	ip, r2
 810089a:	d969      	bls.n	8100970 <__udivmoddi4+0xe8>
 810089c:	fab2 f282 	clz	r2, r2
 81008a0:	b152      	cbz	r2, 81008b8 <__udivmoddi4+0x30>
 81008a2:	fa01 f302 	lsl.w	r3, r1, r2
 81008a6:	f1c2 0120 	rsb	r1, r2, #32
 81008aa:	fa20 f101 	lsr.w	r1, r0, r1
 81008ae:	fa0c fc02 	lsl.w	ip, ip, r2
 81008b2:	ea41 0e03 	orr.w	lr, r1, r3
 81008b6:	4094      	lsls	r4, r2
 81008b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81008bc:	0c21      	lsrs	r1, r4, #16
 81008be:	fbbe f6f8 	udiv	r6, lr, r8
 81008c2:	fa1f f78c 	uxth.w	r7, ip
 81008c6:	fb08 e316 	mls	r3, r8, r6, lr
 81008ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 81008ce:	fb06 f107 	mul.w	r1, r6, r7
 81008d2:	4299      	cmp	r1, r3
 81008d4:	d90a      	bls.n	81008ec <__udivmoddi4+0x64>
 81008d6:	eb1c 0303 	adds.w	r3, ip, r3
 81008da:	f106 30ff 	add.w	r0, r6, #4294967295
 81008de:	f080 811f 	bcs.w	8100b20 <__udivmoddi4+0x298>
 81008e2:	4299      	cmp	r1, r3
 81008e4:	f240 811c 	bls.w	8100b20 <__udivmoddi4+0x298>
 81008e8:	3e02      	subs	r6, #2
 81008ea:	4463      	add	r3, ip
 81008ec:	1a5b      	subs	r3, r3, r1
 81008ee:	b2a4      	uxth	r4, r4
 81008f0:	fbb3 f0f8 	udiv	r0, r3, r8
 81008f4:	fb08 3310 	mls	r3, r8, r0, r3
 81008f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 81008fc:	fb00 f707 	mul.w	r7, r0, r7
 8100900:	42a7      	cmp	r7, r4
 8100902:	d90a      	bls.n	810091a <__udivmoddi4+0x92>
 8100904:	eb1c 0404 	adds.w	r4, ip, r4
 8100908:	f100 33ff 	add.w	r3, r0, #4294967295
 810090c:	f080 810a 	bcs.w	8100b24 <__udivmoddi4+0x29c>
 8100910:	42a7      	cmp	r7, r4
 8100912:	f240 8107 	bls.w	8100b24 <__udivmoddi4+0x29c>
 8100916:	4464      	add	r4, ip
 8100918:	3802      	subs	r0, #2
 810091a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810091e:	1be4      	subs	r4, r4, r7
 8100920:	2600      	movs	r6, #0
 8100922:	b11d      	cbz	r5, 810092c <__udivmoddi4+0xa4>
 8100924:	40d4      	lsrs	r4, r2
 8100926:	2300      	movs	r3, #0
 8100928:	e9c5 4300 	strd	r4, r3, [r5]
 810092c:	4631      	mov	r1, r6
 810092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100932:	428b      	cmp	r3, r1
 8100934:	d909      	bls.n	810094a <__udivmoddi4+0xc2>
 8100936:	2d00      	cmp	r5, #0
 8100938:	f000 80ef 	beq.w	8100b1a <__udivmoddi4+0x292>
 810093c:	2600      	movs	r6, #0
 810093e:	e9c5 0100 	strd	r0, r1, [r5]
 8100942:	4630      	mov	r0, r6
 8100944:	4631      	mov	r1, r6
 8100946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810094a:	fab3 f683 	clz	r6, r3
 810094e:	2e00      	cmp	r6, #0
 8100950:	d14a      	bne.n	81009e8 <__udivmoddi4+0x160>
 8100952:	428b      	cmp	r3, r1
 8100954:	d302      	bcc.n	810095c <__udivmoddi4+0xd4>
 8100956:	4282      	cmp	r2, r0
 8100958:	f200 80f9 	bhi.w	8100b4e <__udivmoddi4+0x2c6>
 810095c:	1a84      	subs	r4, r0, r2
 810095e:	eb61 0303 	sbc.w	r3, r1, r3
 8100962:	2001      	movs	r0, #1
 8100964:	469e      	mov	lr, r3
 8100966:	2d00      	cmp	r5, #0
 8100968:	d0e0      	beq.n	810092c <__udivmoddi4+0xa4>
 810096a:	e9c5 4e00 	strd	r4, lr, [r5]
 810096e:	e7dd      	b.n	810092c <__udivmoddi4+0xa4>
 8100970:	b902      	cbnz	r2, 8100974 <__udivmoddi4+0xec>
 8100972:	deff      	udf	#255	; 0xff
 8100974:	fab2 f282 	clz	r2, r2
 8100978:	2a00      	cmp	r2, #0
 810097a:	f040 8092 	bne.w	8100aa2 <__udivmoddi4+0x21a>
 810097e:	eba1 010c 	sub.w	r1, r1, ip
 8100982:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100986:	fa1f fe8c 	uxth.w	lr, ip
 810098a:	2601      	movs	r6, #1
 810098c:	0c20      	lsrs	r0, r4, #16
 810098e:	fbb1 f3f7 	udiv	r3, r1, r7
 8100992:	fb07 1113 	mls	r1, r7, r3, r1
 8100996:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810099a:	fb0e f003 	mul.w	r0, lr, r3
 810099e:	4288      	cmp	r0, r1
 81009a0:	d908      	bls.n	81009b4 <__udivmoddi4+0x12c>
 81009a2:	eb1c 0101 	adds.w	r1, ip, r1
 81009a6:	f103 38ff 	add.w	r8, r3, #4294967295
 81009aa:	d202      	bcs.n	81009b2 <__udivmoddi4+0x12a>
 81009ac:	4288      	cmp	r0, r1
 81009ae:	f200 80cb 	bhi.w	8100b48 <__udivmoddi4+0x2c0>
 81009b2:	4643      	mov	r3, r8
 81009b4:	1a09      	subs	r1, r1, r0
 81009b6:	b2a4      	uxth	r4, r4
 81009b8:	fbb1 f0f7 	udiv	r0, r1, r7
 81009bc:	fb07 1110 	mls	r1, r7, r0, r1
 81009c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 81009c4:	fb0e fe00 	mul.w	lr, lr, r0
 81009c8:	45a6      	cmp	lr, r4
 81009ca:	d908      	bls.n	81009de <__udivmoddi4+0x156>
 81009cc:	eb1c 0404 	adds.w	r4, ip, r4
 81009d0:	f100 31ff 	add.w	r1, r0, #4294967295
 81009d4:	d202      	bcs.n	81009dc <__udivmoddi4+0x154>
 81009d6:	45a6      	cmp	lr, r4
 81009d8:	f200 80bb 	bhi.w	8100b52 <__udivmoddi4+0x2ca>
 81009dc:	4608      	mov	r0, r1
 81009de:	eba4 040e 	sub.w	r4, r4, lr
 81009e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 81009e6:	e79c      	b.n	8100922 <__udivmoddi4+0x9a>
 81009e8:	f1c6 0720 	rsb	r7, r6, #32
 81009ec:	40b3      	lsls	r3, r6
 81009ee:	fa22 fc07 	lsr.w	ip, r2, r7
 81009f2:	ea4c 0c03 	orr.w	ip, ip, r3
 81009f6:	fa20 f407 	lsr.w	r4, r0, r7
 81009fa:	fa01 f306 	lsl.w	r3, r1, r6
 81009fe:	431c      	orrs	r4, r3
 8100a00:	40f9      	lsrs	r1, r7
 8100a02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100a06:	fa00 f306 	lsl.w	r3, r0, r6
 8100a0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8100a0e:	0c20      	lsrs	r0, r4, #16
 8100a10:	fa1f fe8c 	uxth.w	lr, ip
 8100a14:	fb09 1118 	mls	r1, r9, r8, r1
 8100a18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100a1c:	fb08 f00e 	mul.w	r0, r8, lr
 8100a20:	4288      	cmp	r0, r1
 8100a22:	fa02 f206 	lsl.w	r2, r2, r6
 8100a26:	d90b      	bls.n	8100a40 <__udivmoddi4+0x1b8>
 8100a28:	eb1c 0101 	adds.w	r1, ip, r1
 8100a2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8100a30:	f080 8088 	bcs.w	8100b44 <__udivmoddi4+0x2bc>
 8100a34:	4288      	cmp	r0, r1
 8100a36:	f240 8085 	bls.w	8100b44 <__udivmoddi4+0x2bc>
 8100a3a:	f1a8 0802 	sub.w	r8, r8, #2
 8100a3e:	4461      	add	r1, ip
 8100a40:	1a09      	subs	r1, r1, r0
 8100a42:	b2a4      	uxth	r4, r4
 8100a44:	fbb1 f0f9 	udiv	r0, r1, r9
 8100a48:	fb09 1110 	mls	r1, r9, r0, r1
 8100a4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100a50:	fb00 fe0e 	mul.w	lr, r0, lr
 8100a54:	458e      	cmp	lr, r1
 8100a56:	d908      	bls.n	8100a6a <__udivmoddi4+0x1e2>
 8100a58:	eb1c 0101 	adds.w	r1, ip, r1
 8100a5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8100a60:	d26c      	bcs.n	8100b3c <__udivmoddi4+0x2b4>
 8100a62:	458e      	cmp	lr, r1
 8100a64:	d96a      	bls.n	8100b3c <__udivmoddi4+0x2b4>
 8100a66:	3802      	subs	r0, #2
 8100a68:	4461      	add	r1, ip
 8100a6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8100a6e:	fba0 9402 	umull	r9, r4, r0, r2
 8100a72:	eba1 010e 	sub.w	r1, r1, lr
 8100a76:	42a1      	cmp	r1, r4
 8100a78:	46c8      	mov	r8, r9
 8100a7a:	46a6      	mov	lr, r4
 8100a7c:	d356      	bcc.n	8100b2c <__udivmoddi4+0x2a4>
 8100a7e:	d053      	beq.n	8100b28 <__udivmoddi4+0x2a0>
 8100a80:	b15d      	cbz	r5, 8100a9a <__udivmoddi4+0x212>
 8100a82:	ebb3 0208 	subs.w	r2, r3, r8
 8100a86:	eb61 010e 	sbc.w	r1, r1, lr
 8100a8a:	fa01 f707 	lsl.w	r7, r1, r7
 8100a8e:	fa22 f306 	lsr.w	r3, r2, r6
 8100a92:	40f1      	lsrs	r1, r6
 8100a94:	431f      	orrs	r7, r3
 8100a96:	e9c5 7100 	strd	r7, r1, [r5]
 8100a9a:	2600      	movs	r6, #0
 8100a9c:	4631      	mov	r1, r6
 8100a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100aa2:	f1c2 0320 	rsb	r3, r2, #32
 8100aa6:	40d8      	lsrs	r0, r3
 8100aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8100aac:	fa21 f303 	lsr.w	r3, r1, r3
 8100ab0:	4091      	lsls	r1, r2
 8100ab2:	4301      	orrs	r1, r0
 8100ab4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100ab8:	fa1f fe8c 	uxth.w	lr, ip
 8100abc:	fbb3 f0f7 	udiv	r0, r3, r7
 8100ac0:	fb07 3610 	mls	r6, r7, r0, r3
 8100ac4:	0c0b      	lsrs	r3, r1, #16
 8100ac6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100aca:	fb00 f60e 	mul.w	r6, r0, lr
 8100ace:	429e      	cmp	r6, r3
 8100ad0:	fa04 f402 	lsl.w	r4, r4, r2
 8100ad4:	d908      	bls.n	8100ae8 <__udivmoddi4+0x260>
 8100ad6:	eb1c 0303 	adds.w	r3, ip, r3
 8100ada:	f100 38ff 	add.w	r8, r0, #4294967295
 8100ade:	d22f      	bcs.n	8100b40 <__udivmoddi4+0x2b8>
 8100ae0:	429e      	cmp	r6, r3
 8100ae2:	d92d      	bls.n	8100b40 <__udivmoddi4+0x2b8>
 8100ae4:	3802      	subs	r0, #2
 8100ae6:	4463      	add	r3, ip
 8100ae8:	1b9b      	subs	r3, r3, r6
 8100aea:	b289      	uxth	r1, r1
 8100aec:	fbb3 f6f7 	udiv	r6, r3, r7
 8100af0:	fb07 3316 	mls	r3, r7, r6, r3
 8100af4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100af8:	fb06 f30e 	mul.w	r3, r6, lr
 8100afc:	428b      	cmp	r3, r1
 8100afe:	d908      	bls.n	8100b12 <__udivmoddi4+0x28a>
 8100b00:	eb1c 0101 	adds.w	r1, ip, r1
 8100b04:	f106 38ff 	add.w	r8, r6, #4294967295
 8100b08:	d216      	bcs.n	8100b38 <__udivmoddi4+0x2b0>
 8100b0a:	428b      	cmp	r3, r1
 8100b0c:	d914      	bls.n	8100b38 <__udivmoddi4+0x2b0>
 8100b0e:	3e02      	subs	r6, #2
 8100b10:	4461      	add	r1, ip
 8100b12:	1ac9      	subs	r1, r1, r3
 8100b14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100b18:	e738      	b.n	810098c <__udivmoddi4+0x104>
 8100b1a:	462e      	mov	r6, r5
 8100b1c:	4628      	mov	r0, r5
 8100b1e:	e705      	b.n	810092c <__udivmoddi4+0xa4>
 8100b20:	4606      	mov	r6, r0
 8100b22:	e6e3      	b.n	81008ec <__udivmoddi4+0x64>
 8100b24:	4618      	mov	r0, r3
 8100b26:	e6f8      	b.n	810091a <__udivmoddi4+0x92>
 8100b28:	454b      	cmp	r3, r9
 8100b2a:	d2a9      	bcs.n	8100a80 <__udivmoddi4+0x1f8>
 8100b2c:	ebb9 0802 	subs.w	r8, r9, r2
 8100b30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8100b34:	3801      	subs	r0, #1
 8100b36:	e7a3      	b.n	8100a80 <__udivmoddi4+0x1f8>
 8100b38:	4646      	mov	r6, r8
 8100b3a:	e7ea      	b.n	8100b12 <__udivmoddi4+0x28a>
 8100b3c:	4620      	mov	r0, r4
 8100b3e:	e794      	b.n	8100a6a <__udivmoddi4+0x1e2>
 8100b40:	4640      	mov	r0, r8
 8100b42:	e7d1      	b.n	8100ae8 <__udivmoddi4+0x260>
 8100b44:	46d0      	mov	r8, sl
 8100b46:	e77b      	b.n	8100a40 <__udivmoddi4+0x1b8>
 8100b48:	3b02      	subs	r3, #2
 8100b4a:	4461      	add	r1, ip
 8100b4c:	e732      	b.n	81009b4 <__udivmoddi4+0x12c>
 8100b4e:	4630      	mov	r0, r6
 8100b50:	e709      	b.n	8100966 <__udivmoddi4+0xde>
 8100b52:	4464      	add	r4, ip
 8100b54:	3802      	subs	r0, #2
 8100b56:	e742      	b.n	81009de <__udivmoddi4+0x156>

08100b58 <__aeabi_idiv0>:
 8100b58:	4770      	bx	lr
 8100b5a:	bf00      	nop

08100b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100b5c:	b480      	push	{r7}
 8100b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100b60:	4b09      	ldr	r3, [pc, #36]	; (8100b88 <SystemInit+0x2c>)
 8100b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100b66:	4a08      	ldr	r2, [pc, #32]	; (8100b88 <SystemInit+0x2c>)
 8100b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100b70:	4b05      	ldr	r3, [pc, #20]	; (8100b88 <SystemInit+0x2c>)
 8100b72:	691b      	ldr	r3, [r3, #16]
 8100b74:	4a04      	ldr	r2, [pc, #16]	; (8100b88 <SystemInit+0x2c>)
 8100b76:	f043 0310 	orr.w	r3, r3, #16
 8100b7a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100b7c:	bf00      	nop
 8100b7e:	46bd      	mov	sp, r7
 8100b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b84:	4770      	bx	lr
 8100b86:	bf00      	nop
 8100b88:	e000ed00 	.word	0xe000ed00

08100b8c <open_all_columns>:
 */

#include "level_2/board_opener.h"

void open_all_columns(void)
{
 8100b8c:	b580      	push	{r7, lr}
 8100b8e:	af00      	add	r7, sp, #0
	// THIS order of opening has to be preserved

	open_column_2(); 	// Opening Column 2
 8100b90:	f000 f824 	bl	8100bdc <open_column_2>

	open_column_6(); 	// Opening Column 6
 8100b94:	f000 f86a 	bl	8100c6c <open_column_6>

	open_column_7();	// Opening Column 7
 8100b98:	f000 f87a 	bl	8100c90 <open_column_7>

	open_column_4();	// Opening Column 4
 8100b9c:	f000 f842 	bl	8100c24 <open_column_4>

	open_column_1();	// Opening Column 1
 8100ba0:	f000 f80a 	bl	8100bb8 <open_column_1>

	open_column_5();	// Opening Column 5
 8100ba4:	f000 f850 	bl	8100c48 <open_column_5>

	open_column_3();	// Opening Column 3
 8100ba8:	f000 f82a 	bl	8100c00 <open_column_3>

	open_fully();		// Opening the board fully
 8100bac:	f000 f882 	bl	8100cb4 <open_fully>

	close();			// Closing the board fully
 8100bb0:	f000 f892 	bl	8100cd8 <close>
}
 8100bb4:	bf00      	nop
 8100bb6:	bd80      	pop	{r7, pc}

08100bb8 <open_column_1>:

void open_column_1(void)
{
 8100bb8:	b580      	push	{r7, lr}
 8100bba:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 1\n\r");
 8100bbc:	4806      	ldr	r0, [pc, #24]	; (8100bd8 <open_column_1+0x20>)
 8100bbe:	f002 fa55 	bl	810306c <send_msg>
	set_Slide_Servo(OPEN_COL_1);
 8100bc2:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8100bc6:	f000 ffcb 	bl	8101b60 <set_Slide_Servo>
	HAL_Delay(1000);
 8100bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100bce:	f002 fb55 	bl	810327c <HAL_Delay>
}
 8100bd2:	bf00      	nop
 8100bd4:	bd80      	pop	{r7, pc}
 8100bd6:	bf00      	nop
 8100bd8:	0810ae50 	.word	0x0810ae50

08100bdc <open_column_2>:

void open_column_2(void)
{
 8100bdc:	b580      	push	{r7, lr}
 8100bde:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 2\n\r");
 8100be0:	4806      	ldr	r0, [pc, #24]	; (8100bfc <open_column_2+0x20>)
 8100be2:	f002 fa43 	bl	810306c <send_msg>
	set_Slide_Servo(OPEN_COL_2);
 8100be6:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8100bea:	f000 ffb9 	bl	8101b60 <set_Slide_Servo>
	HAL_Delay(1000);
 8100bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100bf2:	f002 fb43 	bl	810327c <HAL_Delay>
}
 8100bf6:	bf00      	nop
 8100bf8:	bd80      	pop	{r7, pc}
 8100bfa:	bf00      	nop
 8100bfc:	0810ae64 	.word	0x0810ae64

08100c00 <open_column_3>:

void open_column_3(void)
{
 8100c00:	b580      	push	{r7, lr}
 8100c02:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 3\n\r");
 8100c04:	4806      	ldr	r0, [pc, #24]	; (8100c20 <open_column_3+0x20>)
 8100c06:	f002 fa31 	bl	810306c <send_msg>
	set_Slide_Servo(OPEN_COL_3);
 8100c0a:	eeb3 0a07 	vmov.f32	s0, #55	; 0x41b80000  23.0
 8100c0e:	f000 ffa7 	bl	8101b60 <set_Slide_Servo>
	HAL_Delay(1000);
 8100c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100c16:	f002 fb31 	bl	810327c <HAL_Delay>
}
 8100c1a:	bf00      	nop
 8100c1c:	bd80      	pop	{r7, pc}
 8100c1e:	bf00      	nop
 8100c20:	0810ae78 	.word	0x0810ae78

08100c24 <open_column_4>:

void open_column_4(void)
{
 8100c24:	b580      	push	{r7, lr}
 8100c26:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 4\n\r");
 8100c28:	4806      	ldr	r0, [pc, #24]	; (8100c44 <open_column_4+0x20>)
 8100c2a:	f002 fa1f 	bl	810306c <send_msg>
	set_Slide_Servo(OPEN_COL_4);
 8100c2e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8100c32:	f000 ff95 	bl	8101b60 <set_Slide_Servo>
	HAL_Delay(1000);
 8100c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100c3a:	f002 fb1f 	bl	810327c <HAL_Delay>
}
 8100c3e:	bf00      	nop
 8100c40:	bd80      	pop	{r7, pc}
 8100c42:	bf00      	nop
 8100c44:	0810ae8c 	.word	0x0810ae8c

08100c48 <open_column_5>:

void open_column_5(void)
{
 8100c48:	b580      	push	{r7, lr}
 8100c4a:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 5\n\r");
 8100c4c:	4806      	ldr	r0, [pc, #24]	; (8100c68 <open_column_5+0x20>)
 8100c4e:	f002 fa0d 	bl	810306c <send_msg>
	set_Slide_Servo(OPEN_COL_5);
 8100c52:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 8100c56:	f000 ff83 	bl	8101b60 <set_Slide_Servo>
	HAL_Delay(1000);
 8100c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100c5e:	f002 fb0d 	bl	810327c <HAL_Delay>
}
 8100c62:	bf00      	nop
 8100c64:	bd80      	pop	{r7, pc}
 8100c66:	bf00      	nop
 8100c68:	0810aea0 	.word	0x0810aea0

08100c6c <open_column_6>:

void open_column_6(void)
{
 8100c6c:	b580      	push	{r7, lr}
 8100c6e:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 6\n\r");
 8100c70:	4806      	ldr	r0, [pc, #24]	; (8100c8c <open_column_6+0x20>)
 8100c72:	f002 f9fb 	bl	810306c <send_msg>
	set_Slide_Servo(OPEN_COL_6);
 8100c76:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8100c7a:	f000 ff71 	bl	8101b60 <set_Slide_Servo>
	HAL_Delay(1000);
 8100c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100c82:	f002 fafb 	bl	810327c <HAL_Delay>
}
 8100c86:	bf00      	nop
 8100c88:	bd80      	pop	{r7, pc}
 8100c8a:	bf00      	nop
 8100c8c:	0810aeb4 	.word	0x0810aeb4

08100c90 <open_column_7>:

void open_column_7(void)
{
 8100c90:	b580      	push	{r7, lr}
 8100c92:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 7\n\r");
 8100c94:	4806      	ldr	r0, [pc, #24]	; (8100cb0 <open_column_7+0x20>)
 8100c96:	f002 f9e9 	bl	810306c <send_msg>
	set_Slide_Servo(OPEN_COL_7);
 8100c9a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8100c9e:	f000 ff5f 	bl	8101b60 <set_Slide_Servo>
	HAL_Delay(1000);
 8100ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100ca6:	f002 fae9 	bl	810327c <HAL_Delay>
}
 8100caa:	bf00      	nop
 8100cac:	bd80      	pop	{r7, pc}
 8100cae:	bf00      	nop
 8100cb0:	0810aec8 	.word	0x0810aec8

08100cb4 <open_fully>:

void open_fully(void)
{
 8100cb4:	b580      	push	{r7, lr}
 8100cb6:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening board fully\n\r");
 8100cb8:	4806      	ldr	r0, [pc, #24]	; (8100cd4 <open_fully+0x20>)
 8100cba:	f002 f9d7 	bl	810306c <send_msg>
	set_Slide_Servo(SLIDE_OPEN);
 8100cbe:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8100cc2:	f000 ff4d 	bl	8101b60 <set_Slide_Servo>
	HAL_Delay(1000);
 8100cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100cca:	f002 fad7 	bl	810327c <HAL_Delay>
}
 8100cce:	bf00      	nop
 8100cd0:	bd80      	pop	{r7, pc}
 8100cd2:	bf00      	nop
 8100cd4:	0810aedc 	.word	0x0810aedc

08100cd8 <close>:

void close(void)
{
 8100cd8:	b580      	push	{r7, lr}
 8100cda:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rClosing board fully\n\r");
 8100cdc:	4806      	ldr	r0, [pc, #24]	; (8100cf8 <close+0x20>)
 8100cde:	f002 f9c5 	bl	810306c <send_msg>
	set_Slide_Servo(SLIDE_CLOSED);
 8100ce2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8100ce6:	f000 ff3b 	bl	8101b60 <set_Slide_Servo>
	HAL_Delay(1000);
 8100cea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100cee:	f002 fac5 	bl	810327c <HAL_Delay>
}
 8100cf2:	bf00      	nop
 8100cf4:	bd80      	pop	{r7, pc}
 8100cf6:	bf00      	nop
 8100cf8:	0810aef4 	.word	0x0810aef4

08100cfc <start_PWM>:
#include "level_2/init_CM4.h"


void start_PWM(void)
/* start_PWM: Function which initialises the PWM TIMERs 2,13,14. */
{
 8100cfc:	b580      	push	{r7, lr}
 8100cfe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8100d00:	2100      	movs	r1, #0
 8100d02:	4808      	ldr	r0, [pc, #32]	; (8100d24 <start_PWM+0x28>)
 8100d04:	f007 f9ea 	bl	81080dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8100d08:	2100      	movs	r1, #0
 8100d0a:	4807      	ldr	r0, [pc, #28]	; (8100d28 <start_PWM+0x2c>)
 8100d0c:	f007 f9e6 	bl	81080dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8100d10:	2108      	movs	r1, #8
 8100d12:	4806      	ldr	r0, [pc, #24]	; (8100d2c <start_PWM+0x30>)
 8100d14:	f007 f9e2 	bl	81080dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8100d18:	210c      	movs	r1, #12
 8100d1a:	4804      	ldr	r0, [pc, #16]	; (8100d2c <start_PWM+0x30>)
 8100d1c:	f007 f9de 	bl	81080dc <HAL_TIM_PWM_Start>
}
 8100d20:	bf00      	nop
 8100d22:	bd80      	pop	{r7, pc}
 8100d24:	10000304 	.word	0x10000304
 8100d28:	10000350 	.word	0x10000350
 8100d2c:	100001d4 	.word	0x100001d4

08100d30 <init_Movement>:

void init_Movement(void)
/* start_Movement: Function which initialises the motors and servos */
{
 8100d30:	b580      	push	{r7, lr}
 8100d32:	af00      	add	r7, sp, #0
	initMotors();
 8100d34:	f000 fb94 	bl	8101460 <initMotors>
	set_Enable_Power();
 8100d38:	f001 fb76 	bl	8102428 <set_Enable_Power>
	start_PWM();
 8100d3c:	f7ff ffde 	bl	8100cfc <start_PWM>
}
 8100d40:	bf00      	nop
 8100d42:	bd80      	pop	{r7, pc}

08100d44 <init_MX_init>:

void init_MX_init(void)
/* start_MX_init: Function which initialises the STM32H peripherals */
{
 8100d44:	b580      	push	{r7, lr}
 8100d46:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8100d48:	f001 f8aa 	bl	8101ea0 <MX_ADC1_Init>
	MX_I2C1_Init();
 8100d4c:	f001 fba6 	bl	810249c <MX_I2C1_Init>
	MX_TIM2_Init();
 8100d50:	f001 fca0 	bl	8102694 <MX_TIM2_Init>
	MX_TIM3_Init();
 8100d54:	f001 fd02 	bl	810275c <MX_TIM3_Init>
	MX_TIM4_Init();
 8100d58:	f001 fd56 	bl	8102808 <MX_TIM4_Init>
	MX_TIM7_Init();
 8100d5c:	f001 fdaa 	bl	81028b4 <MX_TIM7_Init>
	MX_TIM13_Init();
 8100d60:	f001 fdde 	bl	8102920 <MX_TIM13_Init>
	MX_TIM14_Init();
 8100d64:	f001 fe2a 	bl	81029bc <MX_TIM14_Init>

	HAL_TIM_Base_Start_IT(&htim7); // activate interrupt for TIM7
 8100d68:	4802      	ldr	r0, [pc, #8]	; (8100d74 <init_MX_init+0x30>)
 8100d6a:	f007 f8e7 	bl	8107f3c <HAL_TIM_Base_Start_IT>

}
 8100d6e:	bf00      	nop
 8100d70:	bd80      	pop	{r7, pc}
 8100d72:	bf00      	nop
 8100d74:	100002b8 	.word	0x100002b8

08100d78 <init_Start_Up>:
void init_Start_Up(void)
/* init_Start_Up: Function to initialise the whole system and set inital values to PWMs
 *	The microcontroller peripherals. The Motors and Servos.
 *	Homes the servos.
 */
{
 8100d78:	b580      	push	{r7, lr}
 8100d7a:	af00      	add	r7, sp, #0
	// TODO: init global vars

	send_msg((uint8_t*)"\r!Initialising Micro-controller Signals!\n\r");
 8100d7c:	481c      	ldr	r0, [pc, #112]	; (8100df0 <init_Start_Up+0x78>)
 8100d7e:	f002 f975 	bl	810306c <send_msg>
	init_MX_init();
 8100d82:	f7ff ffdf 	bl	8100d44 <init_MX_init>
	HAL_Delay(50);
 8100d86:	2032      	movs	r0, #50	; 0x32
 8100d88:	f002 fa78 	bl	810327c <HAL_Delay>

	send_msg((uint8_t*)"\r!Initialising movement signals!\n\r");
 8100d8c:	4819      	ldr	r0, [pc, #100]	; (8100df4 <init_Start_Up+0x7c>)
 8100d8e:	f002 f96d 	bl	810306c <send_msg>
	init_Movement();
 8100d92:	f7ff ffcd 	bl	8100d30 <init_Movement>
	HAL_Delay(50);
 8100d96:	2032      	movs	r0, #50	; 0x32
 8100d98:	f002 fa70 	bl	810327c <HAL_Delay>

	send_msg((uint8_t*)"\rHoming Motors\n\r");
 8100d9c:	4816      	ldr	r0, [pc, #88]	; (8100df8 <init_Start_Up+0x80>)
 8100d9e:	f002 f965 	bl	810306c <send_msg>
	HAL_Delay(50);
 8100da2:	2032      	movs	r0, #50	; 0x32
 8100da4:	f002 fa6a 	bl	810327c <HAL_Delay>

	HomeMotors(1, 1); // homing motors
 8100da8:	2101      	movs	r1, #1
 8100daa:	2001      	movs	r0, #1
 8100dac:	f000 fb8e 	bl	81014cc <HomeMotors>
	HAL_Delay(50);
 8100db0:	2032      	movs	r0, #50	; 0x32
 8100db2:	f002 fa63 	bl	810327c <HAL_Delay>

	send_msg((uint8_t*)"\r########Motors Homed########\n\r");
 8100db6:	4811      	ldr	r0, [pc, #68]	; (8100dfc <init_Start_Up+0x84>)
 8100db8:	f002 f958 	bl	810306c <send_msg>
	HAL_Delay(50);
 8100dbc:	2032      	movs	r0, #50	; 0x32
 8100dbe:	f002 fa5d 	bl	810327c <HAL_Delay>

	send_msg((uint8_t*)"\rHoming servos\n\r");
 8100dc2:	480f      	ldr	r0, [pc, #60]	; (8100e00 <init_Start_Up+0x88>)
 8100dc4:	f002 f952 	bl	810306c <send_msg>
	HAL_Delay(50);
 8100dc8:	2032      	movs	r0, #50	; 0x32
 8100dca:	f002 fa57 	bl	810327c <HAL_Delay>

	set_Slide_Servo(SLIDE_CLOSED);
 8100dce:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8100dd2:	f000 fec5 	bl	8101b60 <set_Slide_Servo>
	set_Rotate_Servo(ROTATE_NEUTRAL);
 8100dd6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8100e04 <init_Start_Up+0x8c>
 8100dda:	f000 fe8b 	bl	8101af4 <set_Rotate_Servo>
	send_msg((uint8_t*)"\r########Servos Homed########\n\r");
 8100dde:	480a      	ldr	r0, [pc, #40]	; (8100e08 <init_Start_Up+0x90>)
 8100de0:	f002 f944 	bl	810306c <send_msg>
	HAL_Delay(50);
 8100de4:	2032      	movs	r0, #50	; 0x32
 8100de6:	f002 fa49 	bl	810327c <HAL_Delay>

}
 8100dea:	bf00      	nop
 8100dec:	bd80      	pop	{r7, pc}
 8100dee:	bf00      	nop
 8100df0:	0810af0c 	.word	0x0810af0c
 8100df4:	0810af38 	.word	0x0810af38
 8100df8:	0810af5c 	.word	0x0810af5c
 8100dfc:	0810af70 	.word	0x0810af70
 8100e00:	0810af90 	.word	0x0810af90
 8100e04:	40a9999a 	.word	0x40a9999a
 8100e08:	0810afa4 	.word	0x0810afa4

08100e0c <activate_HSEM_Notifications>:
#include "level_2/task_manager.h"

void activate_HSEM_Notifications(void)
/* activate_HSEM_Notifications: Called in the beginning of the
 * program to activate notifications to look out for (ones arriving from CM7) */
{
 8100e0c:	b580      	push	{r7, lr}
 8100e0e:	af00      	add	r7, sp, #0
	HAL_HSEM_ActivateNotification(HSEM_CM7_TO_CM4_MASK);
 8100e10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8100e14:	f003 fe26 	bl	8104a64 <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_CM4_INIT_MASK);
 8100e18:	2004      	movs	r0, #4
 8100e1a:	f003 fe23 	bl	8104a64 <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_ROBOT_TURN_MASK);
 8100e1e:	2010      	movs	r0, #16
 8100e20:	f003 fe20 	bl	8104a64 <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_USER_TURN_MASK);
 8100e24:	2008      	movs	r0, #8
 8100e26:	f003 fe1d 	bl	8104a64 <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_GAME_END_MASK);
 8100e2a:	2020      	movs	r0, #32
 8100e2c:	f003 fe1a 	bl	8104a64 <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_CLEAN_UP_MASK);
 8100e30:	2040      	movs	r0, #64	; 0x40
 8100e32:	f003 fe17 	bl	8104a64 <HAL_HSEM_ActivateNotification>
}
 8100e36:	bf00      	nop
 8100e38:	bd80      	pop	{r7, pc}
	...

08100e3c <HAL_HSEM_FreeCallback>:

void HAL_HSEM_FreeCallback(uint32_t SemMask)
/* Function is called automatically when a semaphore is released
 * This function takes care of HSEM's released from Cortex-M7 */
{
 8100e3c:	b580      	push	{r7, lr}
 8100e3e:	b082      	sub	sp, #8
 8100e40:	af00      	add	r7, sp, #0
 8100e42:	6078      	str	r0, [r7, #4]
	// Handle the semaphore release event
	switch (SemMask)
 8100e44:	687b      	ldr	r3, [r7, #4]
 8100e46:	2b20      	cmp	r3, #32
 8100e48:	d844      	bhi.n	8100ed4 <HAL_HSEM_FreeCallback+0x98>
 8100e4a:	687b      	ldr	r3, [r7, #4]
 8100e4c:	2b04      	cmp	r3, #4
 8100e4e:	d368      	bcc.n	8100f22 <HAL_HSEM_FreeCallback+0xe6>
 8100e50:	687b      	ldr	r3, [r7, #4]
 8100e52:	3b04      	subs	r3, #4
 8100e54:	2b1c      	cmp	r3, #28
 8100e56:	d864      	bhi.n	8100f22 <HAL_HSEM_FreeCallback+0xe6>
 8100e58:	a201      	add	r2, pc, #4	; (adr r2, 8100e60 <HAL_HSEM_FreeCallback+0x24>)
 8100e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100e5e:	bf00      	nop
 8100e60:	08100edd 	.word	0x08100edd
 8100e64:	08100f23 	.word	0x08100f23
 8100e68:	08100f23 	.word	0x08100f23
 8100e6c:	08100f23 	.word	0x08100f23
 8100e70:	08100ef9 	.word	0x08100ef9
 8100e74:	08100f23 	.word	0x08100f23
 8100e78:	08100f23 	.word	0x08100f23
 8100e7c:	08100f23 	.word	0x08100f23
 8100e80:	08100f23 	.word	0x08100f23
 8100e84:	08100f23 	.word	0x08100f23
 8100e88:	08100f23 	.word	0x08100f23
 8100e8c:	08100f23 	.word	0x08100f23
 8100e90:	08100eeb 	.word	0x08100eeb
 8100e94:	08100f23 	.word	0x08100f23
 8100e98:	08100f23 	.word	0x08100f23
 8100e9c:	08100f23 	.word	0x08100f23
 8100ea0:	08100f23 	.word	0x08100f23
 8100ea4:	08100f23 	.word	0x08100f23
 8100ea8:	08100f23 	.word	0x08100f23
 8100eac:	08100f23 	.word	0x08100f23
 8100eb0:	08100f23 	.word	0x08100f23
 8100eb4:	08100f23 	.word	0x08100f23
 8100eb8:	08100f23 	.word	0x08100f23
 8100ebc:	08100f23 	.word	0x08100f23
 8100ec0:	08100f23 	.word	0x08100f23
 8100ec4:	08100f23 	.word	0x08100f23
 8100ec8:	08100f23 	.word	0x08100f23
 8100ecc:	08100f23 	.word	0x08100f23
 8100ed0:	08100f07 	.word	0x08100f07
 8100ed4:	687b      	ldr	r3, [r7, #4]
 8100ed6:	2b40      	cmp	r3, #64	; 0x40
 8100ed8:	d01c      	beq.n	8100f14 <HAL_HSEM_FreeCallback+0xd8>
		current_state_CM4 = STATE_CLEAN_UP; // change state according to command from CM7
		HAL_HSEM_ActivateNotification(HSEM_CLEAN_UP_MASK); // reactivate notification
		break;

	default:
		break;
 8100eda:	e022      	b.n	8100f22 <HAL_HSEM_FreeCallback+0xe6>
		current_state_CM4 = STATE_INIT; // change state according to command from CM7
 8100edc:	4b13      	ldr	r3, [pc, #76]	; (8100f2c <HAL_HSEM_FreeCallback+0xf0>)
 8100ede:	2200      	movs	r2, #0
 8100ee0:	601a      	str	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_CM4_INIT_MASK); // reactivate notification
 8100ee2:	2004      	movs	r0, #4
 8100ee4:	f003 fdbe 	bl	8104a64 <HAL_HSEM_ActivateNotification>
		break;
 8100ee8:	e01c      	b.n	8100f24 <HAL_HSEM_FreeCallback+0xe8>
		current_state_CM4 = STATE_ROBOT_TURN; // change state according to command from CM7
 8100eea:	4b10      	ldr	r3, [pc, #64]	; (8100f2c <HAL_HSEM_FreeCallback+0xf0>)
 8100eec:	2202      	movs	r2, #2
 8100eee:	601a      	str	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_ROBOT_TURN_MASK); // reactivate notification
 8100ef0:	2010      	movs	r0, #16
 8100ef2:	f003 fdb7 	bl	8104a64 <HAL_HSEM_ActivateNotification>
		break;
 8100ef6:	e015      	b.n	8100f24 <HAL_HSEM_FreeCallback+0xe8>
		current_state_CM4 = STATE_USER_TURN; // change state according to command from CM7
 8100ef8:	4b0c      	ldr	r3, [pc, #48]	; (8100f2c <HAL_HSEM_FreeCallback+0xf0>)
 8100efa:	2203      	movs	r2, #3
 8100efc:	601a      	str	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_USER_TURN_MASK); // reactivate notification
 8100efe:	2008      	movs	r0, #8
 8100f00:	f003 fdb0 	bl	8104a64 <HAL_HSEM_ActivateNotification>
		break;
 8100f04:	e00e      	b.n	8100f24 <HAL_HSEM_FreeCallback+0xe8>
		current_state_CM4 = STATE_GAME_END; // change state according to command from CM7
 8100f06:	4b09      	ldr	r3, [pc, #36]	; (8100f2c <HAL_HSEM_FreeCallback+0xf0>)
 8100f08:	2206      	movs	r2, #6
 8100f0a:	601a      	str	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_GAME_END_MASK); // reactivate notification
 8100f0c:	2020      	movs	r0, #32
 8100f0e:	f003 fda9 	bl	8104a64 <HAL_HSEM_ActivateNotification>
		break;
 8100f12:	e007      	b.n	8100f24 <HAL_HSEM_FreeCallback+0xe8>
		current_state_CM4 = STATE_CLEAN_UP; // change state according to command from CM7
 8100f14:	4b05      	ldr	r3, [pc, #20]	; (8100f2c <HAL_HSEM_FreeCallback+0xf0>)
 8100f16:	2204      	movs	r2, #4
 8100f18:	601a      	str	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_CLEAN_UP_MASK); // reactivate notification
 8100f1a:	2040      	movs	r0, #64	; 0x40
 8100f1c:	f003 fda2 	bl	8104a64 <HAL_HSEM_ActivateNotification>
		break;
 8100f20:	e000      	b.n	8100f24 <HAL_HSEM_FreeCallback+0xe8>
		break;
 8100f22:	bf00      	nop
	}
}
 8100f24:	bf00      	nop
 8100f26:	3708      	adds	r7, #8
 8100f28:	46bd      	mov	sp, r7
 8100f2a:	bd80      	pop	{r7, pc}
 8100f2c:	10000010 	.word	0x10000010

08100f30 <gameplay_loop_CM4>:

void gameplay_loop_CM4(int state)
// gameplay_loop_CM4: The main logic of Cortex-M4
{
 8100f30:	b580      	push	{r7, lr}
 8100f32:	b082      	sub	sp, #8
 8100f34:	af00      	add	r7, sp, #0
 8100f36:	6078      	str	r0, [r7, #4]
	switch (state)
 8100f38:	687b      	ldr	r3, [r7, #4]
 8100f3a:	2b06      	cmp	r3, #6
 8100f3c:	d825      	bhi.n	8100f8a <gameplay_loop_CM4+0x5a>
 8100f3e:	a201      	add	r2, pc, #4	; (adr r2, 8100f44 <gameplay_loop_CM4+0x14>)
 8100f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100f44:	08100f61 	.word	0x08100f61
 8100f48:	08100f67 	.word	0x08100f67
 8100f4c:	08100f6d 	.word	0x08100f6d
 8100f50:	08100f73 	.word	0x08100f73
 8100f54:	08100f79 	.word	0x08100f79
 8100f58:	08100f7f 	.word	0x08100f7f
 8100f5c:	08100f85 	.word	0x08100f85
	{
	case STATE_INIT:
		exec_state_init();
 8100f60:	f000 f818 	bl	8100f94 <exec_state_init>
		break;
 8100f64:	e012      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	case STATE_IDLE:
		exec_state_idle();
 8100f66:	f000 f827 	bl	8100fb8 <exec_state_idle>
		break;
 8100f6a:	e00f      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	case STATE_ROBOT_TURN:
		exec_state_robot_move();
 8100f6c:	f000 f82e 	bl	8100fcc <exec_state_robot_move>
		break;
 8100f70:	e00c      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	case STATE_USER_TURN:
		exec_state_user_move();
 8100f72:	f000 f879 	bl	8101068 <exec_state_user_move>
		break;
 8100f76:	e009      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	case STATE_CLEAN_UP:
		exec_state_clean_up();
 8100f78:	f000 f894 	bl	81010a4 <exec_state_clean_up>
		break;
 8100f7c:	e006      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	case STATE_CHEAT_DETECTED:
		exec_state_cheat_detected();
 8100f7e:	f000 f8a3 	bl	81010c8 <exec_state_cheat_detected>
		break;
 8100f82:	e003      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	case STATE_GAME_END:
		exec_state_game_end();
 8100f84:	f000 f8b0 	bl	81010e8 <exec_state_game_end>
		break;
 8100f88:	e000      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	default: // im not sure what needs to happen here yet
		// maybe my default should be idle, maybe not
		break;
 8100f8a:	bf00      	nop
	}
}
 8100f8c:	bf00      	nop
 8100f8e:	3708      	adds	r7, #8
 8100f90:	46bd      	mov	sp, r7
 8100f92:	bd80      	pop	{r7, pc}

08100f94 <exec_state_init>:

void exec_state_init(void)
{
 8100f94:	b580      	push	{r7, lr}
 8100f96:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r🟢🟢🟢 Executing STATE INIT 🟢🟢🟢\n\r");
 8100f98:	4806      	ldr	r0, [pc, #24]	; (8100fb4 <exec_state_init+0x20>)
 8100f9a:	f002 f867 	bl	810306c <send_msg>

	// initialize necessary signals
	// home procedure
	open_all_columns();
 8100f9e:	f7ff fdf5 	bl	8100b8c <open_all_columns>

	HSEM_TAKE_RELEASE(HSEM_CM4_DONE); 	// tell CM7 6that CM4 is done with task
 8100fa2:	2001      	movs	r0, #1
 8100fa4:	f003 fd30 	bl	8104a08 <HAL_HSEM_FastTake>
 8100fa8:	2100      	movs	r1, #0
 8100faa:	2001      	movs	r0, #1
 8100fac:	f003 fd46 	bl	8104a3c <HAL_HSEM_Release>
}
 8100fb0:	bf00      	nop
 8100fb2:	bd80      	pop	{r7, pc}
 8100fb4:	0810afc4 	.word	0x0810afc4

08100fb8 <exec_state_idle>:

void exec_state_idle(void)
{
 8100fb8:	b580      	push	{r7, lr}
 8100fba:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r⚡⚡⚡ Executing STATE IDLE ⚡⚡⚡\n\r");
 8100fbc:	4802      	ldr	r0, [pc, #8]	; (8100fc8 <exec_state_idle+0x10>)
 8100fbe:	f002 f855 	bl	810306c <send_msg>
	/* Do nothing
	 A perfect place to check for current score and determine if the game ends
	 or check for a cheat move */
}
 8100fc2:	bf00      	nop
 8100fc4:	bd80      	pop	{r7, pc}
 8100fc6:	bf00      	nop
 8100fc8:	0810aff8 	.word	0x0810aff8

08100fcc <exec_state_robot_move>:

void exec_state_robot_move(void)
{
 8100fcc:	b580      	push	{r7, lr}
 8100fce:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r⚡⚡⚡ Executing STATE ROBOT TURN ⚡⚡⚡\n\r");
 8100fd0:	4821      	ldr	r0, [pc, #132]	; (8101058 <exec_state_robot_move+0x8c>)
 8100fd2:	f002 f84b 	bl	810306c <send_msg>
	// access "column to be played at" from memory
	// move to that position

	send_msg_data((uint8_t*) "\r##### Moving to pos X: %d #####\n\r",
 8100fd6:	210c      	movs	r1, #12
 8100fd8:	4820      	ldr	r0, [pc, #128]	; (810105c <exec_state_robot_move+0x90>)
 8100fda:	f002 f85b 	bl	8103094 <send_msg_data>
	X_POS_STACK_3);
	send_msg_data((uint8_t*) "\r##### Moving to pos Z: %d #####\n\r",
 8100fde:	210f      	movs	r1, #15
 8100fe0:	481f      	ldr	r0, [pc, #124]	; (8101060 <exec_state_robot_move+0x94>)
 8100fe2:	f002 f857 	bl	8103094 <send_msg_data>
	Z_POS_STORE_TOP);
	move_to_X_and_Z(X_POS_STACK_3, Z_POS_STORE_TOP); // moves to above storage number 3
 8100fe6:	210f      	movs	r1, #15
 8100fe8:	200c      	movs	r0, #12
 8100fea:	f000 fa41 	bl	8101470 <move_to_X_and_Z>
	HAL_Delay(1500);
 8100fee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8100ff2:	f002 f943 	bl	810327c <HAL_Delay>
	set_Rotate_Servo(ROTATE_TO_STORE); 				// rotates end-effector down
 8100ff6:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8101064 <exec_state_robot_move+0x98>
 8100ffa:	f000 fd7b 	bl	8101af4 <set_Rotate_Servo>
	HAL_Delay(500);
 8100ffe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101002:	f002 f93b 	bl	810327c <HAL_Delay>

	move_to_X_and_Z(X_POS_STACK_3, Z_POS_STORE_6); 	// moves down to place token
 8101006:	2107      	movs	r1, #7
 8101008:	200c      	movs	r0, #12
 810100a:	f000 fa31 	bl	8101470 <move_to_X_and_Z>
	HAL_Delay(1500);
 810100e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8101012:	f002 f933 	bl	810327c <HAL_Delay>

	move_to_X_and_Z(X_POS_STACK_3, Z_POS_STORE_TOP); // moves to above storage number 3 (goes back  up safely)
 8101016:	210f      	movs	r1, #15
 8101018:	200c      	movs	r0, #12
 810101a:	f000 fa29 	bl	8101470 <move_to_X_and_Z>
	HAL_Delay(500);
 810101e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101022:	f002 f92b 	bl	810327c <HAL_Delay>

	send_msg_data((uint8_t*) "\r##### Moving to pos X: %d #####\n\r",
 8101026:	2101      	movs	r1, #1
 8101028:	480c      	ldr	r0, [pc, #48]	; (810105c <exec_state_robot_move+0x90>)
 810102a:	f002 f833 	bl	8103094 <send_msg_data>
	X_POS_COL_1);
	send_msg_data((uint8_t*) "\r##### Moving to pos Z: %d #####\n\r",
 810102e:	2137      	movs	r1, #55	; 0x37
 8101030:	480b      	ldr	r0, [pc, #44]	; (8101060 <exec_state_robot_move+0x94>)
 8101032:	f002 f82f 	bl	8103094 <send_msg_data>
	Z_POS_TOP);
	move_to_X_and_Z(X_POS_COL_1, Z_POS_TOP); // Moving above col 1 and going down to drop token
 8101036:	2137      	movs	r1, #55	; 0x37
 8101038:	2001      	movs	r0, #1
 810103a:	f000 fa19 	bl	8101470 <move_to_X_and_Z>
	HAL_Delay(1000);
 810103e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101042:	f002 f91b 	bl	810327c <HAL_Delay>

	HSEM_TAKE_RELEASE(HSEM_CM4_DONE); 	// tell CM7 that CM4 is done
 8101046:	2001      	movs	r0, #1
 8101048:	f003 fcde 	bl	8104a08 <HAL_HSEM_FastTake>
 810104c:	2100      	movs	r1, #0
 810104e:	2001      	movs	r0, #1
 8101050:	f003 fcf4 	bl	8104a3c <HAL_HSEM_Release>
}
 8101054:	bf00      	nop
 8101056:	bd80      	pop	{r7, pc}
 8101058:	0810b024 	.word	0x0810b024
 810105c:	0810b058 	.word	0x0810b058
 8101060:	0810b07c 	.word	0x0810b07c
 8101064:	41533333 	.word	0x41533333

08101068 <exec_state_user_move>:

void exec_state_user_move(void)
{
 8101068:	b580      	push	{r7, lr}
 810106a:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r⚡⚡⚡ Executing STATE USER MOVE ⚡⚡⚡\n\r");
 810106c:	480c      	ldr	r0, [pc, #48]	; (81010a0 <exec_state_user_move+0x38>)
 810106e:	f001 fffd 	bl	810306c <send_msg>
	while (1)
	{
		if (checkcoin() != 9 && checkcoin() != -1)
 8101072:	f000 f94d 	bl	8101310 <checkcoin>
 8101076:	4603      	mov	r3, r0
 8101078:	2b09      	cmp	r3, #9
 810107a:	d0fa      	beq.n	8101072 <exec_state_user_move+0xa>
 810107c:	f000 f948 	bl	8101310 <checkcoin>
 8101080:	4603      	mov	r3, r0
 8101082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101086:	d0f4      	beq.n	8101072 <exec_state_user_move+0xa>
		{
			update_board_mem();
 8101088:	f000 f97a 	bl	8101380 <update_board_mem>
			HSEM_TAKE_RELEASE(HSEM_CM4_DONE); // tell CM7 that CM4 is done with task
 810108c:	2001      	movs	r0, #1
 810108e:	f003 fcbb 	bl	8104a08 <HAL_HSEM_FastTake>
 8101092:	2100      	movs	r1, #0
 8101094:	2001      	movs	r0, #1
 8101096:	f003 fcd1 	bl	8104a3c <HAL_HSEM_Release>
			break;
 810109a:	bf00      	nop
		}
	}
}
 810109c:	bf00      	nop
 810109e:	bd80      	pop	{r7, pc}
 81010a0:	0810b0a0 	.word	0x0810b0a0

081010a4 <exec_state_clean_up>:

void exec_state_clean_up(void)
{
 81010a4:	b580      	push	{r7, lr}
 81010a6:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r⚡⚡⚡ Executing STATE CLEAN-UP ⚡⚡⚡\n\r");
 81010a8:	4806      	ldr	r0, [pc, #24]	; (81010c4 <exec_state_clean_up+0x20>)
 81010aa:	f001 ffdf 	bl	810306c <send_msg>

	open_all_columns();
 81010ae:	f7ff fd6d 	bl	8100b8c <open_all_columns>

	HSEM_TAKE_RELEASE(HSEM_CM4_DONE);	// tell CM7 that CM4 is done with task
 81010b2:	2001      	movs	r0, #1
 81010b4:	f003 fca8 	bl	8104a08 <HAL_HSEM_FastTake>
 81010b8:	2100      	movs	r1, #0
 81010ba:	2001      	movs	r0, #1
 81010bc:	f003 fcbe 	bl	8104a3c <HAL_HSEM_Release>
}
 81010c0:	bf00      	nop
 81010c2:	bd80      	pop	{r7, pc}
 81010c4:	0810b0d4 	.word	0x0810b0d4

081010c8 <exec_state_cheat_detected>:

void exec_state_cheat_detected(void)
{
 81010c8:	b580      	push	{r7, lr}
 81010ca:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r⚠⚠⚠ CHEATER DETECTED ⚠⚠⚠\n\r");
 81010cc:	4805      	ldr	r0, [pc, #20]	; (81010e4 <exec_state_cheat_detected+0x1c>)
 81010ce:	f001 ffcd 	bl	810306c <send_msg>

	// we arrive here from an interrupt from Lightgate (?)
	// Send task that triggers Cheat Detected in CM7

	HSEM_TAKE_RELEASE(HSEM_CM4_DONE);	// tell CM7 that CM4 is done with task
 81010d2:	2001      	movs	r0, #1
 81010d4:	f003 fc98 	bl	8104a08 <HAL_HSEM_FastTake>
 81010d8:	2100      	movs	r1, #0
 81010da:	2001      	movs	r0, #1
 81010dc:	f003 fcae 	bl	8104a3c <HAL_HSEM_Release>
}
 81010e0:	bf00      	nop
 81010e2:	bd80      	pop	{r7, pc}
 81010e4:	0810b104 	.word	0x0810b104

081010e8 <exec_state_game_end>:

void exec_state_game_end(void)
{
 81010e8:	b580      	push	{r7, lr}
 81010ea:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r🛑🛑🛑 Executing STATE CLEAN-UP 🛑🛑🛑\n\r");
 81010ec:	4805      	ldr	r0, [pc, #20]	; (8101104 <exec_state_game_end+0x1c>)
 81010ee:	f001 ffbd 	bl	810306c <send_msg>

	// display appropriate msgs
	HSEM_TAKE_RELEASE(HSEM_CM4_DONE);	// tell CM7 that CM4 is done with task
 81010f2:	2001      	movs	r0, #1
 81010f4:	f003 fc88 	bl	8104a08 <HAL_HSEM_FastTake>
 81010f8:	2100      	movs	r1, #0
 81010fa:	2001      	movs	r0, #1
 81010fc:	f003 fc9e 	bl	8104a3c <HAL_HSEM_Release>
}
 8101100:	bf00      	nop
 8101102:	bd80      	pop	{r7, pc}
 8101104:	0810b12c 	.word	0x0810b12c

08101108 <check_state>:
 STATE_CLEAN_UP						4
 STATE_CHEAT_DETECTED				5
 STATE_GAME_END						6
 */
int check_state(void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
	return current_state_CM4;
 810110c:	4b03      	ldr	r3, [pc, #12]	; (810111c <check_state+0x14>)
 810110e:	681b      	ldr	r3, [r3, #0]
}
 8101110:	4618      	mov	r0, r3
 8101112:	46bd      	mov	sp, r7
 8101114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101118:	4770      	bx	lr
 810111a:	bf00      	nop
 810111c:	10000010 	.word	0x10000010

08101120 <coinInsertDetection>:
 * returns:
 * 	0: no move
 * 	1-7: inserted into column n
 * 	9: error
 */
{
 8101120:	b580      	push	{r7, lr}
 8101122:	b082      	sub	sp, #8
 8101124:	af00      	add	r7, sp, #0
	int output = 0;
 8101126:	2300      	movs	r3, #0
 8101128:	607b      	str	r3, [r7, #4]

	/* Query the processor with the I2C connection for the light gates */
	int gateNew = queryLightGate();
 810112a:	f000 f84b 	bl	81011c4 <queryLightGate>
 810112e:	6038      	str	r0, [r7, #0]

	if (gateNew == 9)
 8101130:	683b      	ldr	r3, [r7, #0]
 8101132:	2b09      	cmp	r3, #9
 8101134:	d106      	bne.n	8101144 <coinInsertDetection+0x24>
	{
		detect_error++;
 8101136:	4b0f      	ldr	r3, [pc, #60]	; (8101174 <coinInsertDetection+0x54>)
 8101138:	681b      	ldr	r3, [r3, #0]
 810113a:	3301      	adds	r3, #1
 810113c:	4a0d      	ldr	r2, [pc, #52]	; (8101174 <coinInsertDetection+0x54>)
 810113e:	6013      	str	r3, [r2, #0]
		return 9;
 8101140:	2309      	movs	r3, #9
 8101142:	e013      	b.n	810116c <coinInsertDetection+0x4c>
	}

	/* Query the logic: if the same as the prior gate, not debounced yet.  */
	if (gateNew == -1 && gateOld <= 7 && gateNew != gateOld)
 8101144:	683b      	ldr	r3, [r7, #0]
 8101146:	f1b3 3fff 	cmp.w	r3, #4294967295
 810114a:	d10b      	bne.n	8101164 <coinInsertDetection+0x44>
 810114c:	4b0a      	ldr	r3, [pc, #40]	; (8101178 <coinInsertDetection+0x58>)
 810114e:	681b      	ldr	r3, [r3, #0]
 8101150:	2b07      	cmp	r3, #7
 8101152:	dc07      	bgt.n	8101164 <coinInsertDetection+0x44>
 8101154:	4b08      	ldr	r3, [pc, #32]	; (8101178 <coinInsertDetection+0x58>)
 8101156:	681b      	ldr	r3, [r3, #0]
 8101158:	683a      	ldr	r2, [r7, #0]
 810115a:	429a      	cmp	r2, r3
 810115c:	d002      	beq.n	8101164 <coinInsertDetection+0x44>
	{
		output = gateOld;
 810115e:	4b06      	ldr	r3, [pc, #24]	; (8101178 <coinInsertDetection+0x58>)
 8101160:	681b      	ldr	r3, [r3, #0]
 8101162:	607b      	str	r3, [r7, #4]
	}

	gateOld = gateNew;
 8101164:	4a04      	ldr	r2, [pc, #16]	; (8101178 <coinInsertDetection+0x58>)
 8101166:	683b      	ldr	r3, [r7, #0]
 8101168:	6013      	str	r3, [r2, #0]

	return output;
 810116a:	687b      	ldr	r3, [r7, #4]
}
 810116c:	4618      	mov	r0, r3
 810116e:	3708      	adds	r7, #8
 8101170:	46bd      	mov	sp, r7
 8101172:	bd80      	pop	{r7, pc}
 8101174:	10000120 	.word	0x10000120
 8101178:	1000000c 	.word	0x1000000c

0810117c <init_coinDetector>:
 * to set all ports as inputs. It checks the device status after transmitting the command
 * byte and displays appropriate messages based on the result. It then receives the input
 * ports and performs some operations on them.
 */
void init_coinDetector(void)
{
 810117c:	b580      	push	{r7, lr}
 810117e:	b084      	sub	sp, #16
 8101180:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef dev_Status;           // Device status variable
	uint8_t data = 0xFF;         // Command byte data to set all ports as inputs
 8101182:	23ff      	movs	r3, #255	; 0xff
 8101184:	71bb      	strb	r3, [r7, #6]

	dev_Status = i2c_Transmit(&hi2c1, CD_ADD, 0x03, 1, &data, 1); // Transmit command byte to configure the device
 8101186:	2301      	movs	r3, #1
 8101188:	9301      	str	r3, [sp, #4]
 810118a:	1dbb      	adds	r3, r7, #6
 810118c:	9300      	str	r3, [sp, #0]
 810118e:	2301      	movs	r3, #1
 8101190:	2203      	movs	r2, #3
 8101192:	2138      	movs	r1, #56	; 0x38
 8101194:	4808      	ldr	r0, [pc, #32]	; (81011b8 <init_coinDetector+0x3c>)
 8101196:	f001 fa27 	bl	81025e8 <i2c_Transmit>
 810119a:	4603      	mov	r3, r0
 810119c:	71fb      	strb	r3, [r7, #7]

	if (dev_Status != HAL_OK)   // Check if device status is not OK
 810119e:	79fb      	ldrb	r3, [r7, #7]
 81011a0:	2b00      	cmp	r3, #0
 81011a2:	d003      	beq.n	81011ac <init_coinDetector+0x30>
	{
		send_msg((uint8_t*) "\r¡User-Detector Initialisation FAILED¡\n\r"); // Display error message
 81011a4:	4805      	ldr	r0, [pc, #20]	; (81011bc <init_coinDetector+0x40>)
 81011a6:	f001 ff61 	bl	810306c <send_msg>
 81011aa:	e002      	b.n	81011b2 <init_coinDetector+0x36>
		return;
	}
	else
	{
		send_msg((uint8_t*) "\r!User-Detector Initialised!\n\r"); // Display success message
 81011ac:	4804      	ldr	r0, [pc, #16]	; (81011c0 <init_coinDetector+0x44>)
 81011ae:	f001 ff5d 	bl	810306c <send_msg>
	}
}
 81011b2:	3708      	adds	r7, #8
 81011b4:	46bd      	mov	sp, r7
 81011b6:	bd80      	pop	{r7, pc}
 81011b8:	10000188 	.word	0x10000188
 81011bc:	0810b164 	.word	0x0810b164
 81011c0:	0810b190 	.word	0x0810b190

081011c4 <queryLightGate>:
 *         - -2: Error from PCA9554
 *         - -1: All gates are free
 *         - 1 to 7: Stack where the gate is blocked
 *         - 9: More than one gate is blocked
 */
{
 81011c4:	b580      	push	{r7, lr}
 81011c6:	b084      	sub	sp, #16
 81011c8:	af02      	add	r7, sp, #8
	 0100 1011 - 0x4B
	 0100 1101 - 0x4D
	 0100 1111 - 0x4F
	 */
	// Program command byte: Reading the input port [0x00] register
	dev_Status = i2c_Receive(&hi2c1, CD_ADD, 0x00, 1, &cd, sizeof(cd));
 81011ca:	2301      	movs	r3, #1
 81011cc:	9301      	str	r3, [sp, #4]
 81011ce:	1dbb      	adds	r3, r7, #6
 81011d0:	9300      	str	r3, [sp, #0]
 81011d2:	2301      	movs	r3, #1
 81011d4:	2200      	movs	r2, #0
 81011d6:	2138      	movs	r1, #56	; 0x38
 81011d8:	484a      	ldr	r0, [pc, #296]	; (8101304 <queryLightGate+0x140>)
 81011da:	f001 fa2e 	bl	810263a <i2c_Receive>
 81011de:	4603      	mov	r3, r0
 81011e0:	71fb      	strb	r3, [r7, #7]

	if (dev_Status != HAL_OK)
 81011e2:	79fb      	ldrb	r3, [r7, #7]
 81011e4:	2b00      	cmp	r3, #0
 81011e6:	d002      	beq.n	81011ee <queryLightGate+0x2a>
	{
		return -2;              // Error from PCA9554
 81011e8:	f06f 0301 	mvn.w	r3, #1
 81011ec:	e085      	b.n	81012fa <queryLightGate+0x136>
	}
	else
	{
		/* Remove LSB: is always 1 */
		cd &= ~0x01;
 81011ee:	79bb      	ldrb	r3, [r7, #6]
 81011f0:	f023 0301 	bic.w	r3, r3, #1
 81011f4:	b2db      	uxtb	r3, r3
 81011f6:	71bb      	strb	r3, [r7, #6]

		/* Check if empty: */
		if (!cd)
 81011f8:	79bb      	ldrb	r3, [r7, #6]
 81011fa:	2b00      	cmp	r3, #0
 81011fc:	d102      	bne.n	8101204 <queryLightGate+0x40>
			return -1;          // All gates are free
 81011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8101202:	e07a      	b.n	81012fa <queryLightGate+0x136>

		if (cd == 0x02)
 8101204:	79bb      	ldrb	r3, [r7, #6]
 8101206:	2b02      	cmp	r3, #2
 8101208:	d101      	bne.n	810120e <queryLightGate+0x4a>
		{
			return 7;
 810120a:	2307      	movs	r3, #7
 810120c:	e075      	b.n	81012fa <queryLightGate+0x136>
		}
		if (cd == 0x04)
 810120e:	79bb      	ldrb	r3, [r7, #6]
 8101210:	2b04      	cmp	r3, #4
 8101212:	d101      	bne.n	8101218 <queryLightGate+0x54>
		{
			return 6;
 8101214:	2306      	movs	r3, #6
 8101216:	e070      	b.n	81012fa <queryLightGate+0x136>
		}
		if (cd == 0x08)
 8101218:	79bb      	ldrb	r3, [r7, #6]
 810121a:	2b08      	cmp	r3, #8
 810121c:	d101      	bne.n	8101222 <queryLightGate+0x5e>
		{
			return 5;
 810121e:	2305      	movs	r3, #5
 8101220:	e06b      	b.n	81012fa <queryLightGate+0x136>
		}
		if (cd == 0x10)
 8101222:	79bb      	ldrb	r3, [r7, #6]
 8101224:	2b10      	cmp	r3, #16
 8101226:	d101      	bne.n	810122c <queryLightGate+0x68>
		{
			return 3; 	// flipped in hardware
 8101228:	2303      	movs	r3, #3
 810122a:	e066      	b.n	81012fa <queryLightGate+0x136>
		}
		if (cd == 0x20)
 810122c:	79bb      	ldrb	r3, [r7, #6]
 810122e:	2b20      	cmp	r3, #32
 8101230:	d101      	bne.n	8101236 <queryLightGate+0x72>
		{
			return 4; 	// flipped in hardware
 8101232:	2304      	movs	r3, #4
 8101234:	e061      	b.n	81012fa <queryLightGate+0x136>
		}
		if (cd == 0x40)
 8101236:	79bb      	ldrb	r3, [r7, #6]
 8101238:	2b40      	cmp	r3, #64	; 0x40
 810123a:	d101      	bne.n	8101240 <queryLightGate+0x7c>
		{
			return 1; 	// flipped in hardware
 810123c:	2301      	movs	r3, #1
 810123e:	e05c      	b.n	81012fa <queryLightGate+0x136>
		}
		if (cd == 0x80)
 8101240:	79bb      	ldrb	r3, [r7, #6]
 8101242:	2b80      	cmp	r3, #128	; 0x80
 8101244:	d101      	bne.n	810124a <queryLightGate+0x86>
		{
			return 2; 	// flipped in hardware
 8101246:	2302      	movs	r3, #2
 8101248:	e057      	b.n	81012fa <queryLightGate+0x136>
		}

		// More than one coin detected, update the mem_Board array accordingly
		if ((cd >> 1) & 1)
 810124a:	79bb      	ldrb	r3, [r7, #6]
 810124c:	085b      	lsrs	r3, r3, #1
 810124e:	b2db      	uxtb	r3, r3
 8101250:	f003 0301 	and.w	r3, r3, #1
 8101254:	2b00      	cmp	r3, #0
 8101256:	d004      	beq.n	8101262 <queryLightGate+0x9e>
		{
			mem_Board[7 - 1]++;
 8101258:	4b2b      	ldr	r3, [pc, #172]	; (8101308 <queryLightGate+0x144>)
 810125a:	699b      	ldr	r3, [r3, #24]
 810125c:	3301      	adds	r3, #1
 810125e:	4a2a      	ldr	r2, [pc, #168]	; (8101308 <queryLightGate+0x144>)
 8101260:	6193      	str	r3, [r2, #24]
		}
		if ((cd >> 2) & 1)
 8101262:	79bb      	ldrb	r3, [r7, #6]
 8101264:	089b      	lsrs	r3, r3, #2
 8101266:	b2db      	uxtb	r3, r3
 8101268:	f003 0301 	and.w	r3, r3, #1
 810126c:	2b00      	cmp	r3, #0
 810126e:	d004      	beq.n	810127a <queryLightGate+0xb6>
		{
			mem_Board[6 - 1]++;
 8101270:	4b25      	ldr	r3, [pc, #148]	; (8101308 <queryLightGate+0x144>)
 8101272:	695b      	ldr	r3, [r3, #20]
 8101274:	3301      	adds	r3, #1
 8101276:	4a24      	ldr	r2, [pc, #144]	; (8101308 <queryLightGate+0x144>)
 8101278:	6153      	str	r3, [r2, #20]
		}
		if ((cd >> 3) & 1)
 810127a:	79bb      	ldrb	r3, [r7, #6]
 810127c:	08db      	lsrs	r3, r3, #3
 810127e:	b2db      	uxtb	r3, r3
 8101280:	f003 0301 	and.w	r3, r3, #1
 8101284:	2b00      	cmp	r3, #0
 8101286:	d004      	beq.n	8101292 <queryLightGate+0xce>
		{
			mem_Board[5 - 1]++;
 8101288:	4b1f      	ldr	r3, [pc, #124]	; (8101308 <queryLightGate+0x144>)
 810128a:	691b      	ldr	r3, [r3, #16]
 810128c:	3301      	adds	r3, #1
 810128e:	4a1e      	ldr	r2, [pc, #120]	; (8101308 <queryLightGate+0x144>)
 8101290:	6113      	str	r3, [r2, #16]
		}
		if ((cd >> 4) & 1)
 8101292:	79bb      	ldrb	r3, [r7, #6]
 8101294:	091b      	lsrs	r3, r3, #4
 8101296:	b2db      	uxtb	r3, r3
 8101298:	f003 0301 	and.w	r3, r3, #1
 810129c:	2b00      	cmp	r3, #0
 810129e:	d004      	beq.n	81012aa <queryLightGate+0xe6>
		{
			mem_Board[3 - 1]++;
 81012a0:	4b19      	ldr	r3, [pc, #100]	; (8101308 <queryLightGate+0x144>)
 81012a2:	689b      	ldr	r3, [r3, #8]
 81012a4:	3301      	adds	r3, #1
 81012a6:	4a18      	ldr	r2, [pc, #96]	; (8101308 <queryLightGate+0x144>)
 81012a8:	6093      	str	r3, [r2, #8]
		}
		if ((cd >> 5) & 1)
 81012aa:	79bb      	ldrb	r3, [r7, #6]
 81012ac:	095b      	lsrs	r3, r3, #5
 81012ae:	b2db      	uxtb	r3, r3
 81012b0:	f003 0301 	and.w	r3, r3, #1
 81012b4:	2b00      	cmp	r3, #0
 81012b6:	d004      	beq.n	81012c2 <queryLightGate+0xfe>
		{
			mem_Board[4 - 1]++;
 81012b8:	4b13      	ldr	r3, [pc, #76]	; (8101308 <queryLightGate+0x144>)
 81012ba:	68db      	ldr	r3, [r3, #12]
 81012bc:	3301      	adds	r3, #1
 81012be:	4a12      	ldr	r2, [pc, #72]	; (8101308 <queryLightGate+0x144>)
 81012c0:	60d3      	str	r3, [r2, #12]
		}
		if ((cd >> 6) & 1)
 81012c2:	79bb      	ldrb	r3, [r7, #6]
 81012c4:	099b      	lsrs	r3, r3, #6
 81012c6:	b2db      	uxtb	r3, r3
 81012c8:	f003 0301 	and.w	r3, r3, #1
 81012cc:	2b00      	cmp	r3, #0
 81012ce:	d004      	beq.n	81012da <queryLightGate+0x116>
		{
			mem_Board[1 - 1]++;
 81012d0:	4b0d      	ldr	r3, [pc, #52]	; (8101308 <queryLightGate+0x144>)
 81012d2:	681b      	ldr	r3, [r3, #0]
 81012d4:	3301      	adds	r3, #1
 81012d6:	4a0c      	ldr	r2, [pc, #48]	; (8101308 <queryLightGate+0x144>)
 81012d8:	6013      	str	r3, [r2, #0]
		}
		if ((cd >> 7) & 1)
 81012da:	79bb      	ldrb	r3, [r7, #6]
 81012dc:	09db      	lsrs	r3, r3, #7
 81012de:	b2db      	uxtb	r3, r3
 81012e0:	f003 0301 	and.w	r3, r3, #1
 81012e4:	2b00      	cmp	r3, #0
 81012e6:	d004      	beq.n	81012f2 <queryLightGate+0x12e>
		{
			mem_Board[2 - 1]++;
 81012e8:	4b07      	ldr	r3, [pc, #28]	; (8101308 <queryLightGate+0x144>)
 81012ea:	685b      	ldr	r3, [r3, #4]
 81012ec:	3301      	adds	r3, #1
 81012ee:	4a06      	ldr	r2, [pc, #24]	; (8101308 <queryLightGate+0x144>)
 81012f0:	6053      	str	r3, [r2, #4]
		}
		sens = 0;
 81012f2:	4b06      	ldr	r3, [pc, #24]	; (810130c <queryLightGate+0x148>)
 81012f4:	2200      	movs	r2, #0
 81012f6:	601a      	str	r2, [r3, #0]
		return 9;               // More than one gate is blocked
 81012f8:	2309      	movs	r3, #9

	}
}
 81012fa:	4618      	mov	r0, r3
 81012fc:	3708      	adds	r7, #8
 81012fe:	46bd      	mov	sp, r7
 8101300:	bd80      	pop	{r7, pc}
 8101302:	bf00      	nop
 8101304:	10000188 	.word	0x10000188
 8101308:	100000e0 	.word	0x100000e0
 810130c:	10000118 	.word	0x10000118

08101310 <checkcoin>:
 * @return Index of the column that has changed (1-7), or:
 *         - 9: Error (more than one column changed)
 *         - -1: No column changed
 */
int checkcoin(void)
{
 8101310:	b480      	push	{r7}
 8101312:	b085      	sub	sp, #20
 8101314:	af00      	add	r7, sp, #0
	int column = -1;                 // Index of the changed column (-1 if none)
 8101316:	f04f 33ff 	mov.w	r3, #4294967295
 810131a:	60fb      	str	r3, [r7, #12]
	int amountOfColumnsChanged = 0;       // Number of columns that have changed
 810131c:	2300      	movs	r3, #0
 810131e:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < 7; i++)
 8101320:	2300      	movs	r3, #0
 8101322:	607b      	str	r3, [r7, #4]
 8101324:	e012      	b.n	810134c <checkcoin+0x3c>
	{
		if (mem_Board[i] - mem_Board_old[i] > 0)
 8101326:	4a14      	ldr	r2, [pc, #80]	; (8101378 <checkcoin+0x68>)
 8101328:	687b      	ldr	r3, [r7, #4]
 810132a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810132e:	4913      	ldr	r1, [pc, #76]	; (810137c <checkcoin+0x6c>)
 8101330:	687b      	ldr	r3, [r7, #4]
 8101332:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8101336:	1ad3      	subs	r3, r2, r3
 8101338:	2b00      	cmp	r3, #0
 810133a:	dd04      	ble.n	8101346 <checkcoin+0x36>
		{
			column = i;                   // Update column index
 810133c:	687b      	ldr	r3, [r7, #4]
 810133e:	60fb      	str	r3, [r7, #12]
			amountOfColumnsChanged++;     // Increment count of changed columns
 8101340:	68bb      	ldr	r3, [r7, #8]
 8101342:	3301      	adds	r3, #1
 8101344:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 7; i++)
 8101346:	687b      	ldr	r3, [r7, #4]
 8101348:	3301      	adds	r3, #1
 810134a:	607b      	str	r3, [r7, #4]
 810134c:	687b      	ldr	r3, [r7, #4]
 810134e:	2b06      	cmp	r3, #6
 8101350:	dde9      	ble.n	8101326 <checkcoin+0x16>
		}
	}

	if (amountOfColumnsChanged == 1)
 8101352:	68bb      	ldr	r3, [r7, #8]
 8101354:	2b01      	cmp	r3, #1
 8101356:	d103      	bne.n	8101360 <checkcoin+0x50>
	{
		column++;                         // Increment column index by 1
 8101358:	68fb      	ldr	r3, [r7, #12]
 810135a:	3301      	adds	r3, #1
 810135c:	60fb      	str	r3, [r7, #12]
 810135e:	e004      	b.n	810136a <checkcoin+0x5a>
	}
	else if (amountOfColumnsChanged > 1)
 8101360:	68bb      	ldr	r3, [r7, #8]
 8101362:	2b01      	cmp	r3, #1
 8101364:	dd01      	ble.n	810136a <checkcoin+0x5a>
	{
		column = 9;             // More than one column changed, set error value
 8101366:	2309      	movs	r3, #9
 8101368:	60fb      	str	r3, [r7, #12]
	}

	return column;                        // Return column index or error value
 810136a:	68fb      	ldr	r3, [r7, #12]
}
 810136c:	4618      	mov	r0, r3
 810136e:	3714      	adds	r7, #20
 8101370:	46bd      	mov	sp, r7
 8101372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101376:	4770      	bx	lr
 8101378:	100000e0 	.word	0x100000e0
 810137c:	100000fc 	.word	0x100000fc

08101380 <update_board_mem>:

void update_board_mem(void)
{
 8101380:	b480      	push	{r7}
 8101382:	b083      	sub	sp, #12
 8101384:	af00      	add	r7, sp, #0
	for (int k = 0; k < 7; k++) 	//update board
 8101386:	2300      	movs	r3, #0
 8101388:	607b      	str	r3, [r7, #4]
 810138a:	e00a      	b.n	81013a2 <update_board_mem+0x22>
	{
		mem_Board_old[k] = mem_Board[k];
 810138c:	4a0a      	ldr	r2, [pc, #40]	; (81013b8 <update_board_mem+0x38>)
 810138e:	687b      	ldr	r3, [r7, #4]
 8101390:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8101394:	4909      	ldr	r1, [pc, #36]	; (81013bc <update_board_mem+0x3c>)
 8101396:	687b      	ldr	r3, [r7, #4]
 8101398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int k = 0; k < 7; k++) 	//update board
 810139c:	687b      	ldr	r3, [r7, #4]
 810139e:	3301      	adds	r3, #1
 81013a0:	607b      	str	r3, [r7, #4]
 81013a2:	687b      	ldr	r3, [r7, #4]
 81013a4:	2b06      	cmp	r3, #6
 81013a6:	ddf1      	ble.n	810138c <update_board_mem+0xc>
	}
}
 81013a8:	bf00      	nop
 81013aa:	bf00      	nop
 81013ac:	370c      	adds	r7, #12
 81013ae:	46bd      	mov	sp, r7
 81013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013b4:	4770      	bx	lr
 81013b6:	bf00      	nop
 81013b8:	100000e0 	.word	0x100000e0
 81013bc:	100000fc 	.word	0x100000fc

081013c0 <TCS3472_Create>:
int yellow = 0;
int rgb_error = 0;

TCS3472 TCS3472_Create(uint8_t addr, I2C_HandleTypeDef *handle)
/* Structure with the address and I2C handle of the RGB Sensor */
{
 81013c0:	b480      	push	{r7}
 81013c2:	b087      	sub	sp, #28
 81013c4:	af00      	add	r7, sp, #0
 81013c6:	60f8      	str	r0, [r7, #12]
 81013c8:	460b      	mov	r3, r1
 81013ca:	607a      	str	r2, [r7, #4]
 81013cc:	72fb      	strb	r3, [r7, #11]
	//create structure of RBG sensor data
	TCS3472 sensor_data =
 81013ce:	7afb      	ldrb	r3, [r7, #11]
 81013d0:	743b      	strb	r3, [r7, #16]
 81013d2:	687b      	ldr	r3, [r7, #4]
 81013d4:	617b      	str	r3, [r7, #20]
	{ addr, handle };
	return sensor_data;
 81013d6:	68fb      	ldr	r3, [r7, #12]
 81013d8:	461a      	mov	r2, r3
 81013da:	f107 0310 	add.w	r3, r7, #16
 81013de:	e893 0003 	ldmia.w	r3, {r0, r1}
 81013e2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 81013e6:	68f8      	ldr	r0, [r7, #12]
 81013e8:	371c      	adds	r7, #28
 81013ea:	46bd      	mov	sp, r7
 81013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013f0:	4770      	bx	lr
	...

081013f4 <rgb_init>:


void rgb_init(const TCS3472 *const self)
/* Function that programs the RGB sensor to turn on and then sets initial values */
{
 81013f4:	b580      	push	{r7, lr}
 81013f6:	b082      	sub	sp, #8
 81013f8:	af00      	add	r7, sp, #0
 81013fa:	6078      	str	r0, [r7, #4]
	// command to turn on the device [0x03] sent to register [0x80]
	rgb_send(self, RGB_COMMAND_REG | RGB_REG_ENABLE,
 81013fc:	2203      	movs	r2, #3
 81013fe:	2180      	movs	r1, #128	; 0x80
 8101400:	6878      	ldr	r0, [r7, #4]
 8101402:	f000 f815 	bl	8101430 <rgb_send>
			RGB_ENABLE_PON | RGB_ENABLE_AEN);

	HAL_Delay(2);
 8101406:	2002      	movs	r0, #2
 8101408:	f001 ff38 	bl	810327c <HAL_Delay>
	// 0xFF = 2.4 ms
	// 0x00 = 700 ms
	// 0xEE = 238; (256 - 238) * 2.4 = 43.2 ms

	//  ATIME = 0xEE; sent to TIMING register [0x81]
	rgb_send(self, RGB_COMMAND_REG | RGB_REG_TIMING, 0xEE);
 810140c:	22ee      	movs	r2, #238	; 0xee
 810140e:	2181      	movs	r1, #129	; 0x81
 8101410:	6878      	ldr	r0, [r7, #4]
 8101412:	f000 f80d 	bl	8101430 <rgb_send>
	HAL_Delay(10);
 8101416:	200a      	movs	r0, #10
 8101418:	f001 ff30 	bl	810327c <HAL_Delay>
	send_msg((uint8_t*) "\r!RGB-Sensor Initialised!\n\r");
 810141c:	4803      	ldr	r0, [pc, #12]	; (810142c <rgb_init+0x38>)
 810141e:	f001 fe25 	bl	810306c <send_msg>

}
 8101422:	bf00      	nop
 8101424:	3708      	adds	r7, #8
 8101426:	46bd      	mov	sp, r7
 8101428:	bd80      	pop	{r7, pc}
 810142a:	bf00      	nop
 810142c:	0810b1b0 	.word	0x0810b1b0

08101430 <rgb_send>:
 *
 * @param1 self: the structure which holds information about the RGB sensor
 * @param2 regAddress: the register to which the data will be written to
 * @param3 data: the data to be written in the register
 */
{
 8101430:	b580      	push	{r7, lr}
 8101432:	b084      	sub	sp, #16
 8101434:	af02      	add	r7, sp, #8
 8101436:	6078      	str	r0, [r7, #4]
 8101438:	460b      	mov	r3, r1
 810143a:	70fb      	strb	r3, [r7, #3]
 810143c:	4613      	mov	r3, r2
 810143e:	70bb      	strb	r3, [r7, #2]
	i2c_Transmit(self->handle, self->dev_addr, regAddress, 1, &data, 1);
 8101440:	687b      	ldr	r3, [r7, #4]
 8101442:	6858      	ldr	r0, [r3, #4]
 8101444:	687b      	ldr	r3, [r7, #4]
 8101446:	7819      	ldrb	r1, [r3, #0]
 8101448:	78fa      	ldrb	r2, [r7, #3]
 810144a:	2301      	movs	r3, #1
 810144c:	9301      	str	r3, [sp, #4]
 810144e:	1cbb      	adds	r3, r7, #2
 8101450:	9300      	str	r3, [sp, #0]
 8101452:	2301      	movs	r3, #1
 8101454:	f001 f8c8 	bl	81025e8 <i2c_Transmit>
}
 8101458:	bf00      	nop
 810145a:	3708      	adds	r7, #8
 810145c:	46bd      	mov	sp, r7
 810145e:	bd80      	pop	{r7, pc}

08101460 <initMotors>:
 */
#include "level_3/motor_master.h"

void initMotors()
/* Initialising timers for motors */
{
 8101460:	b580      	push	{r7, lr}
 8101462:	af00      	add	r7, sp, #0
	initMotorX();
 8101464:	f000 f860 	bl	8101528 <initMotorX>
	initMotorZ();
 8101468:	f000 f9ce 	bl	8101808 <initMotorZ>
}
 810146c:	bf00      	nop
 810146e:	bd80      	pop	{r7, pc}

08101470 <move_to_X_and_Z>:
 * param1 posX: position of the X axis locations defined in motor_x.h
 * param2 posZ: position of the Z axis locations defined in motor_z.h
 *
 * return none: TODO: a return could be implemented for various feedback
 */
{
 8101470:	b580      	push	{r7, lr}
 8101472:	b082      	sub	sp, #8
 8101474:	af00      	add	r7, sp, #0
 8101476:	4603      	mov	r3, r0
 8101478:	460a      	mov	r2, r1
 810147a:	80fb      	strh	r3, [r7, #6]
 810147c:	4613      	mov	r3, r2
 810147e:	80bb      	strh	r3, [r7, #4]
	move_to_posX(posX);
 8101480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101484:	4618      	mov	r0, r3
 8101486:	f7ff f8cd 	bl	8100624 <__aeabi_i2d>
 810148a:	4602      	mov	r2, r0
 810148c:	460b      	mov	r3, r1
 810148e:	ec43 2b10 	vmov	d0, r2, r3
 8101492:	f000 f891 	bl	81015b8 <move_to_posX>
	send_msg((uint8_t*) "\r**** Motor X is at the final position! ****\n\r");
 8101496:	480b      	ldr	r0, [pc, #44]	; (81014c4 <move_to_X_and_Z+0x54>)
 8101498:	f001 fde8 	bl	810306c <send_msg>

	move_to_posZ(posZ);
 810149c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 81014a0:	4618      	mov	r0, r3
 81014a2:	f7ff f8bf 	bl	8100624 <__aeabi_i2d>
 81014a6:	4602      	mov	r2, r0
 81014a8:	460b      	mov	r3, r1
 81014aa:	ec43 2b10 	vmov	d0, r2, r3
 81014ae:	f000 f9f3 	bl	8101898 <move_to_posZ>
	send_msg((uint8_t*) "\r**** Motor Z is at the final position! ****\n\r");
 81014b2:	4805      	ldr	r0, [pc, #20]	; (81014c8 <move_to_X_and_Z+0x58>)
 81014b4:	f001 fdda 	bl	810306c <send_msg>

	return 1;
 81014b8:	2301      	movs	r3, #1
}
 81014ba:	4618      	mov	r0, r3
 81014bc:	3708      	adds	r7, #8
 81014be:	46bd      	mov	sp, r7
 81014c0:	bd80      	pop	{r7, pc}
 81014c2:	bf00      	nop
 81014c4:	0810b1cc 	.word	0x0810b1cc
 81014c8:	0810b1fc 	.word	0x0810b1fc

081014cc <HomeMotors>:
 * param1 homeX: 1 homed, 0 skip
 * param2 homeZ: 1 homed, 0 skip
 *
 * return none: TODO: a return could be implemented for various feedback
 */
{
 81014cc:	b580      	push	{r7, lr}
 81014ce:	b082      	sub	sp, #8
 81014d0:	af00      	add	r7, sp, #0
 81014d2:	4603      	mov	r3, r0
 81014d4:	460a      	mov	r2, r1
 81014d6:	71fb      	strb	r3, [r7, #7]
 81014d8:	4613      	mov	r3, r2
 81014da:	71bb      	strb	r3, [r7, #6]
	send_msg((uint8_t*) "\r#### HOMING Motor X №###\n\r");
 81014dc:	480e      	ldr	r0, [pc, #56]	; (8101518 <HomeMotors+0x4c>)
 81014de:	f001 fdc5 	bl	810306c <send_msg>
	if (homeX)
 81014e2:	79fb      	ldrb	r3, [r7, #7]
 81014e4:	2b00      	cmp	r3, #0
 81014e6:	d001      	beq.n	81014ec <HomeMotors+0x20>
	{
		homeMotorX();
 81014e8:	f000 f82e 	bl	8101548 <homeMotorX>
	}
	send_msg((uint8_t*) "\r######## Motor X is at HOME ########\n\r");
 81014ec:	480b      	ldr	r0, [pc, #44]	; (810151c <HomeMotors+0x50>)
 81014ee:	f001 fdbd 	bl	810306c <send_msg>

	HAL_Delay(250);
 81014f2:	20fa      	movs	r0, #250	; 0xfa
 81014f4:	f001 fec2 	bl	810327c <HAL_Delay>
	send_msg((uint8_t*) "\r#### HOMING Motor Z ####\n\r");
 81014f8:	4809      	ldr	r0, [pc, #36]	; (8101520 <HomeMotors+0x54>)
 81014fa:	f001 fdb7 	bl	810306c <send_msg>
	if (homeZ)
 81014fe:	79bb      	ldrb	r3, [r7, #6]
 8101500:	2b00      	cmp	r3, #0
 8101502:	d001      	beq.n	8101508 <HomeMotors+0x3c>
	{
		homeMotorZ();
 8101504:	f000 f990 	bl	8101828 <homeMotorZ>
	}
	send_msg((uint8_t*) "\r######## Motor Z is at HOME ########\n\r");
 8101508:	4806      	ldr	r0, [pc, #24]	; (8101524 <HomeMotors+0x58>)
 810150a:	f001 fdaf 	bl	810306c <send_msg>
	return 1;
 810150e:	2301      	movs	r3, #1
}
 8101510:	4618      	mov	r0, r3
 8101512:	3708      	adds	r7, #8
 8101514:	46bd      	mov	sp, r7
 8101516:	bd80      	pop	{r7, pc}
 8101518:	0810b22c 	.word	0x0810b22c
 810151c:	0810b24c 	.word	0x0810b24c
 8101520:	0810b274 	.word	0x0810b274
 8101524:	0810b290 	.word	0x0810b290

08101528 <initMotorX>:
uint8_t i_X = 0;
uint8_t once_X = 1;

void initMotorX()
/* Initialises the necessary timers for motor X */
{
 8101528:	b580      	push	{r7, lr}
 810152a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 810152c:	2108      	movs	r1, #8
 810152e:	4804      	ldr	r0, [pc, #16]	; (8101540 <initMotorX+0x18>)
 8101530:	f006 fdd4 	bl	81080dc <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8101534:	213c      	movs	r1, #60	; 0x3c
 8101536:	4803      	ldr	r0, [pc, #12]	; (8101544 <initMotorX+0x1c>)
 8101538:	f006 ff84 	bl	8108444 <HAL_TIM_Encoder_Start_IT>
}
 810153c:	bf00      	nop
 810153e:	bd80      	pop	{r7, pc}
 8101540:	100001d4 	.word	0x100001d4
 8101544:	10000220 	.word	0x10000220

08101548 <homeMotorX>:

uint8_t homeMotorX()
/* homeMotorX: Moves the motor to the home position */
{
 8101548:	b580      	push	{r7, lr}
 810154a:	af00      	add	r7, sp, #0

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 130); 	// set PWM of motor
 810154c:	4b15      	ldr	r3, [pc, #84]	; (81015a4 <homeMotorX+0x5c>)
 810154e:	681b      	ldr	r3, [r3, #0]
 8101550:	2282      	movs	r2, #130	; 0x82
 8101552:	63da      	str	r2, [r3, #60]	; 0x3c

	set_Direction_X(); 									// counter-clockwise  | towards HOME TODO:Change name
 8101554:	f000 ff08 	bl	8102368 <set_Direction_X>
	set_Ready_X(); 										// enables motor X TODO:Change name
 8101558:	f000 ff1e 	bl	8102398 <set_Ready_X>

	while (!get_Homing_X())
 810155c:	bf00      	nop
 810155e:	f000 ff7b 	bl	8102458 <get_Homing_X>
 8101562:	4603      	mov	r3, r0
 8101564:	2b00      	cmp	r3, #0
 8101566:	d0fa      	beq.n	810155e <homeMotorX+0x16>
	{

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0); 	// set PWM of motor
 8101568:	4b0e      	ldr	r3, [pc, #56]	; (81015a4 <homeMotorX+0x5c>)
 810156a:	681b      	ldr	r3, [r3, #0]
 810156c:	2200      	movs	r2, #0
 810156e:	63da      	str	r2, [r3, #60]	; 0x3c
	reset_Ready_X(); 									// disables motor
 8101570:	f000 ff1e 	bl	81023b0 <reset_Ready_X>
	HAL_Delay(1000);
 8101574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101578:	f001 fe80 	bl	810327c <HAL_Delay>
	/* Initialise variables */
	position_mm_X = 0.0;
 810157c:	490a      	ldr	r1, [pc, #40]	; (81015a8 <homeMotorX+0x60>)
 810157e:	f04f 0200 	mov.w	r2, #0
 8101582:	f04f 0300 	mov.w	r3, #0
 8101586:	e9c1 2300 	strd	r2, r3, [r1]
	counterX = 0;
 810158a:	4b08      	ldr	r3, [pc, #32]	; (81015ac <homeMotorX+0x64>)
 810158c:	2200      	movs	r2, #0
 810158e:	601a      	str	r2, [r3, #0]
	i_X = 0;
 8101590:	4b07      	ldr	r3, [pc, #28]	; (81015b0 <homeMotorX+0x68>)
 8101592:	2200      	movs	r2, #0
 8101594:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0); 					// reset timer
 8101596:	4b07      	ldr	r3, [pc, #28]	; (81015b4 <homeMotorX+0x6c>)
 8101598:	681b      	ldr	r3, [r3, #0]
 810159a:	2200      	movs	r2, #0
 810159c:	625a      	str	r2, [r3, #36]	; 0x24
	return 1;
 810159e:	2301      	movs	r3, #1
}
 81015a0:	4618      	mov	r0, r3
 81015a2:	bd80      	pop	{r7, pc}
 81015a4:	100001d4 	.word	0x100001d4
 81015a8:	100000a8 	.word	0x100000a8
 81015ac:	100000a4 	.word	0x100000a4
 81015b0:	100000b4 	.word	0x100000b4
 81015b4:	10000220 	.word	0x10000220

081015b8 <move_to_posX>:
/* move_to_posX: Moves the motor to a position X cm away from the home position
 *
 * @param posX: Centimetres away from the home position
 *  RANGE posX:  TODO: Determine it
 */
{
 81015b8:	b580      	push	{r7, lr}
 81015ba:	b084      	sub	sp, #16
 81015bc:	af00      	add	r7, sp, #0
 81015be:	ed87 0b00 	vstr	d0, [r7]
	counterX = __HAL_TIM_GET_COUNTER(&htim3);					// get timer value
 81015c2:	4b86      	ldr	r3, [pc, #536]	; (81017dc <move_to_posX+0x224>)
 81015c4:	681b      	ldr	r3, [r3, #0]
 81015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81015c8:	4a85      	ldr	r2, [pc, #532]	; (81017e0 <move_to_posX+0x228>)
 81015ca:	6013      	str	r3, [r2, #0]
	position_mm_X = (double) ((counterX / 3855) + (i_X * 17)); 	// get position
 81015cc:	4b84      	ldr	r3, [pc, #528]	; (81017e0 <move_to_posX+0x228>)
 81015ce:	681b      	ldr	r3, [r3, #0]
 81015d0:	4a84      	ldr	r2, [pc, #528]	; (81017e4 <move_to_posX+0x22c>)
 81015d2:	fba2 2303 	umull	r2, r3, r2, r3
 81015d6:	0ada      	lsrs	r2, r3, #11
 81015d8:	4b83      	ldr	r3, [pc, #524]	; (81017e8 <move_to_posX+0x230>)
 81015da:	781b      	ldrb	r3, [r3, #0]
 81015dc:	4619      	mov	r1, r3
 81015de:	460b      	mov	r3, r1
 81015e0:	011b      	lsls	r3, r3, #4
 81015e2:	440b      	add	r3, r1
 81015e4:	4413      	add	r3, r2
 81015e6:	4618      	mov	r0, r3
 81015e8:	f7ff f80c 	bl	8100604 <__aeabi_ui2d>
 81015ec:	4602      	mov	r2, r0
 81015ee:	460b      	mov	r3, r1
 81015f0:	497e      	ldr	r1, [pc, #504]	; (81017ec <move_to_posX+0x234>)
 81015f2:	e9c1 2300 	strd	r2, r3, [r1]
	double delta = posX - position_mm_X;						// calculate delta
 81015f6:	4b7d      	ldr	r3, [pc, #500]	; (81017ec <move_to_posX+0x234>)
 81015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81015fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101600:	f7fe fec2 	bl	8100388 <__aeabi_dsub>
 8101604:	4602      	mov	r2, r0
 8101606:	460b      	mov	r3, r1
 8101608:	e9c7 2302 	strd	r2, r3, [r7, #8]
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 130); 			// adjust speed (prev val 140) 120 is a bit slow, but safe speed for not crashing during testing
 810160c:	4b78      	ldr	r3, [pc, #480]	; (81017f0 <move_to_posX+0x238>)
 810160e:	681b      	ldr	r3, [r3, #0]
 8101610:	2282      	movs	r2, #130	; 0x82
 8101612:	63da      	str	r2, [r3, #60]	; 0x3c

	set_Ready_X(); 												// enable motor
 8101614:	f000 fec0 	bl	8102398 <set_Ready_X>
	while (abs(delta) > 1.5) 										// accuracy of movement TODO: prove it
 8101618:	e0ca      	b.n	81017b0 <move_to_posX+0x1f8>
	{
		if (delta > 0){
 810161a:	f04f 0200 	mov.w	r2, #0
 810161e:	f04f 0300 	mov.w	r3, #0
 8101622:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101626:	f7ff f8e5 	bl	81007f4 <__aeabi_dcmpgt>
 810162a:	4603      	mov	r3, r0
 810162c:	2b00      	cmp	r3, #0
 810162e:	d002      	beq.n	8101636 <move_to_posX+0x7e>
			reset_Direction_X();} 								// clockwise | towards END
 8101630:	f000 fea6 	bl	8102380 <reset_Direction_X>
 8101634:	e00d      	b.n	8101652 <move_to_posX+0x9a>
		else if (delta < 0){
 8101636:	f04f 0200 	mov.w	r2, #0
 810163a:	f04f 0300 	mov.w	r3, #0
 810163e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101642:	f7ff f8b9 	bl	81007b8 <__aeabi_dcmplt>
 8101646:	4603      	mov	r3, r0
 8101648:	2b00      	cmp	r3, #0
 810164a:	d100      	bne.n	810164e <move_to_posX+0x96>
			set_Direction_X();}  								// counter-clockwise | towards HOME
		else{
			break;}
 810164c:	e0bb      	b.n	81017c6 <move_to_posX+0x20e>
			set_Direction_X();}  								// counter-clockwise | towards HOME
 810164e:	f000 fe8b 	bl	8102368 <set_Direction_X>

		counterX = __HAL_TIM_GET_COUNTER(&htim3);				// update counter
 8101652:	4b62      	ldr	r3, [pc, #392]	; (81017dc <move_to_posX+0x224>)
 8101654:	681b      	ldr	r3, [r3, #0]
 8101656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101658:	4a61      	ldr	r2, [pc, #388]	; (81017e0 <move_to_posX+0x228>)
 810165a:	6013      	str	r3, [r2, #0]
		/* Some Magic */
		if (counterX > 61680 && delta > 0 && once_X){
 810165c:	4b60      	ldr	r3, [pc, #384]	; (81017e0 <move_to_posX+0x228>)
 810165e:	681b      	ldr	r3, [r3, #0]
 8101660:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8101664:	4293      	cmp	r3, r2
 8101666:	d912      	bls.n	810168e <move_to_posX+0xd6>
 8101668:	f04f 0200 	mov.w	r2, #0
 810166c:	f04f 0300 	mov.w	r3, #0
 8101670:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101674:	f7ff f8be 	bl	81007f4 <__aeabi_dcmpgt>
 8101678:	4603      	mov	r3, r0
 810167a:	2b00      	cmp	r3, #0
 810167c:	d007      	beq.n	810168e <move_to_posX+0xd6>
 810167e:	4b5d      	ldr	r3, [pc, #372]	; (81017f4 <move_to_posX+0x23c>)
 8101680:	781b      	ldrb	r3, [r3, #0]
 8101682:	2b00      	cmp	r3, #0
 8101684:	d003      	beq.n	810168e <move_to_posX+0xd6>
			once_X = 0;}
 8101686:	4b5b      	ldr	r3, [pc, #364]	; (81017f4 <move_to_posX+0x23c>)
 8101688:	2200      	movs	r2, #0
 810168a:	701a      	strb	r2, [r3, #0]
 810168c:	e051      	b.n	8101732 <move_to_posX+0x17a>
		else if (counterX < 3855 && delta > 0 && !once_X){
 810168e:	4b54      	ldr	r3, [pc, #336]	; (81017e0 <move_to_posX+0x228>)
 8101690:	681b      	ldr	r3, [r3, #0]
 8101692:	f640 720e 	movw	r2, #3854	; 0xf0e
 8101696:	4293      	cmp	r3, r2
 8101698:	d818      	bhi.n	81016cc <move_to_posX+0x114>
 810169a:	f04f 0200 	mov.w	r2, #0
 810169e:	f04f 0300 	mov.w	r3, #0
 81016a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81016a6:	f7ff f8a5 	bl	81007f4 <__aeabi_dcmpgt>
 81016aa:	4603      	mov	r3, r0
 81016ac:	2b00      	cmp	r3, #0
 81016ae:	d00d      	beq.n	81016cc <move_to_posX+0x114>
 81016b0:	4b50      	ldr	r3, [pc, #320]	; (81017f4 <move_to_posX+0x23c>)
 81016b2:	781b      	ldrb	r3, [r3, #0]
 81016b4:	2b00      	cmp	r3, #0
 81016b6:	d109      	bne.n	81016cc <move_to_posX+0x114>
			once_X = 1, i_X += 1;}
 81016b8:	4b4e      	ldr	r3, [pc, #312]	; (81017f4 <move_to_posX+0x23c>)
 81016ba:	2201      	movs	r2, #1
 81016bc:	701a      	strb	r2, [r3, #0]
 81016be:	4b4a      	ldr	r3, [pc, #296]	; (81017e8 <move_to_posX+0x230>)
 81016c0:	781b      	ldrb	r3, [r3, #0]
 81016c2:	3301      	adds	r3, #1
 81016c4:	b2da      	uxtb	r2, r3
 81016c6:	4b48      	ldr	r3, [pc, #288]	; (81017e8 <move_to_posX+0x230>)
 81016c8:	701a      	strb	r2, [r3, #0]
 81016ca:	e032      	b.n	8101732 <move_to_posX+0x17a>
		else if (counterX < 3855 && delta < 0){
 81016cc:	4b44      	ldr	r3, [pc, #272]	; (81017e0 <move_to_posX+0x228>)
 81016ce:	681b      	ldr	r3, [r3, #0]
 81016d0:	f640 720e 	movw	r2, #3854	; 0xf0e
 81016d4:	4293      	cmp	r3, r2
 81016d6:	d80e      	bhi.n	81016f6 <move_to_posX+0x13e>
 81016d8:	f04f 0200 	mov.w	r2, #0
 81016dc:	f04f 0300 	mov.w	r3, #0
 81016e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81016e4:	f7ff f868 	bl	81007b8 <__aeabi_dcmplt>
 81016e8:	4603      	mov	r3, r0
 81016ea:	2b00      	cmp	r3, #0
 81016ec:	d003      	beq.n	81016f6 <move_to_posX+0x13e>
			once_X = 0;}
 81016ee:	4b41      	ldr	r3, [pc, #260]	; (81017f4 <move_to_posX+0x23c>)
 81016f0:	2200      	movs	r2, #0
 81016f2:	701a      	strb	r2, [r3, #0]
 81016f4:	e01d      	b.n	8101732 <move_to_posX+0x17a>
		else if (counterX > 61680 && delta < 0 && !once_X){
 81016f6:	4b3a      	ldr	r3, [pc, #232]	; (81017e0 <move_to_posX+0x228>)
 81016f8:	681b      	ldr	r3, [r3, #0]
 81016fa:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 81016fe:	4293      	cmp	r3, r2
 8101700:	d917      	bls.n	8101732 <move_to_posX+0x17a>
 8101702:	f04f 0200 	mov.w	r2, #0
 8101706:	f04f 0300 	mov.w	r3, #0
 810170a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810170e:	f7ff f853 	bl	81007b8 <__aeabi_dcmplt>
 8101712:	4603      	mov	r3, r0
 8101714:	2b00      	cmp	r3, #0
 8101716:	d00c      	beq.n	8101732 <move_to_posX+0x17a>
 8101718:	4b36      	ldr	r3, [pc, #216]	; (81017f4 <move_to_posX+0x23c>)
 810171a:	781b      	ldrb	r3, [r3, #0]
 810171c:	2b00      	cmp	r3, #0
 810171e:	d108      	bne.n	8101732 <move_to_posX+0x17a>
			once_X = 1, i_X -= 1;}
 8101720:	4b34      	ldr	r3, [pc, #208]	; (81017f4 <move_to_posX+0x23c>)
 8101722:	2201      	movs	r2, #1
 8101724:	701a      	strb	r2, [r3, #0]
 8101726:	4b30      	ldr	r3, [pc, #192]	; (81017e8 <move_to_posX+0x230>)
 8101728:	781b      	ldrb	r3, [r3, #0]
 810172a:	3b01      	subs	r3, #1
 810172c:	b2da      	uxtb	r2, r3
 810172e:	4b2e      	ldr	r3, [pc, #184]	; (81017e8 <move_to_posX+0x230>)
 8101730:	701a      	strb	r2, [r3, #0]
		/* End of Magic */

		position_mm_X = (double) ((counterX / 3855) + (i_X * 17));	// update position
 8101732:	4b2b      	ldr	r3, [pc, #172]	; (81017e0 <move_to_posX+0x228>)
 8101734:	681b      	ldr	r3, [r3, #0]
 8101736:	4a2b      	ldr	r2, [pc, #172]	; (81017e4 <move_to_posX+0x22c>)
 8101738:	fba2 2303 	umull	r2, r3, r2, r3
 810173c:	0ada      	lsrs	r2, r3, #11
 810173e:	4b2a      	ldr	r3, [pc, #168]	; (81017e8 <move_to_posX+0x230>)
 8101740:	781b      	ldrb	r3, [r3, #0]
 8101742:	4619      	mov	r1, r3
 8101744:	460b      	mov	r3, r1
 8101746:	011b      	lsls	r3, r3, #4
 8101748:	440b      	add	r3, r1
 810174a:	4413      	add	r3, r2
 810174c:	4618      	mov	r0, r3
 810174e:	f7fe ff59 	bl	8100604 <__aeabi_ui2d>
 8101752:	4602      	mov	r2, r0
 8101754:	460b      	mov	r3, r1
 8101756:	4925      	ldr	r1, [pc, #148]	; (81017ec <move_to_posX+0x234>)
 8101758:	e9c1 2300 	strd	r2, r3, [r1]
		delta = posX - position_mm_X;								// update delta
 810175c:	4b23      	ldr	r3, [pc, #140]	; (81017ec <move_to_posX+0x234>)
 810175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101766:	f7fe fe0f 	bl	8100388 <__aeabi_dsub>
 810176a:	4602      	mov	r2, r0
 810176c:	460b      	mov	r3, r1
 810176e:	e9c7 2302 	strd	r2, r3, [r7, #8]

		// limit msg sending every Nth operation
		if (msg_counter_x % 200000 == 0)							// TODO: move 10 to a define freq of msging
 8101772:	4b21      	ldr	r3, [pc, #132]	; (81017f8 <move_to_posX+0x240>)
 8101774:	681a      	ldr	r2, [r3, #0]
 8101776:	4b21      	ldr	r3, [pc, #132]	; (81017fc <move_to_posX+0x244>)
 8101778:	fb83 1302 	smull	r1, r3, r3, r2
 810177c:	1399      	asrs	r1, r3, #14
 810177e:	17d3      	asrs	r3, r2, #31
 8101780:	1acb      	subs	r3, r1, r3
 8101782:	491f      	ldr	r1, [pc, #124]	; (8101800 <move_to_posX+0x248>)
 8101784:	fb01 f303 	mul.w	r3, r1, r3
 8101788:	1ad3      	subs	r3, r2, r3
 810178a:	2b00      	cmp	r3, #0
 810178c:	d10b      	bne.n	81017a6 <move_to_posX+0x1ee>
		{
			send_msg_data((uint8_t*)"\rCurrently @ Pos X: %d\n\r", (int)position_mm_X);
 810178e:	4b17      	ldr	r3, [pc, #92]	; (81017ec <move_to_posX+0x234>)
 8101790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101794:	4610      	mov	r0, r2
 8101796:	4619      	mov	r1, r3
 8101798:	f7ff f836 	bl	8100808 <__aeabi_d2iz>
 810179c:	4603      	mov	r3, r0
 810179e:	4619      	mov	r1, r3
 81017a0:	4818      	ldr	r0, [pc, #96]	; (8101804 <move_to_posX+0x24c>)
 81017a2:	f001 fc77 	bl	8103094 <send_msg_data>
		}
		msg_counter_x++;
 81017a6:	4b14      	ldr	r3, [pc, #80]	; (81017f8 <move_to_posX+0x240>)
 81017a8:	681b      	ldr	r3, [r3, #0]
 81017aa:	3301      	adds	r3, #1
 81017ac:	4a12      	ldr	r2, [pc, #72]	; (81017f8 <move_to_posX+0x240>)
 81017ae:	6013      	str	r3, [r2, #0]
	while (abs(delta) > 1.5) 										// accuracy of movement TODO: prove it
 81017b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81017b4:	f7ff f828 	bl	8100808 <__aeabi_d2iz>
 81017b8:	4603      	mov	r3, r0
 81017ba:	2b00      	cmp	r3, #0
 81017bc:	bfb8      	it	lt
 81017be:	425b      	neglt	r3, r3
 81017c0:	2b01      	cmp	r3, #1
 81017c2:	f73f af2a 	bgt.w	810161a <move_to_posX+0x62>

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0);					// set PWM to 0
 81017c6:	4b0a      	ldr	r3, [pc, #40]	; (81017f0 <move_to_posX+0x238>)
 81017c8:	681b      	ldr	r3, [r3, #0]
 81017ca:	2200      	movs	r2, #0
 81017cc:	63da      	str	r2, [r3, #60]	; 0x3c
	reset_Ready_X();
 81017ce:	f000 fdef 	bl	81023b0 <reset_Ready_X>
	return 1;
 81017d2:	2301      	movs	r3, #1
}
 81017d4:	4618      	mov	r0, r3
 81017d6:	3710      	adds	r7, #16
 81017d8:	46bd      	mov	sp, r7
 81017da:	bd80      	pop	{r7, pc}
 81017dc:	10000220 	.word	0x10000220
 81017e0:	100000a4 	.word	0x100000a4
 81017e4:	88008801 	.word	0x88008801
 81017e8:	100000b4 	.word	0x100000b4
 81017ec:	100000a8 	.word	0x100000a8
 81017f0:	100001d4 	.word	0x100001d4
 81017f4:	10000008 	.word	0x10000008
 81017f8:	100000b0 	.word	0x100000b0
 81017fc:	14f8b589 	.word	0x14f8b589
 8101800:	00030d40 	.word	0x00030d40
 8101804:	0810b2b8 	.word	0x0810b2b8

08101808 <initMotorZ>:
uint8_t i_Z = 0;
uint8_t once_Z = 1;

void initMotorZ()
/* Initialises the necessary timers for motor Z */
{
 8101808:	b580      	push	{r7, lr}
 810180a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);   // Start PWM output for motor Z using TIM2 channel 4
 810180c:	210c      	movs	r1, #12
 810180e:	4804      	ldr	r0, [pc, #16]	; (8101820 <initMotorZ+0x18>)
 8101810:	f006 fc64 	bl	81080dc <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);   // Enable encoder interface with interrupt for all channels of TIM4
 8101814:	213c      	movs	r1, #60	; 0x3c
 8101816:	4803      	ldr	r0, [pc, #12]	; (8101824 <initMotorZ+0x1c>)
 8101818:	f006 fe14 	bl	8108444 <HAL_TIM_Encoder_Start_IT>
}
 810181c:	bf00      	nop
 810181e:	bd80      	pop	{r7, pc}
 8101820:	100001d4 	.word	0x100001d4
 8101824:	1000026c 	.word	0x1000026c

08101828 <homeMotorZ>:
uint8_t homeMotorZ()
/* homeMotorZ: Moves the motor to the home position
 *
 * return: none todo: make a return for error catching and/or others
 * */
{
 8101828:	b580      	push	{r7, lr}
 810182a:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 115); 	// set PWM of motor
 810182c:	4b15      	ldr	r3, [pc, #84]	; (8101884 <homeMotorZ+0x5c>)
 810182e:	681b      	ldr	r3, [r3, #0]
 8101830:	2273      	movs	r2, #115	; 0x73
 8101832:	641a      	str	r2, [r3, #64]	; 0x40

	set_Direction_Z(); 									// counter-clockwise | towards HOME TODO:Change name
 8101834:	f000 fdc8 	bl	81023c8 <set_Direction_Z>
	set_Ready_Z(); 										// enable motor TODO:Change name
 8101838:	f000 fdde 	bl	81023f8 <set_Ready_Z>


	while (!get_Homing_Z()) 							// wait until home-switch is hit
 810183c:	bf00      	nop
 810183e:	f000 fe1d 	bl	810247c <get_Homing_Z>
 8101842:	4603      	mov	r3, r0
 8101844:	2b00      	cmp	r3, #0
 8101846:	d0fa      	beq.n	810183e <homeMotorZ+0x16>
	{

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 0); 	// set PWM of motor
 8101848:	4b0e      	ldr	r3, [pc, #56]	; (8101884 <homeMotorZ+0x5c>)
 810184a:	681b      	ldr	r3, [r3, #0]
 810184c:	2200      	movs	r2, #0
 810184e:	641a      	str	r2, [r3, #64]	; 0x40
	reset_Ready_Z(); 									//disable motor
 8101850:	f000 fdde 	bl	8102410 <reset_Ready_Z>
	HAL_Delay(1000);
 8101854:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101858:	f001 fd10 	bl	810327c <HAL_Delay>
	/* reset variables */
	position_mm_Z = 0.0;
 810185c:	490a      	ldr	r1, [pc, #40]	; (8101888 <homeMotorZ+0x60>)
 810185e:	f04f 0200 	mov.w	r2, #0
 8101862:	f04f 0300 	mov.w	r3, #0
 8101866:	e9c1 2300 	strd	r2, r3, [r1]
	counterZ = 0;
 810186a:	4b08      	ldr	r3, [pc, #32]	; (810188c <homeMotorZ+0x64>)
 810186c:	2200      	movs	r2, #0
 810186e:	601a      	str	r2, [r3, #0]
	i_Z = 0;
 8101870:	4b07      	ldr	r3, [pc, #28]	; (8101890 <homeMotorZ+0x68>)
 8101872:	2200      	movs	r2, #0
 8101874:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim4, 0); 					// reset timer
 8101876:	4b07      	ldr	r3, [pc, #28]	; (8101894 <homeMotorZ+0x6c>)
 8101878:	681b      	ldr	r3, [r3, #0]
 810187a:	2200      	movs	r2, #0
 810187c:	625a      	str	r2, [r3, #36]	; 0x24
	return 1;
 810187e:	2301      	movs	r3, #1
}
 8101880:	4618      	mov	r0, r3
 8101882:	bd80      	pop	{r7, pc}
 8101884:	100001d4 	.word	0x100001d4
 8101888:	100000c0 	.word	0x100000c0
 810188c:	100000b8 	.word	0x100000b8
 8101890:	100000cc 	.word	0x100000cc
 8101894:	1000026c 	.word	0x1000026c

08101898 <move_to_posZ>:
/* move_to_posZ: Moves the motor to a position Z cm away from the home position
 *
 * @param posZ: Centimetres away from the home position
 *  RANGE posZ:  1 - 53 cm
 */
{
 8101898:	b580      	push	{r7, lr}
 810189a:	b084      	sub	sp, #16
 810189c:	af00      	add	r7, sp, #0
 810189e:	ed87 0b00 	vstr	d0, [r7]
	counterZ = __HAL_TIM_GET_COUNTER(&htim4);					// get timer value
 81018a2:	4b89      	ldr	r3, [pc, #548]	; (8101ac8 <move_to_posZ+0x230>)
 81018a4:	681b      	ldr	r3, [r3, #0]
 81018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81018a8:	4a88      	ldr	r2, [pc, #544]	; (8101acc <move_to_posZ+0x234>)
 81018aa:	6013      	str	r3, [r2, #0]
	position_mm_Z = (double) ((counterZ / 3855) + (i_Z * 17));	// get position
 81018ac:	4b87      	ldr	r3, [pc, #540]	; (8101acc <move_to_posZ+0x234>)
 81018ae:	681b      	ldr	r3, [r3, #0]
 81018b0:	4a87      	ldr	r2, [pc, #540]	; (8101ad0 <move_to_posZ+0x238>)
 81018b2:	fba2 2303 	umull	r2, r3, r2, r3
 81018b6:	0ada      	lsrs	r2, r3, #11
 81018b8:	4b86      	ldr	r3, [pc, #536]	; (8101ad4 <move_to_posZ+0x23c>)
 81018ba:	781b      	ldrb	r3, [r3, #0]
 81018bc:	4619      	mov	r1, r3
 81018be:	460b      	mov	r3, r1
 81018c0:	011b      	lsls	r3, r3, #4
 81018c2:	440b      	add	r3, r1
 81018c4:	4413      	add	r3, r2
 81018c6:	4618      	mov	r0, r3
 81018c8:	f7fe fe9c 	bl	8100604 <__aeabi_ui2d>
 81018cc:	4602      	mov	r2, r0
 81018ce:	460b      	mov	r3, r1
 81018d0:	4981      	ldr	r1, [pc, #516]	; (8101ad8 <move_to_posZ+0x240>)
 81018d2:	e9c1 2300 	strd	r2, r3, [r1]
	double delta = posZ - position_mm_Z;						// calculate delta
 81018d6:	4b80      	ldr	r3, [pc, #512]	; (8101ad8 <move_to_posZ+0x240>)
 81018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81018dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 81018e0:	f7fe fd52 	bl	8100388 <__aeabi_dsub>
 81018e4:	4602      	mov	r2, r0
 81018e6:	460b      	mov	r3, r1
 81018e8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	set_Ready_Z(); 												// enable motor
 81018ec:	f000 fd84 	bl	81023f8 <set_Ready_Z>
	while (abs(delta) > 1.5)										// desired accuracy in cm? TODO:prove it
 81018f0:	e0d3      	b.n	8101a9a <move_to_posZ+0x202>
	{
		if (delta > 0)
 81018f2:	f04f 0200 	mov.w	r2, #0
 81018f6:	f04f 0300 	mov.w	r3, #0
 81018fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81018fe:	f7fe ff79 	bl	81007f4 <__aeabi_dcmpgt>
 8101902:	4603      	mov	r3, r0
 8101904:	2b00      	cmp	r3, #0
 8101906:	d007      	beq.n	8101918 <move_to_posZ+0x80>
		{
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 450);	// adjust speed (prev val 340)
 8101908:	4b74      	ldr	r3, [pc, #464]	; (8101adc <move_to_posZ+0x244>)
 810190a:	681b      	ldr	r3, [r3, #0]
 810190c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8101910:	641a      	str	r2, [r3, #64]	; 0x40
			reset_Direction_Z(); 								// clockwise | towards END/up
 8101912:	f000 fd65 	bl	81023e0 <reset_Direction_Z>
 8101916:	e011      	b.n	810193c <move_to_posZ+0xa4>
		}
		else if (delta < 0)
 8101918:	f04f 0200 	mov.w	r2, #0
 810191c:	f04f 0300 	mov.w	r3, #0
 8101920:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101924:	f7fe ff48 	bl	81007b8 <__aeabi_dcmplt>
 8101928:	4603      	mov	r3, r0
 810192a:	2b00      	cmp	r3, #0
 810192c:	d100      	bne.n	8101930 <move_to_posZ+0x98>
		{
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 100); 	// adjust speed (prev val 120)
			set_Direction_Z(); 									// counter-clockwise | towards HOME/down
		}
		else
			break;
 810192e:	e0bf      	b.n	8101ab0 <move_to_posZ+0x218>
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 100); 	// adjust speed (prev val 120)
 8101930:	4b6a      	ldr	r3, [pc, #424]	; (8101adc <move_to_posZ+0x244>)
 8101932:	681b      	ldr	r3, [r3, #0]
 8101934:	2264      	movs	r2, #100	; 0x64
 8101936:	641a      	str	r2, [r3, #64]	; 0x40
			set_Direction_Z(); 									// counter-clockwise | towards HOME/down
 8101938:	f000 fd46 	bl	81023c8 <set_Direction_Z>

		counterZ = __HAL_TIM_GET_COUNTER(&htim4);				// update counter
 810193c:	4b62      	ldr	r3, [pc, #392]	; (8101ac8 <move_to_posZ+0x230>)
 810193e:	681b      	ldr	r3, [r3, #0]
 8101940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101942:	4a62      	ldr	r2, [pc, #392]	; (8101acc <move_to_posZ+0x234>)
 8101944:	6013      	str	r3, [r2, #0]
		/* Some Magic */
		if (counterZ > 61680 && delta > 0 && once_Z){
 8101946:	4b61      	ldr	r3, [pc, #388]	; (8101acc <move_to_posZ+0x234>)
 8101948:	681b      	ldr	r3, [r3, #0]
 810194a:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 810194e:	4293      	cmp	r3, r2
 8101950:	d912      	bls.n	8101978 <move_to_posZ+0xe0>
 8101952:	f04f 0200 	mov.w	r2, #0
 8101956:	f04f 0300 	mov.w	r3, #0
 810195a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810195e:	f7fe ff49 	bl	81007f4 <__aeabi_dcmpgt>
 8101962:	4603      	mov	r3, r0
 8101964:	2b00      	cmp	r3, #0
 8101966:	d007      	beq.n	8101978 <move_to_posZ+0xe0>
 8101968:	4b5d      	ldr	r3, [pc, #372]	; (8101ae0 <move_to_posZ+0x248>)
 810196a:	781b      	ldrb	r3, [r3, #0]
 810196c:	2b00      	cmp	r3, #0
 810196e:	d003      	beq.n	8101978 <move_to_posZ+0xe0>
			once_Z = 0;}
 8101970:	4b5b      	ldr	r3, [pc, #364]	; (8101ae0 <move_to_posZ+0x248>)
 8101972:	2200      	movs	r2, #0
 8101974:	701a      	strb	r2, [r3, #0]
 8101976:	e051      	b.n	8101a1c <move_to_posZ+0x184>
		else if (counterZ < 3855 && delta > 0 && !once_Z){
 8101978:	4b54      	ldr	r3, [pc, #336]	; (8101acc <move_to_posZ+0x234>)
 810197a:	681b      	ldr	r3, [r3, #0]
 810197c:	f640 720e 	movw	r2, #3854	; 0xf0e
 8101980:	4293      	cmp	r3, r2
 8101982:	d818      	bhi.n	81019b6 <move_to_posZ+0x11e>
 8101984:	f04f 0200 	mov.w	r2, #0
 8101988:	f04f 0300 	mov.w	r3, #0
 810198c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101990:	f7fe ff30 	bl	81007f4 <__aeabi_dcmpgt>
 8101994:	4603      	mov	r3, r0
 8101996:	2b00      	cmp	r3, #0
 8101998:	d00d      	beq.n	81019b6 <move_to_posZ+0x11e>
 810199a:	4b51      	ldr	r3, [pc, #324]	; (8101ae0 <move_to_posZ+0x248>)
 810199c:	781b      	ldrb	r3, [r3, #0]
 810199e:	2b00      	cmp	r3, #0
 81019a0:	d109      	bne.n	81019b6 <move_to_posZ+0x11e>
			once_Z = 1, i_Z += 1;}
 81019a2:	4b4f      	ldr	r3, [pc, #316]	; (8101ae0 <move_to_posZ+0x248>)
 81019a4:	2201      	movs	r2, #1
 81019a6:	701a      	strb	r2, [r3, #0]
 81019a8:	4b4a      	ldr	r3, [pc, #296]	; (8101ad4 <move_to_posZ+0x23c>)
 81019aa:	781b      	ldrb	r3, [r3, #0]
 81019ac:	3301      	adds	r3, #1
 81019ae:	b2da      	uxtb	r2, r3
 81019b0:	4b48      	ldr	r3, [pc, #288]	; (8101ad4 <move_to_posZ+0x23c>)
 81019b2:	701a      	strb	r2, [r3, #0]
 81019b4:	e032      	b.n	8101a1c <move_to_posZ+0x184>
		else if (counterZ < 3855 && delta < 0){
 81019b6:	4b45      	ldr	r3, [pc, #276]	; (8101acc <move_to_posZ+0x234>)
 81019b8:	681b      	ldr	r3, [r3, #0]
 81019ba:	f640 720e 	movw	r2, #3854	; 0xf0e
 81019be:	4293      	cmp	r3, r2
 81019c0:	d80e      	bhi.n	81019e0 <move_to_posZ+0x148>
 81019c2:	f04f 0200 	mov.w	r2, #0
 81019c6:	f04f 0300 	mov.w	r3, #0
 81019ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81019ce:	f7fe fef3 	bl	81007b8 <__aeabi_dcmplt>
 81019d2:	4603      	mov	r3, r0
 81019d4:	2b00      	cmp	r3, #0
 81019d6:	d003      	beq.n	81019e0 <move_to_posZ+0x148>
			once_Z = 0;}
 81019d8:	4b41      	ldr	r3, [pc, #260]	; (8101ae0 <move_to_posZ+0x248>)
 81019da:	2200      	movs	r2, #0
 81019dc:	701a      	strb	r2, [r3, #0]
 81019de:	e01d      	b.n	8101a1c <move_to_posZ+0x184>
		else if (counterZ > 61680 && delta < 0 && !once_Z){
 81019e0:	4b3a      	ldr	r3, [pc, #232]	; (8101acc <move_to_posZ+0x234>)
 81019e2:	681b      	ldr	r3, [r3, #0]
 81019e4:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 81019e8:	4293      	cmp	r3, r2
 81019ea:	d917      	bls.n	8101a1c <move_to_posZ+0x184>
 81019ec:	f04f 0200 	mov.w	r2, #0
 81019f0:	f04f 0300 	mov.w	r3, #0
 81019f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81019f8:	f7fe fede 	bl	81007b8 <__aeabi_dcmplt>
 81019fc:	4603      	mov	r3, r0
 81019fe:	2b00      	cmp	r3, #0
 8101a00:	d00c      	beq.n	8101a1c <move_to_posZ+0x184>
 8101a02:	4b37      	ldr	r3, [pc, #220]	; (8101ae0 <move_to_posZ+0x248>)
 8101a04:	781b      	ldrb	r3, [r3, #0]
 8101a06:	2b00      	cmp	r3, #0
 8101a08:	d108      	bne.n	8101a1c <move_to_posZ+0x184>
			once_Z = 1, i_Z -= 1;}
 8101a0a:	4b35      	ldr	r3, [pc, #212]	; (8101ae0 <move_to_posZ+0x248>)
 8101a0c:	2201      	movs	r2, #1
 8101a0e:	701a      	strb	r2, [r3, #0]
 8101a10:	4b30      	ldr	r3, [pc, #192]	; (8101ad4 <move_to_posZ+0x23c>)
 8101a12:	781b      	ldrb	r3, [r3, #0]
 8101a14:	3b01      	subs	r3, #1
 8101a16:	b2da      	uxtb	r2, r3
 8101a18:	4b2e      	ldr	r3, [pc, #184]	; (8101ad4 <move_to_posZ+0x23c>)
 8101a1a:	701a      	strb	r2, [r3, #0]
		/* End of Magic */

		position_mm_Z = (double) ((counterZ / 3855) + (i_Z * 17));  // update position
 8101a1c:	4b2b      	ldr	r3, [pc, #172]	; (8101acc <move_to_posZ+0x234>)
 8101a1e:	681b      	ldr	r3, [r3, #0]
 8101a20:	4a2b      	ldr	r2, [pc, #172]	; (8101ad0 <move_to_posZ+0x238>)
 8101a22:	fba2 2303 	umull	r2, r3, r2, r3
 8101a26:	0ada      	lsrs	r2, r3, #11
 8101a28:	4b2a      	ldr	r3, [pc, #168]	; (8101ad4 <move_to_posZ+0x23c>)
 8101a2a:	781b      	ldrb	r3, [r3, #0]
 8101a2c:	4619      	mov	r1, r3
 8101a2e:	460b      	mov	r3, r1
 8101a30:	011b      	lsls	r3, r3, #4
 8101a32:	440b      	add	r3, r1
 8101a34:	4413      	add	r3, r2
 8101a36:	4618      	mov	r0, r3
 8101a38:	f7fe fde4 	bl	8100604 <__aeabi_ui2d>
 8101a3c:	4602      	mov	r2, r0
 8101a3e:	460b      	mov	r3, r1
 8101a40:	4925      	ldr	r1, [pc, #148]	; (8101ad8 <move_to_posZ+0x240>)
 8101a42:	e9c1 2300 	strd	r2, r3, [r1]
		delta = posZ - position_mm_Z;								// update delta
 8101a46:	4b24      	ldr	r3, [pc, #144]	; (8101ad8 <move_to_posZ+0x240>)
 8101a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101a50:	f7fe fc9a 	bl	8100388 <__aeabi_dsub>
 8101a54:	4602      	mov	r2, r0
 8101a56:	460b      	mov	r3, r1
 8101a58:	e9c7 2302 	strd	r2, r3, [r7, #8]

		// limit msg sending every Nth itteration
		if (msg_counter_z % 200000 == 0)							// TODO: move 200000 to a define freq of msging
 8101a5c:	4b21      	ldr	r3, [pc, #132]	; (8101ae4 <move_to_posZ+0x24c>)
 8101a5e:	681a      	ldr	r2, [r3, #0]
 8101a60:	4b21      	ldr	r3, [pc, #132]	; (8101ae8 <move_to_posZ+0x250>)
 8101a62:	fb83 1302 	smull	r1, r3, r3, r2
 8101a66:	1399      	asrs	r1, r3, #14
 8101a68:	17d3      	asrs	r3, r2, #31
 8101a6a:	1acb      	subs	r3, r1, r3
 8101a6c:	491f      	ldr	r1, [pc, #124]	; (8101aec <move_to_posZ+0x254>)
 8101a6e:	fb01 f303 	mul.w	r3, r1, r3
 8101a72:	1ad3      	subs	r3, r2, r3
 8101a74:	2b00      	cmp	r3, #0
 8101a76:	d10b      	bne.n	8101a90 <move_to_posZ+0x1f8>
		{
			send_msg_data((uint8_t*)"\rCurrently @ Pos Z: %d\n\r", (int)position_mm_Z);
 8101a78:	4b17      	ldr	r3, [pc, #92]	; (8101ad8 <move_to_posZ+0x240>)
 8101a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a7e:	4610      	mov	r0, r2
 8101a80:	4619      	mov	r1, r3
 8101a82:	f7fe fec1 	bl	8100808 <__aeabi_d2iz>
 8101a86:	4603      	mov	r3, r0
 8101a88:	4619      	mov	r1, r3
 8101a8a:	4819      	ldr	r0, [pc, #100]	; (8101af0 <move_to_posZ+0x258>)
 8101a8c:	f001 fb02 	bl	8103094 <send_msg_data>
		}
		msg_counter_z++;
 8101a90:	4b14      	ldr	r3, [pc, #80]	; (8101ae4 <move_to_posZ+0x24c>)
 8101a92:	681b      	ldr	r3, [r3, #0]
 8101a94:	3301      	adds	r3, #1
 8101a96:	4a13      	ldr	r2, [pc, #76]	; (8101ae4 <move_to_posZ+0x24c>)
 8101a98:	6013      	str	r3, [r2, #0]
	while (abs(delta) > 1.5)										// desired accuracy in cm? TODO:prove it
 8101a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101a9e:	f7fe feb3 	bl	8100808 <__aeabi_d2iz>
 8101aa2:	4603      	mov	r3, r0
 8101aa4:	2b00      	cmp	r3, #0
 8101aa6:	bfb8      	it	lt
 8101aa8:	425b      	neglt	r3, r3
 8101aaa:	2b01      	cmp	r3, #1
 8101aac:	f73f af21 	bgt.w	81018f2 <move_to_posZ+0x5a>

	}
	reset_Direction_Z(); 					// reverses the direction to stop it from dropping due gravity
 8101ab0:	f000 fc96 	bl	81023e0 <reset_Direction_Z>
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 200); //  PWM to lower value to improve power consumption
 8101ab4:	4b09      	ldr	r3, [pc, #36]	; (8101adc <move_to_posZ+0x244>)
 8101ab6:	681b      	ldr	r3, [r3, #0]
 8101ab8:	22c8      	movs	r2, #200	; 0xc8
 8101aba:	641a      	str	r2, [r3, #64]	; 0x40
	return 1;
 8101abc:	2301      	movs	r3, #1
}
 8101abe:	4618      	mov	r0, r3
 8101ac0:	3710      	adds	r7, #16
 8101ac2:	46bd      	mov	sp, r7
 8101ac4:	bd80      	pop	{r7, pc}
 8101ac6:	bf00      	nop
 8101ac8:	1000026c 	.word	0x1000026c
 8101acc:	100000b8 	.word	0x100000b8
 8101ad0:	88008801 	.word	0x88008801
 8101ad4:	100000cc 	.word	0x100000cc
 8101ad8:	100000c0 	.word	0x100000c0
 8101adc:	100001d4 	.word	0x100001d4
 8101ae0:	10000009 	.word	0x10000009
 8101ae4:	100000c8 	.word	0x100000c8
 8101ae8:	14f8b589 	.word	0x14f8b589
 8101aec:	00030d40 	.word	0x00030d40
 8101af0:	0810b2d4 	.word	0x0810b2d4

08101af4 <set_Rotate_Servo>:
/* set_Rotate_Servo: Sets the angle of the servo controlling the end-effector rotator
 *
 * @param angle: Angle of rotation in degrees
 * Acceptable values between 1 - 23 degrees
 */
{
 8101af4:	b480      	push	{r7}
 8101af6:	b083      	sub	sp, #12
 8101af8:	af00      	add	r7, sp, #0
 8101afa:	ed87 0a01 	vstr	s0, [r7, #4]
	t_pulse_rotate = 10 * ((uint32_t) angle) + CONTROL_PULSE_MIN; 	// from data sheet of Parallax Standard Servo
 8101afe:	edd7 7a01 	vldr	s15, [r7, #4]
 8101b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101b06:	ee17 2a90 	vmov	r2, s15
 8101b0a:	4613      	mov	r3, r2
 8101b0c:	009b      	lsls	r3, r3, #2
 8101b0e:	4413      	add	r3, r2
 8101b10:	005b      	lsls	r3, r3, #1
 8101b12:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8101b16:	4a0d      	ldr	r2, [pc, #52]	; (8101b4c <set_Rotate_Servo+0x58>)
 8101b18:	6013      	str	r3, [r2, #0]
	CCR_value_rotate = (t_pulse_rotate - CONTROL_PULSE_MIN)
			* (TIMER_COUNTER_PERIOD) / (CONTROL_PULSE_RANGE); 		// mapping the values of us to the range of Timer Counter
 8101b1a:	4b0c      	ldr	r3, [pc, #48]	; (8101b4c <set_Rotate_Servo+0x58>)
 8101b1c:	681b      	ldr	r3, [r3, #0]
 8101b1e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8101b22:	fb03 f202 	mul.w	r2, r3, r2
 8101b26:	4b0a      	ldr	r3, [pc, #40]	; (8101b50 <set_Rotate_Servo+0x5c>)
 8101b28:	4413      	add	r3, r2
 8101b2a:	4a0a      	ldr	r2, [pc, #40]	; (8101b54 <set_Rotate_Servo+0x60>)
 8101b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8101b30:	0a9b      	lsrs	r3, r3, #10
	CCR_value_rotate = (t_pulse_rotate - CONTROL_PULSE_MIN)
 8101b32:	4a09      	ldr	r2, [pc, #36]	; (8101b58 <set_Rotate_Servo+0x64>)
 8101b34:	6013      	str	r3, [r2, #0]
	TIM13->CCR1 = CCR_value_rotate; 								// applying value to TIM
 8101b36:	4a09      	ldr	r2, [pc, #36]	; (8101b5c <set_Rotate_Servo+0x68>)
 8101b38:	4b07      	ldr	r3, [pc, #28]	; (8101b58 <set_Rotate_Servo+0x64>)
 8101b3a:	681b      	ldr	r3, [r3, #0]
 8101b3c:	6353      	str	r3, [r2, #52]	; 0x34
}
 8101b3e:	bf00      	nop
 8101b40:	370c      	adds	r7, #12
 8101b42:	46bd      	mov	sp, r7
 8101b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b48:	4770      	bx	lr
 8101b4a:	bf00      	nop
 8101b4c:	100000d0 	.word	0x100000d0
 8101b50:	fdc85f80 	.word	0xfdc85f80
 8101b54:	91a2b3c5 	.word	0x91a2b3c5
 8101b58:	100000d8 	.word	0x100000d8
 8101b5c:	40001c00 	.word	0x40001c00

08101b60 <set_Slide_Servo>:
/* set_Slide_Servo: Sets the angle of the servo controlling the board opening slider
 *
 * @param angle: Angle of rotation in degrees
 * Acceptable values between 1 - 25 degrees
 */
{
 8101b60:	b480      	push	{r7}
 8101b62:	b083      	sub	sp, #12
 8101b64:	af00      	add	r7, sp, #0
 8101b66:	ed87 0a01 	vstr	s0, [r7, #4]
	t_pulse_slide = 10 * ((uint32_t) angle) + CONTROL_PULSE_MIN; 	// from data sheet of Parallax Standard Servo
 8101b6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8101b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101b72:	ee17 2a90 	vmov	r2, s15
 8101b76:	4613      	mov	r3, r2
 8101b78:	009b      	lsls	r3, r3, #2
 8101b7a:	4413      	add	r3, r2
 8101b7c:	005b      	lsls	r3, r3, #1
 8101b7e:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8101b82:	4a0d      	ldr	r2, [pc, #52]	; (8101bb8 <set_Slide_Servo+0x58>)
 8101b84:	6013      	str	r3, [r2, #0]
	CCR_value_slide = (t_pulse_slide - CONTROL_PULSE_MIN)
			* (TIMER_COUNTER_PERIOD) / (CONTROL_PULSE_RANGE); 		// mapping the values of us to the range of Timer Counter
 8101b86:	4b0c      	ldr	r3, [pc, #48]	; (8101bb8 <set_Slide_Servo+0x58>)
 8101b88:	681b      	ldr	r3, [r3, #0]
 8101b8a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8101b8e:	fb03 f202 	mul.w	r2, r3, r2
 8101b92:	4b0a      	ldr	r3, [pc, #40]	; (8101bbc <set_Slide_Servo+0x5c>)
 8101b94:	4413      	add	r3, r2
 8101b96:	4a0a      	ldr	r2, [pc, #40]	; (8101bc0 <set_Slide_Servo+0x60>)
 8101b98:	fba2 2303 	umull	r2, r3, r2, r3
 8101b9c:	0a9b      	lsrs	r3, r3, #10
	CCR_value_slide = (t_pulse_slide - CONTROL_PULSE_MIN)
 8101b9e:	4a09      	ldr	r2, [pc, #36]	; (8101bc4 <set_Slide_Servo+0x64>)
 8101ba0:	6013      	str	r3, [r2, #0]
	TIM14->CCR1 = CCR_value_slide; 									// applying value to TIM
 8101ba2:	4a09      	ldr	r2, [pc, #36]	; (8101bc8 <set_Slide_Servo+0x68>)
 8101ba4:	4b07      	ldr	r3, [pc, #28]	; (8101bc4 <set_Slide_Servo+0x64>)
 8101ba6:	681b      	ldr	r3, [r3, #0]
 8101ba8:	6353      	str	r3, [r2, #52]	; 0x34
}
 8101baa:	bf00      	nop
 8101bac:	370c      	adds	r7, #12
 8101bae:	46bd      	mov	sp, r7
 8101bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bb4:	4770      	bx	lr
 8101bb6:	bf00      	nop
 8101bb8:	100000d4 	.word	0x100000d4
 8101bbc:	fdc85f80 	.word	0xfdc85f80
 8101bc0:	91a2b3c5 	.word	0x91a2b3c5
 8101bc4:	100000dc 	.word	0x100000dc
 8101bc8:	40002000 	.word	0x40002000

08101bcc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8101bcc:	b480      	push	{r7}
 8101bce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101bd0:	f3bf 8f4f 	dsb	sy
}
 8101bd4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8101bd6:	4b06      	ldr	r3, [pc, #24]	; (8101bf0 <__NVIC_SystemReset+0x24>)
 8101bd8:	68db      	ldr	r3, [r3, #12]
 8101bda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8101bde:	4904      	ldr	r1, [pc, #16]	; (8101bf0 <__NVIC_SystemReset+0x24>)
 8101be0:	4b04      	ldr	r3, [pc, #16]	; (8101bf4 <__NVIC_SystemReset+0x28>)
 8101be2:	4313      	orrs	r3, r2
 8101be4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8101be6:	f3bf 8f4f 	dsb	sy
}
 8101bea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8101bec:	bf00      	nop
 8101bee:	e7fd      	b.n	8101bec <__NVIC_SystemReset+0x20>
 8101bf0:	e000ed00 	.word	0xe000ed00
 8101bf4:	05fa0004 	.word	0x05fa0004

08101bf8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8101bf8:	b580      	push	{r7, lr}
 8101bfa:	b086      	sub	sp, #24
 8101bfc:	af00      	add	r7, sp, #0

	/* USER CODE END 1 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8101bfe:	4b67      	ldr	r3, [pc, #412]	; (8101d9c <main+0x1a4>)
 8101c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c04:	4a65      	ldr	r2, [pc, #404]	; (8101d9c <main+0x1a4>)
 8101c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c0e:	4b63      	ldr	r3, [pc, #396]	; (8101d9c <main+0x1a4>)
 8101c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101c18:	60fb      	str	r3, [r7, #12]
 8101c1a:	68fb      	ldr	r3, [r7, #12]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101c1c:	2001      	movs	r0, #1
 8101c1e:	f002 ff21 	bl	8104a64 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8101c22:	f003 fdc1 	bl	81057a8 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8101c26:	2201      	movs	r2, #1
 8101c28:	2102      	movs	r1, #2
 8101c2a:	2000      	movs	r0, #0
 8101c2c:	f003 fd42 	bl	81056b4 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101c30:	4b5b      	ldr	r3, [pc, #364]	; (8101da0 <main+0x1a8>)
 8101c32:	681b      	ldr	r3, [r3, #0]
 8101c34:	091b      	lsrs	r3, r3, #4
 8101c36:	f003 030f 	and.w	r3, r3, #15
 8101c3a:	2b07      	cmp	r3, #7
 8101c3c:	d108      	bne.n	8101c50 <main+0x58>
 8101c3e:	4b59      	ldr	r3, [pc, #356]	; (8101da4 <main+0x1ac>)
 8101c40:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101c44:	4a57      	ldr	r2, [pc, #348]	; (8101da4 <main+0x1ac>)
 8101c46:	f043 0301 	orr.w	r3, r3, #1
 8101c4a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101c4e:	e007      	b.n	8101c60 <main+0x68>
 8101c50:	4b54      	ldr	r3, [pc, #336]	; (8101da4 <main+0x1ac>)
 8101c52:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101c56:	4a53      	ldr	r2, [pc, #332]	; (8101da4 <main+0x1ac>)
 8101c58:	f043 0301 	orr.w	r3, r3, #1
 8101c5c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8101c60:	f001 fa58 	bl	8103114 <HAL_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8101c64:	f000 fa04 	bl	8102070 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8101c68:	f001 f8c6 	bl	8102df8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	init_Start_Up();
 8101c6c:	f7ff f884 	bl	8100d78 <init_Start_Up>
	//uint16_t value_proxy = 0;
	//int columnDetected = 0;
	//VCNL4010 struct_proxy;
	TCS3472 struct_rgb;

	struct_rgb = TCS3472_Create(RGB_ADD, &hi2c1);
 8101c70:	463b      	mov	r3, r7
 8101c72:	4a4d      	ldr	r2, [pc, #308]	; (8101da8 <main+0x1b0>)
 8101c74:	2129      	movs	r1, #41	; 0x29
 8101c76:	4618      	mov	r0, r3
 8101c78:	f7ff fba2 	bl	81013c0 <TCS3472_Create>
 8101c7c:	f107 0310 	add.w	r3, r7, #16
 8101c80:	463a      	mov	r2, r7
 8101c82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101c86:	e883 0003 	stmia.w	r3, {r0, r1}
	rgb_init(&struct_rgb);
 8101c8a:	f107 0310 	add.w	r3, r7, #16
 8101c8e:	4618      	mov	r0, r3
 8101c90:	f7ff fbb0 	bl	81013f4 <rgb_init>
	init_coinDetector();
 8101c94:	f7ff fa72 	bl	810117c <init_coinDetector>

	activate_HSEM_Notifications();
 8101c98:	f7ff f8b8 	bl	8100e0c <activate_HSEM_Notifications>

		 move_to_X_and_Z(X_POS_FLIPPER, Z_POS_FLIPPER_BASE); // go up
		 HAL_Delay(500);
		 */
		// HAL_Delay(1);
		current_state_CM4 = check_state();
 8101c9c:	f7ff fa34 	bl	8101108 <check_state>
 8101ca0:	4603      	mov	r3, r0
 8101ca2:	4a42      	ldr	r2, [pc, #264]	; (8101dac <main+0x1b4>)
 8101ca4:	6013      	str	r3, [r2, #0]

		if (current_state_CM4 != previous_state_CM4)
 8101ca6:	4b41      	ldr	r3, [pc, #260]	; (8101dac <main+0x1b4>)
 8101ca8:	681a      	ldr	r2, [r3, #0]
 8101caa:	4b41      	ldr	r3, [pc, #260]	; (8101db0 <main+0x1b8>)
 8101cac:	681b      	ldr	r3, [r3, #0]
 8101cae:	429a      	cmp	r2, r3
 8101cb0:	d06f      	beq.n	8101d92 <main+0x19a>
		{
			switch (current_state_CM4)
 8101cb2:	4b3e      	ldr	r3, [pc, #248]	; (8101dac <main+0x1b4>)
 8101cb4:	681b      	ldr	r3, [r3, #0]
 8101cb6:	2b06      	cmp	r3, #6
 8101cb8:	d86d      	bhi.n	8101d96 <main+0x19e>
 8101cba:	a201      	add	r2, pc, #4	; (adr r2, 8101cc0 <main+0xc8>)
 8101cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101cc0:	08101cdd 	.word	0x08101cdd
 8101cc4:	08101cf7 	.word	0x08101cf7
 8101cc8:	08101d11 	.word	0x08101d11
 8101ccc:	08101d25 	.word	0x08101d25
 8101cd0:	08101d45 	.word	0x08101d45
 8101cd4:	08101d5f 	.word	0x08101d5f
 8101cd8:	08101d79 	.word	0x08101d79
			{
			case STATE_INIT:
				send_msg((uint8_t*) "\r⇛⇛⇛ Entering INITIALISATION STATE ⇚⇚⇚\n\r");
 8101cdc:	4835      	ldr	r0, [pc, #212]	; (8101db4 <main+0x1bc>)
 8101cde:	f001 f9c5 	bl	810306c <send_msg>
				gameplay_loop_CM4(current_state_CM4);
 8101ce2:	4b32      	ldr	r3, [pc, #200]	; (8101dac <main+0x1b4>)
 8101ce4:	681b      	ldr	r3, [r3, #0]
 8101ce6:	4618      	mov	r0, r3
 8101ce8:	f7ff f922 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101cec:	4b2f      	ldr	r3, [pc, #188]	; (8101dac <main+0x1b4>)
 8101cee:	681b      	ldr	r3, [r3, #0]
 8101cf0:	4a2f      	ldr	r2, [pc, #188]	; (8101db0 <main+0x1b8>)
 8101cf2:	6013      	str	r3, [r2, #0]
				break;
 8101cf4:	e050      	b.n	8101d98 <main+0x1a0>

			case STATE_IDLE:
				send_msg((uint8_t*) "\r⇛⇛⇛ Entering IDLE STATE ⇚⇚⇚\n\r");
 8101cf6:	4830      	ldr	r0, [pc, #192]	; (8101db8 <main+0x1c0>)
 8101cf8:	f001 f9b8 	bl	810306c <send_msg>
				gameplay_loop_CM4(current_state_CM4);
 8101cfc:	4b2b      	ldr	r3, [pc, #172]	; (8101dac <main+0x1b4>)
 8101cfe:	681b      	ldr	r3, [r3, #0]
 8101d00:	4618      	mov	r0, r3
 8101d02:	f7ff f915 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101d06:	4b29      	ldr	r3, [pc, #164]	; (8101dac <main+0x1b4>)
 8101d08:	681b      	ldr	r3, [r3, #0]
 8101d0a:	4a29      	ldr	r2, [pc, #164]	; (8101db0 <main+0x1b8>)
 8101d0c:	6013      	str	r3, [r2, #0]
				break;
 8101d0e:	e043      	b.n	8101d98 <main+0x1a0>

			case STATE_ROBOT_TURN:
				gameplay_loop_CM4(current_state_CM4);
 8101d10:	4b26      	ldr	r3, [pc, #152]	; (8101dac <main+0x1b4>)
 8101d12:	681b      	ldr	r3, [r3, #0]
 8101d14:	4618      	mov	r0, r3
 8101d16:	f7ff f90b 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101d1a:	4b24      	ldr	r3, [pc, #144]	; (8101dac <main+0x1b4>)
 8101d1c:	681b      	ldr	r3, [r3, #0]
 8101d1e:	4a24      	ldr	r2, [pc, #144]	; (8101db0 <main+0x1b8>)
 8101d20:	6013      	str	r3, [r2, #0]
				break;
 8101d22:	e039      	b.n	8101d98 <main+0x1a0>

			case STATE_USER_TURN:
				send_msg((uint8_t*) "\r⇛⇛⇛ It is the USER's TURN ⇚⇚⇚\n\r");
 8101d24:	4825      	ldr	r0, [pc, #148]	; (8101dbc <main+0x1c4>)
 8101d26:	f001 f9a1 	bl	810306c <send_msg>
				send_msg((uint8_t*) "\rWaiting for token INSERTION ...\n\r");
 8101d2a:	4825      	ldr	r0, [pc, #148]	; (8101dc0 <main+0x1c8>)
 8101d2c:	f001 f99e 	bl	810306c <send_msg>
				gameplay_loop_CM4(current_state_CM4);
 8101d30:	4b1e      	ldr	r3, [pc, #120]	; (8101dac <main+0x1b4>)
 8101d32:	681b      	ldr	r3, [r3, #0]
 8101d34:	4618      	mov	r0, r3
 8101d36:	f7ff f8fb 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101d3a:	4b1c      	ldr	r3, [pc, #112]	; (8101dac <main+0x1b4>)
 8101d3c:	681b      	ldr	r3, [r3, #0]
 8101d3e:	4a1c      	ldr	r2, [pc, #112]	; (8101db0 <main+0x1b8>)
 8101d40:	6013      	str	r3, [r2, #0]
				break;
 8101d42:	e029      	b.n	8101d98 <main+0x1a0>

			case STATE_CLEAN_UP:
				send_msg((uint8_t*) "\r⇛⇛⇛ Starting to clean the board⇚⇚⇚\n\r");
 8101d44:	481f      	ldr	r0, [pc, #124]	; (8101dc4 <main+0x1cc>)
 8101d46:	f001 f991 	bl	810306c <send_msg>
				gameplay_loop_CM4(current_state_CM4);
 8101d4a:	4b18      	ldr	r3, [pc, #96]	; (8101dac <main+0x1b4>)
 8101d4c:	681b      	ldr	r3, [r3, #0]
 8101d4e:	4618      	mov	r0, r3
 8101d50:	f7ff f8ee 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101d54:	4b15      	ldr	r3, [pc, #84]	; (8101dac <main+0x1b4>)
 8101d56:	681b      	ldr	r3, [r3, #0]
 8101d58:	4a15      	ldr	r2, [pc, #84]	; (8101db0 <main+0x1b8>)
 8101d5a:	6013      	str	r3, [r2, #0]
				break;
 8101d5c:	e01c      	b.n	8101d98 <main+0x1a0>

			case STATE_CHEAT_DETECTED:
				send_msg((uint8_t*) "\r⇛⇛⇛Entering CHEATER DETECTED STATE⇚⇚⇚\n\r");
 8101d5e:	481a      	ldr	r0, [pc, #104]	; (8101dc8 <main+0x1d0>)
 8101d60:	f001 f984 	bl	810306c <send_msg>
				gameplay_loop_CM4(current_state_CM4);
 8101d64:	4b11      	ldr	r3, [pc, #68]	; (8101dac <main+0x1b4>)
 8101d66:	681b      	ldr	r3, [r3, #0]
 8101d68:	4618      	mov	r0, r3
 8101d6a:	f7ff f8e1 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101d6e:	4b0f      	ldr	r3, [pc, #60]	; (8101dac <main+0x1b4>)
 8101d70:	681b      	ldr	r3, [r3, #0]
 8101d72:	4a0f      	ldr	r2, [pc, #60]	; (8101db0 <main+0x1b8>)
 8101d74:	6013      	str	r3, [r2, #0]
				break;
 8101d76:	e00f      	b.n	8101d98 <main+0x1a0>

			case STATE_GAME_END:
				send_msg((uint8_t*) "\r⇛⇛⇛The game has finished!⇚⇚⇚\n\r");
 8101d78:	4814      	ldr	r0, [pc, #80]	; (8101dcc <main+0x1d4>)
 8101d7a:	f001 f977 	bl	810306c <send_msg>
				gameplay_loop_CM4(current_state_CM4);
 8101d7e:	4b0b      	ldr	r3, [pc, #44]	; (8101dac <main+0x1b4>)
 8101d80:	681b      	ldr	r3, [r3, #0]
 8101d82:	4618      	mov	r0, r3
 8101d84:	f7ff f8d4 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101d88:	4b08      	ldr	r3, [pc, #32]	; (8101dac <main+0x1b4>)
 8101d8a:	681b      	ldr	r3, [r3, #0]
 8101d8c:	4a08      	ldr	r2, [pc, #32]	; (8101db0 <main+0x1b8>)
 8101d8e:	6013      	str	r3, [r2, #0]
				break;
 8101d90:	e002      	b.n	8101d98 <main+0x1a0>

			default:
				break;
			}

		}
 8101d92:	bf00      	nop
 8101d94:	e782      	b.n	8101c9c <main+0xa4>
				break;
 8101d96:	bf00      	nop
		current_state_CM4 = check_state();
 8101d98:	e780      	b.n	8101c9c <main+0xa4>
 8101d9a:	bf00      	nop
 8101d9c:	58024400 	.word	0x58024400
 8101da0:	e000ed00 	.word	0xe000ed00
 8101da4:	58026400 	.word	0x58026400
 8101da8:	10000188 	.word	0x10000188
 8101dac:	10000010 	.word	0x10000010
 8101db0:	10000014 	.word	0x10000014
 8101db4:	0810b2f0 	.word	0x0810b2f0
 8101db8:	0810b328 	.word	0x0810b328
 8101dbc:	0810b354 	.word	0x0810b354
 8101dc0:	0810b384 	.word	0x0810b384
 8101dc4:	0810b3a8 	.word	0x0810b3a8
 8101dc8:	0810b3dc 	.word	0x0810b3dc
 8101dcc:	0810b414 	.word	0x0810b414

08101dd0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8101dd0:	b580      	push	{r7, lr}
 8101dd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8101dd4:	b672      	cpsid	i
}
 8101dd6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	reset_Enable_Power();
 8101dd8:	f000 fb32 	bl	8102440 <reset_Enable_Power>

	send_msg((uint8_t*) "\rERROR, resetting\n\r");
 8101ddc:	4802      	ldr	r0, [pc, #8]	; (8101de8 <Error_Handler+0x18>)
 8101dde:	f001 f945 	bl	810306c <send_msg>

	NVIC_SystemReset();
 8101de2:	f7ff fef3 	bl	8101bcc <__NVIC_SystemReset>
 8101de6:	bf00      	nop
 8101de8:	0810b440 	.word	0x0810b440

08101dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101dec:	b580      	push	{r7, lr}
 8101dee:	b082      	sub	sp, #8
 8101df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101df2:	4b0d      	ldr	r3, [pc, #52]	; (8101e28 <HAL_MspInit+0x3c>)
 8101df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101df8:	4a0b      	ldr	r2, [pc, #44]	; (8101e28 <HAL_MspInit+0x3c>)
 8101dfa:	f043 0302 	orr.w	r3, r3, #2
 8101dfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101e02:	4b09      	ldr	r3, [pc, #36]	; (8101e28 <HAL_MspInit+0x3c>)
 8101e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101e08:	f003 0302 	and.w	r3, r3, #2
 8101e0c:	607b      	str	r3, [r7, #4]
 8101e0e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8101e10:	2200      	movs	r2, #0
 8101e12:	2100      	movs	r1, #0
 8101e14:	207e      	movs	r0, #126	; 0x7e
 8101e16:	f002 fbcc 	bl	81045b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101e1a:	207e      	movs	r0, #126	; 0x7e
 8101e1c:	f002 fbe3 	bl	81045e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101e20:	bf00      	nop
 8101e22:	3708      	adds	r7, #8
 8101e24:	46bd      	mov	sp, r7
 8101e26:	bd80      	pop	{r7, pc}
 8101e28:	58024400 	.word	0x58024400

08101e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101e2c:	b480      	push	{r7}
 8101e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101e30:	e7fe      	b.n	8101e30 <NMI_Handler+0x4>

08101e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101e32:	b480      	push	{r7}
 8101e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101e36:	e7fe      	b.n	8101e36 <HardFault_Handler+0x4>

08101e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101e38:	b480      	push	{r7}
 8101e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101e3c:	e7fe      	b.n	8101e3c <MemManage_Handler+0x4>

08101e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101e3e:	b480      	push	{r7}
 8101e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101e42:	e7fe      	b.n	8101e42 <BusFault_Handler+0x4>

08101e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101e44:	b480      	push	{r7}
 8101e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101e48:	e7fe      	b.n	8101e48 <UsageFault_Handler+0x4>

08101e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101e4a:	b480      	push	{r7}
 8101e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101e4e:	bf00      	nop
 8101e50:	46bd      	mov	sp, r7
 8101e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e56:	4770      	bx	lr

08101e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101e58:	b480      	push	{r7}
 8101e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101e5c:	bf00      	nop
 8101e5e:	46bd      	mov	sp, r7
 8101e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e64:	4770      	bx	lr

08101e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101e66:	b480      	push	{r7}
 8101e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101e6a:	bf00      	nop
 8101e6c:	46bd      	mov	sp, r7
 8101e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e72:	4770      	bx	lr

08101e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101e74:	b580      	push	{r7, lr}
 8101e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101e78:	f001 f9e0 	bl	810323c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101e7c:	bf00      	nop
 8101e7e:	bd80      	pop	{r7, pc}

08101e80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8101e80:	b580      	push	{r7, lr}
 8101e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8101e84:	4802      	ldr	r0, [pc, #8]	; (8101e90 <TIM7_IRQHandler+0x10>)
 8101e86:	f006 fb8b 	bl	81085a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8101e8a:	bf00      	nop
 8101e8c:	bd80      	pop	{r7, pc}
 8101e8e:	bf00      	nop
 8101e90:	100002b8 	.word	0x100002b8

08101e94 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8101e94:	b580      	push	{r7, lr}
 8101e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8101e98:	f002 fdf6 	bl	8104a88 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8101e9c:	bf00      	nop
 8101e9e:	bd80      	pop	{r7, pc}

08101ea0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8101ea0:	b580      	push	{r7, lr}
 8101ea2:	b08a      	sub	sp, #40	; 0x28
 8101ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8101ea6:	f107 031c 	add.w	r3, r7, #28
 8101eaa:	2200      	movs	r2, #0
 8101eac:	601a      	str	r2, [r3, #0]
 8101eae:	605a      	str	r2, [r3, #4]
 8101eb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8101eb2:	463b      	mov	r3, r7
 8101eb4:	2200      	movs	r2, #0
 8101eb6:	601a      	str	r2, [r3, #0]
 8101eb8:	605a      	str	r2, [r3, #4]
 8101eba:	609a      	str	r2, [r3, #8]
 8101ebc:	60da      	str	r2, [r3, #12]
 8101ebe:	611a      	str	r2, [r3, #16]
 8101ec0:	615a      	str	r2, [r3, #20]
 8101ec2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8101ec4:	4b2f      	ldr	r3, [pc, #188]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101ec6:	4a30      	ldr	r2, [pc, #192]	; (8101f88 <MX_ADC1_Init+0xe8>)
 8101ec8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8101eca:	4b2e      	ldr	r3, [pc, #184]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101ecc:	2200      	movs	r2, #0
 8101ece:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8101ed0:	4b2c      	ldr	r3, [pc, #176]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101ed2:	2208      	movs	r2, #8
 8101ed4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8101ed6:	4b2b      	ldr	r3, [pc, #172]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101ed8:	2200      	movs	r2, #0
 8101eda:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101edc:	4b29      	ldr	r3, [pc, #164]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101ede:	2204      	movs	r2, #4
 8101ee0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8101ee2:	4b28      	ldr	r3, [pc, #160]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101ee4:	2200      	movs	r2, #0
 8101ee6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8101ee8:	4b26      	ldr	r3, [pc, #152]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101eea:	2200      	movs	r2, #0
 8101eec:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8101eee:	4b25      	ldr	r3, [pc, #148]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101ef0:	2201      	movs	r2, #1
 8101ef2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8101ef4:	4b23      	ldr	r3, [pc, #140]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101ef6:	2200      	movs	r2, #0
 8101ef8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101efa:	4b22      	ldr	r3, [pc, #136]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101efc:	2200      	movs	r2, #0
 8101efe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8101f00:	4b20      	ldr	r3, [pc, #128]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101f02:	2200      	movs	r2, #0
 8101f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8101f06:	4b1f      	ldr	r3, [pc, #124]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101f08:	2200      	movs	r2, #0
 8101f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8101f0c:	4b1d      	ldr	r3, [pc, #116]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101f0e:	2200      	movs	r2, #0
 8101f10:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101f12:	4b1c      	ldr	r3, [pc, #112]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101f14:	2200      	movs	r2, #0
 8101f16:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8101f18:	4b1a      	ldr	r3, [pc, #104]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101f1a:	2200      	movs	r2, #0
 8101f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101f20:	4818      	ldr	r0, [pc, #96]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101f22:	f001 fb67 	bl	81035f4 <HAL_ADC_Init>
 8101f26:	4603      	mov	r3, r0
 8101f28:	2b00      	cmp	r3, #0
 8101f2a:	d001      	beq.n	8101f30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8101f2c:	f7ff ff50 	bl	8101dd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101f30:	2300      	movs	r3, #0
 8101f32:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101f34:	f107 031c 	add.w	r3, r7, #28
 8101f38:	4619      	mov	r1, r3
 8101f3a:	4812      	ldr	r0, [pc, #72]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101f3c:	f002 f97c 	bl	8104238 <HAL_ADCEx_MultiModeConfigChannel>
 8101f40:	4603      	mov	r3, r0
 8101f42:	2b00      	cmp	r3, #0
 8101f44:	d001      	beq.n	8101f4a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8101f46:	f7ff ff43 	bl	8101dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8101f4a:	4b10      	ldr	r3, [pc, #64]	; (8101f8c <MX_ADC1_Init+0xec>)
 8101f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101f4e:	2306      	movs	r3, #6
 8101f50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8101f52:	2300      	movs	r3, #0
 8101f54:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101f56:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8101f5a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8101f5c:	2304      	movs	r3, #4
 8101f5e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8101f60:	2300      	movs	r3, #0
 8101f62:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8101f64:	2300      	movs	r3, #0
 8101f66:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8101f68:	463b      	mov	r3, r7
 8101f6a:	4619      	mov	r1, r3
 8101f6c:	4805      	ldr	r0, [pc, #20]	; (8101f84 <MX_ADC1_Init+0xe4>)
 8101f6e:	f001 fce3 	bl	8103938 <HAL_ADC_ConfigChannel>
 8101f72:	4603      	mov	r3, r0
 8101f74:	2b00      	cmp	r3, #0
 8101f76:	d001      	beq.n	8101f7c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8101f78:	f7ff ff2a 	bl	8101dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8101f7c:	bf00      	nop
 8101f7e:	3728      	adds	r7, #40	; 0x28
 8101f80:	46bd      	mov	sp, r7
 8101f82:	bd80      	pop	{r7, pc}
 8101f84:	10000124 	.word	0x10000124
 8101f88:	40022000 	.word	0x40022000
 8101f8c:	4b840000 	.word	0x4b840000

08101f90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8101f90:	b580      	push	{r7, lr}
 8101f92:	b0b8      	sub	sp, #224	; 0xe0
 8101f94:	af00      	add	r7, sp, #0
 8101f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101f9c:	2200      	movs	r2, #0
 8101f9e:	601a      	str	r2, [r3, #0]
 8101fa0:	605a      	str	r2, [r3, #4]
 8101fa2:	609a      	str	r2, [r3, #8]
 8101fa4:	60da      	str	r2, [r3, #12]
 8101fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101fa8:	f107 0310 	add.w	r3, r7, #16
 8101fac:	22bc      	movs	r2, #188	; 0xbc
 8101fae:	2100      	movs	r1, #0
 8101fb0:	4618      	mov	r0, r3
 8101fb2:	f008 fabd 	bl	810a530 <memset>
  if(adcHandle->Instance==ADC1)
 8101fb6:	687b      	ldr	r3, [r7, #4]
 8101fb8:	681b      	ldr	r3, [r3, #0]
 8101fba:	4a2a      	ldr	r2, [pc, #168]	; (8102064 <HAL_ADC_MspInit+0xd4>)
 8101fbc:	4293      	cmp	r3, r2
 8101fbe:	d14c      	bne.n	810205a <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8101fc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8101fc4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8101fc6:	2301      	movs	r3, #1
 8101fc8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8101fca:	2313      	movs	r3, #19
 8101fcc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 128;
 8101fce:	2380      	movs	r3, #128	; 0x80
 8101fd0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8101fd2:	2302      	movs	r3, #2
 8101fd4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8101fd6:	2302      	movs	r3, #2
 8101fd8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8101fda:	23c0      	movs	r3, #192	; 0xc0
 8101fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8101fde:	2320      	movs	r3, #32
 8101fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8101fe2:	2300      	movs	r3, #0
 8101fe4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8101fe6:	2300      	movs	r3, #0
 8101fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101fec:	f107 0310 	add.w	r3, r7, #16
 8101ff0:	4618      	mov	r0, r3
 8101ff2:	f003 fdbf 	bl	8105b74 <HAL_RCCEx_PeriphCLKConfig>
 8101ff6:	4603      	mov	r3, r0
 8101ff8:	2b00      	cmp	r3, #0
 8101ffa:	d001      	beq.n	8102000 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8101ffc:	f7ff fee8 	bl	8101dd0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8102000:	4b19      	ldr	r3, [pc, #100]	; (8102068 <HAL_ADC_MspInit+0xd8>)
 8102002:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102006:	4a18      	ldr	r2, [pc, #96]	; (8102068 <HAL_ADC_MspInit+0xd8>)
 8102008:	f043 0320 	orr.w	r3, r3, #32
 810200c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102010:	4b15      	ldr	r3, [pc, #84]	; (8102068 <HAL_ADC_MspInit+0xd8>)
 8102012:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102016:	f003 0320 	and.w	r3, r3, #32
 810201a:	60fb      	str	r3, [r7, #12]
 810201c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810201e:	4b12      	ldr	r3, [pc, #72]	; (8102068 <HAL_ADC_MspInit+0xd8>)
 8102020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102024:	4a10      	ldr	r2, [pc, #64]	; (8102068 <HAL_ADC_MspInit+0xd8>)
 8102026:	f043 0301 	orr.w	r3, r3, #1
 810202a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810202e:	4b0e      	ldr	r3, [pc, #56]	; (8102068 <HAL_ADC_MspInit+0xd8>)
 8102030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102034:	f003 0301 	and.w	r3, r3, #1
 8102038:	60bb      	str	r3, [r7, #8]
 810203a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = Vaccuum_Sensor_Pin;
 810203c:	2310      	movs	r3, #16
 810203e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8102042:	2303      	movs	r3, #3
 8102044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102048:	2300      	movs	r3, #0
 810204a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(Vaccuum_Sensor_GPIO_Port, &GPIO_InitStruct);
 810204e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102052:	4619      	mov	r1, r3
 8102054:	4805      	ldr	r0, [pc, #20]	; (810206c <HAL_ADC_MspInit+0xdc>)
 8102056:	f002 faf5 	bl	8104644 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 810205a:	bf00      	nop
 810205c:	37e0      	adds	r7, #224	; 0xe0
 810205e:	46bd      	mov	sp, r7
 8102060:	bd80      	pop	{r7, pc}
 8102062:	bf00      	nop
 8102064:	40022000 	.word	0x40022000
 8102068:	58024400 	.word	0x58024400
 810206c:	58020000 	.word	0x58020000

08102070 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8102070:	b580      	push	{r7, lr}
 8102072:	b08c      	sub	sp, #48	; 0x30
 8102074:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102076:	f107 031c 	add.w	r3, r7, #28
 810207a:	2200      	movs	r2, #0
 810207c:	601a      	str	r2, [r3, #0]
 810207e:	605a      	str	r2, [r3, #4]
 8102080:	609a      	str	r2, [r3, #8]
 8102082:	60da      	str	r2, [r3, #12]
 8102084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8102086:	4bb0      	ldr	r3, [pc, #704]	; (8102348 <MX_GPIO_Init+0x2d8>)
 8102088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810208c:	4aae      	ldr	r2, [pc, #696]	; (8102348 <MX_GPIO_Init+0x2d8>)
 810208e:	f043 0310 	orr.w	r3, r3, #16
 8102092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102096:	4bac      	ldr	r3, [pc, #688]	; (8102348 <MX_GPIO_Init+0x2d8>)
 8102098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810209c:	f003 0310 	and.w	r3, r3, #16
 81020a0:	61bb      	str	r3, [r7, #24]
 81020a2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81020a4:	4ba8      	ldr	r3, [pc, #672]	; (8102348 <MX_GPIO_Init+0x2d8>)
 81020a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020aa:	4aa7      	ldr	r2, [pc, #668]	; (8102348 <MX_GPIO_Init+0x2d8>)
 81020ac:	f043 0304 	orr.w	r3, r3, #4
 81020b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81020b4:	4ba4      	ldr	r3, [pc, #656]	; (8102348 <MX_GPIO_Init+0x2d8>)
 81020b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020ba:	f003 0304 	and.w	r3, r3, #4
 81020be:	617b      	str	r3, [r7, #20]
 81020c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81020c2:	4ba1      	ldr	r3, [pc, #644]	; (8102348 <MX_GPIO_Init+0x2d8>)
 81020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020c8:	4a9f      	ldr	r2, [pc, #636]	; (8102348 <MX_GPIO_Init+0x2d8>)
 81020ca:	f043 0320 	orr.w	r3, r3, #32
 81020ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81020d2:	4b9d      	ldr	r3, [pc, #628]	; (8102348 <MX_GPIO_Init+0x2d8>)
 81020d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020d8:	f003 0320 	and.w	r3, r3, #32
 81020dc:	613b      	str	r3, [r7, #16]
 81020de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81020e0:	4b99      	ldr	r3, [pc, #612]	; (8102348 <MX_GPIO_Init+0x2d8>)
 81020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020e6:	4a98      	ldr	r2, [pc, #608]	; (8102348 <MX_GPIO_Init+0x2d8>)
 81020e8:	f043 0301 	orr.w	r3, r3, #1
 81020ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81020f0:	4b95      	ldr	r3, [pc, #596]	; (8102348 <MX_GPIO_Init+0x2d8>)
 81020f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020f6:	f003 0301 	and.w	r3, r3, #1
 81020fa:	60fb      	str	r3, [r7, #12]
 81020fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81020fe:	4b92      	ldr	r3, [pc, #584]	; (8102348 <MX_GPIO_Init+0x2d8>)
 8102100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102104:	4a90      	ldr	r2, [pc, #576]	; (8102348 <MX_GPIO_Init+0x2d8>)
 8102106:	f043 0302 	orr.w	r3, r3, #2
 810210a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810210e:	4b8e      	ldr	r3, [pc, #568]	; (8102348 <MX_GPIO_Init+0x2d8>)
 8102110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102114:	f003 0302 	and.w	r3, r3, #2
 8102118:	60bb      	str	r3, [r7, #8]
 810211a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810211c:	4b8a      	ldr	r3, [pc, #552]	; (8102348 <MX_GPIO_Init+0x2d8>)
 810211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102122:	4a89      	ldr	r2, [pc, #548]	; (8102348 <MX_GPIO_Init+0x2d8>)
 8102124:	f043 0308 	orr.w	r3, r3, #8
 8102128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810212c:	4b86      	ldr	r3, [pc, #536]	; (8102348 <MX_GPIO_Init+0x2d8>)
 810212e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102132:	f003 0308 	and.w	r3, r3, #8
 8102136:	607b      	str	r3, [r7, #4]
 8102138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 810213a:	4b83      	ldr	r3, [pc, #524]	; (8102348 <MX_GPIO_Init+0x2d8>)
 810213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102140:	4a81      	ldr	r2, [pc, #516]	; (8102348 <MX_GPIO_Init+0x2d8>)
 8102142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810214a:	4b7f      	ldr	r3, [pc, #508]	; (8102348 <MX_GPIO_Init+0x2d8>)
 810214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102154:	603b      	str	r3, [r7, #0]
 8102156:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DigiIN_OUT_Z_Pin|Direction_Z_Pin|LD2_Pin, GPIO_PIN_RESET);
 8102158:	2200      	movs	r2, #0
 810215a:	2107      	movs	r1, #7
 810215c:	487b      	ldr	r0, [pc, #492]	; (810234c <MX_GPIO_Init+0x2dc>)
 810215e:	f002 fc39 	bl	81049d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_RESET);
 8102162:	2200      	movs	r2, #0
 8102164:	2101      	movs	r1, #1
 8102166:	487a      	ldr	r0, [pc, #488]	; (8102350 <MX_GPIO_Init+0x2e0>)
 8102168:	f002 fc34 	bl	81049d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 810216c:	2200      	movs	r2, #0
 810216e:	f244 0101 	movw	r1, #16385	; 0x4001
 8102172:	4878      	ldr	r0, [pc, #480]	; (8102354 <MX_GPIO_Init+0x2e4>)
 8102174:	f002 fc2e 	bl	81049d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|DigiIN_OUT_X_Pin|Ready_X_Pin|Debug_1_Pin
 8102178:	2200      	movs	r2, #0
 810217a:	f24c 4178 	movw	r1, #50296	; 0xc478
 810217e:	4876      	ldr	r0, [pc, #472]	; (8102358 <MX_GPIO_Init+0x2e8>)
 8102180:	f002 fc28 	bl	81049d4 <HAL_GPIO_WritePin>
                          |Debug_2_Pin|Debug_3_Pin|Debug_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Vaccuum_Valve_Pin|Vaccuum_Pump_Pin|Solenoid_Pin, GPIO_PIN_SET);
 8102184:	2201      	movs	r2, #1
 8102186:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 810218a:	4874      	ldr	r0, [pc, #464]	; (810235c <MX_GPIO_Init+0x2ec>)
 810218c:	f002 fc22 	bl	81049d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_SET);
 8102190:	2201      	movs	r2, #1
 8102192:	2101      	movs	r1, #1
 8102194:	4870      	ldr	r0, [pc, #448]	; (8102358 <MX_GPIO_Init+0x2e8>)
 8102196:	f002 fc1d 	bl	81049d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 810219a:	2200      	movs	r2, #0
 810219c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81021a0:	486f      	ldr	r0, [pc, #444]	; (8102360 <MX_GPIO_Init+0x2f0>)
 81021a2:	f002 fc17 	bl	81049d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DigiIN_OUT_Z_Pin|Direction_Z_Pin|LD2_Pin;
 81021a6:	2307      	movs	r3, #7
 81021a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81021aa:	2301      	movs	r3, #1
 81021ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021ae:	2300      	movs	r3, #0
 81021b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021b2:	2300      	movs	r3, #0
 81021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81021b6:	f107 031c 	add.w	r3, r7, #28
 81021ba:	4619      	mov	r1, r3
 81021bc:	4863      	ldr	r0, [pc, #396]	; (810234c <MX_GPIO_Init+0x2dc>)
 81021be:	f002 fa41 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|Rotary_Switch_C2_Pin;
 81021c2:	f242 0301 	movw	r3, #8193	; 0x2001
 81021c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81021c8:	2300      	movs	r3, #0
 81021ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021cc:	2300      	movs	r3, #0
 81021ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81021d0:	f107 031c 	add.w	r3, r7, #28
 81021d4:	4619      	mov	r1, r3
 81021d6:	4861      	ldr	r0, [pc, #388]	; (810235c <MX_GPIO_Init+0x2ec>)
 81021d8:	f002 fa34 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rotary_Switch_C8_Pin;
 81021dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81021e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81021e2:	2300      	movs	r3, #0
 81021e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021e6:	2300      	movs	r3, #0
 81021e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rotary_Switch_C8_GPIO_Port, &GPIO_InitStruct);
 81021ea:	f107 031c 	add.w	r3, r7, #28
 81021ee:	4619      	mov	r1, r3
 81021f0:	485c      	ldr	r0, [pc, #368]	; (8102364 <MX_GPIO_Init+0x2f4>)
 81021f2:	f002 fa27 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Ready_Z_Pin;
 81021f6:	2301      	movs	r3, #1
 81021f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81021fa:	2301      	movs	r3, #1
 81021fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021fe:	2300      	movs	r3, #0
 8102200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102202:	2300      	movs	r3, #0
 8102204:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Ready_Z_GPIO_Port, &GPIO_InitStruct);
 8102206:	f107 031c 	add.w	r3, r7, #28
 810220a:	4619      	mov	r1, r3
 810220c:	4850      	ldr	r0, [pc, #320]	; (8102350 <MX_GPIO_Init+0x2e0>)
 810220e:	f002 fa19 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rotary_Switch_C1_Pin;
 8102212:	2308      	movs	r3, #8
 8102214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8102216:	2300      	movs	r3, #0
 8102218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810221a:	2300      	movs	r3, #0
 810221c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rotary_Switch_C1_GPIO_Port, &GPIO_InitStruct);
 810221e:	f107 031c 	add.w	r3, r7, #28
 8102222:	4619      	mov	r1, r3
 8102224:	484a      	ldr	r0, [pc, #296]	; (8102350 <MX_GPIO_Init+0x2e0>)
 8102226:	f002 fa0d 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 810222a:	f244 0301 	movw	r3, #16385	; 0x4001
 810222e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102230:	2301      	movs	r3, #1
 8102232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102234:	2300      	movs	r3, #0
 8102236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102238:	2300      	movs	r3, #0
 810223a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810223c:	f107 031c 	add.w	r3, r7, #28
 8102240:	4619      	mov	r1, r3
 8102242:	4844      	ldr	r0, [pc, #272]	; (8102354 <MX_GPIO_Init+0x2e4>)
 8102244:	f002 f9fe 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rotary_Switch_C4_Pin;
 8102248:	2302      	movs	r3, #2
 810224a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810224c:	2300      	movs	r3, #0
 810224e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102250:	2300      	movs	r3, #0
 8102252:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rotary_Switch_C4_GPIO_Port, &GPIO_InitStruct);
 8102254:	f107 031c 	add.w	r3, r7, #28
 8102258:	4619      	mov	r1, r3
 810225a:	483e      	ldr	r0, [pc, #248]	; (8102354 <MX_GPIO_Init+0x2e4>)
 810225c:	f002 f9f2 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Homing_Z_Pin;
 8102260:	2304      	movs	r3, #4
 8102262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8102264:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8102268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810226a:	2300      	movs	r3, #0
 810226c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Homing_Z_GPIO_Port, &GPIO_InitStruct);
 810226e:	f107 031c 	add.w	r3, r7, #28
 8102272:	4619      	mov	r1, r3
 8102274:	4837      	ldr	r0, [pc, #220]	; (8102354 <MX_GPIO_Init+0x2e4>)
 8102276:	f002 f9e5 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Pushbutton_Rotary_Switch_Pin;
 810227a:	f44f 7300 	mov.w	r3, #512	; 0x200
 810227e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8102280:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8102284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102286:	2300      	movs	r3, #0
 8102288:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Pushbutton_Rotary_Switch_GPIO_Port, &GPIO_InitStruct);
 810228a:	f107 031c 	add.w	r3, r7, #28
 810228e:	4619      	mov	r1, r3
 8102290:	482e      	ldr	r0, [pc, #184]	; (810234c <MX_GPIO_Init+0x2dc>)
 8102292:	f002 f9d7 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Homing_X_Pin|Endstop_X_Pin|Endstop_Z_Pin;
 8102296:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 810229a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810229c:	2300      	movs	r3, #0
 810229e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81022a0:	2300      	movs	r3, #0
 81022a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81022a4:	f107 031c 	add.w	r3, r7, #28
 81022a8:	4619      	mov	r1, r3
 81022aa:	4828      	ldr	r0, [pc, #160]	; (810234c <MX_GPIO_Init+0x2dc>)
 81022ac:	f002 f9ca 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|DigiIN_OUT_X_Pin|Ready_X_Pin|Enable_PWR_Pin
 81022b0:	f24c 4379 	movw	r3, #50297	; 0xc479
 81022b4:	61fb      	str	r3, [r7, #28]
                          |Debug_1_Pin|Debug_2_Pin|Debug_3_Pin|Debug_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81022b6:	2301      	movs	r3, #1
 81022b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81022ba:	2300      	movs	r3, #0
 81022bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81022be:	2300      	movs	r3, #0
 81022c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81022c2:	f107 031c 	add.w	r3, r7, #28
 81022c6:	4619      	mov	r1, r3
 81022c8:	4823      	ldr	r0, [pc, #140]	; (8102358 <MX_GPIO_Init+0x2e8>)
 81022ca:	f002 f9bb 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Vaccuum_Valve_Pin|Vaccuum_Pump_Pin|Solenoid_Pin;
 81022ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 81022d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81022d4:	2301      	movs	r3, #1
 81022d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81022d8:	2300      	movs	r3, #0
 81022da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81022dc:	2300      	movs	r3, #0
 81022de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81022e0:	f107 031c 	add.w	r3, r7, #28
 81022e4:	4619      	mov	r1, r3
 81022e6:	481d      	ldr	r0, [pc, #116]	; (810235c <MX_GPIO_Init+0x2ec>)
 81022e8:	f002 f9ac 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Coin_INT_Pin|Prox_INT_Pin;
 81022ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81022f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81022f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81022f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81022f8:	2300      	movs	r3, #0
 81022fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81022fc:	f107 031c 	add.w	r3, r7, #28
 8102300:	4619      	mov	r1, r3
 8102302:	4816      	ldr	r0, [pc, #88]	; (810235c <MX_GPIO_Init+0x2ec>)
 8102304:	f002 f99e 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Read_EMO_Pin;
 8102308:	2302      	movs	r3, #2
 810230a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 810230c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8102310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102312:	2300      	movs	r3, #0
 8102314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Read_EMO_GPIO_Port, &GPIO_InitStruct);
 8102316:	f107 031c 	add.w	r3, r7, #28
 810231a:	4619      	mov	r1, r3
 810231c:	480e      	ldr	r0, [pc, #56]	; (8102358 <MX_GPIO_Init+0x2e8>)
 810231e:	f002 f991 	bl	8104644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Direction_X_Pin;
 8102322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102328:	2301      	movs	r3, #1
 810232a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810232c:	2300      	movs	r3, #0
 810232e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102330:	2300      	movs	r3, #0
 8102332:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Direction_X_GPIO_Port, &GPIO_InitStruct);
 8102334:	f107 031c 	add.w	r3, r7, #28
 8102338:	4619      	mov	r1, r3
 810233a:	4809      	ldr	r0, [pc, #36]	; (8102360 <MX_GPIO_Init+0x2f0>)
 810233c:	f002 f982 	bl	8104644 <HAL_GPIO_Init>

}
 8102340:	bf00      	nop
 8102342:	3730      	adds	r7, #48	; 0x30
 8102344:	46bd      	mov	sp, r7
 8102346:	bd80      	pop	{r7, pc}
 8102348:	58024400 	.word	0x58024400
 810234c:	58021000 	.word	0x58021000
 8102350:	58020000 	.word	0x58020000
 8102354:	58020400 	.word	0x58020400
 8102358:	58020c00 	.word	0x58020c00
 810235c:	58020800 	.word	0x58020800
 8102360:	58021800 	.word	0x58021800
 8102364:	58021400 	.word	0x58021400

08102368 <set_Direction_X>:
	HAL_GPIO_WritePin(Solenoid_GPIO_Port, Solenoid_Pin, GPIO_PIN_RESET);
}



void set_Direction_X(void){
 8102368:	b580      	push	{r7, lr}
 810236a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_SET);
 810236c:	2201      	movs	r2, #1
 810236e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8102372:	4802      	ldr	r0, [pc, #8]	; (810237c <set_Direction_X+0x14>)
 8102374:	f002 fb2e 	bl	81049d4 <HAL_GPIO_WritePin>
}
 8102378:	bf00      	nop
 810237a:	bd80      	pop	{r7, pc}
 810237c:	58021800 	.word	0x58021800

08102380 <reset_Direction_X>:
void reset_Direction_X(void){
 8102380:	b580      	push	{r7, lr}
 8102382:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 8102384:	2200      	movs	r2, #0
 8102386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 810238a:	4802      	ldr	r0, [pc, #8]	; (8102394 <reset_Direction_X+0x14>)
 810238c:	f002 fb22 	bl	81049d4 <HAL_GPIO_WritePin>
}
 8102390:	bf00      	nop
 8102392:	bd80      	pop	{r7, pc}
 8102394:	58021800 	.word	0x58021800

08102398 <set_Ready_X>:

void set_Ready_X(void){
 8102398:	b580      	push	{r7, lr}
 810239a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_SET);
 810239c:	2201      	movs	r2, #1
 810239e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81023a2:	4802      	ldr	r0, [pc, #8]	; (81023ac <set_Ready_X+0x14>)
 81023a4:	f002 fb16 	bl	81049d4 <HAL_GPIO_WritePin>
}
 81023a8:	bf00      	nop
 81023aa:	bd80      	pop	{r7, pc}
 81023ac:	58020c00 	.word	0x58020c00

081023b0 <reset_Ready_X>:
void reset_Ready_X(void){
 81023b0:	b580      	push	{r7, lr}
 81023b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_RESET);
 81023b4:	2200      	movs	r2, #0
 81023b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81023ba:	4802      	ldr	r0, [pc, #8]	; (81023c4 <reset_Ready_X+0x14>)
 81023bc:	f002 fb0a 	bl	81049d4 <HAL_GPIO_WritePin>
}
 81023c0:	bf00      	nop
 81023c2:	bd80      	pop	{r7, pc}
 81023c4:	58020c00 	.word	0x58020c00

081023c8 <set_Direction_Z>:
	HAL_GPIO_WritePin(DigiIN_OUT_X_GPIO_Port, DigiIN_OUT_X_Pin, GPIO_PIN_RESET);
}



void set_Direction_Z(void){
 81023c8:	b580      	push	{r7, lr}
 81023ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_SET);
 81023cc:	2201      	movs	r2, #1
 81023ce:	2101      	movs	r1, #1
 81023d0:	4802      	ldr	r0, [pc, #8]	; (81023dc <set_Direction_Z+0x14>)
 81023d2:	f002 faff 	bl	81049d4 <HAL_GPIO_WritePin>
}
 81023d6:	bf00      	nop
 81023d8:	bd80      	pop	{r7, pc}
 81023da:	bf00      	nop
 81023dc:	58021000 	.word	0x58021000

081023e0 <reset_Direction_Z>:
void reset_Direction_Z(void){
 81023e0:	b580      	push	{r7, lr}
 81023e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_RESET);
 81023e4:	2200      	movs	r2, #0
 81023e6:	2101      	movs	r1, #1
 81023e8:	4802      	ldr	r0, [pc, #8]	; (81023f4 <reset_Direction_Z+0x14>)
 81023ea:	f002 faf3 	bl	81049d4 <HAL_GPIO_WritePin>
}
 81023ee:	bf00      	nop
 81023f0:	bd80      	pop	{r7, pc}
 81023f2:	bf00      	nop
 81023f4:	58021000 	.word	0x58021000

081023f8 <set_Ready_Z>:

void set_Ready_Z(void){
 81023f8:	b580      	push	{r7, lr}
 81023fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_SET);
 81023fc:	2201      	movs	r2, #1
 81023fe:	2101      	movs	r1, #1
 8102400:	4802      	ldr	r0, [pc, #8]	; (810240c <set_Ready_Z+0x14>)
 8102402:	f002 fae7 	bl	81049d4 <HAL_GPIO_WritePin>
}
 8102406:	bf00      	nop
 8102408:	bd80      	pop	{r7, pc}
 810240a:	bf00      	nop
 810240c:	58020000 	.word	0x58020000

08102410 <reset_Ready_Z>:
void reset_Ready_Z(void){
 8102410:	b580      	push	{r7, lr}
 8102412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_RESET);
 8102414:	2200      	movs	r2, #0
 8102416:	2101      	movs	r1, #1
 8102418:	4802      	ldr	r0, [pc, #8]	; (8102424 <reset_Ready_Z+0x14>)
 810241a:	f002 fadb 	bl	81049d4 <HAL_GPIO_WritePin>
}
 810241e:	bf00      	nop
 8102420:	bd80      	pop	{r7, pc}
 8102422:	bf00      	nop
 8102424:	58020000 	.word	0x58020000

08102428 <set_Enable_Power>:
	HAL_GPIO_WritePin(DigiIN_OUT_Z_GPIO_Port, DigiIN_OUT_Z_Pin, GPIO_PIN_RESET);
}



void set_Enable_Power(void){
 8102428:	b580      	push	{r7, lr}
 810242a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_RESET);
 810242c:	2200      	movs	r2, #0
 810242e:	2101      	movs	r1, #1
 8102430:	4802      	ldr	r0, [pc, #8]	; (810243c <set_Enable_Power+0x14>)
 8102432:	f002 facf 	bl	81049d4 <HAL_GPIO_WritePin>
}
 8102436:	bf00      	nop
 8102438:	bd80      	pop	{r7, pc}
 810243a:	bf00      	nop
 810243c:	58020c00 	.word	0x58020c00

08102440 <reset_Enable_Power>:
void reset_Enable_Power(void){
 8102440:	b580      	push	{r7, lr}
 8102442:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_SET);
 8102444:	2201      	movs	r2, #1
 8102446:	2101      	movs	r1, #1
 8102448:	4802      	ldr	r0, [pc, #8]	; (8102454 <reset_Enable_Power+0x14>)
 810244a:	f002 fac3 	bl	81049d4 <HAL_GPIO_WritePin>
}
 810244e:	bf00      	nop
 8102450:	bd80      	pop	{r7, pc}
 8102452:	bf00      	nop
 8102454:	58020c00 	.word	0x58020c00

08102458 <get_Homing_X>:

int get_Homing_X(void){
 8102458:	b580      	push	{r7, lr}
 810245a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Homing_X_GPIO_Port, Homing_X_Pin) == GPIO_PIN_RESET;
 810245c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8102460:	4805      	ldr	r0, [pc, #20]	; (8102478 <get_Homing_X+0x20>)
 8102462:	f002 fa9f 	bl	81049a4 <HAL_GPIO_ReadPin>
 8102466:	4603      	mov	r3, r0
 8102468:	2b00      	cmp	r3, #0
 810246a:	bf0c      	ite	eq
 810246c:	2301      	moveq	r3, #1
 810246e:	2300      	movne	r3, #0
 8102470:	b2db      	uxtb	r3, r3
}
 8102472:	4618      	mov	r0, r3
 8102474:	bd80      	pop	{r7, pc}
 8102476:	bf00      	nop
 8102478:	58021000 	.word	0x58021000

0810247c <get_Homing_Z>:
int get_Homing_Z(void){
 810247c:	b580      	push	{r7, lr}
 810247e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Homing_Z_GPIO_Port, Homing_Z_Pin) == GPIO_PIN_RESET;
 8102480:	2104      	movs	r1, #4
 8102482:	4805      	ldr	r0, [pc, #20]	; (8102498 <get_Homing_Z+0x1c>)
 8102484:	f002 fa8e 	bl	81049a4 <HAL_GPIO_ReadPin>
 8102488:	4603      	mov	r3, r0
 810248a:	2b00      	cmp	r3, #0
 810248c:	bf0c      	ite	eq
 810248e:	2301      	moveq	r3, #1
 8102490:	2300      	movne	r3, #0
 8102492:	b2db      	uxtb	r3, r3
}
 8102494:	4618      	mov	r0, r3
 8102496:	bd80      	pop	{r7, pc}
 8102498:	58020400 	.word	0x58020400

0810249c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 810249c:	b580      	push	{r7, lr}
 810249e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 81024a0:	4b1b      	ldr	r3, [pc, #108]	; (8102510 <MX_I2C1_Init+0x74>)
 81024a2:	4a1c      	ldr	r2, [pc, #112]	; (8102514 <MX_I2C1_Init+0x78>)
 81024a4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 81024a6:	4b1a      	ldr	r3, [pc, #104]	; (8102510 <MX_I2C1_Init+0x74>)
 81024a8:	4a1b      	ldr	r2, [pc, #108]	; (8102518 <MX_I2C1_Init+0x7c>)
 81024aa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 81024ac:	4b18      	ldr	r3, [pc, #96]	; (8102510 <MX_I2C1_Init+0x74>)
 81024ae:	2200      	movs	r2, #0
 81024b0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81024b2:	4b17      	ldr	r3, [pc, #92]	; (8102510 <MX_I2C1_Init+0x74>)
 81024b4:	2201      	movs	r2, #1
 81024b6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81024b8:	4b15      	ldr	r3, [pc, #84]	; (8102510 <MX_I2C1_Init+0x74>)
 81024ba:	2200      	movs	r2, #0
 81024bc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 81024be:	4b14      	ldr	r3, [pc, #80]	; (8102510 <MX_I2C1_Init+0x74>)
 81024c0:	2200      	movs	r2, #0
 81024c2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81024c4:	4b12      	ldr	r3, [pc, #72]	; (8102510 <MX_I2C1_Init+0x74>)
 81024c6:	2200      	movs	r2, #0
 81024c8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81024ca:	4b11      	ldr	r3, [pc, #68]	; (8102510 <MX_I2C1_Init+0x74>)
 81024cc:	2200      	movs	r2, #0
 81024ce:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81024d0:	4b0f      	ldr	r3, [pc, #60]	; (8102510 <MX_I2C1_Init+0x74>)
 81024d2:	2200      	movs	r2, #0
 81024d4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81024d6:	480e      	ldr	r0, [pc, #56]	; (8102510 <MX_I2C1_Init+0x74>)
 81024d8:	f002 faf0 	bl	8104abc <HAL_I2C_Init>
 81024dc:	4603      	mov	r3, r0
 81024de:	2b00      	cmp	r3, #0
 81024e0:	d001      	beq.n	81024e6 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 81024e2:	f7ff fc75 	bl	8101dd0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81024e6:	2100      	movs	r1, #0
 81024e8:	4809      	ldr	r0, [pc, #36]	; (8102510 <MX_I2C1_Init+0x74>)
 81024ea:	f003 f84b 	bl	8105584 <HAL_I2CEx_ConfigAnalogFilter>
 81024ee:	4603      	mov	r3, r0
 81024f0:	2b00      	cmp	r3, #0
 81024f2:	d001      	beq.n	81024f8 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 81024f4:	f7ff fc6c 	bl	8101dd0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81024f8:	2100      	movs	r1, #0
 81024fa:	4805      	ldr	r0, [pc, #20]	; (8102510 <MX_I2C1_Init+0x74>)
 81024fc:	f003 f88d 	bl	810561a <HAL_I2CEx_ConfigDigitalFilter>
 8102500:	4603      	mov	r3, r0
 8102502:	2b00      	cmp	r3, #0
 8102504:	d001      	beq.n	810250a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8102506:	f7ff fc63 	bl	8101dd0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 810250a:	bf00      	nop
 810250c:	bd80      	pop	{r7, pc}
 810250e:	bf00      	nop
 8102510:	10000188 	.word	0x10000188
 8102514:	40005400 	.word	0x40005400
 8102518:	307075b1 	.word	0x307075b1

0810251c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 810251c:	b580      	push	{r7, lr}
 810251e:	b0b8      	sub	sp, #224	; 0xe0
 8102520:	af00      	add	r7, sp, #0
 8102522:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8102524:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102528:	2200      	movs	r2, #0
 810252a:	601a      	str	r2, [r3, #0]
 810252c:	605a      	str	r2, [r3, #4]
 810252e:	609a      	str	r2, [r3, #8]
 8102530:	60da      	str	r2, [r3, #12]
 8102532:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8102534:	f107 0310 	add.w	r3, r7, #16
 8102538:	22bc      	movs	r2, #188	; 0xbc
 810253a:	2100      	movs	r1, #0
 810253c:	4618      	mov	r0, r3
 810253e:	f007 fff7 	bl	810a530 <memset>
	{ 0 };
	if (i2cHandle->Instance == I2C1)
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	681b      	ldr	r3, [r3, #0]
 8102546:	4a25      	ldr	r2, [pc, #148]	; (81025dc <HAL_I2C_MspInit+0xc0>)
 8102548:	4293      	cmp	r3, r2
 810254a:	d142      	bne.n	81025d2 <HAL_I2C_MspInit+0xb6>

		/* USER CODE END I2C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 810254c:	2308      	movs	r3, #8
 810254e:	613b      	str	r3, [r7, #16]
		PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102550:	2300      	movs	r3, #0
 8102552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102556:	f107 0310 	add.w	r3, r7, #16
 810255a:	4618      	mov	r0, r3
 810255c:	f003 fb0a 	bl	8105b74 <HAL_RCCEx_PeriphCLKConfig>
 8102560:	4603      	mov	r3, r0
 8102562:	2b00      	cmp	r3, #0
 8102564:	d001      	beq.n	810256a <HAL_I2C_MspInit+0x4e>
		{
			Error_Handler();
 8102566:	f7ff fc33 	bl	8101dd0 <Error_Handler>
		}

		__HAL_RCC_GPIOB_CLK_ENABLE();
 810256a:	4b1d      	ldr	r3, [pc, #116]	; (81025e0 <HAL_I2C_MspInit+0xc4>)
 810256c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102570:	4a1b      	ldr	r2, [pc, #108]	; (81025e0 <HAL_I2C_MspInit+0xc4>)
 8102572:	f043 0302 	orr.w	r3, r3, #2
 8102576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810257a:	4b19      	ldr	r3, [pc, #100]	; (81025e0 <HAL_I2C_MspInit+0xc4>)
 810257c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102580:	f003 0302 	and.w	r3, r3, #2
 8102584:	60fb      	str	r3, [r7, #12]
 8102586:	68fb      	ldr	r3, [r7, #12]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8102588:	f44f 7340 	mov.w	r3, #768	; 0x300
 810258c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102590:	2312      	movs	r3, #18
 8102592:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102596:	2300      	movs	r3, #0
 8102598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810259c:	2300      	movs	r3, #0
 810259e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81025a2:	2304      	movs	r3, #4
 81025a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81025a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81025ac:	4619      	mov	r1, r3
 81025ae:	480d      	ldr	r0, [pc, #52]	; (81025e4 <HAL_I2C_MspInit+0xc8>)
 81025b0:	f002 f848 	bl	8104644 <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 81025b4:	4b0a      	ldr	r3, [pc, #40]	; (81025e0 <HAL_I2C_MspInit+0xc4>)
 81025b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81025ba:	4a09      	ldr	r2, [pc, #36]	; (81025e0 <HAL_I2C_MspInit+0xc4>)
 81025bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81025c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81025c4:	4b06      	ldr	r3, [pc, #24]	; (81025e0 <HAL_I2C_MspInit+0xc4>)
 81025c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81025ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81025ce:	60bb      	str	r3, [r7, #8]
 81025d0:	68bb      	ldr	r3, [r7, #8]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 81025d2:	bf00      	nop
 81025d4:	37e0      	adds	r7, #224	; 0xe0
 81025d6:	46bd      	mov	sp, r7
 81025d8:	bd80      	pop	{r7, pc}
 81025da:	bf00      	nop
 81025dc:	40005400 	.word	0x40005400
 81025e0:	58024400 	.word	0x58024400
 81025e4:	58020400 	.word	0x58020400

081025e8 <i2c_Transmit>:
@param[5] pData: Pointer to the data buffer containing the data to be transmitted.
@param[6] pData_size: Size of the data buffer in bytes.

@retval HAL_StatusTypeDef: HAL status enumeration value.
 */
{
 81025e8:	b590      	push	{r4, r7, lr}
 81025ea:	b089      	sub	sp, #36	; 0x24
 81025ec:	af04      	add	r7, sp, #16
 81025ee:	6078      	str	r0, [r7, #4]
 81025f0:	4608      	mov	r0, r1
 81025f2:	4611      	mov	r1, r2
 81025f4:	461a      	mov	r2, r3
 81025f6:	4603      	mov	r3, r0
 81025f8:	70fb      	strb	r3, [r7, #3]
 81025fa:	460b      	mov	r3, r1
 81025fc:	70bb      	strb	r3, [r7, #2]
 81025fe:	4613      	mov	r3, r2
 8102600:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef retFunc;
	uint8_t write_addr = DevAddress << 1;
 8102602:	78fb      	ldrb	r3, [r7, #3]
 8102604:	005b      	lsls	r3, r3, #1
 8102606:	73fb      	strb	r3, [r7, #15]
	retFunc = HAL_I2C_Mem_Write(bus, write_addr, MemAddress, MemAddSize, pData,
 8102608:	7bfb      	ldrb	r3, [r7, #15]
 810260a:	b299      	uxth	r1, r3
 810260c:	78bb      	ldrb	r3, [r7, #2]
 810260e:	b29a      	uxth	r2, r3
 8102610:	787b      	ldrb	r3, [r7, #1]
 8102612:	b298      	uxth	r0, r3
 8102614:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8102618:	b29b      	uxth	r3, r3
 810261a:	2432      	movs	r4, #50	; 0x32
 810261c:	9402      	str	r4, [sp, #8]
 810261e:	9301      	str	r3, [sp, #4]
 8102620:	6a3b      	ldr	r3, [r7, #32]
 8102622:	9300      	str	r3, [sp, #0]
 8102624:	4603      	mov	r3, r0
 8102626:	6878      	ldr	r0, [r7, #4]
 8102628:	f002 fad8 	bl	8104bdc <HAL_I2C_Mem_Write>
 810262c:	4603      	mov	r3, r0
 810262e:	73bb      	strb	r3, [r7, #14]
			pData_size, TIME_OUT);
	return retFunc;
 8102630:	7bbb      	ldrb	r3, [r7, #14]
}
 8102632:	4618      	mov	r0, r3
 8102634:	3714      	adds	r7, #20
 8102636:	46bd      	mov	sp, r7
 8102638:	bd90      	pop	{r4, r7, pc}

0810263a <i2c_Receive>:
@param[5] pData: Pointer to the data buffer to store the received data.
@param[6] pData_size: Size of the data buffer in bytes.

@retval HAL_StatusTypeDef: HAL status enumeration value.
 */
{
 810263a:	b590      	push	{r4, r7, lr}
 810263c:	b089      	sub	sp, #36	; 0x24
 810263e:	af04      	add	r7, sp, #16
 8102640:	6078      	str	r0, [r7, #4]
 8102642:	4608      	mov	r0, r1
 8102644:	4611      	mov	r1, r2
 8102646:	461a      	mov	r2, r3
 8102648:	4603      	mov	r3, r0
 810264a:	70fb      	strb	r3, [r7, #3]
 810264c:	460b      	mov	r3, r1
 810264e:	70bb      	strb	r3, [r7, #2]
 8102650:	4613      	mov	r3, r2
 8102652:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef retFunc;
	uint8_t read_addr = (DevAddress << 1) | 0x01;
 8102654:	78fb      	ldrb	r3, [r7, #3]
 8102656:	005b      	lsls	r3, r3, #1
 8102658:	b25b      	sxtb	r3, r3
 810265a:	f043 0301 	orr.w	r3, r3, #1
 810265e:	b25b      	sxtb	r3, r3
 8102660:	73fb      	strb	r3, [r7, #15]
	retFunc = HAL_I2C_Mem_Read(bus, read_addr, MemAddress, MemAddSize, pData,
 8102662:	7bfb      	ldrb	r3, [r7, #15]
 8102664:	b299      	uxth	r1, r3
 8102666:	78bb      	ldrb	r3, [r7, #2]
 8102668:	b29a      	uxth	r2, r3
 810266a:	787b      	ldrb	r3, [r7, #1]
 810266c:	b298      	uxth	r0, r3
 810266e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8102672:	b29b      	uxth	r3, r3
 8102674:	2432      	movs	r4, #50	; 0x32
 8102676:	9402      	str	r4, [sp, #8]
 8102678:	9301      	str	r3, [sp, #4]
 810267a:	6a3b      	ldr	r3, [r7, #32]
 810267c:	9300      	str	r3, [sp, #0]
 810267e:	4603      	mov	r3, r0
 8102680:	6878      	ldr	r0, [r7, #4]
 8102682:	f002 fbbf 	bl	8104e04 <HAL_I2C_Mem_Read>
 8102686:	4603      	mov	r3, r0
 8102688:	73bb      	strb	r3, [r7, #14]
			pData_size, TIME_OUT);
	return retFunc;
 810268a:	7bbb      	ldrb	r3, [r7, #14]
}
 810268c:	4618      	mov	r0, r3
 810268e:	3714      	adds	r7, #20
 8102690:	46bd      	mov	sp, r7
 8102692:	bd90      	pop	{r4, r7, pc}

08102694 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8102694:	b580      	push	{r7, lr}
 8102696:	b08a      	sub	sp, #40	; 0x28
 8102698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810269a:	f107 031c 	add.w	r3, r7, #28
 810269e:	2200      	movs	r2, #0
 81026a0:	601a      	str	r2, [r3, #0]
 81026a2:	605a      	str	r2, [r3, #4]
 81026a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81026a6:	463b      	mov	r3, r7
 81026a8:	2200      	movs	r2, #0
 81026aa:	601a      	str	r2, [r3, #0]
 81026ac:	605a      	str	r2, [r3, #4]
 81026ae:	609a      	str	r2, [r3, #8]
 81026b0:	60da      	str	r2, [r3, #12]
 81026b2:	611a      	str	r2, [r3, #16]
 81026b4:	615a      	str	r2, [r3, #20]
 81026b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 81026b8:	4b27      	ldr	r3, [pc, #156]	; (8102758 <MX_TIM2_Init+0xc4>)
 81026ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81026be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 81026c0:	4b25      	ldr	r3, [pc, #148]	; (8102758 <MX_TIM2_Init+0xc4>)
 81026c2:	222f      	movs	r2, #47	; 0x2f
 81026c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81026c6:	4b24      	ldr	r3, [pc, #144]	; (8102758 <MX_TIM2_Init+0xc4>)
 81026c8:	2200      	movs	r2, #0
 81026ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 81026cc:	4b22      	ldr	r3, [pc, #136]	; (8102758 <MX_TIM2_Init+0xc4>)
 81026ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 81026d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81026d4:	4b20      	ldr	r3, [pc, #128]	; (8102758 <MX_TIM2_Init+0xc4>)
 81026d6:	2200      	movs	r2, #0
 81026d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81026da:	4b1f      	ldr	r3, [pc, #124]	; (8102758 <MX_TIM2_Init+0xc4>)
 81026dc:	2200      	movs	r2, #0
 81026de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 81026e0:	481d      	ldr	r0, [pc, #116]	; (8102758 <MX_TIM2_Init+0xc4>)
 81026e2:	f005 fca3 	bl	810802c <HAL_TIM_PWM_Init>
 81026e6:	4603      	mov	r3, r0
 81026e8:	2b00      	cmp	r3, #0
 81026ea:	d001      	beq.n	81026f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 81026ec:	f7ff fb70 	bl	8101dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81026f0:	2300      	movs	r3, #0
 81026f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81026f4:	2300      	movs	r3, #0
 81026f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 81026f8:	f107 031c 	add.w	r3, r7, #28
 81026fc:	4619      	mov	r1, r3
 81026fe:	4816      	ldr	r0, [pc, #88]	; (8102758 <MX_TIM2_Init+0xc4>)
 8102700:	f006 fd40 	bl	8109184 <HAL_TIMEx_MasterConfigSynchronization>
 8102704:	4603      	mov	r3, r0
 8102706:	2b00      	cmp	r3, #0
 8102708:	d001      	beq.n	810270e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 810270a:	f7ff fb61 	bl	8101dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810270e:	2360      	movs	r3, #96	; 0x60
 8102710:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8102712:	2300      	movs	r3, #0
 8102714:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102716:	2300      	movs	r3, #0
 8102718:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810271a:	2300      	movs	r3, #0
 810271c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810271e:	463b      	mov	r3, r7
 8102720:	2208      	movs	r2, #8
 8102722:	4619      	mov	r1, r3
 8102724:	480c      	ldr	r0, [pc, #48]	; (8102758 <MX_TIM2_Init+0xc4>)
 8102726:	f006 f85b 	bl	81087e0 <HAL_TIM_PWM_ConfigChannel>
 810272a:	4603      	mov	r3, r0
 810272c:	2b00      	cmp	r3, #0
 810272e:	d001      	beq.n	8102734 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8102730:	f7ff fb4e 	bl	8101dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8102734:	463b      	mov	r3, r7
 8102736:	220c      	movs	r2, #12
 8102738:	4619      	mov	r1, r3
 810273a:	4807      	ldr	r0, [pc, #28]	; (8102758 <MX_TIM2_Init+0xc4>)
 810273c:	f006 f850 	bl	81087e0 <HAL_TIM_PWM_ConfigChannel>
 8102740:	4603      	mov	r3, r0
 8102742:	2b00      	cmp	r3, #0
 8102744:	d001      	beq.n	810274a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8102746:	f7ff fb43 	bl	8101dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 810274a:	4803      	ldr	r0, [pc, #12]	; (8102758 <MX_TIM2_Init+0xc4>)
 810274c:	f000 fa9e 	bl	8102c8c <HAL_TIM_MspPostInit>

}
 8102750:	bf00      	nop
 8102752:	3728      	adds	r7, #40	; 0x28
 8102754:	46bd      	mov	sp, r7
 8102756:	bd80      	pop	{r7, pc}
 8102758:	100001d4 	.word	0x100001d4

0810275c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 810275c:	b580      	push	{r7, lr}
 810275e:	b08c      	sub	sp, #48	; 0x30
 8102760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8102762:	f107 030c 	add.w	r3, r7, #12
 8102766:	2224      	movs	r2, #36	; 0x24
 8102768:	2100      	movs	r1, #0
 810276a:	4618      	mov	r0, r3
 810276c:	f007 fee0 	bl	810a530 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102770:	463b      	mov	r3, r7
 8102772:	2200      	movs	r2, #0
 8102774:	601a      	str	r2, [r3, #0]
 8102776:	605a      	str	r2, [r3, #4]
 8102778:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 810277a:	4b21      	ldr	r3, [pc, #132]	; (8102800 <MX_TIM3_Init+0xa4>)
 810277c:	4a21      	ldr	r2, [pc, #132]	; (8102804 <MX_TIM3_Init+0xa8>)
 810277e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8102780:	4b1f      	ldr	r3, [pc, #124]	; (8102800 <MX_TIM3_Init+0xa4>)
 8102782:	2200      	movs	r2, #0
 8102784:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102786:	4b1e      	ldr	r3, [pc, #120]	; (8102800 <MX_TIM3_Init+0xa4>)
 8102788:	2200      	movs	r2, #0
 810278a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 810278c:	4b1c      	ldr	r3, [pc, #112]	; (8102800 <MX_TIM3_Init+0xa4>)
 810278e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8102792:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102794:	4b1a      	ldr	r3, [pc, #104]	; (8102800 <MX_TIM3_Init+0xa4>)
 8102796:	2200      	movs	r2, #0
 8102798:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810279a:	4b19      	ldr	r3, [pc, #100]	; (8102800 <MX_TIM3_Init+0xa4>)
 810279c:	2200      	movs	r2, #0
 810279e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 81027a0:	2301      	movs	r3, #1
 81027a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81027a4:	2300      	movs	r3, #0
 81027a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81027a8:	2301      	movs	r3, #1
 81027aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81027ac:	2300      	movs	r3, #0
 81027ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 81027b0:	2300      	movs	r3, #0
 81027b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 81027b4:	2302      	movs	r3, #2
 81027b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 81027b8:	2301      	movs	r3, #1
 81027ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 81027bc:	2300      	movs	r3, #0
 81027be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 81027c0:	2300      	movs	r3, #0
 81027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 81027c4:	f107 030c 	add.w	r3, r7, #12
 81027c8:	4619      	mov	r1, r3
 81027ca:	480d      	ldr	r0, [pc, #52]	; (8102800 <MX_TIM3_Init+0xa4>)
 81027cc:	f005 fd94 	bl	81082f8 <HAL_TIM_Encoder_Init>
 81027d0:	4603      	mov	r3, r0
 81027d2:	2b00      	cmp	r3, #0
 81027d4:	d001      	beq.n	81027da <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 81027d6:	f7ff fafb 	bl	8101dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81027da:	2300      	movs	r3, #0
 81027dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81027de:	2300      	movs	r3, #0
 81027e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 81027e2:	463b      	mov	r3, r7
 81027e4:	4619      	mov	r1, r3
 81027e6:	4806      	ldr	r0, [pc, #24]	; (8102800 <MX_TIM3_Init+0xa4>)
 81027e8:	f006 fccc 	bl	8109184 <HAL_TIMEx_MasterConfigSynchronization>
 81027ec:	4603      	mov	r3, r0
 81027ee:	2b00      	cmp	r3, #0
 81027f0:	d001      	beq.n	81027f6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 81027f2:	f7ff faed 	bl	8101dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 81027f6:	bf00      	nop
 81027f8:	3730      	adds	r7, #48	; 0x30
 81027fa:	46bd      	mov	sp, r7
 81027fc:	bd80      	pop	{r7, pc}
 81027fe:	bf00      	nop
 8102800:	10000220 	.word	0x10000220
 8102804:	40000400 	.word	0x40000400

08102808 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8102808:	b580      	push	{r7, lr}
 810280a:	b08c      	sub	sp, #48	; 0x30
 810280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 810280e:	f107 030c 	add.w	r3, r7, #12
 8102812:	2224      	movs	r2, #36	; 0x24
 8102814:	2100      	movs	r1, #0
 8102816:	4618      	mov	r0, r3
 8102818:	f007 fe8a 	bl	810a530 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810281c:	463b      	mov	r3, r7
 810281e:	2200      	movs	r2, #0
 8102820:	601a      	str	r2, [r3, #0]
 8102822:	605a      	str	r2, [r3, #4]
 8102824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8102826:	4b21      	ldr	r3, [pc, #132]	; (81028ac <MX_TIM4_Init+0xa4>)
 8102828:	4a21      	ldr	r2, [pc, #132]	; (81028b0 <MX_TIM4_Init+0xa8>)
 810282a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 810282c:	4b1f      	ldr	r3, [pc, #124]	; (81028ac <MX_TIM4_Init+0xa4>)
 810282e:	2200      	movs	r2, #0
 8102830:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102832:	4b1e      	ldr	r3, [pc, #120]	; (81028ac <MX_TIM4_Init+0xa4>)
 8102834:	2200      	movs	r2, #0
 8102836:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8102838:	4b1c      	ldr	r3, [pc, #112]	; (81028ac <MX_TIM4_Init+0xa4>)
 810283a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810283e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102840:	4b1a      	ldr	r3, [pc, #104]	; (81028ac <MX_TIM4_Init+0xa4>)
 8102842:	2200      	movs	r2, #0
 8102844:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102846:	4b19      	ldr	r3, [pc, #100]	; (81028ac <MX_TIM4_Init+0xa4>)
 8102848:	2200      	movs	r2, #0
 810284a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 810284c:	2301      	movs	r3, #1
 810284e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8102850:	2300      	movs	r3, #0
 8102852:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8102854:	2301      	movs	r3, #1
 8102856:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8102858:	2300      	movs	r3, #0
 810285a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 810285c:	2300      	movs	r3, #0
 810285e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8102860:	2302      	movs	r3, #2
 8102862:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8102864:	2301      	movs	r3, #1
 8102866:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8102868:	2300      	movs	r3, #0
 810286a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 810286c:	2300      	movs	r3, #0
 810286e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8102870:	f107 030c 	add.w	r3, r7, #12
 8102874:	4619      	mov	r1, r3
 8102876:	480d      	ldr	r0, [pc, #52]	; (81028ac <MX_TIM4_Init+0xa4>)
 8102878:	f005 fd3e 	bl	81082f8 <HAL_TIM_Encoder_Init>
 810287c:	4603      	mov	r3, r0
 810287e:	2b00      	cmp	r3, #0
 8102880:	d001      	beq.n	8102886 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8102882:	f7ff faa5 	bl	8101dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102886:	2300      	movs	r3, #0
 8102888:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810288a:	2300      	movs	r3, #0
 810288c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 810288e:	463b      	mov	r3, r7
 8102890:	4619      	mov	r1, r3
 8102892:	4806      	ldr	r0, [pc, #24]	; (81028ac <MX_TIM4_Init+0xa4>)
 8102894:	f006 fc76 	bl	8109184 <HAL_TIMEx_MasterConfigSynchronization>
 8102898:	4603      	mov	r3, r0
 810289a:	2b00      	cmp	r3, #0
 810289c:	d001      	beq.n	81028a2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 810289e:	f7ff fa97 	bl	8101dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 81028a2:	bf00      	nop
 81028a4:	3730      	adds	r7, #48	; 0x30
 81028a6:	46bd      	mov	sp, r7
 81028a8:	bd80      	pop	{r7, pc}
 81028aa:	bf00      	nop
 81028ac:	1000026c 	.word	0x1000026c
 81028b0:	40000800 	.word	0x40000800

081028b4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 81028b4:	b580      	push	{r7, lr}
 81028b6:	b084      	sub	sp, #16
 81028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81028ba:	1d3b      	adds	r3, r7, #4
 81028bc:	2200      	movs	r2, #0
 81028be:	601a      	str	r2, [r3, #0]
 81028c0:	605a      	str	r2, [r3, #4]
 81028c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 81028c4:	4b14      	ldr	r3, [pc, #80]	; (8102918 <MX_TIM7_Init+0x64>)
 81028c6:	4a15      	ldr	r2, [pc, #84]	; (810291c <MX_TIM7_Init+0x68>)
 81028c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 81028ca:	4b13      	ldr	r3, [pc, #76]	; (8102918 <MX_TIM7_Init+0x64>)
 81028cc:	224f      	movs	r2, #79	; 0x4f
 81028ce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 81028d0:	4b11      	ldr	r3, [pc, #68]	; (8102918 <MX_TIM7_Init+0x64>)
 81028d2:	2200      	movs	r2, #0
 81028d4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 60000-1;
 81028d6:	4b10      	ldr	r3, [pc, #64]	; (8102918 <MX_TIM7_Init+0x64>)
 81028d8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 81028dc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81028de:	4b0e      	ldr	r3, [pc, #56]	; (8102918 <MX_TIM7_Init+0x64>)
 81028e0:	2200      	movs	r2, #0
 81028e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 81028e4:	480c      	ldr	r0, [pc, #48]	; (8102918 <MX_TIM7_Init+0x64>)
 81028e6:	f005 fad1 	bl	8107e8c <HAL_TIM_Base_Init>
 81028ea:	4603      	mov	r3, r0
 81028ec:	2b00      	cmp	r3, #0
 81028ee:	d001      	beq.n	81028f4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 81028f0:	f7ff fa6e 	bl	8101dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81028f4:	2300      	movs	r3, #0
 81028f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81028f8:	2300      	movs	r3, #0
 81028fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 81028fc:	1d3b      	adds	r3, r7, #4
 81028fe:	4619      	mov	r1, r3
 8102900:	4805      	ldr	r0, [pc, #20]	; (8102918 <MX_TIM7_Init+0x64>)
 8102902:	f006 fc3f 	bl	8109184 <HAL_TIMEx_MasterConfigSynchronization>
 8102906:	4603      	mov	r3, r0
 8102908:	2b00      	cmp	r3, #0
 810290a:	d001      	beq.n	8102910 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 810290c:	f7ff fa60 	bl	8101dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8102910:	bf00      	nop
 8102912:	3710      	adds	r7, #16
 8102914:	46bd      	mov	sp, r7
 8102916:	bd80      	pop	{r7, pc}
 8102918:	100002b8 	.word	0x100002b8
 810291c:	40001400 	.word	0x40001400

08102920 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8102920:	b580      	push	{r7, lr}
 8102922:	b088      	sub	sp, #32
 8102924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8102926:	1d3b      	adds	r3, r7, #4
 8102928:	2200      	movs	r2, #0
 810292a:	601a      	str	r2, [r3, #0]
 810292c:	605a      	str	r2, [r3, #4]
 810292e:	609a      	str	r2, [r3, #8]
 8102930:	60da      	str	r2, [r3, #12]
 8102932:	611a      	str	r2, [r3, #16]
 8102934:	615a      	str	r2, [r3, #20]
 8102936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8102938:	4b1e      	ldr	r3, [pc, #120]	; (81029b4 <MX_TIM13_Init+0x94>)
 810293a:	4a1f      	ldr	r2, [pc, #124]	; (81029b8 <MX_TIM13_Init+0x98>)
 810293c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 80-1;
 810293e:	4b1d      	ldr	r3, [pc, #116]	; (81029b4 <MX_TIM13_Init+0x94>)
 8102940:	224f      	movs	r2, #79	; 0x4f
 8102942:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102944:	4b1b      	ldr	r3, [pc, #108]	; (81029b4 <MX_TIM13_Init+0x94>)
 8102946:	2200      	movs	r2, #0
 8102948:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 60000-1;
 810294a:	4b1a      	ldr	r3, [pc, #104]	; (81029b4 <MX_TIM13_Init+0x94>)
 810294c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8102950:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102952:	4b18      	ldr	r3, [pc, #96]	; (81029b4 <MX_TIM13_Init+0x94>)
 8102954:	2200      	movs	r2, #0
 8102956:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102958:	4b16      	ldr	r3, [pc, #88]	; (81029b4 <MX_TIM13_Init+0x94>)
 810295a:	2200      	movs	r2, #0
 810295c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 810295e:	4815      	ldr	r0, [pc, #84]	; (81029b4 <MX_TIM13_Init+0x94>)
 8102960:	f005 fa94 	bl	8107e8c <HAL_TIM_Base_Init>
 8102964:	4603      	mov	r3, r0
 8102966:	2b00      	cmp	r3, #0
 8102968:	d001      	beq.n	810296e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 810296a:	f7ff fa31 	bl	8101dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 810296e:	4811      	ldr	r0, [pc, #68]	; (81029b4 <MX_TIM13_Init+0x94>)
 8102970:	f005 fb5c 	bl	810802c <HAL_TIM_PWM_Init>
 8102974:	4603      	mov	r3, r0
 8102976:	2b00      	cmp	r3, #0
 8102978:	d001      	beq.n	810297e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 810297a:	f7ff fa29 	bl	8101dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810297e:	2360      	movs	r3, #96	; 0x60
 8102980:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8102982:	2300      	movs	r3, #0
 8102984:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102986:	2300      	movs	r3, #0
 8102988:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810298a:	2300      	movs	r3, #0
 810298c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810298e:	1d3b      	adds	r3, r7, #4
 8102990:	2200      	movs	r2, #0
 8102992:	4619      	mov	r1, r3
 8102994:	4807      	ldr	r0, [pc, #28]	; (81029b4 <MX_TIM13_Init+0x94>)
 8102996:	f005 ff23 	bl	81087e0 <HAL_TIM_PWM_ConfigChannel>
 810299a:	4603      	mov	r3, r0
 810299c:	2b00      	cmp	r3, #0
 810299e:	d001      	beq.n	81029a4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 81029a0:	f7ff fa16 	bl	8101dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 81029a4:	4803      	ldr	r0, [pc, #12]	; (81029b4 <MX_TIM13_Init+0x94>)
 81029a6:	f000 f971 	bl	8102c8c <HAL_TIM_MspPostInit>

}
 81029aa:	bf00      	nop
 81029ac:	3720      	adds	r7, #32
 81029ae:	46bd      	mov	sp, r7
 81029b0:	bd80      	pop	{r7, pc}
 81029b2:	bf00      	nop
 81029b4:	10000304 	.word	0x10000304
 81029b8:	40001c00 	.word	0x40001c00

081029bc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 81029bc:	b580      	push	{r7, lr}
 81029be:	b088      	sub	sp, #32
 81029c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 81029c2:	1d3b      	adds	r3, r7, #4
 81029c4:	2200      	movs	r2, #0
 81029c6:	601a      	str	r2, [r3, #0]
 81029c8:	605a      	str	r2, [r3, #4]
 81029ca:	609a      	str	r2, [r3, #8]
 81029cc:	60da      	str	r2, [r3, #12]
 81029ce:	611a      	str	r2, [r3, #16]
 81029d0:	615a      	str	r2, [r3, #20]
 81029d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 81029d4:	4b1e      	ldr	r3, [pc, #120]	; (8102a50 <MX_TIM14_Init+0x94>)
 81029d6:	4a1f      	ldr	r2, [pc, #124]	; (8102a54 <MX_TIM14_Init+0x98>)
 81029d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80-1;
 81029da:	4b1d      	ldr	r3, [pc, #116]	; (8102a50 <MX_TIM14_Init+0x94>)
 81029dc:	224f      	movs	r2, #79	; 0x4f
 81029de:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 81029e0:	4b1b      	ldr	r3, [pc, #108]	; (8102a50 <MX_TIM14_Init+0x94>)
 81029e2:	2200      	movs	r2, #0
 81029e4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 60000-1;
 81029e6:	4b1a      	ldr	r3, [pc, #104]	; (8102a50 <MX_TIM14_Init+0x94>)
 81029e8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 81029ec:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81029ee:	4b18      	ldr	r3, [pc, #96]	; (8102a50 <MX_TIM14_Init+0x94>)
 81029f0:	2200      	movs	r2, #0
 81029f2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81029f4:	4b16      	ldr	r3, [pc, #88]	; (8102a50 <MX_TIM14_Init+0x94>)
 81029f6:	2200      	movs	r2, #0
 81029f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 81029fa:	4815      	ldr	r0, [pc, #84]	; (8102a50 <MX_TIM14_Init+0x94>)
 81029fc:	f005 fa46 	bl	8107e8c <HAL_TIM_Base_Init>
 8102a00:	4603      	mov	r3, r0
 8102a02:	2b00      	cmp	r3, #0
 8102a04:	d001      	beq.n	8102a0a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8102a06:	f7ff f9e3 	bl	8101dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8102a0a:	4811      	ldr	r0, [pc, #68]	; (8102a50 <MX_TIM14_Init+0x94>)
 8102a0c:	f005 fb0e 	bl	810802c <HAL_TIM_PWM_Init>
 8102a10:	4603      	mov	r3, r0
 8102a12:	2b00      	cmp	r3, #0
 8102a14:	d001      	beq.n	8102a1a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8102a16:	f7ff f9db 	bl	8101dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102a1a:	2360      	movs	r3, #96	; 0x60
 8102a1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8102a1e:	2300      	movs	r3, #0
 8102a20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102a22:	2300      	movs	r3, #0
 8102a24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102a26:	2300      	movs	r3, #0
 8102a28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102a2a:	1d3b      	adds	r3, r7, #4
 8102a2c:	2200      	movs	r2, #0
 8102a2e:	4619      	mov	r1, r3
 8102a30:	4807      	ldr	r0, [pc, #28]	; (8102a50 <MX_TIM14_Init+0x94>)
 8102a32:	f005 fed5 	bl	81087e0 <HAL_TIM_PWM_ConfigChannel>
 8102a36:	4603      	mov	r3, r0
 8102a38:	2b00      	cmp	r3, #0
 8102a3a:	d001      	beq.n	8102a40 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8102a3c:	f7ff f9c8 	bl	8101dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8102a40:	4803      	ldr	r0, [pc, #12]	; (8102a50 <MX_TIM14_Init+0x94>)
 8102a42:	f000 f923 	bl	8102c8c <HAL_TIM_MspPostInit>

}
 8102a46:	bf00      	nop
 8102a48:	3720      	adds	r7, #32
 8102a4a:	46bd      	mov	sp, r7
 8102a4c:	bd80      	pop	{r7, pc}
 8102a4e:	bf00      	nop
 8102a50:	10000350 	.word	0x10000350
 8102a54:	40002000 	.word	0x40002000

08102a58 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8102a58:	b480      	push	{r7}
 8102a5a:	b085      	sub	sp, #20
 8102a5c:	af00      	add	r7, sp, #0
 8102a5e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	681b      	ldr	r3, [r3, #0]
 8102a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102a68:	d10e      	bne.n	8102a88 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8102a6a:	4b0a      	ldr	r3, [pc, #40]	; (8102a94 <HAL_TIM_PWM_MspInit+0x3c>)
 8102a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a70:	4a08      	ldr	r2, [pc, #32]	; (8102a94 <HAL_TIM_PWM_MspInit+0x3c>)
 8102a72:	f043 0301 	orr.w	r3, r3, #1
 8102a76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102a7a:	4b06      	ldr	r3, [pc, #24]	; (8102a94 <HAL_TIM_PWM_MspInit+0x3c>)
 8102a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a80:	f003 0301 	and.w	r3, r3, #1
 8102a84:	60fb      	str	r3, [r7, #12]
 8102a86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8102a88:	bf00      	nop
 8102a8a:	3714      	adds	r7, #20
 8102a8c:	46bd      	mov	sp, r7
 8102a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a92:	4770      	bx	lr
 8102a94:	58024400 	.word	0x58024400

08102a98 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8102a98:	b580      	push	{r7, lr}
 8102a9a:	b08c      	sub	sp, #48	; 0x30
 8102a9c:	af00      	add	r7, sp, #0
 8102a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102aa0:	f107 031c 	add.w	r3, r7, #28
 8102aa4:	2200      	movs	r2, #0
 8102aa6:	601a      	str	r2, [r3, #0]
 8102aa8:	605a      	str	r2, [r3, #4]
 8102aaa:	609a      	str	r2, [r3, #8]
 8102aac:	60da      	str	r2, [r3, #12]
 8102aae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	681b      	ldr	r3, [r3, #0]
 8102ab4:	4a44      	ldr	r2, [pc, #272]	; (8102bc8 <HAL_TIM_Encoder_MspInit+0x130>)
 8102ab6:	4293      	cmp	r3, r2
 8102ab8:	d14d      	bne.n	8102b56 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102aba:	4b44      	ldr	r3, [pc, #272]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102ac0:	4a42      	ldr	r2, [pc, #264]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102ac2:	f043 0302 	orr.w	r3, r3, #2
 8102ac6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102aca:	4b40      	ldr	r3, [pc, #256]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102ad0:	f003 0302 	and.w	r3, r3, #2
 8102ad4:	61bb      	str	r3, [r7, #24]
 8102ad6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102ad8:	4b3c      	ldr	r3, [pc, #240]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102ade:	4a3b      	ldr	r2, [pc, #236]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102ae0:	f043 0301 	orr.w	r3, r3, #1
 8102ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102ae8:	4b38      	ldr	r3, [pc, #224]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102aee:	f003 0301 	and.w	r3, r3, #1
 8102af2:	617b      	str	r3, [r7, #20]
 8102af4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102af6:	4b35      	ldr	r3, [pc, #212]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102afc:	4a33      	ldr	r2, [pc, #204]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102afe:	f043 0302 	orr.w	r3, r3, #2
 8102b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b06:	4b31      	ldr	r3, [pc, #196]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b0c:	f003 0302 	and.w	r3, r3, #2
 8102b10:	613b      	str	r3, [r7, #16]
 8102b12:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_X_A_Pin;
 8102b14:	2340      	movs	r3, #64	; 0x40
 8102b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102b18:	2302      	movs	r3, #2
 8102b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102b1c:	2300      	movs	r3, #0
 8102b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102b20:	2300      	movs	r3, #0
 8102b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102b24:	2302      	movs	r3, #2
 8102b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Encoder_X_A_GPIO_Port, &GPIO_InitStruct);
 8102b28:	f107 031c 	add.w	r3, r7, #28
 8102b2c:	4619      	mov	r1, r3
 8102b2e:	4828      	ldr	r0, [pc, #160]	; (8102bd0 <HAL_TIM_Encoder_MspInit+0x138>)
 8102b30:	f001 fd88 	bl	8104644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_X_B_Pin;
 8102b34:	2320      	movs	r3, #32
 8102b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102b38:	2302      	movs	r3, #2
 8102b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102b3c:	2300      	movs	r3, #0
 8102b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102b40:	2300      	movs	r3, #0
 8102b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102b44:	2302      	movs	r3, #2
 8102b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Encoder_X_B_GPIO_Port, &GPIO_InitStruct);
 8102b48:	f107 031c 	add.w	r3, r7, #28
 8102b4c:	4619      	mov	r1, r3
 8102b4e:	4821      	ldr	r0, [pc, #132]	; (8102bd4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8102b50:	f001 fd78 	bl	8104644 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8102b54:	e033      	b.n	8102bbe <HAL_TIM_Encoder_MspInit+0x126>
  else if(tim_encoderHandle->Instance==TIM4)
 8102b56:	687b      	ldr	r3, [r7, #4]
 8102b58:	681b      	ldr	r3, [r3, #0]
 8102b5a:	4a1f      	ldr	r2, [pc, #124]	; (8102bd8 <HAL_TIM_Encoder_MspInit+0x140>)
 8102b5c:	4293      	cmp	r3, r2
 8102b5e:	d12e      	bne.n	8102bbe <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8102b60:	4b1a      	ldr	r3, [pc, #104]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102b62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b66:	4a19      	ldr	r2, [pc, #100]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102b68:	f043 0304 	orr.w	r3, r3, #4
 8102b6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102b70:	4b16      	ldr	r3, [pc, #88]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b76:	f003 0304 	and.w	r3, r3, #4
 8102b7a:	60fb      	str	r3, [r7, #12]
 8102b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102b7e:	4b13      	ldr	r3, [pc, #76]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b84:	4a11      	ldr	r2, [pc, #68]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102b86:	f043 0308 	orr.w	r3, r3, #8
 8102b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b8e:	4b0f      	ldr	r3, [pc, #60]	; (8102bcc <HAL_TIM_Encoder_MspInit+0x134>)
 8102b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b94:	f003 0308 	and.w	r3, r3, #8
 8102b98:	60bb      	str	r3, [r7, #8]
 8102b9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Z_A_Pin|Encoder_Z_B_Pin;
 8102b9c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8102ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ba2:	2302      	movs	r3, #2
 8102ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102ba6:	2300      	movs	r3, #0
 8102ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102baa:	2300      	movs	r3, #0
 8102bac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8102bae:	2302      	movs	r3, #2
 8102bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102bb2:	f107 031c 	add.w	r3, r7, #28
 8102bb6:	4619      	mov	r1, r3
 8102bb8:	4808      	ldr	r0, [pc, #32]	; (8102bdc <HAL_TIM_Encoder_MspInit+0x144>)
 8102bba:	f001 fd43 	bl	8104644 <HAL_GPIO_Init>
}
 8102bbe:	bf00      	nop
 8102bc0:	3730      	adds	r7, #48	; 0x30
 8102bc2:	46bd      	mov	sp, r7
 8102bc4:	bd80      	pop	{r7, pc}
 8102bc6:	bf00      	nop
 8102bc8:	40000400 	.word	0x40000400
 8102bcc:	58024400 	.word	0x58024400
 8102bd0:	58020000 	.word	0x58020000
 8102bd4:	58020400 	.word	0x58020400
 8102bd8:	40000800 	.word	0x40000800
 8102bdc:	58020c00 	.word	0x58020c00

08102be0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8102be0:	b580      	push	{r7, lr}
 8102be2:	b086      	sub	sp, #24
 8102be4:	af00      	add	r7, sp, #0
 8102be6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8102be8:	687b      	ldr	r3, [r7, #4]
 8102bea:	681b      	ldr	r3, [r3, #0]
 8102bec:	4a23      	ldr	r2, [pc, #140]	; (8102c7c <HAL_TIM_Base_MspInit+0x9c>)
 8102bee:	4293      	cmp	r3, r2
 8102bf0:	d117      	bne.n	8102c22 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8102bf2:	4b23      	ldr	r3, [pc, #140]	; (8102c80 <HAL_TIM_Base_MspInit+0xa0>)
 8102bf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102bf8:	4a21      	ldr	r2, [pc, #132]	; (8102c80 <HAL_TIM_Base_MspInit+0xa0>)
 8102bfa:	f043 0320 	orr.w	r3, r3, #32
 8102bfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102c02:	4b1f      	ldr	r3, [pc, #124]	; (8102c80 <HAL_TIM_Base_MspInit+0xa0>)
 8102c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c08:	f003 0320 	and.w	r3, r3, #32
 8102c0c:	617b      	str	r3, [r7, #20]
 8102c0e:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8102c10:	2200      	movs	r2, #0
 8102c12:	2100      	movs	r1, #0
 8102c14:	2037      	movs	r0, #55	; 0x37
 8102c16:	f001 fccc 	bl	81045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8102c1a:	2037      	movs	r0, #55	; 0x37
 8102c1c:	f001 fce3 	bl	81045e6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8102c20:	e028      	b.n	8102c74 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM13)
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	681b      	ldr	r3, [r3, #0]
 8102c26:	4a17      	ldr	r2, [pc, #92]	; (8102c84 <HAL_TIM_Base_MspInit+0xa4>)
 8102c28:	4293      	cmp	r3, r2
 8102c2a:	d10f      	bne.n	8102c4c <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8102c2c:	4b14      	ldr	r3, [pc, #80]	; (8102c80 <HAL_TIM_Base_MspInit+0xa0>)
 8102c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c32:	4a13      	ldr	r2, [pc, #76]	; (8102c80 <HAL_TIM_Base_MspInit+0xa0>)
 8102c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8102c38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102c3c:	4b10      	ldr	r3, [pc, #64]	; (8102c80 <HAL_TIM_Base_MspInit+0xa0>)
 8102c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102c46:	613b      	str	r3, [r7, #16]
 8102c48:	693b      	ldr	r3, [r7, #16]
}
 8102c4a:	e013      	b.n	8102c74 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM14)
 8102c4c:	687b      	ldr	r3, [r7, #4]
 8102c4e:	681b      	ldr	r3, [r3, #0]
 8102c50:	4a0d      	ldr	r2, [pc, #52]	; (8102c88 <HAL_TIM_Base_MspInit+0xa8>)
 8102c52:	4293      	cmp	r3, r2
 8102c54:	d10e      	bne.n	8102c74 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8102c56:	4b0a      	ldr	r3, [pc, #40]	; (8102c80 <HAL_TIM_Base_MspInit+0xa0>)
 8102c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c5c:	4a08      	ldr	r2, [pc, #32]	; (8102c80 <HAL_TIM_Base_MspInit+0xa0>)
 8102c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102c62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102c66:	4b06      	ldr	r3, [pc, #24]	; (8102c80 <HAL_TIM_Base_MspInit+0xa0>)
 8102c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102c70:	60fb      	str	r3, [r7, #12]
 8102c72:	68fb      	ldr	r3, [r7, #12]
}
 8102c74:	bf00      	nop
 8102c76:	3718      	adds	r7, #24
 8102c78:	46bd      	mov	sp, r7
 8102c7a:	bd80      	pop	{r7, pc}
 8102c7c:	40001400 	.word	0x40001400
 8102c80:	58024400 	.word	0x58024400
 8102c84:	40001c00 	.word	0x40001c00
 8102c88:	40002000 	.word	0x40002000

08102c8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8102c8c:	b580      	push	{r7, lr}
 8102c8e:	b08a      	sub	sp, #40	; 0x28
 8102c90:	af00      	add	r7, sp, #0
 8102c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102c94:	f107 0314 	add.w	r3, r7, #20
 8102c98:	2200      	movs	r2, #0
 8102c9a:	601a      	str	r2, [r3, #0]
 8102c9c:	605a      	str	r2, [r3, #4]
 8102c9e:	609a      	str	r2, [r3, #8]
 8102ca0:	60da      	str	r2, [r3, #12]
 8102ca2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	681b      	ldr	r3, [r3, #0]
 8102ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102cac:	d120      	bne.n	8102cf0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102cae:	4b38      	ldr	r3, [pc, #224]	; (8102d90 <HAL_TIM_MspPostInit+0x104>)
 8102cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102cb4:	4a36      	ldr	r2, [pc, #216]	; (8102d90 <HAL_TIM_MspPostInit+0x104>)
 8102cb6:	f043 0302 	orr.w	r3, r3, #2
 8102cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102cbe:	4b34      	ldr	r3, [pc, #208]	; (8102d90 <HAL_TIM_MspPostInit+0x104>)
 8102cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102cc4:	f003 0302 	and.w	r3, r3, #2
 8102cc8:	613b      	str	r3, [r7, #16]
 8102cca:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_X_Pin|PWM_Z_Pin;
 8102ccc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8102cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102cd2:	2302      	movs	r3, #2
 8102cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102cd6:	2300      	movs	r3, #0
 8102cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102cda:	2300      	movs	r3, #0
 8102cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8102cde:	2301      	movs	r3, #1
 8102ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102ce2:	f107 0314 	add.w	r3, r7, #20
 8102ce6:	4619      	mov	r1, r3
 8102ce8:	482a      	ldr	r0, [pc, #168]	; (8102d94 <HAL_TIM_MspPostInit+0x108>)
 8102cea:	f001 fcab 	bl	8104644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8102cee:	e04a      	b.n	8102d86 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8102cf0:	687b      	ldr	r3, [r7, #4]
 8102cf2:	681b      	ldr	r3, [r3, #0]
 8102cf4:	4a28      	ldr	r2, [pc, #160]	; (8102d98 <HAL_TIM_MspPostInit+0x10c>)
 8102cf6:	4293      	cmp	r3, r2
 8102cf8:	d120      	bne.n	8102d3c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102cfa:	4b25      	ldr	r3, [pc, #148]	; (8102d90 <HAL_TIM_MspPostInit+0x104>)
 8102cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d00:	4a23      	ldr	r2, [pc, #140]	; (8102d90 <HAL_TIM_MspPostInit+0x104>)
 8102d02:	f043 0320 	orr.w	r3, r3, #32
 8102d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102d0a:	4b21      	ldr	r3, [pc, #132]	; (8102d90 <HAL_TIM_MspPostInit+0x104>)
 8102d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d10:	f003 0320 	and.w	r3, r3, #32
 8102d14:	60fb      	str	r3, [r7, #12]
 8102d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Servo_Rotate_Pin;
 8102d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8102d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102d1e:	2302      	movs	r3, #2
 8102d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102d22:	2300      	movs	r3, #0
 8102d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102d26:	2300      	movs	r3, #0
 8102d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8102d2a:	2309      	movs	r3, #9
 8102d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Servo_Rotate_GPIO_Port, &GPIO_InitStruct);
 8102d2e:	f107 0314 	add.w	r3, r7, #20
 8102d32:	4619      	mov	r1, r3
 8102d34:	4819      	ldr	r0, [pc, #100]	; (8102d9c <HAL_TIM_MspPostInit+0x110>)
 8102d36:	f001 fc85 	bl	8104644 <HAL_GPIO_Init>
}
 8102d3a:	e024      	b.n	8102d86 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8102d3c:	687b      	ldr	r3, [r7, #4]
 8102d3e:	681b      	ldr	r3, [r3, #0]
 8102d40:	4a17      	ldr	r2, [pc, #92]	; (8102da0 <HAL_TIM_MspPostInit+0x114>)
 8102d42:	4293      	cmp	r3, r2
 8102d44:	d11f      	bne.n	8102d86 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102d46:	4b12      	ldr	r3, [pc, #72]	; (8102d90 <HAL_TIM_MspPostInit+0x104>)
 8102d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d4c:	4a10      	ldr	r2, [pc, #64]	; (8102d90 <HAL_TIM_MspPostInit+0x104>)
 8102d4e:	f043 0320 	orr.w	r3, r3, #32
 8102d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102d56:	4b0e      	ldr	r3, [pc, #56]	; (8102d90 <HAL_TIM_MspPostInit+0x104>)
 8102d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d5c:	f003 0320 	and.w	r3, r3, #32
 8102d60:	60bb      	str	r3, [r7, #8]
 8102d62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_Servo_Slider_Pin;
 8102d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8102d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102d6a:	2302      	movs	r3, #2
 8102d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102d6e:	2300      	movs	r3, #0
 8102d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102d72:	2300      	movs	r3, #0
 8102d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8102d76:	2309      	movs	r3, #9
 8102d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Servo_Slider_GPIO_Port, &GPIO_InitStruct);
 8102d7a:	f107 0314 	add.w	r3, r7, #20
 8102d7e:	4619      	mov	r1, r3
 8102d80:	4806      	ldr	r0, [pc, #24]	; (8102d9c <HAL_TIM_MspPostInit+0x110>)
 8102d82:	f001 fc5f 	bl	8104644 <HAL_GPIO_Init>
}
 8102d86:	bf00      	nop
 8102d88:	3728      	adds	r7, #40	; 0x28
 8102d8a:	46bd      	mov	sp, r7
 8102d8c:	bd80      	pop	{r7, pc}
 8102d8e:	bf00      	nop
 8102d90:	58024400 	.word	0x58024400
 8102d94:	58020400 	.word	0x58020400
 8102d98:	40001c00 	.word	0x40001c00
 8102d9c:	58021400 	.word	0x58021400
 8102da0:	40002000 	.word	0x40002000

08102da4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
// Interrupt to check if a coin has been inserted
// Frequency is 50Hz ?
{
 8102da4:	b580      	push	{r7, lr}
 8102da6:	b082      	sub	sp, #8
 8102da8:	af00      	add	r7, sp, #0
 8102daa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) // check for which timer the Interrupt is for
 8102dac:	687b      	ldr	r3, [r7, #4]
 8102dae:	681b      	ldr	r3, [r3, #0]
 8102db0:	4a0e      	ldr	r2, [pc, #56]	; (8102dec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102db2:	4293      	cmp	r3, r2
 8102db4:	d116      	bne.n	8102de4 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		Sens_CoinEntry = coinInsertDetection();
 8102db6:	f7fe f9b3 	bl	8101120 <coinInsertDetection>
 8102dba:	4603      	mov	r3, r0
 8102dbc:	4a0c      	ldr	r2, [pc, #48]	; (8102df0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102dbe:	6013      	str	r3, [r2, #0]

		if (Sens_CoinEntry > 0 && Sens_CoinEntry < 8)
 8102dc0:	4b0b      	ldr	r3, [pc, #44]	; (8102df0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102dc2:	681b      	ldr	r3, [r3, #0]
 8102dc4:	2b00      	cmp	r3, #0
 8102dc6:	dd0d      	ble.n	8102de4 <HAL_TIM_PeriodElapsedCallback+0x40>
 8102dc8:	4b09      	ldr	r3, [pc, #36]	; (8102df0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102dca:	681b      	ldr	r3, [r3, #0]
 8102dcc:	2b07      	cmp	r3, #7
 8102dce:	dc09      	bgt.n	8102de4 <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			mem_Board[Sens_CoinEntry - 1]++;
 8102dd0:	4b07      	ldr	r3, [pc, #28]	; (8102df0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102dd2:	681b      	ldr	r3, [r3, #0]
 8102dd4:	3b01      	subs	r3, #1
 8102dd6:	4a07      	ldr	r2, [pc, #28]	; (8102df4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8102dd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8102ddc:	3201      	adds	r2, #1
 8102dde:	4905      	ldr	r1, [pc, #20]	; (8102df4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8102de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// make a flag for user msg
			// and check for it in some state
			// display msg, then clear it
		}
	}
}
 8102de4:	bf00      	nop
 8102de6:	3708      	adds	r7, #8
 8102de8:	46bd      	mov	sp, r7
 8102dea:	bd80      	pop	{r7, pc}
 8102dec:	40001400 	.word	0x40001400
 8102df0:	1000011c 	.word	0x1000011c
 8102df4:	100000e0 	.word	0x100000e0

08102df8 <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8102df8:	b580      	push	{r7, lr}
 8102dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102dfc:	4b22      	ldr	r3, [pc, #136]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102dfe:	4a23      	ldr	r2, [pc, #140]	; (8102e8c <MX_USART3_UART_Init+0x94>)
 8102e00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102e02:	4b21      	ldr	r3, [pc, #132]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102e08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102e0a:	4b1f      	ldr	r3, [pc, #124]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e0c:	2200      	movs	r2, #0
 8102e0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102e10:	4b1d      	ldr	r3, [pc, #116]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e12:	2200      	movs	r2, #0
 8102e14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102e16:	4b1c      	ldr	r3, [pc, #112]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e18:	2200      	movs	r2, #0
 8102e1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102e1c:	4b1a      	ldr	r3, [pc, #104]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e1e:	220c      	movs	r2, #12
 8102e20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102e22:	4b19      	ldr	r3, [pc, #100]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e24:	2200      	movs	r2, #0
 8102e26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102e28:	4b17      	ldr	r3, [pc, #92]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e2a:	2200      	movs	r2, #0
 8102e2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8102e2e:	4b16      	ldr	r3, [pc, #88]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e30:	2200      	movs	r2, #0
 8102e32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102e34:	4b14      	ldr	r3, [pc, #80]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e36:	2200      	movs	r2, #0
 8102e38:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102e3a:	4b13      	ldr	r3, [pc, #76]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e3c:	2200      	movs	r2, #0
 8102e3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102e40:	4811      	ldr	r0, [pc, #68]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e42:	f006 fa4b 	bl	81092dc <HAL_UART_Init>
 8102e46:	4603      	mov	r3, r0
 8102e48:	2b00      	cmp	r3, #0
 8102e4a:	d001      	beq.n	8102e50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8102e4c:	f7fe ffc0 	bl	8101dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102e50:	2100      	movs	r1, #0
 8102e52:	480d      	ldr	r0, [pc, #52]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e54:	f007 fa7e 	bl	810a354 <HAL_UARTEx_SetTxFifoThreshold>
 8102e58:	4603      	mov	r3, r0
 8102e5a:	2b00      	cmp	r3, #0
 8102e5c:	d001      	beq.n	8102e62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8102e5e:	f7fe ffb7 	bl	8101dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102e62:	2100      	movs	r1, #0
 8102e64:	4808      	ldr	r0, [pc, #32]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e66:	f007 fab3 	bl	810a3d0 <HAL_UARTEx_SetRxFifoThreshold>
 8102e6a:	4603      	mov	r3, r0
 8102e6c:	2b00      	cmp	r3, #0
 8102e6e:	d001      	beq.n	8102e74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102e70:	f7fe ffae 	bl	8101dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102e74:	4804      	ldr	r0, [pc, #16]	; (8102e88 <MX_USART3_UART_Init+0x90>)
 8102e76:	f007 fa34 	bl	810a2e2 <HAL_UARTEx_DisableFifoMode>
 8102e7a:	4603      	mov	r3, r0
 8102e7c:	2b00      	cmp	r3, #0
 8102e7e:	d001      	beq.n	8102e84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102e80:	f7fe ffa6 	bl	8101dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102e84:	bf00      	nop
 8102e86:	bd80      	pop	{r7, pc}
 8102e88:	1000039c 	.word	0x1000039c
 8102e8c:	40004800 	.word	0x40004800

08102e90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102e90:	b580      	push	{r7, lr}
 8102e92:	b0bc      	sub	sp, #240	; 0xf0
 8102e94:	af00      	add	r7, sp, #0
 8102e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102e98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102e9c:	2200      	movs	r2, #0
 8102e9e:	601a      	str	r2, [r3, #0]
 8102ea0:	605a      	str	r2, [r3, #4]
 8102ea2:	609a      	str	r2, [r3, #8]
 8102ea4:	60da      	str	r2, [r3, #12]
 8102ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102ea8:	f107 0320 	add.w	r3, r7, #32
 8102eac:	22bc      	movs	r2, #188	; 0xbc
 8102eae:	2100      	movs	r1, #0
 8102eb0:	4618      	mov	r0, r3
 8102eb2:	f007 fb3d 	bl	810a530 <memset>
  if(uartHandle->Instance==UART5)
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	4a5c      	ldr	r2, [pc, #368]	; (810302c <HAL_UART_MspInit+0x19c>)
 8102ebc:	4293      	cmp	r3, r2
 8102ebe:	d168      	bne.n	8102f92 <HAL_UART_MspInit+0x102>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8102ec0:	2302      	movs	r3, #2
 8102ec2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102ec4:	2300      	movs	r3, #0
 8102ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102eca:	f107 0320 	add.w	r3, r7, #32
 8102ece:	4618      	mov	r0, r3
 8102ed0:	f002 fe50 	bl	8105b74 <HAL_RCCEx_PeriphCLKConfig>
 8102ed4:	4603      	mov	r3, r0
 8102ed6:	2b00      	cmp	r3, #0
 8102ed8:	d001      	beq.n	8102ede <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8102eda:	f7fe ff79 	bl	8101dd0 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8102ede:	4b54      	ldr	r3, [pc, #336]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102ee4:	4a52      	ldr	r2, [pc, #328]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102eea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102eee:	4b50      	ldr	r3, [pc, #320]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102ef8:	61fb      	str	r3, [r7, #28]
 8102efa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102efc:	4b4c      	ldr	r3, [pc, #304]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102f02:	4a4b      	ldr	r2, [pc, #300]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102f04:	f043 0302 	orr.w	r3, r3, #2
 8102f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102f0c:	4b48      	ldr	r3, [pc, #288]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102f12:	f003 0302 	and.w	r3, r3, #2
 8102f16:	61bb      	str	r3, [r7, #24]
 8102f18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8102f1a:	4b45      	ldr	r3, [pc, #276]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102f20:	4a43      	ldr	r2, [pc, #268]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102f22:	f043 0304 	orr.w	r3, r3, #4
 8102f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102f2a:	4b41      	ldr	r3, [pc, #260]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102f30:	f003 0304 	and.w	r3, r3, #4
 8102f34:	617b      	str	r3, [r7, #20]
 8102f36:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8102f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102f40:	2302      	movs	r3, #2
 8102f42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102f46:	2300      	movs	r3, #0
 8102f48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102f4c:	2300      	movs	r3, #0
 8102f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8102f52:	230e      	movs	r3, #14
 8102f54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102f58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102f5c:	4619      	mov	r1, r3
 8102f5e:	4835      	ldr	r0, [pc, #212]	; (8103034 <HAL_UART_MspInit+0x1a4>)
 8102f60:	f001 fb70 	bl	8104644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8102f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102f68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102f6c:	2302      	movs	r3, #2
 8102f6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102f72:	2300      	movs	r3, #0
 8102f74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102f78:	2300      	movs	r3, #0
 8102f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8102f7e:	2308      	movs	r3, #8
 8102f80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102f84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102f88:	4619      	mov	r1, r3
 8102f8a:	482b      	ldr	r0, [pc, #172]	; (8103038 <HAL_UART_MspInit+0x1a8>)
 8102f8c:	f001 fb5a 	bl	8104644 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102f90:	e047      	b.n	8103022 <HAL_UART_MspInit+0x192>
  else if(uartHandle->Instance==USART3)
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	4a29      	ldr	r2, [pc, #164]	; (810303c <HAL_UART_MspInit+0x1ac>)
 8102f98:	4293      	cmp	r3, r2
 8102f9a:	d142      	bne.n	8103022 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102f9c:	2302      	movs	r3, #2
 8102f9e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102fa0:	2300      	movs	r3, #0
 8102fa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102fa6:	f107 0320 	add.w	r3, r7, #32
 8102faa:	4618      	mov	r0, r3
 8102fac:	f002 fde2 	bl	8105b74 <HAL_RCCEx_PeriphCLKConfig>
 8102fb0:	4603      	mov	r3, r0
 8102fb2:	2b00      	cmp	r3, #0
 8102fb4:	d001      	beq.n	8102fba <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8102fb6:	f7fe ff0b 	bl	8101dd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8102fba:	4b1d      	ldr	r3, [pc, #116]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102fc0:	4a1b      	ldr	r2, [pc, #108]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102fc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102fc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102fca:	4b19      	ldr	r3, [pc, #100]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102fd4:	613b      	str	r3, [r7, #16]
 8102fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102fd8:	4b15      	ldr	r3, [pc, #84]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102fde:	4a14      	ldr	r2, [pc, #80]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102fe0:	f043 0308 	orr.w	r3, r3, #8
 8102fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102fe8:	4b11      	ldr	r3, [pc, #68]	; (8103030 <HAL_UART_MspInit+0x1a0>)
 8102fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102fee:	f003 0308 	and.w	r3, r3, #8
 8102ff2:	60fb      	str	r3, [r7, #12]
 8102ff4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102ff6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ffe:	2302      	movs	r3, #2
 8103000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103004:	2300      	movs	r3, #0
 8103006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810300a:	2300      	movs	r3, #0
 810300c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8103010:	2307      	movs	r3, #7
 8103012:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103016:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810301a:	4619      	mov	r1, r3
 810301c:	4808      	ldr	r0, [pc, #32]	; (8103040 <HAL_UART_MspInit+0x1b0>)
 810301e:	f001 fb11 	bl	8104644 <HAL_GPIO_Init>
}
 8103022:	bf00      	nop
 8103024:	37f0      	adds	r7, #240	; 0xf0
 8103026:	46bd      	mov	sp, r7
 8103028:	bd80      	pop	{r7, pc}
 810302a:	bf00      	nop
 810302c:	40005000 	.word	0x40005000
 8103030:	58024400 	.word	0x58024400
 8103034:	58020400 	.word	0x58020400
 8103038:	58020800 	.word	0x58020800
 810303c:	40004800 	.word	0x40004800
 8103040:	58020c00 	.word	0x58020c00

08103044 <ST_LINK_WRITE>:
  }
}

/* USER CODE BEGIN 1 */
void ST_LINK_WRITE(uint8_t * msg, uint8_t length)
{
 8103044:	b580      	push	{r7, lr}
 8103046:	b082      	sub	sp, #8
 8103048:	af00      	add	r7, sp, #0
 810304a:	6078      	str	r0, [r7, #4]
 810304c:	460b      	mov	r3, r1
 810304e:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3,msg,length,100);
 8103050:	78fb      	ldrb	r3, [r7, #3]
 8103052:	b29a      	uxth	r2, r3
 8103054:	2364      	movs	r3, #100	; 0x64
 8103056:	6879      	ldr	r1, [r7, #4]
 8103058:	4803      	ldr	r0, [pc, #12]	; (8103068 <ST_LINK_WRITE+0x24>)
 810305a:	f006 f98f 	bl	810937c <HAL_UART_Transmit>
}
 810305e:	bf00      	nop
 8103060:	3708      	adds	r7, #8
 8103062:	46bd      	mov	sp, r7
 8103064:	bd80      	pop	{r7, pc}
 8103066:	bf00      	nop
 8103068:	1000039c 	.word	0x1000039c

0810306c <send_msg>:

void send_msg(uint8_t *msg_array)
/* Sends a message to the user */
{
 810306c:	b580      	push	{r7, lr}
 810306e:	b090      	sub	sp, #64	; 0x40
 8103070:	af00      	add	r7, sp, #0
 8103072:	6078      	str	r0, [r7, #4]
	uint8_t buffer[50]; // TODO: I think all buffers could be a global one at
						// a later stage or local for the library
	sprintf(buffer,(uint8_t*) msg_array);
 8103074:	f107 030c 	add.w	r3, r7, #12
 8103078:	6879      	ldr	r1, [r7, #4]
 810307a:	4618      	mov	r0, r3
 810307c:	f007 fa60 	bl	810a540 <siprintf>
	ST_LINK_WRITE(buffer, sizeof(buffer));
 8103080:	f107 030c 	add.w	r3, r7, #12
 8103084:	2132      	movs	r1, #50	; 0x32
 8103086:	4618      	mov	r0, r3
 8103088:	f7ff ffdc 	bl	8103044 <ST_LINK_WRITE>
	//HAL_Delay(10);
}
 810308c:	bf00      	nop
 810308e:	3740      	adds	r7, #64	; 0x40
 8103090:	46bd      	mov	sp, r7
 8103092:	bd80      	pop	{r7, pc}

08103094 <send_msg_data>:

void send_msg_data(uint8_t *msg_array, int data)
/* Sends a message with data to the user */
{
 8103094:	b580      	push	{r7, lr}
 8103096:	b08c      	sub	sp, #48	; 0x30
 8103098:	af00      	add	r7, sp, #0
 810309a:	6078      	str	r0, [r7, #4]
 810309c:	6039      	str	r1, [r7, #0]
	uint8_t buffer[40];
	sprintf(buffer, (uint8_t*)msg_array, data);
 810309e:	f107 0308 	add.w	r3, r7, #8
 81030a2:	683a      	ldr	r2, [r7, #0]
 81030a4:	6879      	ldr	r1, [r7, #4]
 81030a6:	4618      	mov	r0, r3
 81030a8:	f007 fa4a 	bl	810a540 <siprintf>
	ST_LINK_WRITE(buffer, sizeof(buffer));
 81030ac:	f107 0308 	add.w	r3, r7, #8
 81030b0:	2128      	movs	r1, #40	; 0x28
 81030b2:	4618      	mov	r0, r3
 81030b4:	f7ff ffc6 	bl	8103044 <ST_LINK_WRITE>
}
 81030b8:	bf00      	nop
 81030ba:	3730      	adds	r7, #48	; 0x30
 81030bc:	46bd      	mov	sp, r7
 81030be:	bd80      	pop	{r7, pc}

081030c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81030c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 81030f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81030c4:	f7fd fd4a 	bl	8100b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81030c8:	480c      	ldr	r0, [pc, #48]	; (81030fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81030ca:	490d      	ldr	r1, [pc, #52]	; (8103100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81030cc:	4a0d      	ldr	r2, [pc, #52]	; (8103104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81030ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81030d0:	e002      	b.n	81030d8 <LoopCopyDataInit>

081030d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81030d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81030d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81030d6:	3304      	adds	r3, #4

081030d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81030d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81030da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81030dc:	d3f9      	bcc.n	81030d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81030de:	4a0a      	ldr	r2, [pc, #40]	; (8103108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81030e0:	4c0a      	ldr	r4, [pc, #40]	; (810310c <LoopFillZerobss+0x22>)
  movs r3, #0
 81030e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81030e4:	e001      	b.n	81030ea <LoopFillZerobss>

081030e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81030e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81030e8:	3204      	adds	r2, #4

081030ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81030ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81030ec:	d3fb      	bcc.n	81030e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81030ee:	f007 f9fb 	bl	810a4e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81030f2:	f7fe fd81 	bl	8101bf8 <main>
  bx  lr
 81030f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81030f8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81030fc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8103100:	10000084 	.word	0x10000084
  ldr r2, =_sidata
 8103104:	0810b4d0 	.word	0x0810b4d0
  ldr r2, =_sbss
 8103108:	10000088 	.word	0x10000088
  ldr r4, =_ebss
 810310c:	10000444 	.word	0x10000444

08103110 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8103110:	e7fe      	b.n	8103110 <ADC3_IRQHandler>
	...

08103114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8103114:	b580      	push	{r7, lr}
 8103116:	b082      	sub	sp, #8
 8103118:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810311a:	4b28      	ldr	r3, [pc, #160]	; (81031bc <HAL_Init+0xa8>)
 810311c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103120:	4a26      	ldr	r2, [pc, #152]	; (81031bc <HAL_Init+0xa8>)
 8103122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8103126:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810312a:	4b24      	ldr	r3, [pc, #144]	; (81031bc <HAL_Init+0xa8>)
 810312c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103134:	603b      	str	r3, [r7, #0]
 8103136:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103138:	4b21      	ldr	r3, [pc, #132]	; (81031c0 <HAL_Init+0xac>)
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8103140:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103144:	4a1e      	ldr	r2, [pc, #120]	; (81031c0 <HAL_Init+0xac>)
 8103146:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810314a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810314c:	4b1c      	ldr	r3, [pc, #112]	; (81031c0 <HAL_Init+0xac>)
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	4a1b      	ldr	r2, [pc, #108]	; (81031c0 <HAL_Init+0xac>)
 8103152:	f043 0301 	orr.w	r3, r3, #1
 8103156:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103158:	2003      	movs	r0, #3
 810315a:	f001 fa1f 	bl	810459c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810315e:	f002 fb31 	bl	81057c4 <HAL_RCC_GetSysClockFreq>
 8103162:	4602      	mov	r2, r0
 8103164:	4b15      	ldr	r3, [pc, #84]	; (81031bc <HAL_Init+0xa8>)
 8103166:	699b      	ldr	r3, [r3, #24]
 8103168:	0a1b      	lsrs	r3, r3, #8
 810316a:	f003 030f 	and.w	r3, r3, #15
 810316e:	4915      	ldr	r1, [pc, #84]	; (81031c4 <HAL_Init+0xb0>)
 8103170:	5ccb      	ldrb	r3, [r1, r3]
 8103172:	f003 031f 	and.w	r3, r3, #31
 8103176:	fa22 f303 	lsr.w	r3, r2, r3
 810317a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810317c:	4b0f      	ldr	r3, [pc, #60]	; (81031bc <HAL_Init+0xa8>)
 810317e:	699b      	ldr	r3, [r3, #24]
 8103180:	f003 030f 	and.w	r3, r3, #15
 8103184:	4a0f      	ldr	r2, [pc, #60]	; (81031c4 <HAL_Init+0xb0>)
 8103186:	5cd3      	ldrb	r3, [r2, r3]
 8103188:	f003 031f 	and.w	r3, r3, #31
 810318c:	687a      	ldr	r2, [r7, #4]
 810318e:	fa22 f303 	lsr.w	r3, r2, r3
 8103192:	4a0d      	ldr	r2, [pc, #52]	; (81031c8 <HAL_Init+0xb4>)
 8103194:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103196:	4b0c      	ldr	r3, [pc, #48]	; (81031c8 <HAL_Init+0xb4>)
 8103198:	681b      	ldr	r3, [r3, #0]
 810319a:	4a0c      	ldr	r2, [pc, #48]	; (81031cc <HAL_Init+0xb8>)
 810319c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810319e:	2000      	movs	r0, #0
 81031a0:	f000 f816 	bl	81031d0 <HAL_InitTick>
 81031a4:	4603      	mov	r3, r0
 81031a6:	2b00      	cmp	r3, #0
 81031a8:	d001      	beq.n	81031ae <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81031aa:	2301      	movs	r3, #1
 81031ac:	e002      	b.n	81031b4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81031ae:	f7fe fe1d 	bl	8101dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81031b2:	2300      	movs	r3, #0
}
 81031b4:	4618      	mov	r0, r3
 81031b6:	3708      	adds	r7, #8
 81031b8:	46bd      	mov	sp, r7
 81031ba:	bd80      	pop	{r7, pc}
 81031bc:	58024400 	.word	0x58024400
 81031c0:	40024400 	.word	0x40024400
 81031c4:	0810b454 	.word	0x0810b454
 81031c8:	10000004 	.word	0x10000004
 81031cc:	10000000 	.word	0x10000000

081031d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81031d0:	b580      	push	{r7, lr}
 81031d2:	b082      	sub	sp, #8
 81031d4:	af00      	add	r7, sp, #0
 81031d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81031d8:	4b15      	ldr	r3, [pc, #84]	; (8103230 <HAL_InitTick+0x60>)
 81031da:	781b      	ldrb	r3, [r3, #0]
 81031dc:	2b00      	cmp	r3, #0
 81031de:	d101      	bne.n	81031e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81031e0:	2301      	movs	r3, #1
 81031e2:	e021      	b.n	8103228 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81031e4:	4b13      	ldr	r3, [pc, #76]	; (8103234 <HAL_InitTick+0x64>)
 81031e6:	681a      	ldr	r2, [r3, #0]
 81031e8:	4b11      	ldr	r3, [pc, #68]	; (8103230 <HAL_InitTick+0x60>)
 81031ea:	781b      	ldrb	r3, [r3, #0]
 81031ec:	4619      	mov	r1, r3
 81031ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81031f2:	fbb3 f3f1 	udiv	r3, r3, r1
 81031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 81031fa:	4618      	mov	r0, r3
 81031fc:	f001 fa01 	bl	8104602 <HAL_SYSTICK_Config>
 8103200:	4603      	mov	r3, r0
 8103202:	2b00      	cmp	r3, #0
 8103204:	d001      	beq.n	810320a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103206:	2301      	movs	r3, #1
 8103208:	e00e      	b.n	8103228 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	2b0f      	cmp	r3, #15
 810320e:	d80a      	bhi.n	8103226 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103210:	2200      	movs	r2, #0
 8103212:	6879      	ldr	r1, [r7, #4]
 8103214:	f04f 30ff 	mov.w	r0, #4294967295
 8103218:	f001 f9cb 	bl	81045b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810321c:	4a06      	ldr	r2, [pc, #24]	; (8103238 <HAL_InitTick+0x68>)
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8103222:	2300      	movs	r3, #0
 8103224:	e000      	b.n	8103228 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103226:	2301      	movs	r3, #1
}
 8103228:	4618      	mov	r0, r3
 810322a:	3708      	adds	r7, #8
 810322c:	46bd      	mov	sp, r7
 810322e:	bd80      	pop	{r7, pc}
 8103230:	1000001c 	.word	0x1000001c
 8103234:	10000000 	.word	0x10000000
 8103238:	10000018 	.word	0x10000018

0810323c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810323c:	b480      	push	{r7}
 810323e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103240:	4b06      	ldr	r3, [pc, #24]	; (810325c <HAL_IncTick+0x20>)
 8103242:	781b      	ldrb	r3, [r3, #0]
 8103244:	461a      	mov	r2, r3
 8103246:	4b06      	ldr	r3, [pc, #24]	; (8103260 <HAL_IncTick+0x24>)
 8103248:	681b      	ldr	r3, [r3, #0]
 810324a:	4413      	add	r3, r2
 810324c:	4a04      	ldr	r2, [pc, #16]	; (8103260 <HAL_IncTick+0x24>)
 810324e:	6013      	str	r3, [r2, #0]
}
 8103250:	bf00      	nop
 8103252:	46bd      	mov	sp, r7
 8103254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103258:	4770      	bx	lr
 810325a:	bf00      	nop
 810325c:	1000001c 	.word	0x1000001c
 8103260:	1000042c 	.word	0x1000042c

08103264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103264:	b480      	push	{r7}
 8103266:	af00      	add	r7, sp, #0
  return uwTick;
 8103268:	4b03      	ldr	r3, [pc, #12]	; (8103278 <HAL_GetTick+0x14>)
 810326a:	681b      	ldr	r3, [r3, #0]
}
 810326c:	4618      	mov	r0, r3
 810326e:	46bd      	mov	sp, r7
 8103270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103274:	4770      	bx	lr
 8103276:	bf00      	nop
 8103278:	1000042c 	.word	0x1000042c

0810327c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810327c:	b580      	push	{r7, lr}
 810327e:	b084      	sub	sp, #16
 8103280:	af00      	add	r7, sp, #0
 8103282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103284:	f7ff ffee 	bl	8103264 <HAL_GetTick>
 8103288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810328a:	687b      	ldr	r3, [r7, #4]
 810328c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810328e:	68fb      	ldr	r3, [r7, #12]
 8103290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103294:	d005      	beq.n	81032a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8103296:	4b0a      	ldr	r3, [pc, #40]	; (81032c0 <HAL_Delay+0x44>)
 8103298:	781b      	ldrb	r3, [r3, #0]
 810329a:	461a      	mov	r2, r3
 810329c:	68fb      	ldr	r3, [r7, #12]
 810329e:	4413      	add	r3, r2
 81032a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81032a2:	bf00      	nop
 81032a4:	f7ff ffde 	bl	8103264 <HAL_GetTick>
 81032a8:	4602      	mov	r2, r0
 81032aa:	68bb      	ldr	r3, [r7, #8]
 81032ac:	1ad3      	subs	r3, r2, r3
 81032ae:	68fa      	ldr	r2, [r7, #12]
 81032b0:	429a      	cmp	r2, r3
 81032b2:	d8f7      	bhi.n	81032a4 <HAL_Delay+0x28>
  {
  }
}
 81032b4:	bf00      	nop
 81032b6:	bf00      	nop
 81032b8:	3710      	adds	r7, #16
 81032ba:	46bd      	mov	sp, r7
 81032bc:	bd80      	pop	{r7, pc}
 81032be:	bf00      	nop
 81032c0:	1000001c 	.word	0x1000001c

081032c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81032c4:	b480      	push	{r7}
 81032c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81032c8:	4b03      	ldr	r3, [pc, #12]	; (81032d8 <HAL_GetREVID+0x14>)
 81032ca:	681b      	ldr	r3, [r3, #0]
 81032cc:	0c1b      	lsrs	r3, r3, #16
}
 81032ce:	4618      	mov	r0, r3
 81032d0:	46bd      	mov	sp, r7
 81032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032d6:	4770      	bx	lr
 81032d8:	5c001000 	.word	0x5c001000

081032dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81032dc:	b480      	push	{r7}
 81032de:	b083      	sub	sp, #12
 81032e0:	af00      	add	r7, sp, #0
 81032e2:	6078      	str	r0, [r7, #4]
 81032e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	689b      	ldr	r3, [r3, #8]
 81032ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81032ee:	683b      	ldr	r3, [r7, #0]
 81032f0:	431a      	orrs	r2, r3
 81032f2:	687b      	ldr	r3, [r7, #4]
 81032f4:	609a      	str	r2, [r3, #8]
}
 81032f6:	bf00      	nop
 81032f8:	370c      	adds	r7, #12
 81032fa:	46bd      	mov	sp, r7
 81032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103300:	4770      	bx	lr

08103302 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8103302:	b480      	push	{r7}
 8103304:	b083      	sub	sp, #12
 8103306:	af00      	add	r7, sp, #0
 8103308:	6078      	str	r0, [r7, #4]
 810330a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	689b      	ldr	r3, [r3, #8]
 8103310:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8103314:	683b      	ldr	r3, [r7, #0]
 8103316:	431a      	orrs	r2, r3
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	609a      	str	r2, [r3, #8]
}
 810331c:	bf00      	nop
 810331e:	370c      	adds	r7, #12
 8103320:	46bd      	mov	sp, r7
 8103322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103326:	4770      	bx	lr

08103328 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103328:	b480      	push	{r7}
 810332a:	b083      	sub	sp, #12
 810332c:	af00      	add	r7, sp, #0
 810332e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	689b      	ldr	r3, [r3, #8]
 8103334:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8103338:	4618      	mov	r0, r3
 810333a:	370c      	adds	r7, #12
 810333c:	46bd      	mov	sp, r7
 810333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103342:	4770      	bx	lr

08103344 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8103344:	b480      	push	{r7}
 8103346:	b087      	sub	sp, #28
 8103348:	af00      	add	r7, sp, #0
 810334a:	60f8      	str	r0, [r7, #12]
 810334c:	60b9      	str	r1, [r7, #8]
 810334e:	607a      	str	r2, [r7, #4]
 8103350:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8103352:	68fb      	ldr	r3, [r7, #12]
 8103354:	3360      	adds	r3, #96	; 0x60
 8103356:	461a      	mov	r2, r3
 8103358:	68bb      	ldr	r3, [r7, #8]
 810335a:	009b      	lsls	r3, r3, #2
 810335c:	4413      	add	r3, r2
 810335e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8103360:	697b      	ldr	r3, [r7, #20]
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 810336e:	683b      	ldr	r3, [r7, #0]
 8103370:	430b      	orrs	r3, r1
 8103372:	431a      	orrs	r2, r3
 8103374:	697b      	ldr	r3, [r7, #20]
 8103376:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8103378:	bf00      	nop
 810337a:	371c      	adds	r7, #28
 810337c:	46bd      	mov	sp, r7
 810337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103382:	4770      	bx	lr

08103384 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8103384:	b480      	push	{r7}
 8103386:	b085      	sub	sp, #20
 8103388:	af00      	add	r7, sp, #0
 810338a:	60f8      	str	r0, [r7, #12]
 810338c:	60b9      	str	r1, [r7, #8]
 810338e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8103390:	68fb      	ldr	r3, [r7, #12]
 8103392:	691b      	ldr	r3, [r3, #16]
 8103394:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8103398:	68bb      	ldr	r3, [r7, #8]
 810339a:	f003 031f 	and.w	r3, r3, #31
 810339e:	6879      	ldr	r1, [r7, #4]
 81033a0:	fa01 f303 	lsl.w	r3, r1, r3
 81033a4:	431a      	orrs	r2, r3
 81033a6:	68fb      	ldr	r3, [r7, #12]
 81033a8:	611a      	str	r2, [r3, #16]
}
 81033aa:	bf00      	nop
 81033ac:	3714      	adds	r7, #20
 81033ae:	46bd      	mov	sp, r7
 81033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033b4:	4770      	bx	lr

081033b6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 81033b6:	b480      	push	{r7}
 81033b8:	b087      	sub	sp, #28
 81033ba:	af00      	add	r7, sp, #0
 81033bc:	60f8      	str	r0, [r7, #12]
 81033be:	60b9      	str	r1, [r7, #8]
 81033c0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81033c2:	68fb      	ldr	r3, [r7, #12]
 81033c4:	3360      	adds	r3, #96	; 0x60
 81033c6:	461a      	mov	r2, r3
 81033c8:	68bb      	ldr	r3, [r7, #8]
 81033ca:	009b      	lsls	r3, r3, #2
 81033cc:	4413      	add	r3, r2
 81033ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81033d0:	697b      	ldr	r3, [r7, #20]
 81033d2:	681b      	ldr	r3, [r3, #0]
 81033d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	431a      	orrs	r2, r3
 81033dc:	697b      	ldr	r3, [r7, #20]
 81033de:	601a      	str	r2, [r3, #0]
  }
}
 81033e0:	bf00      	nop
 81033e2:	371c      	adds	r7, #28
 81033e4:	46bd      	mov	sp, r7
 81033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033ea:	4770      	bx	lr

081033ec <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81033ec:	b480      	push	{r7}
 81033ee:	b087      	sub	sp, #28
 81033f0:	af00      	add	r7, sp, #0
 81033f2:	60f8      	str	r0, [r7, #12]
 81033f4:	60b9      	str	r1, [r7, #8]
 81033f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81033f8:	68fb      	ldr	r3, [r7, #12]
 81033fa:	3330      	adds	r3, #48	; 0x30
 81033fc:	461a      	mov	r2, r3
 81033fe:	68bb      	ldr	r3, [r7, #8]
 8103400:	0a1b      	lsrs	r3, r3, #8
 8103402:	009b      	lsls	r3, r3, #2
 8103404:	f003 030c 	and.w	r3, r3, #12
 8103408:	4413      	add	r3, r2
 810340a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810340c:	697b      	ldr	r3, [r7, #20]
 810340e:	681a      	ldr	r2, [r3, #0]
 8103410:	68bb      	ldr	r3, [r7, #8]
 8103412:	f003 031f 	and.w	r3, r3, #31
 8103416:	211f      	movs	r1, #31
 8103418:	fa01 f303 	lsl.w	r3, r1, r3
 810341c:	43db      	mvns	r3, r3
 810341e:	401a      	ands	r2, r3
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	0e9b      	lsrs	r3, r3, #26
 8103424:	f003 011f 	and.w	r1, r3, #31
 8103428:	68bb      	ldr	r3, [r7, #8]
 810342a:	f003 031f 	and.w	r3, r3, #31
 810342e:	fa01 f303 	lsl.w	r3, r1, r3
 8103432:	431a      	orrs	r2, r3
 8103434:	697b      	ldr	r3, [r7, #20]
 8103436:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8103438:	bf00      	nop
 810343a:	371c      	adds	r7, #28
 810343c:	46bd      	mov	sp, r7
 810343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103442:	4770      	bx	lr

08103444 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8103444:	b480      	push	{r7}
 8103446:	b087      	sub	sp, #28
 8103448:	af00      	add	r7, sp, #0
 810344a:	60f8      	str	r0, [r7, #12]
 810344c:	60b9      	str	r1, [r7, #8]
 810344e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8103450:	68fb      	ldr	r3, [r7, #12]
 8103452:	3314      	adds	r3, #20
 8103454:	461a      	mov	r2, r3
 8103456:	68bb      	ldr	r3, [r7, #8]
 8103458:	0e5b      	lsrs	r3, r3, #25
 810345a:	009b      	lsls	r3, r3, #2
 810345c:	f003 0304 	and.w	r3, r3, #4
 8103460:	4413      	add	r3, r2
 8103462:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103464:	697b      	ldr	r3, [r7, #20]
 8103466:	681a      	ldr	r2, [r3, #0]
 8103468:	68bb      	ldr	r3, [r7, #8]
 810346a:	0d1b      	lsrs	r3, r3, #20
 810346c:	f003 031f 	and.w	r3, r3, #31
 8103470:	2107      	movs	r1, #7
 8103472:	fa01 f303 	lsl.w	r3, r1, r3
 8103476:	43db      	mvns	r3, r3
 8103478:	401a      	ands	r2, r3
 810347a:	68bb      	ldr	r3, [r7, #8]
 810347c:	0d1b      	lsrs	r3, r3, #20
 810347e:	f003 031f 	and.w	r3, r3, #31
 8103482:	6879      	ldr	r1, [r7, #4]
 8103484:	fa01 f303 	lsl.w	r3, r1, r3
 8103488:	431a      	orrs	r2, r3
 810348a:	697b      	ldr	r3, [r7, #20]
 810348c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810348e:	bf00      	nop
 8103490:	371c      	adds	r7, #28
 8103492:	46bd      	mov	sp, r7
 8103494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103498:	4770      	bx	lr
	...

0810349c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 810349c:	b480      	push	{r7}
 810349e:	b085      	sub	sp, #20
 81034a0:	af00      	add	r7, sp, #0
 81034a2:	60f8      	str	r0, [r7, #12]
 81034a4:	60b9      	str	r1, [r7, #8]
 81034a6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81034a8:	68fb      	ldr	r3, [r7, #12]
 81034aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 81034ae:	68bb      	ldr	r3, [r7, #8]
 81034b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81034b4:	43db      	mvns	r3, r3
 81034b6:	401a      	ands	r2, r3
 81034b8:	687b      	ldr	r3, [r7, #4]
 81034ba:	f003 0318 	and.w	r3, r3, #24
 81034be:	4908      	ldr	r1, [pc, #32]	; (81034e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 81034c0:	40d9      	lsrs	r1, r3
 81034c2:	68bb      	ldr	r3, [r7, #8]
 81034c4:	400b      	ands	r3, r1
 81034c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81034ca:	431a      	orrs	r2, r3
 81034cc:	68fb      	ldr	r3, [r7, #12]
 81034ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 81034d2:	bf00      	nop
 81034d4:	3714      	adds	r7, #20
 81034d6:	46bd      	mov	sp, r7
 81034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034dc:	4770      	bx	lr
 81034de:	bf00      	nop
 81034e0:	000fffff 	.word	0x000fffff

081034e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81034e4:	b480      	push	{r7}
 81034e6:	b083      	sub	sp, #12
 81034e8:	af00      	add	r7, sp, #0
 81034ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	689b      	ldr	r3, [r3, #8]
 81034f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 81034f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81034f8:	687a      	ldr	r2, [r7, #4]
 81034fa:	6093      	str	r3, [r2, #8]
}
 81034fc:	bf00      	nop
 81034fe:	370c      	adds	r7, #12
 8103500:	46bd      	mov	sp, r7
 8103502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103506:	4770      	bx	lr

08103508 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8103508:	b480      	push	{r7}
 810350a:	b083      	sub	sp, #12
 810350c:	af00      	add	r7, sp, #0
 810350e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	689b      	ldr	r3, [r3, #8]
 8103514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810351c:	d101      	bne.n	8103522 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 810351e:	2301      	movs	r3, #1
 8103520:	e000      	b.n	8103524 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8103522:	2300      	movs	r3, #0
}
 8103524:	4618      	mov	r0, r3
 8103526:	370c      	adds	r7, #12
 8103528:	46bd      	mov	sp, r7
 810352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810352e:	4770      	bx	lr

08103530 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8103530:	b480      	push	{r7}
 8103532:	b083      	sub	sp, #12
 8103534:	af00      	add	r7, sp, #0
 8103536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	689b      	ldr	r3, [r3, #8]
 810353c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8103540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8103544:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 810354c:	bf00      	nop
 810354e:	370c      	adds	r7, #12
 8103550:	46bd      	mov	sp, r7
 8103552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103556:	4770      	bx	lr

08103558 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8103558:	b480      	push	{r7}
 810355a:	b083      	sub	sp, #12
 810355c:	af00      	add	r7, sp, #0
 810355e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8103560:	687b      	ldr	r3, [r7, #4]
 8103562:	689b      	ldr	r3, [r3, #8]
 8103564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810356c:	d101      	bne.n	8103572 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 810356e:	2301      	movs	r3, #1
 8103570:	e000      	b.n	8103574 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8103572:	2300      	movs	r3, #0
}
 8103574:	4618      	mov	r0, r3
 8103576:	370c      	adds	r7, #12
 8103578:	46bd      	mov	sp, r7
 810357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810357e:	4770      	bx	lr

08103580 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8103580:	b480      	push	{r7}
 8103582:	b083      	sub	sp, #12
 8103584:	af00      	add	r7, sp, #0
 8103586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103588:	687b      	ldr	r3, [r7, #4]
 810358a:	689b      	ldr	r3, [r3, #8]
 810358c:	f003 0301 	and.w	r3, r3, #1
 8103590:	2b01      	cmp	r3, #1
 8103592:	d101      	bne.n	8103598 <LL_ADC_IsEnabled+0x18>
 8103594:	2301      	movs	r3, #1
 8103596:	e000      	b.n	810359a <LL_ADC_IsEnabled+0x1a>
 8103598:	2300      	movs	r3, #0
}
 810359a:	4618      	mov	r0, r3
 810359c:	370c      	adds	r7, #12
 810359e:	46bd      	mov	sp, r7
 81035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035a4:	4770      	bx	lr

081035a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81035a6:	b480      	push	{r7}
 81035a8:	b083      	sub	sp, #12
 81035aa:	af00      	add	r7, sp, #0
 81035ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	689b      	ldr	r3, [r3, #8]
 81035b2:	f003 0304 	and.w	r3, r3, #4
 81035b6:	2b04      	cmp	r3, #4
 81035b8:	d101      	bne.n	81035be <LL_ADC_REG_IsConversionOngoing+0x18>
 81035ba:	2301      	movs	r3, #1
 81035bc:	e000      	b.n	81035c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81035be:	2300      	movs	r3, #0
}
 81035c0:	4618      	mov	r0, r3
 81035c2:	370c      	adds	r7, #12
 81035c4:	46bd      	mov	sp, r7
 81035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035ca:	4770      	bx	lr

081035cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81035cc:	b480      	push	{r7}
 81035ce:	b083      	sub	sp, #12
 81035d0:	af00      	add	r7, sp, #0
 81035d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	689b      	ldr	r3, [r3, #8]
 81035d8:	f003 0308 	and.w	r3, r3, #8
 81035dc:	2b08      	cmp	r3, #8
 81035de:	d101      	bne.n	81035e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 81035e0:	2301      	movs	r3, #1
 81035e2:	e000      	b.n	81035e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81035e4:	2300      	movs	r3, #0
}
 81035e6:	4618      	mov	r0, r3
 81035e8:	370c      	adds	r7, #12
 81035ea:	46bd      	mov	sp, r7
 81035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035f0:	4770      	bx	lr
	...

081035f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81035f4:	b590      	push	{r4, r7, lr}
 81035f6:	b089      	sub	sp, #36	; 0x24
 81035f8:	af00      	add	r7, sp, #0
 81035fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81035fc:	2300      	movs	r3, #0
 81035fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8103600:	2300      	movs	r3, #0
 8103602:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	2b00      	cmp	r3, #0
 8103608:	d101      	bne.n	810360e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 810360a:	2301      	movs	r3, #1
 810360c:	e18f      	b.n	810392e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 810360e:	687b      	ldr	r3, [r7, #4]
 8103610:	68db      	ldr	r3, [r3, #12]
 8103612:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103618:	2b00      	cmp	r3, #0
 810361a:	d109      	bne.n	8103630 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 810361c:	6878      	ldr	r0, [r7, #4]
 810361e:	f7fe fcb7 	bl	8101f90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	2200      	movs	r2, #0
 8103626:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8103628:	687b      	ldr	r3, [r7, #4]
 810362a:	2200      	movs	r2, #0
 810362c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	681b      	ldr	r3, [r3, #0]
 8103634:	4618      	mov	r0, r3
 8103636:	f7ff ff67 	bl	8103508 <LL_ADC_IsDeepPowerDownEnabled>
 810363a:	4603      	mov	r3, r0
 810363c:	2b00      	cmp	r3, #0
 810363e:	d004      	beq.n	810364a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8103640:	687b      	ldr	r3, [r7, #4]
 8103642:	681b      	ldr	r3, [r3, #0]
 8103644:	4618      	mov	r0, r3
 8103646:	f7ff ff4d 	bl	81034e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	681b      	ldr	r3, [r3, #0]
 810364e:	4618      	mov	r0, r3
 8103650:	f7ff ff82 	bl	8103558 <LL_ADC_IsInternalRegulatorEnabled>
 8103654:	4603      	mov	r3, r0
 8103656:	2b00      	cmp	r3, #0
 8103658:	d114      	bne.n	8103684 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810365a:	687b      	ldr	r3, [r7, #4]
 810365c:	681b      	ldr	r3, [r3, #0]
 810365e:	4618      	mov	r0, r3
 8103660:	f7ff ff66 	bl	8103530 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103664:	4b88      	ldr	r3, [pc, #544]	; (8103888 <HAL_ADC_Init+0x294>)
 8103666:	681b      	ldr	r3, [r3, #0]
 8103668:	099b      	lsrs	r3, r3, #6
 810366a:	4a88      	ldr	r2, [pc, #544]	; (810388c <HAL_ADC_Init+0x298>)
 810366c:	fba2 2303 	umull	r2, r3, r2, r3
 8103670:	099b      	lsrs	r3, r3, #6
 8103672:	3301      	adds	r3, #1
 8103674:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103676:	e002      	b.n	810367e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8103678:	68bb      	ldr	r3, [r7, #8]
 810367a:	3b01      	subs	r3, #1
 810367c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810367e:	68bb      	ldr	r3, [r7, #8]
 8103680:	2b00      	cmp	r3, #0
 8103682:	d1f9      	bne.n	8103678 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	4618      	mov	r0, r3
 810368a:	f7ff ff65 	bl	8103558 <LL_ADC_IsInternalRegulatorEnabled>
 810368e:	4603      	mov	r3, r0
 8103690:	2b00      	cmp	r3, #0
 8103692:	d10d      	bne.n	81036b0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103698:	f043 0210 	orr.w	r2, r3, #16
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81036a0:	687b      	ldr	r3, [r7, #4]
 81036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81036a4:	f043 0201 	orr.w	r2, r3, #1
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 81036ac:	2301      	movs	r3, #1
 81036ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81036b0:	687b      	ldr	r3, [r7, #4]
 81036b2:	681b      	ldr	r3, [r3, #0]
 81036b4:	4618      	mov	r0, r3
 81036b6:	f7ff ff76 	bl	81035a6 <LL_ADC_REG_IsConversionOngoing>
 81036ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81036bc:	687b      	ldr	r3, [r7, #4]
 81036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036c0:	f003 0310 	and.w	r3, r3, #16
 81036c4:	2b00      	cmp	r3, #0
 81036c6:	f040 8129 	bne.w	810391c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81036ca:	697b      	ldr	r3, [r7, #20]
 81036cc:	2b00      	cmp	r3, #0
 81036ce:	f040 8125 	bne.w	810391c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81036d2:	687b      	ldr	r3, [r7, #4]
 81036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036d6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 81036da:	f043 0202 	orr.w	r2, r3, #2
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	4618      	mov	r0, r3
 81036e8:	f7ff ff4a 	bl	8103580 <LL_ADC_IsEnabled>
 81036ec:	4603      	mov	r3, r0
 81036ee:	2b00      	cmp	r3, #0
 81036f0:	d136      	bne.n	8103760 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	681b      	ldr	r3, [r3, #0]
 81036f6:	4a66      	ldr	r2, [pc, #408]	; (8103890 <HAL_ADC_Init+0x29c>)
 81036f8:	4293      	cmp	r3, r2
 81036fa:	d004      	beq.n	8103706 <HAL_ADC_Init+0x112>
 81036fc:	687b      	ldr	r3, [r7, #4]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	4a64      	ldr	r2, [pc, #400]	; (8103894 <HAL_ADC_Init+0x2a0>)
 8103702:	4293      	cmp	r3, r2
 8103704:	d10e      	bne.n	8103724 <HAL_ADC_Init+0x130>
 8103706:	4862      	ldr	r0, [pc, #392]	; (8103890 <HAL_ADC_Init+0x29c>)
 8103708:	f7ff ff3a 	bl	8103580 <LL_ADC_IsEnabled>
 810370c:	4604      	mov	r4, r0
 810370e:	4861      	ldr	r0, [pc, #388]	; (8103894 <HAL_ADC_Init+0x2a0>)
 8103710:	f7ff ff36 	bl	8103580 <LL_ADC_IsEnabled>
 8103714:	4603      	mov	r3, r0
 8103716:	4323      	orrs	r3, r4
 8103718:	2b00      	cmp	r3, #0
 810371a:	bf0c      	ite	eq
 810371c:	2301      	moveq	r3, #1
 810371e:	2300      	movne	r3, #0
 8103720:	b2db      	uxtb	r3, r3
 8103722:	e008      	b.n	8103736 <HAL_ADC_Init+0x142>
 8103724:	485c      	ldr	r0, [pc, #368]	; (8103898 <HAL_ADC_Init+0x2a4>)
 8103726:	f7ff ff2b 	bl	8103580 <LL_ADC_IsEnabled>
 810372a:	4603      	mov	r3, r0
 810372c:	2b00      	cmp	r3, #0
 810372e:	bf0c      	ite	eq
 8103730:	2301      	moveq	r3, #1
 8103732:	2300      	movne	r3, #0
 8103734:	b2db      	uxtb	r3, r3
 8103736:	2b00      	cmp	r3, #0
 8103738:	d012      	beq.n	8103760 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 810373a:	687b      	ldr	r3, [r7, #4]
 810373c:	681b      	ldr	r3, [r3, #0]
 810373e:	4a54      	ldr	r2, [pc, #336]	; (8103890 <HAL_ADC_Init+0x29c>)
 8103740:	4293      	cmp	r3, r2
 8103742:	d004      	beq.n	810374e <HAL_ADC_Init+0x15a>
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	681b      	ldr	r3, [r3, #0]
 8103748:	4a52      	ldr	r2, [pc, #328]	; (8103894 <HAL_ADC_Init+0x2a0>)
 810374a:	4293      	cmp	r3, r2
 810374c:	d101      	bne.n	8103752 <HAL_ADC_Init+0x15e>
 810374e:	4a53      	ldr	r2, [pc, #332]	; (810389c <HAL_ADC_Init+0x2a8>)
 8103750:	e000      	b.n	8103754 <HAL_ADC_Init+0x160>
 8103752:	4a53      	ldr	r2, [pc, #332]	; (81038a0 <HAL_ADC_Init+0x2ac>)
 8103754:	687b      	ldr	r3, [r7, #4]
 8103756:	685b      	ldr	r3, [r3, #4]
 8103758:	4619      	mov	r1, r3
 810375a:	4610      	mov	r0, r2
 810375c:	f7ff fdbe 	bl	81032dc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8103760:	f7ff fdb0 	bl	81032c4 <HAL_GetREVID>
 8103764:	4603      	mov	r3, r0
 8103766:	f241 0203 	movw	r2, #4099	; 0x1003
 810376a:	4293      	cmp	r3, r2
 810376c:	d914      	bls.n	8103798 <HAL_ADC_Init+0x1a4>
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	689b      	ldr	r3, [r3, #8]
 8103772:	2b10      	cmp	r3, #16
 8103774:	d110      	bne.n	8103798 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	7d5b      	ldrb	r3, [r3, #21]
 810377a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810377c:	687b      	ldr	r3, [r7, #4]
 810377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103780:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103786:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	7f1b      	ldrb	r3, [r3, #28]
 810378c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810378e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103790:	f043 030c 	orr.w	r3, r3, #12
 8103794:	61bb      	str	r3, [r7, #24]
 8103796:	e00d      	b.n	81037b4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	7d5b      	ldrb	r3, [r3, #21]
 810379c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810379e:	687b      	ldr	r3, [r7, #4]
 81037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81037a2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 81037a4:	687b      	ldr	r3, [r7, #4]
 81037a6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81037a8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	7f1b      	ldrb	r3, [r3, #28]
 81037ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81037b0:	4313      	orrs	r3, r2
 81037b2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	7f1b      	ldrb	r3, [r3, #28]
 81037b8:	2b01      	cmp	r3, #1
 81037ba:	d106      	bne.n	81037ca <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	6a1b      	ldr	r3, [r3, #32]
 81037c0:	3b01      	subs	r3, #1
 81037c2:	045b      	lsls	r3, r3, #17
 81037c4:	69ba      	ldr	r2, [r7, #24]
 81037c6:	4313      	orrs	r3, r2
 81037c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81037ca:	687b      	ldr	r3, [r7, #4]
 81037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037ce:	2b00      	cmp	r3, #0
 81037d0:	d009      	beq.n	81037e6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81037d2:	687b      	ldr	r3, [r7, #4]
 81037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037d6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81037de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81037e0:	69ba      	ldr	r2, [r7, #24]
 81037e2:	4313      	orrs	r3, r2
 81037e4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	681b      	ldr	r3, [r3, #0]
 81037ea:	68da      	ldr	r2, [r3, #12]
 81037ec:	4b2d      	ldr	r3, [pc, #180]	; (81038a4 <HAL_ADC_Init+0x2b0>)
 81037ee:	4013      	ands	r3, r2
 81037f0:	687a      	ldr	r2, [r7, #4]
 81037f2:	6812      	ldr	r2, [r2, #0]
 81037f4:	69b9      	ldr	r1, [r7, #24]
 81037f6:	430b      	orrs	r3, r1
 81037f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	681b      	ldr	r3, [r3, #0]
 81037fe:	4618      	mov	r0, r3
 8103800:	f7ff fed1 	bl	81035a6 <LL_ADC_REG_IsConversionOngoing>
 8103804:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	681b      	ldr	r3, [r3, #0]
 810380a:	4618      	mov	r0, r3
 810380c:	f7ff fede 	bl	81035cc <LL_ADC_INJ_IsConversionOngoing>
 8103810:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8103812:	693b      	ldr	r3, [r7, #16]
 8103814:	2b00      	cmp	r3, #0
 8103816:	d15f      	bne.n	81038d8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103818:	68fb      	ldr	r3, [r7, #12]
 810381a:	2b00      	cmp	r3, #0
 810381c:	d15c      	bne.n	81038d8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	7d1b      	ldrb	r3, [r3, #20]
 8103822:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8103824:	687b      	ldr	r3, [r7, #4]
 8103826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8103828:	4313      	orrs	r3, r2
 810382a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	68db      	ldr	r3, [r3, #12]
 8103832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8103836:	f023 0303 	bic.w	r3, r3, #3
 810383a:	687a      	ldr	r2, [r7, #4]
 810383c:	6812      	ldr	r2, [r2, #0]
 810383e:	69b9      	ldr	r1, [r7, #24]
 8103840:	430b      	orrs	r3, r1
 8103842:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810384a:	2b01      	cmp	r3, #1
 810384c:	d12e      	bne.n	81038ac <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103852:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	681b      	ldr	r3, [r3, #0]
 8103858:	691a      	ldr	r2, [r3, #16]
 810385a:	4b13      	ldr	r3, [pc, #76]	; (81038a8 <HAL_ADC_Init+0x2b4>)
 810385c:	4013      	ands	r3, r2
 810385e:	687a      	ldr	r2, [r7, #4]
 8103860:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8103862:	3a01      	subs	r2, #1
 8103864:	0411      	lsls	r1, r2, #16
 8103866:	687a      	ldr	r2, [r7, #4]
 8103868:	6c12      	ldr	r2, [r2, #64]	; 0x40
 810386a:	4311      	orrs	r1, r2
 810386c:	687a      	ldr	r2, [r7, #4]
 810386e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8103870:	4311      	orrs	r1, r2
 8103872:	687a      	ldr	r2, [r7, #4]
 8103874:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8103876:	430a      	orrs	r2, r1
 8103878:	431a      	orrs	r2, r3
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	f042 0201 	orr.w	r2, r2, #1
 8103882:	611a      	str	r2, [r3, #16]
 8103884:	e01a      	b.n	81038bc <HAL_ADC_Init+0x2c8>
 8103886:	bf00      	nop
 8103888:	10000000 	.word	0x10000000
 810388c:	053e2d63 	.word	0x053e2d63
 8103890:	40022000 	.word	0x40022000
 8103894:	40022100 	.word	0x40022100
 8103898:	58026000 	.word	0x58026000
 810389c:	40022300 	.word	0x40022300
 81038a0:	58026300 	.word	0x58026300
 81038a4:	fff0c003 	.word	0xfff0c003
 81038a8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	681b      	ldr	r3, [r3, #0]
 81038b0:	691a      	ldr	r2, [r3, #16]
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	681b      	ldr	r3, [r3, #0]
 81038b6:	f022 0201 	bic.w	r2, r2, #1
 81038ba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	691b      	ldr	r3, [r3, #16]
 81038c2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	681b      	ldr	r3, [r3, #0]
 81038ce:	430a      	orrs	r2, r1
 81038d0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81038d2:	6878      	ldr	r0, [r7, #4]
 81038d4:	f000 fb80 	bl	8103fd8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	68db      	ldr	r3, [r3, #12]
 81038dc:	2b01      	cmp	r3, #1
 81038de:	d10c      	bne.n	81038fa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81038e0:	687b      	ldr	r3, [r7, #4]
 81038e2:	681b      	ldr	r3, [r3, #0]
 81038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038e6:	f023 010f 	bic.w	r1, r3, #15
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	699b      	ldr	r3, [r3, #24]
 81038ee:	1e5a      	subs	r2, r3, #1
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	681b      	ldr	r3, [r3, #0]
 81038f4:	430a      	orrs	r2, r1
 81038f6:	631a      	str	r2, [r3, #48]	; 0x30
 81038f8:	e007      	b.n	810390a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	681b      	ldr	r3, [r3, #0]
 81038fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	681b      	ldr	r3, [r3, #0]
 8103904:	f022 020f 	bic.w	r2, r2, #15
 8103908:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 810390a:	687b      	ldr	r3, [r7, #4]
 810390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810390e:	f023 0303 	bic.w	r3, r3, #3
 8103912:	f043 0201 	orr.w	r2, r3, #1
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	655a      	str	r2, [r3, #84]	; 0x54
 810391a:	e007      	b.n	810392c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103920:	f043 0210 	orr.w	r2, r3, #16
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103928:	2301      	movs	r3, #1
 810392a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 810392c:	7ffb      	ldrb	r3, [r7, #31]
}
 810392e:	4618      	mov	r0, r3
 8103930:	3724      	adds	r7, #36	; 0x24
 8103932:	46bd      	mov	sp, r7
 8103934:	bd90      	pop	{r4, r7, pc}
 8103936:	bf00      	nop

08103938 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8103938:	b590      	push	{r4, r7, lr}
 810393a:	b0a1      	sub	sp, #132	; 0x84
 810393c:	af00      	add	r7, sp, #0
 810393e:	6078      	str	r0, [r7, #4]
 8103940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103942:	2300      	movs	r3, #0
 8103944:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8103948:	2300      	movs	r3, #0
 810394a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 810394c:	683b      	ldr	r3, [r7, #0]
 810394e:	68db      	ldr	r3, [r3, #12]
 8103950:	4a9d      	ldr	r2, [pc, #628]	; (8103bc8 <HAL_ADC_ConfigChannel+0x290>)
 8103952:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810395a:	2b01      	cmp	r3, #1
 810395c:	d101      	bne.n	8103962 <HAL_ADC_ConfigChannel+0x2a>
 810395e:	2302      	movs	r3, #2
 8103960:	e321      	b.n	8103fa6 <HAL_ADC_ConfigChannel+0x66e>
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	2201      	movs	r2, #1
 8103966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	4618      	mov	r0, r3
 8103970:	f7ff fe19 	bl	81035a6 <LL_ADC_REG_IsConversionOngoing>
 8103974:	4603      	mov	r3, r0
 8103976:	2b00      	cmp	r3, #0
 8103978:	f040 8306 	bne.w	8103f88 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 810397c:	683b      	ldr	r3, [r7, #0]
 810397e:	681b      	ldr	r3, [r3, #0]
 8103980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103984:	2b00      	cmp	r3, #0
 8103986:	d108      	bne.n	810399a <HAL_ADC_ConfigChannel+0x62>
 8103988:	683b      	ldr	r3, [r7, #0]
 810398a:	681b      	ldr	r3, [r3, #0]
 810398c:	0e9b      	lsrs	r3, r3, #26
 810398e:	f003 031f 	and.w	r3, r3, #31
 8103992:	2201      	movs	r2, #1
 8103994:	fa02 f303 	lsl.w	r3, r2, r3
 8103998:	e016      	b.n	81039c8 <HAL_ADC_ConfigChannel+0x90>
 810399a:	683b      	ldr	r3, [r7, #0]
 810399c:	681b      	ldr	r3, [r3, #0]
 810399e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81039a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81039a2:	fa93 f3a3 	rbit	r3, r3
 81039a6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81039a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81039aa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81039ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81039ae:	2b00      	cmp	r3, #0
 81039b0:	d101      	bne.n	81039b6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 81039b2:	2320      	movs	r3, #32
 81039b4:	e003      	b.n	81039be <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 81039b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81039b8:	fab3 f383 	clz	r3, r3
 81039bc:	b2db      	uxtb	r3, r3
 81039be:	f003 031f 	and.w	r3, r3, #31
 81039c2:	2201      	movs	r2, #1
 81039c4:	fa02 f303 	lsl.w	r3, r2, r3
 81039c8:	687a      	ldr	r2, [r7, #4]
 81039ca:	6812      	ldr	r2, [r2, #0]
 81039cc:	69d1      	ldr	r1, [r2, #28]
 81039ce:	687a      	ldr	r2, [r7, #4]
 81039d0:	6812      	ldr	r2, [r2, #0]
 81039d2:	430b      	orrs	r3, r1
 81039d4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	6818      	ldr	r0, [r3, #0]
 81039da:	683b      	ldr	r3, [r7, #0]
 81039dc:	6859      	ldr	r1, [r3, #4]
 81039de:	683b      	ldr	r3, [r7, #0]
 81039e0:	681b      	ldr	r3, [r3, #0]
 81039e2:	461a      	mov	r2, r3
 81039e4:	f7ff fd02 	bl	81033ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	4618      	mov	r0, r3
 81039ee:	f7ff fdda 	bl	81035a6 <LL_ADC_REG_IsConversionOngoing>
 81039f2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	4618      	mov	r0, r3
 81039fa:	f7ff fde7 	bl	81035cc <LL_ADC_INJ_IsConversionOngoing>
 81039fe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8103a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103a02:	2b00      	cmp	r3, #0
 8103a04:	f040 80b3 	bne.w	8103b6e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8103a0a:	2b00      	cmp	r3, #0
 8103a0c:	f040 80af 	bne.w	8103b6e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	6818      	ldr	r0, [r3, #0]
 8103a14:	683b      	ldr	r3, [r7, #0]
 8103a16:	6819      	ldr	r1, [r3, #0]
 8103a18:	683b      	ldr	r3, [r7, #0]
 8103a1a:	689b      	ldr	r3, [r3, #8]
 8103a1c:	461a      	mov	r2, r3
 8103a1e:	f7ff fd11 	bl	8103444 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8103a22:	4b6a      	ldr	r3, [pc, #424]	; (8103bcc <HAL_ADC_ConfigChannel+0x294>)
 8103a24:	681b      	ldr	r3, [r3, #0]
 8103a26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8103a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103a2e:	d10b      	bne.n	8103a48 <HAL_ADC_ConfigChannel+0x110>
 8103a30:	683b      	ldr	r3, [r7, #0]
 8103a32:	695a      	ldr	r2, [r3, #20]
 8103a34:	687b      	ldr	r3, [r7, #4]
 8103a36:	681b      	ldr	r3, [r3, #0]
 8103a38:	68db      	ldr	r3, [r3, #12]
 8103a3a:	089b      	lsrs	r3, r3, #2
 8103a3c:	f003 0307 	and.w	r3, r3, #7
 8103a40:	005b      	lsls	r3, r3, #1
 8103a42:	fa02 f303 	lsl.w	r3, r2, r3
 8103a46:	e01d      	b.n	8103a84 <HAL_ADC_ConfigChannel+0x14c>
 8103a48:	687b      	ldr	r3, [r7, #4]
 8103a4a:	681b      	ldr	r3, [r3, #0]
 8103a4c:	68db      	ldr	r3, [r3, #12]
 8103a4e:	f003 0310 	and.w	r3, r3, #16
 8103a52:	2b00      	cmp	r3, #0
 8103a54:	d10b      	bne.n	8103a6e <HAL_ADC_ConfigChannel+0x136>
 8103a56:	683b      	ldr	r3, [r7, #0]
 8103a58:	695a      	ldr	r2, [r3, #20]
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	68db      	ldr	r3, [r3, #12]
 8103a60:	089b      	lsrs	r3, r3, #2
 8103a62:	f003 0307 	and.w	r3, r3, #7
 8103a66:	005b      	lsls	r3, r3, #1
 8103a68:	fa02 f303 	lsl.w	r3, r2, r3
 8103a6c:	e00a      	b.n	8103a84 <HAL_ADC_ConfigChannel+0x14c>
 8103a6e:	683b      	ldr	r3, [r7, #0]
 8103a70:	695a      	ldr	r2, [r3, #20]
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	68db      	ldr	r3, [r3, #12]
 8103a78:	089b      	lsrs	r3, r3, #2
 8103a7a:	f003 0304 	and.w	r3, r3, #4
 8103a7e:	005b      	lsls	r3, r3, #1
 8103a80:	fa02 f303 	lsl.w	r3, r2, r3
 8103a84:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8103a86:	683b      	ldr	r3, [r7, #0]
 8103a88:	691b      	ldr	r3, [r3, #16]
 8103a8a:	2b04      	cmp	r3, #4
 8103a8c:	d027      	beq.n	8103ade <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	6818      	ldr	r0, [r3, #0]
 8103a92:	683b      	ldr	r3, [r7, #0]
 8103a94:	6919      	ldr	r1, [r3, #16]
 8103a96:	683b      	ldr	r3, [r7, #0]
 8103a98:	681a      	ldr	r2, [r3, #0]
 8103a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103a9c:	f7ff fc52 	bl	8103344 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	6818      	ldr	r0, [r3, #0]
 8103aa4:	683b      	ldr	r3, [r7, #0]
 8103aa6:	6919      	ldr	r1, [r3, #16]
 8103aa8:	683b      	ldr	r3, [r7, #0]
 8103aaa:	7e5b      	ldrb	r3, [r3, #25]
 8103aac:	2b01      	cmp	r3, #1
 8103aae:	d102      	bne.n	8103ab6 <HAL_ADC_ConfigChannel+0x17e>
 8103ab0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8103ab4:	e000      	b.n	8103ab8 <HAL_ADC_ConfigChannel+0x180>
 8103ab6:	2300      	movs	r3, #0
 8103ab8:	461a      	mov	r2, r3
 8103aba:	f7ff fc7c 	bl	81033b6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	6818      	ldr	r0, [r3, #0]
 8103ac2:	683b      	ldr	r3, [r7, #0]
 8103ac4:	6919      	ldr	r1, [r3, #16]
 8103ac6:	683b      	ldr	r3, [r7, #0]
 8103ac8:	7e1b      	ldrb	r3, [r3, #24]
 8103aca:	2b01      	cmp	r3, #1
 8103acc:	d102      	bne.n	8103ad4 <HAL_ADC_ConfigChannel+0x19c>
 8103ace:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8103ad2:	e000      	b.n	8103ad6 <HAL_ADC_ConfigChannel+0x19e>
 8103ad4:	2300      	movs	r3, #0
 8103ad6:	461a      	mov	r2, r3
 8103ad8:	f7ff fc54 	bl	8103384 <LL_ADC_SetDataRightShift>
 8103adc:	e047      	b.n	8103b6e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	681b      	ldr	r3, [r3, #0]
 8103ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103ae4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103ae8:	683b      	ldr	r3, [r7, #0]
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	069b      	lsls	r3, r3, #26
 8103aee:	429a      	cmp	r2, r3
 8103af0:	d107      	bne.n	8103b02 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	681b      	ldr	r3, [r3, #0]
 8103af6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8103af8:	687b      	ldr	r3, [r7, #4]
 8103afa:	681b      	ldr	r3, [r3, #0]
 8103afc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103b00:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	681b      	ldr	r3, [r3, #0]
 8103b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103b08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103b0c:	683b      	ldr	r3, [r7, #0]
 8103b0e:	681b      	ldr	r3, [r3, #0]
 8103b10:	069b      	lsls	r3, r3, #26
 8103b12:	429a      	cmp	r2, r3
 8103b14:	d107      	bne.n	8103b26 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	681b      	ldr	r3, [r3, #0]
 8103b1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	681b      	ldr	r3, [r3, #0]
 8103b20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103b24:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103b26:	687b      	ldr	r3, [r7, #4]
 8103b28:	681b      	ldr	r3, [r3, #0]
 8103b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103b2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103b30:	683b      	ldr	r3, [r7, #0]
 8103b32:	681b      	ldr	r3, [r3, #0]
 8103b34:	069b      	lsls	r3, r3, #26
 8103b36:	429a      	cmp	r2, r3
 8103b38:	d107      	bne.n	8103b4a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8103b3a:	687b      	ldr	r3, [r7, #4]
 8103b3c:	681b      	ldr	r3, [r3, #0]
 8103b3e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	681b      	ldr	r3, [r3, #0]
 8103b44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103b48:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	681b      	ldr	r3, [r3, #0]
 8103b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103b50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103b54:	683b      	ldr	r3, [r7, #0]
 8103b56:	681b      	ldr	r3, [r3, #0]
 8103b58:	069b      	lsls	r3, r3, #26
 8103b5a:	429a      	cmp	r2, r3
 8103b5c:	d107      	bne.n	8103b6e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	681b      	ldr	r3, [r3, #0]
 8103b62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8103b64:	687b      	ldr	r3, [r7, #4]
 8103b66:	681b      	ldr	r3, [r3, #0]
 8103b68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103b6c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103b6e:	687b      	ldr	r3, [r7, #4]
 8103b70:	681b      	ldr	r3, [r3, #0]
 8103b72:	4618      	mov	r0, r3
 8103b74:	f7ff fd04 	bl	8103580 <LL_ADC_IsEnabled>
 8103b78:	4603      	mov	r3, r0
 8103b7a:	2b00      	cmp	r3, #0
 8103b7c:	f040 820d 	bne.w	8103f9a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	6818      	ldr	r0, [r3, #0]
 8103b84:	683b      	ldr	r3, [r7, #0]
 8103b86:	6819      	ldr	r1, [r3, #0]
 8103b88:	683b      	ldr	r3, [r7, #0]
 8103b8a:	68db      	ldr	r3, [r3, #12]
 8103b8c:	461a      	mov	r2, r3
 8103b8e:	f7ff fc85 	bl	810349c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8103b92:	683b      	ldr	r3, [r7, #0]
 8103b94:	68db      	ldr	r3, [r3, #12]
 8103b96:	4a0c      	ldr	r2, [pc, #48]	; (8103bc8 <HAL_ADC_ConfigChannel+0x290>)
 8103b98:	4293      	cmp	r3, r2
 8103b9a:	f040 8133 	bne.w	8103e04 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103ba2:	683b      	ldr	r3, [r7, #0]
 8103ba4:	681b      	ldr	r3, [r3, #0]
 8103ba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103baa:	2b00      	cmp	r3, #0
 8103bac:	d110      	bne.n	8103bd0 <HAL_ADC_ConfigChannel+0x298>
 8103bae:	683b      	ldr	r3, [r7, #0]
 8103bb0:	681b      	ldr	r3, [r3, #0]
 8103bb2:	0e9b      	lsrs	r3, r3, #26
 8103bb4:	3301      	adds	r3, #1
 8103bb6:	f003 031f 	and.w	r3, r3, #31
 8103bba:	2b09      	cmp	r3, #9
 8103bbc:	bf94      	ite	ls
 8103bbe:	2301      	movls	r3, #1
 8103bc0:	2300      	movhi	r3, #0
 8103bc2:	b2db      	uxtb	r3, r3
 8103bc4:	e01e      	b.n	8103c04 <HAL_ADC_ConfigChannel+0x2cc>
 8103bc6:	bf00      	nop
 8103bc8:	47ff0000 	.word	0x47ff0000
 8103bcc:	5c001000 	.word	0x5c001000
 8103bd0:	683b      	ldr	r3, [r7, #0]
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8103bd8:	fa93 f3a3 	rbit	r3, r3
 8103bdc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8103bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8103be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103be4:	2b00      	cmp	r3, #0
 8103be6:	d101      	bne.n	8103bec <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8103be8:	2320      	movs	r3, #32
 8103bea:	e003      	b.n	8103bf4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8103bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103bee:	fab3 f383 	clz	r3, r3
 8103bf2:	b2db      	uxtb	r3, r3
 8103bf4:	3301      	adds	r3, #1
 8103bf6:	f003 031f 	and.w	r3, r3, #31
 8103bfa:	2b09      	cmp	r3, #9
 8103bfc:	bf94      	ite	ls
 8103bfe:	2301      	movls	r3, #1
 8103c00:	2300      	movhi	r3, #0
 8103c02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103c04:	2b00      	cmp	r3, #0
 8103c06:	d079      	beq.n	8103cfc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103c08:	683b      	ldr	r3, [r7, #0]
 8103c0a:	681b      	ldr	r3, [r3, #0]
 8103c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103c10:	2b00      	cmp	r3, #0
 8103c12:	d107      	bne.n	8103c24 <HAL_ADC_ConfigChannel+0x2ec>
 8103c14:	683b      	ldr	r3, [r7, #0]
 8103c16:	681b      	ldr	r3, [r3, #0]
 8103c18:	0e9b      	lsrs	r3, r3, #26
 8103c1a:	3301      	adds	r3, #1
 8103c1c:	069b      	lsls	r3, r3, #26
 8103c1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103c22:	e015      	b.n	8103c50 <HAL_ADC_ConfigChannel+0x318>
 8103c24:	683b      	ldr	r3, [r7, #0]
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103c2c:	fa93 f3a3 	rbit	r3, r3
 8103c30:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8103c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103c34:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8103c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103c38:	2b00      	cmp	r3, #0
 8103c3a:	d101      	bne.n	8103c40 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8103c3c:	2320      	movs	r3, #32
 8103c3e:	e003      	b.n	8103c48 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8103c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103c42:	fab3 f383 	clz	r3, r3
 8103c46:	b2db      	uxtb	r3, r3
 8103c48:	3301      	adds	r3, #1
 8103c4a:	069b      	lsls	r3, r3, #26
 8103c4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103c50:	683b      	ldr	r3, [r7, #0]
 8103c52:	681b      	ldr	r3, [r3, #0]
 8103c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103c58:	2b00      	cmp	r3, #0
 8103c5a:	d109      	bne.n	8103c70 <HAL_ADC_ConfigChannel+0x338>
 8103c5c:	683b      	ldr	r3, [r7, #0]
 8103c5e:	681b      	ldr	r3, [r3, #0]
 8103c60:	0e9b      	lsrs	r3, r3, #26
 8103c62:	3301      	adds	r3, #1
 8103c64:	f003 031f 	and.w	r3, r3, #31
 8103c68:	2101      	movs	r1, #1
 8103c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8103c6e:	e017      	b.n	8103ca0 <HAL_ADC_ConfigChannel+0x368>
 8103c70:	683b      	ldr	r3, [r7, #0]
 8103c72:	681b      	ldr	r3, [r3, #0]
 8103c74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103c78:	fa93 f3a3 	rbit	r3, r3
 8103c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8103c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103c80:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8103c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103c84:	2b00      	cmp	r3, #0
 8103c86:	d101      	bne.n	8103c8c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8103c88:	2320      	movs	r3, #32
 8103c8a:	e003      	b.n	8103c94 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8103c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103c8e:	fab3 f383 	clz	r3, r3
 8103c92:	b2db      	uxtb	r3, r3
 8103c94:	3301      	adds	r3, #1
 8103c96:	f003 031f 	and.w	r3, r3, #31
 8103c9a:	2101      	movs	r1, #1
 8103c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8103ca0:	ea42 0103 	orr.w	r1, r2, r3
 8103ca4:	683b      	ldr	r3, [r7, #0]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103cac:	2b00      	cmp	r3, #0
 8103cae:	d10a      	bne.n	8103cc6 <HAL_ADC_ConfigChannel+0x38e>
 8103cb0:	683b      	ldr	r3, [r7, #0]
 8103cb2:	681b      	ldr	r3, [r3, #0]
 8103cb4:	0e9b      	lsrs	r3, r3, #26
 8103cb6:	3301      	adds	r3, #1
 8103cb8:	f003 021f 	and.w	r2, r3, #31
 8103cbc:	4613      	mov	r3, r2
 8103cbe:	005b      	lsls	r3, r3, #1
 8103cc0:	4413      	add	r3, r2
 8103cc2:	051b      	lsls	r3, r3, #20
 8103cc4:	e018      	b.n	8103cf8 <HAL_ADC_ConfigChannel+0x3c0>
 8103cc6:	683b      	ldr	r3, [r7, #0]
 8103cc8:	681b      	ldr	r3, [r3, #0]
 8103cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103cce:	fa93 f3a3 	rbit	r3, r3
 8103cd2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8103cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8103cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103cda:	2b00      	cmp	r3, #0
 8103cdc:	d101      	bne.n	8103ce2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8103cde:	2320      	movs	r3, #32
 8103ce0:	e003      	b.n	8103cea <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8103ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103ce4:	fab3 f383 	clz	r3, r3
 8103ce8:	b2db      	uxtb	r3, r3
 8103cea:	3301      	adds	r3, #1
 8103cec:	f003 021f 	and.w	r2, r3, #31
 8103cf0:	4613      	mov	r3, r2
 8103cf2:	005b      	lsls	r3, r3, #1
 8103cf4:	4413      	add	r3, r2
 8103cf6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103cf8:	430b      	orrs	r3, r1
 8103cfa:	e07e      	b.n	8103dfa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103cfc:	683b      	ldr	r3, [r7, #0]
 8103cfe:	681b      	ldr	r3, [r3, #0]
 8103d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103d04:	2b00      	cmp	r3, #0
 8103d06:	d107      	bne.n	8103d18 <HAL_ADC_ConfigChannel+0x3e0>
 8103d08:	683b      	ldr	r3, [r7, #0]
 8103d0a:	681b      	ldr	r3, [r3, #0]
 8103d0c:	0e9b      	lsrs	r3, r3, #26
 8103d0e:	3301      	adds	r3, #1
 8103d10:	069b      	lsls	r3, r3, #26
 8103d12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103d16:	e015      	b.n	8103d44 <HAL_ADC_ConfigChannel+0x40c>
 8103d18:	683b      	ldr	r3, [r7, #0]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103d20:	fa93 f3a3 	rbit	r3, r3
 8103d24:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8103d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8103d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103d2c:	2b00      	cmp	r3, #0
 8103d2e:	d101      	bne.n	8103d34 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8103d30:	2320      	movs	r3, #32
 8103d32:	e003      	b.n	8103d3c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8103d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103d36:	fab3 f383 	clz	r3, r3
 8103d3a:	b2db      	uxtb	r3, r3
 8103d3c:	3301      	adds	r3, #1
 8103d3e:	069b      	lsls	r3, r3, #26
 8103d40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103d44:	683b      	ldr	r3, [r7, #0]
 8103d46:	681b      	ldr	r3, [r3, #0]
 8103d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103d4c:	2b00      	cmp	r3, #0
 8103d4e:	d109      	bne.n	8103d64 <HAL_ADC_ConfigChannel+0x42c>
 8103d50:	683b      	ldr	r3, [r7, #0]
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	0e9b      	lsrs	r3, r3, #26
 8103d56:	3301      	adds	r3, #1
 8103d58:	f003 031f 	and.w	r3, r3, #31
 8103d5c:	2101      	movs	r1, #1
 8103d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8103d62:	e017      	b.n	8103d94 <HAL_ADC_ConfigChannel+0x45c>
 8103d64:	683b      	ldr	r3, [r7, #0]
 8103d66:	681b      	ldr	r3, [r3, #0]
 8103d68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103d6a:	69fb      	ldr	r3, [r7, #28]
 8103d6c:	fa93 f3a3 	rbit	r3, r3
 8103d70:	61bb      	str	r3, [r7, #24]
  return result;
 8103d72:	69bb      	ldr	r3, [r7, #24]
 8103d74:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8103d76:	6a3b      	ldr	r3, [r7, #32]
 8103d78:	2b00      	cmp	r3, #0
 8103d7a:	d101      	bne.n	8103d80 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8103d7c:	2320      	movs	r3, #32
 8103d7e:	e003      	b.n	8103d88 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103d80:	6a3b      	ldr	r3, [r7, #32]
 8103d82:	fab3 f383 	clz	r3, r3
 8103d86:	b2db      	uxtb	r3, r3
 8103d88:	3301      	adds	r3, #1
 8103d8a:	f003 031f 	and.w	r3, r3, #31
 8103d8e:	2101      	movs	r1, #1
 8103d90:	fa01 f303 	lsl.w	r3, r1, r3
 8103d94:	ea42 0103 	orr.w	r1, r2, r3
 8103d98:	683b      	ldr	r3, [r7, #0]
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103da0:	2b00      	cmp	r3, #0
 8103da2:	d10d      	bne.n	8103dc0 <HAL_ADC_ConfigChannel+0x488>
 8103da4:	683b      	ldr	r3, [r7, #0]
 8103da6:	681b      	ldr	r3, [r3, #0]
 8103da8:	0e9b      	lsrs	r3, r3, #26
 8103daa:	3301      	adds	r3, #1
 8103dac:	f003 021f 	and.w	r2, r3, #31
 8103db0:	4613      	mov	r3, r2
 8103db2:	005b      	lsls	r3, r3, #1
 8103db4:	4413      	add	r3, r2
 8103db6:	3b1e      	subs	r3, #30
 8103db8:	051b      	lsls	r3, r3, #20
 8103dba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103dbe:	e01b      	b.n	8103df8 <HAL_ADC_ConfigChannel+0x4c0>
 8103dc0:	683b      	ldr	r3, [r7, #0]
 8103dc2:	681b      	ldr	r3, [r3, #0]
 8103dc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103dc6:	693b      	ldr	r3, [r7, #16]
 8103dc8:	fa93 f3a3 	rbit	r3, r3
 8103dcc:	60fb      	str	r3, [r7, #12]
  return result;
 8103dce:	68fb      	ldr	r3, [r7, #12]
 8103dd0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103dd2:	697b      	ldr	r3, [r7, #20]
 8103dd4:	2b00      	cmp	r3, #0
 8103dd6:	d101      	bne.n	8103ddc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8103dd8:	2320      	movs	r3, #32
 8103dda:	e003      	b.n	8103de4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8103ddc:	697b      	ldr	r3, [r7, #20]
 8103dde:	fab3 f383 	clz	r3, r3
 8103de2:	b2db      	uxtb	r3, r3
 8103de4:	3301      	adds	r3, #1
 8103de6:	f003 021f 	and.w	r2, r3, #31
 8103dea:	4613      	mov	r3, r2
 8103dec:	005b      	lsls	r3, r3, #1
 8103dee:	4413      	add	r3, r2
 8103df0:	3b1e      	subs	r3, #30
 8103df2:	051b      	lsls	r3, r3, #20
 8103df4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103df8:	430b      	orrs	r3, r1
 8103dfa:	683a      	ldr	r2, [r7, #0]
 8103dfc:	6892      	ldr	r2, [r2, #8]
 8103dfe:	4619      	mov	r1, r3
 8103e00:	f7ff fb20 	bl	8103444 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103e04:	683b      	ldr	r3, [r7, #0]
 8103e06:	681b      	ldr	r3, [r3, #0]
 8103e08:	2b00      	cmp	r3, #0
 8103e0a:	f280 80c6 	bge.w	8103f9a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	681b      	ldr	r3, [r3, #0]
 8103e12:	4a67      	ldr	r2, [pc, #412]	; (8103fb0 <HAL_ADC_ConfigChannel+0x678>)
 8103e14:	4293      	cmp	r3, r2
 8103e16:	d004      	beq.n	8103e22 <HAL_ADC_ConfigChannel+0x4ea>
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	681b      	ldr	r3, [r3, #0]
 8103e1c:	4a65      	ldr	r2, [pc, #404]	; (8103fb4 <HAL_ADC_ConfigChannel+0x67c>)
 8103e1e:	4293      	cmp	r3, r2
 8103e20:	d101      	bne.n	8103e26 <HAL_ADC_ConfigChannel+0x4ee>
 8103e22:	4b65      	ldr	r3, [pc, #404]	; (8103fb8 <HAL_ADC_ConfigChannel+0x680>)
 8103e24:	e000      	b.n	8103e28 <HAL_ADC_ConfigChannel+0x4f0>
 8103e26:	4b65      	ldr	r3, [pc, #404]	; (8103fbc <HAL_ADC_ConfigChannel+0x684>)
 8103e28:	4618      	mov	r0, r3
 8103e2a:	f7ff fa7d 	bl	8103328 <LL_ADC_GetCommonPathInternalCh>
 8103e2e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	681b      	ldr	r3, [r3, #0]
 8103e34:	4a5e      	ldr	r2, [pc, #376]	; (8103fb0 <HAL_ADC_ConfigChannel+0x678>)
 8103e36:	4293      	cmp	r3, r2
 8103e38:	d004      	beq.n	8103e44 <HAL_ADC_ConfigChannel+0x50c>
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	681b      	ldr	r3, [r3, #0]
 8103e3e:	4a5d      	ldr	r2, [pc, #372]	; (8103fb4 <HAL_ADC_ConfigChannel+0x67c>)
 8103e40:	4293      	cmp	r3, r2
 8103e42:	d10e      	bne.n	8103e62 <HAL_ADC_ConfigChannel+0x52a>
 8103e44:	485a      	ldr	r0, [pc, #360]	; (8103fb0 <HAL_ADC_ConfigChannel+0x678>)
 8103e46:	f7ff fb9b 	bl	8103580 <LL_ADC_IsEnabled>
 8103e4a:	4604      	mov	r4, r0
 8103e4c:	4859      	ldr	r0, [pc, #356]	; (8103fb4 <HAL_ADC_ConfigChannel+0x67c>)
 8103e4e:	f7ff fb97 	bl	8103580 <LL_ADC_IsEnabled>
 8103e52:	4603      	mov	r3, r0
 8103e54:	4323      	orrs	r3, r4
 8103e56:	2b00      	cmp	r3, #0
 8103e58:	bf0c      	ite	eq
 8103e5a:	2301      	moveq	r3, #1
 8103e5c:	2300      	movne	r3, #0
 8103e5e:	b2db      	uxtb	r3, r3
 8103e60:	e008      	b.n	8103e74 <HAL_ADC_ConfigChannel+0x53c>
 8103e62:	4857      	ldr	r0, [pc, #348]	; (8103fc0 <HAL_ADC_ConfigChannel+0x688>)
 8103e64:	f7ff fb8c 	bl	8103580 <LL_ADC_IsEnabled>
 8103e68:	4603      	mov	r3, r0
 8103e6a:	2b00      	cmp	r3, #0
 8103e6c:	bf0c      	ite	eq
 8103e6e:	2301      	moveq	r3, #1
 8103e70:	2300      	movne	r3, #0
 8103e72:	b2db      	uxtb	r3, r3
 8103e74:	2b00      	cmp	r3, #0
 8103e76:	d07d      	beq.n	8103f74 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103e78:	683b      	ldr	r3, [r7, #0]
 8103e7a:	681b      	ldr	r3, [r3, #0]
 8103e7c:	4a51      	ldr	r2, [pc, #324]	; (8103fc4 <HAL_ADC_ConfigChannel+0x68c>)
 8103e7e:	4293      	cmp	r3, r2
 8103e80:	d130      	bne.n	8103ee4 <HAL_ADC_ConfigChannel+0x5ac>
 8103e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103e88:	2b00      	cmp	r3, #0
 8103e8a:	d12b      	bne.n	8103ee4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103e8c:	687b      	ldr	r3, [r7, #4]
 8103e8e:	681b      	ldr	r3, [r3, #0]
 8103e90:	4a4b      	ldr	r2, [pc, #300]	; (8103fc0 <HAL_ADC_ConfigChannel+0x688>)
 8103e92:	4293      	cmp	r3, r2
 8103e94:	f040 8081 	bne.w	8103f9a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103e98:	687b      	ldr	r3, [r7, #4]
 8103e9a:	681b      	ldr	r3, [r3, #0]
 8103e9c:	4a44      	ldr	r2, [pc, #272]	; (8103fb0 <HAL_ADC_ConfigChannel+0x678>)
 8103e9e:	4293      	cmp	r3, r2
 8103ea0:	d004      	beq.n	8103eac <HAL_ADC_ConfigChannel+0x574>
 8103ea2:	687b      	ldr	r3, [r7, #4]
 8103ea4:	681b      	ldr	r3, [r3, #0]
 8103ea6:	4a43      	ldr	r2, [pc, #268]	; (8103fb4 <HAL_ADC_ConfigChannel+0x67c>)
 8103ea8:	4293      	cmp	r3, r2
 8103eaa:	d101      	bne.n	8103eb0 <HAL_ADC_ConfigChannel+0x578>
 8103eac:	4a42      	ldr	r2, [pc, #264]	; (8103fb8 <HAL_ADC_ConfigChannel+0x680>)
 8103eae:	e000      	b.n	8103eb2 <HAL_ADC_ConfigChannel+0x57a>
 8103eb0:	4a42      	ldr	r2, [pc, #264]	; (8103fbc <HAL_ADC_ConfigChannel+0x684>)
 8103eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103eb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103eb8:	4619      	mov	r1, r3
 8103eba:	4610      	mov	r0, r2
 8103ebc:	f7ff fa21 	bl	8103302 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103ec0:	4b41      	ldr	r3, [pc, #260]	; (8103fc8 <HAL_ADC_ConfigChannel+0x690>)
 8103ec2:	681b      	ldr	r3, [r3, #0]
 8103ec4:	099b      	lsrs	r3, r3, #6
 8103ec6:	4a41      	ldr	r2, [pc, #260]	; (8103fcc <HAL_ADC_ConfigChannel+0x694>)
 8103ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8103ecc:	099b      	lsrs	r3, r3, #6
 8103ece:	3301      	adds	r3, #1
 8103ed0:	005b      	lsls	r3, r3, #1
 8103ed2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103ed4:	e002      	b.n	8103edc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8103ed6:	68bb      	ldr	r3, [r7, #8]
 8103ed8:	3b01      	subs	r3, #1
 8103eda:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103edc:	68bb      	ldr	r3, [r7, #8]
 8103ede:	2b00      	cmp	r3, #0
 8103ee0:	d1f9      	bne.n	8103ed6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103ee2:	e05a      	b.n	8103f9a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103ee4:	683b      	ldr	r3, [r7, #0]
 8103ee6:	681b      	ldr	r3, [r3, #0]
 8103ee8:	4a39      	ldr	r2, [pc, #228]	; (8103fd0 <HAL_ADC_ConfigChannel+0x698>)
 8103eea:	4293      	cmp	r3, r2
 8103eec:	d11e      	bne.n	8103f2c <HAL_ADC_ConfigChannel+0x5f4>
 8103eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103ef4:	2b00      	cmp	r3, #0
 8103ef6:	d119      	bne.n	8103f2c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	681b      	ldr	r3, [r3, #0]
 8103efc:	4a30      	ldr	r2, [pc, #192]	; (8103fc0 <HAL_ADC_ConfigChannel+0x688>)
 8103efe:	4293      	cmp	r3, r2
 8103f00:	d14b      	bne.n	8103f9a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103f02:	687b      	ldr	r3, [r7, #4]
 8103f04:	681b      	ldr	r3, [r3, #0]
 8103f06:	4a2a      	ldr	r2, [pc, #168]	; (8103fb0 <HAL_ADC_ConfigChannel+0x678>)
 8103f08:	4293      	cmp	r3, r2
 8103f0a:	d004      	beq.n	8103f16 <HAL_ADC_ConfigChannel+0x5de>
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	681b      	ldr	r3, [r3, #0]
 8103f10:	4a28      	ldr	r2, [pc, #160]	; (8103fb4 <HAL_ADC_ConfigChannel+0x67c>)
 8103f12:	4293      	cmp	r3, r2
 8103f14:	d101      	bne.n	8103f1a <HAL_ADC_ConfigChannel+0x5e2>
 8103f16:	4a28      	ldr	r2, [pc, #160]	; (8103fb8 <HAL_ADC_ConfigChannel+0x680>)
 8103f18:	e000      	b.n	8103f1c <HAL_ADC_ConfigChannel+0x5e4>
 8103f1a:	4a28      	ldr	r2, [pc, #160]	; (8103fbc <HAL_ADC_ConfigChannel+0x684>)
 8103f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103f22:	4619      	mov	r1, r3
 8103f24:	4610      	mov	r0, r2
 8103f26:	f7ff f9ec 	bl	8103302 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103f2a:	e036      	b.n	8103f9a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103f2c:	683b      	ldr	r3, [r7, #0]
 8103f2e:	681b      	ldr	r3, [r3, #0]
 8103f30:	4a28      	ldr	r2, [pc, #160]	; (8103fd4 <HAL_ADC_ConfigChannel+0x69c>)
 8103f32:	4293      	cmp	r3, r2
 8103f34:	d131      	bne.n	8103f9a <HAL_ADC_ConfigChannel+0x662>
 8103f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103f3c:	2b00      	cmp	r3, #0
 8103f3e:	d12c      	bne.n	8103f9a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	4a1e      	ldr	r2, [pc, #120]	; (8103fc0 <HAL_ADC_ConfigChannel+0x688>)
 8103f46:	4293      	cmp	r3, r2
 8103f48:	d127      	bne.n	8103f9a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103f4a:	687b      	ldr	r3, [r7, #4]
 8103f4c:	681b      	ldr	r3, [r3, #0]
 8103f4e:	4a18      	ldr	r2, [pc, #96]	; (8103fb0 <HAL_ADC_ConfigChannel+0x678>)
 8103f50:	4293      	cmp	r3, r2
 8103f52:	d004      	beq.n	8103f5e <HAL_ADC_ConfigChannel+0x626>
 8103f54:	687b      	ldr	r3, [r7, #4]
 8103f56:	681b      	ldr	r3, [r3, #0]
 8103f58:	4a16      	ldr	r2, [pc, #88]	; (8103fb4 <HAL_ADC_ConfigChannel+0x67c>)
 8103f5a:	4293      	cmp	r3, r2
 8103f5c:	d101      	bne.n	8103f62 <HAL_ADC_ConfigChannel+0x62a>
 8103f5e:	4a16      	ldr	r2, [pc, #88]	; (8103fb8 <HAL_ADC_ConfigChannel+0x680>)
 8103f60:	e000      	b.n	8103f64 <HAL_ADC_ConfigChannel+0x62c>
 8103f62:	4a16      	ldr	r2, [pc, #88]	; (8103fbc <HAL_ADC_ConfigChannel+0x684>)
 8103f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103f66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103f6a:	4619      	mov	r1, r3
 8103f6c:	4610      	mov	r0, r2
 8103f6e:	f7ff f9c8 	bl	8103302 <LL_ADC_SetCommonPathInternalCh>
 8103f72:	e012      	b.n	8103f9a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f78:	f043 0220 	orr.w	r2, r3, #32
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103f80:	2301      	movs	r3, #1
 8103f82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8103f86:	e008      	b.n	8103f9a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f8c:	f043 0220 	orr.w	r2, r3, #32
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103f94:	2301      	movs	r3, #1
 8103f96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103f9a:	687b      	ldr	r3, [r7, #4]
 8103f9c:	2200      	movs	r2, #0
 8103f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103fa2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103fa6:	4618      	mov	r0, r3
 8103fa8:	3784      	adds	r7, #132	; 0x84
 8103faa:	46bd      	mov	sp, r7
 8103fac:	bd90      	pop	{r4, r7, pc}
 8103fae:	bf00      	nop
 8103fb0:	40022000 	.word	0x40022000
 8103fb4:	40022100 	.word	0x40022100
 8103fb8:	40022300 	.word	0x40022300
 8103fbc:	58026300 	.word	0x58026300
 8103fc0:	58026000 	.word	0x58026000
 8103fc4:	cb840000 	.word	0xcb840000
 8103fc8:	10000000 	.word	0x10000000
 8103fcc:	053e2d63 	.word	0x053e2d63
 8103fd0:	c7520000 	.word	0xc7520000
 8103fd4:	cfb80000 	.word	0xcfb80000

08103fd8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103fd8:	b580      	push	{r7, lr}
 8103fda:	b084      	sub	sp, #16
 8103fdc:	af00      	add	r7, sp, #0
 8103fde:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103fe0:	687b      	ldr	r3, [r7, #4]
 8103fe2:	681b      	ldr	r3, [r3, #0]
 8103fe4:	4a79      	ldr	r2, [pc, #484]	; (81041cc <ADC_ConfigureBoostMode+0x1f4>)
 8103fe6:	4293      	cmp	r3, r2
 8103fe8:	d004      	beq.n	8103ff4 <ADC_ConfigureBoostMode+0x1c>
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	681b      	ldr	r3, [r3, #0]
 8103fee:	4a78      	ldr	r2, [pc, #480]	; (81041d0 <ADC_ConfigureBoostMode+0x1f8>)
 8103ff0:	4293      	cmp	r3, r2
 8103ff2:	d109      	bne.n	8104008 <ADC_ConfigureBoostMode+0x30>
 8103ff4:	4b77      	ldr	r3, [pc, #476]	; (81041d4 <ADC_ConfigureBoostMode+0x1fc>)
 8103ff6:	689b      	ldr	r3, [r3, #8]
 8103ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103ffc:	2b00      	cmp	r3, #0
 8103ffe:	bf14      	ite	ne
 8104000:	2301      	movne	r3, #1
 8104002:	2300      	moveq	r3, #0
 8104004:	b2db      	uxtb	r3, r3
 8104006:	e008      	b.n	810401a <ADC_ConfigureBoostMode+0x42>
 8104008:	4b73      	ldr	r3, [pc, #460]	; (81041d8 <ADC_ConfigureBoostMode+0x200>)
 810400a:	689b      	ldr	r3, [r3, #8]
 810400c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8104010:	2b00      	cmp	r3, #0
 8104012:	bf14      	ite	ne
 8104014:	2301      	movne	r3, #1
 8104016:	2300      	moveq	r3, #0
 8104018:	b2db      	uxtb	r3, r3
 810401a:	2b00      	cmp	r3, #0
 810401c:	d01c      	beq.n	8104058 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 810401e:	f001 fd4b 	bl	8105ab8 <HAL_RCC_GetHCLKFreq>
 8104022:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	685b      	ldr	r3, [r3, #4]
 8104028:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810402c:	d010      	beq.n	8104050 <ADC_ConfigureBoostMode+0x78>
 810402e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104032:	d871      	bhi.n	8104118 <ADC_ConfigureBoostMode+0x140>
 8104034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104038:	d002      	beq.n	8104040 <ADC_ConfigureBoostMode+0x68>
 810403a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810403e:	d16b      	bne.n	8104118 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	685b      	ldr	r3, [r3, #4]
 8104044:	0c1b      	lsrs	r3, r3, #16
 8104046:	68fa      	ldr	r2, [r7, #12]
 8104048:	fbb2 f3f3 	udiv	r3, r2, r3
 810404c:	60fb      	str	r3, [r7, #12]
        break;
 810404e:	e066      	b.n	810411e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8104050:	68fb      	ldr	r3, [r7, #12]
 8104052:	089b      	lsrs	r3, r3, #2
 8104054:	60fb      	str	r3, [r7, #12]
        break;
 8104056:	e062      	b.n	810411e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8104058:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 810405c:	f002 fcd0 	bl	8106a00 <HAL_RCCEx_GetPeriphCLKFreq>
 8104060:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8104062:	687b      	ldr	r3, [r7, #4]
 8104064:	685b      	ldr	r3, [r3, #4]
 8104066:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 810406a:	d051      	beq.n	8104110 <ADC_ConfigureBoostMode+0x138>
 810406c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8104070:	d854      	bhi.n	810411c <ADC_ConfigureBoostMode+0x144>
 8104072:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8104076:	d047      	beq.n	8104108 <ADC_ConfigureBoostMode+0x130>
 8104078:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810407c:	d84e      	bhi.n	810411c <ADC_ConfigureBoostMode+0x144>
 810407e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8104082:	d03d      	beq.n	8104100 <ADC_ConfigureBoostMode+0x128>
 8104084:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8104088:	d848      	bhi.n	810411c <ADC_ConfigureBoostMode+0x144>
 810408a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810408e:	d033      	beq.n	81040f8 <ADC_ConfigureBoostMode+0x120>
 8104090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104094:	d842      	bhi.n	810411c <ADC_ConfigureBoostMode+0x144>
 8104096:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810409a:	d029      	beq.n	81040f0 <ADC_ConfigureBoostMode+0x118>
 810409c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 81040a0:	d83c      	bhi.n	810411c <ADC_ConfigureBoostMode+0x144>
 81040a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81040a6:	d01a      	beq.n	81040de <ADC_ConfigureBoostMode+0x106>
 81040a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81040ac:	d836      	bhi.n	810411c <ADC_ConfigureBoostMode+0x144>
 81040ae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81040b2:	d014      	beq.n	81040de <ADC_ConfigureBoostMode+0x106>
 81040b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81040b8:	d830      	bhi.n	810411c <ADC_ConfigureBoostMode+0x144>
 81040ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81040be:	d00e      	beq.n	81040de <ADC_ConfigureBoostMode+0x106>
 81040c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81040c4:	d82a      	bhi.n	810411c <ADC_ConfigureBoostMode+0x144>
 81040c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81040ca:	d008      	beq.n	81040de <ADC_ConfigureBoostMode+0x106>
 81040cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81040d0:	d824      	bhi.n	810411c <ADC_ConfigureBoostMode+0x144>
 81040d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81040d6:	d002      	beq.n	81040de <ADC_ConfigureBoostMode+0x106>
 81040d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81040dc:	d11e      	bne.n	810411c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81040de:	687b      	ldr	r3, [r7, #4]
 81040e0:	685b      	ldr	r3, [r3, #4]
 81040e2:	0c9b      	lsrs	r3, r3, #18
 81040e4:	005b      	lsls	r3, r3, #1
 81040e6:	68fa      	ldr	r2, [r7, #12]
 81040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 81040ec:	60fb      	str	r3, [r7, #12]
        break;
 81040ee:	e016      	b.n	810411e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 81040f0:	68fb      	ldr	r3, [r7, #12]
 81040f2:	091b      	lsrs	r3, r3, #4
 81040f4:	60fb      	str	r3, [r7, #12]
        break;
 81040f6:	e012      	b.n	810411e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 81040f8:	68fb      	ldr	r3, [r7, #12]
 81040fa:	095b      	lsrs	r3, r3, #5
 81040fc:	60fb      	str	r3, [r7, #12]
        break;
 81040fe:	e00e      	b.n	810411e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8104100:	68fb      	ldr	r3, [r7, #12]
 8104102:	099b      	lsrs	r3, r3, #6
 8104104:	60fb      	str	r3, [r7, #12]
        break;
 8104106:	e00a      	b.n	810411e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8104108:	68fb      	ldr	r3, [r7, #12]
 810410a:	09db      	lsrs	r3, r3, #7
 810410c:	60fb      	str	r3, [r7, #12]
        break;
 810410e:	e006      	b.n	810411e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8104110:	68fb      	ldr	r3, [r7, #12]
 8104112:	0a1b      	lsrs	r3, r3, #8
 8104114:	60fb      	str	r3, [r7, #12]
        break;
 8104116:	e002      	b.n	810411e <ADC_ConfigureBoostMode+0x146>
        break;
 8104118:	bf00      	nop
 810411a:	e000      	b.n	810411e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 810411c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 810411e:	f7ff f8d1 	bl	81032c4 <HAL_GetREVID>
 8104122:	4603      	mov	r3, r0
 8104124:	f241 0203 	movw	r2, #4099	; 0x1003
 8104128:	4293      	cmp	r3, r2
 810412a:	d815      	bhi.n	8104158 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 810412c:	68fb      	ldr	r3, [r7, #12]
 810412e:	4a2b      	ldr	r2, [pc, #172]	; (81041dc <ADC_ConfigureBoostMode+0x204>)
 8104130:	4293      	cmp	r3, r2
 8104132:	d908      	bls.n	8104146 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	681b      	ldr	r3, [r3, #0]
 8104138:	689a      	ldr	r2, [r3, #8]
 810413a:	687b      	ldr	r3, [r7, #4]
 810413c:	681b      	ldr	r3, [r3, #0]
 810413e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104142:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8104144:	e03e      	b.n	81041c4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8104146:	687b      	ldr	r3, [r7, #4]
 8104148:	681b      	ldr	r3, [r3, #0]
 810414a:	689a      	ldr	r2, [r3, #8]
 810414c:	687b      	ldr	r3, [r7, #4]
 810414e:	681b      	ldr	r3, [r3, #0]
 8104150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104154:	609a      	str	r2, [r3, #8]
}
 8104156:	e035      	b.n	81041c4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8104158:	68fb      	ldr	r3, [r7, #12]
 810415a:	085b      	lsrs	r3, r3, #1
 810415c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 810415e:	68fb      	ldr	r3, [r7, #12]
 8104160:	4a1f      	ldr	r2, [pc, #124]	; (81041e0 <ADC_ConfigureBoostMode+0x208>)
 8104162:	4293      	cmp	r3, r2
 8104164:	d808      	bhi.n	8104178 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	681b      	ldr	r3, [r3, #0]
 810416a:	689a      	ldr	r2, [r3, #8]
 810416c:	687b      	ldr	r3, [r7, #4]
 810416e:	681b      	ldr	r3, [r3, #0]
 8104170:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8104174:	609a      	str	r2, [r3, #8]
}
 8104176:	e025      	b.n	81041c4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8104178:	68fb      	ldr	r3, [r7, #12]
 810417a:	4a1a      	ldr	r2, [pc, #104]	; (81041e4 <ADC_ConfigureBoostMode+0x20c>)
 810417c:	4293      	cmp	r3, r2
 810417e:	d80a      	bhi.n	8104196 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8104180:	687b      	ldr	r3, [r7, #4]
 8104182:	681b      	ldr	r3, [r3, #0]
 8104184:	689b      	ldr	r3, [r3, #8]
 8104186:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810418a:	687b      	ldr	r3, [r7, #4]
 810418c:	681b      	ldr	r3, [r3, #0]
 810418e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104192:	609a      	str	r2, [r3, #8]
}
 8104194:	e016      	b.n	81041c4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8104196:	68fb      	ldr	r3, [r7, #12]
 8104198:	4a13      	ldr	r2, [pc, #76]	; (81041e8 <ADC_ConfigureBoostMode+0x210>)
 810419a:	4293      	cmp	r3, r2
 810419c:	d80a      	bhi.n	81041b4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	681b      	ldr	r3, [r3, #0]
 81041a2:	689b      	ldr	r3, [r3, #8]
 81041a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81041a8:	687b      	ldr	r3, [r7, #4]
 81041aa:	681b      	ldr	r3, [r3, #0]
 81041ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81041b0:	609a      	str	r2, [r3, #8]
}
 81041b2:	e007      	b.n	81041c4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81041b4:	687b      	ldr	r3, [r7, #4]
 81041b6:	681b      	ldr	r3, [r3, #0]
 81041b8:	689a      	ldr	r2, [r3, #8]
 81041ba:	687b      	ldr	r3, [r7, #4]
 81041bc:	681b      	ldr	r3, [r3, #0]
 81041be:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 81041c2:	609a      	str	r2, [r3, #8]
}
 81041c4:	bf00      	nop
 81041c6:	3710      	adds	r7, #16
 81041c8:	46bd      	mov	sp, r7
 81041ca:	bd80      	pop	{r7, pc}
 81041cc:	40022000 	.word	0x40022000
 81041d0:	40022100 	.word	0x40022100
 81041d4:	40022300 	.word	0x40022300
 81041d8:	58026300 	.word	0x58026300
 81041dc:	01312d00 	.word	0x01312d00
 81041e0:	005f5e10 	.word	0x005f5e10
 81041e4:	00bebc20 	.word	0x00bebc20
 81041e8:	017d7840 	.word	0x017d7840

081041ec <LL_ADC_IsEnabled>:
{
 81041ec:	b480      	push	{r7}
 81041ee:	b083      	sub	sp, #12
 81041f0:	af00      	add	r7, sp, #0
 81041f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	689b      	ldr	r3, [r3, #8]
 81041f8:	f003 0301 	and.w	r3, r3, #1
 81041fc:	2b01      	cmp	r3, #1
 81041fe:	d101      	bne.n	8104204 <LL_ADC_IsEnabled+0x18>
 8104200:	2301      	movs	r3, #1
 8104202:	e000      	b.n	8104206 <LL_ADC_IsEnabled+0x1a>
 8104204:	2300      	movs	r3, #0
}
 8104206:	4618      	mov	r0, r3
 8104208:	370c      	adds	r7, #12
 810420a:	46bd      	mov	sp, r7
 810420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104210:	4770      	bx	lr

08104212 <LL_ADC_REG_IsConversionOngoing>:
{
 8104212:	b480      	push	{r7}
 8104214:	b083      	sub	sp, #12
 8104216:	af00      	add	r7, sp, #0
 8104218:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810421a:	687b      	ldr	r3, [r7, #4]
 810421c:	689b      	ldr	r3, [r3, #8]
 810421e:	f003 0304 	and.w	r3, r3, #4
 8104222:	2b04      	cmp	r3, #4
 8104224:	d101      	bne.n	810422a <LL_ADC_REG_IsConversionOngoing+0x18>
 8104226:	2301      	movs	r3, #1
 8104228:	e000      	b.n	810422c <LL_ADC_REG_IsConversionOngoing+0x1a>
 810422a:	2300      	movs	r3, #0
}
 810422c:	4618      	mov	r0, r3
 810422e:	370c      	adds	r7, #12
 8104230:	46bd      	mov	sp, r7
 8104232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104236:	4770      	bx	lr

08104238 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8104238:	b590      	push	{r4, r7, lr}
 810423a:	b09f      	sub	sp, #124	; 0x7c
 810423c:	af00      	add	r7, sp, #0
 810423e:	6078      	str	r0, [r7, #4]
 8104240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104242:	2300      	movs	r3, #0
 8104244:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810424e:	2b01      	cmp	r3, #1
 8104250:	d101      	bne.n	8104256 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8104252:	2302      	movs	r3, #2
 8104254:	e0c4      	b.n	81043e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8104256:	687b      	ldr	r3, [r7, #4]
 8104258:	2201      	movs	r2, #1
 810425a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810425e:	2300      	movs	r3, #0
 8104260:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8104262:	2300      	movs	r3, #0
 8104264:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8104266:	687b      	ldr	r3, [r7, #4]
 8104268:	681b      	ldr	r3, [r3, #0]
 810426a:	4a5f      	ldr	r2, [pc, #380]	; (81043e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810426c:	4293      	cmp	r3, r2
 810426e:	d102      	bne.n	8104276 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8104270:	4b5e      	ldr	r3, [pc, #376]	; (81043ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104272:	60bb      	str	r3, [r7, #8]
 8104274:	e001      	b.n	810427a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8104276:	2300      	movs	r3, #0
 8104278:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 810427a:	68bb      	ldr	r3, [r7, #8]
 810427c:	2b00      	cmp	r3, #0
 810427e:	d10b      	bne.n	8104298 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104280:	687b      	ldr	r3, [r7, #4]
 8104282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104284:	f043 0220 	orr.w	r2, r3, #32
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	2200      	movs	r2, #0
 8104290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8104294:	2301      	movs	r3, #1
 8104296:	e0a3      	b.n	81043e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8104298:	68bb      	ldr	r3, [r7, #8]
 810429a:	4618      	mov	r0, r3
 810429c:	f7ff ffb9 	bl	8104212 <LL_ADC_REG_IsConversionOngoing>
 81042a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81042a2:	687b      	ldr	r3, [r7, #4]
 81042a4:	681b      	ldr	r3, [r3, #0]
 81042a6:	4618      	mov	r0, r3
 81042a8:	f7ff ffb3 	bl	8104212 <LL_ADC_REG_IsConversionOngoing>
 81042ac:	4603      	mov	r3, r0
 81042ae:	2b00      	cmp	r3, #0
 81042b0:	f040 8085 	bne.w	81043be <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81042b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81042b6:	2b00      	cmp	r3, #0
 81042b8:	f040 8081 	bne.w	81043be <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81042bc:	687b      	ldr	r3, [r7, #4]
 81042be:	681b      	ldr	r3, [r3, #0]
 81042c0:	4a49      	ldr	r2, [pc, #292]	; (81043e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81042c2:	4293      	cmp	r3, r2
 81042c4:	d004      	beq.n	81042d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	4a48      	ldr	r2, [pc, #288]	; (81043ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81042cc:	4293      	cmp	r3, r2
 81042ce:	d101      	bne.n	81042d4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 81042d0:	4b47      	ldr	r3, [pc, #284]	; (81043f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 81042d2:	e000      	b.n	81042d6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 81042d4:	4b47      	ldr	r3, [pc, #284]	; (81043f4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 81042d6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81042d8:	683b      	ldr	r3, [r7, #0]
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	2b00      	cmp	r3, #0
 81042de:	d03b      	beq.n	8104358 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81042e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81042e2:	689b      	ldr	r3, [r3, #8]
 81042e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81042e8:	683b      	ldr	r3, [r7, #0]
 81042ea:	685b      	ldr	r3, [r3, #4]
 81042ec:	431a      	orrs	r2, r3
 81042ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81042f0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	4a3c      	ldr	r2, [pc, #240]	; (81043e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81042f8:	4293      	cmp	r3, r2
 81042fa:	d004      	beq.n	8104306 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	681b      	ldr	r3, [r3, #0]
 8104300:	4a3a      	ldr	r2, [pc, #232]	; (81043ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104302:	4293      	cmp	r3, r2
 8104304:	d10e      	bne.n	8104324 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8104306:	4838      	ldr	r0, [pc, #224]	; (81043e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104308:	f7ff ff70 	bl	81041ec <LL_ADC_IsEnabled>
 810430c:	4604      	mov	r4, r0
 810430e:	4837      	ldr	r0, [pc, #220]	; (81043ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104310:	f7ff ff6c 	bl	81041ec <LL_ADC_IsEnabled>
 8104314:	4603      	mov	r3, r0
 8104316:	4323      	orrs	r3, r4
 8104318:	2b00      	cmp	r3, #0
 810431a:	bf0c      	ite	eq
 810431c:	2301      	moveq	r3, #1
 810431e:	2300      	movne	r3, #0
 8104320:	b2db      	uxtb	r3, r3
 8104322:	e008      	b.n	8104336 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8104324:	4834      	ldr	r0, [pc, #208]	; (81043f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104326:	f7ff ff61 	bl	81041ec <LL_ADC_IsEnabled>
 810432a:	4603      	mov	r3, r0
 810432c:	2b00      	cmp	r3, #0
 810432e:	bf0c      	ite	eq
 8104330:	2301      	moveq	r3, #1
 8104332:	2300      	movne	r3, #0
 8104334:	b2db      	uxtb	r3, r3
 8104336:	2b00      	cmp	r3, #0
 8104338:	d04b      	beq.n	81043d2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810433a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810433c:	689b      	ldr	r3, [r3, #8]
 810433e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8104342:	f023 030f 	bic.w	r3, r3, #15
 8104346:	683a      	ldr	r2, [r7, #0]
 8104348:	6811      	ldr	r1, [r2, #0]
 810434a:	683a      	ldr	r2, [r7, #0]
 810434c:	6892      	ldr	r2, [r2, #8]
 810434e:	430a      	orrs	r2, r1
 8104350:	431a      	orrs	r2, r3
 8104352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104354:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104356:	e03c      	b.n	81043d2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8104358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810435a:	689b      	ldr	r3, [r3, #8]
 810435c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8104360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104362:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	681b      	ldr	r3, [r3, #0]
 8104368:	4a1f      	ldr	r2, [pc, #124]	; (81043e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810436a:	4293      	cmp	r3, r2
 810436c:	d004      	beq.n	8104378 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	681b      	ldr	r3, [r3, #0]
 8104372:	4a1e      	ldr	r2, [pc, #120]	; (81043ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104374:	4293      	cmp	r3, r2
 8104376:	d10e      	bne.n	8104396 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8104378:	481b      	ldr	r0, [pc, #108]	; (81043e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810437a:	f7ff ff37 	bl	81041ec <LL_ADC_IsEnabled>
 810437e:	4604      	mov	r4, r0
 8104380:	481a      	ldr	r0, [pc, #104]	; (81043ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104382:	f7ff ff33 	bl	81041ec <LL_ADC_IsEnabled>
 8104386:	4603      	mov	r3, r0
 8104388:	4323      	orrs	r3, r4
 810438a:	2b00      	cmp	r3, #0
 810438c:	bf0c      	ite	eq
 810438e:	2301      	moveq	r3, #1
 8104390:	2300      	movne	r3, #0
 8104392:	b2db      	uxtb	r3, r3
 8104394:	e008      	b.n	81043a8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8104396:	4818      	ldr	r0, [pc, #96]	; (81043f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104398:	f7ff ff28 	bl	81041ec <LL_ADC_IsEnabled>
 810439c:	4603      	mov	r3, r0
 810439e:	2b00      	cmp	r3, #0
 81043a0:	bf0c      	ite	eq
 81043a2:	2301      	moveq	r3, #1
 81043a4:	2300      	movne	r3, #0
 81043a6:	b2db      	uxtb	r3, r3
 81043a8:	2b00      	cmp	r3, #0
 81043aa:	d012      	beq.n	81043d2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81043ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81043ae:	689b      	ldr	r3, [r3, #8]
 81043b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81043b4:	f023 030f 	bic.w	r3, r3, #15
 81043b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81043ba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81043bc:	e009      	b.n	81043d2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81043be:	687b      	ldr	r3, [r7, #4]
 81043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81043c2:	f043 0220 	orr.w	r2, r3, #32
 81043c6:	687b      	ldr	r3, [r7, #4]
 81043c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81043ca:	2301      	movs	r3, #1
 81043cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81043d0:	e000      	b.n	81043d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81043d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	2200      	movs	r2, #0
 81043d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81043dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 81043e0:	4618      	mov	r0, r3
 81043e2:	377c      	adds	r7, #124	; 0x7c
 81043e4:	46bd      	mov	sp, r7
 81043e6:	bd90      	pop	{r4, r7, pc}
 81043e8:	40022000 	.word	0x40022000
 81043ec:	40022100 	.word	0x40022100
 81043f0:	40022300 	.word	0x40022300
 81043f4:	58026300 	.word	0x58026300
 81043f8:	58026000 	.word	0x58026000

081043fc <__NVIC_SetPriorityGrouping>:
{
 81043fc:	b480      	push	{r7}
 81043fe:	b085      	sub	sp, #20
 8104400:	af00      	add	r7, sp, #0
 8104402:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104404:	687b      	ldr	r3, [r7, #4]
 8104406:	f003 0307 	and.w	r3, r3, #7
 810440a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810440c:	4b0c      	ldr	r3, [pc, #48]	; (8104440 <__NVIC_SetPriorityGrouping+0x44>)
 810440e:	68db      	ldr	r3, [r3, #12]
 8104410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8104412:	68ba      	ldr	r2, [r7, #8]
 8104414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8104418:	4013      	ands	r3, r2
 810441a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810441c:	68fb      	ldr	r3, [r7, #12]
 810441e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104420:	68bb      	ldr	r3, [r7, #8]
 8104422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8104428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810442c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810442e:	4a04      	ldr	r2, [pc, #16]	; (8104440 <__NVIC_SetPriorityGrouping+0x44>)
 8104430:	68bb      	ldr	r3, [r7, #8]
 8104432:	60d3      	str	r3, [r2, #12]
}
 8104434:	bf00      	nop
 8104436:	3714      	adds	r7, #20
 8104438:	46bd      	mov	sp, r7
 810443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810443e:	4770      	bx	lr
 8104440:	e000ed00 	.word	0xe000ed00

08104444 <__NVIC_GetPriorityGrouping>:
{
 8104444:	b480      	push	{r7}
 8104446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104448:	4b04      	ldr	r3, [pc, #16]	; (810445c <__NVIC_GetPriorityGrouping+0x18>)
 810444a:	68db      	ldr	r3, [r3, #12]
 810444c:	0a1b      	lsrs	r3, r3, #8
 810444e:	f003 0307 	and.w	r3, r3, #7
}
 8104452:	4618      	mov	r0, r3
 8104454:	46bd      	mov	sp, r7
 8104456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810445a:	4770      	bx	lr
 810445c:	e000ed00 	.word	0xe000ed00

08104460 <__NVIC_EnableIRQ>:
{
 8104460:	b480      	push	{r7}
 8104462:	b083      	sub	sp, #12
 8104464:	af00      	add	r7, sp, #0
 8104466:	4603      	mov	r3, r0
 8104468:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810446a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810446e:	2b00      	cmp	r3, #0
 8104470:	db0b      	blt.n	810448a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8104472:	88fb      	ldrh	r3, [r7, #6]
 8104474:	f003 021f 	and.w	r2, r3, #31
 8104478:	4907      	ldr	r1, [pc, #28]	; (8104498 <__NVIC_EnableIRQ+0x38>)
 810447a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810447e:	095b      	lsrs	r3, r3, #5
 8104480:	2001      	movs	r0, #1
 8104482:	fa00 f202 	lsl.w	r2, r0, r2
 8104486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 810448a:	bf00      	nop
 810448c:	370c      	adds	r7, #12
 810448e:	46bd      	mov	sp, r7
 8104490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104494:	4770      	bx	lr
 8104496:	bf00      	nop
 8104498:	e000e100 	.word	0xe000e100

0810449c <__NVIC_SetPriority>:
{
 810449c:	b480      	push	{r7}
 810449e:	b083      	sub	sp, #12
 81044a0:	af00      	add	r7, sp, #0
 81044a2:	4603      	mov	r3, r0
 81044a4:	6039      	str	r1, [r7, #0]
 81044a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81044a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81044ac:	2b00      	cmp	r3, #0
 81044ae:	db0a      	blt.n	81044c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81044b0:	683b      	ldr	r3, [r7, #0]
 81044b2:	b2da      	uxtb	r2, r3
 81044b4:	490c      	ldr	r1, [pc, #48]	; (81044e8 <__NVIC_SetPriority+0x4c>)
 81044b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81044ba:	0112      	lsls	r2, r2, #4
 81044bc:	b2d2      	uxtb	r2, r2
 81044be:	440b      	add	r3, r1
 81044c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 81044c4:	e00a      	b.n	81044dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81044c6:	683b      	ldr	r3, [r7, #0]
 81044c8:	b2da      	uxtb	r2, r3
 81044ca:	4908      	ldr	r1, [pc, #32]	; (81044ec <__NVIC_SetPriority+0x50>)
 81044cc:	88fb      	ldrh	r3, [r7, #6]
 81044ce:	f003 030f 	and.w	r3, r3, #15
 81044d2:	3b04      	subs	r3, #4
 81044d4:	0112      	lsls	r2, r2, #4
 81044d6:	b2d2      	uxtb	r2, r2
 81044d8:	440b      	add	r3, r1
 81044da:	761a      	strb	r2, [r3, #24]
}
 81044dc:	bf00      	nop
 81044de:	370c      	adds	r7, #12
 81044e0:	46bd      	mov	sp, r7
 81044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044e6:	4770      	bx	lr
 81044e8:	e000e100 	.word	0xe000e100
 81044ec:	e000ed00 	.word	0xe000ed00

081044f0 <NVIC_EncodePriority>:
{
 81044f0:	b480      	push	{r7}
 81044f2:	b089      	sub	sp, #36	; 0x24
 81044f4:	af00      	add	r7, sp, #0
 81044f6:	60f8      	str	r0, [r7, #12]
 81044f8:	60b9      	str	r1, [r7, #8]
 81044fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81044fc:	68fb      	ldr	r3, [r7, #12]
 81044fe:	f003 0307 	and.w	r3, r3, #7
 8104502:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104504:	69fb      	ldr	r3, [r7, #28]
 8104506:	f1c3 0307 	rsb	r3, r3, #7
 810450a:	2b04      	cmp	r3, #4
 810450c:	bf28      	it	cs
 810450e:	2304      	movcs	r3, #4
 8104510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8104512:	69fb      	ldr	r3, [r7, #28]
 8104514:	3304      	adds	r3, #4
 8104516:	2b06      	cmp	r3, #6
 8104518:	d902      	bls.n	8104520 <NVIC_EncodePriority+0x30>
 810451a:	69fb      	ldr	r3, [r7, #28]
 810451c:	3b03      	subs	r3, #3
 810451e:	e000      	b.n	8104522 <NVIC_EncodePriority+0x32>
 8104520:	2300      	movs	r3, #0
 8104522:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104524:	f04f 32ff 	mov.w	r2, #4294967295
 8104528:	69bb      	ldr	r3, [r7, #24]
 810452a:	fa02 f303 	lsl.w	r3, r2, r3
 810452e:	43da      	mvns	r2, r3
 8104530:	68bb      	ldr	r3, [r7, #8]
 8104532:	401a      	ands	r2, r3
 8104534:	697b      	ldr	r3, [r7, #20]
 8104536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104538:	f04f 31ff 	mov.w	r1, #4294967295
 810453c:	697b      	ldr	r3, [r7, #20]
 810453e:	fa01 f303 	lsl.w	r3, r1, r3
 8104542:	43d9      	mvns	r1, r3
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104548:	4313      	orrs	r3, r2
}
 810454a:	4618      	mov	r0, r3
 810454c:	3724      	adds	r7, #36	; 0x24
 810454e:	46bd      	mov	sp, r7
 8104550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104554:	4770      	bx	lr
	...

08104558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8104558:	b580      	push	{r7, lr}
 810455a:	b082      	sub	sp, #8
 810455c:	af00      	add	r7, sp, #0
 810455e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	3b01      	subs	r3, #1
 8104564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104568:	d301      	bcc.n	810456e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810456a:	2301      	movs	r3, #1
 810456c:	e00f      	b.n	810458e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810456e:	4a0a      	ldr	r2, [pc, #40]	; (8104598 <SysTick_Config+0x40>)
 8104570:	687b      	ldr	r3, [r7, #4]
 8104572:	3b01      	subs	r3, #1
 8104574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8104576:	210f      	movs	r1, #15
 8104578:	f04f 30ff 	mov.w	r0, #4294967295
 810457c:	f7ff ff8e 	bl	810449c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8104580:	4b05      	ldr	r3, [pc, #20]	; (8104598 <SysTick_Config+0x40>)
 8104582:	2200      	movs	r2, #0
 8104584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8104586:	4b04      	ldr	r3, [pc, #16]	; (8104598 <SysTick_Config+0x40>)
 8104588:	2207      	movs	r2, #7
 810458a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810458c:	2300      	movs	r3, #0
}
 810458e:	4618      	mov	r0, r3
 8104590:	3708      	adds	r7, #8
 8104592:	46bd      	mov	sp, r7
 8104594:	bd80      	pop	{r7, pc}
 8104596:	bf00      	nop
 8104598:	e000e010 	.word	0xe000e010

0810459c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810459c:	b580      	push	{r7, lr}
 810459e:	b082      	sub	sp, #8
 81045a0:	af00      	add	r7, sp, #0
 81045a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81045a4:	6878      	ldr	r0, [r7, #4]
 81045a6:	f7ff ff29 	bl	81043fc <__NVIC_SetPriorityGrouping>
}
 81045aa:	bf00      	nop
 81045ac:	3708      	adds	r7, #8
 81045ae:	46bd      	mov	sp, r7
 81045b0:	bd80      	pop	{r7, pc}

081045b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81045b2:	b580      	push	{r7, lr}
 81045b4:	b086      	sub	sp, #24
 81045b6:	af00      	add	r7, sp, #0
 81045b8:	4603      	mov	r3, r0
 81045ba:	60b9      	str	r1, [r7, #8]
 81045bc:	607a      	str	r2, [r7, #4]
 81045be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81045c0:	f7ff ff40 	bl	8104444 <__NVIC_GetPriorityGrouping>
 81045c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81045c6:	687a      	ldr	r2, [r7, #4]
 81045c8:	68b9      	ldr	r1, [r7, #8]
 81045ca:	6978      	ldr	r0, [r7, #20]
 81045cc:	f7ff ff90 	bl	81044f0 <NVIC_EncodePriority>
 81045d0:	4602      	mov	r2, r0
 81045d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81045d6:	4611      	mov	r1, r2
 81045d8:	4618      	mov	r0, r3
 81045da:	f7ff ff5f 	bl	810449c <__NVIC_SetPriority>
}
 81045de:	bf00      	nop
 81045e0:	3718      	adds	r7, #24
 81045e2:	46bd      	mov	sp, r7
 81045e4:	bd80      	pop	{r7, pc}

081045e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81045e6:	b580      	push	{r7, lr}
 81045e8:	b082      	sub	sp, #8
 81045ea:	af00      	add	r7, sp, #0
 81045ec:	4603      	mov	r3, r0
 81045ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81045f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81045f4:	4618      	mov	r0, r3
 81045f6:	f7ff ff33 	bl	8104460 <__NVIC_EnableIRQ>
}
 81045fa:	bf00      	nop
 81045fc:	3708      	adds	r7, #8
 81045fe:	46bd      	mov	sp, r7
 8104600:	bd80      	pop	{r7, pc}

08104602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8104602:	b580      	push	{r7, lr}
 8104604:	b082      	sub	sp, #8
 8104606:	af00      	add	r7, sp, #0
 8104608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810460a:	6878      	ldr	r0, [r7, #4]
 810460c:	f7ff ffa4 	bl	8104558 <SysTick_Config>
 8104610:	4603      	mov	r3, r0
}
 8104612:	4618      	mov	r0, r3
 8104614:	3708      	adds	r7, #8
 8104616:	46bd      	mov	sp, r7
 8104618:	bd80      	pop	{r7, pc}
	...

0810461c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810461c:	b480      	push	{r7}
 810461e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104620:	4b07      	ldr	r3, [pc, #28]	; (8104640 <HAL_GetCurrentCPUID+0x24>)
 8104622:	681b      	ldr	r3, [r3, #0]
 8104624:	091b      	lsrs	r3, r3, #4
 8104626:	f003 030f 	and.w	r3, r3, #15
 810462a:	2b07      	cmp	r3, #7
 810462c:	d101      	bne.n	8104632 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810462e:	2303      	movs	r3, #3
 8104630:	e000      	b.n	8104634 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8104632:	2301      	movs	r3, #1
  }
}
 8104634:	4618      	mov	r0, r3
 8104636:	46bd      	mov	sp, r7
 8104638:	f85d 7b04 	ldr.w	r7, [sp], #4
 810463c:	4770      	bx	lr
 810463e:	bf00      	nop
 8104640:	e000ed00 	.word	0xe000ed00

08104644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104644:	b480      	push	{r7}
 8104646:	b089      	sub	sp, #36	; 0x24
 8104648:	af00      	add	r7, sp, #0
 810464a:	6078      	str	r0, [r7, #4]
 810464c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810464e:	2300      	movs	r3, #0
 8104650:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104652:	4b89      	ldr	r3, [pc, #548]	; (8104878 <HAL_GPIO_Init+0x234>)
 8104654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104656:	e194      	b.n	8104982 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104658:	683b      	ldr	r3, [r7, #0]
 810465a:	681a      	ldr	r2, [r3, #0]
 810465c:	2101      	movs	r1, #1
 810465e:	69fb      	ldr	r3, [r7, #28]
 8104660:	fa01 f303 	lsl.w	r3, r1, r3
 8104664:	4013      	ands	r3, r2
 8104666:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104668:	693b      	ldr	r3, [r7, #16]
 810466a:	2b00      	cmp	r3, #0
 810466c:	f000 8186 	beq.w	810497c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104670:	683b      	ldr	r3, [r7, #0]
 8104672:	685b      	ldr	r3, [r3, #4]
 8104674:	f003 0303 	and.w	r3, r3, #3
 8104678:	2b01      	cmp	r3, #1
 810467a:	d005      	beq.n	8104688 <HAL_GPIO_Init+0x44>
 810467c:	683b      	ldr	r3, [r7, #0]
 810467e:	685b      	ldr	r3, [r3, #4]
 8104680:	f003 0303 	and.w	r3, r3, #3
 8104684:	2b02      	cmp	r3, #2
 8104686:	d130      	bne.n	81046ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	689b      	ldr	r3, [r3, #8]
 810468c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810468e:	69fb      	ldr	r3, [r7, #28]
 8104690:	005b      	lsls	r3, r3, #1
 8104692:	2203      	movs	r2, #3
 8104694:	fa02 f303 	lsl.w	r3, r2, r3
 8104698:	43db      	mvns	r3, r3
 810469a:	69ba      	ldr	r2, [r7, #24]
 810469c:	4013      	ands	r3, r2
 810469e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81046a0:	683b      	ldr	r3, [r7, #0]
 81046a2:	68da      	ldr	r2, [r3, #12]
 81046a4:	69fb      	ldr	r3, [r7, #28]
 81046a6:	005b      	lsls	r3, r3, #1
 81046a8:	fa02 f303 	lsl.w	r3, r2, r3
 81046ac:	69ba      	ldr	r2, [r7, #24]
 81046ae:	4313      	orrs	r3, r2
 81046b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	69ba      	ldr	r2, [r7, #24]
 81046b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	685b      	ldr	r3, [r3, #4]
 81046bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81046be:	2201      	movs	r2, #1
 81046c0:	69fb      	ldr	r3, [r7, #28]
 81046c2:	fa02 f303 	lsl.w	r3, r2, r3
 81046c6:	43db      	mvns	r3, r3
 81046c8:	69ba      	ldr	r2, [r7, #24]
 81046ca:	4013      	ands	r3, r2
 81046cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81046ce:	683b      	ldr	r3, [r7, #0]
 81046d0:	685b      	ldr	r3, [r3, #4]
 81046d2:	091b      	lsrs	r3, r3, #4
 81046d4:	f003 0201 	and.w	r2, r3, #1
 81046d8:	69fb      	ldr	r3, [r7, #28]
 81046da:	fa02 f303 	lsl.w	r3, r2, r3
 81046de:	69ba      	ldr	r2, [r7, #24]
 81046e0:	4313      	orrs	r3, r2
 81046e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81046e4:	687b      	ldr	r3, [r7, #4]
 81046e6:	69ba      	ldr	r2, [r7, #24]
 81046e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81046ea:	683b      	ldr	r3, [r7, #0]
 81046ec:	685b      	ldr	r3, [r3, #4]
 81046ee:	f003 0303 	and.w	r3, r3, #3
 81046f2:	2b03      	cmp	r3, #3
 81046f4:	d017      	beq.n	8104726 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	68db      	ldr	r3, [r3, #12]
 81046fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81046fc:	69fb      	ldr	r3, [r7, #28]
 81046fe:	005b      	lsls	r3, r3, #1
 8104700:	2203      	movs	r2, #3
 8104702:	fa02 f303 	lsl.w	r3, r2, r3
 8104706:	43db      	mvns	r3, r3
 8104708:	69ba      	ldr	r2, [r7, #24]
 810470a:	4013      	ands	r3, r2
 810470c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810470e:	683b      	ldr	r3, [r7, #0]
 8104710:	689a      	ldr	r2, [r3, #8]
 8104712:	69fb      	ldr	r3, [r7, #28]
 8104714:	005b      	lsls	r3, r3, #1
 8104716:	fa02 f303 	lsl.w	r3, r2, r3
 810471a:	69ba      	ldr	r2, [r7, #24]
 810471c:	4313      	orrs	r3, r2
 810471e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104720:	687b      	ldr	r3, [r7, #4]
 8104722:	69ba      	ldr	r2, [r7, #24]
 8104724:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104726:	683b      	ldr	r3, [r7, #0]
 8104728:	685b      	ldr	r3, [r3, #4]
 810472a:	f003 0303 	and.w	r3, r3, #3
 810472e:	2b02      	cmp	r3, #2
 8104730:	d123      	bne.n	810477a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104732:	69fb      	ldr	r3, [r7, #28]
 8104734:	08da      	lsrs	r2, r3, #3
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	3208      	adds	r2, #8
 810473a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810473e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104740:	69fb      	ldr	r3, [r7, #28]
 8104742:	f003 0307 	and.w	r3, r3, #7
 8104746:	009b      	lsls	r3, r3, #2
 8104748:	220f      	movs	r2, #15
 810474a:	fa02 f303 	lsl.w	r3, r2, r3
 810474e:	43db      	mvns	r3, r3
 8104750:	69ba      	ldr	r2, [r7, #24]
 8104752:	4013      	ands	r3, r2
 8104754:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104756:	683b      	ldr	r3, [r7, #0]
 8104758:	691a      	ldr	r2, [r3, #16]
 810475a:	69fb      	ldr	r3, [r7, #28]
 810475c:	f003 0307 	and.w	r3, r3, #7
 8104760:	009b      	lsls	r3, r3, #2
 8104762:	fa02 f303 	lsl.w	r3, r2, r3
 8104766:	69ba      	ldr	r2, [r7, #24]
 8104768:	4313      	orrs	r3, r2
 810476a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810476c:	69fb      	ldr	r3, [r7, #28]
 810476e:	08da      	lsrs	r2, r3, #3
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	3208      	adds	r2, #8
 8104774:	69b9      	ldr	r1, [r7, #24]
 8104776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	681b      	ldr	r3, [r3, #0]
 810477e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104780:	69fb      	ldr	r3, [r7, #28]
 8104782:	005b      	lsls	r3, r3, #1
 8104784:	2203      	movs	r2, #3
 8104786:	fa02 f303 	lsl.w	r3, r2, r3
 810478a:	43db      	mvns	r3, r3
 810478c:	69ba      	ldr	r2, [r7, #24]
 810478e:	4013      	ands	r3, r2
 8104790:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104792:	683b      	ldr	r3, [r7, #0]
 8104794:	685b      	ldr	r3, [r3, #4]
 8104796:	f003 0203 	and.w	r2, r3, #3
 810479a:	69fb      	ldr	r3, [r7, #28]
 810479c:	005b      	lsls	r3, r3, #1
 810479e:	fa02 f303 	lsl.w	r3, r2, r3
 81047a2:	69ba      	ldr	r2, [r7, #24]
 81047a4:	4313      	orrs	r3, r2
 81047a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81047a8:	687b      	ldr	r3, [r7, #4]
 81047aa:	69ba      	ldr	r2, [r7, #24]
 81047ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81047ae:	683b      	ldr	r3, [r7, #0]
 81047b0:	685b      	ldr	r3, [r3, #4]
 81047b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81047b6:	2b00      	cmp	r3, #0
 81047b8:	f000 80e0 	beq.w	810497c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81047bc:	4b2f      	ldr	r3, [pc, #188]	; (810487c <HAL_GPIO_Init+0x238>)
 81047be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81047c2:	4a2e      	ldr	r2, [pc, #184]	; (810487c <HAL_GPIO_Init+0x238>)
 81047c4:	f043 0302 	orr.w	r3, r3, #2
 81047c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81047cc:	4b2b      	ldr	r3, [pc, #172]	; (810487c <HAL_GPIO_Init+0x238>)
 81047ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81047d2:	f003 0302 	and.w	r3, r3, #2
 81047d6:	60fb      	str	r3, [r7, #12]
 81047d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81047da:	4a29      	ldr	r2, [pc, #164]	; (8104880 <HAL_GPIO_Init+0x23c>)
 81047dc:	69fb      	ldr	r3, [r7, #28]
 81047de:	089b      	lsrs	r3, r3, #2
 81047e0:	3302      	adds	r3, #2
 81047e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81047e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81047e8:	69fb      	ldr	r3, [r7, #28]
 81047ea:	f003 0303 	and.w	r3, r3, #3
 81047ee:	009b      	lsls	r3, r3, #2
 81047f0:	220f      	movs	r2, #15
 81047f2:	fa02 f303 	lsl.w	r3, r2, r3
 81047f6:	43db      	mvns	r3, r3
 81047f8:	69ba      	ldr	r2, [r7, #24]
 81047fa:	4013      	ands	r3, r2
 81047fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81047fe:	687b      	ldr	r3, [r7, #4]
 8104800:	4a20      	ldr	r2, [pc, #128]	; (8104884 <HAL_GPIO_Init+0x240>)
 8104802:	4293      	cmp	r3, r2
 8104804:	d052      	beq.n	81048ac <HAL_GPIO_Init+0x268>
 8104806:	687b      	ldr	r3, [r7, #4]
 8104808:	4a1f      	ldr	r2, [pc, #124]	; (8104888 <HAL_GPIO_Init+0x244>)
 810480a:	4293      	cmp	r3, r2
 810480c:	d031      	beq.n	8104872 <HAL_GPIO_Init+0x22e>
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	4a1e      	ldr	r2, [pc, #120]	; (810488c <HAL_GPIO_Init+0x248>)
 8104812:	4293      	cmp	r3, r2
 8104814:	d02b      	beq.n	810486e <HAL_GPIO_Init+0x22a>
 8104816:	687b      	ldr	r3, [r7, #4]
 8104818:	4a1d      	ldr	r2, [pc, #116]	; (8104890 <HAL_GPIO_Init+0x24c>)
 810481a:	4293      	cmp	r3, r2
 810481c:	d025      	beq.n	810486a <HAL_GPIO_Init+0x226>
 810481e:	687b      	ldr	r3, [r7, #4]
 8104820:	4a1c      	ldr	r2, [pc, #112]	; (8104894 <HAL_GPIO_Init+0x250>)
 8104822:	4293      	cmp	r3, r2
 8104824:	d01f      	beq.n	8104866 <HAL_GPIO_Init+0x222>
 8104826:	687b      	ldr	r3, [r7, #4]
 8104828:	4a1b      	ldr	r2, [pc, #108]	; (8104898 <HAL_GPIO_Init+0x254>)
 810482a:	4293      	cmp	r3, r2
 810482c:	d019      	beq.n	8104862 <HAL_GPIO_Init+0x21e>
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	4a1a      	ldr	r2, [pc, #104]	; (810489c <HAL_GPIO_Init+0x258>)
 8104832:	4293      	cmp	r3, r2
 8104834:	d013      	beq.n	810485e <HAL_GPIO_Init+0x21a>
 8104836:	687b      	ldr	r3, [r7, #4]
 8104838:	4a19      	ldr	r2, [pc, #100]	; (81048a0 <HAL_GPIO_Init+0x25c>)
 810483a:	4293      	cmp	r3, r2
 810483c:	d00d      	beq.n	810485a <HAL_GPIO_Init+0x216>
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	4a18      	ldr	r2, [pc, #96]	; (81048a4 <HAL_GPIO_Init+0x260>)
 8104842:	4293      	cmp	r3, r2
 8104844:	d007      	beq.n	8104856 <HAL_GPIO_Init+0x212>
 8104846:	687b      	ldr	r3, [r7, #4]
 8104848:	4a17      	ldr	r2, [pc, #92]	; (81048a8 <HAL_GPIO_Init+0x264>)
 810484a:	4293      	cmp	r3, r2
 810484c:	d101      	bne.n	8104852 <HAL_GPIO_Init+0x20e>
 810484e:	2309      	movs	r3, #9
 8104850:	e02d      	b.n	81048ae <HAL_GPIO_Init+0x26a>
 8104852:	230a      	movs	r3, #10
 8104854:	e02b      	b.n	81048ae <HAL_GPIO_Init+0x26a>
 8104856:	2308      	movs	r3, #8
 8104858:	e029      	b.n	81048ae <HAL_GPIO_Init+0x26a>
 810485a:	2307      	movs	r3, #7
 810485c:	e027      	b.n	81048ae <HAL_GPIO_Init+0x26a>
 810485e:	2306      	movs	r3, #6
 8104860:	e025      	b.n	81048ae <HAL_GPIO_Init+0x26a>
 8104862:	2305      	movs	r3, #5
 8104864:	e023      	b.n	81048ae <HAL_GPIO_Init+0x26a>
 8104866:	2304      	movs	r3, #4
 8104868:	e021      	b.n	81048ae <HAL_GPIO_Init+0x26a>
 810486a:	2303      	movs	r3, #3
 810486c:	e01f      	b.n	81048ae <HAL_GPIO_Init+0x26a>
 810486e:	2302      	movs	r3, #2
 8104870:	e01d      	b.n	81048ae <HAL_GPIO_Init+0x26a>
 8104872:	2301      	movs	r3, #1
 8104874:	e01b      	b.n	81048ae <HAL_GPIO_Init+0x26a>
 8104876:	bf00      	nop
 8104878:	580000c0 	.word	0x580000c0
 810487c:	58024400 	.word	0x58024400
 8104880:	58000400 	.word	0x58000400
 8104884:	58020000 	.word	0x58020000
 8104888:	58020400 	.word	0x58020400
 810488c:	58020800 	.word	0x58020800
 8104890:	58020c00 	.word	0x58020c00
 8104894:	58021000 	.word	0x58021000
 8104898:	58021400 	.word	0x58021400
 810489c:	58021800 	.word	0x58021800
 81048a0:	58021c00 	.word	0x58021c00
 81048a4:	58022000 	.word	0x58022000
 81048a8:	58022400 	.word	0x58022400
 81048ac:	2300      	movs	r3, #0
 81048ae:	69fa      	ldr	r2, [r7, #28]
 81048b0:	f002 0203 	and.w	r2, r2, #3
 81048b4:	0092      	lsls	r2, r2, #2
 81048b6:	4093      	lsls	r3, r2
 81048b8:	69ba      	ldr	r2, [r7, #24]
 81048ba:	4313      	orrs	r3, r2
 81048bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81048be:	4938      	ldr	r1, [pc, #224]	; (81049a0 <HAL_GPIO_Init+0x35c>)
 81048c0:	69fb      	ldr	r3, [r7, #28]
 81048c2:	089b      	lsrs	r3, r3, #2
 81048c4:	3302      	adds	r3, #2
 81048c6:	69ba      	ldr	r2, [r7, #24]
 81048c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81048cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81048d0:	681b      	ldr	r3, [r3, #0]
 81048d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81048d4:	693b      	ldr	r3, [r7, #16]
 81048d6:	43db      	mvns	r3, r3
 81048d8:	69ba      	ldr	r2, [r7, #24]
 81048da:	4013      	ands	r3, r2
 81048dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81048de:	683b      	ldr	r3, [r7, #0]
 81048e0:	685b      	ldr	r3, [r3, #4]
 81048e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81048e6:	2b00      	cmp	r3, #0
 81048e8:	d003      	beq.n	81048f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81048ea:	69ba      	ldr	r2, [r7, #24]
 81048ec:	693b      	ldr	r3, [r7, #16]
 81048ee:	4313      	orrs	r3, r2
 81048f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81048f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81048f6:	69bb      	ldr	r3, [r7, #24]
 81048f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81048fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81048fe:	685b      	ldr	r3, [r3, #4]
 8104900:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104902:	693b      	ldr	r3, [r7, #16]
 8104904:	43db      	mvns	r3, r3
 8104906:	69ba      	ldr	r2, [r7, #24]
 8104908:	4013      	ands	r3, r2
 810490a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810490c:	683b      	ldr	r3, [r7, #0]
 810490e:	685b      	ldr	r3, [r3, #4]
 8104910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104914:	2b00      	cmp	r3, #0
 8104916:	d003      	beq.n	8104920 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104918:	69ba      	ldr	r2, [r7, #24]
 810491a:	693b      	ldr	r3, [r7, #16]
 810491c:	4313      	orrs	r3, r2
 810491e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104924:	69bb      	ldr	r3, [r7, #24]
 8104926:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104928:	697b      	ldr	r3, [r7, #20]
 810492a:	685b      	ldr	r3, [r3, #4]
 810492c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810492e:	693b      	ldr	r3, [r7, #16]
 8104930:	43db      	mvns	r3, r3
 8104932:	69ba      	ldr	r2, [r7, #24]
 8104934:	4013      	ands	r3, r2
 8104936:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104938:	683b      	ldr	r3, [r7, #0]
 810493a:	685b      	ldr	r3, [r3, #4]
 810493c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104940:	2b00      	cmp	r3, #0
 8104942:	d003      	beq.n	810494c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104944:	69ba      	ldr	r2, [r7, #24]
 8104946:	693b      	ldr	r3, [r7, #16]
 8104948:	4313      	orrs	r3, r2
 810494a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810494c:	697b      	ldr	r3, [r7, #20]
 810494e:	69ba      	ldr	r2, [r7, #24]
 8104950:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104952:	697b      	ldr	r3, [r7, #20]
 8104954:	681b      	ldr	r3, [r3, #0]
 8104956:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104958:	693b      	ldr	r3, [r7, #16]
 810495a:	43db      	mvns	r3, r3
 810495c:	69ba      	ldr	r2, [r7, #24]
 810495e:	4013      	ands	r3, r2
 8104960:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8104962:	683b      	ldr	r3, [r7, #0]
 8104964:	685b      	ldr	r3, [r3, #4]
 8104966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810496a:	2b00      	cmp	r3, #0
 810496c:	d003      	beq.n	8104976 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810496e:	69ba      	ldr	r2, [r7, #24]
 8104970:	693b      	ldr	r3, [r7, #16]
 8104972:	4313      	orrs	r3, r2
 8104974:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104976:	697b      	ldr	r3, [r7, #20]
 8104978:	69ba      	ldr	r2, [r7, #24]
 810497a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810497c:	69fb      	ldr	r3, [r7, #28]
 810497e:	3301      	adds	r3, #1
 8104980:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104982:	683b      	ldr	r3, [r7, #0]
 8104984:	681a      	ldr	r2, [r3, #0]
 8104986:	69fb      	ldr	r3, [r7, #28]
 8104988:	fa22 f303 	lsr.w	r3, r2, r3
 810498c:	2b00      	cmp	r3, #0
 810498e:	f47f ae63 	bne.w	8104658 <HAL_GPIO_Init+0x14>
  }
}
 8104992:	bf00      	nop
 8104994:	bf00      	nop
 8104996:	3724      	adds	r7, #36	; 0x24
 8104998:	46bd      	mov	sp, r7
 810499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810499e:	4770      	bx	lr
 81049a0:	58000400 	.word	0x58000400

081049a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81049a4:	b480      	push	{r7}
 81049a6:	b085      	sub	sp, #20
 81049a8:	af00      	add	r7, sp, #0
 81049aa:	6078      	str	r0, [r7, #4]
 81049ac:	460b      	mov	r3, r1
 81049ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 81049b0:	687b      	ldr	r3, [r7, #4]
 81049b2:	691a      	ldr	r2, [r3, #16]
 81049b4:	887b      	ldrh	r3, [r7, #2]
 81049b6:	4013      	ands	r3, r2
 81049b8:	2b00      	cmp	r3, #0
 81049ba:	d002      	beq.n	81049c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 81049bc:	2301      	movs	r3, #1
 81049be:	73fb      	strb	r3, [r7, #15]
 81049c0:	e001      	b.n	81049c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 81049c2:	2300      	movs	r3, #0
 81049c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 81049c6:	7bfb      	ldrb	r3, [r7, #15]
}
 81049c8:	4618      	mov	r0, r3
 81049ca:	3714      	adds	r7, #20
 81049cc:	46bd      	mov	sp, r7
 81049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049d2:	4770      	bx	lr

081049d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81049d4:	b480      	push	{r7}
 81049d6:	b083      	sub	sp, #12
 81049d8:	af00      	add	r7, sp, #0
 81049da:	6078      	str	r0, [r7, #4]
 81049dc:	460b      	mov	r3, r1
 81049de:	807b      	strh	r3, [r7, #2]
 81049e0:	4613      	mov	r3, r2
 81049e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81049e4:	787b      	ldrb	r3, [r7, #1]
 81049e6:	2b00      	cmp	r3, #0
 81049e8:	d003      	beq.n	81049f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81049ea:	887a      	ldrh	r2, [r7, #2]
 81049ec:	687b      	ldr	r3, [r7, #4]
 81049ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81049f0:	e003      	b.n	81049fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81049f2:	887b      	ldrh	r3, [r7, #2]
 81049f4:	041a      	lsls	r2, r3, #16
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	619a      	str	r2, [r3, #24]
}
 81049fa:	bf00      	nop
 81049fc:	370c      	adds	r7, #12
 81049fe:	46bd      	mov	sp, r7
 8104a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a04:	4770      	bx	lr
	...

08104a08 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8104a08:	b480      	push	{r7}
 8104a0a:	b083      	sub	sp, #12
 8104a0c:	af00      	add	r7, sp, #0
 8104a0e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8104a10:	4a08      	ldr	r2, [pc, #32]	; (8104a34 <HAL_HSEM_FastTake+0x2c>)
 8104a12:	687b      	ldr	r3, [r7, #4]
 8104a14:	3320      	adds	r3, #32
 8104a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104a1a:	4a07      	ldr	r2, [pc, #28]	; (8104a38 <HAL_HSEM_FastTake+0x30>)
 8104a1c:	4293      	cmp	r3, r2
 8104a1e:	d101      	bne.n	8104a24 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8104a20:	2300      	movs	r3, #0
 8104a22:	e000      	b.n	8104a26 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8104a24:	2301      	movs	r3, #1
}
 8104a26:	4618      	mov	r0, r3
 8104a28:	370c      	adds	r7, #12
 8104a2a:	46bd      	mov	sp, r7
 8104a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a30:	4770      	bx	lr
 8104a32:	bf00      	nop
 8104a34:	58026400 	.word	0x58026400
 8104a38:	80000100 	.word	0x80000100

08104a3c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8104a3c:	b480      	push	{r7}
 8104a3e:	b083      	sub	sp, #12
 8104a40:	af00      	add	r7, sp, #0
 8104a42:	6078      	str	r0, [r7, #4]
 8104a44:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8104a46:	4906      	ldr	r1, [pc, #24]	; (8104a60 <HAL_HSEM_Release+0x24>)
 8104a48:	683b      	ldr	r3, [r7, #0]
 8104a4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104a4e:	687b      	ldr	r3, [r7, #4]
 8104a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8104a54:	bf00      	nop
 8104a56:	370c      	adds	r7, #12
 8104a58:	46bd      	mov	sp, r7
 8104a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a5e:	4770      	bx	lr
 8104a60:	58026400 	.word	0x58026400

08104a64 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104a64:	b480      	push	{r7}
 8104a66:	b083      	sub	sp, #12
 8104a68:	af00      	add	r7, sp, #0
 8104a6a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104a6c:	4b05      	ldr	r3, [pc, #20]	; (8104a84 <HAL_HSEM_ActivateNotification+0x20>)
 8104a6e:	681a      	ldr	r2, [r3, #0]
 8104a70:	4904      	ldr	r1, [pc, #16]	; (8104a84 <HAL_HSEM_ActivateNotification+0x20>)
 8104a72:	687b      	ldr	r3, [r7, #4]
 8104a74:	4313      	orrs	r3, r2
 8104a76:	600b      	str	r3, [r1, #0]
#endif
}
 8104a78:	bf00      	nop
 8104a7a:	370c      	adds	r7, #12
 8104a7c:	46bd      	mov	sp, r7
 8104a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a82:	4770      	bx	lr
 8104a84:	58026510 	.word	0x58026510

08104a88 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8104a88:	b580      	push	{r7, lr}
 8104a8a:	b082      	sub	sp, #8
 8104a8c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8104a8e:	4b0a      	ldr	r3, [pc, #40]	; (8104ab8 <HAL_HSEM_IRQHandler+0x30>)
 8104a90:	68db      	ldr	r3, [r3, #12]
 8104a92:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8104a94:	4b08      	ldr	r3, [pc, #32]	; (8104ab8 <HAL_HSEM_IRQHandler+0x30>)
 8104a96:	681a      	ldr	r2, [r3, #0]
 8104a98:	687b      	ldr	r3, [r7, #4]
 8104a9a:	43db      	mvns	r3, r3
 8104a9c:	4906      	ldr	r1, [pc, #24]	; (8104ab8 <HAL_HSEM_IRQHandler+0x30>)
 8104a9e:	4013      	ands	r3, r2
 8104aa0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8104aa2:	4a05      	ldr	r2, [pc, #20]	; (8104ab8 <HAL_HSEM_IRQHandler+0x30>)
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8104aa8:	6878      	ldr	r0, [r7, #4]
 8104aaa:	f7fc f9c7 	bl	8100e3c <HAL_HSEM_FreeCallback>
}
 8104aae:	bf00      	nop
 8104ab0:	3708      	adds	r7, #8
 8104ab2:	46bd      	mov	sp, r7
 8104ab4:	bd80      	pop	{r7, pc}
 8104ab6:	bf00      	nop
 8104ab8:	58026510 	.word	0x58026510

08104abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104abc:	b580      	push	{r7, lr}
 8104abe:	b082      	sub	sp, #8
 8104ac0:	af00      	add	r7, sp, #0
 8104ac2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104ac4:	687b      	ldr	r3, [r7, #4]
 8104ac6:	2b00      	cmp	r3, #0
 8104ac8:	d101      	bne.n	8104ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8104aca:	2301      	movs	r3, #1
 8104acc:	e081      	b.n	8104bd2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104ace:	687b      	ldr	r3, [r7, #4]
 8104ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104ad4:	b2db      	uxtb	r3, r3
 8104ad6:	2b00      	cmp	r3, #0
 8104ad8:	d106      	bne.n	8104ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	2200      	movs	r2, #0
 8104ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104ae2:	6878      	ldr	r0, [r7, #4]
 8104ae4:	f7fd fd1a 	bl	810251c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104ae8:	687b      	ldr	r3, [r7, #4]
 8104aea:	2224      	movs	r2, #36	; 0x24
 8104aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104af0:	687b      	ldr	r3, [r7, #4]
 8104af2:	681b      	ldr	r3, [r3, #0]
 8104af4:	681a      	ldr	r2, [r3, #0]
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	681b      	ldr	r3, [r3, #0]
 8104afa:	f022 0201 	bic.w	r2, r2, #1
 8104afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104b00:	687b      	ldr	r3, [r7, #4]
 8104b02:	685a      	ldr	r2, [r3, #4]
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104b0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	681b      	ldr	r3, [r3, #0]
 8104b12:	689a      	ldr	r2, [r3, #8]
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104b1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	68db      	ldr	r3, [r3, #12]
 8104b22:	2b01      	cmp	r3, #1
 8104b24:	d107      	bne.n	8104b36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	689a      	ldr	r2, [r3, #8]
 8104b2a:	687b      	ldr	r3, [r7, #4]
 8104b2c:	681b      	ldr	r3, [r3, #0]
 8104b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104b32:	609a      	str	r2, [r3, #8]
 8104b34:	e006      	b.n	8104b44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104b36:	687b      	ldr	r3, [r7, #4]
 8104b38:	689a      	ldr	r2, [r3, #8]
 8104b3a:	687b      	ldr	r3, [r7, #4]
 8104b3c:	681b      	ldr	r3, [r3, #0]
 8104b3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8104b42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104b44:	687b      	ldr	r3, [r7, #4]
 8104b46:	68db      	ldr	r3, [r3, #12]
 8104b48:	2b02      	cmp	r3, #2
 8104b4a:	d104      	bne.n	8104b56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	681b      	ldr	r3, [r3, #0]
 8104b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104b54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8104b56:	687b      	ldr	r3, [r7, #4]
 8104b58:	681b      	ldr	r3, [r3, #0]
 8104b5a:	685b      	ldr	r3, [r3, #4]
 8104b5c:	687a      	ldr	r2, [r7, #4]
 8104b5e:	6812      	ldr	r2, [r2, #0]
 8104b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104b68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8104b6a:	687b      	ldr	r3, [r7, #4]
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	68da      	ldr	r2, [r3, #12]
 8104b70:	687b      	ldr	r3, [r7, #4]
 8104b72:	681b      	ldr	r3, [r3, #0]
 8104b74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104b78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	691a      	ldr	r2, [r3, #16]
 8104b7e:	687b      	ldr	r3, [r7, #4]
 8104b80:	695b      	ldr	r3, [r3, #20]
 8104b82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	699b      	ldr	r3, [r3, #24]
 8104b8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	430a      	orrs	r2, r1
 8104b92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8104b94:	687b      	ldr	r3, [r7, #4]
 8104b96:	69d9      	ldr	r1, [r3, #28]
 8104b98:	687b      	ldr	r3, [r7, #4]
 8104b9a:	6a1a      	ldr	r2, [r3, #32]
 8104b9c:	687b      	ldr	r3, [r7, #4]
 8104b9e:	681b      	ldr	r3, [r3, #0]
 8104ba0:	430a      	orrs	r2, r1
 8104ba2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8104ba4:	687b      	ldr	r3, [r7, #4]
 8104ba6:	681b      	ldr	r3, [r3, #0]
 8104ba8:	681a      	ldr	r2, [r3, #0]
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	681b      	ldr	r3, [r3, #0]
 8104bae:	f042 0201 	orr.w	r2, r2, #1
 8104bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104bb4:	687b      	ldr	r3, [r7, #4]
 8104bb6:	2200      	movs	r2, #0
 8104bb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8104bba:	687b      	ldr	r3, [r7, #4]
 8104bbc:	2220      	movs	r2, #32
 8104bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	2200      	movs	r2, #0
 8104bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104bc8:	687b      	ldr	r3, [r7, #4]
 8104bca:	2200      	movs	r2, #0
 8104bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8104bd0:	2300      	movs	r3, #0
}
 8104bd2:	4618      	mov	r0, r3
 8104bd4:	3708      	adds	r7, #8
 8104bd6:	46bd      	mov	sp, r7
 8104bd8:	bd80      	pop	{r7, pc}
	...

08104bdc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104bdc:	b580      	push	{r7, lr}
 8104bde:	b088      	sub	sp, #32
 8104be0:	af02      	add	r7, sp, #8
 8104be2:	60f8      	str	r0, [r7, #12]
 8104be4:	4608      	mov	r0, r1
 8104be6:	4611      	mov	r1, r2
 8104be8:	461a      	mov	r2, r3
 8104bea:	4603      	mov	r3, r0
 8104bec:	817b      	strh	r3, [r7, #10]
 8104bee:	460b      	mov	r3, r1
 8104bf0:	813b      	strh	r3, [r7, #8]
 8104bf2:	4613      	mov	r3, r2
 8104bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104bf6:	68fb      	ldr	r3, [r7, #12]
 8104bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104bfc:	b2db      	uxtb	r3, r3
 8104bfe:	2b20      	cmp	r3, #32
 8104c00:	f040 80f9 	bne.w	8104df6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8104c04:	6a3b      	ldr	r3, [r7, #32]
 8104c06:	2b00      	cmp	r3, #0
 8104c08:	d002      	beq.n	8104c10 <HAL_I2C_Mem_Write+0x34>
 8104c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8104c0c:	2b00      	cmp	r3, #0
 8104c0e:	d105      	bne.n	8104c1c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104c10:	68fb      	ldr	r3, [r7, #12]
 8104c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104c16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104c18:	2301      	movs	r3, #1
 8104c1a:	e0ed      	b.n	8104df8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104c1c:	68fb      	ldr	r3, [r7, #12]
 8104c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104c22:	2b01      	cmp	r3, #1
 8104c24:	d101      	bne.n	8104c2a <HAL_I2C_Mem_Write+0x4e>
 8104c26:	2302      	movs	r3, #2
 8104c28:	e0e6      	b.n	8104df8 <HAL_I2C_Mem_Write+0x21c>
 8104c2a:	68fb      	ldr	r3, [r7, #12]
 8104c2c:	2201      	movs	r2, #1
 8104c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104c32:	f7fe fb17 	bl	8103264 <HAL_GetTick>
 8104c36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104c38:	697b      	ldr	r3, [r7, #20]
 8104c3a:	9300      	str	r3, [sp, #0]
 8104c3c:	2319      	movs	r3, #25
 8104c3e:	2201      	movs	r2, #1
 8104c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104c44:	68f8      	ldr	r0, [r7, #12]
 8104c46:	f000 fac3 	bl	81051d0 <I2C_WaitOnFlagUntilTimeout>
 8104c4a:	4603      	mov	r3, r0
 8104c4c:	2b00      	cmp	r3, #0
 8104c4e:	d001      	beq.n	8104c54 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8104c50:	2301      	movs	r3, #1
 8104c52:	e0d1      	b.n	8104df8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8104c54:	68fb      	ldr	r3, [r7, #12]
 8104c56:	2221      	movs	r2, #33	; 0x21
 8104c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104c5c:	68fb      	ldr	r3, [r7, #12]
 8104c5e:	2240      	movs	r2, #64	; 0x40
 8104c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104c64:	68fb      	ldr	r3, [r7, #12]
 8104c66:	2200      	movs	r2, #0
 8104c68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104c6a:	68fb      	ldr	r3, [r7, #12]
 8104c6c:	6a3a      	ldr	r2, [r7, #32]
 8104c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104c70:	68fb      	ldr	r3, [r7, #12]
 8104c72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104c76:	68fb      	ldr	r3, [r7, #12]
 8104c78:	2200      	movs	r2, #0
 8104c7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104c7c:	88f8      	ldrh	r0, [r7, #6]
 8104c7e:	893a      	ldrh	r2, [r7, #8]
 8104c80:	8979      	ldrh	r1, [r7, #10]
 8104c82:	697b      	ldr	r3, [r7, #20]
 8104c84:	9301      	str	r3, [sp, #4]
 8104c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104c88:	9300      	str	r3, [sp, #0]
 8104c8a:	4603      	mov	r3, r0
 8104c8c:	68f8      	ldr	r0, [r7, #12]
 8104c8e:	f000 f9d3 	bl	8105038 <I2C_RequestMemoryWrite>
 8104c92:	4603      	mov	r3, r0
 8104c94:	2b00      	cmp	r3, #0
 8104c96:	d005      	beq.n	8104ca4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104c98:	68fb      	ldr	r3, [r7, #12]
 8104c9a:	2200      	movs	r2, #0
 8104c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104ca0:	2301      	movs	r3, #1
 8104ca2:	e0a9      	b.n	8104df8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104ca4:	68fb      	ldr	r3, [r7, #12]
 8104ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ca8:	b29b      	uxth	r3, r3
 8104caa:	2bff      	cmp	r3, #255	; 0xff
 8104cac:	d90e      	bls.n	8104ccc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104cae:	68fb      	ldr	r3, [r7, #12]
 8104cb0:	22ff      	movs	r2, #255	; 0xff
 8104cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8104cb4:	68fb      	ldr	r3, [r7, #12]
 8104cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104cb8:	b2da      	uxtb	r2, r3
 8104cba:	8979      	ldrh	r1, [r7, #10]
 8104cbc:	2300      	movs	r3, #0
 8104cbe:	9300      	str	r3, [sp, #0]
 8104cc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104cc4:	68f8      	ldr	r0, [r7, #12]
 8104cc6:	f000 fc2b 	bl	8105520 <I2C_TransferConfig>
 8104cca:	e00f      	b.n	8104cec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104ccc:	68fb      	ldr	r3, [r7, #12]
 8104cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104cd0:	b29a      	uxth	r2, r3
 8104cd2:	68fb      	ldr	r3, [r7, #12]
 8104cd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8104cd6:	68fb      	ldr	r3, [r7, #12]
 8104cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104cda:	b2da      	uxtb	r2, r3
 8104cdc:	8979      	ldrh	r1, [r7, #10]
 8104cde:	2300      	movs	r3, #0
 8104ce0:	9300      	str	r3, [sp, #0]
 8104ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104ce6:	68f8      	ldr	r0, [r7, #12]
 8104ce8:	f000 fc1a 	bl	8105520 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104cec:	697a      	ldr	r2, [r7, #20]
 8104cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104cf0:	68f8      	ldr	r0, [r7, #12]
 8104cf2:	f000 faad 	bl	8105250 <I2C_WaitOnTXISFlagUntilTimeout>
 8104cf6:	4603      	mov	r3, r0
 8104cf8:	2b00      	cmp	r3, #0
 8104cfa:	d001      	beq.n	8104d00 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8104cfc:	2301      	movs	r3, #1
 8104cfe:	e07b      	b.n	8104df8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8104d00:	68fb      	ldr	r3, [r7, #12]
 8104d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104d04:	781a      	ldrb	r2, [r3, #0]
 8104d06:	68fb      	ldr	r3, [r7, #12]
 8104d08:	681b      	ldr	r3, [r3, #0]
 8104d0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104d0c:	68fb      	ldr	r3, [r7, #12]
 8104d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104d10:	1c5a      	adds	r2, r3, #1
 8104d12:	68fb      	ldr	r3, [r7, #12]
 8104d14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8104d16:	68fb      	ldr	r3, [r7, #12]
 8104d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d1a:	b29b      	uxth	r3, r3
 8104d1c:	3b01      	subs	r3, #1
 8104d1e:	b29a      	uxth	r2, r3
 8104d20:	68fb      	ldr	r3, [r7, #12]
 8104d22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8104d24:	68fb      	ldr	r3, [r7, #12]
 8104d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104d28:	3b01      	subs	r3, #1
 8104d2a:	b29a      	uxth	r2, r3
 8104d2c:	68fb      	ldr	r3, [r7, #12]
 8104d2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104d30:	68fb      	ldr	r3, [r7, #12]
 8104d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d34:	b29b      	uxth	r3, r3
 8104d36:	2b00      	cmp	r3, #0
 8104d38:	d034      	beq.n	8104da4 <HAL_I2C_Mem_Write+0x1c8>
 8104d3a:	68fb      	ldr	r3, [r7, #12]
 8104d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104d3e:	2b00      	cmp	r3, #0
 8104d40:	d130      	bne.n	8104da4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104d42:	697b      	ldr	r3, [r7, #20]
 8104d44:	9300      	str	r3, [sp, #0]
 8104d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104d48:	2200      	movs	r2, #0
 8104d4a:	2180      	movs	r1, #128	; 0x80
 8104d4c:	68f8      	ldr	r0, [r7, #12]
 8104d4e:	f000 fa3f 	bl	81051d0 <I2C_WaitOnFlagUntilTimeout>
 8104d52:	4603      	mov	r3, r0
 8104d54:	2b00      	cmp	r3, #0
 8104d56:	d001      	beq.n	8104d5c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8104d58:	2301      	movs	r3, #1
 8104d5a:	e04d      	b.n	8104df8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104d5c:	68fb      	ldr	r3, [r7, #12]
 8104d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d60:	b29b      	uxth	r3, r3
 8104d62:	2bff      	cmp	r3, #255	; 0xff
 8104d64:	d90e      	bls.n	8104d84 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104d66:	68fb      	ldr	r3, [r7, #12]
 8104d68:	22ff      	movs	r2, #255	; 0xff
 8104d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104d6c:	68fb      	ldr	r3, [r7, #12]
 8104d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104d70:	b2da      	uxtb	r2, r3
 8104d72:	8979      	ldrh	r1, [r7, #10]
 8104d74:	2300      	movs	r3, #0
 8104d76:	9300      	str	r3, [sp, #0]
 8104d78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104d7c:	68f8      	ldr	r0, [r7, #12]
 8104d7e:	f000 fbcf 	bl	8105520 <I2C_TransferConfig>
 8104d82:	e00f      	b.n	8104da4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104d84:	68fb      	ldr	r3, [r7, #12]
 8104d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d88:	b29a      	uxth	r2, r3
 8104d8a:	68fb      	ldr	r3, [r7, #12]
 8104d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104d8e:	68fb      	ldr	r3, [r7, #12]
 8104d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104d92:	b2da      	uxtb	r2, r3
 8104d94:	8979      	ldrh	r1, [r7, #10]
 8104d96:	2300      	movs	r3, #0
 8104d98:	9300      	str	r3, [sp, #0]
 8104d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104d9e:	68f8      	ldr	r0, [r7, #12]
 8104da0:	f000 fbbe 	bl	8105520 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8104da4:	68fb      	ldr	r3, [r7, #12]
 8104da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104da8:	b29b      	uxth	r3, r3
 8104daa:	2b00      	cmp	r3, #0
 8104dac:	d19e      	bne.n	8104cec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104dae:	697a      	ldr	r2, [r7, #20]
 8104db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104db2:	68f8      	ldr	r0, [r7, #12]
 8104db4:	f000 fa8c 	bl	81052d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104db8:	4603      	mov	r3, r0
 8104dba:	2b00      	cmp	r3, #0
 8104dbc:	d001      	beq.n	8104dc2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8104dbe:	2301      	movs	r3, #1
 8104dc0:	e01a      	b.n	8104df8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104dc2:	68fb      	ldr	r3, [r7, #12]
 8104dc4:	681b      	ldr	r3, [r3, #0]
 8104dc6:	2220      	movs	r2, #32
 8104dc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104dca:	68fb      	ldr	r3, [r7, #12]
 8104dcc:	681b      	ldr	r3, [r3, #0]
 8104dce:	6859      	ldr	r1, [r3, #4]
 8104dd0:	68fb      	ldr	r3, [r7, #12]
 8104dd2:	681a      	ldr	r2, [r3, #0]
 8104dd4:	4b0a      	ldr	r3, [pc, #40]	; (8104e00 <HAL_I2C_Mem_Write+0x224>)
 8104dd6:	400b      	ands	r3, r1
 8104dd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104dda:	68fb      	ldr	r3, [r7, #12]
 8104ddc:	2220      	movs	r2, #32
 8104dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104de2:	68fb      	ldr	r3, [r7, #12]
 8104de4:	2200      	movs	r2, #0
 8104de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104dea:	68fb      	ldr	r3, [r7, #12]
 8104dec:	2200      	movs	r2, #0
 8104dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104df2:	2300      	movs	r3, #0
 8104df4:	e000      	b.n	8104df8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8104df6:	2302      	movs	r3, #2
  }
}
 8104df8:	4618      	mov	r0, r3
 8104dfa:	3718      	adds	r7, #24
 8104dfc:	46bd      	mov	sp, r7
 8104dfe:	bd80      	pop	{r7, pc}
 8104e00:	fe00e800 	.word	0xfe00e800

08104e04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104e04:	b580      	push	{r7, lr}
 8104e06:	b088      	sub	sp, #32
 8104e08:	af02      	add	r7, sp, #8
 8104e0a:	60f8      	str	r0, [r7, #12]
 8104e0c:	4608      	mov	r0, r1
 8104e0e:	4611      	mov	r1, r2
 8104e10:	461a      	mov	r2, r3
 8104e12:	4603      	mov	r3, r0
 8104e14:	817b      	strh	r3, [r7, #10]
 8104e16:	460b      	mov	r3, r1
 8104e18:	813b      	strh	r3, [r7, #8]
 8104e1a:	4613      	mov	r3, r2
 8104e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104e1e:	68fb      	ldr	r3, [r7, #12]
 8104e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104e24:	b2db      	uxtb	r3, r3
 8104e26:	2b20      	cmp	r3, #32
 8104e28:	f040 80fd 	bne.w	8105026 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8104e2c:	6a3b      	ldr	r3, [r7, #32]
 8104e2e:	2b00      	cmp	r3, #0
 8104e30:	d002      	beq.n	8104e38 <HAL_I2C_Mem_Read+0x34>
 8104e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8104e34:	2b00      	cmp	r3, #0
 8104e36:	d105      	bne.n	8104e44 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104e38:	68fb      	ldr	r3, [r7, #12]
 8104e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104e3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104e40:	2301      	movs	r3, #1
 8104e42:	e0f1      	b.n	8105028 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104e44:	68fb      	ldr	r3, [r7, #12]
 8104e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104e4a:	2b01      	cmp	r3, #1
 8104e4c:	d101      	bne.n	8104e52 <HAL_I2C_Mem_Read+0x4e>
 8104e4e:	2302      	movs	r3, #2
 8104e50:	e0ea      	b.n	8105028 <HAL_I2C_Mem_Read+0x224>
 8104e52:	68fb      	ldr	r3, [r7, #12]
 8104e54:	2201      	movs	r2, #1
 8104e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104e5a:	f7fe fa03 	bl	8103264 <HAL_GetTick>
 8104e5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104e60:	697b      	ldr	r3, [r7, #20]
 8104e62:	9300      	str	r3, [sp, #0]
 8104e64:	2319      	movs	r3, #25
 8104e66:	2201      	movs	r2, #1
 8104e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104e6c:	68f8      	ldr	r0, [r7, #12]
 8104e6e:	f000 f9af 	bl	81051d0 <I2C_WaitOnFlagUntilTimeout>
 8104e72:	4603      	mov	r3, r0
 8104e74:	2b00      	cmp	r3, #0
 8104e76:	d001      	beq.n	8104e7c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8104e78:	2301      	movs	r3, #1
 8104e7a:	e0d5      	b.n	8105028 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8104e7c:	68fb      	ldr	r3, [r7, #12]
 8104e7e:	2222      	movs	r2, #34	; 0x22
 8104e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104e84:	68fb      	ldr	r3, [r7, #12]
 8104e86:	2240      	movs	r2, #64	; 0x40
 8104e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104e8c:	68fb      	ldr	r3, [r7, #12]
 8104e8e:	2200      	movs	r2, #0
 8104e90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104e92:	68fb      	ldr	r3, [r7, #12]
 8104e94:	6a3a      	ldr	r2, [r7, #32]
 8104e96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104e98:	68fb      	ldr	r3, [r7, #12]
 8104e9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104e9e:	68fb      	ldr	r3, [r7, #12]
 8104ea0:	2200      	movs	r2, #0
 8104ea2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104ea4:	88f8      	ldrh	r0, [r7, #6]
 8104ea6:	893a      	ldrh	r2, [r7, #8]
 8104ea8:	8979      	ldrh	r1, [r7, #10]
 8104eaa:	697b      	ldr	r3, [r7, #20]
 8104eac:	9301      	str	r3, [sp, #4]
 8104eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104eb0:	9300      	str	r3, [sp, #0]
 8104eb2:	4603      	mov	r3, r0
 8104eb4:	68f8      	ldr	r0, [r7, #12]
 8104eb6:	f000 f913 	bl	81050e0 <I2C_RequestMemoryRead>
 8104eba:	4603      	mov	r3, r0
 8104ebc:	2b00      	cmp	r3, #0
 8104ebe:	d005      	beq.n	8104ecc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104ec0:	68fb      	ldr	r3, [r7, #12]
 8104ec2:	2200      	movs	r2, #0
 8104ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104ec8:	2301      	movs	r3, #1
 8104eca:	e0ad      	b.n	8105028 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104ecc:	68fb      	ldr	r3, [r7, #12]
 8104ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ed0:	b29b      	uxth	r3, r3
 8104ed2:	2bff      	cmp	r3, #255	; 0xff
 8104ed4:	d90e      	bls.n	8104ef4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104ed6:	68fb      	ldr	r3, [r7, #12]
 8104ed8:	22ff      	movs	r2, #255	; 0xff
 8104eda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104edc:	68fb      	ldr	r3, [r7, #12]
 8104ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104ee0:	b2da      	uxtb	r2, r3
 8104ee2:	8979      	ldrh	r1, [r7, #10]
 8104ee4:	4b52      	ldr	r3, [pc, #328]	; (8105030 <HAL_I2C_Mem_Read+0x22c>)
 8104ee6:	9300      	str	r3, [sp, #0]
 8104ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104eec:	68f8      	ldr	r0, [r7, #12]
 8104eee:	f000 fb17 	bl	8105520 <I2C_TransferConfig>
 8104ef2:	e00f      	b.n	8104f14 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104ef4:	68fb      	ldr	r3, [r7, #12]
 8104ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ef8:	b29a      	uxth	r2, r3
 8104efa:	68fb      	ldr	r3, [r7, #12]
 8104efc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104efe:	68fb      	ldr	r3, [r7, #12]
 8104f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104f02:	b2da      	uxtb	r2, r3
 8104f04:	8979      	ldrh	r1, [r7, #10]
 8104f06:	4b4a      	ldr	r3, [pc, #296]	; (8105030 <HAL_I2C_Mem_Read+0x22c>)
 8104f08:	9300      	str	r3, [sp, #0]
 8104f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104f0e:	68f8      	ldr	r0, [r7, #12]
 8104f10:	f000 fb06 	bl	8105520 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8104f14:	697b      	ldr	r3, [r7, #20]
 8104f16:	9300      	str	r3, [sp, #0]
 8104f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f1a:	2200      	movs	r2, #0
 8104f1c:	2104      	movs	r1, #4
 8104f1e:	68f8      	ldr	r0, [r7, #12]
 8104f20:	f000 f956 	bl	81051d0 <I2C_WaitOnFlagUntilTimeout>
 8104f24:	4603      	mov	r3, r0
 8104f26:	2b00      	cmp	r3, #0
 8104f28:	d001      	beq.n	8104f2e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8104f2a:	2301      	movs	r3, #1
 8104f2c:	e07c      	b.n	8105028 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104f2e:	68fb      	ldr	r3, [r7, #12]
 8104f30:	681b      	ldr	r3, [r3, #0]
 8104f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104f34:	68fb      	ldr	r3, [r7, #12]
 8104f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f38:	b2d2      	uxtb	r2, r2
 8104f3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104f3c:	68fb      	ldr	r3, [r7, #12]
 8104f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f40:	1c5a      	adds	r2, r3, #1
 8104f42:	68fb      	ldr	r3, [r7, #12]
 8104f44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8104f46:	68fb      	ldr	r3, [r7, #12]
 8104f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104f4a:	3b01      	subs	r3, #1
 8104f4c:	b29a      	uxth	r2, r3
 8104f4e:	68fb      	ldr	r3, [r7, #12]
 8104f50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104f52:	68fb      	ldr	r3, [r7, #12]
 8104f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104f56:	b29b      	uxth	r3, r3
 8104f58:	3b01      	subs	r3, #1
 8104f5a:	b29a      	uxth	r2, r3
 8104f5c:	68fb      	ldr	r3, [r7, #12]
 8104f5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104f60:	68fb      	ldr	r3, [r7, #12]
 8104f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104f64:	b29b      	uxth	r3, r3
 8104f66:	2b00      	cmp	r3, #0
 8104f68:	d034      	beq.n	8104fd4 <HAL_I2C_Mem_Read+0x1d0>
 8104f6a:	68fb      	ldr	r3, [r7, #12]
 8104f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104f6e:	2b00      	cmp	r3, #0
 8104f70:	d130      	bne.n	8104fd4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104f72:	697b      	ldr	r3, [r7, #20]
 8104f74:	9300      	str	r3, [sp, #0]
 8104f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f78:	2200      	movs	r2, #0
 8104f7a:	2180      	movs	r1, #128	; 0x80
 8104f7c:	68f8      	ldr	r0, [r7, #12]
 8104f7e:	f000 f927 	bl	81051d0 <I2C_WaitOnFlagUntilTimeout>
 8104f82:	4603      	mov	r3, r0
 8104f84:	2b00      	cmp	r3, #0
 8104f86:	d001      	beq.n	8104f8c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8104f88:	2301      	movs	r3, #1
 8104f8a:	e04d      	b.n	8105028 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104f8c:	68fb      	ldr	r3, [r7, #12]
 8104f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104f90:	b29b      	uxth	r3, r3
 8104f92:	2bff      	cmp	r3, #255	; 0xff
 8104f94:	d90e      	bls.n	8104fb4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104f96:	68fb      	ldr	r3, [r7, #12]
 8104f98:	22ff      	movs	r2, #255	; 0xff
 8104f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8104f9c:	68fb      	ldr	r3, [r7, #12]
 8104f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104fa0:	b2da      	uxtb	r2, r3
 8104fa2:	8979      	ldrh	r1, [r7, #10]
 8104fa4:	2300      	movs	r3, #0
 8104fa6:	9300      	str	r3, [sp, #0]
 8104fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104fac:	68f8      	ldr	r0, [r7, #12]
 8104fae:	f000 fab7 	bl	8105520 <I2C_TransferConfig>
 8104fb2:	e00f      	b.n	8104fd4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104fb4:	68fb      	ldr	r3, [r7, #12]
 8104fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104fb8:	b29a      	uxth	r2, r3
 8104fba:	68fb      	ldr	r3, [r7, #12]
 8104fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104fbe:	68fb      	ldr	r3, [r7, #12]
 8104fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104fc2:	b2da      	uxtb	r2, r3
 8104fc4:	8979      	ldrh	r1, [r7, #10]
 8104fc6:	2300      	movs	r3, #0
 8104fc8:	9300      	str	r3, [sp, #0]
 8104fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104fce:	68f8      	ldr	r0, [r7, #12]
 8104fd0:	f000 faa6 	bl	8105520 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8104fd4:	68fb      	ldr	r3, [r7, #12]
 8104fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104fd8:	b29b      	uxth	r3, r3
 8104fda:	2b00      	cmp	r3, #0
 8104fdc:	d19a      	bne.n	8104f14 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104fde:	697a      	ldr	r2, [r7, #20]
 8104fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104fe2:	68f8      	ldr	r0, [r7, #12]
 8104fe4:	f000 f974 	bl	81052d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104fe8:	4603      	mov	r3, r0
 8104fea:	2b00      	cmp	r3, #0
 8104fec:	d001      	beq.n	8104ff2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8104fee:	2301      	movs	r3, #1
 8104ff0:	e01a      	b.n	8105028 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104ff2:	68fb      	ldr	r3, [r7, #12]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	2220      	movs	r2, #32
 8104ff8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104ffa:	68fb      	ldr	r3, [r7, #12]
 8104ffc:	681b      	ldr	r3, [r3, #0]
 8104ffe:	6859      	ldr	r1, [r3, #4]
 8105000:	68fb      	ldr	r3, [r7, #12]
 8105002:	681a      	ldr	r2, [r3, #0]
 8105004:	4b0b      	ldr	r3, [pc, #44]	; (8105034 <HAL_I2C_Mem_Read+0x230>)
 8105006:	400b      	ands	r3, r1
 8105008:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810500a:	68fb      	ldr	r3, [r7, #12]
 810500c:	2220      	movs	r2, #32
 810500e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105012:	68fb      	ldr	r3, [r7, #12]
 8105014:	2200      	movs	r2, #0
 8105016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810501a:	68fb      	ldr	r3, [r7, #12]
 810501c:	2200      	movs	r2, #0
 810501e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105022:	2300      	movs	r3, #0
 8105024:	e000      	b.n	8105028 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8105026:	2302      	movs	r3, #2
  }
}
 8105028:	4618      	mov	r0, r3
 810502a:	3718      	adds	r7, #24
 810502c:	46bd      	mov	sp, r7
 810502e:	bd80      	pop	{r7, pc}
 8105030:	80002400 	.word	0x80002400
 8105034:	fe00e800 	.word	0xfe00e800

08105038 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8105038:	b580      	push	{r7, lr}
 810503a:	b086      	sub	sp, #24
 810503c:	af02      	add	r7, sp, #8
 810503e:	60f8      	str	r0, [r7, #12]
 8105040:	4608      	mov	r0, r1
 8105042:	4611      	mov	r1, r2
 8105044:	461a      	mov	r2, r3
 8105046:	4603      	mov	r3, r0
 8105048:	817b      	strh	r3, [r7, #10]
 810504a:	460b      	mov	r3, r1
 810504c:	813b      	strh	r3, [r7, #8]
 810504e:	4613      	mov	r3, r2
 8105050:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8105052:	88fb      	ldrh	r3, [r7, #6]
 8105054:	b2da      	uxtb	r2, r3
 8105056:	8979      	ldrh	r1, [r7, #10]
 8105058:	4b20      	ldr	r3, [pc, #128]	; (81050dc <I2C_RequestMemoryWrite+0xa4>)
 810505a:	9300      	str	r3, [sp, #0]
 810505c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105060:	68f8      	ldr	r0, [r7, #12]
 8105062:	f000 fa5d 	bl	8105520 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105066:	69fa      	ldr	r2, [r7, #28]
 8105068:	69b9      	ldr	r1, [r7, #24]
 810506a:	68f8      	ldr	r0, [r7, #12]
 810506c:	f000 f8f0 	bl	8105250 <I2C_WaitOnTXISFlagUntilTimeout>
 8105070:	4603      	mov	r3, r0
 8105072:	2b00      	cmp	r3, #0
 8105074:	d001      	beq.n	810507a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8105076:	2301      	movs	r3, #1
 8105078:	e02c      	b.n	81050d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810507a:	88fb      	ldrh	r3, [r7, #6]
 810507c:	2b01      	cmp	r3, #1
 810507e:	d105      	bne.n	810508c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105080:	893b      	ldrh	r3, [r7, #8]
 8105082:	b2da      	uxtb	r2, r3
 8105084:	68fb      	ldr	r3, [r7, #12]
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	629a      	str	r2, [r3, #40]	; 0x28
 810508a:	e015      	b.n	81050b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810508c:	893b      	ldrh	r3, [r7, #8]
 810508e:	0a1b      	lsrs	r3, r3, #8
 8105090:	b29b      	uxth	r3, r3
 8105092:	b2da      	uxtb	r2, r3
 8105094:	68fb      	ldr	r3, [r7, #12]
 8105096:	681b      	ldr	r3, [r3, #0]
 8105098:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810509a:	69fa      	ldr	r2, [r7, #28]
 810509c:	69b9      	ldr	r1, [r7, #24]
 810509e:	68f8      	ldr	r0, [r7, #12]
 81050a0:	f000 f8d6 	bl	8105250 <I2C_WaitOnTXISFlagUntilTimeout>
 81050a4:	4603      	mov	r3, r0
 81050a6:	2b00      	cmp	r3, #0
 81050a8:	d001      	beq.n	81050ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 81050aa:	2301      	movs	r3, #1
 81050ac:	e012      	b.n	81050d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81050ae:	893b      	ldrh	r3, [r7, #8]
 81050b0:	b2da      	uxtb	r2, r3
 81050b2:	68fb      	ldr	r3, [r7, #12]
 81050b4:	681b      	ldr	r3, [r3, #0]
 81050b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81050b8:	69fb      	ldr	r3, [r7, #28]
 81050ba:	9300      	str	r3, [sp, #0]
 81050bc:	69bb      	ldr	r3, [r7, #24]
 81050be:	2200      	movs	r2, #0
 81050c0:	2180      	movs	r1, #128	; 0x80
 81050c2:	68f8      	ldr	r0, [r7, #12]
 81050c4:	f000 f884 	bl	81051d0 <I2C_WaitOnFlagUntilTimeout>
 81050c8:	4603      	mov	r3, r0
 81050ca:	2b00      	cmp	r3, #0
 81050cc:	d001      	beq.n	81050d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81050ce:	2301      	movs	r3, #1
 81050d0:	e000      	b.n	81050d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81050d2:	2300      	movs	r3, #0
}
 81050d4:	4618      	mov	r0, r3
 81050d6:	3710      	adds	r7, #16
 81050d8:	46bd      	mov	sp, r7
 81050da:	bd80      	pop	{r7, pc}
 81050dc:	80002000 	.word	0x80002000

081050e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 81050e0:	b580      	push	{r7, lr}
 81050e2:	b086      	sub	sp, #24
 81050e4:	af02      	add	r7, sp, #8
 81050e6:	60f8      	str	r0, [r7, #12]
 81050e8:	4608      	mov	r0, r1
 81050ea:	4611      	mov	r1, r2
 81050ec:	461a      	mov	r2, r3
 81050ee:	4603      	mov	r3, r0
 81050f0:	817b      	strh	r3, [r7, #10]
 81050f2:	460b      	mov	r3, r1
 81050f4:	813b      	strh	r3, [r7, #8]
 81050f6:	4613      	mov	r3, r2
 81050f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 81050fa:	88fb      	ldrh	r3, [r7, #6]
 81050fc:	b2da      	uxtb	r2, r3
 81050fe:	8979      	ldrh	r1, [r7, #10]
 8105100:	4b20      	ldr	r3, [pc, #128]	; (8105184 <I2C_RequestMemoryRead+0xa4>)
 8105102:	9300      	str	r3, [sp, #0]
 8105104:	2300      	movs	r3, #0
 8105106:	68f8      	ldr	r0, [r7, #12]
 8105108:	f000 fa0a 	bl	8105520 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810510c:	69fa      	ldr	r2, [r7, #28]
 810510e:	69b9      	ldr	r1, [r7, #24]
 8105110:	68f8      	ldr	r0, [r7, #12]
 8105112:	f000 f89d 	bl	8105250 <I2C_WaitOnTXISFlagUntilTimeout>
 8105116:	4603      	mov	r3, r0
 8105118:	2b00      	cmp	r3, #0
 810511a:	d001      	beq.n	8105120 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810511c:	2301      	movs	r3, #1
 810511e:	e02c      	b.n	810517a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8105120:	88fb      	ldrh	r3, [r7, #6]
 8105122:	2b01      	cmp	r3, #1
 8105124:	d105      	bne.n	8105132 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105126:	893b      	ldrh	r3, [r7, #8]
 8105128:	b2da      	uxtb	r2, r3
 810512a:	68fb      	ldr	r3, [r7, #12]
 810512c:	681b      	ldr	r3, [r3, #0]
 810512e:	629a      	str	r2, [r3, #40]	; 0x28
 8105130:	e015      	b.n	810515e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8105132:	893b      	ldrh	r3, [r7, #8]
 8105134:	0a1b      	lsrs	r3, r3, #8
 8105136:	b29b      	uxth	r3, r3
 8105138:	b2da      	uxtb	r2, r3
 810513a:	68fb      	ldr	r3, [r7, #12]
 810513c:	681b      	ldr	r3, [r3, #0]
 810513e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105140:	69fa      	ldr	r2, [r7, #28]
 8105142:	69b9      	ldr	r1, [r7, #24]
 8105144:	68f8      	ldr	r0, [r7, #12]
 8105146:	f000 f883 	bl	8105250 <I2C_WaitOnTXISFlagUntilTimeout>
 810514a:	4603      	mov	r3, r0
 810514c:	2b00      	cmp	r3, #0
 810514e:	d001      	beq.n	8105154 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8105150:	2301      	movs	r3, #1
 8105152:	e012      	b.n	810517a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105154:	893b      	ldrh	r3, [r7, #8]
 8105156:	b2da      	uxtb	r2, r3
 8105158:	68fb      	ldr	r3, [r7, #12]
 810515a:	681b      	ldr	r3, [r3, #0]
 810515c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810515e:	69fb      	ldr	r3, [r7, #28]
 8105160:	9300      	str	r3, [sp, #0]
 8105162:	69bb      	ldr	r3, [r7, #24]
 8105164:	2200      	movs	r2, #0
 8105166:	2140      	movs	r1, #64	; 0x40
 8105168:	68f8      	ldr	r0, [r7, #12]
 810516a:	f000 f831 	bl	81051d0 <I2C_WaitOnFlagUntilTimeout>
 810516e:	4603      	mov	r3, r0
 8105170:	2b00      	cmp	r3, #0
 8105172:	d001      	beq.n	8105178 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8105174:	2301      	movs	r3, #1
 8105176:	e000      	b.n	810517a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8105178:	2300      	movs	r3, #0
}
 810517a:	4618      	mov	r0, r3
 810517c:	3710      	adds	r7, #16
 810517e:	46bd      	mov	sp, r7
 8105180:	bd80      	pop	{r7, pc}
 8105182:	bf00      	nop
 8105184:	80002000 	.word	0x80002000

08105188 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8105188:	b480      	push	{r7}
 810518a:	b083      	sub	sp, #12
 810518c:	af00      	add	r7, sp, #0
 810518e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	699b      	ldr	r3, [r3, #24]
 8105196:	f003 0302 	and.w	r3, r3, #2
 810519a:	2b02      	cmp	r3, #2
 810519c:	d103      	bne.n	81051a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810519e:	687b      	ldr	r3, [r7, #4]
 81051a0:	681b      	ldr	r3, [r3, #0]
 81051a2:	2200      	movs	r2, #0
 81051a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81051a6:	687b      	ldr	r3, [r7, #4]
 81051a8:	681b      	ldr	r3, [r3, #0]
 81051aa:	699b      	ldr	r3, [r3, #24]
 81051ac:	f003 0301 	and.w	r3, r3, #1
 81051b0:	2b01      	cmp	r3, #1
 81051b2:	d007      	beq.n	81051c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	699a      	ldr	r2, [r3, #24]
 81051ba:	687b      	ldr	r3, [r7, #4]
 81051bc:	681b      	ldr	r3, [r3, #0]
 81051be:	f042 0201 	orr.w	r2, r2, #1
 81051c2:	619a      	str	r2, [r3, #24]
  }
}
 81051c4:	bf00      	nop
 81051c6:	370c      	adds	r7, #12
 81051c8:	46bd      	mov	sp, r7
 81051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051ce:	4770      	bx	lr

081051d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81051d0:	b580      	push	{r7, lr}
 81051d2:	b084      	sub	sp, #16
 81051d4:	af00      	add	r7, sp, #0
 81051d6:	60f8      	str	r0, [r7, #12]
 81051d8:	60b9      	str	r1, [r7, #8]
 81051da:	603b      	str	r3, [r7, #0]
 81051dc:	4613      	mov	r3, r2
 81051de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81051e0:	e022      	b.n	8105228 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81051e2:	683b      	ldr	r3, [r7, #0]
 81051e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81051e8:	d01e      	beq.n	8105228 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81051ea:	f7fe f83b 	bl	8103264 <HAL_GetTick>
 81051ee:	4602      	mov	r2, r0
 81051f0:	69bb      	ldr	r3, [r7, #24]
 81051f2:	1ad3      	subs	r3, r2, r3
 81051f4:	683a      	ldr	r2, [r7, #0]
 81051f6:	429a      	cmp	r2, r3
 81051f8:	d302      	bcc.n	8105200 <I2C_WaitOnFlagUntilTimeout+0x30>
 81051fa:	683b      	ldr	r3, [r7, #0]
 81051fc:	2b00      	cmp	r3, #0
 81051fe:	d113      	bne.n	8105228 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105200:	68fb      	ldr	r3, [r7, #12]
 8105202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105204:	f043 0220 	orr.w	r2, r3, #32
 8105208:	68fb      	ldr	r3, [r7, #12]
 810520a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810520c:	68fb      	ldr	r3, [r7, #12]
 810520e:	2220      	movs	r2, #32
 8105210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105214:	68fb      	ldr	r3, [r7, #12]
 8105216:	2200      	movs	r2, #0
 8105218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810521c:	68fb      	ldr	r3, [r7, #12]
 810521e:	2200      	movs	r2, #0
 8105220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8105224:	2301      	movs	r3, #1
 8105226:	e00f      	b.n	8105248 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105228:	68fb      	ldr	r3, [r7, #12]
 810522a:	681b      	ldr	r3, [r3, #0]
 810522c:	699a      	ldr	r2, [r3, #24]
 810522e:	68bb      	ldr	r3, [r7, #8]
 8105230:	4013      	ands	r3, r2
 8105232:	68ba      	ldr	r2, [r7, #8]
 8105234:	429a      	cmp	r2, r3
 8105236:	bf0c      	ite	eq
 8105238:	2301      	moveq	r3, #1
 810523a:	2300      	movne	r3, #0
 810523c:	b2db      	uxtb	r3, r3
 810523e:	461a      	mov	r2, r3
 8105240:	79fb      	ldrb	r3, [r7, #7]
 8105242:	429a      	cmp	r2, r3
 8105244:	d0cd      	beq.n	81051e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8105246:	2300      	movs	r3, #0
}
 8105248:	4618      	mov	r0, r3
 810524a:	3710      	adds	r7, #16
 810524c:	46bd      	mov	sp, r7
 810524e:	bd80      	pop	{r7, pc}

08105250 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105250:	b580      	push	{r7, lr}
 8105252:	b084      	sub	sp, #16
 8105254:	af00      	add	r7, sp, #0
 8105256:	60f8      	str	r0, [r7, #12]
 8105258:	60b9      	str	r1, [r7, #8]
 810525a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810525c:	e02c      	b.n	81052b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810525e:	687a      	ldr	r2, [r7, #4]
 8105260:	68b9      	ldr	r1, [r7, #8]
 8105262:	68f8      	ldr	r0, [r7, #12]
 8105264:	f000 f870 	bl	8105348 <I2C_IsErrorOccurred>
 8105268:	4603      	mov	r3, r0
 810526a:	2b00      	cmp	r3, #0
 810526c:	d001      	beq.n	8105272 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810526e:	2301      	movs	r3, #1
 8105270:	e02a      	b.n	81052c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105272:	68bb      	ldr	r3, [r7, #8]
 8105274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105278:	d01e      	beq.n	81052b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810527a:	f7fd fff3 	bl	8103264 <HAL_GetTick>
 810527e:	4602      	mov	r2, r0
 8105280:	687b      	ldr	r3, [r7, #4]
 8105282:	1ad3      	subs	r3, r2, r3
 8105284:	68ba      	ldr	r2, [r7, #8]
 8105286:	429a      	cmp	r2, r3
 8105288:	d302      	bcc.n	8105290 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810528a:	68bb      	ldr	r3, [r7, #8]
 810528c:	2b00      	cmp	r3, #0
 810528e:	d113      	bne.n	81052b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105290:	68fb      	ldr	r3, [r7, #12]
 8105292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105294:	f043 0220 	orr.w	r2, r3, #32
 8105298:	68fb      	ldr	r3, [r7, #12]
 810529a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810529c:	68fb      	ldr	r3, [r7, #12]
 810529e:	2220      	movs	r2, #32
 81052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81052a4:	68fb      	ldr	r3, [r7, #12]
 81052a6:	2200      	movs	r2, #0
 81052a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81052ac:	68fb      	ldr	r3, [r7, #12]
 81052ae:	2200      	movs	r2, #0
 81052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81052b4:	2301      	movs	r3, #1
 81052b6:	e007      	b.n	81052c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81052b8:	68fb      	ldr	r3, [r7, #12]
 81052ba:	681b      	ldr	r3, [r3, #0]
 81052bc:	699b      	ldr	r3, [r3, #24]
 81052be:	f003 0302 	and.w	r3, r3, #2
 81052c2:	2b02      	cmp	r3, #2
 81052c4:	d1cb      	bne.n	810525e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81052c6:	2300      	movs	r3, #0
}
 81052c8:	4618      	mov	r0, r3
 81052ca:	3710      	adds	r7, #16
 81052cc:	46bd      	mov	sp, r7
 81052ce:	bd80      	pop	{r7, pc}

081052d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81052d0:	b580      	push	{r7, lr}
 81052d2:	b084      	sub	sp, #16
 81052d4:	af00      	add	r7, sp, #0
 81052d6:	60f8      	str	r0, [r7, #12]
 81052d8:	60b9      	str	r1, [r7, #8]
 81052da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81052dc:	e028      	b.n	8105330 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81052de:	687a      	ldr	r2, [r7, #4]
 81052e0:	68b9      	ldr	r1, [r7, #8]
 81052e2:	68f8      	ldr	r0, [r7, #12]
 81052e4:	f000 f830 	bl	8105348 <I2C_IsErrorOccurred>
 81052e8:	4603      	mov	r3, r0
 81052ea:	2b00      	cmp	r3, #0
 81052ec:	d001      	beq.n	81052f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81052ee:	2301      	movs	r3, #1
 81052f0:	e026      	b.n	8105340 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81052f2:	f7fd ffb7 	bl	8103264 <HAL_GetTick>
 81052f6:	4602      	mov	r2, r0
 81052f8:	687b      	ldr	r3, [r7, #4]
 81052fa:	1ad3      	subs	r3, r2, r3
 81052fc:	68ba      	ldr	r2, [r7, #8]
 81052fe:	429a      	cmp	r2, r3
 8105300:	d302      	bcc.n	8105308 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8105302:	68bb      	ldr	r3, [r7, #8]
 8105304:	2b00      	cmp	r3, #0
 8105306:	d113      	bne.n	8105330 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105308:	68fb      	ldr	r3, [r7, #12]
 810530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810530c:	f043 0220 	orr.w	r2, r3, #32
 8105310:	68fb      	ldr	r3, [r7, #12]
 8105312:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8105314:	68fb      	ldr	r3, [r7, #12]
 8105316:	2220      	movs	r2, #32
 8105318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 810531c:	68fb      	ldr	r3, [r7, #12]
 810531e:	2200      	movs	r2, #0
 8105320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105324:	68fb      	ldr	r3, [r7, #12]
 8105326:	2200      	movs	r2, #0
 8105328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 810532c:	2301      	movs	r3, #1
 810532e:	e007      	b.n	8105340 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105330:	68fb      	ldr	r3, [r7, #12]
 8105332:	681b      	ldr	r3, [r3, #0]
 8105334:	699b      	ldr	r3, [r3, #24]
 8105336:	f003 0320 	and.w	r3, r3, #32
 810533a:	2b20      	cmp	r3, #32
 810533c:	d1cf      	bne.n	81052de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 810533e:	2300      	movs	r3, #0
}
 8105340:	4618      	mov	r0, r3
 8105342:	3710      	adds	r7, #16
 8105344:	46bd      	mov	sp, r7
 8105346:	bd80      	pop	{r7, pc}

08105348 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105348:	b580      	push	{r7, lr}
 810534a:	b08a      	sub	sp, #40	; 0x28
 810534c:	af00      	add	r7, sp, #0
 810534e:	60f8      	str	r0, [r7, #12]
 8105350:	60b9      	str	r1, [r7, #8]
 8105352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105354:	2300      	movs	r3, #0
 8105356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810535a:	68fb      	ldr	r3, [r7, #12]
 810535c:	681b      	ldr	r3, [r3, #0]
 810535e:	699b      	ldr	r3, [r3, #24]
 8105360:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8105362:	2300      	movs	r3, #0
 8105364:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8105366:	687b      	ldr	r3, [r7, #4]
 8105368:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810536a:	69bb      	ldr	r3, [r7, #24]
 810536c:	f003 0310 	and.w	r3, r3, #16
 8105370:	2b00      	cmp	r3, #0
 8105372:	d075      	beq.n	8105460 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105374:	68fb      	ldr	r3, [r7, #12]
 8105376:	681b      	ldr	r3, [r3, #0]
 8105378:	2210      	movs	r2, #16
 810537a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810537c:	e056      	b.n	810542c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810537e:	68bb      	ldr	r3, [r7, #8]
 8105380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105384:	d052      	beq.n	810542c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8105386:	f7fd ff6d 	bl	8103264 <HAL_GetTick>
 810538a:	4602      	mov	r2, r0
 810538c:	69fb      	ldr	r3, [r7, #28]
 810538e:	1ad3      	subs	r3, r2, r3
 8105390:	68ba      	ldr	r2, [r7, #8]
 8105392:	429a      	cmp	r2, r3
 8105394:	d302      	bcc.n	810539c <I2C_IsErrorOccurred+0x54>
 8105396:	68bb      	ldr	r3, [r7, #8]
 8105398:	2b00      	cmp	r3, #0
 810539a:	d147      	bne.n	810542c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810539c:	68fb      	ldr	r3, [r7, #12]
 810539e:	681b      	ldr	r3, [r3, #0]
 81053a0:	685b      	ldr	r3, [r3, #4]
 81053a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81053a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81053a8:	68fb      	ldr	r3, [r7, #12]
 81053aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81053ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81053b0:	68fb      	ldr	r3, [r7, #12]
 81053b2:	681b      	ldr	r3, [r3, #0]
 81053b4:	699b      	ldr	r3, [r3, #24]
 81053b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81053ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81053be:	d12e      	bne.n	810541e <I2C_IsErrorOccurred+0xd6>
 81053c0:	697b      	ldr	r3, [r7, #20]
 81053c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81053c6:	d02a      	beq.n	810541e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 81053c8:	7cfb      	ldrb	r3, [r7, #19]
 81053ca:	2b20      	cmp	r3, #32
 81053cc:	d027      	beq.n	810541e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81053ce:	68fb      	ldr	r3, [r7, #12]
 81053d0:	681b      	ldr	r3, [r3, #0]
 81053d2:	685a      	ldr	r2, [r3, #4]
 81053d4:	68fb      	ldr	r3, [r7, #12]
 81053d6:	681b      	ldr	r3, [r3, #0]
 81053d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81053dc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81053de:	f7fd ff41 	bl	8103264 <HAL_GetTick>
 81053e2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81053e4:	e01b      	b.n	810541e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81053e6:	f7fd ff3d 	bl	8103264 <HAL_GetTick>
 81053ea:	4602      	mov	r2, r0
 81053ec:	69fb      	ldr	r3, [r7, #28]
 81053ee:	1ad3      	subs	r3, r2, r3
 81053f0:	2b19      	cmp	r3, #25
 81053f2:	d914      	bls.n	810541e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81053f4:	68fb      	ldr	r3, [r7, #12]
 81053f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81053f8:	f043 0220 	orr.w	r2, r3, #32
 81053fc:	68fb      	ldr	r3, [r7, #12]
 81053fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8105400:	68fb      	ldr	r3, [r7, #12]
 8105402:	2220      	movs	r2, #32
 8105404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8105408:	68fb      	ldr	r3, [r7, #12]
 810540a:	2200      	movs	r2, #0
 810540c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8105410:	68fb      	ldr	r3, [r7, #12]
 8105412:	2200      	movs	r2, #0
 8105414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8105418:	2301      	movs	r3, #1
 810541a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810541e:	68fb      	ldr	r3, [r7, #12]
 8105420:	681b      	ldr	r3, [r3, #0]
 8105422:	699b      	ldr	r3, [r3, #24]
 8105424:	f003 0320 	and.w	r3, r3, #32
 8105428:	2b20      	cmp	r3, #32
 810542a:	d1dc      	bne.n	81053e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810542c:	68fb      	ldr	r3, [r7, #12]
 810542e:	681b      	ldr	r3, [r3, #0]
 8105430:	699b      	ldr	r3, [r3, #24]
 8105432:	f003 0320 	and.w	r3, r3, #32
 8105436:	2b20      	cmp	r3, #32
 8105438:	d003      	beq.n	8105442 <I2C_IsErrorOccurred+0xfa>
 810543a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810543e:	2b00      	cmp	r3, #0
 8105440:	d09d      	beq.n	810537e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8105442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8105446:	2b00      	cmp	r3, #0
 8105448:	d103      	bne.n	8105452 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810544a:	68fb      	ldr	r3, [r7, #12]
 810544c:	681b      	ldr	r3, [r3, #0]
 810544e:	2220      	movs	r2, #32
 8105450:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8105452:	6a3b      	ldr	r3, [r7, #32]
 8105454:	f043 0304 	orr.w	r3, r3, #4
 8105458:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810545a:	2301      	movs	r3, #1
 810545c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8105460:	68fb      	ldr	r3, [r7, #12]
 8105462:	681b      	ldr	r3, [r3, #0]
 8105464:	699b      	ldr	r3, [r3, #24]
 8105466:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8105468:	69bb      	ldr	r3, [r7, #24]
 810546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810546e:	2b00      	cmp	r3, #0
 8105470:	d00b      	beq.n	810548a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8105472:	6a3b      	ldr	r3, [r7, #32]
 8105474:	f043 0301 	orr.w	r3, r3, #1
 8105478:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810547a:	68fb      	ldr	r3, [r7, #12]
 810547c:	681b      	ldr	r3, [r3, #0]
 810547e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8105482:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8105484:	2301      	movs	r3, #1
 8105486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810548a:	69bb      	ldr	r3, [r7, #24]
 810548c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8105490:	2b00      	cmp	r3, #0
 8105492:	d00b      	beq.n	81054ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8105494:	6a3b      	ldr	r3, [r7, #32]
 8105496:	f043 0308 	orr.w	r3, r3, #8
 810549a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810549c:	68fb      	ldr	r3, [r7, #12]
 810549e:	681b      	ldr	r3, [r3, #0]
 81054a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81054a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81054a6:	2301      	movs	r3, #1
 81054a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81054ac:	69bb      	ldr	r3, [r7, #24]
 81054ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81054b2:	2b00      	cmp	r3, #0
 81054b4:	d00b      	beq.n	81054ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81054b6:	6a3b      	ldr	r3, [r7, #32]
 81054b8:	f043 0302 	orr.w	r3, r3, #2
 81054bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81054be:	68fb      	ldr	r3, [r7, #12]
 81054c0:	681b      	ldr	r3, [r3, #0]
 81054c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 81054c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81054c8:	2301      	movs	r3, #1
 81054ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 81054ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81054d2:	2b00      	cmp	r3, #0
 81054d4:	d01c      	beq.n	8105510 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81054d6:	68f8      	ldr	r0, [r7, #12]
 81054d8:	f7ff fe56 	bl	8105188 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81054dc:	68fb      	ldr	r3, [r7, #12]
 81054de:	681b      	ldr	r3, [r3, #0]
 81054e0:	6859      	ldr	r1, [r3, #4]
 81054e2:	68fb      	ldr	r3, [r7, #12]
 81054e4:	681a      	ldr	r2, [r3, #0]
 81054e6:	4b0d      	ldr	r3, [pc, #52]	; (810551c <I2C_IsErrorOccurred+0x1d4>)
 81054e8:	400b      	ands	r3, r1
 81054ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 81054ec:	68fb      	ldr	r3, [r7, #12]
 81054ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81054f0:	6a3b      	ldr	r3, [r7, #32]
 81054f2:	431a      	orrs	r2, r3
 81054f4:	68fb      	ldr	r3, [r7, #12]
 81054f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81054f8:	68fb      	ldr	r3, [r7, #12]
 81054fa:	2220      	movs	r2, #32
 81054fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8105500:	68fb      	ldr	r3, [r7, #12]
 8105502:	2200      	movs	r2, #0
 8105504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105508:	68fb      	ldr	r3, [r7, #12]
 810550a:	2200      	movs	r2, #0
 810550c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8105510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8105514:	4618      	mov	r0, r3
 8105516:	3728      	adds	r7, #40	; 0x28
 8105518:	46bd      	mov	sp, r7
 810551a:	bd80      	pop	{r7, pc}
 810551c:	fe00e800 	.word	0xfe00e800

08105520 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8105520:	b480      	push	{r7}
 8105522:	b087      	sub	sp, #28
 8105524:	af00      	add	r7, sp, #0
 8105526:	60f8      	str	r0, [r7, #12]
 8105528:	607b      	str	r3, [r7, #4]
 810552a:	460b      	mov	r3, r1
 810552c:	817b      	strh	r3, [r7, #10]
 810552e:	4613      	mov	r3, r2
 8105530:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105532:	897b      	ldrh	r3, [r7, #10]
 8105534:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8105538:	7a7b      	ldrb	r3, [r7, #9]
 810553a:	041b      	lsls	r3, r3, #16
 810553c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105540:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8105542:	687b      	ldr	r3, [r7, #4]
 8105544:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105546:	6a3b      	ldr	r3, [r7, #32]
 8105548:	4313      	orrs	r3, r2
 810554a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810554e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8105550:	68fb      	ldr	r3, [r7, #12]
 8105552:	681b      	ldr	r3, [r3, #0]
 8105554:	685a      	ldr	r2, [r3, #4]
 8105556:	6a3b      	ldr	r3, [r7, #32]
 8105558:	0d5b      	lsrs	r3, r3, #21
 810555a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 810555e:	4b08      	ldr	r3, [pc, #32]	; (8105580 <I2C_TransferConfig+0x60>)
 8105560:	430b      	orrs	r3, r1
 8105562:	43db      	mvns	r3, r3
 8105564:	ea02 0103 	and.w	r1, r2, r3
 8105568:	68fb      	ldr	r3, [r7, #12]
 810556a:	681b      	ldr	r3, [r3, #0]
 810556c:	697a      	ldr	r2, [r7, #20]
 810556e:	430a      	orrs	r2, r1
 8105570:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8105572:	bf00      	nop
 8105574:	371c      	adds	r7, #28
 8105576:	46bd      	mov	sp, r7
 8105578:	f85d 7b04 	ldr.w	r7, [sp], #4
 810557c:	4770      	bx	lr
 810557e:	bf00      	nop
 8105580:	03ff63ff 	.word	0x03ff63ff

08105584 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8105584:	b480      	push	{r7}
 8105586:	b083      	sub	sp, #12
 8105588:	af00      	add	r7, sp, #0
 810558a:	6078      	str	r0, [r7, #4]
 810558c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105594:	b2db      	uxtb	r3, r3
 8105596:	2b20      	cmp	r3, #32
 8105598:	d138      	bne.n	810560c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81055a0:	2b01      	cmp	r3, #1
 81055a2:	d101      	bne.n	81055a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81055a4:	2302      	movs	r3, #2
 81055a6:	e032      	b.n	810560e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81055a8:	687b      	ldr	r3, [r7, #4]
 81055aa:	2201      	movs	r2, #1
 81055ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	2224      	movs	r2, #36	; 0x24
 81055b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	681b      	ldr	r3, [r3, #0]
 81055bc:	681a      	ldr	r2, [r3, #0]
 81055be:	687b      	ldr	r3, [r7, #4]
 81055c0:	681b      	ldr	r3, [r3, #0]
 81055c2:	f022 0201 	bic.w	r2, r2, #1
 81055c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81055c8:	687b      	ldr	r3, [r7, #4]
 81055ca:	681b      	ldr	r3, [r3, #0]
 81055cc:	681a      	ldr	r2, [r3, #0]
 81055ce:	687b      	ldr	r3, [r7, #4]
 81055d0:	681b      	ldr	r3, [r3, #0]
 81055d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81055d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	681b      	ldr	r3, [r3, #0]
 81055dc:	6819      	ldr	r1, [r3, #0]
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	681b      	ldr	r3, [r3, #0]
 81055e2:	683a      	ldr	r2, [r7, #0]
 81055e4:	430a      	orrs	r2, r1
 81055e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81055e8:	687b      	ldr	r3, [r7, #4]
 81055ea:	681b      	ldr	r3, [r3, #0]
 81055ec:	681a      	ldr	r2, [r3, #0]
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	681b      	ldr	r3, [r3, #0]
 81055f2:	f042 0201 	orr.w	r2, r2, #1
 81055f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81055f8:	687b      	ldr	r3, [r7, #4]
 81055fa:	2220      	movs	r2, #32
 81055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105600:	687b      	ldr	r3, [r7, #4]
 8105602:	2200      	movs	r2, #0
 8105604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105608:	2300      	movs	r3, #0
 810560a:	e000      	b.n	810560e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810560c:	2302      	movs	r3, #2
  }
}
 810560e:	4618      	mov	r0, r3
 8105610:	370c      	adds	r7, #12
 8105612:	46bd      	mov	sp, r7
 8105614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105618:	4770      	bx	lr

0810561a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810561a:	b480      	push	{r7}
 810561c:	b085      	sub	sp, #20
 810561e:	af00      	add	r7, sp, #0
 8105620:	6078      	str	r0, [r7, #4]
 8105622:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105624:	687b      	ldr	r3, [r7, #4]
 8105626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810562a:	b2db      	uxtb	r3, r3
 810562c:	2b20      	cmp	r3, #32
 810562e:	d139      	bne.n	81056a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105630:	687b      	ldr	r3, [r7, #4]
 8105632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105636:	2b01      	cmp	r3, #1
 8105638:	d101      	bne.n	810563e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810563a:	2302      	movs	r3, #2
 810563c:	e033      	b.n	81056a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	2201      	movs	r2, #1
 8105642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	2224      	movs	r2, #36	; 0x24
 810564a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	681b      	ldr	r3, [r3, #0]
 8105652:	681a      	ldr	r2, [r3, #0]
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	f022 0201 	bic.w	r2, r2, #1
 810565c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810565e:	687b      	ldr	r3, [r7, #4]
 8105660:	681b      	ldr	r3, [r3, #0]
 8105662:	681b      	ldr	r3, [r3, #0]
 8105664:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8105666:	68fb      	ldr	r3, [r7, #12]
 8105668:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810566c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810566e:	683b      	ldr	r3, [r7, #0]
 8105670:	021b      	lsls	r3, r3, #8
 8105672:	68fa      	ldr	r2, [r7, #12]
 8105674:	4313      	orrs	r3, r2
 8105676:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	681b      	ldr	r3, [r3, #0]
 810567c:	68fa      	ldr	r2, [r7, #12]
 810567e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	681a      	ldr	r2, [r3, #0]
 8105686:	687b      	ldr	r3, [r7, #4]
 8105688:	681b      	ldr	r3, [r3, #0]
 810568a:	f042 0201 	orr.w	r2, r2, #1
 810568e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105690:	687b      	ldr	r3, [r7, #4]
 8105692:	2220      	movs	r2, #32
 8105694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105698:	687b      	ldr	r3, [r7, #4]
 810569a:	2200      	movs	r2, #0
 810569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81056a0:	2300      	movs	r3, #0
 81056a2:	e000      	b.n	81056a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81056a4:	2302      	movs	r3, #2
  }
}
 81056a6:	4618      	mov	r0, r3
 81056a8:	3714      	adds	r7, #20
 81056aa:	46bd      	mov	sp, r7
 81056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056b0:	4770      	bx	lr
	...

081056b4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81056b4:	b580      	push	{r7, lr}
 81056b6:	b084      	sub	sp, #16
 81056b8:	af00      	add	r7, sp, #0
 81056ba:	60f8      	str	r0, [r7, #12]
 81056bc:	460b      	mov	r3, r1
 81056be:	607a      	str	r2, [r7, #4]
 81056c0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81056c2:	4b37      	ldr	r3, [pc, #220]	; (81057a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81056c4:	681b      	ldr	r3, [r3, #0]
 81056c6:	f023 0201 	bic.w	r2, r3, #1
 81056ca:	4935      	ldr	r1, [pc, #212]	; (81057a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81056cc:	68fb      	ldr	r3, [r7, #12]
 81056ce:	4313      	orrs	r3, r2
 81056d0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	2b00      	cmp	r3, #0
 81056d6:	d123      	bne.n	8105720 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81056d8:	f7fe ffa0 	bl	810461c <HAL_GetCurrentCPUID>
 81056dc:	4603      	mov	r3, r0
 81056de:	2b03      	cmp	r3, #3
 81056e0:	d158      	bne.n	8105794 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81056e2:	4b2f      	ldr	r3, [pc, #188]	; (81057a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81056e4:	691b      	ldr	r3, [r3, #16]
 81056e6:	4a2e      	ldr	r2, [pc, #184]	; (81057a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81056e8:	f023 0301 	bic.w	r3, r3, #1
 81056ec:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81056ee:	4b2d      	ldr	r3, [pc, #180]	; (81057a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81056f0:	691b      	ldr	r3, [r3, #16]
 81056f2:	4a2c      	ldr	r2, [pc, #176]	; (81057a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81056f4:	f043 0304 	orr.w	r3, r3, #4
 81056f8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81056fa:	f3bf 8f4f 	dsb	sy
}
 81056fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105700:	f3bf 8f6f 	isb	sy
}
 8105704:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105706:	7afb      	ldrb	r3, [r7, #11]
 8105708:	2b01      	cmp	r3, #1
 810570a:	d101      	bne.n	8105710 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810570c:	bf30      	wfi
 810570e:	e000      	b.n	8105712 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105710:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105712:	4b24      	ldr	r3, [pc, #144]	; (81057a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105714:	691b      	ldr	r3, [r3, #16]
 8105716:	4a23      	ldr	r2, [pc, #140]	; (81057a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105718:	f023 0304 	bic.w	r3, r3, #4
 810571c:	6113      	str	r3, [r2, #16]
 810571e:	e03c      	b.n	810579a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105720:	687b      	ldr	r3, [r7, #4]
 8105722:	2b01      	cmp	r3, #1
 8105724:	d123      	bne.n	810576e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105726:	f7fe ff79 	bl	810461c <HAL_GetCurrentCPUID>
 810572a:	4603      	mov	r3, r0
 810572c:	2b01      	cmp	r3, #1
 810572e:	d133      	bne.n	8105798 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105730:	4b1b      	ldr	r3, [pc, #108]	; (81057a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105732:	695b      	ldr	r3, [r3, #20]
 8105734:	4a1a      	ldr	r2, [pc, #104]	; (81057a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105736:	f023 0302 	bic.w	r3, r3, #2
 810573a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810573c:	4b19      	ldr	r3, [pc, #100]	; (81057a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810573e:	691b      	ldr	r3, [r3, #16]
 8105740:	4a18      	ldr	r2, [pc, #96]	; (81057a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105742:	f043 0304 	orr.w	r3, r3, #4
 8105746:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105748:	f3bf 8f4f 	dsb	sy
}
 810574c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810574e:	f3bf 8f6f 	isb	sy
}
 8105752:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105754:	7afb      	ldrb	r3, [r7, #11]
 8105756:	2b01      	cmp	r3, #1
 8105758:	d101      	bne.n	810575e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810575a:	bf30      	wfi
 810575c:	e000      	b.n	8105760 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810575e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105760:	4b10      	ldr	r3, [pc, #64]	; (81057a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105762:	691b      	ldr	r3, [r3, #16]
 8105764:	4a0f      	ldr	r2, [pc, #60]	; (81057a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105766:	f023 0304 	bic.w	r3, r3, #4
 810576a:	6113      	str	r3, [r2, #16]
 810576c:	e015      	b.n	810579a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810576e:	f7fe ff55 	bl	810461c <HAL_GetCurrentCPUID>
 8105772:	4603      	mov	r3, r0
 8105774:	2b03      	cmp	r3, #3
 8105776:	d106      	bne.n	8105786 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105778:	4b09      	ldr	r3, [pc, #36]	; (81057a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810577a:	691b      	ldr	r3, [r3, #16]
 810577c:	4a08      	ldr	r2, [pc, #32]	; (81057a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810577e:	f023 0304 	bic.w	r3, r3, #4
 8105782:	6113      	str	r3, [r2, #16]
 8105784:	e009      	b.n	810579a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105786:	4b06      	ldr	r3, [pc, #24]	; (81057a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105788:	695b      	ldr	r3, [r3, #20]
 810578a:	4a05      	ldr	r2, [pc, #20]	; (81057a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810578c:	f023 0304 	bic.w	r3, r3, #4
 8105790:	6153      	str	r3, [r2, #20]
 8105792:	e002      	b.n	810579a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105794:	bf00      	nop
 8105796:	e000      	b.n	810579a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105798:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810579a:	3710      	adds	r7, #16
 810579c:	46bd      	mov	sp, r7
 810579e:	bd80      	pop	{r7, pc}
 81057a0:	58024800 	.word	0x58024800
 81057a4:	e000ed00 	.word	0xe000ed00

081057a8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81057a8:	b580      	push	{r7, lr}
 81057aa:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81057ac:	f7fe ff36 	bl	810461c <HAL_GetCurrentCPUID>
 81057b0:	4603      	mov	r3, r0
 81057b2:	2b03      	cmp	r3, #3
 81057b4:	d101      	bne.n	81057ba <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81057b6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81057b8:	e001      	b.n	81057be <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81057ba:	bf40      	sev
    __WFE ();
 81057bc:	bf20      	wfe
}
 81057be:	bf00      	nop
 81057c0:	bd80      	pop	{r7, pc}
	...

081057c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81057c4:	b480      	push	{r7}
 81057c6:	b089      	sub	sp, #36	; 0x24
 81057c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81057ca:	4bb3      	ldr	r3, [pc, #716]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057cc:	691b      	ldr	r3, [r3, #16]
 81057ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81057d2:	2b18      	cmp	r3, #24
 81057d4:	f200 8155 	bhi.w	8105a82 <HAL_RCC_GetSysClockFreq+0x2be>
 81057d8:	a201      	add	r2, pc, #4	; (adr r2, 81057e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81057de:	bf00      	nop
 81057e0:	08105845 	.word	0x08105845
 81057e4:	08105a83 	.word	0x08105a83
 81057e8:	08105a83 	.word	0x08105a83
 81057ec:	08105a83 	.word	0x08105a83
 81057f0:	08105a83 	.word	0x08105a83
 81057f4:	08105a83 	.word	0x08105a83
 81057f8:	08105a83 	.word	0x08105a83
 81057fc:	08105a83 	.word	0x08105a83
 8105800:	0810586b 	.word	0x0810586b
 8105804:	08105a83 	.word	0x08105a83
 8105808:	08105a83 	.word	0x08105a83
 810580c:	08105a83 	.word	0x08105a83
 8105810:	08105a83 	.word	0x08105a83
 8105814:	08105a83 	.word	0x08105a83
 8105818:	08105a83 	.word	0x08105a83
 810581c:	08105a83 	.word	0x08105a83
 8105820:	08105871 	.word	0x08105871
 8105824:	08105a83 	.word	0x08105a83
 8105828:	08105a83 	.word	0x08105a83
 810582c:	08105a83 	.word	0x08105a83
 8105830:	08105a83 	.word	0x08105a83
 8105834:	08105a83 	.word	0x08105a83
 8105838:	08105a83 	.word	0x08105a83
 810583c:	08105a83 	.word	0x08105a83
 8105840:	08105877 	.word	0x08105877
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105844:	4b94      	ldr	r3, [pc, #592]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105846:	681b      	ldr	r3, [r3, #0]
 8105848:	f003 0320 	and.w	r3, r3, #32
 810584c:	2b00      	cmp	r3, #0
 810584e:	d009      	beq.n	8105864 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105850:	4b91      	ldr	r3, [pc, #580]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105852:	681b      	ldr	r3, [r3, #0]
 8105854:	08db      	lsrs	r3, r3, #3
 8105856:	f003 0303 	and.w	r3, r3, #3
 810585a:	4a90      	ldr	r2, [pc, #576]	; (8105a9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810585c:	fa22 f303 	lsr.w	r3, r2, r3
 8105860:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8105862:	e111      	b.n	8105a88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105864:	4b8d      	ldr	r3, [pc, #564]	; (8105a9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105866:	61bb      	str	r3, [r7, #24]
    break;
 8105868:	e10e      	b.n	8105a88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810586a:	4b8d      	ldr	r3, [pc, #564]	; (8105aa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810586c:	61bb      	str	r3, [r7, #24]
    break;
 810586e:	e10b      	b.n	8105a88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8105870:	4b8c      	ldr	r3, [pc, #560]	; (8105aa4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8105872:	61bb      	str	r3, [r7, #24]
    break;
 8105874:	e108      	b.n	8105a88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105876:	4b88      	ldr	r3, [pc, #544]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810587a:	f003 0303 	and.w	r3, r3, #3
 810587e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8105880:	4b85      	ldr	r3, [pc, #532]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105884:	091b      	lsrs	r3, r3, #4
 8105886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810588a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810588c:	4b82      	ldr	r3, [pc, #520]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105890:	f003 0301 	and.w	r3, r3, #1
 8105894:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105896:	4b80      	ldr	r3, [pc, #512]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810589a:	08db      	lsrs	r3, r3, #3
 810589c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81058a0:	68fa      	ldr	r2, [r7, #12]
 81058a2:	fb02 f303 	mul.w	r3, r2, r3
 81058a6:	ee07 3a90 	vmov	s15, r3
 81058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81058b2:	693b      	ldr	r3, [r7, #16]
 81058b4:	2b00      	cmp	r3, #0
 81058b6:	f000 80e1 	beq.w	8105a7c <HAL_RCC_GetSysClockFreq+0x2b8>
 81058ba:	697b      	ldr	r3, [r7, #20]
 81058bc:	2b02      	cmp	r3, #2
 81058be:	f000 8083 	beq.w	81059c8 <HAL_RCC_GetSysClockFreq+0x204>
 81058c2:	697b      	ldr	r3, [r7, #20]
 81058c4:	2b02      	cmp	r3, #2
 81058c6:	f200 80a1 	bhi.w	8105a0c <HAL_RCC_GetSysClockFreq+0x248>
 81058ca:	697b      	ldr	r3, [r7, #20]
 81058cc:	2b00      	cmp	r3, #0
 81058ce:	d003      	beq.n	81058d8 <HAL_RCC_GetSysClockFreq+0x114>
 81058d0:	697b      	ldr	r3, [r7, #20]
 81058d2:	2b01      	cmp	r3, #1
 81058d4:	d056      	beq.n	8105984 <HAL_RCC_GetSysClockFreq+0x1c0>
 81058d6:	e099      	b.n	8105a0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81058d8:	4b6f      	ldr	r3, [pc, #444]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81058da:	681b      	ldr	r3, [r3, #0]
 81058dc:	f003 0320 	and.w	r3, r3, #32
 81058e0:	2b00      	cmp	r3, #0
 81058e2:	d02d      	beq.n	8105940 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81058e4:	4b6c      	ldr	r3, [pc, #432]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81058e6:	681b      	ldr	r3, [r3, #0]
 81058e8:	08db      	lsrs	r3, r3, #3
 81058ea:	f003 0303 	and.w	r3, r3, #3
 81058ee:	4a6b      	ldr	r2, [pc, #428]	; (8105a9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81058f0:	fa22 f303 	lsr.w	r3, r2, r3
 81058f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	ee07 3a90 	vmov	s15, r3
 81058fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105900:	693b      	ldr	r3, [r7, #16]
 8105902:	ee07 3a90 	vmov	s15, r3
 8105906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810590a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810590e:	4b62      	ldr	r3, [pc, #392]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105916:	ee07 3a90 	vmov	s15, r3
 810591a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810591e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105922:	eddf 5a61 	vldr	s11, [pc, #388]	; 8105aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810592a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810592e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105936:	ee67 7a27 	vmul.f32	s15, s14, s15
 810593a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810593e:	e087      	b.n	8105a50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105940:	693b      	ldr	r3, [r7, #16]
 8105942:	ee07 3a90 	vmov	s15, r3
 8105946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810594a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8105aac <HAL_RCC_GetSysClockFreq+0x2e8>
 810594e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105952:	4b51      	ldr	r3, [pc, #324]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810595a:	ee07 3a90 	vmov	s15, r3
 810595e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105962:	ed97 6a02 	vldr	s12, [r7, #8]
 8105966:	eddf 5a50 	vldr	s11, [pc, #320]	; 8105aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810596a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810596e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810597a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810597e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105982:	e065      	b.n	8105a50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105984:	693b      	ldr	r3, [r7, #16]
 8105986:	ee07 3a90 	vmov	s15, r3
 810598a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810598e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8105ab0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105996:	4b40      	ldr	r3, [pc, #256]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810599a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810599e:	ee07 3a90 	vmov	s15, r3
 81059a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81059aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8105aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81059ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81059b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81059b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81059ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81059be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81059c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81059c6:	e043      	b.n	8105a50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81059c8:	693b      	ldr	r3, [r7, #16]
 81059ca:	ee07 3a90 	vmov	s15, r3
 81059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8105ab4 <HAL_RCC_GetSysClockFreq+0x2f0>
 81059d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81059da:	4b2f      	ldr	r3, [pc, #188]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81059de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059e2:	ee07 3a90 	vmov	s15, r3
 81059e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81059ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8105aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81059f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81059f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81059fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81059fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105a0a:	e021      	b.n	8105a50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105a0c:	693b      	ldr	r3, [r7, #16]
 8105a0e:	ee07 3a90 	vmov	s15, r3
 8105a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8105ab0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a1e:	4b1e      	ldr	r3, [pc, #120]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a26:	ee07 3a90 	vmov	s15, r3
 8105a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105a32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8105aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105a4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8105a50:	4b11      	ldr	r3, [pc, #68]	; (8105a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105a54:	0a5b      	lsrs	r3, r3, #9
 8105a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105a5a:	3301      	adds	r3, #1
 8105a5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8105a5e:	683b      	ldr	r3, [r7, #0]
 8105a60:	ee07 3a90 	vmov	s15, r3
 8105a64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a74:	ee17 3a90 	vmov	r3, s15
 8105a78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8105a7a:	e005      	b.n	8105a88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8105a7c:	2300      	movs	r3, #0
 8105a7e:	61bb      	str	r3, [r7, #24]
    break;
 8105a80:	e002      	b.n	8105a88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8105a82:	4b07      	ldr	r3, [pc, #28]	; (8105aa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105a84:	61bb      	str	r3, [r7, #24]
    break;
 8105a86:	bf00      	nop
  }

  return sysclockfreq;
 8105a88:	69bb      	ldr	r3, [r7, #24]
}
 8105a8a:	4618      	mov	r0, r3
 8105a8c:	3724      	adds	r7, #36	; 0x24
 8105a8e:	46bd      	mov	sp, r7
 8105a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a94:	4770      	bx	lr
 8105a96:	bf00      	nop
 8105a98:	58024400 	.word	0x58024400
 8105a9c:	03d09000 	.word	0x03d09000
 8105aa0:	003d0900 	.word	0x003d0900
 8105aa4:	007a1200 	.word	0x007a1200
 8105aa8:	46000000 	.word	0x46000000
 8105aac:	4c742400 	.word	0x4c742400
 8105ab0:	4a742400 	.word	0x4a742400
 8105ab4:	4af42400 	.word	0x4af42400

08105ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8105ab8:	b580      	push	{r7, lr}
 8105aba:	b082      	sub	sp, #8
 8105abc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105abe:	f7ff fe81 	bl	81057c4 <HAL_RCC_GetSysClockFreq>
 8105ac2:	4602      	mov	r2, r0
 8105ac4:	4b11      	ldr	r3, [pc, #68]	; (8105b0c <HAL_RCC_GetHCLKFreq+0x54>)
 8105ac6:	699b      	ldr	r3, [r3, #24]
 8105ac8:	0a1b      	lsrs	r3, r3, #8
 8105aca:	f003 030f 	and.w	r3, r3, #15
 8105ace:	4910      	ldr	r1, [pc, #64]	; (8105b10 <HAL_RCC_GetHCLKFreq+0x58>)
 8105ad0:	5ccb      	ldrb	r3, [r1, r3]
 8105ad2:	f003 031f 	and.w	r3, r3, #31
 8105ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8105ada:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105adc:	4b0b      	ldr	r3, [pc, #44]	; (8105b0c <HAL_RCC_GetHCLKFreq+0x54>)
 8105ade:	699b      	ldr	r3, [r3, #24]
 8105ae0:	f003 030f 	and.w	r3, r3, #15
 8105ae4:	4a0a      	ldr	r2, [pc, #40]	; (8105b10 <HAL_RCC_GetHCLKFreq+0x58>)
 8105ae6:	5cd3      	ldrb	r3, [r2, r3]
 8105ae8:	f003 031f 	and.w	r3, r3, #31
 8105aec:	687a      	ldr	r2, [r7, #4]
 8105aee:	fa22 f303 	lsr.w	r3, r2, r3
 8105af2:	4a08      	ldr	r2, [pc, #32]	; (8105b14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105af4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105af6:	4b07      	ldr	r3, [pc, #28]	; (8105b14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	4a07      	ldr	r2, [pc, #28]	; (8105b18 <HAL_RCC_GetHCLKFreq+0x60>)
 8105afc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105afe:	4b05      	ldr	r3, [pc, #20]	; (8105b14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105b00:	681b      	ldr	r3, [r3, #0]
}
 8105b02:	4618      	mov	r0, r3
 8105b04:	3708      	adds	r7, #8
 8105b06:	46bd      	mov	sp, r7
 8105b08:	bd80      	pop	{r7, pc}
 8105b0a:	bf00      	nop
 8105b0c:	58024400 	.word	0x58024400
 8105b10:	0810b454 	.word	0x0810b454
 8105b14:	10000004 	.word	0x10000004
 8105b18:	10000000 	.word	0x10000000

08105b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105b1c:	b580      	push	{r7, lr}
 8105b1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105b20:	f7ff ffca 	bl	8105ab8 <HAL_RCC_GetHCLKFreq>
 8105b24:	4602      	mov	r2, r0
 8105b26:	4b06      	ldr	r3, [pc, #24]	; (8105b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105b28:	69db      	ldr	r3, [r3, #28]
 8105b2a:	091b      	lsrs	r3, r3, #4
 8105b2c:	f003 0307 	and.w	r3, r3, #7
 8105b30:	4904      	ldr	r1, [pc, #16]	; (8105b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8105b32:	5ccb      	ldrb	r3, [r1, r3]
 8105b34:	f003 031f 	and.w	r3, r3, #31
 8105b38:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105b3c:	4618      	mov	r0, r3
 8105b3e:	bd80      	pop	{r7, pc}
 8105b40:	58024400 	.word	0x58024400
 8105b44:	0810b454 	.word	0x0810b454

08105b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105b48:	b580      	push	{r7, lr}
 8105b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105b4c:	f7ff ffb4 	bl	8105ab8 <HAL_RCC_GetHCLKFreq>
 8105b50:	4602      	mov	r2, r0
 8105b52:	4b06      	ldr	r3, [pc, #24]	; (8105b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8105b54:	69db      	ldr	r3, [r3, #28]
 8105b56:	0a1b      	lsrs	r3, r3, #8
 8105b58:	f003 0307 	and.w	r3, r3, #7
 8105b5c:	4904      	ldr	r1, [pc, #16]	; (8105b70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8105b5e:	5ccb      	ldrb	r3, [r1, r3]
 8105b60:	f003 031f 	and.w	r3, r3, #31
 8105b64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105b68:	4618      	mov	r0, r3
 8105b6a:	bd80      	pop	{r7, pc}
 8105b6c:	58024400 	.word	0x58024400
 8105b70:	0810b454 	.word	0x0810b454

08105b74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105b74:	b580      	push	{r7, lr}
 8105b76:	b086      	sub	sp, #24
 8105b78:	af00      	add	r7, sp, #0
 8105b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105b7c:	2300      	movs	r3, #0
 8105b7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8105b80:	2300      	movs	r3, #0
 8105b82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	681b      	ldr	r3, [r3, #0]
 8105b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105b8c:	2b00      	cmp	r3, #0
 8105b8e:	d03f      	beq.n	8105c10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105b94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105b98:	d02a      	beq.n	8105bf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8105b9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105b9e:	d824      	bhi.n	8105bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8105ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105ba4:	d018      	beq.n	8105bd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105ba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105baa:	d81e      	bhi.n	8105bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8105bac:	2b00      	cmp	r3, #0
 8105bae:	d003      	beq.n	8105bb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8105bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105bb4:	d007      	beq.n	8105bc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8105bb6:	e018      	b.n	8105bea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105bb8:	4ba3      	ldr	r3, [pc, #652]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bbc:	4aa2      	ldr	r2, [pc, #648]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105bc4:	e015      	b.n	8105bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105bc6:	687b      	ldr	r3, [r7, #4]
 8105bc8:	3304      	adds	r3, #4
 8105bca:	2102      	movs	r1, #2
 8105bcc:	4618      	mov	r0, r3
 8105bce:	f001 fff9 	bl	8107bc4 <RCCEx_PLL2_Config>
 8105bd2:	4603      	mov	r3, r0
 8105bd4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105bd6:	e00c      	b.n	8105bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105bd8:	687b      	ldr	r3, [r7, #4]
 8105bda:	3324      	adds	r3, #36	; 0x24
 8105bdc:	2102      	movs	r1, #2
 8105bde:	4618      	mov	r0, r3
 8105be0:	f002 f8a2 	bl	8107d28 <RCCEx_PLL3_Config>
 8105be4:	4603      	mov	r3, r0
 8105be6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105be8:	e003      	b.n	8105bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105bea:	2301      	movs	r3, #1
 8105bec:	75fb      	strb	r3, [r7, #23]
      break;
 8105bee:	e000      	b.n	8105bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8105bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105bf2:	7dfb      	ldrb	r3, [r7, #23]
 8105bf4:	2b00      	cmp	r3, #0
 8105bf6:	d109      	bne.n	8105c0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105bf8:	4b93      	ldr	r3, [pc, #588]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105bfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8105c00:	687b      	ldr	r3, [r7, #4]
 8105c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105c04:	4990      	ldr	r1, [pc, #576]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c06:	4313      	orrs	r3, r2
 8105c08:	650b      	str	r3, [r1, #80]	; 0x50
 8105c0a:	e001      	b.n	8105c10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c0c:	7dfb      	ldrb	r3, [r7, #23]
 8105c0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105c10:	687b      	ldr	r3, [r7, #4]
 8105c12:	681b      	ldr	r3, [r3, #0]
 8105c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105c18:	2b00      	cmp	r3, #0
 8105c1a:	d03d      	beq.n	8105c98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105c20:	2b04      	cmp	r3, #4
 8105c22:	d826      	bhi.n	8105c72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8105c24:	a201      	add	r2, pc, #4	; (adr r2, 8105c2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8105c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105c2a:	bf00      	nop
 8105c2c:	08105c41 	.word	0x08105c41
 8105c30:	08105c4f 	.word	0x08105c4f
 8105c34:	08105c61 	.word	0x08105c61
 8105c38:	08105c79 	.word	0x08105c79
 8105c3c:	08105c79 	.word	0x08105c79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c40:	4b81      	ldr	r3, [pc, #516]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c44:	4a80      	ldr	r2, [pc, #512]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105c4c:	e015      	b.n	8105c7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	3304      	adds	r3, #4
 8105c52:	2100      	movs	r1, #0
 8105c54:	4618      	mov	r0, r3
 8105c56:	f001 ffb5 	bl	8107bc4 <RCCEx_PLL2_Config>
 8105c5a:	4603      	mov	r3, r0
 8105c5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105c5e:	e00c      	b.n	8105c7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105c60:	687b      	ldr	r3, [r7, #4]
 8105c62:	3324      	adds	r3, #36	; 0x24
 8105c64:	2100      	movs	r1, #0
 8105c66:	4618      	mov	r0, r3
 8105c68:	f002 f85e 	bl	8107d28 <RCCEx_PLL3_Config>
 8105c6c:	4603      	mov	r3, r0
 8105c6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105c70:	e003      	b.n	8105c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105c72:	2301      	movs	r3, #1
 8105c74:	75fb      	strb	r3, [r7, #23]
      break;
 8105c76:	e000      	b.n	8105c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8105c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105c7a:	7dfb      	ldrb	r3, [r7, #23]
 8105c7c:	2b00      	cmp	r3, #0
 8105c7e:	d109      	bne.n	8105c94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105c80:	4b71      	ldr	r3, [pc, #452]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105c84:	f023 0207 	bic.w	r2, r3, #7
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105c8c:	496e      	ldr	r1, [pc, #440]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c8e:	4313      	orrs	r3, r2
 8105c90:	650b      	str	r3, [r1, #80]	; 0x50
 8105c92:	e001      	b.n	8105c98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c94:	7dfb      	ldrb	r3, [r7, #23]
 8105c96:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	681b      	ldr	r3, [r3, #0]
 8105c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105ca0:	2b00      	cmp	r3, #0
 8105ca2:	d042      	beq.n	8105d2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8105ca4:	687b      	ldr	r3, [r7, #4]
 8105ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105cac:	d02b      	beq.n	8105d06 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8105cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105cb2:	d825      	bhi.n	8105d00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105cb4:	2bc0      	cmp	r3, #192	; 0xc0
 8105cb6:	d028      	beq.n	8105d0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8105cb8:	2bc0      	cmp	r3, #192	; 0xc0
 8105cba:	d821      	bhi.n	8105d00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105cbc:	2b80      	cmp	r3, #128	; 0x80
 8105cbe:	d016      	beq.n	8105cee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8105cc0:	2b80      	cmp	r3, #128	; 0x80
 8105cc2:	d81d      	bhi.n	8105d00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105cc4:	2b00      	cmp	r3, #0
 8105cc6:	d002      	beq.n	8105cce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8105cc8:	2b40      	cmp	r3, #64	; 0x40
 8105cca:	d007      	beq.n	8105cdc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8105ccc:	e018      	b.n	8105d00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105cce:	4b5e      	ldr	r3, [pc, #376]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105cd2:	4a5d      	ldr	r2, [pc, #372]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105cda:	e017      	b.n	8105d0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105cdc:	687b      	ldr	r3, [r7, #4]
 8105cde:	3304      	adds	r3, #4
 8105ce0:	2100      	movs	r1, #0
 8105ce2:	4618      	mov	r0, r3
 8105ce4:	f001 ff6e 	bl	8107bc4 <RCCEx_PLL2_Config>
 8105ce8:	4603      	mov	r3, r0
 8105cea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105cec:	e00e      	b.n	8105d0c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105cee:	687b      	ldr	r3, [r7, #4]
 8105cf0:	3324      	adds	r3, #36	; 0x24
 8105cf2:	2100      	movs	r1, #0
 8105cf4:	4618      	mov	r0, r3
 8105cf6:	f002 f817 	bl	8107d28 <RCCEx_PLL3_Config>
 8105cfa:	4603      	mov	r3, r0
 8105cfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105cfe:	e005      	b.n	8105d0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105d00:	2301      	movs	r3, #1
 8105d02:	75fb      	strb	r3, [r7, #23]
      break;
 8105d04:	e002      	b.n	8105d0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8105d06:	bf00      	nop
 8105d08:	e000      	b.n	8105d0c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8105d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105d0c:	7dfb      	ldrb	r3, [r7, #23]
 8105d0e:	2b00      	cmp	r3, #0
 8105d10:	d109      	bne.n	8105d26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105d12:	4b4d      	ldr	r3, [pc, #308]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105d16:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105d1e:	494a      	ldr	r1, [pc, #296]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105d20:	4313      	orrs	r3, r2
 8105d22:	650b      	str	r3, [r1, #80]	; 0x50
 8105d24:	e001      	b.n	8105d2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d26:	7dfb      	ldrb	r3, [r7, #23]
 8105d28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105d2a:	687b      	ldr	r3, [r7, #4]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8105d32:	2b00      	cmp	r3, #0
 8105d34:	d049      	beq.n	8105dca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8105d36:	687b      	ldr	r3, [r7, #4]
 8105d38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105d3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105d40:	d030      	beq.n	8105da4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8105d42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105d46:	d82a      	bhi.n	8105d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105d48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105d4c:	d02c      	beq.n	8105da8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8105d4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105d52:	d824      	bhi.n	8105d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105d58:	d018      	beq.n	8105d8c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8105d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105d5e:	d81e      	bhi.n	8105d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105d60:	2b00      	cmp	r3, #0
 8105d62:	d003      	beq.n	8105d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8105d64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105d68:	d007      	beq.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8105d6a:	e018      	b.n	8105d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d6c:	4b36      	ldr	r3, [pc, #216]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d70:	4a35      	ldr	r2, [pc, #212]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105d76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105d78:	e017      	b.n	8105daa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105d7a:	687b      	ldr	r3, [r7, #4]
 8105d7c:	3304      	adds	r3, #4
 8105d7e:	2100      	movs	r1, #0
 8105d80:	4618      	mov	r0, r3
 8105d82:	f001 ff1f 	bl	8107bc4 <RCCEx_PLL2_Config>
 8105d86:	4603      	mov	r3, r0
 8105d88:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105d8a:	e00e      	b.n	8105daa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105d8c:	687b      	ldr	r3, [r7, #4]
 8105d8e:	3324      	adds	r3, #36	; 0x24
 8105d90:	2100      	movs	r1, #0
 8105d92:	4618      	mov	r0, r3
 8105d94:	f001 ffc8 	bl	8107d28 <RCCEx_PLL3_Config>
 8105d98:	4603      	mov	r3, r0
 8105d9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105d9c:	e005      	b.n	8105daa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105d9e:	2301      	movs	r3, #1
 8105da0:	75fb      	strb	r3, [r7, #23]
      break;
 8105da2:	e002      	b.n	8105daa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105da4:	bf00      	nop
 8105da6:	e000      	b.n	8105daa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105daa:	7dfb      	ldrb	r3, [r7, #23]
 8105dac:	2b00      	cmp	r3, #0
 8105dae:	d10a      	bne.n	8105dc6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105db0:	4b25      	ldr	r3, [pc, #148]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105db4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105dbe:	4922      	ldr	r1, [pc, #136]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105dc0:	4313      	orrs	r3, r2
 8105dc2:	658b      	str	r3, [r1, #88]	; 0x58
 8105dc4:	e001      	b.n	8105dca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105dc6:	7dfb      	ldrb	r3, [r7, #23]
 8105dc8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105dca:	687b      	ldr	r3, [r7, #4]
 8105dcc:	681b      	ldr	r3, [r3, #0]
 8105dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105dd2:	2b00      	cmp	r3, #0
 8105dd4:	d04b      	beq.n	8105e6e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8105dd6:	687b      	ldr	r3, [r7, #4]
 8105dd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105de0:	d030      	beq.n	8105e44 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8105de2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105de6:	d82a      	bhi.n	8105e3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105de8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105dec:	d02e      	beq.n	8105e4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8105dee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105df2:	d824      	bhi.n	8105e3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105df8:	d018      	beq.n	8105e2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8105dfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105dfe:	d81e      	bhi.n	8105e3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105e00:	2b00      	cmp	r3, #0
 8105e02:	d003      	beq.n	8105e0c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8105e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105e08:	d007      	beq.n	8105e1a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8105e0a:	e018      	b.n	8105e3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e0c:	4b0e      	ldr	r3, [pc, #56]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e10:	4a0d      	ldr	r2, [pc, #52]	; (8105e48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105e16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105e18:	e019      	b.n	8105e4e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105e1a:	687b      	ldr	r3, [r7, #4]
 8105e1c:	3304      	adds	r3, #4
 8105e1e:	2100      	movs	r1, #0
 8105e20:	4618      	mov	r0, r3
 8105e22:	f001 fecf 	bl	8107bc4 <RCCEx_PLL2_Config>
 8105e26:	4603      	mov	r3, r0
 8105e28:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105e2a:	e010      	b.n	8105e4e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	3324      	adds	r3, #36	; 0x24
 8105e30:	2100      	movs	r1, #0
 8105e32:	4618      	mov	r0, r3
 8105e34:	f001 ff78 	bl	8107d28 <RCCEx_PLL3_Config>
 8105e38:	4603      	mov	r3, r0
 8105e3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105e3c:	e007      	b.n	8105e4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105e3e:	2301      	movs	r3, #1
 8105e40:	75fb      	strb	r3, [r7, #23]
      break;
 8105e42:	e004      	b.n	8105e4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8105e44:	bf00      	nop
 8105e46:	e002      	b.n	8105e4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8105e48:	58024400 	.word	0x58024400
      break;
 8105e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105e4e:	7dfb      	ldrb	r3, [r7, #23]
 8105e50:	2b00      	cmp	r3, #0
 8105e52:	d10a      	bne.n	8105e6a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105e54:	4b99      	ldr	r3, [pc, #612]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105e58:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8105e5c:	687b      	ldr	r3, [r7, #4]
 8105e5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105e62:	4996      	ldr	r1, [pc, #600]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e64:	4313      	orrs	r3, r2
 8105e66:	658b      	str	r3, [r1, #88]	; 0x58
 8105e68:	e001      	b.n	8105e6e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e6a:	7dfb      	ldrb	r3, [r7, #23]
 8105e6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105e6e:	687b      	ldr	r3, [r7, #4]
 8105e70:	681b      	ldr	r3, [r3, #0]
 8105e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105e76:	2b00      	cmp	r3, #0
 8105e78:	d032      	beq.n	8105ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8105e7a:	687b      	ldr	r3, [r7, #4]
 8105e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105e7e:	2b30      	cmp	r3, #48	; 0x30
 8105e80:	d01c      	beq.n	8105ebc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8105e82:	2b30      	cmp	r3, #48	; 0x30
 8105e84:	d817      	bhi.n	8105eb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105e86:	2b20      	cmp	r3, #32
 8105e88:	d00c      	beq.n	8105ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8105e8a:	2b20      	cmp	r3, #32
 8105e8c:	d813      	bhi.n	8105eb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105e8e:	2b00      	cmp	r3, #0
 8105e90:	d016      	beq.n	8105ec0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8105e92:	2b10      	cmp	r3, #16
 8105e94:	d10f      	bne.n	8105eb6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e96:	4b89      	ldr	r3, [pc, #548]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e9a:	4a88      	ldr	r2, [pc, #544]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105ea2:	e00e      	b.n	8105ec2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105ea4:	687b      	ldr	r3, [r7, #4]
 8105ea6:	3304      	adds	r3, #4
 8105ea8:	2102      	movs	r1, #2
 8105eaa:	4618      	mov	r0, r3
 8105eac:	f001 fe8a 	bl	8107bc4 <RCCEx_PLL2_Config>
 8105eb0:	4603      	mov	r3, r0
 8105eb2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105eb4:	e005      	b.n	8105ec2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105eb6:	2301      	movs	r3, #1
 8105eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8105eba:	e002      	b.n	8105ec2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105ebc:	bf00      	nop
 8105ebe:	e000      	b.n	8105ec2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105ec2:	7dfb      	ldrb	r3, [r7, #23]
 8105ec4:	2b00      	cmp	r3, #0
 8105ec6:	d109      	bne.n	8105edc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105ec8:	4b7c      	ldr	r3, [pc, #496]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105ecc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105ed4:	4979      	ldr	r1, [pc, #484]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105ed6:	4313      	orrs	r3, r2
 8105ed8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105eda:	e001      	b.n	8105ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105edc:	7dfb      	ldrb	r3, [r7, #23]
 8105ede:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105ee0:	687b      	ldr	r3, [r7, #4]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8105ee8:	2b00      	cmp	r3, #0
 8105eea:	d047      	beq.n	8105f7c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8105eec:	687b      	ldr	r3, [r7, #4]
 8105eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105ef4:	d030      	beq.n	8105f58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8105ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105efa:	d82a      	bhi.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105efc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105f00:	d02c      	beq.n	8105f5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8105f02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105f06:	d824      	bhi.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105f0c:	d018      	beq.n	8105f40 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8105f0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105f12:	d81e      	bhi.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105f14:	2b00      	cmp	r3, #0
 8105f16:	d003      	beq.n	8105f20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8105f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105f1c:	d007      	beq.n	8105f2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8105f1e:	e018      	b.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105f20:	4b66      	ldr	r3, [pc, #408]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f24:	4a65      	ldr	r2, [pc, #404]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105f2c:	e017      	b.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105f2e:	687b      	ldr	r3, [r7, #4]
 8105f30:	3304      	adds	r3, #4
 8105f32:	2100      	movs	r1, #0
 8105f34:	4618      	mov	r0, r3
 8105f36:	f001 fe45 	bl	8107bc4 <RCCEx_PLL2_Config>
 8105f3a:	4603      	mov	r3, r0
 8105f3c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105f3e:	e00e      	b.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105f40:	687b      	ldr	r3, [r7, #4]
 8105f42:	3324      	adds	r3, #36	; 0x24
 8105f44:	2100      	movs	r1, #0
 8105f46:	4618      	mov	r0, r3
 8105f48:	f001 feee 	bl	8107d28 <RCCEx_PLL3_Config>
 8105f4c:	4603      	mov	r3, r0
 8105f4e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105f50:	e005      	b.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105f52:	2301      	movs	r3, #1
 8105f54:	75fb      	strb	r3, [r7, #23]
      break;
 8105f56:	e002      	b.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105f58:	bf00      	nop
 8105f5a:	e000      	b.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105f5e:	7dfb      	ldrb	r3, [r7, #23]
 8105f60:	2b00      	cmp	r3, #0
 8105f62:	d109      	bne.n	8105f78 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105f64:	4b55      	ldr	r3, [pc, #340]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f68:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8105f6c:	687b      	ldr	r3, [r7, #4]
 8105f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105f70:	4952      	ldr	r1, [pc, #328]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105f72:	4313      	orrs	r3, r2
 8105f74:	650b      	str	r3, [r1, #80]	; 0x50
 8105f76:	e001      	b.n	8105f7c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f78:	7dfb      	ldrb	r3, [r7, #23]
 8105f7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105f7c:	687b      	ldr	r3, [r7, #4]
 8105f7e:	681b      	ldr	r3, [r3, #0]
 8105f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8105f84:	2b00      	cmp	r3, #0
 8105f86:	d049      	beq.n	810601c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8105f88:	687b      	ldr	r3, [r7, #4]
 8105f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105f90:	d02e      	beq.n	8105ff0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8105f92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105f96:	d828      	bhi.n	8105fea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105f98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105f9c:	d02a      	beq.n	8105ff4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8105f9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105fa2:	d822      	bhi.n	8105fea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105fa4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105fa8:	d026      	beq.n	8105ff8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8105faa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105fae:	d81c      	bhi.n	8105fea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105fb4:	d010      	beq.n	8105fd8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8105fb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105fba:	d816      	bhi.n	8105fea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105fbc:	2b00      	cmp	r3, #0
 8105fbe:	d01d      	beq.n	8105ffc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8105fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105fc4:	d111      	bne.n	8105fea <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105fc6:	687b      	ldr	r3, [r7, #4]
 8105fc8:	3304      	adds	r3, #4
 8105fca:	2101      	movs	r1, #1
 8105fcc:	4618      	mov	r0, r3
 8105fce:	f001 fdf9 	bl	8107bc4 <RCCEx_PLL2_Config>
 8105fd2:	4603      	mov	r3, r0
 8105fd4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105fd6:	e012      	b.n	8105ffe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	3324      	adds	r3, #36	; 0x24
 8105fdc:	2101      	movs	r1, #1
 8105fde:	4618      	mov	r0, r3
 8105fe0:	f001 fea2 	bl	8107d28 <RCCEx_PLL3_Config>
 8105fe4:	4603      	mov	r3, r0
 8105fe6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105fe8:	e009      	b.n	8105ffe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105fea:	2301      	movs	r3, #1
 8105fec:	75fb      	strb	r3, [r7, #23]
      break;
 8105fee:	e006      	b.n	8105ffe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105ff0:	bf00      	nop
 8105ff2:	e004      	b.n	8105ffe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105ff4:	bf00      	nop
 8105ff6:	e002      	b.n	8105ffe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105ff8:	bf00      	nop
 8105ffa:	e000      	b.n	8105ffe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105ffe:	7dfb      	ldrb	r3, [r7, #23]
 8106000:	2b00      	cmp	r3, #0
 8106002:	d109      	bne.n	8106018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106004:	4b2d      	ldr	r3, [pc, #180]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8106006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106008:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106010:	492a      	ldr	r1, [pc, #168]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8106012:	4313      	orrs	r3, r2
 8106014:	650b      	str	r3, [r1, #80]	; 0x50
 8106016:	e001      	b.n	810601c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106018:	7dfb      	ldrb	r3, [r7, #23]
 810601a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810601c:	687b      	ldr	r3, [r7, #4]
 810601e:	681b      	ldr	r3, [r3, #0]
 8106020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8106024:	2b00      	cmp	r3, #0
 8106026:	d04d      	beq.n	81060c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8106028:	687b      	ldr	r3, [r7, #4]
 810602a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810602e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106032:	d02e      	beq.n	8106092 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8106034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106038:	d828      	bhi.n	810608c <HAL_RCCEx_PeriphCLKConfig+0x518>
 810603a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810603e:	d02a      	beq.n	8106096 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8106040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106044:	d822      	bhi.n	810608c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8106046:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810604a:	d026      	beq.n	810609a <HAL_RCCEx_PeriphCLKConfig+0x526>
 810604c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106050:	d81c      	bhi.n	810608c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8106052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106056:	d010      	beq.n	810607a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8106058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810605c:	d816      	bhi.n	810608c <HAL_RCCEx_PeriphCLKConfig+0x518>
 810605e:	2b00      	cmp	r3, #0
 8106060:	d01d      	beq.n	810609e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8106062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106066:	d111      	bne.n	810608c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106068:	687b      	ldr	r3, [r7, #4]
 810606a:	3304      	adds	r3, #4
 810606c:	2101      	movs	r1, #1
 810606e:	4618      	mov	r0, r3
 8106070:	f001 fda8 	bl	8107bc4 <RCCEx_PLL2_Config>
 8106074:	4603      	mov	r3, r0
 8106076:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8106078:	e012      	b.n	81060a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810607a:	687b      	ldr	r3, [r7, #4]
 810607c:	3324      	adds	r3, #36	; 0x24
 810607e:	2101      	movs	r1, #1
 8106080:	4618      	mov	r0, r3
 8106082:	f001 fe51 	bl	8107d28 <RCCEx_PLL3_Config>
 8106086:	4603      	mov	r3, r0
 8106088:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810608a:	e009      	b.n	81060a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810608c:	2301      	movs	r3, #1
 810608e:	75fb      	strb	r3, [r7, #23]
      break;
 8106090:	e006      	b.n	81060a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8106092:	bf00      	nop
 8106094:	e004      	b.n	81060a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8106096:	bf00      	nop
 8106098:	e002      	b.n	81060a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810609a:	bf00      	nop
 810609c:	e000      	b.n	81060a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810609e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81060a0:	7dfb      	ldrb	r3, [r7, #23]
 81060a2:	2b00      	cmp	r3, #0
 81060a4:	d10c      	bne.n	81060c0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81060a6:	4b05      	ldr	r3, [pc, #20]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81060a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81060aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81060ae:	687b      	ldr	r3, [r7, #4]
 81060b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81060b4:	4901      	ldr	r1, [pc, #4]	; (81060bc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81060b6:	4313      	orrs	r3, r2
 81060b8:	658b      	str	r3, [r1, #88]	; 0x58
 81060ba:	e003      	b.n	81060c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 81060bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060c0:	7dfb      	ldrb	r3, [r7, #23]
 81060c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	681b      	ldr	r3, [r3, #0]
 81060c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81060cc:	2b00      	cmp	r3, #0
 81060ce:	d02f      	beq.n	8106130 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81060d0:	687b      	ldr	r3, [r7, #4]
 81060d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81060d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81060d8:	d00e      	beq.n	81060f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 81060da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81060de:	d814      	bhi.n	810610a <HAL_RCCEx_PeriphCLKConfig+0x596>
 81060e0:	2b00      	cmp	r3, #0
 81060e2:	d015      	beq.n	8106110 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 81060e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81060e8:	d10f      	bne.n	810610a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81060ea:	4bb0      	ldr	r3, [pc, #704]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060ee:	4aaf      	ldr	r2, [pc, #700]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81060f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81060f6:	e00c      	b.n	8106112 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	3304      	adds	r3, #4
 81060fc:	2101      	movs	r1, #1
 81060fe:	4618      	mov	r0, r3
 8106100:	f001 fd60 	bl	8107bc4 <RCCEx_PLL2_Config>
 8106104:	4603      	mov	r3, r0
 8106106:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8106108:	e003      	b.n	8106112 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810610a:	2301      	movs	r3, #1
 810610c:	75fb      	strb	r3, [r7, #23]
      break;
 810610e:	e000      	b.n	8106112 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8106110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106112:	7dfb      	ldrb	r3, [r7, #23]
 8106114:	2b00      	cmp	r3, #0
 8106116:	d109      	bne.n	810612c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106118:	4ba4      	ldr	r3, [pc, #656]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810611a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810611c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8106120:	687b      	ldr	r3, [r7, #4]
 8106122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106124:	49a1      	ldr	r1, [pc, #644]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106126:	4313      	orrs	r3, r2
 8106128:	650b      	str	r3, [r1, #80]	; 0x50
 810612a:	e001      	b.n	8106130 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810612c:	7dfb      	ldrb	r3, [r7, #23]
 810612e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	681b      	ldr	r3, [r3, #0]
 8106134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106138:	2b00      	cmp	r3, #0
 810613a:	d032      	beq.n	81061a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810613c:	687b      	ldr	r3, [r7, #4]
 810613e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106140:	2b03      	cmp	r3, #3
 8106142:	d81b      	bhi.n	810617c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8106144:	a201      	add	r2, pc, #4	; (adr r2, 810614c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8106146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810614a:	bf00      	nop
 810614c:	08106183 	.word	0x08106183
 8106150:	0810615d 	.word	0x0810615d
 8106154:	0810616b 	.word	0x0810616b
 8106158:	08106183 	.word	0x08106183
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810615c:	4b93      	ldr	r3, [pc, #588]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106160:	4a92      	ldr	r2, [pc, #584]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106166:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8106168:	e00c      	b.n	8106184 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	3304      	adds	r3, #4
 810616e:	2102      	movs	r1, #2
 8106170:	4618      	mov	r0, r3
 8106172:	f001 fd27 	bl	8107bc4 <RCCEx_PLL2_Config>
 8106176:	4603      	mov	r3, r0
 8106178:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810617a:	e003      	b.n	8106184 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810617c:	2301      	movs	r3, #1
 810617e:	75fb      	strb	r3, [r7, #23]
      break;
 8106180:	e000      	b.n	8106184 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8106182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106184:	7dfb      	ldrb	r3, [r7, #23]
 8106186:	2b00      	cmp	r3, #0
 8106188:	d109      	bne.n	810619e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810618a:	4b88      	ldr	r3, [pc, #544]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810618c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810618e:	f023 0203 	bic.w	r2, r3, #3
 8106192:	687b      	ldr	r3, [r7, #4]
 8106194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106196:	4985      	ldr	r1, [pc, #532]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106198:	4313      	orrs	r3, r2
 810619a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810619c:	e001      	b.n	81061a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810619e:	7dfb      	ldrb	r3, [r7, #23]
 81061a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	681b      	ldr	r3, [r3, #0]
 81061a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81061aa:	2b00      	cmp	r3, #0
 81061ac:	f000 8088 	beq.w	81062c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81061b0:	4b7f      	ldr	r3, [pc, #508]	; (81063b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	4a7e      	ldr	r2, [pc, #504]	; (81063b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81061b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81061ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81061bc:	f7fd f852 	bl	8103264 <HAL_GetTick>
 81061c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81061c2:	e009      	b.n	81061d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81061c4:	f7fd f84e 	bl	8103264 <HAL_GetTick>
 81061c8:	4602      	mov	r2, r0
 81061ca:	693b      	ldr	r3, [r7, #16]
 81061cc:	1ad3      	subs	r3, r2, r3
 81061ce:	2b64      	cmp	r3, #100	; 0x64
 81061d0:	d902      	bls.n	81061d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81061d2:	2303      	movs	r3, #3
 81061d4:	75fb      	strb	r3, [r7, #23]
        break;
 81061d6:	e005      	b.n	81061e4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81061d8:	4b75      	ldr	r3, [pc, #468]	; (81063b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81061da:	681b      	ldr	r3, [r3, #0]
 81061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81061e0:	2b00      	cmp	r3, #0
 81061e2:	d0ef      	beq.n	81061c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81061e4:	7dfb      	ldrb	r3, [r7, #23]
 81061e6:	2b00      	cmp	r3, #0
 81061e8:	d168      	bne.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81061ea:	4b70      	ldr	r3, [pc, #448]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81061ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81061ee:	687b      	ldr	r3, [r7, #4]
 81061f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81061f4:	4053      	eors	r3, r2
 81061f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81061fa:	2b00      	cmp	r3, #0
 81061fc:	d013      	beq.n	8106226 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81061fe:	4b6b      	ldr	r3, [pc, #428]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106206:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106208:	4b68      	ldr	r3, [pc, #416]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810620a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810620c:	4a67      	ldr	r2, [pc, #412]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810620e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8106212:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106214:	4b65      	ldr	r3, [pc, #404]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106218:	4a64      	ldr	r2, [pc, #400]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810621a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810621e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106220:	4a62      	ldr	r2, [pc, #392]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106222:	68fb      	ldr	r3, [r7, #12]
 8106224:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810622c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106230:	d115      	bne.n	810625e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106232:	f7fd f817 	bl	8103264 <HAL_GetTick>
 8106236:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106238:	e00b      	b.n	8106252 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810623a:	f7fd f813 	bl	8103264 <HAL_GetTick>
 810623e:	4602      	mov	r2, r0
 8106240:	693b      	ldr	r3, [r7, #16]
 8106242:	1ad3      	subs	r3, r2, r3
 8106244:	f241 3288 	movw	r2, #5000	; 0x1388
 8106248:	4293      	cmp	r3, r2
 810624a:	d902      	bls.n	8106252 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 810624c:	2303      	movs	r3, #3
 810624e:	75fb      	strb	r3, [r7, #23]
            break;
 8106250:	e005      	b.n	810625e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106252:	4b56      	ldr	r3, [pc, #344]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106256:	f003 0302 	and.w	r3, r3, #2
 810625a:	2b00      	cmp	r3, #0
 810625c:	d0ed      	beq.n	810623a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810625e:	7dfb      	ldrb	r3, [r7, #23]
 8106260:	2b00      	cmp	r3, #0
 8106262:	d128      	bne.n	81062b6 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106264:	687b      	ldr	r3, [r7, #4]
 8106266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810626a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810626e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106272:	d10f      	bne.n	8106294 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8106274:	4b4d      	ldr	r3, [pc, #308]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106276:	691b      	ldr	r3, [r3, #16]
 8106278:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 810627c:	687b      	ldr	r3, [r7, #4]
 810627e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106282:	091b      	lsrs	r3, r3, #4
 8106284:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8106288:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810628c:	4947      	ldr	r1, [pc, #284]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810628e:	4313      	orrs	r3, r2
 8106290:	610b      	str	r3, [r1, #16]
 8106292:	e005      	b.n	81062a0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8106294:	4b45      	ldr	r3, [pc, #276]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106296:	691b      	ldr	r3, [r3, #16]
 8106298:	4a44      	ldr	r2, [pc, #272]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810629a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810629e:	6113      	str	r3, [r2, #16]
 81062a0:	4b42      	ldr	r3, [pc, #264]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81062a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81062a4:	687b      	ldr	r3, [r7, #4]
 81062a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81062aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81062ae:	493f      	ldr	r1, [pc, #252]	; (81063ac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81062b0:	4313      	orrs	r3, r2
 81062b2:	670b      	str	r3, [r1, #112]	; 0x70
 81062b4:	e004      	b.n	81062c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81062b6:	7dfb      	ldrb	r3, [r7, #23]
 81062b8:	75bb      	strb	r3, [r7, #22]
 81062ba:	e001      	b.n	81062c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81062bc:	7dfb      	ldrb	r3, [r7, #23]
 81062be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	681b      	ldr	r3, [r3, #0]
 81062c4:	f003 0301 	and.w	r3, r3, #1
 81062c8:	2b00      	cmp	r3, #0
 81062ca:	f000 8083 	beq.w	81063d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81062ce:	687b      	ldr	r3, [r7, #4]
 81062d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81062d2:	2b28      	cmp	r3, #40	; 0x28
 81062d4:	d866      	bhi.n	81063a4 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81062d6:	a201      	add	r2, pc, #4	; (adr r2, 81062dc <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062dc:	081063b5 	.word	0x081063b5
 81062e0:	081063a5 	.word	0x081063a5
 81062e4:	081063a5 	.word	0x081063a5
 81062e8:	081063a5 	.word	0x081063a5
 81062ec:	081063a5 	.word	0x081063a5
 81062f0:	081063a5 	.word	0x081063a5
 81062f4:	081063a5 	.word	0x081063a5
 81062f8:	081063a5 	.word	0x081063a5
 81062fc:	08106381 	.word	0x08106381
 8106300:	081063a5 	.word	0x081063a5
 8106304:	081063a5 	.word	0x081063a5
 8106308:	081063a5 	.word	0x081063a5
 810630c:	081063a5 	.word	0x081063a5
 8106310:	081063a5 	.word	0x081063a5
 8106314:	081063a5 	.word	0x081063a5
 8106318:	081063a5 	.word	0x081063a5
 810631c:	08106393 	.word	0x08106393
 8106320:	081063a5 	.word	0x081063a5
 8106324:	081063a5 	.word	0x081063a5
 8106328:	081063a5 	.word	0x081063a5
 810632c:	081063a5 	.word	0x081063a5
 8106330:	081063a5 	.word	0x081063a5
 8106334:	081063a5 	.word	0x081063a5
 8106338:	081063a5 	.word	0x081063a5
 810633c:	081063b5 	.word	0x081063b5
 8106340:	081063a5 	.word	0x081063a5
 8106344:	081063a5 	.word	0x081063a5
 8106348:	081063a5 	.word	0x081063a5
 810634c:	081063a5 	.word	0x081063a5
 8106350:	081063a5 	.word	0x081063a5
 8106354:	081063a5 	.word	0x081063a5
 8106358:	081063a5 	.word	0x081063a5
 810635c:	081063b5 	.word	0x081063b5
 8106360:	081063a5 	.word	0x081063a5
 8106364:	081063a5 	.word	0x081063a5
 8106368:	081063a5 	.word	0x081063a5
 810636c:	081063a5 	.word	0x081063a5
 8106370:	081063a5 	.word	0x081063a5
 8106374:	081063a5 	.word	0x081063a5
 8106378:	081063a5 	.word	0x081063a5
 810637c:	081063b5 	.word	0x081063b5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	3304      	adds	r3, #4
 8106384:	2101      	movs	r1, #1
 8106386:	4618      	mov	r0, r3
 8106388:	f001 fc1c 	bl	8107bc4 <RCCEx_PLL2_Config>
 810638c:	4603      	mov	r3, r0
 810638e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8106390:	e011      	b.n	81063b6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	3324      	adds	r3, #36	; 0x24
 8106396:	2101      	movs	r1, #1
 8106398:	4618      	mov	r0, r3
 810639a:	f001 fcc5 	bl	8107d28 <RCCEx_PLL3_Config>
 810639e:	4603      	mov	r3, r0
 81063a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81063a2:	e008      	b.n	81063b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81063a4:	2301      	movs	r3, #1
 81063a6:	75fb      	strb	r3, [r7, #23]
      break;
 81063a8:	e005      	b.n	81063b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 81063aa:	bf00      	nop
 81063ac:	58024400 	.word	0x58024400
 81063b0:	58024800 	.word	0x58024800
      break;
 81063b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81063b6:	7dfb      	ldrb	r3, [r7, #23]
 81063b8:	2b00      	cmp	r3, #0
 81063ba:	d109      	bne.n	81063d0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81063bc:	4b96      	ldr	r3, [pc, #600]	; (8106618 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81063be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81063c0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81063c4:	687b      	ldr	r3, [r7, #4]
 81063c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81063c8:	4993      	ldr	r1, [pc, #588]	; (8106618 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81063ca:	4313      	orrs	r3, r2
 81063cc:	654b      	str	r3, [r1, #84]	; 0x54
 81063ce:	e001      	b.n	81063d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063d0:	7dfb      	ldrb	r3, [r7, #23]
 81063d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81063d4:	687b      	ldr	r3, [r7, #4]
 81063d6:	681b      	ldr	r3, [r3, #0]
 81063d8:	f003 0302 	and.w	r3, r3, #2
 81063dc:	2b00      	cmp	r3, #0
 81063de:	d038      	beq.n	8106452 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81063e0:	687b      	ldr	r3, [r7, #4]
 81063e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81063e4:	2b05      	cmp	r3, #5
 81063e6:	d821      	bhi.n	810642c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 81063e8:	a201      	add	r2, pc, #4	; (adr r2, 81063f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 81063ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81063ee:	bf00      	nop
 81063f0:	08106433 	.word	0x08106433
 81063f4:	08106409 	.word	0x08106409
 81063f8:	0810641b 	.word	0x0810641b
 81063fc:	08106433 	.word	0x08106433
 8106400:	08106433 	.word	0x08106433
 8106404:	08106433 	.word	0x08106433
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106408:	687b      	ldr	r3, [r7, #4]
 810640a:	3304      	adds	r3, #4
 810640c:	2101      	movs	r1, #1
 810640e:	4618      	mov	r0, r3
 8106410:	f001 fbd8 	bl	8107bc4 <RCCEx_PLL2_Config>
 8106414:	4603      	mov	r3, r0
 8106416:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8106418:	e00c      	b.n	8106434 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	3324      	adds	r3, #36	; 0x24
 810641e:	2101      	movs	r1, #1
 8106420:	4618      	mov	r0, r3
 8106422:	f001 fc81 	bl	8107d28 <RCCEx_PLL3_Config>
 8106426:	4603      	mov	r3, r0
 8106428:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810642a:	e003      	b.n	8106434 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810642c:	2301      	movs	r3, #1
 810642e:	75fb      	strb	r3, [r7, #23]
      break;
 8106430:	e000      	b.n	8106434 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8106432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106434:	7dfb      	ldrb	r3, [r7, #23]
 8106436:	2b00      	cmp	r3, #0
 8106438:	d109      	bne.n	810644e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810643a:	4b77      	ldr	r3, [pc, #476]	; (8106618 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810643c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810643e:	f023 0207 	bic.w	r2, r3, #7
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106446:	4974      	ldr	r1, [pc, #464]	; (8106618 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106448:	4313      	orrs	r3, r2
 810644a:	654b      	str	r3, [r1, #84]	; 0x54
 810644c:	e001      	b.n	8106452 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810644e:	7dfb      	ldrb	r3, [r7, #23]
 8106450:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	681b      	ldr	r3, [r3, #0]
 8106456:	f003 0304 	and.w	r3, r3, #4
 810645a:	2b00      	cmp	r3, #0
 810645c:	d03a      	beq.n	81064d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810645e:	687b      	ldr	r3, [r7, #4]
 8106460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106464:	2b05      	cmp	r3, #5
 8106466:	d821      	bhi.n	81064ac <HAL_RCCEx_PeriphCLKConfig+0x938>
 8106468:	a201      	add	r2, pc, #4	; (adr r2, 8106470 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 810646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810646e:	bf00      	nop
 8106470:	081064b3 	.word	0x081064b3
 8106474:	08106489 	.word	0x08106489
 8106478:	0810649b 	.word	0x0810649b
 810647c:	081064b3 	.word	0x081064b3
 8106480:	081064b3 	.word	0x081064b3
 8106484:	081064b3 	.word	0x081064b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106488:	687b      	ldr	r3, [r7, #4]
 810648a:	3304      	adds	r3, #4
 810648c:	2101      	movs	r1, #1
 810648e:	4618      	mov	r0, r3
 8106490:	f001 fb98 	bl	8107bc4 <RCCEx_PLL2_Config>
 8106494:	4603      	mov	r3, r0
 8106496:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8106498:	e00c      	b.n	81064b4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	3324      	adds	r3, #36	; 0x24
 810649e:	2101      	movs	r1, #1
 81064a0:	4618      	mov	r0, r3
 81064a2:	f001 fc41 	bl	8107d28 <RCCEx_PLL3_Config>
 81064a6:	4603      	mov	r3, r0
 81064a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81064aa:	e003      	b.n	81064b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81064ac:	2301      	movs	r3, #1
 81064ae:	75fb      	strb	r3, [r7, #23]
      break;
 81064b0:	e000      	b.n	81064b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 81064b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81064b4:	7dfb      	ldrb	r3, [r7, #23]
 81064b6:	2b00      	cmp	r3, #0
 81064b8:	d10a      	bne.n	81064d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81064ba:	4b57      	ldr	r3, [pc, #348]	; (8106618 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81064bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81064be:	f023 0207 	bic.w	r2, r3, #7
 81064c2:	687b      	ldr	r3, [r7, #4]
 81064c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81064c8:	4953      	ldr	r1, [pc, #332]	; (8106618 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81064ca:	4313      	orrs	r3, r2
 81064cc:	658b      	str	r3, [r1, #88]	; 0x58
 81064ce:	e001      	b.n	81064d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064d0:	7dfb      	ldrb	r3, [r7, #23]
 81064d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81064d4:	687b      	ldr	r3, [r7, #4]
 81064d6:	681b      	ldr	r3, [r3, #0]
 81064d8:	f003 0320 	and.w	r3, r3, #32
 81064dc:	2b00      	cmp	r3, #0
 81064de:	d04b      	beq.n	8106578 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81064e0:	687b      	ldr	r3, [r7, #4]
 81064e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81064e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81064ea:	d02e      	beq.n	810654a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81064ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81064f0:	d828      	bhi.n	8106544 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81064f6:	d02a      	beq.n	810654e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81064fc:	d822      	bhi.n	8106544 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81064fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106502:	d026      	beq.n	8106552 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8106504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106508:	d81c      	bhi.n	8106544 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810650a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810650e:	d010      	beq.n	8106532 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8106510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106514:	d816      	bhi.n	8106544 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8106516:	2b00      	cmp	r3, #0
 8106518:	d01d      	beq.n	8106556 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810651a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810651e:	d111      	bne.n	8106544 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	3304      	adds	r3, #4
 8106524:	2100      	movs	r1, #0
 8106526:	4618      	mov	r0, r3
 8106528:	f001 fb4c 	bl	8107bc4 <RCCEx_PLL2_Config>
 810652c:	4603      	mov	r3, r0
 810652e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8106530:	e012      	b.n	8106558 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106532:	687b      	ldr	r3, [r7, #4]
 8106534:	3324      	adds	r3, #36	; 0x24
 8106536:	2102      	movs	r1, #2
 8106538:	4618      	mov	r0, r3
 810653a:	f001 fbf5 	bl	8107d28 <RCCEx_PLL3_Config>
 810653e:	4603      	mov	r3, r0
 8106540:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8106542:	e009      	b.n	8106558 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106544:	2301      	movs	r3, #1
 8106546:	75fb      	strb	r3, [r7, #23]
      break;
 8106548:	e006      	b.n	8106558 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810654a:	bf00      	nop
 810654c:	e004      	b.n	8106558 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810654e:	bf00      	nop
 8106550:	e002      	b.n	8106558 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8106552:	bf00      	nop
 8106554:	e000      	b.n	8106558 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8106556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106558:	7dfb      	ldrb	r3, [r7, #23]
 810655a:	2b00      	cmp	r3, #0
 810655c:	d10a      	bne.n	8106574 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810655e:	4b2e      	ldr	r3, [pc, #184]	; (8106618 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106562:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8106566:	687b      	ldr	r3, [r7, #4]
 8106568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810656c:	492a      	ldr	r1, [pc, #168]	; (8106618 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810656e:	4313      	orrs	r3, r2
 8106570:	654b      	str	r3, [r1, #84]	; 0x54
 8106572:	e001      	b.n	8106578 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106574:	7dfb      	ldrb	r3, [r7, #23]
 8106576:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	681b      	ldr	r3, [r3, #0]
 810657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106580:	2b00      	cmp	r3, #0
 8106582:	d04d      	beq.n	8106620 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8106584:	687b      	ldr	r3, [r7, #4]
 8106586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810658a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810658e:	d02e      	beq.n	81065ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8106590:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106594:	d828      	bhi.n	81065e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8106596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810659a:	d02a      	beq.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810659c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81065a0:	d822      	bhi.n	81065e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81065a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81065a6:	d026      	beq.n	81065f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81065a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81065ac:	d81c      	bhi.n	81065e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81065ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81065b2:	d010      	beq.n	81065d6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 81065b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81065b8:	d816      	bhi.n	81065e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81065ba:	2b00      	cmp	r3, #0
 81065bc:	d01d      	beq.n	81065fa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 81065be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81065c2:	d111      	bne.n	81065e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	3304      	adds	r3, #4
 81065c8:	2100      	movs	r1, #0
 81065ca:	4618      	mov	r0, r3
 81065cc:	f001 fafa 	bl	8107bc4 <RCCEx_PLL2_Config>
 81065d0:	4603      	mov	r3, r0
 81065d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81065d4:	e012      	b.n	81065fc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81065d6:	687b      	ldr	r3, [r7, #4]
 81065d8:	3324      	adds	r3, #36	; 0x24
 81065da:	2102      	movs	r1, #2
 81065dc:	4618      	mov	r0, r3
 81065de:	f001 fba3 	bl	8107d28 <RCCEx_PLL3_Config>
 81065e2:	4603      	mov	r3, r0
 81065e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81065e6:	e009      	b.n	81065fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81065e8:	2301      	movs	r3, #1
 81065ea:	75fb      	strb	r3, [r7, #23]
      break;
 81065ec:	e006      	b.n	81065fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81065ee:	bf00      	nop
 81065f0:	e004      	b.n	81065fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81065f2:	bf00      	nop
 81065f4:	e002      	b.n	81065fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81065f6:	bf00      	nop
 81065f8:	e000      	b.n	81065fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81065fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81065fc:	7dfb      	ldrb	r3, [r7, #23]
 81065fe:	2b00      	cmp	r3, #0
 8106600:	d10c      	bne.n	810661c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106602:	4b05      	ldr	r3, [pc, #20]	; (8106618 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106606:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106610:	4901      	ldr	r1, [pc, #4]	; (8106618 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106612:	4313      	orrs	r3, r2
 8106614:	658b      	str	r3, [r1, #88]	; 0x58
 8106616:	e003      	b.n	8106620 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8106618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810661c:	7dfb      	ldrb	r3, [r7, #23]
 810661e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106620:	687b      	ldr	r3, [r7, #4]
 8106622:	681b      	ldr	r3, [r3, #0]
 8106624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106628:	2b00      	cmp	r3, #0
 810662a:	d04b      	beq.n	81066c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 810662c:	687b      	ldr	r3, [r7, #4]
 810662e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8106632:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106636:	d02e      	beq.n	8106696 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8106638:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810663c:	d828      	bhi.n	8106690 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810663e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106642:	d02a      	beq.n	810669a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8106644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106648:	d822      	bhi.n	8106690 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810664a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810664e:	d026      	beq.n	810669e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8106650:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106654:	d81c      	bhi.n	8106690 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8106656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810665a:	d010      	beq.n	810667e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 810665c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106660:	d816      	bhi.n	8106690 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8106662:	2b00      	cmp	r3, #0
 8106664:	d01d      	beq.n	81066a2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8106666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810666a:	d111      	bne.n	8106690 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	3304      	adds	r3, #4
 8106670:	2100      	movs	r1, #0
 8106672:	4618      	mov	r0, r3
 8106674:	f001 faa6 	bl	8107bc4 <RCCEx_PLL2_Config>
 8106678:	4603      	mov	r3, r0
 810667a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810667c:	e012      	b.n	81066a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810667e:	687b      	ldr	r3, [r7, #4]
 8106680:	3324      	adds	r3, #36	; 0x24
 8106682:	2102      	movs	r1, #2
 8106684:	4618      	mov	r0, r3
 8106686:	f001 fb4f 	bl	8107d28 <RCCEx_PLL3_Config>
 810668a:	4603      	mov	r3, r0
 810668c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810668e:	e009      	b.n	81066a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106690:	2301      	movs	r3, #1
 8106692:	75fb      	strb	r3, [r7, #23]
      break;
 8106694:	e006      	b.n	81066a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8106696:	bf00      	nop
 8106698:	e004      	b.n	81066a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810669a:	bf00      	nop
 810669c:	e002      	b.n	81066a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810669e:	bf00      	nop
 81066a0:	e000      	b.n	81066a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81066a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81066a4:	7dfb      	ldrb	r3, [r7, #23]
 81066a6:	2b00      	cmp	r3, #0
 81066a8:	d10a      	bne.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81066aa:	4b9d      	ldr	r3, [pc, #628]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81066ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81066ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81066b8:	4999      	ldr	r1, [pc, #612]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81066ba:	4313      	orrs	r3, r2
 81066bc:	658b      	str	r3, [r1, #88]	; 0x58
 81066be:	e001      	b.n	81066c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066c0:	7dfb      	ldrb	r3, [r7, #23]
 81066c2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	681b      	ldr	r3, [r3, #0]
 81066c8:	f003 0308 	and.w	r3, r3, #8
 81066cc:	2b00      	cmp	r3, #0
 81066ce:	d01a      	beq.n	8106706 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81066d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81066da:	d10a      	bne.n	81066f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81066dc:	687b      	ldr	r3, [r7, #4]
 81066de:	3324      	adds	r3, #36	; 0x24
 81066e0:	2102      	movs	r1, #2
 81066e2:	4618      	mov	r0, r3
 81066e4:	f001 fb20 	bl	8107d28 <RCCEx_PLL3_Config>
 81066e8:	4603      	mov	r3, r0
 81066ea:	2b00      	cmp	r3, #0
 81066ec:	d001      	beq.n	81066f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 81066ee:	2301      	movs	r3, #1
 81066f0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81066f2:	4b8b      	ldr	r3, [pc, #556]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81066fa:	687b      	ldr	r3, [r7, #4]
 81066fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106700:	4987      	ldr	r1, [pc, #540]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106702:	4313      	orrs	r3, r2
 8106704:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8106706:	687b      	ldr	r3, [r7, #4]
 8106708:	681b      	ldr	r3, [r3, #0]
 810670a:	f003 0310 	and.w	r3, r3, #16
 810670e:	2b00      	cmp	r3, #0
 8106710:	d01a      	beq.n	8106748 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8106712:	687b      	ldr	r3, [r7, #4]
 8106714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810671c:	d10a      	bne.n	8106734 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	3324      	adds	r3, #36	; 0x24
 8106722:	2102      	movs	r1, #2
 8106724:	4618      	mov	r0, r3
 8106726:	f001 faff 	bl	8107d28 <RCCEx_PLL3_Config>
 810672a:	4603      	mov	r3, r0
 810672c:	2b00      	cmp	r3, #0
 810672e:	d001      	beq.n	8106734 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8106730:	2301      	movs	r3, #1
 8106732:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106734:	4b7a      	ldr	r3, [pc, #488]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810673c:	687b      	ldr	r3, [r7, #4]
 810673e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106742:	4977      	ldr	r1, [pc, #476]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106744:	4313      	orrs	r3, r2
 8106746:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	681b      	ldr	r3, [r3, #0]
 810674c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8106750:	2b00      	cmp	r3, #0
 8106752:	d034      	beq.n	81067be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8106754:	687b      	ldr	r3, [r7, #4]
 8106756:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810675a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810675e:	d01d      	beq.n	810679c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8106760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106764:	d817      	bhi.n	8106796 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8106766:	2b00      	cmp	r3, #0
 8106768:	d003      	beq.n	8106772 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 810676a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810676e:	d009      	beq.n	8106784 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8106770:	e011      	b.n	8106796 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106772:	687b      	ldr	r3, [r7, #4]
 8106774:	3304      	adds	r3, #4
 8106776:	2100      	movs	r1, #0
 8106778:	4618      	mov	r0, r3
 810677a:	f001 fa23 	bl	8107bc4 <RCCEx_PLL2_Config>
 810677e:	4603      	mov	r3, r0
 8106780:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8106782:	e00c      	b.n	810679e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106784:	687b      	ldr	r3, [r7, #4]
 8106786:	3324      	adds	r3, #36	; 0x24
 8106788:	2102      	movs	r1, #2
 810678a:	4618      	mov	r0, r3
 810678c:	f001 facc 	bl	8107d28 <RCCEx_PLL3_Config>
 8106790:	4603      	mov	r3, r0
 8106792:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8106794:	e003      	b.n	810679e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106796:	2301      	movs	r3, #1
 8106798:	75fb      	strb	r3, [r7, #23]
      break;
 810679a:	e000      	b.n	810679e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 810679c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810679e:	7dfb      	ldrb	r3, [r7, #23]
 81067a0:	2b00      	cmp	r3, #0
 81067a2:	d10a      	bne.n	81067ba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81067a4:	4b5e      	ldr	r3, [pc, #376]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81067a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81067a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81067ac:	687b      	ldr	r3, [r7, #4]
 81067ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81067b2:	495b      	ldr	r1, [pc, #364]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81067b4:	4313      	orrs	r3, r2
 81067b6:	658b      	str	r3, [r1, #88]	; 0x58
 81067b8:	e001      	b.n	81067be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067ba:	7dfb      	ldrb	r3, [r7, #23]
 81067bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81067be:	687b      	ldr	r3, [r7, #4]
 81067c0:	681b      	ldr	r3, [r3, #0]
 81067c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81067c6:	2b00      	cmp	r3, #0
 81067c8:	d033      	beq.n	8106832 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81067ca:	687b      	ldr	r3, [r7, #4]
 81067cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81067d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81067d4:	d01c      	beq.n	8106810 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 81067d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81067da:	d816      	bhi.n	810680a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 81067dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81067e0:	d003      	beq.n	81067ea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 81067e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81067e6:	d007      	beq.n	81067f8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 81067e8:	e00f      	b.n	810680a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81067ea:	4b4d      	ldr	r3, [pc, #308]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81067ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81067ee:	4a4c      	ldr	r2, [pc, #304]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81067f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81067f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81067f6:	e00c      	b.n	8106812 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81067f8:	687b      	ldr	r3, [r7, #4]
 81067fa:	3324      	adds	r3, #36	; 0x24
 81067fc:	2101      	movs	r1, #1
 81067fe:	4618      	mov	r0, r3
 8106800:	f001 fa92 	bl	8107d28 <RCCEx_PLL3_Config>
 8106804:	4603      	mov	r3, r0
 8106806:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8106808:	e003      	b.n	8106812 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810680a:	2301      	movs	r3, #1
 810680c:	75fb      	strb	r3, [r7, #23]
      break;
 810680e:	e000      	b.n	8106812 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8106810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106812:	7dfb      	ldrb	r3, [r7, #23]
 8106814:	2b00      	cmp	r3, #0
 8106816:	d10a      	bne.n	810682e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106818:	4b41      	ldr	r3, [pc, #260]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810681a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810681c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8106820:	687b      	ldr	r3, [r7, #4]
 8106822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106826:	493e      	ldr	r1, [pc, #248]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106828:	4313      	orrs	r3, r2
 810682a:	654b      	str	r3, [r1, #84]	; 0x54
 810682c:	e001      	b.n	8106832 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810682e:	7dfb      	ldrb	r3, [r7, #23]
 8106830:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8106832:	687b      	ldr	r3, [r7, #4]
 8106834:	681b      	ldr	r3, [r3, #0]
 8106836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810683a:	2b00      	cmp	r3, #0
 810683c:	d029      	beq.n	8106892 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810683e:	687b      	ldr	r3, [r7, #4]
 8106840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106842:	2b00      	cmp	r3, #0
 8106844:	d003      	beq.n	810684e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8106846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810684a:	d007      	beq.n	810685c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 810684c:	e00f      	b.n	810686e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810684e:	4b34      	ldr	r3, [pc, #208]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106852:	4a33      	ldr	r2, [pc, #204]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810685a:	e00b      	b.n	8106874 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810685c:	687b      	ldr	r3, [r7, #4]
 810685e:	3304      	adds	r3, #4
 8106860:	2102      	movs	r1, #2
 8106862:	4618      	mov	r0, r3
 8106864:	f001 f9ae 	bl	8107bc4 <RCCEx_PLL2_Config>
 8106868:	4603      	mov	r3, r0
 810686a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810686c:	e002      	b.n	8106874 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 810686e:	2301      	movs	r3, #1
 8106870:	75fb      	strb	r3, [r7, #23]
      break;
 8106872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106874:	7dfb      	ldrb	r3, [r7, #23]
 8106876:	2b00      	cmp	r3, #0
 8106878:	d109      	bne.n	810688e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810687a:	4b29      	ldr	r3, [pc, #164]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810687c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810687e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106882:	687b      	ldr	r3, [r7, #4]
 8106884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106886:	4926      	ldr	r1, [pc, #152]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106888:	4313      	orrs	r3, r2
 810688a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810688c:	e001      	b.n	8106892 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810688e:	7dfb      	ldrb	r3, [r7, #23]
 8106890:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106892:	687b      	ldr	r3, [r7, #4]
 8106894:	681b      	ldr	r3, [r3, #0]
 8106896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810689a:	2b00      	cmp	r3, #0
 810689c:	d00a      	beq.n	81068b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810689e:	687b      	ldr	r3, [r7, #4]
 81068a0:	3324      	adds	r3, #36	; 0x24
 81068a2:	2102      	movs	r1, #2
 81068a4:	4618      	mov	r0, r3
 81068a6:	f001 fa3f 	bl	8107d28 <RCCEx_PLL3_Config>
 81068aa:	4603      	mov	r3, r0
 81068ac:	2b00      	cmp	r3, #0
 81068ae:	d001      	beq.n	81068b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 81068b0:	2301      	movs	r3, #1
 81068b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81068b4:	687b      	ldr	r3, [r7, #4]
 81068b6:	681b      	ldr	r3, [r3, #0]
 81068b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81068bc:	2b00      	cmp	r3, #0
 81068be:	d033      	beq.n	8106928 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81068c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81068c8:	d017      	beq.n	81068fa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81068ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81068ce:	d811      	bhi.n	81068f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81068d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81068d4:	d013      	beq.n	81068fe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81068d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81068da:	d80b      	bhi.n	81068f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81068dc:	2b00      	cmp	r3, #0
 81068de:	d010      	beq.n	8106902 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 81068e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81068e4:	d106      	bne.n	81068f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81068e6:	4b0e      	ldr	r3, [pc, #56]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068ea:	4a0d      	ldr	r2, [pc, #52]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81068ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81068f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81068f2:	e007      	b.n	8106904 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81068f4:	2301      	movs	r3, #1
 81068f6:	75fb      	strb	r3, [r7, #23]
      break;
 81068f8:	e004      	b.n	8106904 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81068fa:	bf00      	nop
 81068fc:	e002      	b.n	8106904 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81068fe:	bf00      	nop
 8106900:	e000      	b.n	8106904 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8106902:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106904:	7dfb      	ldrb	r3, [r7, #23]
 8106906:	2b00      	cmp	r3, #0
 8106908:	d10c      	bne.n	8106924 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810690a:	4b05      	ldr	r3, [pc, #20]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810690c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810690e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106912:	687b      	ldr	r3, [r7, #4]
 8106914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106916:	4902      	ldr	r1, [pc, #8]	; (8106920 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106918:	4313      	orrs	r3, r2
 810691a:	654b      	str	r3, [r1, #84]	; 0x54
 810691c:	e004      	b.n	8106928 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 810691e:	bf00      	nop
 8106920:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106924:	7dfb      	ldrb	r3, [r7, #23]
 8106926:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106928:	687b      	ldr	r3, [r7, #4]
 810692a:	681b      	ldr	r3, [r3, #0]
 810692c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106930:	2b00      	cmp	r3, #0
 8106932:	d008      	beq.n	8106946 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106934:	4b31      	ldr	r3, [pc, #196]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106938:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106940:	492e      	ldr	r1, [pc, #184]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106942:	4313      	orrs	r3, r2
 8106944:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106946:	687b      	ldr	r3, [r7, #4]
 8106948:	681b      	ldr	r3, [r3, #0]
 810694a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810694e:	2b00      	cmp	r3, #0
 8106950:	d009      	beq.n	8106966 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106952:	4b2a      	ldr	r3, [pc, #168]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106954:	691b      	ldr	r3, [r3, #16]
 8106956:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810695a:	687b      	ldr	r3, [r7, #4]
 810695c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106960:	4926      	ldr	r1, [pc, #152]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106962:	4313      	orrs	r3, r2
 8106964:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106966:	687b      	ldr	r3, [r7, #4]
 8106968:	681b      	ldr	r3, [r3, #0]
 810696a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810696e:	2b00      	cmp	r3, #0
 8106970:	d008      	beq.n	8106984 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8106972:	4b22      	ldr	r3, [pc, #136]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106976:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810697a:	687b      	ldr	r3, [r7, #4]
 810697c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810697e:	491f      	ldr	r1, [pc, #124]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106980:	4313      	orrs	r3, r2
 8106982:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	681b      	ldr	r3, [r3, #0]
 8106988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810698c:	2b00      	cmp	r3, #0
 810698e:	d00d      	beq.n	81069ac <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8106990:	4b1a      	ldr	r3, [pc, #104]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106992:	691b      	ldr	r3, [r3, #16]
 8106994:	4a19      	ldr	r2, [pc, #100]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106996:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810699a:	6113      	str	r3, [r2, #16]
 810699c:	4b17      	ldr	r3, [pc, #92]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810699e:	691a      	ldr	r2, [r3, #16]
 81069a0:	687b      	ldr	r3, [r7, #4]
 81069a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81069a6:	4915      	ldr	r1, [pc, #84]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81069a8:	4313      	orrs	r3, r2
 81069aa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81069ac:	687b      	ldr	r3, [r7, #4]
 81069ae:	681b      	ldr	r3, [r3, #0]
 81069b0:	2b00      	cmp	r3, #0
 81069b2:	da08      	bge.n	81069c6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81069b4:	4b11      	ldr	r3, [pc, #68]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81069b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81069b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81069bc:	687b      	ldr	r3, [r7, #4]
 81069be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81069c0:	490e      	ldr	r1, [pc, #56]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81069c2:	4313      	orrs	r3, r2
 81069c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81069c6:	687b      	ldr	r3, [r7, #4]
 81069c8:	681b      	ldr	r3, [r3, #0]
 81069ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81069ce:	2b00      	cmp	r3, #0
 81069d0:	d009      	beq.n	81069e6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81069d2:	4b0a      	ldr	r3, [pc, #40]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81069d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81069d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81069da:	687b      	ldr	r3, [r7, #4]
 81069dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81069e0:	4906      	ldr	r1, [pc, #24]	; (81069fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81069e2:	4313      	orrs	r3, r2
 81069e4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81069e6:	7dbb      	ldrb	r3, [r7, #22]
 81069e8:	2b00      	cmp	r3, #0
 81069ea:	d101      	bne.n	81069f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81069ec:	2300      	movs	r3, #0
 81069ee:	e000      	b.n	81069f2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81069f0:	2301      	movs	r3, #1
}
 81069f2:	4618      	mov	r0, r3
 81069f4:	3718      	adds	r7, #24
 81069f6:	46bd      	mov	sp, r7
 81069f8:	bd80      	pop	{r7, pc}
 81069fa:	bf00      	nop
 81069fc:	58024400 	.word	0x58024400

08106a00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8106a00:	b580      	push	{r7, lr}
 8106a02:	b090      	sub	sp, #64	; 0x40
 8106a04:	af00      	add	r7, sp, #0
 8106a06:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106a0e:	f040 8095 	bne.w	8106b3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8106a12:	4b97      	ldr	r3, [pc, #604]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106a16:	f003 0307 	and.w	r3, r3, #7
 8106a1a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106a1e:	2b04      	cmp	r3, #4
 8106a20:	f200 8088 	bhi.w	8106b34 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8106a24:	a201      	add	r2, pc, #4	; (adr r2, 8106a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8106a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106a2a:	bf00      	nop
 8106a2c:	08106a41 	.word	0x08106a41
 8106a30:	08106a69 	.word	0x08106a69
 8106a34:	08106a91 	.word	0x08106a91
 8106a38:	08106b2d 	.word	0x08106b2d
 8106a3c:	08106ab9 	.word	0x08106ab9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106a40:	4b8b      	ldr	r3, [pc, #556]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a42:	681b      	ldr	r3, [r3, #0]
 8106a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106a48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106a4c:	d108      	bne.n	8106a60 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106a52:	4618      	mov	r0, r3
 8106a54:	f000 ff64 	bl	8107920 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8106a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106a5c:	f000 bc94 	b.w	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106a60:	2300      	movs	r3, #0
 8106a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a64:	f000 bc90 	b.w	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106a68:	4b81      	ldr	r3, [pc, #516]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a6a:	681b      	ldr	r3, [r3, #0]
 8106a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106a74:	d108      	bne.n	8106a88 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106a76:	f107 0318 	add.w	r3, r7, #24
 8106a7a:	4618      	mov	r0, r3
 8106a7c:	f000 fca8 	bl	81073d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106a80:	69bb      	ldr	r3, [r7, #24]
 8106a82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106a84:	f000 bc80 	b.w	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106a88:	2300      	movs	r3, #0
 8106a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a8c:	f000 bc7c 	b.w	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106a90:	4b77      	ldr	r3, [pc, #476]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a92:	681b      	ldr	r3, [r3, #0]
 8106a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106a9c:	d108      	bne.n	8106ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106a9e:	f107 030c 	add.w	r3, r7, #12
 8106aa2:	4618      	mov	r0, r3
 8106aa4:	f000 fde8 	bl	8107678 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106aa8:	68fb      	ldr	r3, [r7, #12]
 8106aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106aac:	f000 bc6c 	b.w	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106ab0:	2300      	movs	r3, #0
 8106ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106ab4:	f000 bc68 	b.w	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106ab8:	4b6d      	ldr	r3, [pc, #436]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106abc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106ac0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106ac2:	4b6b      	ldr	r3, [pc, #428]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106ac4:	681b      	ldr	r3, [r3, #0]
 8106ac6:	f003 0304 	and.w	r3, r3, #4
 8106aca:	2b04      	cmp	r3, #4
 8106acc:	d10c      	bne.n	8106ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8106ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106ad0:	2b00      	cmp	r3, #0
 8106ad2:	d109      	bne.n	8106ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106ad4:	4b66      	ldr	r3, [pc, #408]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106ad6:	681b      	ldr	r3, [r3, #0]
 8106ad8:	08db      	lsrs	r3, r3, #3
 8106ada:	f003 0303 	and.w	r3, r3, #3
 8106ade:	4a65      	ldr	r2, [pc, #404]	; (8106c74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8106ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8106ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106ae6:	e01f      	b.n	8106b28 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106ae8:	4b61      	ldr	r3, [pc, #388]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106aea:	681b      	ldr	r3, [r3, #0]
 8106aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106af4:	d106      	bne.n	8106b04 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8106af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106afc:	d102      	bne.n	8106b04 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106afe:	4b5e      	ldr	r3, [pc, #376]	; (8106c78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8106b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106b02:	e011      	b.n	8106b28 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106b04:	4b5a      	ldr	r3, [pc, #360]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106b06:	681b      	ldr	r3, [r3, #0]
 8106b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106b0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106b10:	d106      	bne.n	8106b20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8106b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106b18:	d102      	bne.n	8106b20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106b1a:	4b58      	ldr	r3, [pc, #352]	; (8106c7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8106b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106b1e:	e003      	b.n	8106b28 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106b20:	2300      	movs	r3, #0
 8106b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106b24:	f000 bc30 	b.w	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106b28:	f000 bc2e 	b.w	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106b2c:	4b54      	ldr	r3, [pc, #336]	; (8106c80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8106b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b30:	f000 bc2a 	b.w	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8106b34:	2300      	movs	r3, #0
 8106b36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b38:	f000 bc26 	b.w	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8106b3c:	687b      	ldr	r3, [r7, #4]
 8106b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106b42:	f040 809f 	bne.w	8106c84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8106b46:	4b4a      	ldr	r3, [pc, #296]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106b4a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8106b4e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106b56:	d04d      	beq.n	8106bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8106b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106b5e:	f200 8084 	bhi.w	8106c6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8106b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b64:	2bc0      	cmp	r3, #192	; 0xc0
 8106b66:	d07d      	beq.n	8106c64 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8106b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8106b6c:	d87d      	bhi.n	8106c6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8106b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b70:	2b80      	cmp	r3, #128	; 0x80
 8106b72:	d02d      	beq.n	8106bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8106b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b76:	2b80      	cmp	r3, #128	; 0x80
 8106b78:	d877      	bhi.n	8106c6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8106b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b7c:	2b00      	cmp	r3, #0
 8106b7e:	d003      	beq.n	8106b88 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8106b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b82:	2b40      	cmp	r3, #64	; 0x40
 8106b84:	d012      	beq.n	8106bac <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8106b86:	e070      	b.n	8106c6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106b88:	4b39      	ldr	r3, [pc, #228]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106b8a:	681b      	ldr	r3, [r3, #0]
 8106b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106b94:	d107      	bne.n	8106ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106b9a:	4618      	mov	r0, r3
 8106b9c:	f000 fec0 	bl	8107920 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106ba4:	e3f0      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106ba6:	2300      	movs	r3, #0
 8106ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106baa:	e3ed      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106bac:	4b30      	ldr	r3, [pc, #192]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106bae:	681b      	ldr	r3, [r3, #0]
 8106bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106bb8:	d107      	bne.n	8106bca <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106bba:	f107 0318 	add.w	r3, r7, #24
 8106bbe:	4618      	mov	r0, r3
 8106bc0:	f000 fc06 	bl	81073d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106bc4:	69bb      	ldr	r3, [r7, #24]
 8106bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106bc8:	e3de      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106bca:	2300      	movs	r3, #0
 8106bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106bce:	e3db      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106bd0:	4b27      	ldr	r3, [pc, #156]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106bd2:	681b      	ldr	r3, [r3, #0]
 8106bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106bdc:	d107      	bne.n	8106bee <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106bde:	f107 030c 	add.w	r3, r7, #12
 8106be2:	4618      	mov	r0, r3
 8106be4:	f000 fd48 	bl	8107678 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106be8:	68fb      	ldr	r3, [r7, #12]
 8106bea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106bec:	e3cc      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106bee:	2300      	movs	r3, #0
 8106bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106bf2:	e3c9      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106bf4:	4b1e      	ldr	r3, [pc, #120]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106bf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106bfc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106bfe:	4b1c      	ldr	r3, [pc, #112]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106c00:	681b      	ldr	r3, [r3, #0]
 8106c02:	f003 0304 	and.w	r3, r3, #4
 8106c06:	2b04      	cmp	r3, #4
 8106c08:	d10c      	bne.n	8106c24 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8106c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106c0c:	2b00      	cmp	r3, #0
 8106c0e:	d109      	bne.n	8106c24 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106c10:	4b17      	ldr	r3, [pc, #92]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106c12:	681b      	ldr	r3, [r3, #0]
 8106c14:	08db      	lsrs	r3, r3, #3
 8106c16:	f003 0303 	and.w	r3, r3, #3
 8106c1a:	4a16      	ldr	r2, [pc, #88]	; (8106c74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8106c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8106c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106c22:	e01e      	b.n	8106c62 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106c24:	4b12      	ldr	r3, [pc, #72]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106c26:	681b      	ldr	r3, [r3, #0]
 8106c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106c30:	d106      	bne.n	8106c40 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8106c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106c34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106c38:	d102      	bne.n	8106c40 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106c3a:	4b0f      	ldr	r3, [pc, #60]	; (8106c78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8106c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106c3e:	e010      	b.n	8106c62 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106c40:	4b0b      	ldr	r3, [pc, #44]	; (8106c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106c42:	681b      	ldr	r3, [r3, #0]
 8106c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106c4c:	d106      	bne.n	8106c5c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8106c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106c54:	d102      	bne.n	8106c5c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106c56:	4b09      	ldr	r3, [pc, #36]	; (8106c7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8106c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106c5a:	e002      	b.n	8106c62 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106c5c:	2300      	movs	r3, #0
 8106c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106c60:	e392      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106c62:	e391      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106c64:	4b06      	ldr	r3, [pc, #24]	; (8106c80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8106c66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c68:	e38e      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8106c6a:	2300      	movs	r3, #0
 8106c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c6e:	e38b      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106c70:	58024400 	.word	0x58024400
 8106c74:	03d09000 	.word	0x03d09000
 8106c78:	003d0900 	.word	0x003d0900
 8106c7c:	007a1200 	.word	0x007a1200
 8106c80:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8106c8a:	f040 809c 	bne.w	8106dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8106c8e:	4b9d      	ldr	r3, [pc, #628]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106c92:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8106c96:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106c9e:	d054      	beq.n	8106d4a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8106ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ca2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106ca6:	f200 808b 	bhi.w	8106dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8106caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106cac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106cb0:	f000 8083 	beq.w	8106dba <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8106cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106cb6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106cba:	f200 8081 	bhi.w	8106dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8106cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106cc4:	d02f      	beq.n	8106d26 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8106cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106ccc:	d878      	bhi.n	8106dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8106cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106cd0:	2b00      	cmp	r3, #0
 8106cd2:	d004      	beq.n	8106cde <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8106cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106cda:	d012      	beq.n	8106d02 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8106cdc:	e070      	b.n	8106dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106cde:	4b89      	ldr	r3, [pc, #548]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106ce0:	681b      	ldr	r3, [r3, #0]
 8106ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106cea:	d107      	bne.n	8106cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106cf0:	4618      	mov	r0, r3
 8106cf2:	f000 fe15 	bl	8107920 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106cfa:	e345      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106cfc:	2300      	movs	r3, #0
 8106cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d00:	e342      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106d02:	4b80      	ldr	r3, [pc, #512]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d04:	681b      	ldr	r3, [r3, #0]
 8106d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106d0e:	d107      	bne.n	8106d20 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106d10:	f107 0318 	add.w	r3, r7, #24
 8106d14:	4618      	mov	r0, r3
 8106d16:	f000 fb5b 	bl	81073d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106d1a:	69bb      	ldr	r3, [r7, #24]
 8106d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106d1e:	e333      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106d20:	2300      	movs	r3, #0
 8106d22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d24:	e330      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106d26:	4b77      	ldr	r3, [pc, #476]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d28:	681b      	ldr	r3, [r3, #0]
 8106d2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106d32:	d107      	bne.n	8106d44 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106d34:	f107 030c 	add.w	r3, r7, #12
 8106d38:	4618      	mov	r0, r3
 8106d3a:	f000 fc9d 	bl	8107678 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106d3e:	68fb      	ldr	r3, [r7, #12]
 8106d40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106d42:	e321      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106d44:	2300      	movs	r3, #0
 8106d46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d48:	e31e      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106d4a:	4b6e      	ldr	r3, [pc, #440]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106d4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106d52:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106d54:	4b6b      	ldr	r3, [pc, #428]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d56:	681b      	ldr	r3, [r3, #0]
 8106d58:	f003 0304 	and.w	r3, r3, #4
 8106d5c:	2b04      	cmp	r3, #4
 8106d5e:	d10c      	bne.n	8106d7a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8106d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d62:	2b00      	cmp	r3, #0
 8106d64:	d109      	bne.n	8106d7a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106d66:	4b67      	ldr	r3, [pc, #412]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d68:	681b      	ldr	r3, [r3, #0]
 8106d6a:	08db      	lsrs	r3, r3, #3
 8106d6c:	f003 0303 	and.w	r3, r3, #3
 8106d70:	4a65      	ldr	r2, [pc, #404]	; (8106f08 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8106d72:	fa22 f303 	lsr.w	r3, r2, r3
 8106d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106d78:	e01e      	b.n	8106db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106d7a:	4b62      	ldr	r3, [pc, #392]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d7c:	681b      	ldr	r3, [r3, #0]
 8106d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106d86:	d106      	bne.n	8106d96 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8106d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106d8e:	d102      	bne.n	8106d96 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106d90:	4b5e      	ldr	r3, [pc, #376]	; (8106f0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8106d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106d94:	e010      	b.n	8106db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106d96:	4b5b      	ldr	r3, [pc, #364]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d98:	681b      	ldr	r3, [r3, #0]
 8106d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106da2:	d106      	bne.n	8106db2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8106da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106daa:	d102      	bne.n	8106db2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106dac:	4b58      	ldr	r3, [pc, #352]	; (8106f10 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8106dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106db0:	e002      	b.n	8106db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106db2:	2300      	movs	r3, #0
 8106db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106db6:	e2e7      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106db8:	e2e6      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106dba:	4b56      	ldr	r3, [pc, #344]	; (8106f14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8106dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106dbe:	e2e3      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8106dc0:	2300      	movs	r3, #0
 8106dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106dc4:	e2e0      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8106dc6:	687b      	ldr	r3, [r7, #4]
 8106dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106dcc:	f040 80a7 	bne.w	8106f1e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8106dd0:	4b4c      	ldr	r3, [pc, #304]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106dd4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8106dd8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106de0:	d055      	beq.n	8106e8e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8106de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106de4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106de8:	f200 8096 	bhi.w	8106f18 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8106dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106dee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106df2:	f000 8084 	beq.w	8106efe <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8106df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106df8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106dfc:	f200 808c 	bhi.w	8106f18 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8106e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106e06:	d030      	beq.n	8106e6a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8106e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106e0e:	f200 8083 	bhi.w	8106f18 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8106e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e14:	2b00      	cmp	r3, #0
 8106e16:	d004      	beq.n	8106e22 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8106e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8106e1e:	d012      	beq.n	8106e46 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8106e20:	e07a      	b.n	8106f18 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106e22:	4b38      	ldr	r3, [pc, #224]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106e24:	681b      	ldr	r3, [r3, #0]
 8106e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106e2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106e2e:	d107      	bne.n	8106e40 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106e34:	4618      	mov	r0, r3
 8106e36:	f000 fd73 	bl	8107920 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106e3e:	e2a3      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106e40:	2300      	movs	r3, #0
 8106e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e44:	e2a0      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106e46:	4b2f      	ldr	r3, [pc, #188]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106e48:	681b      	ldr	r3, [r3, #0]
 8106e4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106e4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106e52:	d107      	bne.n	8106e64 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106e54:	f107 0318 	add.w	r3, r7, #24
 8106e58:	4618      	mov	r0, r3
 8106e5a:	f000 fab9 	bl	81073d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106e5e:	69bb      	ldr	r3, [r7, #24]
 8106e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8106e62:	e291      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106e64:	2300      	movs	r3, #0
 8106e66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e68:	e28e      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106e6a:	4b26      	ldr	r3, [pc, #152]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106e6c:	681b      	ldr	r3, [r3, #0]
 8106e6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106e76:	d107      	bne.n	8106e88 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106e78:	f107 030c 	add.w	r3, r7, #12
 8106e7c:	4618      	mov	r0, r3
 8106e7e:	f000 fbfb 	bl	8107678 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106e82:	68fb      	ldr	r3, [r7, #12]
 8106e84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106e86:	e27f      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106e88:	2300      	movs	r3, #0
 8106e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e8c:	e27c      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106e8e:	4b1d      	ldr	r3, [pc, #116]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106e92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106e96:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106e98:	4b1a      	ldr	r3, [pc, #104]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106e9a:	681b      	ldr	r3, [r3, #0]
 8106e9c:	f003 0304 	and.w	r3, r3, #4
 8106ea0:	2b04      	cmp	r3, #4
 8106ea2:	d10c      	bne.n	8106ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8106ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106ea6:	2b00      	cmp	r3, #0
 8106ea8:	d109      	bne.n	8106ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106eaa:	4b16      	ldr	r3, [pc, #88]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106eac:	681b      	ldr	r3, [r3, #0]
 8106eae:	08db      	lsrs	r3, r3, #3
 8106eb0:	f003 0303 	and.w	r3, r3, #3
 8106eb4:	4a14      	ldr	r2, [pc, #80]	; (8106f08 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8106eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8106eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106ebc:	e01e      	b.n	8106efc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106ebe:	4b11      	ldr	r3, [pc, #68]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106ec0:	681b      	ldr	r3, [r3, #0]
 8106ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106eca:	d106      	bne.n	8106eda <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8106ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106ed2:	d102      	bne.n	8106eda <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106ed4:	4b0d      	ldr	r3, [pc, #52]	; (8106f0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8106ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106ed8:	e010      	b.n	8106efc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106eda:	4b0a      	ldr	r3, [pc, #40]	; (8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106edc:	681b      	ldr	r3, [r3, #0]
 8106ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106ee6:	d106      	bne.n	8106ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8106ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106eee:	d102      	bne.n	8106ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106ef0:	4b07      	ldr	r3, [pc, #28]	; (8106f10 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8106ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106ef4:	e002      	b.n	8106efc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106ef6:	2300      	movs	r3, #0
 8106ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106efa:	e245      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106efc:	e244      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106efe:	4b05      	ldr	r3, [pc, #20]	; (8106f14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8106f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106f02:	e241      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106f04:	58024400 	.word	0x58024400
 8106f08:	03d09000 	.word	0x03d09000
 8106f0c:	003d0900 	.word	0x003d0900
 8106f10:	007a1200 	.word	0x007a1200
 8106f14:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8106f18:	2300      	movs	r3, #0
 8106f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106f1c:	e234      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8106f1e:	687b      	ldr	r3, [r7, #4]
 8106f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106f24:	f040 809c 	bne.w	8107060 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8106f28:	4b9b      	ldr	r3, [pc, #620]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106f2c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8106f30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106f38:	d054      	beq.n	8106fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8106f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106f40:	f200 808b 	bhi.w	810705a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106f4a:	f000 8083 	beq.w	8107054 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8106f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106f54:	f200 8081 	bhi.w	810705a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106f5e:	d02f      	beq.n	8106fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8106f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106f66:	d878      	bhi.n	810705a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f6a:	2b00      	cmp	r3, #0
 8106f6c:	d004      	beq.n	8106f78 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8106f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106f74:	d012      	beq.n	8106f9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8106f76:	e070      	b.n	810705a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106f78:	4b87      	ldr	r3, [pc, #540]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106f7a:	681b      	ldr	r3, [r3, #0]
 8106f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106f84:	d107      	bne.n	8106f96 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106f8a:	4618      	mov	r0, r3
 8106f8c:	f000 fcc8 	bl	8107920 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106f94:	e1f8      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106f96:	2300      	movs	r3, #0
 8106f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106f9a:	e1f5      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106f9c:	4b7e      	ldr	r3, [pc, #504]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106f9e:	681b      	ldr	r3, [r3, #0]
 8106fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106fa8:	d107      	bne.n	8106fba <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106faa:	f107 0318 	add.w	r3, r7, #24
 8106fae:	4618      	mov	r0, r3
 8106fb0:	f000 fa0e 	bl	81073d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106fb4:	69bb      	ldr	r3, [r7, #24]
 8106fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106fb8:	e1e6      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106fba:	2300      	movs	r3, #0
 8106fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106fbe:	e1e3      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106fc0:	4b75      	ldr	r3, [pc, #468]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106fc2:	681b      	ldr	r3, [r3, #0]
 8106fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106fcc:	d107      	bne.n	8106fde <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106fce:	f107 030c 	add.w	r3, r7, #12
 8106fd2:	4618      	mov	r0, r3
 8106fd4:	f000 fb50 	bl	8107678 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106fd8:	68fb      	ldr	r3, [r7, #12]
 8106fda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106fdc:	e1d4      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106fde:	2300      	movs	r3, #0
 8106fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106fe2:	e1d1      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106fe4:	4b6c      	ldr	r3, [pc, #432]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106fec:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106fee:	4b6a      	ldr	r3, [pc, #424]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106ff0:	681b      	ldr	r3, [r3, #0]
 8106ff2:	f003 0304 	and.w	r3, r3, #4
 8106ff6:	2b04      	cmp	r3, #4
 8106ff8:	d10c      	bne.n	8107014 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8106ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106ffc:	2b00      	cmp	r3, #0
 8106ffe:	d109      	bne.n	8107014 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107000:	4b65      	ldr	r3, [pc, #404]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8107002:	681b      	ldr	r3, [r3, #0]
 8107004:	08db      	lsrs	r3, r3, #3
 8107006:	f003 0303 	and.w	r3, r3, #3
 810700a:	4a64      	ldr	r2, [pc, #400]	; (810719c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 810700c:	fa22 f303 	lsr.w	r3, r2, r3
 8107010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107012:	e01e      	b.n	8107052 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107014:	4b60      	ldr	r3, [pc, #384]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8107016:	681b      	ldr	r3, [r3, #0]
 8107018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810701c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107020:	d106      	bne.n	8107030 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8107022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107028:	d102      	bne.n	8107030 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810702a:	4b5d      	ldr	r3, [pc, #372]	; (81071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 810702c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810702e:	e010      	b.n	8107052 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107030:	4b59      	ldr	r3, [pc, #356]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8107032:	681b      	ldr	r3, [r3, #0]
 8107034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810703c:	d106      	bne.n	810704c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 810703e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107044:	d102      	bne.n	810704c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8107046:	4b57      	ldr	r3, [pc, #348]	; (81071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8107048:	63fb      	str	r3, [r7, #60]	; 0x3c
 810704a:	e002      	b.n	8107052 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810704c:	2300      	movs	r3, #0
 810704e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8107050:	e19a      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8107052:	e199      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8107054:	4b54      	ldr	r3, [pc, #336]	; (81071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107056:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107058:	e196      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 810705a:	2300      	movs	r3, #0
 810705c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810705e:	e193      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107060:	687b      	ldr	r3, [r7, #4]
 8107062:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8107066:	d173      	bne.n	8107150 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8107068:	4b4b      	ldr	r3, [pc, #300]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810706a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810706c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8107070:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8107072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107078:	d02f      	beq.n	81070da <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 810707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810707c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107080:	d863      	bhi.n	810714a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8107082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107084:	2b00      	cmp	r3, #0
 8107086:	d004      	beq.n	8107092 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8107088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810708a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810708e:	d012      	beq.n	81070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8107090:	e05b      	b.n	810714a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107092:	4b41      	ldr	r3, [pc, #260]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8107094:	681b      	ldr	r3, [r3, #0]
 8107096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810709a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810709e:	d107      	bne.n	81070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81070a0:	f107 0318 	add.w	r3, r7, #24
 81070a4:	4618      	mov	r0, r3
 81070a6:	f000 f993 	bl	81073d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81070aa:	69bb      	ldr	r3, [r7, #24]
 81070ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81070ae:	e16b      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81070b0:	2300      	movs	r3, #0
 81070b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81070b4:	e168      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81070b6:	4b38      	ldr	r3, [pc, #224]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81070b8:	681b      	ldr	r3, [r3, #0]
 81070ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81070be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81070c2:	d107      	bne.n	81070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81070c4:	f107 030c 	add.w	r3, r7, #12
 81070c8:	4618      	mov	r0, r3
 81070ca:	f000 fad5 	bl	8107678 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81070ce:	697b      	ldr	r3, [r7, #20]
 81070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81070d2:	e159      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81070d4:	2300      	movs	r3, #0
 81070d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81070d8:	e156      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81070da:	4b2f      	ldr	r3, [pc, #188]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81070dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81070de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81070e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81070e4:	4b2c      	ldr	r3, [pc, #176]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81070e6:	681b      	ldr	r3, [r3, #0]
 81070e8:	f003 0304 	and.w	r3, r3, #4
 81070ec:	2b04      	cmp	r3, #4
 81070ee:	d10c      	bne.n	810710a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 81070f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81070f2:	2b00      	cmp	r3, #0
 81070f4:	d109      	bne.n	810710a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81070f6:	4b28      	ldr	r3, [pc, #160]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81070f8:	681b      	ldr	r3, [r3, #0]
 81070fa:	08db      	lsrs	r3, r3, #3
 81070fc:	f003 0303 	and.w	r3, r3, #3
 8107100:	4a26      	ldr	r2, [pc, #152]	; (810719c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8107102:	fa22 f303 	lsr.w	r3, r2, r3
 8107106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107108:	e01e      	b.n	8107148 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810710a:	4b23      	ldr	r3, [pc, #140]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810710c:	681b      	ldr	r3, [r3, #0]
 810710e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107116:	d106      	bne.n	8107126 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8107118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810711a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810711e:	d102      	bne.n	8107126 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8107120:	4b1f      	ldr	r3, [pc, #124]	; (81071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8107122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107124:	e010      	b.n	8107148 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107126:	4b1c      	ldr	r3, [pc, #112]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8107128:	681b      	ldr	r3, [r3, #0]
 810712a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810712e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107132:	d106      	bne.n	8107142 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8107134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810713a:	d102      	bne.n	8107142 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810713c:	4b19      	ldr	r3, [pc, #100]	; (81071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 810713e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107140:	e002      	b.n	8107148 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8107142:	2300      	movs	r3, #0
 8107144:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8107146:	e11f      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8107148:	e11e      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 810714a:	2300      	movs	r3, #0
 810714c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810714e:	e11b      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8107150:	687b      	ldr	r3, [r7, #4]
 8107152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107156:	d13e      	bne.n	81071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8107158:	4b0f      	ldr	r3, [pc, #60]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810715a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810715c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107160:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8107162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107164:	2b00      	cmp	r3, #0
 8107166:	d004      	beq.n	8107172 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8107168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810716a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810716e:	d01d      	beq.n	81071ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8107170:	e02e      	b.n	81071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107172:	4b09      	ldr	r3, [pc, #36]	; (8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8107174:	681b      	ldr	r3, [r3, #0]
 8107176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810717a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810717e:	d107      	bne.n	8107190 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107184:	4618      	mov	r0, r3
 8107186:	f000 fbcb 	bl	8107920 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810718c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810718e:	e0fb      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107190:	2300      	movs	r3, #0
 8107192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107194:	e0f8      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8107196:	bf00      	nop
 8107198:	58024400 	.word	0x58024400
 810719c:	03d09000 	.word	0x03d09000
 81071a0:	003d0900 	.word	0x003d0900
 81071a4:	007a1200 	.word	0x007a1200
 81071a8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81071ac:	4b79      	ldr	r3, [pc, #484]	; (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81071ae:	681b      	ldr	r3, [r3, #0]
 81071b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81071b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81071b8:	d107      	bne.n	81071ca <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81071ba:	f107 0318 	add.w	r3, r7, #24
 81071be:	4618      	mov	r0, r3
 81071c0:	f000 f906 	bl	81073d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81071c4:	6a3b      	ldr	r3, [r7, #32]
 81071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81071c8:	e0de      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81071ca:	2300      	movs	r3, #0
 81071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81071ce:	e0db      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 81071d0:	2300      	movs	r3, #0
 81071d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81071d4:	e0d8      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81071d6:	687b      	ldr	r3, [r7, #4]
 81071d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81071dc:	f040 8085 	bne.w	81072ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 81071e0:	4b6c      	ldr	r3, [pc, #432]	; (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81071e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81071e4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 81071e8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81071ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81071f0:	d06b      	beq.n	81072ca <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 81071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81071f8:	d874      	bhi.n	81072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 81071fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107200:	d056      	beq.n	81072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8107202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107208:	d86c      	bhi.n	81072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810720c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107210:	d03b      	beq.n	810728a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8107212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107214:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107218:	d864      	bhi.n	81072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810721c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107220:	d021      	beq.n	8107266 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8107222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107228:	d85c      	bhi.n	81072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810722c:	2b00      	cmp	r3, #0
 810722e:	d004      	beq.n	810723a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8107230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107236:	d004      	beq.n	8107242 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8107238:	e054      	b.n	81072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810723a:	f000 f8b3 	bl	81073a4 <HAL_RCCEx_GetD3PCLK1Freq>
 810723e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8107240:	e0a2      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107242:	4b54      	ldr	r3, [pc, #336]	; (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107244:	681b      	ldr	r3, [r3, #0]
 8107246:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810724a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810724e:	d107      	bne.n	8107260 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107250:	f107 0318 	add.w	r3, r7, #24
 8107254:	4618      	mov	r0, r3
 8107256:	f000 f8bb 	bl	81073d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810725a:	69fb      	ldr	r3, [r7, #28]
 810725c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810725e:	e093      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107260:	2300      	movs	r3, #0
 8107262:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107264:	e090      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107266:	4b4b      	ldr	r3, [pc, #300]	; (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107268:	681b      	ldr	r3, [r3, #0]
 810726a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810726e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107272:	d107      	bne.n	8107284 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107274:	f107 030c 	add.w	r3, r7, #12
 8107278:	4618      	mov	r0, r3
 810727a:	f000 f9fd 	bl	8107678 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810727e:	693b      	ldr	r3, [r7, #16]
 8107280:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107282:	e081      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107284:	2300      	movs	r3, #0
 8107286:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107288:	e07e      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810728a:	4b42      	ldr	r3, [pc, #264]	; (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810728c:	681b      	ldr	r3, [r3, #0]
 810728e:	f003 0304 	and.w	r3, r3, #4
 8107292:	2b04      	cmp	r3, #4
 8107294:	d109      	bne.n	81072aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107296:	4b3f      	ldr	r3, [pc, #252]	; (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107298:	681b      	ldr	r3, [r3, #0]
 810729a:	08db      	lsrs	r3, r3, #3
 810729c:	f003 0303 	and.w	r3, r3, #3
 81072a0:	4a3d      	ldr	r2, [pc, #244]	; (8107398 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 81072a2:	fa22 f303 	lsr.w	r3, r2, r3
 81072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81072a8:	e06e      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81072aa:	2300      	movs	r3, #0
 81072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81072ae:	e06b      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81072b0:	4b38      	ldr	r3, [pc, #224]	; (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81072b2:	681b      	ldr	r3, [r3, #0]
 81072b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81072b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81072bc:	d102      	bne.n	81072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 81072be:	4b37      	ldr	r3, [pc, #220]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 81072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81072c2:	e061      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81072c4:	2300      	movs	r3, #0
 81072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81072c8:	e05e      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81072ca:	4b32      	ldr	r3, [pc, #200]	; (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81072cc:	681b      	ldr	r3, [r3, #0]
 81072ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81072d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81072d6:	d102      	bne.n	81072de <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 81072d8:	4b31      	ldr	r3, [pc, #196]	; (81073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 81072da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81072dc:	e054      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81072de:	2300      	movs	r3, #0
 81072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81072e2:	e051      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 81072e4:	2300      	movs	r3, #0
 81072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81072e8:	e04e      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81072ea:	687b      	ldr	r3, [r7, #4]
 81072ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81072f0:	d148      	bne.n	8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 81072f2:	4b28      	ldr	r3, [pc, #160]	; (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81072f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81072f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81072fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81072fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81072fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107302:	d02a      	beq.n	810735a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8107304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810730a:	d838      	bhi.n	810737e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 810730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810730e:	2b00      	cmp	r3, #0
 8107310:	d004      	beq.n	810731c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8107312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107318:	d00d      	beq.n	8107336 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 810731a:	e030      	b.n	810737e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810731c:	4b1d      	ldr	r3, [pc, #116]	; (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810731e:	681b      	ldr	r3, [r3, #0]
 8107320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107328:	d102      	bne.n	8107330 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 810732a:	4b1d      	ldr	r3, [pc, #116]	; (81073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810732c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810732e:	e02b      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107330:	2300      	movs	r3, #0
 8107332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107334:	e028      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107336:	4b17      	ldr	r3, [pc, #92]	; (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107338:	681b      	ldr	r3, [r3, #0]
 810733a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810733e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107342:	d107      	bne.n	8107354 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107348:	4618      	mov	r0, r3
 810734a:	f000 fae9 	bl	8107920 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107350:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107352:	e019      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107354:	2300      	movs	r3, #0
 8107356:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107358:	e016      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810735a:	4b0e      	ldr	r3, [pc, #56]	; (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810735c:	681b      	ldr	r3, [r3, #0]
 810735e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107366:	d107      	bne.n	8107378 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107368:	f107 0318 	add.w	r3, r7, #24
 810736c:	4618      	mov	r0, r3
 810736e:	f000 f82f 	bl	81073d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107372:	69fb      	ldr	r3, [r7, #28]
 8107374:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107376:	e007      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107378:	2300      	movs	r3, #0
 810737a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810737c:	e004      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 810737e:	2300      	movs	r3, #0
 8107380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107382:	e001      	b.n	8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8107384:	2300      	movs	r3, #0
 8107386:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8107388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810738a:	4618      	mov	r0, r3
 810738c:	3740      	adds	r7, #64	; 0x40
 810738e:	46bd      	mov	sp, r7
 8107390:	bd80      	pop	{r7, pc}
 8107392:	bf00      	nop
 8107394:	58024400 	.word	0x58024400
 8107398:	03d09000 	.word	0x03d09000
 810739c:	003d0900 	.word	0x003d0900
 81073a0:	007a1200 	.word	0x007a1200

081073a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81073a4:	b580      	push	{r7, lr}
 81073a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81073a8:	f7fe fb86 	bl	8105ab8 <HAL_RCC_GetHCLKFreq>
 81073ac:	4602      	mov	r2, r0
 81073ae:	4b06      	ldr	r3, [pc, #24]	; (81073c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81073b0:	6a1b      	ldr	r3, [r3, #32]
 81073b2:	091b      	lsrs	r3, r3, #4
 81073b4:	f003 0307 	and.w	r3, r3, #7
 81073b8:	4904      	ldr	r1, [pc, #16]	; (81073cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81073ba:	5ccb      	ldrb	r3, [r1, r3]
 81073bc:	f003 031f 	and.w	r3, r3, #31
 81073c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81073c4:	4618      	mov	r0, r3
 81073c6:	bd80      	pop	{r7, pc}
 81073c8:	58024400 	.word	0x58024400
 81073cc:	0810b454 	.word	0x0810b454

081073d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81073d0:	b480      	push	{r7}
 81073d2:	b089      	sub	sp, #36	; 0x24
 81073d4:	af00      	add	r7, sp, #0
 81073d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81073d8:	4ba1      	ldr	r3, [pc, #644]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81073dc:	f003 0303 	and.w	r3, r3, #3
 81073e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81073e2:	4b9f      	ldr	r3, [pc, #636]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81073e6:	0b1b      	lsrs	r3, r3, #12
 81073e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81073ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81073ee:	4b9c      	ldr	r3, [pc, #624]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81073f2:	091b      	lsrs	r3, r3, #4
 81073f4:	f003 0301 	and.w	r3, r3, #1
 81073f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81073fa:	4b99      	ldr	r3, [pc, #612]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81073fe:	08db      	lsrs	r3, r3, #3
 8107400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107404:	693a      	ldr	r2, [r7, #16]
 8107406:	fb02 f303 	mul.w	r3, r2, r3
 810740a:	ee07 3a90 	vmov	s15, r3
 810740e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107412:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8107416:	697b      	ldr	r3, [r7, #20]
 8107418:	2b00      	cmp	r3, #0
 810741a:	f000 8111 	beq.w	8107640 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810741e:	69bb      	ldr	r3, [r7, #24]
 8107420:	2b02      	cmp	r3, #2
 8107422:	f000 8083 	beq.w	810752c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8107426:	69bb      	ldr	r3, [r7, #24]
 8107428:	2b02      	cmp	r3, #2
 810742a:	f200 80a1 	bhi.w	8107570 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810742e:	69bb      	ldr	r3, [r7, #24]
 8107430:	2b00      	cmp	r3, #0
 8107432:	d003      	beq.n	810743c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107434:	69bb      	ldr	r3, [r7, #24]
 8107436:	2b01      	cmp	r3, #1
 8107438:	d056      	beq.n	81074e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810743a:	e099      	b.n	8107570 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810743c:	4b88      	ldr	r3, [pc, #544]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810743e:	681b      	ldr	r3, [r3, #0]
 8107440:	f003 0320 	and.w	r3, r3, #32
 8107444:	2b00      	cmp	r3, #0
 8107446:	d02d      	beq.n	81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107448:	4b85      	ldr	r3, [pc, #532]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810744a:	681b      	ldr	r3, [r3, #0]
 810744c:	08db      	lsrs	r3, r3, #3
 810744e:	f003 0303 	and.w	r3, r3, #3
 8107452:	4a84      	ldr	r2, [pc, #528]	; (8107664 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107454:	fa22 f303 	lsr.w	r3, r2, r3
 8107458:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810745a:	68bb      	ldr	r3, [r7, #8]
 810745c:	ee07 3a90 	vmov	s15, r3
 8107460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107464:	697b      	ldr	r3, [r7, #20]
 8107466:	ee07 3a90 	vmov	s15, r3
 810746a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810746e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107472:	4b7b      	ldr	r3, [pc, #492]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810747a:	ee07 3a90 	vmov	s15, r3
 810747e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107482:	ed97 6a03 	vldr	s12, [r7, #12]
 8107486:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810748a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810748e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810749a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810749e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81074a2:	e087      	b.n	81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81074a4:	697b      	ldr	r3, [r7, #20]
 81074a6:	ee07 3a90 	vmov	s15, r3
 81074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81074ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810766c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81074b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81074b6:	4b6a      	ldr	r3, [pc, #424]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81074ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81074be:	ee07 3a90 	vmov	s15, r3
 81074c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81074ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81074ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81074d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81074d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81074da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81074de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81074e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81074e6:	e065      	b.n	81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81074e8:	697b      	ldr	r3, [r7, #20]
 81074ea:	ee07 3a90 	vmov	s15, r3
 81074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81074f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107670 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81074f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81074fa:	4b59      	ldr	r3, [pc, #356]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81074fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107502:	ee07 3a90 	vmov	s15, r3
 8107506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810750a:	ed97 6a03 	vldr	s12, [r7, #12]
 810750e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810751a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810751e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107526:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810752a:	e043      	b.n	81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810752c:	697b      	ldr	r3, [r7, #20]
 810752e:	ee07 3a90 	vmov	s15, r3
 8107532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107536:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107674 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810753a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810753e:	4b48      	ldr	r3, [pc, #288]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107546:	ee07 3a90 	vmov	s15, r3
 810754a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810754e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107552:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810755a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810755e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107566:	ee67 7a27 	vmul.f32	s15, s14, s15
 810756a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810756e:	e021      	b.n	81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107570:	697b      	ldr	r3, [r7, #20]
 8107572:	ee07 3a90 	vmov	s15, r3
 8107576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810757a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107670 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810757e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107582:	4b37      	ldr	r3, [pc, #220]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810758a:	ee07 3a90 	vmov	s15, r3
 810758e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107592:	ed97 6a03 	vldr	s12, [r7, #12]
 8107596:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810759a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810759e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81075a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81075a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81075aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81075ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81075b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81075b4:	4b2a      	ldr	r3, [pc, #168]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81075b8:	0a5b      	lsrs	r3, r3, #9
 81075ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81075be:	ee07 3a90 	vmov	s15, r3
 81075c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81075ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 81075ce:	edd7 6a07 	vldr	s13, [r7, #28]
 81075d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81075d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81075da:	ee17 2a90 	vmov	r2, s15
 81075de:	687b      	ldr	r3, [r7, #4]
 81075e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81075e2:	4b1f      	ldr	r3, [pc, #124]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81075e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81075e6:	0c1b      	lsrs	r3, r3, #16
 81075e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81075ec:	ee07 3a90 	vmov	s15, r3
 81075f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81075f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81075fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8107600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107608:	ee17 2a90 	vmov	r2, s15
 810760c:	687b      	ldr	r3, [r7, #4]
 810760e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8107610:	4b13      	ldr	r3, [pc, #76]	; (8107660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107614:	0e1b      	lsrs	r3, r3, #24
 8107616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810761a:	ee07 3a90 	vmov	s15, r3
 810761e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107626:	ee37 7a87 	vadd.f32	s14, s15, s14
 810762a:	edd7 6a07 	vldr	s13, [r7, #28]
 810762e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107636:	ee17 2a90 	vmov	r2, s15
 810763a:	687b      	ldr	r3, [r7, #4]
 810763c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810763e:	e008      	b.n	8107652 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107640:	687b      	ldr	r3, [r7, #4]
 8107642:	2200      	movs	r2, #0
 8107644:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8107646:	687b      	ldr	r3, [r7, #4]
 8107648:	2200      	movs	r2, #0
 810764a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810764c:	687b      	ldr	r3, [r7, #4]
 810764e:	2200      	movs	r2, #0
 8107650:	609a      	str	r2, [r3, #8]
}
 8107652:	bf00      	nop
 8107654:	3724      	adds	r7, #36	; 0x24
 8107656:	46bd      	mov	sp, r7
 8107658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810765c:	4770      	bx	lr
 810765e:	bf00      	nop
 8107660:	58024400 	.word	0x58024400
 8107664:	03d09000 	.word	0x03d09000
 8107668:	46000000 	.word	0x46000000
 810766c:	4c742400 	.word	0x4c742400
 8107670:	4a742400 	.word	0x4a742400
 8107674:	4af42400 	.word	0x4af42400

08107678 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8107678:	b480      	push	{r7}
 810767a:	b089      	sub	sp, #36	; 0x24
 810767c:	af00      	add	r7, sp, #0
 810767e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107680:	4ba1      	ldr	r3, [pc, #644]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107684:	f003 0303 	and.w	r3, r3, #3
 8107688:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810768a:	4b9f      	ldr	r3, [pc, #636]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810768c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810768e:	0d1b      	lsrs	r3, r3, #20
 8107690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107694:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107696:	4b9c      	ldr	r3, [pc, #624]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810769a:	0a1b      	lsrs	r3, r3, #8
 810769c:	f003 0301 	and.w	r3, r3, #1
 81076a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81076a2:	4b99      	ldr	r3, [pc, #612]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81076a6:	08db      	lsrs	r3, r3, #3
 81076a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81076ac:	693a      	ldr	r2, [r7, #16]
 81076ae:	fb02 f303 	mul.w	r3, r2, r3
 81076b2:	ee07 3a90 	vmov	s15, r3
 81076b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81076be:	697b      	ldr	r3, [r7, #20]
 81076c0:	2b00      	cmp	r3, #0
 81076c2:	f000 8111 	beq.w	81078e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81076c6:	69bb      	ldr	r3, [r7, #24]
 81076c8:	2b02      	cmp	r3, #2
 81076ca:	f000 8083 	beq.w	81077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81076ce:	69bb      	ldr	r3, [r7, #24]
 81076d0:	2b02      	cmp	r3, #2
 81076d2:	f200 80a1 	bhi.w	8107818 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81076d6:	69bb      	ldr	r3, [r7, #24]
 81076d8:	2b00      	cmp	r3, #0
 81076da:	d003      	beq.n	81076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81076dc:	69bb      	ldr	r3, [r7, #24]
 81076de:	2b01      	cmp	r3, #1
 81076e0:	d056      	beq.n	8107790 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81076e2:	e099      	b.n	8107818 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81076e4:	4b88      	ldr	r3, [pc, #544]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076e6:	681b      	ldr	r3, [r3, #0]
 81076e8:	f003 0320 	and.w	r3, r3, #32
 81076ec:	2b00      	cmp	r3, #0
 81076ee:	d02d      	beq.n	810774c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81076f0:	4b85      	ldr	r3, [pc, #532]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076f2:	681b      	ldr	r3, [r3, #0]
 81076f4:	08db      	lsrs	r3, r3, #3
 81076f6:	f003 0303 	and.w	r3, r3, #3
 81076fa:	4a84      	ldr	r2, [pc, #528]	; (810790c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81076fc:	fa22 f303 	lsr.w	r3, r2, r3
 8107700:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107702:	68bb      	ldr	r3, [r7, #8]
 8107704:	ee07 3a90 	vmov	s15, r3
 8107708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810770c:	697b      	ldr	r3, [r7, #20]
 810770e:	ee07 3a90 	vmov	s15, r3
 8107712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810771a:	4b7b      	ldr	r3, [pc, #492]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810771e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107722:	ee07 3a90 	vmov	s15, r3
 8107726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810772a:	ed97 6a03 	vldr	s12, [r7, #12]
 810772e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810773a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810773e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107746:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810774a:	e087      	b.n	810785c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810774c:	697b      	ldr	r3, [r7, #20]
 810774e:	ee07 3a90 	vmov	s15, r3
 8107752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107756:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107914 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810775a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810775e:	4b6a      	ldr	r3, [pc, #424]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107766:	ee07 3a90 	vmov	s15, r3
 810776a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810776e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107772:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810777a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810777e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107786:	ee67 7a27 	vmul.f32	s15, s14, s15
 810778a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810778e:	e065      	b.n	810785c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107790:	697b      	ldr	r3, [r7, #20]
 8107792:	ee07 3a90 	vmov	s15, r3
 8107796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810779a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107918 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810779e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077a2:	4b59      	ldr	r3, [pc, #356]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81077a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81077aa:	ee07 3a90 	vmov	s15, r3
 81077ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81077b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81077ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81077be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81077c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81077c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81077ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81077d2:	e043      	b.n	810785c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81077d4:	697b      	ldr	r3, [r7, #20]
 81077d6:	ee07 3a90 	vmov	s15, r3
 81077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810791c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81077e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077e6:	4b48      	ldr	r3, [pc, #288]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81077ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81077ee:	ee07 3a90 	vmov	s15, r3
 81077f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81077fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81077fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810780a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810780e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107812:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107816:	e021      	b.n	810785c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107818:	697b      	ldr	r3, [r7, #20]
 810781a:	ee07 3a90 	vmov	s15, r3
 810781e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107822:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107918 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810782a:	4b37      	ldr	r3, [pc, #220]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810782e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107832:	ee07 3a90 	vmov	s15, r3
 8107836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810783a:	ed97 6a03 	vldr	s12, [r7, #12]
 810783e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810784a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810784e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107856:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810785a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810785c:	4b2a      	ldr	r3, [pc, #168]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107860:	0a5b      	lsrs	r3, r3, #9
 8107862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107866:	ee07 3a90 	vmov	s15, r3
 810786a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810786e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107872:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107876:	edd7 6a07 	vldr	s13, [r7, #28]
 810787a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810787e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107882:	ee17 2a90 	vmov	r2, s15
 8107886:	687b      	ldr	r3, [r7, #4]
 8107888:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810788a:	4b1f      	ldr	r3, [pc, #124]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810788e:	0c1b      	lsrs	r3, r3, #16
 8107890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107894:	ee07 3a90 	vmov	s15, r3
 8107898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810789c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81078a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81078a4:	edd7 6a07 	vldr	s13, [r7, #28]
 81078a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81078ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81078b0:	ee17 2a90 	vmov	r2, s15
 81078b4:	687b      	ldr	r3, [r7, #4]
 81078b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81078b8:	4b13      	ldr	r3, [pc, #76]	; (8107908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81078ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81078bc:	0e1b      	lsrs	r3, r3, #24
 81078be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81078c2:	ee07 3a90 	vmov	s15, r3
 81078c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81078ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 81078d2:	edd7 6a07 	vldr	s13, [r7, #28]
 81078d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81078da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81078de:	ee17 2a90 	vmov	r2, s15
 81078e2:	687b      	ldr	r3, [r7, #4]
 81078e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81078e6:	e008      	b.n	81078fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81078e8:	687b      	ldr	r3, [r7, #4]
 81078ea:	2200      	movs	r2, #0
 81078ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81078ee:	687b      	ldr	r3, [r7, #4]
 81078f0:	2200      	movs	r2, #0
 81078f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81078f4:	687b      	ldr	r3, [r7, #4]
 81078f6:	2200      	movs	r2, #0
 81078f8:	609a      	str	r2, [r3, #8]
}
 81078fa:	bf00      	nop
 81078fc:	3724      	adds	r7, #36	; 0x24
 81078fe:	46bd      	mov	sp, r7
 8107900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107904:	4770      	bx	lr
 8107906:	bf00      	nop
 8107908:	58024400 	.word	0x58024400
 810790c:	03d09000 	.word	0x03d09000
 8107910:	46000000 	.word	0x46000000
 8107914:	4c742400 	.word	0x4c742400
 8107918:	4a742400 	.word	0x4a742400
 810791c:	4af42400 	.word	0x4af42400

08107920 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8107920:	b480      	push	{r7}
 8107922:	b089      	sub	sp, #36	; 0x24
 8107924:	af00      	add	r7, sp, #0
 8107926:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107928:	4ba0      	ldr	r3, [pc, #640]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810792c:	f003 0303 	and.w	r3, r3, #3
 8107930:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8107932:	4b9e      	ldr	r3, [pc, #632]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107936:	091b      	lsrs	r3, r3, #4
 8107938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810793c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810793e:	4b9b      	ldr	r3, [pc, #620]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107942:	f003 0301 	and.w	r3, r3, #1
 8107946:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8107948:	4b98      	ldr	r3, [pc, #608]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810794a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810794c:	08db      	lsrs	r3, r3, #3
 810794e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107952:	693a      	ldr	r2, [r7, #16]
 8107954:	fb02 f303 	mul.w	r3, r2, r3
 8107958:	ee07 3a90 	vmov	s15, r3
 810795c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107960:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8107964:	697b      	ldr	r3, [r7, #20]
 8107966:	2b00      	cmp	r3, #0
 8107968:	f000 8111 	beq.w	8107b8e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810796c:	69bb      	ldr	r3, [r7, #24]
 810796e:	2b02      	cmp	r3, #2
 8107970:	f000 8083 	beq.w	8107a7a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8107974:	69bb      	ldr	r3, [r7, #24]
 8107976:	2b02      	cmp	r3, #2
 8107978:	f200 80a1 	bhi.w	8107abe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810797c:	69bb      	ldr	r3, [r7, #24]
 810797e:	2b00      	cmp	r3, #0
 8107980:	d003      	beq.n	810798a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8107982:	69bb      	ldr	r3, [r7, #24]
 8107984:	2b01      	cmp	r3, #1
 8107986:	d056      	beq.n	8107a36 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8107988:	e099      	b.n	8107abe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810798a:	4b88      	ldr	r3, [pc, #544]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810798c:	681b      	ldr	r3, [r3, #0]
 810798e:	f003 0320 	and.w	r3, r3, #32
 8107992:	2b00      	cmp	r3, #0
 8107994:	d02d      	beq.n	81079f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107996:	4b85      	ldr	r3, [pc, #532]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107998:	681b      	ldr	r3, [r3, #0]
 810799a:	08db      	lsrs	r3, r3, #3
 810799c:	f003 0303 	and.w	r3, r3, #3
 81079a0:	4a83      	ldr	r2, [pc, #524]	; (8107bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81079a2:	fa22 f303 	lsr.w	r3, r2, r3
 81079a6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81079a8:	68bb      	ldr	r3, [r7, #8]
 81079aa:	ee07 3a90 	vmov	s15, r3
 81079ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81079b2:	697b      	ldr	r3, [r7, #20]
 81079b4:	ee07 3a90 	vmov	s15, r3
 81079b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81079c0:	4b7a      	ldr	r3, [pc, #488]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81079c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81079c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81079c8:	ee07 3a90 	vmov	s15, r3
 81079cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81079d0:	ed97 6a03 	vldr	s12, [r7, #12]
 81079d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8107bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81079d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81079dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81079e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81079e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81079e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81079ec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81079f0:	e087      	b.n	8107b02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81079f2:	697b      	ldr	r3, [r7, #20]
 81079f4:	ee07 3a90 	vmov	s15, r3
 81079f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8107bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a04:	4b69      	ldr	r3, [pc, #420]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a0c:	ee07 3a90 	vmov	s15, r3
 8107a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a14:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a18:	eddf 5a66 	vldr	s11, [pc, #408]	; 8107bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107a34:	e065      	b.n	8107b02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107a36:	697b      	ldr	r3, [r7, #20]
 8107a38:	ee07 3a90 	vmov	s15, r3
 8107a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a40:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8107bbc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a48:	4b58      	ldr	r3, [pc, #352]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a50:	ee07 3a90 	vmov	s15, r3
 8107a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a58:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a5c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8107bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107a78:	e043      	b.n	8107b02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107a7a:	697b      	ldr	r3, [r7, #20]
 8107a7c:	ee07 3a90 	vmov	s15, r3
 8107a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a84:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8107bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8107a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a8c:	4b47      	ldr	r3, [pc, #284]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a94:	ee07 3a90 	vmov	s15, r3
 8107a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8107aa0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8107bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107aac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ab8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107abc:	e021      	b.n	8107b02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107abe:	697b      	ldr	r3, [r7, #20]
 8107ac0:	ee07 3a90 	vmov	s15, r3
 8107ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ac8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8107bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107acc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107ad0:	4b36      	ldr	r3, [pc, #216]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107ad8:	ee07 3a90 	vmov	s15, r3
 8107adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107ae0:	ed97 6a03 	vldr	s12, [r7, #12]
 8107ae4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8107bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107ae8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107aec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107af0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107af4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107afc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107b00:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8107b02:	4b2a      	ldr	r3, [pc, #168]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107b06:	0a5b      	lsrs	r3, r3, #9
 8107b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107b0c:	ee07 3a90 	vmov	s15, r3
 8107b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107b18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107b1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8107b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107b28:	ee17 2a90 	vmov	r2, s15
 8107b2c:	687b      	ldr	r3, [r7, #4]
 8107b2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8107b30:	4b1e      	ldr	r3, [pc, #120]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107b34:	0c1b      	lsrs	r3, r3, #16
 8107b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107b3a:	ee07 3a90 	vmov	s15, r3
 8107b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107b46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107b4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8107b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107b56:	ee17 2a90 	vmov	r2, s15
 8107b5a:	687b      	ldr	r3, [r7, #4]
 8107b5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8107b5e:	4b13      	ldr	r3, [pc, #76]	; (8107bac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107b62:	0e1b      	lsrs	r3, r3, #24
 8107b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107b68:	ee07 3a90 	vmov	s15, r3
 8107b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107b74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8107b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107b84:	ee17 2a90 	vmov	r2, s15
 8107b88:	687b      	ldr	r3, [r7, #4]
 8107b8a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8107b8c:	e008      	b.n	8107ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8107b8e:	687b      	ldr	r3, [r7, #4]
 8107b90:	2200      	movs	r2, #0
 8107b92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8107b94:	687b      	ldr	r3, [r7, #4]
 8107b96:	2200      	movs	r2, #0
 8107b98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8107b9a:	687b      	ldr	r3, [r7, #4]
 8107b9c:	2200      	movs	r2, #0
 8107b9e:	609a      	str	r2, [r3, #8]
}
 8107ba0:	bf00      	nop
 8107ba2:	3724      	adds	r7, #36	; 0x24
 8107ba4:	46bd      	mov	sp, r7
 8107ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107baa:	4770      	bx	lr
 8107bac:	58024400 	.word	0x58024400
 8107bb0:	03d09000 	.word	0x03d09000
 8107bb4:	46000000 	.word	0x46000000
 8107bb8:	4c742400 	.word	0x4c742400
 8107bbc:	4a742400 	.word	0x4a742400
 8107bc0:	4af42400 	.word	0x4af42400

08107bc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107bc4:	b580      	push	{r7, lr}
 8107bc6:	b084      	sub	sp, #16
 8107bc8:	af00      	add	r7, sp, #0
 8107bca:	6078      	str	r0, [r7, #4]
 8107bcc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107bce:	2300      	movs	r3, #0
 8107bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107bd2:	4b54      	ldr	r3, [pc, #336]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107bd6:	f003 0303 	and.w	r3, r3, #3
 8107bda:	2b03      	cmp	r3, #3
 8107bdc:	d101      	bne.n	8107be2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8107bde:	2301      	movs	r3, #1
 8107be0:	e09b      	b.n	8107d1a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107be2:	4b50      	ldr	r3, [pc, #320]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107be4:	681b      	ldr	r3, [r3, #0]
 8107be6:	4a4f      	ldr	r2, [pc, #316]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107be8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8107bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107bee:	f7fb fb39 	bl	8103264 <HAL_GetTick>
 8107bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107bf4:	e008      	b.n	8107c08 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107bf6:	f7fb fb35 	bl	8103264 <HAL_GetTick>
 8107bfa:	4602      	mov	r2, r0
 8107bfc:	68bb      	ldr	r3, [r7, #8]
 8107bfe:	1ad3      	subs	r3, r2, r3
 8107c00:	2b02      	cmp	r3, #2
 8107c02:	d901      	bls.n	8107c08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107c04:	2303      	movs	r3, #3
 8107c06:	e088      	b.n	8107d1a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107c08:	4b46      	ldr	r3, [pc, #280]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107c0a:	681b      	ldr	r3, [r3, #0]
 8107c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107c10:	2b00      	cmp	r3, #0
 8107c12:	d1f0      	bne.n	8107bf6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107c14:	4b43      	ldr	r3, [pc, #268]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8107c1c:	687b      	ldr	r3, [r7, #4]
 8107c1e:	681b      	ldr	r3, [r3, #0]
 8107c20:	031b      	lsls	r3, r3, #12
 8107c22:	4940      	ldr	r1, [pc, #256]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107c24:	4313      	orrs	r3, r2
 8107c26:	628b      	str	r3, [r1, #40]	; 0x28
 8107c28:	687b      	ldr	r3, [r7, #4]
 8107c2a:	685b      	ldr	r3, [r3, #4]
 8107c2c:	3b01      	subs	r3, #1
 8107c2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107c32:	687b      	ldr	r3, [r7, #4]
 8107c34:	689b      	ldr	r3, [r3, #8]
 8107c36:	3b01      	subs	r3, #1
 8107c38:	025b      	lsls	r3, r3, #9
 8107c3a:	b29b      	uxth	r3, r3
 8107c3c:	431a      	orrs	r2, r3
 8107c3e:	687b      	ldr	r3, [r7, #4]
 8107c40:	68db      	ldr	r3, [r3, #12]
 8107c42:	3b01      	subs	r3, #1
 8107c44:	041b      	lsls	r3, r3, #16
 8107c46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107c4a:	431a      	orrs	r2, r3
 8107c4c:	687b      	ldr	r3, [r7, #4]
 8107c4e:	691b      	ldr	r3, [r3, #16]
 8107c50:	3b01      	subs	r3, #1
 8107c52:	061b      	lsls	r3, r3, #24
 8107c54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107c58:	4932      	ldr	r1, [pc, #200]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107c5a:	4313      	orrs	r3, r2
 8107c5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107c5e:	4b31      	ldr	r3, [pc, #196]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8107c66:	687b      	ldr	r3, [r7, #4]
 8107c68:	695b      	ldr	r3, [r3, #20]
 8107c6a:	492e      	ldr	r1, [pc, #184]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107c6c:	4313      	orrs	r3, r2
 8107c6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107c70:	4b2c      	ldr	r3, [pc, #176]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c74:	f023 0220 	bic.w	r2, r3, #32
 8107c78:	687b      	ldr	r3, [r7, #4]
 8107c7a:	699b      	ldr	r3, [r3, #24]
 8107c7c:	4929      	ldr	r1, [pc, #164]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107c7e:	4313      	orrs	r3, r2
 8107c80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107c82:	4b28      	ldr	r3, [pc, #160]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c86:	4a27      	ldr	r2, [pc, #156]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107c88:	f023 0310 	bic.w	r3, r3, #16
 8107c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8107c8e:	4b25      	ldr	r3, [pc, #148]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107c96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107c9a:	687a      	ldr	r2, [r7, #4]
 8107c9c:	69d2      	ldr	r2, [r2, #28]
 8107c9e:	00d2      	lsls	r2, r2, #3
 8107ca0:	4920      	ldr	r1, [pc, #128]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107ca2:	4313      	orrs	r3, r2
 8107ca4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107ca6:	4b1f      	ldr	r3, [pc, #124]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107caa:	4a1e      	ldr	r2, [pc, #120]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107cac:	f043 0310 	orr.w	r3, r3, #16
 8107cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107cb2:	683b      	ldr	r3, [r7, #0]
 8107cb4:	2b00      	cmp	r3, #0
 8107cb6:	d106      	bne.n	8107cc6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107cb8:	4b1a      	ldr	r3, [pc, #104]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107cbc:	4a19      	ldr	r2, [pc, #100]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107cbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8107cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107cc4:	e00f      	b.n	8107ce6 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107cc6:	683b      	ldr	r3, [r7, #0]
 8107cc8:	2b01      	cmp	r3, #1
 8107cca:	d106      	bne.n	8107cda <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107ccc:	4b15      	ldr	r3, [pc, #84]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107cd0:	4a14      	ldr	r2, [pc, #80]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107cd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107cd8:	e005      	b.n	8107ce6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107cda:	4b12      	ldr	r3, [pc, #72]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107cde:	4a11      	ldr	r2, [pc, #68]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107ce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107ce4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107ce6:	4b0f      	ldr	r3, [pc, #60]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107ce8:	681b      	ldr	r3, [r3, #0]
 8107cea:	4a0e      	ldr	r2, [pc, #56]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107cec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8107cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107cf2:	f7fb fab7 	bl	8103264 <HAL_GetTick>
 8107cf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107cf8:	e008      	b.n	8107d0c <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107cfa:	f7fb fab3 	bl	8103264 <HAL_GetTick>
 8107cfe:	4602      	mov	r2, r0
 8107d00:	68bb      	ldr	r3, [r7, #8]
 8107d02:	1ad3      	subs	r3, r2, r3
 8107d04:	2b02      	cmp	r3, #2
 8107d06:	d901      	bls.n	8107d0c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107d08:	2303      	movs	r3, #3
 8107d0a:	e006      	b.n	8107d1a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107d0c:	4b05      	ldr	r3, [pc, #20]	; (8107d24 <RCCEx_PLL2_Config+0x160>)
 8107d0e:	681b      	ldr	r3, [r3, #0]
 8107d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107d14:	2b00      	cmp	r3, #0
 8107d16:	d0f0      	beq.n	8107cfa <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8107d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8107d1a:	4618      	mov	r0, r3
 8107d1c:	3710      	adds	r7, #16
 8107d1e:	46bd      	mov	sp, r7
 8107d20:	bd80      	pop	{r7, pc}
 8107d22:	bf00      	nop
 8107d24:	58024400 	.word	0x58024400

08107d28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107d28:	b580      	push	{r7, lr}
 8107d2a:	b084      	sub	sp, #16
 8107d2c:	af00      	add	r7, sp, #0
 8107d2e:	6078      	str	r0, [r7, #4]
 8107d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107d32:	2300      	movs	r3, #0
 8107d34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107d36:	4b54      	ldr	r3, [pc, #336]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107d3a:	f003 0303 	and.w	r3, r3, #3
 8107d3e:	2b03      	cmp	r3, #3
 8107d40:	d101      	bne.n	8107d46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107d42:	2301      	movs	r3, #1
 8107d44:	e09b      	b.n	8107e7e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107d46:	4b50      	ldr	r3, [pc, #320]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107d48:	681b      	ldr	r3, [r3, #0]
 8107d4a:	4a4f      	ldr	r2, [pc, #316]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107d52:	f7fb fa87 	bl	8103264 <HAL_GetTick>
 8107d56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107d58:	e008      	b.n	8107d6c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107d5a:	f7fb fa83 	bl	8103264 <HAL_GetTick>
 8107d5e:	4602      	mov	r2, r0
 8107d60:	68bb      	ldr	r3, [r7, #8]
 8107d62:	1ad3      	subs	r3, r2, r3
 8107d64:	2b02      	cmp	r3, #2
 8107d66:	d901      	bls.n	8107d6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107d68:	2303      	movs	r3, #3
 8107d6a:	e088      	b.n	8107e7e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107d6c:	4b46      	ldr	r3, [pc, #280]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107d6e:	681b      	ldr	r3, [r3, #0]
 8107d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107d74:	2b00      	cmp	r3, #0
 8107d76:	d1f0      	bne.n	8107d5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107d78:	4b43      	ldr	r3, [pc, #268]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107d7c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8107d80:	687b      	ldr	r3, [r7, #4]
 8107d82:	681b      	ldr	r3, [r3, #0]
 8107d84:	051b      	lsls	r3, r3, #20
 8107d86:	4940      	ldr	r1, [pc, #256]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107d88:	4313      	orrs	r3, r2
 8107d8a:	628b      	str	r3, [r1, #40]	; 0x28
 8107d8c:	687b      	ldr	r3, [r7, #4]
 8107d8e:	685b      	ldr	r3, [r3, #4]
 8107d90:	3b01      	subs	r3, #1
 8107d92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107d96:	687b      	ldr	r3, [r7, #4]
 8107d98:	689b      	ldr	r3, [r3, #8]
 8107d9a:	3b01      	subs	r3, #1
 8107d9c:	025b      	lsls	r3, r3, #9
 8107d9e:	b29b      	uxth	r3, r3
 8107da0:	431a      	orrs	r2, r3
 8107da2:	687b      	ldr	r3, [r7, #4]
 8107da4:	68db      	ldr	r3, [r3, #12]
 8107da6:	3b01      	subs	r3, #1
 8107da8:	041b      	lsls	r3, r3, #16
 8107daa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107dae:	431a      	orrs	r2, r3
 8107db0:	687b      	ldr	r3, [r7, #4]
 8107db2:	691b      	ldr	r3, [r3, #16]
 8107db4:	3b01      	subs	r3, #1
 8107db6:	061b      	lsls	r3, r3, #24
 8107db8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107dbc:	4932      	ldr	r1, [pc, #200]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107dbe:	4313      	orrs	r3, r2
 8107dc0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107dc2:	4b31      	ldr	r3, [pc, #196]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107dc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8107dca:	687b      	ldr	r3, [r7, #4]
 8107dcc:	695b      	ldr	r3, [r3, #20]
 8107dce:	492e      	ldr	r1, [pc, #184]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107dd0:	4313      	orrs	r3, r2
 8107dd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107dd4:	4b2c      	ldr	r3, [pc, #176]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107dd8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107ddc:	687b      	ldr	r3, [r7, #4]
 8107dde:	699b      	ldr	r3, [r3, #24]
 8107de0:	4929      	ldr	r1, [pc, #164]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107de2:	4313      	orrs	r3, r2
 8107de4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107de6:	4b28      	ldr	r3, [pc, #160]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107dea:	4a27      	ldr	r2, [pc, #156]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107df0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107df2:	4b25      	ldr	r3, [pc, #148]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107dfa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107dfe:	687a      	ldr	r2, [r7, #4]
 8107e00:	69d2      	ldr	r2, [r2, #28]
 8107e02:	00d2      	lsls	r2, r2, #3
 8107e04:	4920      	ldr	r1, [pc, #128]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107e06:	4313      	orrs	r3, r2
 8107e08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107e0a:	4b1f      	ldr	r3, [pc, #124]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107e0e:	4a1e      	ldr	r2, [pc, #120]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107e14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107e16:	683b      	ldr	r3, [r7, #0]
 8107e18:	2b00      	cmp	r3, #0
 8107e1a:	d106      	bne.n	8107e2a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107e1c:	4b1a      	ldr	r3, [pc, #104]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107e20:	4a19      	ldr	r2, [pc, #100]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107e22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8107e26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107e28:	e00f      	b.n	8107e4a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107e2a:	683b      	ldr	r3, [r7, #0]
 8107e2c:	2b01      	cmp	r3, #1
 8107e2e:	d106      	bne.n	8107e3e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107e30:	4b15      	ldr	r3, [pc, #84]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107e34:	4a14      	ldr	r2, [pc, #80]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107e36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107e3c:	e005      	b.n	8107e4a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107e3e:	4b12      	ldr	r3, [pc, #72]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107e42:	4a11      	ldr	r2, [pc, #68]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107e44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107e48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107e4a:	4b0f      	ldr	r3, [pc, #60]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107e4c:	681b      	ldr	r3, [r3, #0]
 8107e4e:	4a0e      	ldr	r2, [pc, #56]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107e56:	f7fb fa05 	bl	8103264 <HAL_GetTick>
 8107e5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107e5c:	e008      	b.n	8107e70 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107e5e:	f7fb fa01 	bl	8103264 <HAL_GetTick>
 8107e62:	4602      	mov	r2, r0
 8107e64:	68bb      	ldr	r3, [r7, #8]
 8107e66:	1ad3      	subs	r3, r2, r3
 8107e68:	2b02      	cmp	r3, #2
 8107e6a:	d901      	bls.n	8107e70 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107e6c:	2303      	movs	r3, #3
 8107e6e:	e006      	b.n	8107e7e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107e70:	4b05      	ldr	r3, [pc, #20]	; (8107e88 <RCCEx_PLL3_Config+0x160>)
 8107e72:	681b      	ldr	r3, [r3, #0]
 8107e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107e78:	2b00      	cmp	r3, #0
 8107e7a:	d0f0      	beq.n	8107e5e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8107e7e:	4618      	mov	r0, r3
 8107e80:	3710      	adds	r7, #16
 8107e82:	46bd      	mov	sp, r7
 8107e84:	bd80      	pop	{r7, pc}
 8107e86:	bf00      	nop
 8107e88:	58024400 	.word	0x58024400

08107e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8107e8c:	b580      	push	{r7, lr}
 8107e8e:	b082      	sub	sp, #8
 8107e90:	af00      	add	r7, sp, #0
 8107e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107e94:	687b      	ldr	r3, [r7, #4]
 8107e96:	2b00      	cmp	r3, #0
 8107e98:	d101      	bne.n	8107e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8107e9a:	2301      	movs	r3, #1
 8107e9c:	e049      	b.n	8107f32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107e9e:	687b      	ldr	r3, [r7, #4]
 8107ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107ea4:	b2db      	uxtb	r3, r3
 8107ea6:	2b00      	cmp	r3, #0
 8107ea8:	d106      	bne.n	8107eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107eaa:	687b      	ldr	r3, [r7, #4]
 8107eac:	2200      	movs	r2, #0
 8107eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107eb2:	6878      	ldr	r0, [r7, #4]
 8107eb4:	f7fa fe94 	bl	8102be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	2202      	movs	r2, #2
 8107ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107ec0:	687b      	ldr	r3, [r7, #4]
 8107ec2:	681a      	ldr	r2, [r3, #0]
 8107ec4:	687b      	ldr	r3, [r7, #4]
 8107ec6:	3304      	adds	r3, #4
 8107ec8:	4619      	mov	r1, r3
 8107eca:	4610      	mov	r0, r2
 8107ecc:	f000 fdc4 	bl	8108a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107ed0:	687b      	ldr	r3, [r7, #4]
 8107ed2:	2201      	movs	r2, #1
 8107ed4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107ed8:	687b      	ldr	r3, [r7, #4]
 8107eda:	2201      	movs	r2, #1
 8107edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107ee0:	687b      	ldr	r3, [r7, #4]
 8107ee2:	2201      	movs	r2, #1
 8107ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107ee8:	687b      	ldr	r3, [r7, #4]
 8107eea:	2201      	movs	r2, #1
 8107eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107ef0:	687b      	ldr	r3, [r7, #4]
 8107ef2:	2201      	movs	r2, #1
 8107ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107ef8:	687b      	ldr	r3, [r7, #4]
 8107efa:	2201      	movs	r2, #1
 8107efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107f00:	687b      	ldr	r3, [r7, #4]
 8107f02:	2201      	movs	r2, #1
 8107f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107f08:	687b      	ldr	r3, [r7, #4]
 8107f0a:	2201      	movs	r2, #1
 8107f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107f10:	687b      	ldr	r3, [r7, #4]
 8107f12:	2201      	movs	r2, #1
 8107f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107f18:	687b      	ldr	r3, [r7, #4]
 8107f1a:	2201      	movs	r2, #1
 8107f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8107f20:	687b      	ldr	r3, [r7, #4]
 8107f22:	2201      	movs	r2, #1
 8107f24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107f28:	687b      	ldr	r3, [r7, #4]
 8107f2a:	2201      	movs	r2, #1
 8107f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107f30:	2300      	movs	r3, #0
}
 8107f32:	4618      	mov	r0, r3
 8107f34:	3708      	adds	r7, #8
 8107f36:	46bd      	mov	sp, r7
 8107f38:	bd80      	pop	{r7, pc}
	...

08107f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8107f3c:	b480      	push	{r7}
 8107f3e:	b085      	sub	sp, #20
 8107f40:	af00      	add	r7, sp, #0
 8107f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8107f44:	687b      	ldr	r3, [r7, #4]
 8107f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107f4a:	b2db      	uxtb	r3, r3
 8107f4c:	2b01      	cmp	r3, #1
 8107f4e:	d001      	beq.n	8107f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8107f50:	2301      	movs	r3, #1
 8107f52:	e054      	b.n	8107ffe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107f54:	687b      	ldr	r3, [r7, #4]
 8107f56:	2202      	movs	r2, #2
 8107f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8107f5c:	687b      	ldr	r3, [r7, #4]
 8107f5e:	681b      	ldr	r3, [r3, #0]
 8107f60:	68da      	ldr	r2, [r3, #12]
 8107f62:	687b      	ldr	r3, [r7, #4]
 8107f64:	681b      	ldr	r3, [r3, #0]
 8107f66:	f042 0201 	orr.w	r2, r2, #1
 8107f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107f6c:	687b      	ldr	r3, [r7, #4]
 8107f6e:	681b      	ldr	r3, [r3, #0]
 8107f70:	4a26      	ldr	r2, [pc, #152]	; (810800c <HAL_TIM_Base_Start_IT+0xd0>)
 8107f72:	4293      	cmp	r3, r2
 8107f74:	d022      	beq.n	8107fbc <HAL_TIM_Base_Start_IT+0x80>
 8107f76:	687b      	ldr	r3, [r7, #4]
 8107f78:	681b      	ldr	r3, [r3, #0]
 8107f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107f7e:	d01d      	beq.n	8107fbc <HAL_TIM_Base_Start_IT+0x80>
 8107f80:	687b      	ldr	r3, [r7, #4]
 8107f82:	681b      	ldr	r3, [r3, #0]
 8107f84:	4a22      	ldr	r2, [pc, #136]	; (8108010 <HAL_TIM_Base_Start_IT+0xd4>)
 8107f86:	4293      	cmp	r3, r2
 8107f88:	d018      	beq.n	8107fbc <HAL_TIM_Base_Start_IT+0x80>
 8107f8a:	687b      	ldr	r3, [r7, #4]
 8107f8c:	681b      	ldr	r3, [r3, #0]
 8107f8e:	4a21      	ldr	r2, [pc, #132]	; (8108014 <HAL_TIM_Base_Start_IT+0xd8>)
 8107f90:	4293      	cmp	r3, r2
 8107f92:	d013      	beq.n	8107fbc <HAL_TIM_Base_Start_IT+0x80>
 8107f94:	687b      	ldr	r3, [r7, #4]
 8107f96:	681b      	ldr	r3, [r3, #0]
 8107f98:	4a1f      	ldr	r2, [pc, #124]	; (8108018 <HAL_TIM_Base_Start_IT+0xdc>)
 8107f9a:	4293      	cmp	r3, r2
 8107f9c:	d00e      	beq.n	8107fbc <HAL_TIM_Base_Start_IT+0x80>
 8107f9e:	687b      	ldr	r3, [r7, #4]
 8107fa0:	681b      	ldr	r3, [r3, #0]
 8107fa2:	4a1e      	ldr	r2, [pc, #120]	; (810801c <HAL_TIM_Base_Start_IT+0xe0>)
 8107fa4:	4293      	cmp	r3, r2
 8107fa6:	d009      	beq.n	8107fbc <HAL_TIM_Base_Start_IT+0x80>
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	681b      	ldr	r3, [r3, #0]
 8107fac:	4a1c      	ldr	r2, [pc, #112]	; (8108020 <HAL_TIM_Base_Start_IT+0xe4>)
 8107fae:	4293      	cmp	r3, r2
 8107fb0:	d004      	beq.n	8107fbc <HAL_TIM_Base_Start_IT+0x80>
 8107fb2:	687b      	ldr	r3, [r7, #4]
 8107fb4:	681b      	ldr	r3, [r3, #0]
 8107fb6:	4a1b      	ldr	r2, [pc, #108]	; (8108024 <HAL_TIM_Base_Start_IT+0xe8>)
 8107fb8:	4293      	cmp	r3, r2
 8107fba:	d115      	bne.n	8107fe8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107fbc:	687b      	ldr	r3, [r7, #4]
 8107fbe:	681b      	ldr	r3, [r3, #0]
 8107fc0:	689a      	ldr	r2, [r3, #8]
 8107fc2:	4b19      	ldr	r3, [pc, #100]	; (8108028 <HAL_TIM_Base_Start_IT+0xec>)
 8107fc4:	4013      	ands	r3, r2
 8107fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107fc8:	68fb      	ldr	r3, [r7, #12]
 8107fca:	2b06      	cmp	r3, #6
 8107fcc:	d015      	beq.n	8107ffa <HAL_TIM_Base_Start_IT+0xbe>
 8107fce:	68fb      	ldr	r3, [r7, #12]
 8107fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107fd4:	d011      	beq.n	8107ffa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8107fd6:	687b      	ldr	r3, [r7, #4]
 8107fd8:	681b      	ldr	r3, [r3, #0]
 8107fda:	681a      	ldr	r2, [r3, #0]
 8107fdc:	687b      	ldr	r3, [r7, #4]
 8107fde:	681b      	ldr	r3, [r3, #0]
 8107fe0:	f042 0201 	orr.w	r2, r2, #1
 8107fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107fe6:	e008      	b.n	8107ffa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8107fe8:	687b      	ldr	r3, [r7, #4]
 8107fea:	681b      	ldr	r3, [r3, #0]
 8107fec:	681a      	ldr	r2, [r3, #0]
 8107fee:	687b      	ldr	r3, [r7, #4]
 8107ff0:	681b      	ldr	r3, [r3, #0]
 8107ff2:	f042 0201 	orr.w	r2, r2, #1
 8107ff6:	601a      	str	r2, [r3, #0]
 8107ff8:	e000      	b.n	8107ffc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107ffa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8107ffc:	2300      	movs	r3, #0
}
 8107ffe:	4618      	mov	r0, r3
 8108000:	3714      	adds	r7, #20
 8108002:	46bd      	mov	sp, r7
 8108004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108008:	4770      	bx	lr
 810800a:	bf00      	nop
 810800c:	40010000 	.word	0x40010000
 8108010:	40000400 	.word	0x40000400
 8108014:	40000800 	.word	0x40000800
 8108018:	40000c00 	.word	0x40000c00
 810801c:	40010400 	.word	0x40010400
 8108020:	40001800 	.word	0x40001800
 8108024:	40014000 	.word	0x40014000
 8108028:	00010007 	.word	0x00010007

0810802c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810802c:	b580      	push	{r7, lr}
 810802e:	b082      	sub	sp, #8
 8108030:	af00      	add	r7, sp, #0
 8108032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108034:	687b      	ldr	r3, [r7, #4]
 8108036:	2b00      	cmp	r3, #0
 8108038:	d101      	bne.n	810803e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810803a:	2301      	movs	r3, #1
 810803c:	e049      	b.n	81080d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810803e:	687b      	ldr	r3, [r7, #4]
 8108040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8108044:	b2db      	uxtb	r3, r3
 8108046:	2b00      	cmp	r3, #0
 8108048:	d106      	bne.n	8108058 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810804a:	687b      	ldr	r3, [r7, #4]
 810804c:	2200      	movs	r2, #0
 810804e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8108052:	6878      	ldr	r0, [r7, #4]
 8108054:	f7fa fd00 	bl	8102a58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108058:	687b      	ldr	r3, [r7, #4]
 810805a:	2202      	movs	r2, #2
 810805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108060:	687b      	ldr	r3, [r7, #4]
 8108062:	681a      	ldr	r2, [r3, #0]
 8108064:	687b      	ldr	r3, [r7, #4]
 8108066:	3304      	adds	r3, #4
 8108068:	4619      	mov	r1, r3
 810806a:	4610      	mov	r0, r2
 810806c:	f000 fcf4 	bl	8108a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	2201      	movs	r2, #1
 8108074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108078:	687b      	ldr	r3, [r7, #4]
 810807a:	2201      	movs	r2, #1
 810807c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8108080:	687b      	ldr	r3, [r7, #4]
 8108082:	2201      	movs	r2, #1
 8108084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8108088:	687b      	ldr	r3, [r7, #4]
 810808a:	2201      	movs	r2, #1
 810808c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8108090:	687b      	ldr	r3, [r7, #4]
 8108092:	2201      	movs	r2, #1
 8108094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8108098:	687b      	ldr	r3, [r7, #4]
 810809a:	2201      	movs	r2, #1
 810809c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81080a0:	687b      	ldr	r3, [r7, #4]
 81080a2:	2201      	movs	r2, #1
 81080a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81080a8:	687b      	ldr	r3, [r7, #4]
 81080aa:	2201      	movs	r2, #1
 81080ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81080b0:	687b      	ldr	r3, [r7, #4]
 81080b2:	2201      	movs	r2, #1
 81080b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81080b8:	687b      	ldr	r3, [r7, #4]
 81080ba:	2201      	movs	r2, #1
 81080bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81080c0:	687b      	ldr	r3, [r7, #4]
 81080c2:	2201      	movs	r2, #1
 81080c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81080c8:	687b      	ldr	r3, [r7, #4]
 81080ca:	2201      	movs	r2, #1
 81080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81080d0:	2300      	movs	r3, #0
}
 81080d2:	4618      	mov	r0, r3
 81080d4:	3708      	adds	r7, #8
 81080d6:	46bd      	mov	sp, r7
 81080d8:	bd80      	pop	{r7, pc}
	...

081080dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81080dc:	b580      	push	{r7, lr}
 81080de:	b084      	sub	sp, #16
 81080e0:	af00      	add	r7, sp, #0
 81080e2:	6078      	str	r0, [r7, #4]
 81080e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81080e6:	683b      	ldr	r3, [r7, #0]
 81080e8:	2b00      	cmp	r3, #0
 81080ea:	d109      	bne.n	8108100 <HAL_TIM_PWM_Start+0x24>
 81080ec:	687b      	ldr	r3, [r7, #4]
 81080ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 81080f2:	b2db      	uxtb	r3, r3
 81080f4:	2b01      	cmp	r3, #1
 81080f6:	bf14      	ite	ne
 81080f8:	2301      	movne	r3, #1
 81080fa:	2300      	moveq	r3, #0
 81080fc:	b2db      	uxtb	r3, r3
 81080fe:	e03c      	b.n	810817a <HAL_TIM_PWM_Start+0x9e>
 8108100:	683b      	ldr	r3, [r7, #0]
 8108102:	2b04      	cmp	r3, #4
 8108104:	d109      	bne.n	810811a <HAL_TIM_PWM_Start+0x3e>
 8108106:	687b      	ldr	r3, [r7, #4]
 8108108:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 810810c:	b2db      	uxtb	r3, r3
 810810e:	2b01      	cmp	r3, #1
 8108110:	bf14      	ite	ne
 8108112:	2301      	movne	r3, #1
 8108114:	2300      	moveq	r3, #0
 8108116:	b2db      	uxtb	r3, r3
 8108118:	e02f      	b.n	810817a <HAL_TIM_PWM_Start+0x9e>
 810811a:	683b      	ldr	r3, [r7, #0]
 810811c:	2b08      	cmp	r3, #8
 810811e:	d109      	bne.n	8108134 <HAL_TIM_PWM_Start+0x58>
 8108120:	687b      	ldr	r3, [r7, #4]
 8108122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108126:	b2db      	uxtb	r3, r3
 8108128:	2b01      	cmp	r3, #1
 810812a:	bf14      	ite	ne
 810812c:	2301      	movne	r3, #1
 810812e:	2300      	moveq	r3, #0
 8108130:	b2db      	uxtb	r3, r3
 8108132:	e022      	b.n	810817a <HAL_TIM_PWM_Start+0x9e>
 8108134:	683b      	ldr	r3, [r7, #0]
 8108136:	2b0c      	cmp	r3, #12
 8108138:	d109      	bne.n	810814e <HAL_TIM_PWM_Start+0x72>
 810813a:	687b      	ldr	r3, [r7, #4]
 810813c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108140:	b2db      	uxtb	r3, r3
 8108142:	2b01      	cmp	r3, #1
 8108144:	bf14      	ite	ne
 8108146:	2301      	movne	r3, #1
 8108148:	2300      	moveq	r3, #0
 810814a:	b2db      	uxtb	r3, r3
 810814c:	e015      	b.n	810817a <HAL_TIM_PWM_Start+0x9e>
 810814e:	683b      	ldr	r3, [r7, #0]
 8108150:	2b10      	cmp	r3, #16
 8108152:	d109      	bne.n	8108168 <HAL_TIM_PWM_Start+0x8c>
 8108154:	687b      	ldr	r3, [r7, #4]
 8108156:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810815a:	b2db      	uxtb	r3, r3
 810815c:	2b01      	cmp	r3, #1
 810815e:	bf14      	ite	ne
 8108160:	2301      	movne	r3, #1
 8108162:	2300      	moveq	r3, #0
 8108164:	b2db      	uxtb	r3, r3
 8108166:	e008      	b.n	810817a <HAL_TIM_PWM_Start+0x9e>
 8108168:	687b      	ldr	r3, [r7, #4]
 810816a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 810816e:	b2db      	uxtb	r3, r3
 8108170:	2b01      	cmp	r3, #1
 8108172:	bf14      	ite	ne
 8108174:	2301      	movne	r3, #1
 8108176:	2300      	moveq	r3, #0
 8108178:	b2db      	uxtb	r3, r3
 810817a:	2b00      	cmp	r3, #0
 810817c:	d001      	beq.n	8108182 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 810817e:	2301      	movs	r3, #1
 8108180:	e0a1      	b.n	81082c6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8108182:	683b      	ldr	r3, [r7, #0]
 8108184:	2b00      	cmp	r3, #0
 8108186:	d104      	bne.n	8108192 <HAL_TIM_PWM_Start+0xb6>
 8108188:	687b      	ldr	r3, [r7, #4]
 810818a:	2202      	movs	r2, #2
 810818c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8108190:	e023      	b.n	81081da <HAL_TIM_PWM_Start+0xfe>
 8108192:	683b      	ldr	r3, [r7, #0]
 8108194:	2b04      	cmp	r3, #4
 8108196:	d104      	bne.n	81081a2 <HAL_TIM_PWM_Start+0xc6>
 8108198:	687b      	ldr	r3, [r7, #4]
 810819a:	2202      	movs	r2, #2
 810819c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81081a0:	e01b      	b.n	81081da <HAL_TIM_PWM_Start+0xfe>
 81081a2:	683b      	ldr	r3, [r7, #0]
 81081a4:	2b08      	cmp	r3, #8
 81081a6:	d104      	bne.n	81081b2 <HAL_TIM_PWM_Start+0xd6>
 81081a8:	687b      	ldr	r3, [r7, #4]
 81081aa:	2202      	movs	r2, #2
 81081ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81081b0:	e013      	b.n	81081da <HAL_TIM_PWM_Start+0xfe>
 81081b2:	683b      	ldr	r3, [r7, #0]
 81081b4:	2b0c      	cmp	r3, #12
 81081b6:	d104      	bne.n	81081c2 <HAL_TIM_PWM_Start+0xe6>
 81081b8:	687b      	ldr	r3, [r7, #4]
 81081ba:	2202      	movs	r2, #2
 81081bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81081c0:	e00b      	b.n	81081da <HAL_TIM_PWM_Start+0xfe>
 81081c2:	683b      	ldr	r3, [r7, #0]
 81081c4:	2b10      	cmp	r3, #16
 81081c6:	d104      	bne.n	81081d2 <HAL_TIM_PWM_Start+0xf6>
 81081c8:	687b      	ldr	r3, [r7, #4]
 81081ca:	2202      	movs	r2, #2
 81081cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81081d0:	e003      	b.n	81081da <HAL_TIM_PWM_Start+0xfe>
 81081d2:	687b      	ldr	r3, [r7, #4]
 81081d4:	2202      	movs	r2, #2
 81081d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81081da:	687b      	ldr	r3, [r7, #4]
 81081dc:	681b      	ldr	r3, [r3, #0]
 81081de:	2201      	movs	r2, #1
 81081e0:	6839      	ldr	r1, [r7, #0]
 81081e2:	4618      	mov	r0, r3
 81081e4:	f000 ffa8 	bl	8109138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81081e8:	687b      	ldr	r3, [r7, #4]
 81081ea:	681b      	ldr	r3, [r3, #0]
 81081ec:	4a38      	ldr	r2, [pc, #224]	; (81082d0 <HAL_TIM_PWM_Start+0x1f4>)
 81081ee:	4293      	cmp	r3, r2
 81081f0:	d013      	beq.n	810821a <HAL_TIM_PWM_Start+0x13e>
 81081f2:	687b      	ldr	r3, [r7, #4]
 81081f4:	681b      	ldr	r3, [r3, #0]
 81081f6:	4a37      	ldr	r2, [pc, #220]	; (81082d4 <HAL_TIM_PWM_Start+0x1f8>)
 81081f8:	4293      	cmp	r3, r2
 81081fa:	d00e      	beq.n	810821a <HAL_TIM_PWM_Start+0x13e>
 81081fc:	687b      	ldr	r3, [r7, #4]
 81081fe:	681b      	ldr	r3, [r3, #0]
 8108200:	4a35      	ldr	r2, [pc, #212]	; (81082d8 <HAL_TIM_PWM_Start+0x1fc>)
 8108202:	4293      	cmp	r3, r2
 8108204:	d009      	beq.n	810821a <HAL_TIM_PWM_Start+0x13e>
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	681b      	ldr	r3, [r3, #0]
 810820a:	4a34      	ldr	r2, [pc, #208]	; (81082dc <HAL_TIM_PWM_Start+0x200>)
 810820c:	4293      	cmp	r3, r2
 810820e:	d004      	beq.n	810821a <HAL_TIM_PWM_Start+0x13e>
 8108210:	687b      	ldr	r3, [r7, #4]
 8108212:	681b      	ldr	r3, [r3, #0]
 8108214:	4a32      	ldr	r2, [pc, #200]	; (81082e0 <HAL_TIM_PWM_Start+0x204>)
 8108216:	4293      	cmp	r3, r2
 8108218:	d101      	bne.n	810821e <HAL_TIM_PWM_Start+0x142>
 810821a:	2301      	movs	r3, #1
 810821c:	e000      	b.n	8108220 <HAL_TIM_PWM_Start+0x144>
 810821e:	2300      	movs	r3, #0
 8108220:	2b00      	cmp	r3, #0
 8108222:	d007      	beq.n	8108234 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8108224:	687b      	ldr	r3, [r7, #4]
 8108226:	681b      	ldr	r3, [r3, #0]
 8108228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810822a:	687b      	ldr	r3, [r7, #4]
 810822c:	681b      	ldr	r3, [r3, #0]
 810822e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8108232:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108234:	687b      	ldr	r3, [r7, #4]
 8108236:	681b      	ldr	r3, [r3, #0]
 8108238:	4a25      	ldr	r2, [pc, #148]	; (81082d0 <HAL_TIM_PWM_Start+0x1f4>)
 810823a:	4293      	cmp	r3, r2
 810823c:	d022      	beq.n	8108284 <HAL_TIM_PWM_Start+0x1a8>
 810823e:	687b      	ldr	r3, [r7, #4]
 8108240:	681b      	ldr	r3, [r3, #0]
 8108242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108246:	d01d      	beq.n	8108284 <HAL_TIM_PWM_Start+0x1a8>
 8108248:	687b      	ldr	r3, [r7, #4]
 810824a:	681b      	ldr	r3, [r3, #0]
 810824c:	4a25      	ldr	r2, [pc, #148]	; (81082e4 <HAL_TIM_PWM_Start+0x208>)
 810824e:	4293      	cmp	r3, r2
 8108250:	d018      	beq.n	8108284 <HAL_TIM_PWM_Start+0x1a8>
 8108252:	687b      	ldr	r3, [r7, #4]
 8108254:	681b      	ldr	r3, [r3, #0]
 8108256:	4a24      	ldr	r2, [pc, #144]	; (81082e8 <HAL_TIM_PWM_Start+0x20c>)
 8108258:	4293      	cmp	r3, r2
 810825a:	d013      	beq.n	8108284 <HAL_TIM_PWM_Start+0x1a8>
 810825c:	687b      	ldr	r3, [r7, #4]
 810825e:	681b      	ldr	r3, [r3, #0]
 8108260:	4a22      	ldr	r2, [pc, #136]	; (81082ec <HAL_TIM_PWM_Start+0x210>)
 8108262:	4293      	cmp	r3, r2
 8108264:	d00e      	beq.n	8108284 <HAL_TIM_PWM_Start+0x1a8>
 8108266:	687b      	ldr	r3, [r7, #4]
 8108268:	681b      	ldr	r3, [r3, #0]
 810826a:	4a1a      	ldr	r2, [pc, #104]	; (81082d4 <HAL_TIM_PWM_Start+0x1f8>)
 810826c:	4293      	cmp	r3, r2
 810826e:	d009      	beq.n	8108284 <HAL_TIM_PWM_Start+0x1a8>
 8108270:	687b      	ldr	r3, [r7, #4]
 8108272:	681b      	ldr	r3, [r3, #0]
 8108274:	4a1e      	ldr	r2, [pc, #120]	; (81082f0 <HAL_TIM_PWM_Start+0x214>)
 8108276:	4293      	cmp	r3, r2
 8108278:	d004      	beq.n	8108284 <HAL_TIM_PWM_Start+0x1a8>
 810827a:	687b      	ldr	r3, [r7, #4]
 810827c:	681b      	ldr	r3, [r3, #0]
 810827e:	4a16      	ldr	r2, [pc, #88]	; (81082d8 <HAL_TIM_PWM_Start+0x1fc>)
 8108280:	4293      	cmp	r3, r2
 8108282:	d115      	bne.n	81082b0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8108284:	687b      	ldr	r3, [r7, #4]
 8108286:	681b      	ldr	r3, [r3, #0]
 8108288:	689a      	ldr	r2, [r3, #8]
 810828a:	4b1a      	ldr	r3, [pc, #104]	; (81082f4 <HAL_TIM_PWM_Start+0x218>)
 810828c:	4013      	ands	r3, r2
 810828e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108290:	68fb      	ldr	r3, [r7, #12]
 8108292:	2b06      	cmp	r3, #6
 8108294:	d015      	beq.n	81082c2 <HAL_TIM_PWM_Start+0x1e6>
 8108296:	68fb      	ldr	r3, [r7, #12]
 8108298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810829c:	d011      	beq.n	81082c2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810829e:	687b      	ldr	r3, [r7, #4]
 81082a0:	681b      	ldr	r3, [r3, #0]
 81082a2:	681a      	ldr	r2, [r3, #0]
 81082a4:	687b      	ldr	r3, [r7, #4]
 81082a6:	681b      	ldr	r3, [r3, #0]
 81082a8:	f042 0201 	orr.w	r2, r2, #1
 81082ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81082ae:	e008      	b.n	81082c2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81082b0:	687b      	ldr	r3, [r7, #4]
 81082b2:	681b      	ldr	r3, [r3, #0]
 81082b4:	681a      	ldr	r2, [r3, #0]
 81082b6:	687b      	ldr	r3, [r7, #4]
 81082b8:	681b      	ldr	r3, [r3, #0]
 81082ba:	f042 0201 	orr.w	r2, r2, #1
 81082be:	601a      	str	r2, [r3, #0]
 81082c0:	e000      	b.n	81082c4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81082c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81082c4:	2300      	movs	r3, #0
}
 81082c6:	4618      	mov	r0, r3
 81082c8:	3710      	adds	r7, #16
 81082ca:	46bd      	mov	sp, r7
 81082cc:	bd80      	pop	{r7, pc}
 81082ce:	bf00      	nop
 81082d0:	40010000 	.word	0x40010000
 81082d4:	40010400 	.word	0x40010400
 81082d8:	40014000 	.word	0x40014000
 81082dc:	40014400 	.word	0x40014400
 81082e0:	40014800 	.word	0x40014800
 81082e4:	40000400 	.word	0x40000400
 81082e8:	40000800 	.word	0x40000800
 81082ec:	40000c00 	.word	0x40000c00
 81082f0:	40001800 	.word	0x40001800
 81082f4:	00010007 	.word	0x00010007

081082f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 81082f8:	b580      	push	{r7, lr}
 81082fa:	b086      	sub	sp, #24
 81082fc:	af00      	add	r7, sp, #0
 81082fe:	6078      	str	r0, [r7, #4]
 8108300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108302:	687b      	ldr	r3, [r7, #4]
 8108304:	2b00      	cmp	r3, #0
 8108306:	d101      	bne.n	810830c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8108308:	2301      	movs	r3, #1
 810830a:	e097      	b.n	810843c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8108312:	b2db      	uxtb	r3, r3
 8108314:	2b00      	cmp	r3, #0
 8108316:	d106      	bne.n	8108326 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8108318:	687b      	ldr	r3, [r7, #4]
 810831a:	2200      	movs	r2, #0
 810831c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8108320:	6878      	ldr	r0, [r7, #4]
 8108322:	f7fa fbb9 	bl	8102a98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	2202      	movs	r2, #2
 810832a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 810832e:	687b      	ldr	r3, [r7, #4]
 8108330:	681b      	ldr	r3, [r3, #0]
 8108332:	689b      	ldr	r3, [r3, #8]
 8108334:	687a      	ldr	r2, [r7, #4]
 8108336:	6812      	ldr	r2, [r2, #0]
 8108338:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 810833c:	f023 0307 	bic.w	r3, r3, #7
 8108340:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108342:	687b      	ldr	r3, [r7, #4]
 8108344:	681a      	ldr	r2, [r3, #0]
 8108346:	687b      	ldr	r3, [r7, #4]
 8108348:	3304      	adds	r3, #4
 810834a:	4619      	mov	r1, r3
 810834c:	4610      	mov	r0, r2
 810834e:	f000 fb83 	bl	8108a58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8108352:	687b      	ldr	r3, [r7, #4]
 8108354:	681b      	ldr	r3, [r3, #0]
 8108356:	689b      	ldr	r3, [r3, #8]
 8108358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810835a:	687b      	ldr	r3, [r7, #4]
 810835c:	681b      	ldr	r3, [r3, #0]
 810835e:	699b      	ldr	r3, [r3, #24]
 8108360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8108362:	687b      	ldr	r3, [r7, #4]
 8108364:	681b      	ldr	r3, [r3, #0]
 8108366:	6a1b      	ldr	r3, [r3, #32]
 8108368:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810836a:	683b      	ldr	r3, [r7, #0]
 810836c:	681b      	ldr	r3, [r3, #0]
 810836e:	697a      	ldr	r2, [r7, #20]
 8108370:	4313      	orrs	r3, r2
 8108372:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8108374:	693b      	ldr	r3, [r7, #16]
 8108376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810837a:	f023 0303 	bic.w	r3, r3, #3
 810837e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8108380:	683b      	ldr	r3, [r7, #0]
 8108382:	689a      	ldr	r2, [r3, #8]
 8108384:	683b      	ldr	r3, [r7, #0]
 8108386:	699b      	ldr	r3, [r3, #24]
 8108388:	021b      	lsls	r3, r3, #8
 810838a:	4313      	orrs	r3, r2
 810838c:	693a      	ldr	r2, [r7, #16]
 810838e:	4313      	orrs	r3, r2
 8108390:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8108392:	693b      	ldr	r3, [r7, #16]
 8108394:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8108398:	f023 030c 	bic.w	r3, r3, #12
 810839c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810839e:	693b      	ldr	r3, [r7, #16]
 81083a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81083a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81083a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 81083aa:	683b      	ldr	r3, [r7, #0]
 81083ac:	68da      	ldr	r2, [r3, #12]
 81083ae:	683b      	ldr	r3, [r7, #0]
 81083b0:	69db      	ldr	r3, [r3, #28]
 81083b2:	021b      	lsls	r3, r3, #8
 81083b4:	4313      	orrs	r3, r2
 81083b6:	693a      	ldr	r2, [r7, #16]
 81083b8:	4313      	orrs	r3, r2
 81083ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 81083bc:	683b      	ldr	r3, [r7, #0]
 81083be:	691b      	ldr	r3, [r3, #16]
 81083c0:	011a      	lsls	r2, r3, #4
 81083c2:	683b      	ldr	r3, [r7, #0]
 81083c4:	6a1b      	ldr	r3, [r3, #32]
 81083c6:	031b      	lsls	r3, r3, #12
 81083c8:	4313      	orrs	r3, r2
 81083ca:	693a      	ldr	r2, [r7, #16]
 81083cc:	4313      	orrs	r3, r2
 81083ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 81083d0:	68fb      	ldr	r3, [r7, #12]
 81083d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 81083d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 81083d8:	68fb      	ldr	r3, [r7, #12]
 81083da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 81083de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 81083e0:	683b      	ldr	r3, [r7, #0]
 81083e2:	685a      	ldr	r2, [r3, #4]
 81083e4:	683b      	ldr	r3, [r7, #0]
 81083e6:	695b      	ldr	r3, [r3, #20]
 81083e8:	011b      	lsls	r3, r3, #4
 81083ea:	4313      	orrs	r3, r2
 81083ec:	68fa      	ldr	r2, [r7, #12]
 81083ee:	4313      	orrs	r3, r2
 81083f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 81083f2:	687b      	ldr	r3, [r7, #4]
 81083f4:	681b      	ldr	r3, [r3, #0]
 81083f6:	697a      	ldr	r2, [r7, #20]
 81083f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 81083fa:	687b      	ldr	r3, [r7, #4]
 81083fc:	681b      	ldr	r3, [r3, #0]
 81083fe:	693a      	ldr	r2, [r7, #16]
 8108400:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8108402:	687b      	ldr	r3, [r7, #4]
 8108404:	681b      	ldr	r3, [r3, #0]
 8108406:	68fa      	ldr	r2, [r7, #12]
 8108408:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810840a:	687b      	ldr	r3, [r7, #4]
 810840c:	2201      	movs	r2, #1
 810840e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8108412:	687b      	ldr	r3, [r7, #4]
 8108414:	2201      	movs	r2, #1
 8108416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810841a:	687b      	ldr	r3, [r7, #4]
 810841c:	2201      	movs	r2, #1
 810841e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8108422:	687b      	ldr	r3, [r7, #4]
 8108424:	2201      	movs	r2, #1
 8108426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810842a:	687b      	ldr	r3, [r7, #4]
 810842c:	2201      	movs	r2, #1
 810842e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8108432:	687b      	ldr	r3, [r7, #4]
 8108434:	2201      	movs	r2, #1
 8108436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810843a:	2300      	movs	r3, #0
}
 810843c:	4618      	mov	r0, r3
 810843e:	3718      	adds	r7, #24
 8108440:	46bd      	mov	sp, r7
 8108442:	bd80      	pop	{r7, pc}

08108444 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8108444:	b580      	push	{r7, lr}
 8108446:	b084      	sub	sp, #16
 8108448:	af00      	add	r7, sp, #0
 810844a:	6078      	str	r0, [r7, #4]
 810844c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 810844e:	687b      	ldr	r3, [r7, #4]
 8108450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8108454:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8108456:	687b      	ldr	r3, [r7, #4]
 8108458:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 810845c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 810845e:	687b      	ldr	r3, [r7, #4]
 8108460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8108464:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8108466:	687b      	ldr	r3, [r7, #4]
 8108468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810846c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 810846e:	683b      	ldr	r3, [r7, #0]
 8108470:	2b00      	cmp	r3, #0
 8108472:	d110      	bne.n	8108496 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8108474:	7bfb      	ldrb	r3, [r7, #15]
 8108476:	2b01      	cmp	r3, #1
 8108478:	d102      	bne.n	8108480 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 810847a:	7b7b      	ldrb	r3, [r7, #13]
 810847c:	2b01      	cmp	r3, #1
 810847e:	d001      	beq.n	8108484 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8108480:	2301      	movs	r3, #1
 8108482:	e089      	b.n	8108598 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8108484:	687b      	ldr	r3, [r7, #4]
 8108486:	2202      	movs	r2, #2
 8108488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 810848c:	687b      	ldr	r3, [r7, #4]
 810848e:	2202      	movs	r2, #2
 8108490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8108494:	e031      	b.n	81084fa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8108496:	683b      	ldr	r3, [r7, #0]
 8108498:	2b04      	cmp	r3, #4
 810849a:	d110      	bne.n	81084be <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 810849c:	7bbb      	ldrb	r3, [r7, #14]
 810849e:	2b01      	cmp	r3, #1
 81084a0:	d102      	bne.n	81084a8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 81084a2:	7b3b      	ldrb	r3, [r7, #12]
 81084a4:	2b01      	cmp	r3, #1
 81084a6:	d001      	beq.n	81084ac <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 81084a8:	2301      	movs	r3, #1
 81084aa:	e075      	b.n	8108598 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81084ac:	687b      	ldr	r3, [r7, #4]
 81084ae:	2202      	movs	r2, #2
 81084b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81084b4:	687b      	ldr	r3, [r7, #4]
 81084b6:	2202      	movs	r2, #2
 81084b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81084bc:	e01d      	b.n	81084fa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 81084be:	7bfb      	ldrb	r3, [r7, #15]
 81084c0:	2b01      	cmp	r3, #1
 81084c2:	d108      	bne.n	81084d6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 81084c4:	7bbb      	ldrb	r3, [r7, #14]
 81084c6:	2b01      	cmp	r3, #1
 81084c8:	d105      	bne.n	81084d6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 81084ca:	7b7b      	ldrb	r3, [r7, #13]
 81084cc:	2b01      	cmp	r3, #1
 81084ce:	d102      	bne.n	81084d6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 81084d0:	7b3b      	ldrb	r3, [r7, #12]
 81084d2:	2b01      	cmp	r3, #1
 81084d4:	d001      	beq.n	81084da <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 81084d6:	2301      	movs	r3, #1
 81084d8:	e05e      	b.n	8108598 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81084da:	687b      	ldr	r3, [r7, #4]
 81084dc:	2202      	movs	r2, #2
 81084de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81084e2:	687b      	ldr	r3, [r7, #4]
 81084e4:	2202      	movs	r2, #2
 81084e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81084ea:	687b      	ldr	r3, [r7, #4]
 81084ec:	2202      	movs	r2, #2
 81084ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81084f2:	687b      	ldr	r3, [r7, #4]
 81084f4:	2202      	movs	r2, #2
 81084f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 81084fa:	683b      	ldr	r3, [r7, #0]
 81084fc:	2b00      	cmp	r3, #0
 81084fe:	d003      	beq.n	8108508 <HAL_TIM_Encoder_Start_IT+0xc4>
 8108500:	683b      	ldr	r3, [r7, #0]
 8108502:	2b04      	cmp	r3, #4
 8108504:	d010      	beq.n	8108528 <HAL_TIM_Encoder_Start_IT+0xe4>
 8108506:	e01f      	b.n	8108548 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8108508:	687b      	ldr	r3, [r7, #4]
 810850a:	681b      	ldr	r3, [r3, #0]
 810850c:	2201      	movs	r2, #1
 810850e:	2100      	movs	r1, #0
 8108510:	4618      	mov	r0, r3
 8108512:	f000 fe11 	bl	8109138 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8108516:	687b      	ldr	r3, [r7, #4]
 8108518:	681b      	ldr	r3, [r3, #0]
 810851a:	68da      	ldr	r2, [r3, #12]
 810851c:	687b      	ldr	r3, [r7, #4]
 810851e:	681b      	ldr	r3, [r3, #0]
 8108520:	f042 0202 	orr.w	r2, r2, #2
 8108524:	60da      	str	r2, [r3, #12]
      break;
 8108526:	e02e      	b.n	8108586 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8108528:	687b      	ldr	r3, [r7, #4]
 810852a:	681b      	ldr	r3, [r3, #0]
 810852c:	2201      	movs	r2, #1
 810852e:	2104      	movs	r1, #4
 8108530:	4618      	mov	r0, r3
 8108532:	f000 fe01 	bl	8109138 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8108536:	687b      	ldr	r3, [r7, #4]
 8108538:	681b      	ldr	r3, [r3, #0]
 810853a:	68da      	ldr	r2, [r3, #12]
 810853c:	687b      	ldr	r3, [r7, #4]
 810853e:	681b      	ldr	r3, [r3, #0]
 8108540:	f042 0204 	orr.w	r2, r2, #4
 8108544:	60da      	str	r2, [r3, #12]
      break;
 8108546:	e01e      	b.n	8108586 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8108548:	687b      	ldr	r3, [r7, #4]
 810854a:	681b      	ldr	r3, [r3, #0]
 810854c:	2201      	movs	r2, #1
 810854e:	2100      	movs	r1, #0
 8108550:	4618      	mov	r0, r3
 8108552:	f000 fdf1 	bl	8109138 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8108556:	687b      	ldr	r3, [r7, #4]
 8108558:	681b      	ldr	r3, [r3, #0]
 810855a:	2201      	movs	r2, #1
 810855c:	2104      	movs	r1, #4
 810855e:	4618      	mov	r0, r3
 8108560:	f000 fdea 	bl	8109138 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8108564:	687b      	ldr	r3, [r7, #4]
 8108566:	681b      	ldr	r3, [r3, #0]
 8108568:	68da      	ldr	r2, [r3, #12]
 810856a:	687b      	ldr	r3, [r7, #4]
 810856c:	681b      	ldr	r3, [r3, #0]
 810856e:	f042 0202 	orr.w	r2, r2, #2
 8108572:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8108574:	687b      	ldr	r3, [r7, #4]
 8108576:	681b      	ldr	r3, [r3, #0]
 8108578:	68da      	ldr	r2, [r3, #12]
 810857a:	687b      	ldr	r3, [r7, #4]
 810857c:	681b      	ldr	r3, [r3, #0]
 810857e:	f042 0204 	orr.w	r2, r2, #4
 8108582:	60da      	str	r2, [r3, #12]
      break;
 8108584:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8108586:	687b      	ldr	r3, [r7, #4]
 8108588:	681b      	ldr	r3, [r3, #0]
 810858a:	681a      	ldr	r2, [r3, #0]
 810858c:	687b      	ldr	r3, [r7, #4]
 810858e:	681b      	ldr	r3, [r3, #0]
 8108590:	f042 0201 	orr.w	r2, r2, #1
 8108594:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8108596:	2300      	movs	r3, #0
}
 8108598:	4618      	mov	r0, r3
 810859a:	3710      	adds	r7, #16
 810859c:	46bd      	mov	sp, r7
 810859e:	bd80      	pop	{r7, pc}

081085a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81085a0:	b580      	push	{r7, lr}
 81085a2:	b082      	sub	sp, #8
 81085a4:	af00      	add	r7, sp, #0
 81085a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 81085a8:	687b      	ldr	r3, [r7, #4]
 81085aa:	681b      	ldr	r3, [r3, #0]
 81085ac:	691b      	ldr	r3, [r3, #16]
 81085ae:	f003 0302 	and.w	r3, r3, #2
 81085b2:	2b02      	cmp	r3, #2
 81085b4:	d122      	bne.n	81085fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81085b6:	687b      	ldr	r3, [r7, #4]
 81085b8:	681b      	ldr	r3, [r3, #0]
 81085ba:	68db      	ldr	r3, [r3, #12]
 81085bc:	f003 0302 	and.w	r3, r3, #2
 81085c0:	2b02      	cmp	r3, #2
 81085c2:	d11b      	bne.n	81085fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81085c4:	687b      	ldr	r3, [r7, #4]
 81085c6:	681b      	ldr	r3, [r3, #0]
 81085c8:	f06f 0202 	mvn.w	r2, #2
 81085cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81085ce:	687b      	ldr	r3, [r7, #4]
 81085d0:	2201      	movs	r2, #1
 81085d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81085d4:	687b      	ldr	r3, [r7, #4]
 81085d6:	681b      	ldr	r3, [r3, #0]
 81085d8:	699b      	ldr	r3, [r3, #24]
 81085da:	f003 0303 	and.w	r3, r3, #3
 81085de:	2b00      	cmp	r3, #0
 81085e0:	d003      	beq.n	81085ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81085e2:	6878      	ldr	r0, [r7, #4]
 81085e4:	f000 fa1a 	bl	8108a1c <HAL_TIM_IC_CaptureCallback>
 81085e8:	e005      	b.n	81085f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81085ea:	6878      	ldr	r0, [r7, #4]
 81085ec:	f000 fa0c 	bl	8108a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81085f0:	6878      	ldr	r0, [r7, #4]
 81085f2:	f000 fa1d 	bl	8108a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81085f6:	687b      	ldr	r3, [r7, #4]
 81085f8:	2200      	movs	r2, #0
 81085fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81085fc:	687b      	ldr	r3, [r7, #4]
 81085fe:	681b      	ldr	r3, [r3, #0]
 8108600:	691b      	ldr	r3, [r3, #16]
 8108602:	f003 0304 	and.w	r3, r3, #4
 8108606:	2b04      	cmp	r3, #4
 8108608:	d122      	bne.n	8108650 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810860a:	687b      	ldr	r3, [r7, #4]
 810860c:	681b      	ldr	r3, [r3, #0]
 810860e:	68db      	ldr	r3, [r3, #12]
 8108610:	f003 0304 	and.w	r3, r3, #4
 8108614:	2b04      	cmp	r3, #4
 8108616:	d11b      	bne.n	8108650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8108618:	687b      	ldr	r3, [r7, #4]
 810861a:	681b      	ldr	r3, [r3, #0]
 810861c:	f06f 0204 	mvn.w	r2, #4
 8108620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8108622:	687b      	ldr	r3, [r7, #4]
 8108624:	2202      	movs	r2, #2
 8108626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8108628:	687b      	ldr	r3, [r7, #4]
 810862a:	681b      	ldr	r3, [r3, #0]
 810862c:	699b      	ldr	r3, [r3, #24]
 810862e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108632:	2b00      	cmp	r3, #0
 8108634:	d003      	beq.n	810863e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108636:	6878      	ldr	r0, [r7, #4]
 8108638:	f000 f9f0 	bl	8108a1c <HAL_TIM_IC_CaptureCallback>
 810863c:	e005      	b.n	810864a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810863e:	6878      	ldr	r0, [r7, #4]
 8108640:	f000 f9e2 	bl	8108a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108644:	6878      	ldr	r0, [r7, #4]
 8108646:	f000 f9f3 	bl	8108a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810864a:	687b      	ldr	r3, [r7, #4]
 810864c:	2200      	movs	r2, #0
 810864e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8108650:	687b      	ldr	r3, [r7, #4]
 8108652:	681b      	ldr	r3, [r3, #0]
 8108654:	691b      	ldr	r3, [r3, #16]
 8108656:	f003 0308 	and.w	r3, r3, #8
 810865a:	2b08      	cmp	r3, #8
 810865c:	d122      	bne.n	81086a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810865e:	687b      	ldr	r3, [r7, #4]
 8108660:	681b      	ldr	r3, [r3, #0]
 8108662:	68db      	ldr	r3, [r3, #12]
 8108664:	f003 0308 	and.w	r3, r3, #8
 8108668:	2b08      	cmp	r3, #8
 810866a:	d11b      	bne.n	81086a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810866c:	687b      	ldr	r3, [r7, #4]
 810866e:	681b      	ldr	r3, [r3, #0]
 8108670:	f06f 0208 	mvn.w	r2, #8
 8108674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8108676:	687b      	ldr	r3, [r7, #4]
 8108678:	2204      	movs	r2, #4
 810867a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810867c:	687b      	ldr	r3, [r7, #4]
 810867e:	681b      	ldr	r3, [r3, #0]
 8108680:	69db      	ldr	r3, [r3, #28]
 8108682:	f003 0303 	and.w	r3, r3, #3
 8108686:	2b00      	cmp	r3, #0
 8108688:	d003      	beq.n	8108692 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810868a:	6878      	ldr	r0, [r7, #4]
 810868c:	f000 f9c6 	bl	8108a1c <HAL_TIM_IC_CaptureCallback>
 8108690:	e005      	b.n	810869e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108692:	6878      	ldr	r0, [r7, #4]
 8108694:	f000 f9b8 	bl	8108a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108698:	6878      	ldr	r0, [r7, #4]
 810869a:	f000 f9c9 	bl	8108a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810869e:	687b      	ldr	r3, [r7, #4]
 81086a0:	2200      	movs	r2, #0
 81086a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 81086a4:	687b      	ldr	r3, [r7, #4]
 81086a6:	681b      	ldr	r3, [r3, #0]
 81086a8:	691b      	ldr	r3, [r3, #16]
 81086aa:	f003 0310 	and.w	r3, r3, #16
 81086ae:	2b10      	cmp	r3, #16
 81086b0:	d122      	bne.n	81086f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81086b2:	687b      	ldr	r3, [r7, #4]
 81086b4:	681b      	ldr	r3, [r3, #0]
 81086b6:	68db      	ldr	r3, [r3, #12]
 81086b8:	f003 0310 	and.w	r3, r3, #16
 81086bc:	2b10      	cmp	r3, #16
 81086be:	d11b      	bne.n	81086f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81086c0:	687b      	ldr	r3, [r7, #4]
 81086c2:	681b      	ldr	r3, [r3, #0]
 81086c4:	f06f 0210 	mvn.w	r2, #16
 81086c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81086ca:	687b      	ldr	r3, [r7, #4]
 81086cc:	2208      	movs	r2, #8
 81086ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81086d0:	687b      	ldr	r3, [r7, #4]
 81086d2:	681b      	ldr	r3, [r3, #0]
 81086d4:	69db      	ldr	r3, [r3, #28]
 81086d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81086da:	2b00      	cmp	r3, #0
 81086dc:	d003      	beq.n	81086e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81086de:	6878      	ldr	r0, [r7, #4]
 81086e0:	f000 f99c 	bl	8108a1c <HAL_TIM_IC_CaptureCallback>
 81086e4:	e005      	b.n	81086f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81086e6:	6878      	ldr	r0, [r7, #4]
 81086e8:	f000 f98e 	bl	8108a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81086ec:	6878      	ldr	r0, [r7, #4]
 81086ee:	f000 f99f 	bl	8108a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81086f2:	687b      	ldr	r3, [r7, #4]
 81086f4:	2200      	movs	r2, #0
 81086f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81086f8:	687b      	ldr	r3, [r7, #4]
 81086fa:	681b      	ldr	r3, [r3, #0]
 81086fc:	691b      	ldr	r3, [r3, #16]
 81086fe:	f003 0301 	and.w	r3, r3, #1
 8108702:	2b01      	cmp	r3, #1
 8108704:	d10e      	bne.n	8108724 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8108706:	687b      	ldr	r3, [r7, #4]
 8108708:	681b      	ldr	r3, [r3, #0]
 810870a:	68db      	ldr	r3, [r3, #12]
 810870c:	f003 0301 	and.w	r3, r3, #1
 8108710:	2b01      	cmp	r3, #1
 8108712:	d107      	bne.n	8108724 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8108714:	687b      	ldr	r3, [r7, #4]
 8108716:	681b      	ldr	r3, [r3, #0]
 8108718:	f06f 0201 	mvn.w	r2, #1
 810871c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810871e:	6878      	ldr	r0, [r7, #4]
 8108720:	f7fa fb40 	bl	8102da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8108724:	687b      	ldr	r3, [r7, #4]
 8108726:	681b      	ldr	r3, [r3, #0]
 8108728:	691b      	ldr	r3, [r3, #16]
 810872a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810872e:	2b80      	cmp	r3, #128	; 0x80
 8108730:	d10e      	bne.n	8108750 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8108732:	687b      	ldr	r3, [r7, #4]
 8108734:	681b      	ldr	r3, [r3, #0]
 8108736:	68db      	ldr	r3, [r3, #12]
 8108738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810873c:	2b80      	cmp	r3, #128	; 0x80
 810873e:	d107      	bne.n	8108750 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8108740:	687b      	ldr	r3, [r7, #4]
 8108742:	681b      	ldr	r3, [r3, #0]
 8108744:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8108748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810874a:	6878      	ldr	r0, [r7, #4]
 810874c:	f000 fdb2 	bl	81092b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8108750:	687b      	ldr	r3, [r7, #4]
 8108752:	681b      	ldr	r3, [r3, #0]
 8108754:	691b      	ldr	r3, [r3, #16]
 8108756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810875a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810875e:	d10e      	bne.n	810877e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8108760:	687b      	ldr	r3, [r7, #4]
 8108762:	681b      	ldr	r3, [r3, #0]
 8108764:	68db      	ldr	r3, [r3, #12]
 8108766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810876a:	2b80      	cmp	r3, #128	; 0x80
 810876c:	d107      	bne.n	810877e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810876e:	687b      	ldr	r3, [r7, #4]
 8108770:	681b      	ldr	r3, [r3, #0]
 8108772:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8108776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8108778:	6878      	ldr	r0, [r7, #4]
 810877a:	f000 fda5 	bl	81092c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810877e:	687b      	ldr	r3, [r7, #4]
 8108780:	681b      	ldr	r3, [r3, #0]
 8108782:	691b      	ldr	r3, [r3, #16]
 8108784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108788:	2b40      	cmp	r3, #64	; 0x40
 810878a:	d10e      	bne.n	81087aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810878c:	687b      	ldr	r3, [r7, #4]
 810878e:	681b      	ldr	r3, [r3, #0]
 8108790:	68db      	ldr	r3, [r3, #12]
 8108792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108796:	2b40      	cmp	r3, #64	; 0x40
 8108798:	d107      	bne.n	81087aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810879a:	687b      	ldr	r3, [r7, #4]
 810879c:	681b      	ldr	r3, [r3, #0]
 810879e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81087a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81087a4:	6878      	ldr	r0, [r7, #4]
 81087a6:	f000 f94d 	bl	8108a44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81087aa:	687b      	ldr	r3, [r7, #4]
 81087ac:	681b      	ldr	r3, [r3, #0]
 81087ae:	691b      	ldr	r3, [r3, #16]
 81087b0:	f003 0320 	and.w	r3, r3, #32
 81087b4:	2b20      	cmp	r3, #32
 81087b6:	d10e      	bne.n	81087d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81087b8:	687b      	ldr	r3, [r7, #4]
 81087ba:	681b      	ldr	r3, [r3, #0]
 81087bc:	68db      	ldr	r3, [r3, #12]
 81087be:	f003 0320 	and.w	r3, r3, #32
 81087c2:	2b20      	cmp	r3, #32
 81087c4:	d107      	bne.n	81087d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81087c6:	687b      	ldr	r3, [r7, #4]
 81087c8:	681b      	ldr	r3, [r3, #0]
 81087ca:	f06f 0220 	mvn.w	r2, #32
 81087ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81087d0:	6878      	ldr	r0, [r7, #4]
 81087d2:	f000 fd65 	bl	81092a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81087d6:	bf00      	nop
 81087d8:	3708      	adds	r7, #8
 81087da:	46bd      	mov	sp, r7
 81087dc:	bd80      	pop	{r7, pc}
	...

081087e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81087e0:	b580      	push	{r7, lr}
 81087e2:	b086      	sub	sp, #24
 81087e4:	af00      	add	r7, sp, #0
 81087e6:	60f8      	str	r0, [r7, #12]
 81087e8:	60b9      	str	r1, [r7, #8]
 81087ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81087ec:	2300      	movs	r3, #0
 81087ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81087f0:	68fb      	ldr	r3, [r7, #12]
 81087f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81087f6:	2b01      	cmp	r3, #1
 81087f8:	d101      	bne.n	81087fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 81087fa:	2302      	movs	r3, #2
 81087fc:	e0ff      	b.n	81089fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 81087fe:	68fb      	ldr	r3, [r7, #12]
 8108800:	2201      	movs	r2, #1
 8108802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8108806:	687b      	ldr	r3, [r7, #4]
 8108808:	2b14      	cmp	r3, #20
 810880a:	f200 80f0 	bhi.w	81089ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 810880e:	a201      	add	r2, pc, #4	; (adr r2, 8108814 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8108810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108814:	08108869 	.word	0x08108869
 8108818:	081089ef 	.word	0x081089ef
 810881c:	081089ef 	.word	0x081089ef
 8108820:	081089ef 	.word	0x081089ef
 8108824:	081088a9 	.word	0x081088a9
 8108828:	081089ef 	.word	0x081089ef
 810882c:	081089ef 	.word	0x081089ef
 8108830:	081089ef 	.word	0x081089ef
 8108834:	081088eb 	.word	0x081088eb
 8108838:	081089ef 	.word	0x081089ef
 810883c:	081089ef 	.word	0x081089ef
 8108840:	081089ef 	.word	0x081089ef
 8108844:	0810892b 	.word	0x0810892b
 8108848:	081089ef 	.word	0x081089ef
 810884c:	081089ef 	.word	0x081089ef
 8108850:	081089ef 	.word	0x081089ef
 8108854:	0810896d 	.word	0x0810896d
 8108858:	081089ef 	.word	0x081089ef
 810885c:	081089ef 	.word	0x081089ef
 8108860:	081089ef 	.word	0x081089ef
 8108864:	081089ad 	.word	0x081089ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8108868:	68fb      	ldr	r3, [r7, #12]
 810886a:	681b      	ldr	r3, [r3, #0]
 810886c:	68b9      	ldr	r1, [r7, #8]
 810886e:	4618      	mov	r0, r3
 8108870:	f000 f98c 	bl	8108b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8108874:	68fb      	ldr	r3, [r7, #12]
 8108876:	681b      	ldr	r3, [r3, #0]
 8108878:	699a      	ldr	r2, [r3, #24]
 810887a:	68fb      	ldr	r3, [r7, #12]
 810887c:	681b      	ldr	r3, [r3, #0]
 810887e:	f042 0208 	orr.w	r2, r2, #8
 8108882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8108884:	68fb      	ldr	r3, [r7, #12]
 8108886:	681b      	ldr	r3, [r3, #0]
 8108888:	699a      	ldr	r2, [r3, #24]
 810888a:	68fb      	ldr	r3, [r7, #12]
 810888c:	681b      	ldr	r3, [r3, #0]
 810888e:	f022 0204 	bic.w	r2, r2, #4
 8108892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8108894:	68fb      	ldr	r3, [r7, #12]
 8108896:	681b      	ldr	r3, [r3, #0]
 8108898:	6999      	ldr	r1, [r3, #24]
 810889a:	68bb      	ldr	r3, [r7, #8]
 810889c:	691a      	ldr	r2, [r3, #16]
 810889e:	68fb      	ldr	r3, [r7, #12]
 81088a0:	681b      	ldr	r3, [r3, #0]
 81088a2:	430a      	orrs	r2, r1
 81088a4:	619a      	str	r2, [r3, #24]
      break;
 81088a6:	e0a5      	b.n	81089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81088a8:	68fb      	ldr	r3, [r7, #12]
 81088aa:	681b      	ldr	r3, [r3, #0]
 81088ac:	68b9      	ldr	r1, [r7, #8]
 81088ae:	4618      	mov	r0, r3
 81088b0:	f000 f9fc 	bl	8108cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81088b4:	68fb      	ldr	r3, [r7, #12]
 81088b6:	681b      	ldr	r3, [r3, #0]
 81088b8:	699a      	ldr	r2, [r3, #24]
 81088ba:	68fb      	ldr	r3, [r7, #12]
 81088bc:	681b      	ldr	r3, [r3, #0]
 81088be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81088c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81088c4:	68fb      	ldr	r3, [r7, #12]
 81088c6:	681b      	ldr	r3, [r3, #0]
 81088c8:	699a      	ldr	r2, [r3, #24]
 81088ca:	68fb      	ldr	r3, [r7, #12]
 81088cc:	681b      	ldr	r3, [r3, #0]
 81088ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81088d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81088d4:	68fb      	ldr	r3, [r7, #12]
 81088d6:	681b      	ldr	r3, [r3, #0]
 81088d8:	6999      	ldr	r1, [r3, #24]
 81088da:	68bb      	ldr	r3, [r7, #8]
 81088dc:	691b      	ldr	r3, [r3, #16]
 81088de:	021a      	lsls	r2, r3, #8
 81088e0:	68fb      	ldr	r3, [r7, #12]
 81088e2:	681b      	ldr	r3, [r3, #0]
 81088e4:	430a      	orrs	r2, r1
 81088e6:	619a      	str	r2, [r3, #24]
      break;
 81088e8:	e084      	b.n	81089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81088ea:	68fb      	ldr	r3, [r7, #12]
 81088ec:	681b      	ldr	r3, [r3, #0]
 81088ee:	68b9      	ldr	r1, [r7, #8]
 81088f0:	4618      	mov	r0, r3
 81088f2:	f000 fa65 	bl	8108dc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81088f6:	68fb      	ldr	r3, [r7, #12]
 81088f8:	681b      	ldr	r3, [r3, #0]
 81088fa:	69da      	ldr	r2, [r3, #28]
 81088fc:	68fb      	ldr	r3, [r7, #12]
 81088fe:	681b      	ldr	r3, [r3, #0]
 8108900:	f042 0208 	orr.w	r2, r2, #8
 8108904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8108906:	68fb      	ldr	r3, [r7, #12]
 8108908:	681b      	ldr	r3, [r3, #0]
 810890a:	69da      	ldr	r2, [r3, #28]
 810890c:	68fb      	ldr	r3, [r7, #12]
 810890e:	681b      	ldr	r3, [r3, #0]
 8108910:	f022 0204 	bic.w	r2, r2, #4
 8108914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8108916:	68fb      	ldr	r3, [r7, #12]
 8108918:	681b      	ldr	r3, [r3, #0]
 810891a:	69d9      	ldr	r1, [r3, #28]
 810891c:	68bb      	ldr	r3, [r7, #8]
 810891e:	691a      	ldr	r2, [r3, #16]
 8108920:	68fb      	ldr	r3, [r7, #12]
 8108922:	681b      	ldr	r3, [r3, #0]
 8108924:	430a      	orrs	r2, r1
 8108926:	61da      	str	r2, [r3, #28]
      break;
 8108928:	e064      	b.n	81089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810892a:	68fb      	ldr	r3, [r7, #12]
 810892c:	681b      	ldr	r3, [r3, #0]
 810892e:	68b9      	ldr	r1, [r7, #8]
 8108930:	4618      	mov	r0, r3
 8108932:	f000 facd 	bl	8108ed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8108936:	68fb      	ldr	r3, [r7, #12]
 8108938:	681b      	ldr	r3, [r3, #0]
 810893a:	69da      	ldr	r2, [r3, #28]
 810893c:	68fb      	ldr	r3, [r7, #12]
 810893e:	681b      	ldr	r3, [r3, #0]
 8108940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8108946:	68fb      	ldr	r3, [r7, #12]
 8108948:	681b      	ldr	r3, [r3, #0]
 810894a:	69da      	ldr	r2, [r3, #28]
 810894c:	68fb      	ldr	r3, [r7, #12]
 810894e:	681b      	ldr	r3, [r3, #0]
 8108950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8108956:	68fb      	ldr	r3, [r7, #12]
 8108958:	681b      	ldr	r3, [r3, #0]
 810895a:	69d9      	ldr	r1, [r3, #28]
 810895c:	68bb      	ldr	r3, [r7, #8]
 810895e:	691b      	ldr	r3, [r3, #16]
 8108960:	021a      	lsls	r2, r3, #8
 8108962:	68fb      	ldr	r3, [r7, #12]
 8108964:	681b      	ldr	r3, [r3, #0]
 8108966:	430a      	orrs	r2, r1
 8108968:	61da      	str	r2, [r3, #28]
      break;
 810896a:	e043      	b.n	81089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810896c:	68fb      	ldr	r3, [r7, #12]
 810896e:	681b      	ldr	r3, [r3, #0]
 8108970:	68b9      	ldr	r1, [r7, #8]
 8108972:	4618      	mov	r0, r3
 8108974:	f000 fb16 	bl	8108fa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8108978:	68fb      	ldr	r3, [r7, #12]
 810897a:	681b      	ldr	r3, [r3, #0]
 810897c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810897e:	68fb      	ldr	r3, [r7, #12]
 8108980:	681b      	ldr	r3, [r3, #0]
 8108982:	f042 0208 	orr.w	r2, r2, #8
 8108986:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8108988:	68fb      	ldr	r3, [r7, #12]
 810898a:	681b      	ldr	r3, [r3, #0]
 810898c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810898e:	68fb      	ldr	r3, [r7, #12]
 8108990:	681b      	ldr	r3, [r3, #0]
 8108992:	f022 0204 	bic.w	r2, r2, #4
 8108996:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8108998:	68fb      	ldr	r3, [r7, #12]
 810899a:	681b      	ldr	r3, [r3, #0]
 810899c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810899e:	68bb      	ldr	r3, [r7, #8]
 81089a0:	691a      	ldr	r2, [r3, #16]
 81089a2:	68fb      	ldr	r3, [r7, #12]
 81089a4:	681b      	ldr	r3, [r3, #0]
 81089a6:	430a      	orrs	r2, r1
 81089a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81089aa:	e023      	b.n	81089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81089ac:	68fb      	ldr	r3, [r7, #12]
 81089ae:	681b      	ldr	r3, [r3, #0]
 81089b0:	68b9      	ldr	r1, [r7, #8]
 81089b2:	4618      	mov	r0, r3
 81089b4:	f000 fb5a 	bl	810906c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81089b8:	68fb      	ldr	r3, [r7, #12]
 81089ba:	681b      	ldr	r3, [r3, #0]
 81089bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81089be:	68fb      	ldr	r3, [r7, #12]
 81089c0:	681b      	ldr	r3, [r3, #0]
 81089c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81089c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81089c8:	68fb      	ldr	r3, [r7, #12]
 81089ca:	681b      	ldr	r3, [r3, #0]
 81089cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81089ce:	68fb      	ldr	r3, [r7, #12]
 81089d0:	681b      	ldr	r3, [r3, #0]
 81089d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81089d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81089d8:	68fb      	ldr	r3, [r7, #12]
 81089da:	681b      	ldr	r3, [r3, #0]
 81089dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81089de:	68bb      	ldr	r3, [r7, #8]
 81089e0:	691b      	ldr	r3, [r3, #16]
 81089e2:	021a      	lsls	r2, r3, #8
 81089e4:	68fb      	ldr	r3, [r7, #12]
 81089e6:	681b      	ldr	r3, [r3, #0]
 81089e8:	430a      	orrs	r2, r1
 81089ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81089ec:	e002      	b.n	81089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81089ee:	2301      	movs	r3, #1
 81089f0:	75fb      	strb	r3, [r7, #23]
      break;
 81089f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81089f4:	68fb      	ldr	r3, [r7, #12]
 81089f6:	2200      	movs	r2, #0
 81089f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81089fc:	7dfb      	ldrb	r3, [r7, #23]
}
 81089fe:	4618      	mov	r0, r3
 8108a00:	3718      	adds	r7, #24
 8108a02:	46bd      	mov	sp, r7
 8108a04:	bd80      	pop	{r7, pc}
 8108a06:	bf00      	nop

08108a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8108a08:	b480      	push	{r7}
 8108a0a:	b083      	sub	sp, #12
 8108a0c:	af00      	add	r7, sp, #0
 8108a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8108a10:	bf00      	nop
 8108a12:	370c      	adds	r7, #12
 8108a14:	46bd      	mov	sp, r7
 8108a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a1a:	4770      	bx	lr

08108a1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8108a1c:	b480      	push	{r7}
 8108a1e:	b083      	sub	sp, #12
 8108a20:	af00      	add	r7, sp, #0
 8108a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8108a24:	bf00      	nop
 8108a26:	370c      	adds	r7, #12
 8108a28:	46bd      	mov	sp, r7
 8108a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a2e:	4770      	bx	lr

08108a30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8108a30:	b480      	push	{r7}
 8108a32:	b083      	sub	sp, #12
 8108a34:	af00      	add	r7, sp, #0
 8108a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8108a38:	bf00      	nop
 8108a3a:	370c      	adds	r7, #12
 8108a3c:	46bd      	mov	sp, r7
 8108a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a42:	4770      	bx	lr

08108a44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8108a44:	b480      	push	{r7}
 8108a46:	b083      	sub	sp, #12
 8108a48:	af00      	add	r7, sp, #0
 8108a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8108a4c:	bf00      	nop
 8108a4e:	370c      	adds	r7, #12
 8108a50:	46bd      	mov	sp, r7
 8108a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a56:	4770      	bx	lr

08108a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8108a58:	b480      	push	{r7}
 8108a5a:	b085      	sub	sp, #20
 8108a5c:	af00      	add	r7, sp, #0
 8108a5e:	6078      	str	r0, [r7, #4]
 8108a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8108a62:	687b      	ldr	r3, [r7, #4]
 8108a64:	681b      	ldr	r3, [r3, #0]
 8108a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8108a68:	687b      	ldr	r3, [r7, #4]
 8108a6a:	4a40      	ldr	r2, [pc, #256]	; (8108b6c <TIM_Base_SetConfig+0x114>)
 8108a6c:	4293      	cmp	r3, r2
 8108a6e:	d013      	beq.n	8108a98 <TIM_Base_SetConfig+0x40>
 8108a70:	687b      	ldr	r3, [r7, #4]
 8108a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108a76:	d00f      	beq.n	8108a98 <TIM_Base_SetConfig+0x40>
 8108a78:	687b      	ldr	r3, [r7, #4]
 8108a7a:	4a3d      	ldr	r2, [pc, #244]	; (8108b70 <TIM_Base_SetConfig+0x118>)
 8108a7c:	4293      	cmp	r3, r2
 8108a7e:	d00b      	beq.n	8108a98 <TIM_Base_SetConfig+0x40>
 8108a80:	687b      	ldr	r3, [r7, #4]
 8108a82:	4a3c      	ldr	r2, [pc, #240]	; (8108b74 <TIM_Base_SetConfig+0x11c>)
 8108a84:	4293      	cmp	r3, r2
 8108a86:	d007      	beq.n	8108a98 <TIM_Base_SetConfig+0x40>
 8108a88:	687b      	ldr	r3, [r7, #4]
 8108a8a:	4a3b      	ldr	r2, [pc, #236]	; (8108b78 <TIM_Base_SetConfig+0x120>)
 8108a8c:	4293      	cmp	r3, r2
 8108a8e:	d003      	beq.n	8108a98 <TIM_Base_SetConfig+0x40>
 8108a90:	687b      	ldr	r3, [r7, #4]
 8108a92:	4a3a      	ldr	r2, [pc, #232]	; (8108b7c <TIM_Base_SetConfig+0x124>)
 8108a94:	4293      	cmp	r3, r2
 8108a96:	d108      	bne.n	8108aaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8108a98:	68fb      	ldr	r3, [r7, #12]
 8108a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8108aa0:	683b      	ldr	r3, [r7, #0]
 8108aa2:	685b      	ldr	r3, [r3, #4]
 8108aa4:	68fa      	ldr	r2, [r7, #12]
 8108aa6:	4313      	orrs	r3, r2
 8108aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8108aaa:	687b      	ldr	r3, [r7, #4]
 8108aac:	4a2f      	ldr	r2, [pc, #188]	; (8108b6c <TIM_Base_SetConfig+0x114>)
 8108aae:	4293      	cmp	r3, r2
 8108ab0:	d01f      	beq.n	8108af2 <TIM_Base_SetConfig+0x9a>
 8108ab2:	687b      	ldr	r3, [r7, #4]
 8108ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108ab8:	d01b      	beq.n	8108af2 <TIM_Base_SetConfig+0x9a>
 8108aba:	687b      	ldr	r3, [r7, #4]
 8108abc:	4a2c      	ldr	r2, [pc, #176]	; (8108b70 <TIM_Base_SetConfig+0x118>)
 8108abe:	4293      	cmp	r3, r2
 8108ac0:	d017      	beq.n	8108af2 <TIM_Base_SetConfig+0x9a>
 8108ac2:	687b      	ldr	r3, [r7, #4]
 8108ac4:	4a2b      	ldr	r2, [pc, #172]	; (8108b74 <TIM_Base_SetConfig+0x11c>)
 8108ac6:	4293      	cmp	r3, r2
 8108ac8:	d013      	beq.n	8108af2 <TIM_Base_SetConfig+0x9a>
 8108aca:	687b      	ldr	r3, [r7, #4]
 8108acc:	4a2a      	ldr	r2, [pc, #168]	; (8108b78 <TIM_Base_SetConfig+0x120>)
 8108ace:	4293      	cmp	r3, r2
 8108ad0:	d00f      	beq.n	8108af2 <TIM_Base_SetConfig+0x9a>
 8108ad2:	687b      	ldr	r3, [r7, #4]
 8108ad4:	4a29      	ldr	r2, [pc, #164]	; (8108b7c <TIM_Base_SetConfig+0x124>)
 8108ad6:	4293      	cmp	r3, r2
 8108ad8:	d00b      	beq.n	8108af2 <TIM_Base_SetConfig+0x9a>
 8108ada:	687b      	ldr	r3, [r7, #4]
 8108adc:	4a28      	ldr	r2, [pc, #160]	; (8108b80 <TIM_Base_SetConfig+0x128>)
 8108ade:	4293      	cmp	r3, r2
 8108ae0:	d007      	beq.n	8108af2 <TIM_Base_SetConfig+0x9a>
 8108ae2:	687b      	ldr	r3, [r7, #4]
 8108ae4:	4a27      	ldr	r2, [pc, #156]	; (8108b84 <TIM_Base_SetConfig+0x12c>)
 8108ae6:	4293      	cmp	r3, r2
 8108ae8:	d003      	beq.n	8108af2 <TIM_Base_SetConfig+0x9a>
 8108aea:	687b      	ldr	r3, [r7, #4]
 8108aec:	4a26      	ldr	r2, [pc, #152]	; (8108b88 <TIM_Base_SetConfig+0x130>)
 8108aee:	4293      	cmp	r3, r2
 8108af0:	d108      	bne.n	8108b04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8108af2:	68fb      	ldr	r3, [r7, #12]
 8108af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8108afa:	683b      	ldr	r3, [r7, #0]
 8108afc:	68db      	ldr	r3, [r3, #12]
 8108afe:	68fa      	ldr	r2, [r7, #12]
 8108b00:	4313      	orrs	r3, r2
 8108b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8108b04:	68fb      	ldr	r3, [r7, #12]
 8108b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8108b0a:	683b      	ldr	r3, [r7, #0]
 8108b0c:	695b      	ldr	r3, [r3, #20]
 8108b0e:	4313      	orrs	r3, r2
 8108b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8108b12:	687b      	ldr	r3, [r7, #4]
 8108b14:	68fa      	ldr	r2, [r7, #12]
 8108b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8108b18:	683b      	ldr	r3, [r7, #0]
 8108b1a:	689a      	ldr	r2, [r3, #8]
 8108b1c:	687b      	ldr	r3, [r7, #4]
 8108b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8108b20:	683b      	ldr	r3, [r7, #0]
 8108b22:	681a      	ldr	r2, [r3, #0]
 8108b24:	687b      	ldr	r3, [r7, #4]
 8108b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8108b28:	687b      	ldr	r3, [r7, #4]
 8108b2a:	4a10      	ldr	r2, [pc, #64]	; (8108b6c <TIM_Base_SetConfig+0x114>)
 8108b2c:	4293      	cmp	r3, r2
 8108b2e:	d00f      	beq.n	8108b50 <TIM_Base_SetConfig+0xf8>
 8108b30:	687b      	ldr	r3, [r7, #4]
 8108b32:	4a12      	ldr	r2, [pc, #72]	; (8108b7c <TIM_Base_SetConfig+0x124>)
 8108b34:	4293      	cmp	r3, r2
 8108b36:	d00b      	beq.n	8108b50 <TIM_Base_SetConfig+0xf8>
 8108b38:	687b      	ldr	r3, [r7, #4]
 8108b3a:	4a11      	ldr	r2, [pc, #68]	; (8108b80 <TIM_Base_SetConfig+0x128>)
 8108b3c:	4293      	cmp	r3, r2
 8108b3e:	d007      	beq.n	8108b50 <TIM_Base_SetConfig+0xf8>
 8108b40:	687b      	ldr	r3, [r7, #4]
 8108b42:	4a10      	ldr	r2, [pc, #64]	; (8108b84 <TIM_Base_SetConfig+0x12c>)
 8108b44:	4293      	cmp	r3, r2
 8108b46:	d003      	beq.n	8108b50 <TIM_Base_SetConfig+0xf8>
 8108b48:	687b      	ldr	r3, [r7, #4]
 8108b4a:	4a0f      	ldr	r2, [pc, #60]	; (8108b88 <TIM_Base_SetConfig+0x130>)
 8108b4c:	4293      	cmp	r3, r2
 8108b4e:	d103      	bne.n	8108b58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8108b50:	683b      	ldr	r3, [r7, #0]
 8108b52:	691a      	ldr	r2, [r3, #16]
 8108b54:	687b      	ldr	r3, [r7, #4]
 8108b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8108b58:	687b      	ldr	r3, [r7, #4]
 8108b5a:	2201      	movs	r2, #1
 8108b5c:	615a      	str	r2, [r3, #20]
}
 8108b5e:	bf00      	nop
 8108b60:	3714      	adds	r7, #20
 8108b62:	46bd      	mov	sp, r7
 8108b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b68:	4770      	bx	lr
 8108b6a:	bf00      	nop
 8108b6c:	40010000 	.word	0x40010000
 8108b70:	40000400 	.word	0x40000400
 8108b74:	40000800 	.word	0x40000800
 8108b78:	40000c00 	.word	0x40000c00
 8108b7c:	40010400 	.word	0x40010400
 8108b80:	40014000 	.word	0x40014000
 8108b84:	40014400 	.word	0x40014400
 8108b88:	40014800 	.word	0x40014800

08108b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108b8c:	b480      	push	{r7}
 8108b8e:	b087      	sub	sp, #28
 8108b90:	af00      	add	r7, sp, #0
 8108b92:	6078      	str	r0, [r7, #4]
 8108b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8108b96:	687b      	ldr	r3, [r7, #4]
 8108b98:	6a1b      	ldr	r3, [r3, #32]
 8108b9a:	f023 0201 	bic.w	r2, r3, #1
 8108b9e:	687b      	ldr	r3, [r7, #4]
 8108ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108ba2:	687b      	ldr	r3, [r7, #4]
 8108ba4:	6a1b      	ldr	r3, [r3, #32]
 8108ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108ba8:	687b      	ldr	r3, [r7, #4]
 8108baa:	685b      	ldr	r3, [r3, #4]
 8108bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8108bae:	687b      	ldr	r3, [r7, #4]
 8108bb0:	699b      	ldr	r3, [r3, #24]
 8108bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8108bb4:	68fb      	ldr	r3, [r7, #12]
 8108bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8108bc0:	68fb      	ldr	r3, [r7, #12]
 8108bc2:	f023 0303 	bic.w	r3, r3, #3
 8108bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108bc8:	683b      	ldr	r3, [r7, #0]
 8108bca:	681b      	ldr	r3, [r3, #0]
 8108bcc:	68fa      	ldr	r2, [r7, #12]
 8108bce:	4313      	orrs	r3, r2
 8108bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8108bd2:	697b      	ldr	r3, [r7, #20]
 8108bd4:	f023 0302 	bic.w	r3, r3, #2
 8108bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8108bda:	683b      	ldr	r3, [r7, #0]
 8108bdc:	689b      	ldr	r3, [r3, #8]
 8108bde:	697a      	ldr	r2, [r7, #20]
 8108be0:	4313      	orrs	r3, r2
 8108be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8108be4:	687b      	ldr	r3, [r7, #4]
 8108be6:	4a2c      	ldr	r2, [pc, #176]	; (8108c98 <TIM_OC1_SetConfig+0x10c>)
 8108be8:	4293      	cmp	r3, r2
 8108bea:	d00f      	beq.n	8108c0c <TIM_OC1_SetConfig+0x80>
 8108bec:	687b      	ldr	r3, [r7, #4]
 8108bee:	4a2b      	ldr	r2, [pc, #172]	; (8108c9c <TIM_OC1_SetConfig+0x110>)
 8108bf0:	4293      	cmp	r3, r2
 8108bf2:	d00b      	beq.n	8108c0c <TIM_OC1_SetConfig+0x80>
 8108bf4:	687b      	ldr	r3, [r7, #4]
 8108bf6:	4a2a      	ldr	r2, [pc, #168]	; (8108ca0 <TIM_OC1_SetConfig+0x114>)
 8108bf8:	4293      	cmp	r3, r2
 8108bfa:	d007      	beq.n	8108c0c <TIM_OC1_SetConfig+0x80>
 8108bfc:	687b      	ldr	r3, [r7, #4]
 8108bfe:	4a29      	ldr	r2, [pc, #164]	; (8108ca4 <TIM_OC1_SetConfig+0x118>)
 8108c00:	4293      	cmp	r3, r2
 8108c02:	d003      	beq.n	8108c0c <TIM_OC1_SetConfig+0x80>
 8108c04:	687b      	ldr	r3, [r7, #4]
 8108c06:	4a28      	ldr	r2, [pc, #160]	; (8108ca8 <TIM_OC1_SetConfig+0x11c>)
 8108c08:	4293      	cmp	r3, r2
 8108c0a:	d10c      	bne.n	8108c26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8108c0c:	697b      	ldr	r3, [r7, #20]
 8108c0e:	f023 0308 	bic.w	r3, r3, #8
 8108c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8108c14:	683b      	ldr	r3, [r7, #0]
 8108c16:	68db      	ldr	r3, [r3, #12]
 8108c18:	697a      	ldr	r2, [r7, #20]
 8108c1a:	4313      	orrs	r3, r2
 8108c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8108c1e:	697b      	ldr	r3, [r7, #20]
 8108c20:	f023 0304 	bic.w	r3, r3, #4
 8108c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108c26:	687b      	ldr	r3, [r7, #4]
 8108c28:	4a1b      	ldr	r2, [pc, #108]	; (8108c98 <TIM_OC1_SetConfig+0x10c>)
 8108c2a:	4293      	cmp	r3, r2
 8108c2c:	d00f      	beq.n	8108c4e <TIM_OC1_SetConfig+0xc2>
 8108c2e:	687b      	ldr	r3, [r7, #4]
 8108c30:	4a1a      	ldr	r2, [pc, #104]	; (8108c9c <TIM_OC1_SetConfig+0x110>)
 8108c32:	4293      	cmp	r3, r2
 8108c34:	d00b      	beq.n	8108c4e <TIM_OC1_SetConfig+0xc2>
 8108c36:	687b      	ldr	r3, [r7, #4]
 8108c38:	4a19      	ldr	r2, [pc, #100]	; (8108ca0 <TIM_OC1_SetConfig+0x114>)
 8108c3a:	4293      	cmp	r3, r2
 8108c3c:	d007      	beq.n	8108c4e <TIM_OC1_SetConfig+0xc2>
 8108c3e:	687b      	ldr	r3, [r7, #4]
 8108c40:	4a18      	ldr	r2, [pc, #96]	; (8108ca4 <TIM_OC1_SetConfig+0x118>)
 8108c42:	4293      	cmp	r3, r2
 8108c44:	d003      	beq.n	8108c4e <TIM_OC1_SetConfig+0xc2>
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	4a17      	ldr	r2, [pc, #92]	; (8108ca8 <TIM_OC1_SetConfig+0x11c>)
 8108c4a:	4293      	cmp	r3, r2
 8108c4c:	d111      	bne.n	8108c72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8108c4e:	693b      	ldr	r3, [r7, #16]
 8108c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8108c56:	693b      	ldr	r3, [r7, #16]
 8108c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8108c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8108c5e:	683b      	ldr	r3, [r7, #0]
 8108c60:	695b      	ldr	r3, [r3, #20]
 8108c62:	693a      	ldr	r2, [r7, #16]
 8108c64:	4313      	orrs	r3, r2
 8108c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8108c68:	683b      	ldr	r3, [r7, #0]
 8108c6a:	699b      	ldr	r3, [r3, #24]
 8108c6c:	693a      	ldr	r2, [r7, #16]
 8108c6e:	4313      	orrs	r3, r2
 8108c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108c72:	687b      	ldr	r3, [r7, #4]
 8108c74:	693a      	ldr	r2, [r7, #16]
 8108c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8108c78:	687b      	ldr	r3, [r7, #4]
 8108c7a:	68fa      	ldr	r2, [r7, #12]
 8108c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8108c7e:	683b      	ldr	r3, [r7, #0]
 8108c80:	685a      	ldr	r2, [r3, #4]
 8108c82:	687b      	ldr	r3, [r7, #4]
 8108c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108c86:	687b      	ldr	r3, [r7, #4]
 8108c88:	697a      	ldr	r2, [r7, #20]
 8108c8a:	621a      	str	r2, [r3, #32]
}
 8108c8c:	bf00      	nop
 8108c8e:	371c      	adds	r7, #28
 8108c90:	46bd      	mov	sp, r7
 8108c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c96:	4770      	bx	lr
 8108c98:	40010000 	.word	0x40010000
 8108c9c:	40010400 	.word	0x40010400
 8108ca0:	40014000 	.word	0x40014000
 8108ca4:	40014400 	.word	0x40014400
 8108ca8:	40014800 	.word	0x40014800

08108cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108cac:	b480      	push	{r7}
 8108cae:	b087      	sub	sp, #28
 8108cb0:	af00      	add	r7, sp, #0
 8108cb2:	6078      	str	r0, [r7, #4]
 8108cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8108cb6:	687b      	ldr	r3, [r7, #4]
 8108cb8:	6a1b      	ldr	r3, [r3, #32]
 8108cba:	f023 0210 	bic.w	r2, r3, #16
 8108cbe:	687b      	ldr	r3, [r7, #4]
 8108cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108cc2:	687b      	ldr	r3, [r7, #4]
 8108cc4:	6a1b      	ldr	r3, [r3, #32]
 8108cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108cc8:	687b      	ldr	r3, [r7, #4]
 8108cca:	685b      	ldr	r3, [r3, #4]
 8108ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8108cce:	687b      	ldr	r3, [r7, #4]
 8108cd0:	699b      	ldr	r3, [r3, #24]
 8108cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8108cd4:	68fb      	ldr	r3, [r7, #12]
 8108cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8108cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8108cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8108ce0:	68fb      	ldr	r3, [r7, #12]
 8108ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108ce8:	683b      	ldr	r3, [r7, #0]
 8108cea:	681b      	ldr	r3, [r3, #0]
 8108cec:	021b      	lsls	r3, r3, #8
 8108cee:	68fa      	ldr	r2, [r7, #12]
 8108cf0:	4313      	orrs	r3, r2
 8108cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8108cf4:	697b      	ldr	r3, [r7, #20]
 8108cf6:	f023 0320 	bic.w	r3, r3, #32
 8108cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8108cfc:	683b      	ldr	r3, [r7, #0]
 8108cfe:	689b      	ldr	r3, [r3, #8]
 8108d00:	011b      	lsls	r3, r3, #4
 8108d02:	697a      	ldr	r2, [r7, #20]
 8108d04:	4313      	orrs	r3, r2
 8108d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8108d08:	687b      	ldr	r3, [r7, #4]
 8108d0a:	4a28      	ldr	r2, [pc, #160]	; (8108dac <TIM_OC2_SetConfig+0x100>)
 8108d0c:	4293      	cmp	r3, r2
 8108d0e:	d003      	beq.n	8108d18 <TIM_OC2_SetConfig+0x6c>
 8108d10:	687b      	ldr	r3, [r7, #4]
 8108d12:	4a27      	ldr	r2, [pc, #156]	; (8108db0 <TIM_OC2_SetConfig+0x104>)
 8108d14:	4293      	cmp	r3, r2
 8108d16:	d10d      	bne.n	8108d34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8108d18:	697b      	ldr	r3, [r7, #20]
 8108d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8108d20:	683b      	ldr	r3, [r7, #0]
 8108d22:	68db      	ldr	r3, [r3, #12]
 8108d24:	011b      	lsls	r3, r3, #4
 8108d26:	697a      	ldr	r2, [r7, #20]
 8108d28:	4313      	orrs	r3, r2
 8108d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8108d2c:	697b      	ldr	r3, [r7, #20]
 8108d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8108d32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108d34:	687b      	ldr	r3, [r7, #4]
 8108d36:	4a1d      	ldr	r2, [pc, #116]	; (8108dac <TIM_OC2_SetConfig+0x100>)
 8108d38:	4293      	cmp	r3, r2
 8108d3a:	d00f      	beq.n	8108d5c <TIM_OC2_SetConfig+0xb0>
 8108d3c:	687b      	ldr	r3, [r7, #4]
 8108d3e:	4a1c      	ldr	r2, [pc, #112]	; (8108db0 <TIM_OC2_SetConfig+0x104>)
 8108d40:	4293      	cmp	r3, r2
 8108d42:	d00b      	beq.n	8108d5c <TIM_OC2_SetConfig+0xb0>
 8108d44:	687b      	ldr	r3, [r7, #4]
 8108d46:	4a1b      	ldr	r2, [pc, #108]	; (8108db4 <TIM_OC2_SetConfig+0x108>)
 8108d48:	4293      	cmp	r3, r2
 8108d4a:	d007      	beq.n	8108d5c <TIM_OC2_SetConfig+0xb0>
 8108d4c:	687b      	ldr	r3, [r7, #4]
 8108d4e:	4a1a      	ldr	r2, [pc, #104]	; (8108db8 <TIM_OC2_SetConfig+0x10c>)
 8108d50:	4293      	cmp	r3, r2
 8108d52:	d003      	beq.n	8108d5c <TIM_OC2_SetConfig+0xb0>
 8108d54:	687b      	ldr	r3, [r7, #4]
 8108d56:	4a19      	ldr	r2, [pc, #100]	; (8108dbc <TIM_OC2_SetConfig+0x110>)
 8108d58:	4293      	cmp	r3, r2
 8108d5a:	d113      	bne.n	8108d84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8108d5c:	693b      	ldr	r3, [r7, #16]
 8108d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8108d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8108d64:	693b      	ldr	r3, [r7, #16]
 8108d66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8108d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8108d6c:	683b      	ldr	r3, [r7, #0]
 8108d6e:	695b      	ldr	r3, [r3, #20]
 8108d70:	009b      	lsls	r3, r3, #2
 8108d72:	693a      	ldr	r2, [r7, #16]
 8108d74:	4313      	orrs	r3, r2
 8108d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8108d78:	683b      	ldr	r3, [r7, #0]
 8108d7a:	699b      	ldr	r3, [r3, #24]
 8108d7c:	009b      	lsls	r3, r3, #2
 8108d7e:	693a      	ldr	r2, [r7, #16]
 8108d80:	4313      	orrs	r3, r2
 8108d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108d84:	687b      	ldr	r3, [r7, #4]
 8108d86:	693a      	ldr	r2, [r7, #16]
 8108d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8108d8a:	687b      	ldr	r3, [r7, #4]
 8108d8c:	68fa      	ldr	r2, [r7, #12]
 8108d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8108d90:	683b      	ldr	r3, [r7, #0]
 8108d92:	685a      	ldr	r2, [r3, #4]
 8108d94:	687b      	ldr	r3, [r7, #4]
 8108d96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108d98:	687b      	ldr	r3, [r7, #4]
 8108d9a:	697a      	ldr	r2, [r7, #20]
 8108d9c:	621a      	str	r2, [r3, #32]
}
 8108d9e:	bf00      	nop
 8108da0:	371c      	adds	r7, #28
 8108da2:	46bd      	mov	sp, r7
 8108da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108da8:	4770      	bx	lr
 8108daa:	bf00      	nop
 8108dac:	40010000 	.word	0x40010000
 8108db0:	40010400 	.word	0x40010400
 8108db4:	40014000 	.word	0x40014000
 8108db8:	40014400 	.word	0x40014400
 8108dbc:	40014800 	.word	0x40014800

08108dc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108dc0:	b480      	push	{r7}
 8108dc2:	b087      	sub	sp, #28
 8108dc4:	af00      	add	r7, sp, #0
 8108dc6:	6078      	str	r0, [r7, #4]
 8108dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8108dca:	687b      	ldr	r3, [r7, #4]
 8108dcc:	6a1b      	ldr	r3, [r3, #32]
 8108dce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8108dd2:	687b      	ldr	r3, [r7, #4]
 8108dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108dd6:	687b      	ldr	r3, [r7, #4]
 8108dd8:	6a1b      	ldr	r3, [r3, #32]
 8108dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108ddc:	687b      	ldr	r3, [r7, #4]
 8108dde:	685b      	ldr	r3, [r3, #4]
 8108de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8108de2:	687b      	ldr	r3, [r7, #4]
 8108de4:	69db      	ldr	r3, [r3, #28]
 8108de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8108de8:	68fb      	ldr	r3, [r7, #12]
 8108dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8108df4:	68fb      	ldr	r3, [r7, #12]
 8108df6:	f023 0303 	bic.w	r3, r3, #3
 8108dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108dfc:	683b      	ldr	r3, [r7, #0]
 8108dfe:	681b      	ldr	r3, [r3, #0]
 8108e00:	68fa      	ldr	r2, [r7, #12]
 8108e02:	4313      	orrs	r3, r2
 8108e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8108e06:	697b      	ldr	r3, [r7, #20]
 8108e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8108e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8108e0e:	683b      	ldr	r3, [r7, #0]
 8108e10:	689b      	ldr	r3, [r3, #8]
 8108e12:	021b      	lsls	r3, r3, #8
 8108e14:	697a      	ldr	r2, [r7, #20]
 8108e16:	4313      	orrs	r3, r2
 8108e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8108e1a:	687b      	ldr	r3, [r7, #4]
 8108e1c:	4a27      	ldr	r2, [pc, #156]	; (8108ebc <TIM_OC3_SetConfig+0xfc>)
 8108e1e:	4293      	cmp	r3, r2
 8108e20:	d003      	beq.n	8108e2a <TIM_OC3_SetConfig+0x6a>
 8108e22:	687b      	ldr	r3, [r7, #4]
 8108e24:	4a26      	ldr	r2, [pc, #152]	; (8108ec0 <TIM_OC3_SetConfig+0x100>)
 8108e26:	4293      	cmp	r3, r2
 8108e28:	d10d      	bne.n	8108e46 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8108e2a:	697b      	ldr	r3, [r7, #20]
 8108e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8108e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8108e32:	683b      	ldr	r3, [r7, #0]
 8108e34:	68db      	ldr	r3, [r3, #12]
 8108e36:	021b      	lsls	r3, r3, #8
 8108e38:	697a      	ldr	r2, [r7, #20]
 8108e3a:	4313      	orrs	r3, r2
 8108e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8108e3e:	697b      	ldr	r3, [r7, #20]
 8108e40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8108e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108e46:	687b      	ldr	r3, [r7, #4]
 8108e48:	4a1c      	ldr	r2, [pc, #112]	; (8108ebc <TIM_OC3_SetConfig+0xfc>)
 8108e4a:	4293      	cmp	r3, r2
 8108e4c:	d00f      	beq.n	8108e6e <TIM_OC3_SetConfig+0xae>
 8108e4e:	687b      	ldr	r3, [r7, #4]
 8108e50:	4a1b      	ldr	r2, [pc, #108]	; (8108ec0 <TIM_OC3_SetConfig+0x100>)
 8108e52:	4293      	cmp	r3, r2
 8108e54:	d00b      	beq.n	8108e6e <TIM_OC3_SetConfig+0xae>
 8108e56:	687b      	ldr	r3, [r7, #4]
 8108e58:	4a1a      	ldr	r2, [pc, #104]	; (8108ec4 <TIM_OC3_SetConfig+0x104>)
 8108e5a:	4293      	cmp	r3, r2
 8108e5c:	d007      	beq.n	8108e6e <TIM_OC3_SetConfig+0xae>
 8108e5e:	687b      	ldr	r3, [r7, #4]
 8108e60:	4a19      	ldr	r2, [pc, #100]	; (8108ec8 <TIM_OC3_SetConfig+0x108>)
 8108e62:	4293      	cmp	r3, r2
 8108e64:	d003      	beq.n	8108e6e <TIM_OC3_SetConfig+0xae>
 8108e66:	687b      	ldr	r3, [r7, #4]
 8108e68:	4a18      	ldr	r2, [pc, #96]	; (8108ecc <TIM_OC3_SetConfig+0x10c>)
 8108e6a:	4293      	cmp	r3, r2
 8108e6c:	d113      	bne.n	8108e96 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8108e6e:	693b      	ldr	r3, [r7, #16]
 8108e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8108e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8108e76:	693b      	ldr	r3, [r7, #16]
 8108e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8108e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8108e7e:	683b      	ldr	r3, [r7, #0]
 8108e80:	695b      	ldr	r3, [r3, #20]
 8108e82:	011b      	lsls	r3, r3, #4
 8108e84:	693a      	ldr	r2, [r7, #16]
 8108e86:	4313      	orrs	r3, r2
 8108e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8108e8a:	683b      	ldr	r3, [r7, #0]
 8108e8c:	699b      	ldr	r3, [r3, #24]
 8108e8e:	011b      	lsls	r3, r3, #4
 8108e90:	693a      	ldr	r2, [r7, #16]
 8108e92:	4313      	orrs	r3, r2
 8108e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108e96:	687b      	ldr	r3, [r7, #4]
 8108e98:	693a      	ldr	r2, [r7, #16]
 8108e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8108e9c:	687b      	ldr	r3, [r7, #4]
 8108e9e:	68fa      	ldr	r2, [r7, #12]
 8108ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8108ea2:	683b      	ldr	r3, [r7, #0]
 8108ea4:	685a      	ldr	r2, [r3, #4]
 8108ea6:	687b      	ldr	r3, [r7, #4]
 8108ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108eaa:	687b      	ldr	r3, [r7, #4]
 8108eac:	697a      	ldr	r2, [r7, #20]
 8108eae:	621a      	str	r2, [r3, #32]
}
 8108eb0:	bf00      	nop
 8108eb2:	371c      	adds	r7, #28
 8108eb4:	46bd      	mov	sp, r7
 8108eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108eba:	4770      	bx	lr
 8108ebc:	40010000 	.word	0x40010000
 8108ec0:	40010400 	.word	0x40010400
 8108ec4:	40014000 	.word	0x40014000
 8108ec8:	40014400 	.word	0x40014400
 8108ecc:	40014800 	.word	0x40014800

08108ed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108ed0:	b480      	push	{r7}
 8108ed2:	b087      	sub	sp, #28
 8108ed4:	af00      	add	r7, sp, #0
 8108ed6:	6078      	str	r0, [r7, #4]
 8108ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8108eda:	687b      	ldr	r3, [r7, #4]
 8108edc:	6a1b      	ldr	r3, [r3, #32]
 8108ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8108ee2:	687b      	ldr	r3, [r7, #4]
 8108ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108ee6:	687b      	ldr	r3, [r7, #4]
 8108ee8:	6a1b      	ldr	r3, [r3, #32]
 8108eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108eec:	687b      	ldr	r3, [r7, #4]
 8108eee:	685b      	ldr	r3, [r3, #4]
 8108ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8108ef2:	687b      	ldr	r3, [r7, #4]
 8108ef4:	69db      	ldr	r3, [r3, #28]
 8108ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8108ef8:	68fb      	ldr	r3, [r7, #12]
 8108efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8108efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8108f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8108f04:	68fb      	ldr	r3, [r7, #12]
 8108f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108f0c:	683b      	ldr	r3, [r7, #0]
 8108f0e:	681b      	ldr	r3, [r3, #0]
 8108f10:	021b      	lsls	r3, r3, #8
 8108f12:	68fa      	ldr	r2, [r7, #12]
 8108f14:	4313      	orrs	r3, r2
 8108f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8108f18:	693b      	ldr	r3, [r7, #16]
 8108f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8108f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8108f20:	683b      	ldr	r3, [r7, #0]
 8108f22:	689b      	ldr	r3, [r3, #8]
 8108f24:	031b      	lsls	r3, r3, #12
 8108f26:	693a      	ldr	r2, [r7, #16]
 8108f28:	4313      	orrs	r3, r2
 8108f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108f2c:	687b      	ldr	r3, [r7, #4]
 8108f2e:	4a18      	ldr	r2, [pc, #96]	; (8108f90 <TIM_OC4_SetConfig+0xc0>)
 8108f30:	4293      	cmp	r3, r2
 8108f32:	d00f      	beq.n	8108f54 <TIM_OC4_SetConfig+0x84>
 8108f34:	687b      	ldr	r3, [r7, #4]
 8108f36:	4a17      	ldr	r2, [pc, #92]	; (8108f94 <TIM_OC4_SetConfig+0xc4>)
 8108f38:	4293      	cmp	r3, r2
 8108f3a:	d00b      	beq.n	8108f54 <TIM_OC4_SetConfig+0x84>
 8108f3c:	687b      	ldr	r3, [r7, #4]
 8108f3e:	4a16      	ldr	r2, [pc, #88]	; (8108f98 <TIM_OC4_SetConfig+0xc8>)
 8108f40:	4293      	cmp	r3, r2
 8108f42:	d007      	beq.n	8108f54 <TIM_OC4_SetConfig+0x84>
 8108f44:	687b      	ldr	r3, [r7, #4]
 8108f46:	4a15      	ldr	r2, [pc, #84]	; (8108f9c <TIM_OC4_SetConfig+0xcc>)
 8108f48:	4293      	cmp	r3, r2
 8108f4a:	d003      	beq.n	8108f54 <TIM_OC4_SetConfig+0x84>
 8108f4c:	687b      	ldr	r3, [r7, #4]
 8108f4e:	4a14      	ldr	r2, [pc, #80]	; (8108fa0 <TIM_OC4_SetConfig+0xd0>)
 8108f50:	4293      	cmp	r3, r2
 8108f52:	d109      	bne.n	8108f68 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8108f54:	697b      	ldr	r3, [r7, #20]
 8108f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8108f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8108f5c:	683b      	ldr	r3, [r7, #0]
 8108f5e:	695b      	ldr	r3, [r3, #20]
 8108f60:	019b      	lsls	r3, r3, #6
 8108f62:	697a      	ldr	r2, [r7, #20]
 8108f64:	4313      	orrs	r3, r2
 8108f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108f68:	687b      	ldr	r3, [r7, #4]
 8108f6a:	697a      	ldr	r2, [r7, #20]
 8108f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8108f6e:	687b      	ldr	r3, [r7, #4]
 8108f70:	68fa      	ldr	r2, [r7, #12]
 8108f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8108f74:	683b      	ldr	r3, [r7, #0]
 8108f76:	685a      	ldr	r2, [r3, #4]
 8108f78:	687b      	ldr	r3, [r7, #4]
 8108f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108f7c:	687b      	ldr	r3, [r7, #4]
 8108f7e:	693a      	ldr	r2, [r7, #16]
 8108f80:	621a      	str	r2, [r3, #32]
}
 8108f82:	bf00      	nop
 8108f84:	371c      	adds	r7, #28
 8108f86:	46bd      	mov	sp, r7
 8108f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f8c:	4770      	bx	lr
 8108f8e:	bf00      	nop
 8108f90:	40010000 	.word	0x40010000
 8108f94:	40010400 	.word	0x40010400
 8108f98:	40014000 	.word	0x40014000
 8108f9c:	40014400 	.word	0x40014400
 8108fa0:	40014800 	.word	0x40014800

08108fa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8108fa4:	b480      	push	{r7}
 8108fa6:	b087      	sub	sp, #28
 8108fa8:	af00      	add	r7, sp, #0
 8108faa:	6078      	str	r0, [r7, #4]
 8108fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8108fae:	687b      	ldr	r3, [r7, #4]
 8108fb0:	6a1b      	ldr	r3, [r3, #32]
 8108fb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8108fb6:	687b      	ldr	r3, [r7, #4]
 8108fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108fba:	687b      	ldr	r3, [r7, #4]
 8108fbc:	6a1b      	ldr	r3, [r3, #32]
 8108fbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108fc0:	687b      	ldr	r3, [r7, #4]
 8108fc2:	685b      	ldr	r3, [r3, #4]
 8108fc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108fc6:	687b      	ldr	r3, [r7, #4]
 8108fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8108fcc:	68fb      	ldr	r3, [r7, #12]
 8108fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108fd8:	683b      	ldr	r3, [r7, #0]
 8108fda:	681b      	ldr	r3, [r3, #0]
 8108fdc:	68fa      	ldr	r2, [r7, #12]
 8108fde:	4313      	orrs	r3, r2
 8108fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8108fe2:	693b      	ldr	r3, [r7, #16]
 8108fe4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8108fe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8108fea:	683b      	ldr	r3, [r7, #0]
 8108fec:	689b      	ldr	r3, [r3, #8]
 8108fee:	041b      	lsls	r3, r3, #16
 8108ff0:	693a      	ldr	r2, [r7, #16]
 8108ff2:	4313      	orrs	r3, r2
 8108ff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108ff6:	687b      	ldr	r3, [r7, #4]
 8108ff8:	4a17      	ldr	r2, [pc, #92]	; (8109058 <TIM_OC5_SetConfig+0xb4>)
 8108ffa:	4293      	cmp	r3, r2
 8108ffc:	d00f      	beq.n	810901e <TIM_OC5_SetConfig+0x7a>
 8108ffe:	687b      	ldr	r3, [r7, #4]
 8109000:	4a16      	ldr	r2, [pc, #88]	; (810905c <TIM_OC5_SetConfig+0xb8>)
 8109002:	4293      	cmp	r3, r2
 8109004:	d00b      	beq.n	810901e <TIM_OC5_SetConfig+0x7a>
 8109006:	687b      	ldr	r3, [r7, #4]
 8109008:	4a15      	ldr	r2, [pc, #84]	; (8109060 <TIM_OC5_SetConfig+0xbc>)
 810900a:	4293      	cmp	r3, r2
 810900c:	d007      	beq.n	810901e <TIM_OC5_SetConfig+0x7a>
 810900e:	687b      	ldr	r3, [r7, #4]
 8109010:	4a14      	ldr	r2, [pc, #80]	; (8109064 <TIM_OC5_SetConfig+0xc0>)
 8109012:	4293      	cmp	r3, r2
 8109014:	d003      	beq.n	810901e <TIM_OC5_SetConfig+0x7a>
 8109016:	687b      	ldr	r3, [r7, #4]
 8109018:	4a13      	ldr	r2, [pc, #76]	; (8109068 <TIM_OC5_SetConfig+0xc4>)
 810901a:	4293      	cmp	r3, r2
 810901c:	d109      	bne.n	8109032 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810901e:	697b      	ldr	r3, [r7, #20]
 8109020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8109024:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8109026:	683b      	ldr	r3, [r7, #0]
 8109028:	695b      	ldr	r3, [r3, #20]
 810902a:	021b      	lsls	r3, r3, #8
 810902c:	697a      	ldr	r2, [r7, #20]
 810902e:	4313      	orrs	r3, r2
 8109030:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109032:	687b      	ldr	r3, [r7, #4]
 8109034:	697a      	ldr	r2, [r7, #20]
 8109036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8109038:	687b      	ldr	r3, [r7, #4]
 810903a:	68fa      	ldr	r2, [r7, #12]
 810903c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810903e:	683b      	ldr	r3, [r7, #0]
 8109040:	685a      	ldr	r2, [r3, #4]
 8109042:	687b      	ldr	r3, [r7, #4]
 8109044:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109046:	687b      	ldr	r3, [r7, #4]
 8109048:	693a      	ldr	r2, [r7, #16]
 810904a:	621a      	str	r2, [r3, #32]
}
 810904c:	bf00      	nop
 810904e:	371c      	adds	r7, #28
 8109050:	46bd      	mov	sp, r7
 8109052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109056:	4770      	bx	lr
 8109058:	40010000 	.word	0x40010000
 810905c:	40010400 	.word	0x40010400
 8109060:	40014000 	.word	0x40014000
 8109064:	40014400 	.word	0x40014400
 8109068:	40014800 	.word	0x40014800

0810906c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810906c:	b480      	push	{r7}
 810906e:	b087      	sub	sp, #28
 8109070:	af00      	add	r7, sp, #0
 8109072:	6078      	str	r0, [r7, #4]
 8109074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8109076:	687b      	ldr	r3, [r7, #4]
 8109078:	6a1b      	ldr	r3, [r3, #32]
 810907a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810907e:	687b      	ldr	r3, [r7, #4]
 8109080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109082:	687b      	ldr	r3, [r7, #4]
 8109084:	6a1b      	ldr	r3, [r3, #32]
 8109086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109088:	687b      	ldr	r3, [r7, #4]
 810908a:	685b      	ldr	r3, [r3, #4]
 810908c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810908e:	687b      	ldr	r3, [r7, #4]
 8109090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8109094:	68fb      	ldr	r3, [r7, #12]
 8109096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810909a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810909e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81090a0:	683b      	ldr	r3, [r7, #0]
 81090a2:	681b      	ldr	r3, [r3, #0]
 81090a4:	021b      	lsls	r3, r3, #8
 81090a6:	68fa      	ldr	r2, [r7, #12]
 81090a8:	4313      	orrs	r3, r2
 81090aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81090ac:	693b      	ldr	r3, [r7, #16]
 81090ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81090b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81090b4:	683b      	ldr	r3, [r7, #0]
 81090b6:	689b      	ldr	r3, [r3, #8]
 81090b8:	051b      	lsls	r3, r3, #20
 81090ba:	693a      	ldr	r2, [r7, #16]
 81090bc:	4313      	orrs	r3, r2
 81090be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81090c0:	687b      	ldr	r3, [r7, #4]
 81090c2:	4a18      	ldr	r2, [pc, #96]	; (8109124 <TIM_OC6_SetConfig+0xb8>)
 81090c4:	4293      	cmp	r3, r2
 81090c6:	d00f      	beq.n	81090e8 <TIM_OC6_SetConfig+0x7c>
 81090c8:	687b      	ldr	r3, [r7, #4]
 81090ca:	4a17      	ldr	r2, [pc, #92]	; (8109128 <TIM_OC6_SetConfig+0xbc>)
 81090cc:	4293      	cmp	r3, r2
 81090ce:	d00b      	beq.n	81090e8 <TIM_OC6_SetConfig+0x7c>
 81090d0:	687b      	ldr	r3, [r7, #4]
 81090d2:	4a16      	ldr	r2, [pc, #88]	; (810912c <TIM_OC6_SetConfig+0xc0>)
 81090d4:	4293      	cmp	r3, r2
 81090d6:	d007      	beq.n	81090e8 <TIM_OC6_SetConfig+0x7c>
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	4a15      	ldr	r2, [pc, #84]	; (8109130 <TIM_OC6_SetConfig+0xc4>)
 81090dc:	4293      	cmp	r3, r2
 81090de:	d003      	beq.n	81090e8 <TIM_OC6_SetConfig+0x7c>
 81090e0:	687b      	ldr	r3, [r7, #4]
 81090e2:	4a14      	ldr	r2, [pc, #80]	; (8109134 <TIM_OC6_SetConfig+0xc8>)
 81090e4:	4293      	cmp	r3, r2
 81090e6:	d109      	bne.n	81090fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81090e8:	697b      	ldr	r3, [r7, #20]
 81090ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81090ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81090f0:	683b      	ldr	r3, [r7, #0]
 81090f2:	695b      	ldr	r3, [r3, #20]
 81090f4:	029b      	lsls	r3, r3, #10
 81090f6:	697a      	ldr	r2, [r7, #20]
 81090f8:	4313      	orrs	r3, r2
 81090fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81090fc:	687b      	ldr	r3, [r7, #4]
 81090fe:	697a      	ldr	r2, [r7, #20]
 8109100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8109102:	687b      	ldr	r3, [r7, #4]
 8109104:	68fa      	ldr	r2, [r7, #12]
 8109106:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8109108:	683b      	ldr	r3, [r7, #0]
 810910a:	685a      	ldr	r2, [r3, #4]
 810910c:	687b      	ldr	r3, [r7, #4]
 810910e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109110:	687b      	ldr	r3, [r7, #4]
 8109112:	693a      	ldr	r2, [r7, #16]
 8109114:	621a      	str	r2, [r3, #32]
}
 8109116:	bf00      	nop
 8109118:	371c      	adds	r7, #28
 810911a:	46bd      	mov	sp, r7
 810911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109120:	4770      	bx	lr
 8109122:	bf00      	nop
 8109124:	40010000 	.word	0x40010000
 8109128:	40010400 	.word	0x40010400
 810912c:	40014000 	.word	0x40014000
 8109130:	40014400 	.word	0x40014400
 8109134:	40014800 	.word	0x40014800

08109138 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8109138:	b480      	push	{r7}
 810913a:	b087      	sub	sp, #28
 810913c:	af00      	add	r7, sp, #0
 810913e:	60f8      	str	r0, [r7, #12]
 8109140:	60b9      	str	r1, [r7, #8]
 8109142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8109144:	68bb      	ldr	r3, [r7, #8]
 8109146:	f003 031f 	and.w	r3, r3, #31
 810914a:	2201      	movs	r2, #1
 810914c:	fa02 f303 	lsl.w	r3, r2, r3
 8109150:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8109152:	68fb      	ldr	r3, [r7, #12]
 8109154:	6a1a      	ldr	r2, [r3, #32]
 8109156:	697b      	ldr	r3, [r7, #20]
 8109158:	43db      	mvns	r3, r3
 810915a:	401a      	ands	r2, r3
 810915c:	68fb      	ldr	r3, [r7, #12]
 810915e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8109160:	68fb      	ldr	r3, [r7, #12]
 8109162:	6a1a      	ldr	r2, [r3, #32]
 8109164:	68bb      	ldr	r3, [r7, #8]
 8109166:	f003 031f 	and.w	r3, r3, #31
 810916a:	6879      	ldr	r1, [r7, #4]
 810916c:	fa01 f303 	lsl.w	r3, r1, r3
 8109170:	431a      	orrs	r2, r3
 8109172:	68fb      	ldr	r3, [r7, #12]
 8109174:	621a      	str	r2, [r3, #32]
}
 8109176:	bf00      	nop
 8109178:	371c      	adds	r7, #28
 810917a:	46bd      	mov	sp, r7
 810917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109180:	4770      	bx	lr
	...

08109184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8109184:	b480      	push	{r7}
 8109186:	b085      	sub	sp, #20
 8109188:	af00      	add	r7, sp, #0
 810918a:	6078      	str	r0, [r7, #4]
 810918c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810918e:	687b      	ldr	r3, [r7, #4]
 8109190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8109194:	2b01      	cmp	r3, #1
 8109196:	d101      	bne.n	810919c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8109198:	2302      	movs	r3, #2
 810919a:	e06d      	b.n	8109278 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810919c:	687b      	ldr	r3, [r7, #4]
 810919e:	2201      	movs	r2, #1
 81091a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81091a4:	687b      	ldr	r3, [r7, #4]
 81091a6:	2202      	movs	r2, #2
 81091a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81091ac:	687b      	ldr	r3, [r7, #4]
 81091ae:	681b      	ldr	r3, [r3, #0]
 81091b0:	685b      	ldr	r3, [r3, #4]
 81091b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	681b      	ldr	r3, [r3, #0]
 81091b8:	689b      	ldr	r3, [r3, #8]
 81091ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81091bc:	687b      	ldr	r3, [r7, #4]
 81091be:	681b      	ldr	r3, [r3, #0]
 81091c0:	4a30      	ldr	r2, [pc, #192]	; (8109284 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81091c2:	4293      	cmp	r3, r2
 81091c4:	d004      	beq.n	81091d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81091c6:	687b      	ldr	r3, [r7, #4]
 81091c8:	681b      	ldr	r3, [r3, #0]
 81091ca:	4a2f      	ldr	r2, [pc, #188]	; (8109288 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81091cc:	4293      	cmp	r3, r2
 81091ce:	d108      	bne.n	81091e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81091d0:	68fb      	ldr	r3, [r7, #12]
 81091d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81091d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81091d8:	683b      	ldr	r3, [r7, #0]
 81091da:	685b      	ldr	r3, [r3, #4]
 81091dc:	68fa      	ldr	r2, [r7, #12]
 81091de:	4313      	orrs	r3, r2
 81091e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81091e2:	68fb      	ldr	r3, [r7, #12]
 81091e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81091e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81091ea:	683b      	ldr	r3, [r7, #0]
 81091ec:	681b      	ldr	r3, [r3, #0]
 81091ee:	68fa      	ldr	r2, [r7, #12]
 81091f0:	4313      	orrs	r3, r2
 81091f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81091f4:	687b      	ldr	r3, [r7, #4]
 81091f6:	681b      	ldr	r3, [r3, #0]
 81091f8:	68fa      	ldr	r2, [r7, #12]
 81091fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81091fc:	687b      	ldr	r3, [r7, #4]
 81091fe:	681b      	ldr	r3, [r3, #0]
 8109200:	4a20      	ldr	r2, [pc, #128]	; (8109284 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8109202:	4293      	cmp	r3, r2
 8109204:	d022      	beq.n	810924c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109206:	687b      	ldr	r3, [r7, #4]
 8109208:	681b      	ldr	r3, [r3, #0]
 810920a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810920e:	d01d      	beq.n	810924c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109210:	687b      	ldr	r3, [r7, #4]
 8109212:	681b      	ldr	r3, [r3, #0]
 8109214:	4a1d      	ldr	r2, [pc, #116]	; (810928c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8109216:	4293      	cmp	r3, r2
 8109218:	d018      	beq.n	810924c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810921a:	687b      	ldr	r3, [r7, #4]
 810921c:	681b      	ldr	r3, [r3, #0]
 810921e:	4a1c      	ldr	r2, [pc, #112]	; (8109290 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8109220:	4293      	cmp	r3, r2
 8109222:	d013      	beq.n	810924c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109224:	687b      	ldr	r3, [r7, #4]
 8109226:	681b      	ldr	r3, [r3, #0]
 8109228:	4a1a      	ldr	r2, [pc, #104]	; (8109294 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810922a:	4293      	cmp	r3, r2
 810922c:	d00e      	beq.n	810924c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810922e:	687b      	ldr	r3, [r7, #4]
 8109230:	681b      	ldr	r3, [r3, #0]
 8109232:	4a15      	ldr	r2, [pc, #84]	; (8109288 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8109234:	4293      	cmp	r3, r2
 8109236:	d009      	beq.n	810924c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109238:	687b      	ldr	r3, [r7, #4]
 810923a:	681b      	ldr	r3, [r3, #0]
 810923c:	4a16      	ldr	r2, [pc, #88]	; (8109298 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810923e:	4293      	cmp	r3, r2
 8109240:	d004      	beq.n	810924c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109242:	687b      	ldr	r3, [r7, #4]
 8109244:	681b      	ldr	r3, [r3, #0]
 8109246:	4a15      	ldr	r2, [pc, #84]	; (810929c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8109248:	4293      	cmp	r3, r2
 810924a:	d10c      	bne.n	8109266 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810924c:	68bb      	ldr	r3, [r7, #8]
 810924e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8109252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8109254:	683b      	ldr	r3, [r7, #0]
 8109256:	689b      	ldr	r3, [r3, #8]
 8109258:	68ba      	ldr	r2, [r7, #8]
 810925a:	4313      	orrs	r3, r2
 810925c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810925e:	687b      	ldr	r3, [r7, #4]
 8109260:	681b      	ldr	r3, [r3, #0]
 8109262:	68ba      	ldr	r2, [r7, #8]
 8109264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8109266:	687b      	ldr	r3, [r7, #4]
 8109268:	2201      	movs	r2, #1
 810926a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810926e:	687b      	ldr	r3, [r7, #4]
 8109270:	2200      	movs	r2, #0
 8109272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8109276:	2300      	movs	r3, #0
}
 8109278:	4618      	mov	r0, r3
 810927a:	3714      	adds	r7, #20
 810927c:	46bd      	mov	sp, r7
 810927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109282:	4770      	bx	lr
 8109284:	40010000 	.word	0x40010000
 8109288:	40010400 	.word	0x40010400
 810928c:	40000400 	.word	0x40000400
 8109290:	40000800 	.word	0x40000800
 8109294:	40000c00 	.word	0x40000c00
 8109298:	40001800 	.word	0x40001800
 810929c:	40014000 	.word	0x40014000

081092a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81092a0:	b480      	push	{r7}
 81092a2:	b083      	sub	sp, #12
 81092a4:	af00      	add	r7, sp, #0
 81092a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81092a8:	bf00      	nop
 81092aa:	370c      	adds	r7, #12
 81092ac:	46bd      	mov	sp, r7
 81092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092b2:	4770      	bx	lr

081092b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81092b4:	b480      	push	{r7}
 81092b6:	b083      	sub	sp, #12
 81092b8:	af00      	add	r7, sp, #0
 81092ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81092bc:	bf00      	nop
 81092be:	370c      	adds	r7, #12
 81092c0:	46bd      	mov	sp, r7
 81092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092c6:	4770      	bx	lr

081092c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81092c8:	b480      	push	{r7}
 81092ca:	b083      	sub	sp, #12
 81092cc:	af00      	add	r7, sp, #0
 81092ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81092d0:	bf00      	nop
 81092d2:	370c      	adds	r7, #12
 81092d4:	46bd      	mov	sp, r7
 81092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092da:	4770      	bx	lr

081092dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81092dc:	b580      	push	{r7, lr}
 81092de:	b082      	sub	sp, #8
 81092e0:	af00      	add	r7, sp, #0
 81092e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81092e4:	687b      	ldr	r3, [r7, #4]
 81092e6:	2b00      	cmp	r3, #0
 81092e8:	d101      	bne.n	81092ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81092ea:	2301      	movs	r3, #1
 81092ec:	e042      	b.n	8109374 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81092ee:	687b      	ldr	r3, [r7, #4]
 81092f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81092f4:	2b00      	cmp	r3, #0
 81092f6:	d106      	bne.n	8109306 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81092f8:	687b      	ldr	r3, [r7, #4]
 81092fa:	2200      	movs	r2, #0
 81092fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8109300:	6878      	ldr	r0, [r7, #4]
 8109302:	f7f9 fdc5 	bl	8102e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8109306:	687b      	ldr	r3, [r7, #4]
 8109308:	2224      	movs	r2, #36	; 0x24
 810930a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810930e:	687b      	ldr	r3, [r7, #4]
 8109310:	681b      	ldr	r3, [r3, #0]
 8109312:	681a      	ldr	r2, [r3, #0]
 8109314:	687b      	ldr	r3, [r7, #4]
 8109316:	681b      	ldr	r3, [r3, #0]
 8109318:	f022 0201 	bic.w	r2, r2, #1
 810931c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810931e:	6878      	ldr	r0, [r7, #4]
 8109320:	f000 f8c2 	bl	81094a8 <UART_SetConfig>
 8109324:	4603      	mov	r3, r0
 8109326:	2b01      	cmp	r3, #1
 8109328:	d101      	bne.n	810932e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810932a:	2301      	movs	r3, #1
 810932c:	e022      	b.n	8109374 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810932e:	687b      	ldr	r3, [r7, #4]
 8109330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109332:	2b00      	cmp	r3, #0
 8109334:	d002      	beq.n	810933c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8109336:	6878      	ldr	r0, [r7, #4]
 8109338:	f000 fe1e 	bl	8109f78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810933c:	687b      	ldr	r3, [r7, #4]
 810933e:	681b      	ldr	r3, [r3, #0]
 8109340:	685a      	ldr	r2, [r3, #4]
 8109342:	687b      	ldr	r3, [r7, #4]
 8109344:	681b      	ldr	r3, [r3, #0]
 8109346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810934a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810934c:	687b      	ldr	r3, [r7, #4]
 810934e:	681b      	ldr	r3, [r3, #0]
 8109350:	689a      	ldr	r2, [r3, #8]
 8109352:	687b      	ldr	r3, [r7, #4]
 8109354:	681b      	ldr	r3, [r3, #0]
 8109356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810935a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810935c:	687b      	ldr	r3, [r7, #4]
 810935e:	681b      	ldr	r3, [r3, #0]
 8109360:	681a      	ldr	r2, [r3, #0]
 8109362:	687b      	ldr	r3, [r7, #4]
 8109364:	681b      	ldr	r3, [r3, #0]
 8109366:	f042 0201 	orr.w	r2, r2, #1
 810936a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810936c:	6878      	ldr	r0, [r7, #4]
 810936e:	f000 fea5 	bl	810a0bc <UART_CheckIdleState>
 8109372:	4603      	mov	r3, r0
}
 8109374:	4618      	mov	r0, r3
 8109376:	3708      	adds	r7, #8
 8109378:	46bd      	mov	sp, r7
 810937a:	bd80      	pop	{r7, pc}

0810937c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810937c:	b580      	push	{r7, lr}
 810937e:	b08a      	sub	sp, #40	; 0x28
 8109380:	af02      	add	r7, sp, #8
 8109382:	60f8      	str	r0, [r7, #12]
 8109384:	60b9      	str	r1, [r7, #8]
 8109386:	603b      	str	r3, [r7, #0]
 8109388:	4613      	mov	r3, r2
 810938a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810938c:	68fb      	ldr	r3, [r7, #12]
 810938e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109392:	2b20      	cmp	r3, #32
 8109394:	f040 8083 	bne.w	810949e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8109398:	68bb      	ldr	r3, [r7, #8]
 810939a:	2b00      	cmp	r3, #0
 810939c:	d002      	beq.n	81093a4 <HAL_UART_Transmit+0x28>
 810939e:	88fb      	ldrh	r3, [r7, #6]
 81093a0:	2b00      	cmp	r3, #0
 81093a2:	d101      	bne.n	81093a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 81093a4:	2301      	movs	r3, #1
 81093a6:	e07b      	b.n	81094a0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 81093a8:	68fb      	ldr	r3, [r7, #12]
 81093aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81093ae:	2b01      	cmp	r3, #1
 81093b0:	d101      	bne.n	81093b6 <HAL_UART_Transmit+0x3a>
 81093b2:	2302      	movs	r3, #2
 81093b4:	e074      	b.n	81094a0 <HAL_UART_Transmit+0x124>
 81093b6:	68fb      	ldr	r3, [r7, #12]
 81093b8:	2201      	movs	r2, #1
 81093ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81093be:	68fb      	ldr	r3, [r7, #12]
 81093c0:	2200      	movs	r2, #0
 81093c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81093c6:	68fb      	ldr	r3, [r7, #12]
 81093c8:	2221      	movs	r2, #33	; 0x21
 81093ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81093ce:	f7f9 ff49 	bl	8103264 <HAL_GetTick>
 81093d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81093d4:	68fb      	ldr	r3, [r7, #12]
 81093d6:	88fa      	ldrh	r2, [r7, #6]
 81093d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81093dc:	68fb      	ldr	r3, [r7, #12]
 81093de:	88fa      	ldrh	r2, [r7, #6]
 81093e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81093e4:	68fb      	ldr	r3, [r7, #12]
 81093e6:	689b      	ldr	r3, [r3, #8]
 81093e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81093ec:	d108      	bne.n	8109400 <HAL_UART_Transmit+0x84>
 81093ee:	68fb      	ldr	r3, [r7, #12]
 81093f0:	691b      	ldr	r3, [r3, #16]
 81093f2:	2b00      	cmp	r3, #0
 81093f4:	d104      	bne.n	8109400 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81093f6:	2300      	movs	r3, #0
 81093f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81093fa:	68bb      	ldr	r3, [r7, #8]
 81093fc:	61bb      	str	r3, [r7, #24]
 81093fe:	e003      	b.n	8109408 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8109400:	68bb      	ldr	r3, [r7, #8]
 8109402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8109404:	2300      	movs	r3, #0
 8109406:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8109408:	68fb      	ldr	r3, [r7, #12]
 810940a:	2200      	movs	r2, #0
 810940c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8109410:	e02c      	b.n	810946c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8109412:	683b      	ldr	r3, [r7, #0]
 8109414:	9300      	str	r3, [sp, #0]
 8109416:	697b      	ldr	r3, [r7, #20]
 8109418:	2200      	movs	r2, #0
 810941a:	2180      	movs	r1, #128	; 0x80
 810941c:	68f8      	ldr	r0, [r7, #12]
 810941e:	f000 fe98 	bl	810a152 <UART_WaitOnFlagUntilTimeout>
 8109422:	4603      	mov	r3, r0
 8109424:	2b00      	cmp	r3, #0
 8109426:	d001      	beq.n	810942c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8109428:	2303      	movs	r3, #3
 810942a:	e039      	b.n	81094a0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 810942c:	69fb      	ldr	r3, [r7, #28]
 810942e:	2b00      	cmp	r3, #0
 8109430:	d10b      	bne.n	810944a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8109432:	69bb      	ldr	r3, [r7, #24]
 8109434:	881b      	ldrh	r3, [r3, #0]
 8109436:	461a      	mov	r2, r3
 8109438:	68fb      	ldr	r3, [r7, #12]
 810943a:	681b      	ldr	r3, [r3, #0]
 810943c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8109440:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8109442:	69bb      	ldr	r3, [r7, #24]
 8109444:	3302      	adds	r3, #2
 8109446:	61bb      	str	r3, [r7, #24]
 8109448:	e007      	b.n	810945a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810944a:	69fb      	ldr	r3, [r7, #28]
 810944c:	781a      	ldrb	r2, [r3, #0]
 810944e:	68fb      	ldr	r3, [r7, #12]
 8109450:	681b      	ldr	r3, [r3, #0]
 8109452:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8109454:	69fb      	ldr	r3, [r7, #28]
 8109456:	3301      	adds	r3, #1
 8109458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810945a:	68fb      	ldr	r3, [r7, #12]
 810945c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109460:	b29b      	uxth	r3, r3
 8109462:	3b01      	subs	r3, #1
 8109464:	b29a      	uxth	r2, r3
 8109466:	68fb      	ldr	r3, [r7, #12]
 8109468:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 810946c:	68fb      	ldr	r3, [r7, #12]
 810946e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109472:	b29b      	uxth	r3, r3
 8109474:	2b00      	cmp	r3, #0
 8109476:	d1cc      	bne.n	8109412 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8109478:	683b      	ldr	r3, [r7, #0]
 810947a:	9300      	str	r3, [sp, #0]
 810947c:	697b      	ldr	r3, [r7, #20]
 810947e:	2200      	movs	r2, #0
 8109480:	2140      	movs	r1, #64	; 0x40
 8109482:	68f8      	ldr	r0, [r7, #12]
 8109484:	f000 fe65 	bl	810a152 <UART_WaitOnFlagUntilTimeout>
 8109488:	4603      	mov	r3, r0
 810948a:	2b00      	cmp	r3, #0
 810948c:	d001      	beq.n	8109492 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 810948e:	2303      	movs	r3, #3
 8109490:	e006      	b.n	81094a0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8109492:	68fb      	ldr	r3, [r7, #12]
 8109494:	2220      	movs	r2, #32
 8109496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 810949a:	2300      	movs	r3, #0
 810949c:	e000      	b.n	81094a0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 810949e:	2302      	movs	r3, #2
  }
}
 81094a0:	4618      	mov	r0, r3
 81094a2:	3720      	adds	r7, #32
 81094a4:	46bd      	mov	sp, r7
 81094a6:	bd80      	pop	{r7, pc}

081094a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81094a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81094ac:	b092      	sub	sp, #72	; 0x48
 81094ae:	af00      	add	r7, sp, #0
 81094b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81094b2:	2300      	movs	r3, #0
 81094b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81094b8:	697b      	ldr	r3, [r7, #20]
 81094ba:	689a      	ldr	r2, [r3, #8]
 81094bc:	697b      	ldr	r3, [r7, #20]
 81094be:	691b      	ldr	r3, [r3, #16]
 81094c0:	431a      	orrs	r2, r3
 81094c2:	697b      	ldr	r3, [r7, #20]
 81094c4:	695b      	ldr	r3, [r3, #20]
 81094c6:	431a      	orrs	r2, r3
 81094c8:	697b      	ldr	r3, [r7, #20]
 81094ca:	69db      	ldr	r3, [r3, #28]
 81094cc:	4313      	orrs	r3, r2
 81094ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81094d0:	697b      	ldr	r3, [r7, #20]
 81094d2:	681b      	ldr	r3, [r3, #0]
 81094d4:	681a      	ldr	r2, [r3, #0]
 81094d6:	4bbd      	ldr	r3, [pc, #756]	; (81097cc <UART_SetConfig+0x324>)
 81094d8:	4013      	ands	r3, r2
 81094da:	697a      	ldr	r2, [r7, #20]
 81094dc:	6812      	ldr	r2, [r2, #0]
 81094de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81094e0:	430b      	orrs	r3, r1
 81094e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81094e4:	697b      	ldr	r3, [r7, #20]
 81094e6:	681b      	ldr	r3, [r3, #0]
 81094e8:	685b      	ldr	r3, [r3, #4]
 81094ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81094ee:	697b      	ldr	r3, [r7, #20]
 81094f0:	68da      	ldr	r2, [r3, #12]
 81094f2:	697b      	ldr	r3, [r7, #20]
 81094f4:	681b      	ldr	r3, [r3, #0]
 81094f6:	430a      	orrs	r2, r1
 81094f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81094fa:	697b      	ldr	r3, [r7, #20]
 81094fc:	699b      	ldr	r3, [r3, #24]
 81094fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8109500:	697b      	ldr	r3, [r7, #20]
 8109502:	681b      	ldr	r3, [r3, #0]
 8109504:	4ab2      	ldr	r2, [pc, #712]	; (81097d0 <UART_SetConfig+0x328>)
 8109506:	4293      	cmp	r3, r2
 8109508:	d004      	beq.n	8109514 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810950a:	697b      	ldr	r3, [r7, #20]
 810950c:	6a1b      	ldr	r3, [r3, #32]
 810950e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8109510:	4313      	orrs	r3, r2
 8109512:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8109514:	697b      	ldr	r3, [r7, #20]
 8109516:	681b      	ldr	r3, [r3, #0]
 8109518:	689b      	ldr	r3, [r3, #8]
 810951a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810951e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8109522:	697a      	ldr	r2, [r7, #20]
 8109524:	6812      	ldr	r2, [r2, #0]
 8109526:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109528:	430b      	orrs	r3, r1
 810952a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810952c:	697b      	ldr	r3, [r7, #20]
 810952e:	681b      	ldr	r3, [r3, #0]
 8109530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109532:	f023 010f 	bic.w	r1, r3, #15
 8109536:	697b      	ldr	r3, [r7, #20]
 8109538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810953a:	697b      	ldr	r3, [r7, #20]
 810953c:	681b      	ldr	r3, [r3, #0]
 810953e:	430a      	orrs	r2, r1
 8109540:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8109542:	697b      	ldr	r3, [r7, #20]
 8109544:	681b      	ldr	r3, [r3, #0]
 8109546:	4aa3      	ldr	r2, [pc, #652]	; (81097d4 <UART_SetConfig+0x32c>)
 8109548:	4293      	cmp	r3, r2
 810954a:	d177      	bne.n	810963c <UART_SetConfig+0x194>
 810954c:	4ba2      	ldr	r3, [pc, #648]	; (81097d8 <UART_SetConfig+0x330>)
 810954e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109550:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109554:	2b28      	cmp	r3, #40	; 0x28
 8109556:	d86d      	bhi.n	8109634 <UART_SetConfig+0x18c>
 8109558:	a201      	add	r2, pc, #4	; (adr r2, 8109560 <UART_SetConfig+0xb8>)
 810955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810955e:	bf00      	nop
 8109560:	08109605 	.word	0x08109605
 8109564:	08109635 	.word	0x08109635
 8109568:	08109635 	.word	0x08109635
 810956c:	08109635 	.word	0x08109635
 8109570:	08109635 	.word	0x08109635
 8109574:	08109635 	.word	0x08109635
 8109578:	08109635 	.word	0x08109635
 810957c:	08109635 	.word	0x08109635
 8109580:	0810960d 	.word	0x0810960d
 8109584:	08109635 	.word	0x08109635
 8109588:	08109635 	.word	0x08109635
 810958c:	08109635 	.word	0x08109635
 8109590:	08109635 	.word	0x08109635
 8109594:	08109635 	.word	0x08109635
 8109598:	08109635 	.word	0x08109635
 810959c:	08109635 	.word	0x08109635
 81095a0:	08109615 	.word	0x08109615
 81095a4:	08109635 	.word	0x08109635
 81095a8:	08109635 	.word	0x08109635
 81095ac:	08109635 	.word	0x08109635
 81095b0:	08109635 	.word	0x08109635
 81095b4:	08109635 	.word	0x08109635
 81095b8:	08109635 	.word	0x08109635
 81095bc:	08109635 	.word	0x08109635
 81095c0:	0810961d 	.word	0x0810961d
 81095c4:	08109635 	.word	0x08109635
 81095c8:	08109635 	.word	0x08109635
 81095cc:	08109635 	.word	0x08109635
 81095d0:	08109635 	.word	0x08109635
 81095d4:	08109635 	.word	0x08109635
 81095d8:	08109635 	.word	0x08109635
 81095dc:	08109635 	.word	0x08109635
 81095e0:	08109625 	.word	0x08109625
 81095e4:	08109635 	.word	0x08109635
 81095e8:	08109635 	.word	0x08109635
 81095ec:	08109635 	.word	0x08109635
 81095f0:	08109635 	.word	0x08109635
 81095f4:	08109635 	.word	0x08109635
 81095f8:	08109635 	.word	0x08109635
 81095fc:	08109635 	.word	0x08109635
 8109600:	0810962d 	.word	0x0810962d
 8109604:	2301      	movs	r3, #1
 8109606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810960a:	e220      	b.n	8109a4e <UART_SetConfig+0x5a6>
 810960c:	2304      	movs	r3, #4
 810960e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109612:	e21c      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109614:	2308      	movs	r3, #8
 8109616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810961a:	e218      	b.n	8109a4e <UART_SetConfig+0x5a6>
 810961c:	2310      	movs	r3, #16
 810961e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109622:	e214      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109624:	2320      	movs	r3, #32
 8109626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810962a:	e210      	b.n	8109a4e <UART_SetConfig+0x5a6>
 810962c:	2340      	movs	r3, #64	; 0x40
 810962e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109632:	e20c      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109634:	2380      	movs	r3, #128	; 0x80
 8109636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810963a:	e208      	b.n	8109a4e <UART_SetConfig+0x5a6>
 810963c:	697b      	ldr	r3, [r7, #20]
 810963e:	681b      	ldr	r3, [r3, #0]
 8109640:	4a66      	ldr	r2, [pc, #408]	; (81097dc <UART_SetConfig+0x334>)
 8109642:	4293      	cmp	r3, r2
 8109644:	d130      	bne.n	81096a8 <UART_SetConfig+0x200>
 8109646:	4b64      	ldr	r3, [pc, #400]	; (81097d8 <UART_SetConfig+0x330>)
 8109648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810964a:	f003 0307 	and.w	r3, r3, #7
 810964e:	2b05      	cmp	r3, #5
 8109650:	d826      	bhi.n	81096a0 <UART_SetConfig+0x1f8>
 8109652:	a201      	add	r2, pc, #4	; (adr r2, 8109658 <UART_SetConfig+0x1b0>)
 8109654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109658:	08109671 	.word	0x08109671
 810965c:	08109679 	.word	0x08109679
 8109660:	08109681 	.word	0x08109681
 8109664:	08109689 	.word	0x08109689
 8109668:	08109691 	.word	0x08109691
 810966c:	08109699 	.word	0x08109699
 8109670:	2300      	movs	r3, #0
 8109672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109676:	e1ea      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109678:	2304      	movs	r3, #4
 810967a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810967e:	e1e6      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109680:	2308      	movs	r3, #8
 8109682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109686:	e1e2      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109688:	2310      	movs	r3, #16
 810968a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810968e:	e1de      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109690:	2320      	movs	r3, #32
 8109692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109696:	e1da      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109698:	2340      	movs	r3, #64	; 0x40
 810969a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810969e:	e1d6      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81096a0:	2380      	movs	r3, #128	; 0x80
 81096a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096a6:	e1d2      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81096a8:	697b      	ldr	r3, [r7, #20]
 81096aa:	681b      	ldr	r3, [r3, #0]
 81096ac:	4a4c      	ldr	r2, [pc, #304]	; (81097e0 <UART_SetConfig+0x338>)
 81096ae:	4293      	cmp	r3, r2
 81096b0:	d130      	bne.n	8109714 <UART_SetConfig+0x26c>
 81096b2:	4b49      	ldr	r3, [pc, #292]	; (81097d8 <UART_SetConfig+0x330>)
 81096b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81096b6:	f003 0307 	and.w	r3, r3, #7
 81096ba:	2b05      	cmp	r3, #5
 81096bc:	d826      	bhi.n	810970c <UART_SetConfig+0x264>
 81096be:	a201      	add	r2, pc, #4	; (adr r2, 81096c4 <UART_SetConfig+0x21c>)
 81096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81096c4:	081096dd 	.word	0x081096dd
 81096c8:	081096e5 	.word	0x081096e5
 81096cc:	081096ed 	.word	0x081096ed
 81096d0:	081096f5 	.word	0x081096f5
 81096d4:	081096fd 	.word	0x081096fd
 81096d8:	08109705 	.word	0x08109705
 81096dc:	2300      	movs	r3, #0
 81096de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096e2:	e1b4      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81096e4:	2304      	movs	r3, #4
 81096e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096ea:	e1b0      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81096ec:	2308      	movs	r3, #8
 81096ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096f2:	e1ac      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81096f4:	2310      	movs	r3, #16
 81096f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096fa:	e1a8      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81096fc:	2320      	movs	r3, #32
 81096fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109702:	e1a4      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109704:	2340      	movs	r3, #64	; 0x40
 8109706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810970a:	e1a0      	b.n	8109a4e <UART_SetConfig+0x5a6>
 810970c:	2380      	movs	r3, #128	; 0x80
 810970e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109712:	e19c      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109714:	697b      	ldr	r3, [r7, #20]
 8109716:	681b      	ldr	r3, [r3, #0]
 8109718:	4a32      	ldr	r2, [pc, #200]	; (81097e4 <UART_SetConfig+0x33c>)
 810971a:	4293      	cmp	r3, r2
 810971c:	d130      	bne.n	8109780 <UART_SetConfig+0x2d8>
 810971e:	4b2e      	ldr	r3, [pc, #184]	; (81097d8 <UART_SetConfig+0x330>)
 8109720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109722:	f003 0307 	and.w	r3, r3, #7
 8109726:	2b05      	cmp	r3, #5
 8109728:	d826      	bhi.n	8109778 <UART_SetConfig+0x2d0>
 810972a:	a201      	add	r2, pc, #4	; (adr r2, 8109730 <UART_SetConfig+0x288>)
 810972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109730:	08109749 	.word	0x08109749
 8109734:	08109751 	.word	0x08109751
 8109738:	08109759 	.word	0x08109759
 810973c:	08109761 	.word	0x08109761
 8109740:	08109769 	.word	0x08109769
 8109744:	08109771 	.word	0x08109771
 8109748:	2300      	movs	r3, #0
 810974a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810974e:	e17e      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109750:	2304      	movs	r3, #4
 8109752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109756:	e17a      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109758:	2308      	movs	r3, #8
 810975a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810975e:	e176      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109760:	2310      	movs	r3, #16
 8109762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109766:	e172      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109768:	2320      	movs	r3, #32
 810976a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810976e:	e16e      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109770:	2340      	movs	r3, #64	; 0x40
 8109772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109776:	e16a      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109778:	2380      	movs	r3, #128	; 0x80
 810977a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810977e:	e166      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109780:	697b      	ldr	r3, [r7, #20]
 8109782:	681b      	ldr	r3, [r3, #0]
 8109784:	4a18      	ldr	r2, [pc, #96]	; (81097e8 <UART_SetConfig+0x340>)
 8109786:	4293      	cmp	r3, r2
 8109788:	d140      	bne.n	810980c <UART_SetConfig+0x364>
 810978a:	4b13      	ldr	r3, [pc, #76]	; (81097d8 <UART_SetConfig+0x330>)
 810978c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810978e:	f003 0307 	and.w	r3, r3, #7
 8109792:	2b05      	cmp	r3, #5
 8109794:	d836      	bhi.n	8109804 <UART_SetConfig+0x35c>
 8109796:	a201      	add	r2, pc, #4	; (adr r2, 810979c <UART_SetConfig+0x2f4>)
 8109798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810979c:	081097b5 	.word	0x081097b5
 81097a0:	081097bd 	.word	0x081097bd
 81097a4:	081097c5 	.word	0x081097c5
 81097a8:	081097ed 	.word	0x081097ed
 81097ac:	081097f5 	.word	0x081097f5
 81097b0:	081097fd 	.word	0x081097fd
 81097b4:	2300      	movs	r3, #0
 81097b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097ba:	e148      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81097bc:	2304      	movs	r3, #4
 81097be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097c2:	e144      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81097c4:	2308      	movs	r3, #8
 81097c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097ca:	e140      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81097cc:	cfff69f3 	.word	0xcfff69f3
 81097d0:	58000c00 	.word	0x58000c00
 81097d4:	40011000 	.word	0x40011000
 81097d8:	58024400 	.word	0x58024400
 81097dc:	40004400 	.word	0x40004400
 81097e0:	40004800 	.word	0x40004800
 81097e4:	40004c00 	.word	0x40004c00
 81097e8:	40005000 	.word	0x40005000
 81097ec:	2310      	movs	r3, #16
 81097ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097f2:	e12c      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81097f4:	2320      	movs	r3, #32
 81097f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097fa:	e128      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81097fc:	2340      	movs	r3, #64	; 0x40
 81097fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109802:	e124      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109804:	2380      	movs	r3, #128	; 0x80
 8109806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810980a:	e120      	b.n	8109a4e <UART_SetConfig+0x5a6>
 810980c:	697b      	ldr	r3, [r7, #20]
 810980e:	681b      	ldr	r3, [r3, #0]
 8109810:	4acb      	ldr	r2, [pc, #812]	; (8109b40 <UART_SetConfig+0x698>)
 8109812:	4293      	cmp	r3, r2
 8109814:	d176      	bne.n	8109904 <UART_SetConfig+0x45c>
 8109816:	4bcb      	ldr	r3, [pc, #812]	; (8109b44 <UART_SetConfig+0x69c>)
 8109818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810981a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810981e:	2b28      	cmp	r3, #40	; 0x28
 8109820:	d86c      	bhi.n	81098fc <UART_SetConfig+0x454>
 8109822:	a201      	add	r2, pc, #4	; (adr r2, 8109828 <UART_SetConfig+0x380>)
 8109824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109828:	081098cd 	.word	0x081098cd
 810982c:	081098fd 	.word	0x081098fd
 8109830:	081098fd 	.word	0x081098fd
 8109834:	081098fd 	.word	0x081098fd
 8109838:	081098fd 	.word	0x081098fd
 810983c:	081098fd 	.word	0x081098fd
 8109840:	081098fd 	.word	0x081098fd
 8109844:	081098fd 	.word	0x081098fd
 8109848:	081098d5 	.word	0x081098d5
 810984c:	081098fd 	.word	0x081098fd
 8109850:	081098fd 	.word	0x081098fd
 8109854:	081098fd 	.word	0x081098fd
 8109858:	081098fd 	.word	0x081098fd
 810985c:	081098fd 	.word	0x081098fd
 8109860:	081098fd 	.word	0x081098fd
 8109864:	081098fd 	.word	0x081098fd
 8109868:	081098dd 	.word	0x081098dd
 810986c:	081098fd 	.word	0x081098fd
 8109870:	081098fd 	.word	0x081098fd
 8109874:	081098fd 	.word	0x081098fd
 8109878:	081098fd 	.word	0x081098fd
 810987c:	081098fd 	.word	0x081098fd
 8109880:	081098fd 	.word	0x081098fd
 8109884:	081098fd 	.word	0x081098fd
 8109888:	081098e5 	.word	0x081098e5
 810988c:	081098fd 	.word	0x081098fd
 8109890:	081098fd 	.word	0x081098fd
 8109894:	081098fd 	.word	0x081098fd
 8109898:	081098fd 	.word	0x081098fd
 810989c:	081098fd 	.word	0x081098fd
 81098a0:	081098fd 	.word	0x081098fd
 81098a4:	081098fd 	.word	0x081098fd
 81098a8:	081098ed 	.word	0x081098ed
 81098ac:	081098fd 	.word	0x081098fd
 81098b0:	081098fd 	.word	0x081098fd
 81098b4:	081098fd 	.word	0x081098fd
 81098b8:	081098fd 	.word	0x081098fd
 81098bc:	081098fd 	.word	0x081098fd
 81098c0:	081098fd 	.word	0x081098fd
 81098c4:	081098fd 	.word	0x081098fd
 81098c8:	081098f5 	.word	0x081098f5
 81098cc:	2301      	movs	r3, #1
 81098ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81098d2:	e0bc      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81098d4:	2304      	movs	r3, #4
 81098d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81098da:	e0b8      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81098dc:	2308      	movs	r3, #8
 81098de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81098e2:	e0b4      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81098e4:	2310      	movs	r3, #16
 81098e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81098ea:	e0b0      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81098ec:	2320      	movs	r3, #32
 81098ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81098f2:	e0ac      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81098f4:	2340      	movs	r3, #64	; 0x40
 81098f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81098fa:	e0a8      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81098fc:	2380      	movs	r3, #128	; 0x80
 81098fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109902:	e0a4      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109904:	697b      	ldr	r3, [r7, #20]
 8109906:	681b      	ldr	r3, [r3, #0]
 8109908:	4a8f      	ldr	r2, [pc, #572]	; (8109b48 <UART_SetConfig+0x6a0>)
 810990a:	4293      	cmp	r3, r2
 810990c:	d130      	bne.n	8109970 <UART_SetConfig+0x4c8>
 810990e:	4b8d      	ldr	r3, [pc, #564]	; (8109b44 <UART_SetConfig+0x69c>)
 8109910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109912:	f003 0307 	and.w	r3, r3, #7
 8109916:	2b05      	cmp	r3, #5
 8109918:	d826      	bhi.n	8109968 <UART_SetConfig+0x4c0>
 810991a:	a201      	add	r2, pc, #4	; (adr r2, 8109920 <UART_SetConfig+0x478>)
 810991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109920:	08109939 	.word	0x08109939
 8109924:	08109941 	.word	0x08109941
 8109928:	08109949 	.word	0x08109949
 810992c:	08109951 	.word	0x08109951
 8109930:	08109959 	.word	0x08109959
 8109934:	08109961 	.word	0x08109961
 8109938:	2300      	movs	r3, #0
 810993a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810993e:	e086      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109940:	2304      	movs	r3, #4
 8109942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109946:	e082      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109948:	2308      	movs	r3, #8
 810994a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810994e:	e07e      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109950:	2310      	movs	r3, #16
 8109952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109956:	e07a      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109958:	2320      	movs	r3, #32
 810995a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810995e:	e076      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109960:	2340      	movs	r3, #64	; 0x40
 8109962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109966:	e072      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109968:	2380      	movs	r3, #128	; 0x80
 810996a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810996e:	e06e      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109970:	697b      	ldr	r3, [r7, #20]
 8109972:	681b      	ldr	r3, [r3, #0]
 8109974:	4a75      	ldr	r2, [pc, #468]	; (8109b4c <UART_SetConfig+0x6a4>)
 8109976:	4293      	cmp	r3, r2
 8109978:	d130      	bne.n	81099dc <UART_SetConfig+0x534>
 810997a:	4b72      	ldr	r3, [pc, #456]	; (8109b44 <UART_SetConfig+0x69c>)
 810997c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810997e:	f003 0307 	and.w	r3, r3, #7
 8109982:	2b05      	cmp	r3, #5
 8109984:	d826      	bhi.n	81099d4 <UART_SetConfig+0x52c>
 8109986:	a201      	add	r2, pc, #4	; (adr r2, 810998c <UART_SetConfig+0x4e4>)
 8109988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810998c:	081099a5 	.word	0x081099a5
 8109990:	081099ad 	.word	0x081099ad
 8109994:	081099b5 	.word	0x081099b5
 8109998:	081099bd 	.word	0x081099bd
 810999c:	081099c5 	.word	0x081099c5
 81099a0:	081099cd 	.word	0x081099cd
 81099a4:	2300      	movs	r3, #0
 81099a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099aa:	e050      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81099ac:	2304      	movs	r3, #4
 81099ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099b2:	e04c      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81099b4:	2308      	movs	r3, #8
 81099b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099ba:	e048      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81099bc:	2310      	movs	r3, #16
 81099be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099c2:	e044      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81099c4:	2320      	movs	r3, #32
 81099c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099ca:	e040      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81099cc:	2340      	movs	r3, #64	; 0x40
 81099ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099d2:	e03c      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81099d4:	2380      	movs	r3, #128	; 0x80
 81099d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099da:	e038      	b.n	8109a4e <UART_SetConfig+0x5a6>
 81099dc:	697b      	ldr	r3, [r7, #20]
 81099de:	681b      	ldr	r3, [r3, #0]
 81099e0:	4a5b      	ldr	r2, [pc, #364]	; (8109b50 <UART_SetConfig+0x6a8>)
 81099e2:	4293      	cmp	r3, r2
 81099e4:	d130      	bne.n	8109a48 <UART_SetConfig+0x5a0>
 81099e6:	4b57      	ldr	r3, [pc, #348]	; (8109b44 <UART_SetConfig+0x69c>)
 81099e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81099ea:	f003 0307 	and.w	r3, r3, #7
 81099ee:	2b05      	cmp	r3, #5
 81099f0:	d826      	bhi.n	8109a40 <UART_SetConfig+0x598>
 81099f2:	a201      	add	r2, pc, #4	; (adr r2, 81099f8 <UART_SetConfig+0x550>)
 81099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81099f8:	08109a11 	.word	0x08109a11
 81099fc:	08109a19 	.word	0x08109a19
 8109a00:	08109a21 	.word	0x08109a21
 8109a04:	08109a29 	.word	0x08109a29
 8109a08:	08109a31 	.word	0x08109a31
 8109a0c:	08109a39 	.word	0x08109a39
 8109a10:	2302      	movs	r3, #2
 8109a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a16:	e01a      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109a18:	2304      	movs	r3, #4
 8109a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a1e:	e016      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109a20:	2308      	movs	r3, #8
 8109a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a26:	e012      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109a28:	2310      	movs	r3, #16
 8109a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a2e:	e00e      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109a30:	2320      	movs	r3, #32
 8109a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a36:	e00a      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109a38:	2340      	movs	r3, #64	; 0x40
 8109a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a3e:	e006      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109a40:	2380      	movs	r3, #128	; 0x80
 8109a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a46:	e002      	b.n	8109a4e <UART_SetConfig+0x5a6>
 8109a48:	2380      	movs	r3, #128	; 0x80
 8109a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8109a4e:	697b      	ldr	r3, [r7, #20]
 8109a50:	681b      	ldr	r3, [r3, #0]
 8109a52:	4a3f      	ldr	r2, [pc, #252]	; (8109b50 <UART_SetConfig+0x6a8>)
 8109a54:	4293      	cmp	r3, r2
 8109a56:	f040 80f8 	bne.w	8109c4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8109a5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109a5e:	2b20      	cmp	r3, #32
 8109a60:	dc46      	bgt.n	8109af0 <UART_SetConfig+0x648>
 8109a62:	2b02      	cmp	r3, #2
 8109a64:	f2c0 8082 	blt.w	8109b6c <UART_SetConfig+0x6c4>
 8109a68:	3b02      	subs	r3, #2
 8109a6a:	2b1e      	cmp	r3, #30
 8109a6c:	d87e      	bhi.n	8109b6c <UART_SetConfig+0x6c4>
 8109a6e:	a201      	add	r2, pc, #4	; (adr r2, 8109a74 <UART_SetConfig+0x5cc>)
 8109a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109a74:	08109af7 	.word	0x08109af7
 8109a78:	08109b6d 	.word	0x08109b6d
 8109a7c:	08109aff 	.word	0x08109aff
 8109a80:	08109b6d 	.word	0x08109b6d
 8109a84:	08109b6d 	.word	0x08109b6d
 8109a88:	08109b6d 	.word	0x08109b6d
 8109a8c:	08109b0f 	.word	0x08109b0f
 8109a90:	08109b6d 	.word	0x08109b6d
 8109a94:	08109b6d 	.word	0x08109b6d
 8109a98:	08109b6d 	.word	0x08109b6d
 8109a9c:	08109b6d 	.word	0x08109b6d
 8109aa0:	08109b6d 	.word	0x08109b6d
 8109aa4:	08109b6d 	.word	0x08109b6d
 8109aa8:	08109b6d 	.word	0x08109b6d
 8109aac:	08109b1f 	.word	0x08109b1f
 8109ab0:	08109b6d 	.word	0x08109b6d
 8109ab4:	08109b6d 	.word	0x08109b6d
 8109ab8:	08109b6d 	.word	0x08109b6d
 8109abc:	08109b6d 	.word	0x08109b6d
 8109ac0:	08109b6d 	.word	0x08109b6d
 8109ac4:	08109b6d 	.word	0x08109b6d
 8109ac8:	08109b6d 	.word	0x08109b6d
 8109acc:	08109b6d 	.word	0x08109b6d
 8109ad0:	08109b6d 	.word	0x08109b6d
 8109ad4:	08109b6d 	.word	0x08109b6d
 8109ad8:	08109b6d 	.word	0x08109b6d
 8109adc:	08109b6d 	.word	0x08109b6d
 8109ae0:	08109b6d 	.word	0x08109b6d
 8109ae4:	08109b6d 	.word	0x08109b6d
 8109ae8:	08109b6d 	.word	0x08109b6d
 8109aec:	08109b5f 	.word	0x08109b5f
 8109af0:	2b40      	cmp	r3, #64	; 0x40
 8109af2:	d037      	beq.n	8109b64 <UART_SetConfig+0x6bc>
 8109af4:	e03a      	b.n	8109b6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8109af6:	f7fd fc55 	bl	81073a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8109afa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109afc:	e03c      	b.n	8109b78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109b02:	4618      	mov	r0, r3
 8109b04:	f7fd fc64 	bl	81073d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b0c:	e034      	b.n	8109b78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109b0e:	f107 0318 	add.w	r3, r7, #24
 8109b12:	4618      	mov	r0, r3
 8109b14:	f7fd fdb0 	bl	8107678 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109b18:	69fb      	ldr	r3, [r7, #28]
 8109b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b1c:	e02c      	b.n	8109b78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109b1e:	4b09      	ldr	r3, [pc, #36]	; (8109b44 <UART_SetConfig+0x69c>)
 8109b20:	681b      	ldr	r3, [r3, #0]
 8109b22:	f003 0320 	and.w	r3, r3, #32
 8109b26:	2b00      	cmp	r3, #0
 8109b28:	d016      	beq.n	8109b58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109b2a:	4b06      	ldr	r3, [pc, #24]	; (8109b44 <UART_SetConfig+0x69c>)
 8109b2c:	681b      	ldr	r3, [r3, #0]
 8109b2e:	08db      	lsrs	r3, r3, #3
 8109b30:	f003 0303 	and.w	r3, r3, #3
 8109b34:	4a07      	ldr	r2, [pc, #28]	; (8109b54 <UART_SetConfig+0x6ac>)
 8109b36:	fa22 f303 	lsr.w	r3, r2, r3
 8109b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109b3c:	e01c      	b.n	8109b78 <UART_SetConfig+0x6d0>
 8109b3e:	bf00      	nop
 8109b40:	40011400 	.word	0x40011400
 8109b44:	58024400 	.word	0x58024400
 8109b48:	40007800 	.word	0x40007800
 8109b4c:	40007c00 	.word	0x40007c00
 8109b50:	58000c00 	.word	0x58000c00
 8109b54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8109b58:	4b9d      	ldr	r3, [pc, #628]	; (8109dd0 <UART_SetConfig+0x928>)
 8109b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b5c:	e00c      	b.n	8109b78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109b5e:	4b9d      	ldr	r3, [pc, #628]	; (8109dd4 <UART_SetConfig+0x92c>)
 8109b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b62:	e009      	b.n	8109b78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109b64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b6a:	e005      	b.n	8109b78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8109b6c:	2300      	movs	r3, #0
 8109b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109b70:	2301      	movs	r3, #1
 8109b72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109b76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8109b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109b7a:	2b00      	cmp	r3, #0
 8109b7c:	f000 81de 	beq.w	8109f3c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8109b80:	697b      	ldr	r3, [r7, #20]
 8109b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109b84:	4a94      	ldr	r2, [pc, #592]	; (8109dd8 <UART_SetConfig+0x930>)
 8109b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109b8a:	461a      	mov	r2, r3
 8109b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109b8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8109b92:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109b94:	697b      	ldr	r3, [r7, #20]
 8109b96:	685a      	ldr	r2, [r3, #4]
 8109b98:	4613      	mov	r3, r2
 8109b9a:	005b      	lsls	r3, r3, #1
 8109b9c:	4413      	add	r3, r2
 8109b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109ba0:	429a      	cmp	r2, r3
 8109ba2:	d305      	bcc.n	8109bb0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8109ba4:	697b      	ldr	r3, [r7, #20]
 8109ba6:	685b      	ldr	r3, [r3, #4]
 8109ba8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109bac:	429a      	cmp	r2, r3
 8109bae:	d903      	bls.n	8109bb8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8109bb0:	2301      	movs	r3, #1
 8109bb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109bb6:	e1c1      	b.n	8109f3c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109bba:	2200      	movs	r2, #0
 8109bbc:	60bb      	str	r3, [r7, #8]
 8109bbe:	60fa      	str	r2, [r7, #12]
 8109bc0:	697b      	ldr	r3, [r7, #20]
 8109bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109bc4:	4a84      	ldr	r2, [pc, #528]	; (8109dd8 <UART_SetConfig+0x930>)
 8109bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109bca:	b29b      	uxth	r3, r3
 8109bcc:	2200      	movs	r2, #0
 8109bce:	603b      	str	r3, [r7, #0]
 8109bd0:	607a      	str	r2, [r7, #4]
 8109bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109bd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8109bda:	f7f6 fe3d 	bl	8100858 <__aeabi_uldivmod>
 8109bde:	4602      	mov	r2, r0
 8109be0:	460b      	mov	r3, r1
 8109be2:	4610      	mov	r0, r2
 8109be4:	4619      	mov	r1, r3
 8109be6:	f04f 0200 	mov.w	r2, #0
 8109bea:	f04f 0300 	mov.w	r3, #0
 8109bee:	020b      	lsls	r3, r1, #8
 8109bf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8109bf4:	0202      	lsls	r2, r0, #8
 8109bf6:	6979      	ldr	r1, [r7, #20]
 8109bf8:	6849      	ldr	r1, [r1, #4]
 8109bfa:	0849      	lsrs	r1, r1, #1
 8109bfc:	2000      	movs	r0, #0
 8109bfe:	460c      	mov	r4, r1
 8109c00:	4605      	mov	r5, r0
 8109c02:	eb12 0804 	adds.w	r8, r2, r4
 8109c06:	eb43 0905 	adc.w	r9, r3, r5
 8109c0a:	697b      	ldr	r3, [r7, #20]
 8109c0c:	685b      	ldr	r3, [r3, #4]
 8109c0e:	2200      	movs	r2, #0
 8109c10:	469a      	mov	sl, r3
 8109c12:	4693      	mov	fp, r2
 8109c14:	4652      	mov	r2, sl
 8109c16:	465b      	mov	r3, fp
 8109c18:	4640      	mov	r0, r8
 8109c1a:	4649      	mov	r1, r9
 8109c1c:	f7f6 fe1c 	bl	8100858 <__aeabi_uldivmod>
 8109c20:	4602      	mov	r2, r0
 8109c22:	460b      	mov	r3, r1
 8109c24:	4613      	mov	r3, r2
 8109c26:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8109c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109c2e:	d308      	bcc.n	8109c42 <UART_SetConfig+0x79a>
 8109c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109c36:	d204      	bcs.n	8109c42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8109c38:	697b      	ldr	r3, [r7, #20]
 8109c3a:	681b      	ldr	r3, [r3, #0]
 8109c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8109c3e:	60da      	str	r2, [r3, #12]
 8109c40:	e17c      	b.n	8109f3c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8109c42:	2301      	movs	r3, #1
 8109c44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109c48:	e178      	b.n	8109f3c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8109c4a:	697b      	ldr	r3, [r7, #20]
 8109c4c:	69db      	ldr	r3, [r3, #28]
 8109c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109c52:	f040 80c5 	bne.w	8109de0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8109c56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109c5a:	2b20      	cmp	r3, #32
 8109c5c:	dc48      	bgt.n	8109cf0 <UART_SetConfig+0x848>
 8109c5e:	2b00      	cmp	r3, #0
 8109c60:	db7b      	blt.n	8109d5a <UART_SetConfig+0x8b2>
 8109c62:	2b20      	cmp	r3, #32
 8109c64:	d879      	bhi.n	8109d5a <UART_SetConfig+0x8b2>
 8109c66:	a201      	add	r2, pc, #4	; (adr r2, 8109c6c <UART_SetConfig+0x7c4>)
 8109c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109c6c:	08109cf7 	.word	0x08109cf7
 8109c70:	08109cff 	.word	0x08109cff
 8109c74:	08109d5b 	.word	0x08109d5b
 8109c78:	08109d5b 	.word	0x08109d5b
 8109c7c:	08109d07 	.word	0x08109d07
 8109c80:	08109d5b 	.word	0x08109d5b
 8109c84:	08109d5b 	.word	0x08109d5b
 8109c88:	08109d5b 	.word	0x08109d5b
 8109c8c:	08109d17 	.word	0x08109d17
 8109c90:	08109d5b 	.word	0x08109d5b
 8109c94:	08109d5b 	.word	0x08109d5b
 8109c98:	08109d5b 	.word	0x08109d5b
 8109c9c:	08109d5b 	.word	0x08109d5b
 8109ca0:	08109d5b 	.word	0x08109d5b
 8109ca4:	08109d5b 	.word	0x08109d5b
 8109ca8:	08109d5b 	.word	0x08109d5b
 8109cac:	08109d27 	.word	0x08109d27
 8109cb0:	08109d5b 	.word	0x08109d5b
 8109cb4:	08109d5b 	.word	0x08109d5b
 8109cb8:	08109d5b 	.word	0x08109d5b
 8109cbc:	08109d5b 	.word	0x08109d5b
 8109cc0:	08109d5b 	.word	0x08109d5b
 8109cc4:	08109d5b 	.word	0x08109d5b
 8109cc8:	08109d5b 	.word	0x08109d5b
 8109ccc:	08109d5b 	.word	0x08109d5b
 8109cd0:	08109d5b 	.word	0x08109d5b
 8109cd4:	08109d5b 	.word	0x08109d5b
 8109cd8:	08109d5b 	.word	0x08109d5b
 8109cdc:	08109d5b 	.word	0x08109d5b
 8109ce0:	08109d5b 	.word	0x08109d5b
 8109ce4:	08109d5b 	.word	0x08109d5b
 8109ce8:	08109d5b 	.word	0x08109d5b
 8109cec:	08109d4d 	.word	0x08109d4d
 8109cf0:	2b40      	cmp	r3, #64	; 0x40
 8109cf2:	d02e      	beq.n	8109d52 <UART_SetConfig+0x8aa>
 8109cf4:	e031      	b.n	8109d5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109cf6:	f7fb ff11 	bl	8105b1c <HAL_RCC_GetPCLK1Freq>
 8109cfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109cfc:	e033      	b.n	8109d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109cfe:	f7fb ff23 	bl	8105b48 <HAL_RCC_GetPCLK2Freq>
 8109d02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109d04:	e02f      	b.n	8109d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109d0a:	4618      	mov	r0, r3
 8109d0c:	f7fd fb60 	bl	81073d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d14:	e027      	b.n	8109d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109d16:	f107 0318 	add.w	r3, r7, #24
 8109d1a:	4618      	mov	r0, r3
 8109d1c:	f7fd fcac 	bl	8107678 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109d20:	69fb      	ldr	r3, [r7, #28]
 8109d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d24:	e01f      	b.n	8109d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109d26:	4b2d      	ldr	r3, [pc, #180]	; (8109ddc <UART_SetConfig+0x934>)
 8109d28:	681b      	ldr	r3, [r3, #0]
 8109d2a:	f003 0320 	and.w	r3, r3, #32
 8109d2e:	2b00      	cmp	r3, #0
 8109d30:	d009      	beq.n	8109d46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109d32:	4b2a      	ldr	r3, [pc, #168]	; (8109ddc <UART_SetConfig+0x934>)
 8109d34:	681b      	ldr	r3, [r3, #0]
 8109d36:	08db      	lsrs	r3, r3, #3
 8109d38:	f003 0303 	and.w	r3, r3, #3
 8109d3c:	4a24      	ldr	r2, [pc, #144]	; (8109dd0 <UART_SetConfig+0x928>)
 8109d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8109d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109d44:	e00f      	b.n	8109d66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8109d46:	4b22      	ldr	r3, [pc, #136]	; (8109dd0 <UART_SetConfig+0x928>)
 8109d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d4a:	e00c      	b.n	8109d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109d4c:	4b21      	ldr	r3, [pc, #132]	; (8109dd4 <UART_SetConfig+0x92c>)
 8109d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d50:	e009      	b.n	8109d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d58:	e005      	b.n	8109d66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8109d5a:	2300      	movs	r3, #0
 8109d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109d5e:	2301      	movs	r3, #1
 8109d60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109d64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8109d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109d68:	2b00      	cmp	r3, #0
 8109d6a:	f000 80e7 	beq.w	8109f3c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109d6e:	697b      	ldr	r3, [r7, #20]
 8109d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109d72:	4a19      	ldr	r2, [pc, #100]	; (8109dd8 <UART_SetConfig+0x930>)
 8109d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109d78:	461a      	mov	r2, r3
 8109d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8109d80:	005a      	lsls	r2, r3, #1
 8109d82:	697b      	ldr	r3, [r7, #20]
 8109d84:	685b      	ldr	r3, [r3, #4]
 8109d86:	085b      	lsrs	r3, r3, #1
 8109d88:	441a      	add	r2, r3
 8109d8a:	697b      	ldr	r3, [r7, #20]
 8109d8c:	685b      	ldr	r3, [r3, #4]
 8109d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8109d92:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109d96:	2b0f      	cmp	r3, #15
 8109d98:	d916      	bls.n	8109dc8 <UART_SetConfig+0x920>
 8109d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109da0:	d212      	bcs.n	8109dc8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8109da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109da4:	b29b      	uxth	r3, r3
 8109da6:	f023 030f 	bic.w	r3, r3, #15
 8109daa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8109dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109dae:	085b      	lsrs	r3, r3, #1
 8109db0:	b29b      	uxth	r3, r3
 8109db2:	f003 0307 	and.w	r3, r3, #7
 8109db6:	b29a      	uxth	r2, r3
 8109db8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8109dba:	4313      	orrs	r3, r2
 8109dbc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8109dbe:	697b      	ldr	r3, [r7, #20]
 8109dc0:	681b      	ldr	r3, [r3, #0]
 8109dc2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8109dc4:	60da      	str	r2, [r3, #12]
 8109dc6:	e0b9      	b.n	8109f3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109dc8:	2301      	movs	r3, #1
 8109dca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109dce:	e0b5      	b.n	8109f3c <UART_SetConfig+0xa94>
 8109dd0:	03d09000 	.word	0x03d09000
 8109dd4:	003d0900 	.word	0x003d0900
 8109dd8:	0810b464 	.word	0x0810b464
 8109ddc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8109de0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109de4:	2b20      	cmp	r3, #32
 8109de6:	dc49      	bgt.n	8109e7c <UART_SetConfig+0x9d4>
 8109de8:	2b00      	cmp	r3, #0
 8109dea:	db7c      	blt.n	8109ee6 <UART_SetConfig+0xa3e>
 8109dec:	2b20      	cmp	r3, #32
 8109dee:	d87a      	bhi.n	8109ee6 <UART_SetConfig+0xa3e>
 8109df0:	a201      	add	r2, pc, #4	; (adr r2, 8109df8 <UART_SetConfig+0x950>)
 8109df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109df6:	bf00      	nop
 8109df8:	08109e83 	.word	0x08109e83
 8109dfc:	08109e8b 	.word	0x08109e8b
 8109e00:	08109ee7 	.word	0x08109ee7
 8109e04:	08109ee7 	.word	0x08109ee7
 8109e08:	08109e93 	.word	0x08109e93
 8109e0c:	08109ee7 	.word	0x08109ee7
 8109e10:	08109ee7 	.word	0x08109ee7
 8109e14:	08109ee7 	.word	0x08109ee7
 8109e18:	08109ea3 	.word	0x08109ea3
 8109e1c:	08109ee7 	.word	0x08109ee7
 8109e20:	08109ee7 	.word	0x08109ee7
 8109e24:	08109ee7 	.word	0x08109ee7
 8109e28:	08109ee7 	.word	0x08109ee7
 8109e2c:	08109ee7 	.word	0x08109ee7
 8109e30:	08109ee7 	.word	0x08109ee7
 8109e34:	08109ee7 	.word	0x08109ee7
 8109e38:	08109eb3 	.word	0x08109eb3
 8109e3c:	08109ee7 	.word	0x08109ee7
 8109e40:	08109ee7 	.word	0x08109ee7
 8109e44:	08109ee7 	.word	0x08109ee7
 8109e48:	08109ee7 	.word	0x08109ee7
 8109e4c:	08109ee7 	.word	0x08109ee7
 8109e50:	08109ee7 	.word	0x08109ee7
 8109e54:	08109ee7 	.word	0x08109ee7
 8109e58:	08109ee7 	.word	0x08109ee7
 8109e5c:	08109ee7 	.word	0x08109ee7
 8109e60:	08109ee7 	.word	0x08109ee7
 8109e64:	08109ee7 	.word	0x08109ee7
 8109e68:	08109ee7 	.word	0x08109ee7
 8109e6c:	08109ee7 	.word	0x08109ee7
 8109e70:	08109ee7 	.word	0x08109ee7
 8109e74:	08109ee7 	.word	0x08109ee7
 8109e78:	08109ed9 	.word	0x08109ed9
 8109e7c:	2b40      	cmp	r3, #64	; 0x40
 8109e7e:	d02e      	beq.n	8109ede <UART_SetConfig+0xa36>
 8109e80:	e031      	b.n	8109ee6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109e82:	f7fb fe4b 	bl	8105b1c <HAL_RCC_GetPCLK1Freq>
 8109e86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109e88:	e033      	b.n	8109ef2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109e8a:	f7fb fe5d 	bl	8105b48 <HAL_RCC_GetPCLK2Freq>
 8109e8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109e90:	e02f      	b.n	8109ef2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109e96:	4618      	mov	r0, r3
 8109e98:	f7fd fa9a 	bl	81073d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109ea0:	e027      	b.n	8109ef2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109ea2:	f107 0318 	add.w	r3, r7, #24
 8109ea6:	4618      	mov	r0, r3
 8109ea8:	f7fd fbe6 	bl	8107678 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109eac:	69fb      	ldr	r3, [r7, #28]
 8109eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109eb0:	e01f      	b.n	8109ef2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109eb2:	4b2d      	ldr	r3, [pc, #180]	; (8109f68 <UART_SetConfig+0xac0>)
 8109eb4:	681b      	ldr	r3, [r3, #0]
 8109eb6:	f003 0320 	and.w	r3, r3, #32
 8109eba:	2b00      	cmp	r3, #0
 8109ebc:	d009      	beq.n	8109ed2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109ebe:	4b2a      	ldr	r3, [pc, #168]	; (8109f68 <UART_SetConfig+0xac0>)
 8109ec0:	681b      	ldr	r3, [r3, #0]
 8109ec2:	08db      	lsrs	r3, r3, #3
 8109ec4:	f003 0303 	and.w	r3, r3, #3
 8109ec8:	4a28      	ldr	r2, [pc, #160]	; (8109f6c <UART_SetConfig+0xac4>)
 8109eca:	fa22 f303 	lsr.w	r3, r2, r3
 8109ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109ed0:	e00f      	b.n	8109ef2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8109ed2:	4b26      	ldr	r3, [pc, #152]	; (8109f6c <UART_SetConfig+0xac4>)
 8109ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109ed6:	e00c      	b.n	8109ef2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109ed8:	4b25      	ldr	r3, [pc, #148]	; (8109f70 <UART_SetConfig+0xac8>)
 8109eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109edc:	e009      	b.n	8109ef2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109ee4:	e005      	b.n	8109ef2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8109ee6:	2300      	movs	r3, #0
 8109ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109eea:	2301      	movs	r3, #1
 8109eec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109ef0:	bf00      	nop
    }

    if (pclk != 0U)
 8109ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109ef4:	2b00      	cmp	r3, #0
 8109ef6:	d021      	beq.n	8109f3c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109ef8:	697b      	ldr	r3, [r7, #20]
 8109efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109efc:	4a1d      	ldr	r2, [pc, #116]	; (8109f74 <UART_SetConfig+0xacc>)
 8109efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109f02:	461a      	mov	r2, r3
 8109f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109f06:	fbb3 f2f2 	udiv	r2, r3, r2
 8109f0a:	697b      	ldr	r3, [r7, #20]
 8109f0c:	685b      	ldr	r3, [r3, #4]
 8109f0e:	085b      	lsrs	r3, r3, #1
 8109f10:	441a      	add	r2, r3
 8109f12:	697b      	ldr	r3, [r7, #20]
 8109f14:	685b      	ldr	r3, [r3, #4]
 8109f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8109f1a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109f1e:	2b0f      	cmp	r3, #15
 8109f20:	d909      	bls.n	8109f36 <UART_SetConfig+0xa8e>
 8109f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109f28:	d205      	bcs.n	8109f36 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8109f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109f2c:	b29a      	uxth	r2, r3
 8109f2e:	697b      	ldr	r3, [r7, #20]
 8109f30:	681b      	ldr	r3, [r3, #0]
 8109f32:	60da      	str	r2, [r3, #12]
 8109f34:	e002      	b.n	8109f3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109f36:	2301      	movs	r3, #1
 8109f38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8109f3c:	697b      	ldr	r3, [r7, #20]
 8109f3e:	2201      	movs	r2, #1
 8109f40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8109f44:	697b      	ldr	r3, [r7, #20]
 8109f46:	2201      	movs	r2, #1
 8109f48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8109f4c:	697b      	ldr	r3, [r7, #20]
 8109f4e:	2200      	movs	r2, #0
 8109f50:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8109f52:	697b      	ldr	r3, [r7, #20]
 8109f54:	2200      	movs	r2, #0
 8109f56:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8109f58:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8109f5c:	4618      	mov	r0, r3
 8109f5e:	3748      	adds	r7, #72	; 0x48
 8109f60:	46bd      	mov	sp, r7
 8109f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8109f66:	bf00      	nop
 8109f68:	58024400 	.word	0x58024400
 8109f6c:	03d09000 	.word	0x03d09000
 8109f70:	003d0900 	.word	0x003d0900
 8109f74:	0810b464 	.word	0x0810b464

08109f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109f78:	b480      	push	{r7}
 8109f7a:	b083      	sub	sp, #12
 8109f7c:	af00      	add	r7, sp, #0
 8109f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109f80:	687b      	ldr	r3, [r7, #4]
 8109f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f84:	f003 0301 	and.w	r3, r3, #1
 8109f88:	2b00      	cmp	r3, #0
 8109f8a:	d00a      	beq.n	8109fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8109f8c:	687b      	ldr	r3, [r7, #4]
 8109f8e:	681b      	ldr	r3, [r3, #0]
 8109f90:	685b      	ldr	r3, [r3, #4]
 8109f92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8109f96:	687b      	ldr	r3, [r7, #4]
 8109f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f9a:	687b      	ldr	r3, [r7, #4]
 8109f9c:	681b      	ldr	r3, [r3, #0]
 8109f9e:	430a      	orrs	r2, r1
 8109fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8109fa2:	687b      	ldr	r3, [r7, #4]
 8109fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109fa6:	f003 0302 	and.w	r3, r3, #2
 8109faa:	2b00      	cmp	r3, #0
 8109fac:	d00a      	beq.n	8109fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8109fae:	687b      	ldr	r3, [r7, #4]
 8109fb0:	681b      	ldr	r3, [r3, #0]
 8109fb2:	685b      	ldr	r3, [r3, #4]
 8109fb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8109fb8:	687b      	ldr	r3, [r7, #4]
 8109fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8109fbc:	687b      	ldr	r3, [r7, #4]
 8109fbe:	681b      	ldr	r3, [r3, #0]
 8109fc0:	430a      	orrs	r2, r1
 8109fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8109fc4:	687b      	ldr	r3, [r7, #4]
 8109fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109fc8:	f003 0304 	and.w	r3, r3, #4
 8109fcc:	2b00      	cmp	r3, #0
 8109fce:	d00a      	beq.n	8109fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8109fd0:	687b      	ldr	r3, [r7, #4]
 8109fd2:	681b      	ldr	r3, [r3, #0]
 8109fd4:	685b      	ldr	r3, [r3, #4]
 8109fd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8109fda:	687b      	ldr	r3, [r7, #4]
 8109fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109fde:	687b      	ldr	r3, [r7, #4]
 8109fe0:	681b      	ldr	r3, [r3, #0]
 8109fe2:	430a      	orrs	r2, r1
 8109fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8109fe6:	687b      	ldr	r3, [r7, #4]
 8109fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109fea:	f003 0308 	and.w	r3, r3, #8
 8109fee:	2b00      	cmp	r3, #0
 8109ff0:	d00a      	beq.n	810a008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8109ff2:	687b      	ldr	r3, [r7, #4]
 8109ff4:	681b      	ldr	r3, [r3, #0]
 8109ff6:	685b      	ldr	r3, [r3, #4]
 8109ff8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8109ffc:	687b      	ldr	r3, [r7, #4]
 8109ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a000:	687b      	ldr	r3, [r7, #4]
 810a002:	681b      	ldr	r3, [r3, #0]
 810a004:	430a      	orrs	r2, r1
 810a006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810a008:	687b      	ldr	r3, [r7, #4]
 810a00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a00c:	f003 0310 	and.w	r3, r3, #16
 810a010:	2b00      	cmp	r3, #0
 810a012:	d00a      	beq.n	810a02a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810a014:	687b      	ldr	r3, [r7, #4]
 810a016:	681b      	ldr	r3, [r3, #0]
 810a018:	689b      	ldr	r3, [r3, #8]
 810a01a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810a01e:	687b      	ldr	r3, [r7, #4]
 810a020:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810a022:	687b      	ldr	r3, [r7, #4]
 810a024:	681b      	ldr	r3, [r3, #0]
 810a026:	430a      	orrs	r2, r1
 810a028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810a02a:	687b      	ldr	r3, [r7, #4]
 810a02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a02e:	f003 0320 	and.w	r3, r3, #32
 810a032:	2b00      	cmp	r3, #0
 810a034:	d00a      	beq.n	810a04c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810a036:	687b      	ldr	r3, [r7, #4]
 810a038:	681b      	ldr	r3, [r3, #0]
 810a03a:	689b      	ldr	r3, [r3, #8]
 810a03c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810a040:	687b      	ldr	r3, [r7, #4]
 810a042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810a044:	687b      	ldr	r3, [r7, #4]
 810a046:	681b      	ldr	r3, [r3, #0]
 810a048:	430a      	orrs	r2, r1
 810a04a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810a04c:	687b      	ldr	r3, [r7, #4]
 810a04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a054:	2b00      	cmp	r3, #0
 810a056:	d01a      	beq.n	810a08e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810a058:	687b      	ldr	r3, [r7, #4]
 810a05a:	681b      	ldr	r3, [r3, #0]
 810a05c:	685b      	ldr	r3, [r3, #4]
 810a05e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810a062:	687b      	ldr	r3, [r7, #4]
 810a064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810a066:	687b      	ldr	r3, [r7, #4]
 810a068:	681b      	ldr	r3, [r3, #0]
 810a06a:	430a      	orrs	r2, r1
 810a06c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810a06e:	687b      	ldr	r3, [r7, #4]
 810a070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a076:	d10a      	bne.n	810a08e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a078:	687b      	ldr	r3, [r7, #4]
 810a07a:	681b      	ldr	r3, [r3, #0]
 810a07c:	685b      	ldr	r3, [r3, #4]
 810a07e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810a082:	687b      	ldr	r3, [r7, #4]
 810a084:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810a086:	687b      	ldr	r3, [r7, #4]
 810a088:	681b      	ldr	r3, [r3, #0]
 810a08a:	430a      	orrs	r2, r1
 810a08c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a08e:	687b      	ldr	r3, [r7, #4]
 810a090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a096:	2b00      	cmp	r3, #0
 810a098:	d00a      	beq.n	810a0b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a09a:	687b      	ldr	r3, [r7, #4]
 810a09c:	681b      	ldr	r3, [r3, #0]
 810a09e:	685b      	ldr	r3, [r3, #4]
 810a0a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810a0a4:	687b      	ldr	r3, [r7, #4]
 810a0a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810a0a8:	687b      	ldr	r3, [r7, #4]
 810a0aa:	681b      	ldr	r3, [r3, #0]
 810a0ac:	430a      	orrs	r2, r1
 810a0ae:	605a      	str	r2, [r3, #4]
  }
}
 810a0b0:	bf00      	nop
 810a0b2:	370c      	adds	r7, #12
 810a0b4:	46bd      	mov	sp, r7
 810a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a0ba:	4770      	bx	lr

0810a0bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a0bc:	b580      	push	{r7, lr}
 810a0be:	b086      	sub	sp, #24
 810a0c0:	af02      	add	r7, sp, #8
 810a0c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a0c4:	687b      	ldr	r3, [r7, #4]
 810a0c6:	2200      	movs	r2, #0
 810a0c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810a0cc:	f7f9 f8ca 	bl	8103264 <HAL_GetTick>
 810a0d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a0d2:	687b      	ldr	r3, [r7, #4]
 810a0d4:	681b      	ldr	r3, [r3, #0]
 810a0d6:	681b      	ldr	r3, [r3, #0]
 810a0d8:	f003 0308 	and.w	r3, r3, #8
 810a0dc:	2b08      	cmp	r3, #8
 810a0de:	d10e      	bne.n	810a0fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a0e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a0e4:	9300      	str	r3, [sp, #0]
 810a0e6:	68fb      	ldr	r3, [r7, #12]
 810a0e8:	2200      	movs	r2, #0
 810a0ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810a0ee:	6878      	ldr	r0, [r7, #4]
 810a0f0:	f000 f82f 	bl	810a152 <UART_WaitOnFlagUntilTimeout>
 810a0f4:	4603      	mov	r3, r0
 810a0f6:	2b00      	cmp	r3, #0
 810a0f8:	d001      	beq.n	810a0fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a0fa:	2303      	movs	r3, #3
 810a0fc:	e025      	b.n	810a14a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810a0fe:	687b      	ldr	r3, [r7, #4]
 810a100:	681b      	ldr	r3, [r3, #0]
 810a102:	681b      	ldr	r3, [r3, #0]
 810a104:	f003 0304 	and.w	r3, r3, #4
 810a108:	2b04      	cmp	r3, #4
 810a10a:	d10e      	bne.n	810a12a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a10c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a110:	9300      	str	r3, [sp, #0]
 810a112:	68fb      	ldr	r3, [r7, #12]
 810a114:	2200      	movs	r2, #0
 810a116:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810a11a:	6878      	ldr	r0, [r7, #4]
 810a11c:	f000 f819 	bl	810a152 <UART_WaitOnFlagUntilTimeout>
 810a120:	4603      	mov	r3, r0
 810a122:	2b00      	cmp	r3, #0
 810a124:	d001      	beq.n	810a12a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a126:	2303      	movs	r3, #3
 810a128:	e00f      	b.n	810a14a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810a12a:	687b      	ldr	r3, [r7, #4]
 810a12c:	2220      	movs	r2, #32
 810a12e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810a132:	687b      	ldr	r3, [r7, #4]
 810a134:	2220      	movs	r2, #32
 810a136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a13a:	687b      	ldr	r3, [r7, #4]
 810a13c:	2200      	movs	r2, #0
 810a13e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810a140:	687b      	ldr	r3, [r7, #4]
 810a142:	2200      	movs	r2, #0
 810a144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810a148:	2300      	movs	r3, #0
}
 810a14a:	4618      	mov	r0, r3
 810a14c:	3710      	adds	r7, #16
 810a14e:	46bd      	mov	sp, r7
 810a150:	bd80      	pop	{r7, pc}

0810a152 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810a152:	b580      	push	{r7, lr}
 810a154:	b09c      	sub	sp, #112	; 0x70
 810a156:	af00      	add	r7, sp, #0
 810a158:	60f8      	str	r0, [r7, #12]
 810a15a:	60b9      	str	r1, [r7, #8]
 810a15c:	603b      	str	r3, [r7, #0]
 810a15e:	4613      	mov	r3, r2
 810a160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a162:	e0a9      	b.n	810a2b8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810a164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810a166:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a16a:	f000 80a5 	beq.w	810a2b8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810a16e:	f7f9 f879 	bl	8103264 <HAL_GetTick>
 810a172:	4602      	mov	r2, r0
 810a174:	683b      	ldr	r3, [r7, #0]
 810a176:	1ad3      	subs	r3, r2, r3
 810a178:	6fba      	ldr	r2, [r7, #120]	; 0x78
 810a17a:	429a      	cmp	r2, r3
 810a17c:	d302      	bcc.n	810a184 <UART_WaitOnFlagUntilTimeout+0x32>
 810a17e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810a180:	2b00      	cmp	r3, #0
 810a182:	d140      	bne.n	810a206 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810a184:	68fb      	ldr	r3, [r7, #12]
 810a186:	681b      	ldr	r3, [r3, #0]
 810a188:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810a18c:	e853 3f00 	ldrex	r3, [r3]
 810a190:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810a192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810a194:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810a198:	667b      	str	r3, [r7, #100]	; 0x64
 810a19a:	68fb      	ldr	r3, [r7, #12]
 810a19c:	681b      	ldr	r3, [r3, #0]
 810a19e:	461a      	mov	r2, r3
 810a1a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810a1a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 810a1a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a1a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810a1a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810a1aa:	e841 2300 	strex	r3, r2, [r1]
 810a1ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 810a1b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810a1b2:	2b00      	cmp	r3, #0
 810a1b4:	d1e6      	bne.n	810a184 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a1b6:	68fb      	ldr	r3, [r7, #12]
 810a1b8:	681b      	ldr	r3, [r3, #0]
 810a1ba:	3308      	adds	r3, #8
 810a1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a1c0:	e853 3f00 	ldrex	r3, [r3]
 810a1c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810a1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a1c8:	f023 0301 	bic.w	r3, r3, #1
 810a1cc:	663b      	str	r3, [r7, #96]	; 0x60
 810a1ce:	68fb      	ldr	r3, [r7, #12]
 810a1d0:	681b      	ldr	r3, [r3, #0]
 810a1d2:	3308      	adds	r3, #8
 810a1d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810a1d6:	64ba      	str	r2, [r7, #72]	; 0x48
 810a1d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a1da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810a1dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810a1de:	e841 2300 	strex	r3, r2, [r1]
 810a1e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 810a1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810a1e6:	2b00      	cmp	r3, #0
 810a1e8:	d1e5      	bne.n	810a1b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810a1ea:	68fb      	ldr	r3, [r7, #12]
 810a1ec:	2220      	movs	r2, #32
 810a1ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810a1f2:	68fb      	ldr	r3, [r7, #12]
 810a1f4:	2220      	movs	r2, #32
 810a1f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810a1fa:	68fb      	ldr	r3, [r7, #12]
 810a1fc:	2200      	movs	r2, #0
 810a1fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810a202:	2303      	movs	r3, #3
 810a204:	e069      	b.n	810a2da <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810a206:	68fb      	ldr	r3, [r7, #12]
 810a208:	681b      	ldr	r3, [r3, #0]
 810a20a:	681b      	ldr	r3, [r3, #0]
 810a20c:	f003 0304 	and.w	r3, r3, #4
 810a210:	2b00      	cmp	r3, #0
 810a212:	d051      	beq.n	810a2b8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810a214:	68fb      	ldr	r3, [r7, #12]
 810a216:	681b      	ldr	r3, [r3, #0]
 810a218:	69db      	ldr	r3, [r3, #28]
 810a21a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810a21e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a222:	d149      	bne.n	810a2b8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810a224:	68fb      	ldr	r3, [r7, #12]
 810a226:	681b      	ldr	r3, [r3, #0]
 810a228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810a22c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810a22e:	68fb      	ldr	r3, [r7, #12]
 810a230:	681b      	ldr	r3, [r3, #0]
 810a232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a236:	e853 3f00 	ldrex	r3, [r3]
 810a23a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a23e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810a242:	66fb      	str	r3, [r7, #108]	; 0x6c
 810a244:	68fb      	ldr	r3, [r7, #12]
 810a246:	681b      	ldr	r3, [r3, #0]
 810a248:	461a      	mov	r2, r3
 810a24a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810a24c:	637b      	str	r3, [r7, #52]	; 0x34
 810a24e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810a252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810a254:	e841 2300 	strex	r3, r2, [r1]
 810a258:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810a25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a25c:	2b00      	cmp	r3, #0
 810a25e:	d1e6      	bne.n	810a22e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a260:	68fb      	ldr	r3, [r7, #12]
 810a262:	681b      	ldr	r3, [r3, #0]
 810a264:	3308      	adds	r3, #8
 810a266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a268:	697b      	ldr	r3, [r7, #20]
 810a26a:	e853 3f00 	ldrex	r3, [r3]
 810a26e:	613b      	str	r3, [r7, #16]
   return(result);
 810a270:	693b      	ldr	r3, [r7, #16]
 810a272:	f023 0301 	bic.w	r3, r3, #1
 810a276:	66bb      	str	r3, [r7, #104]	; 0x68
 810a278:	68fb      	ldr	r3, [r7, #12]
 810a27a:	681b      	ldr	r3, [r3, #0]
 810a27c:	3308      	adds	r3, #8
 810a27e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 810a280:	623a      	str	r2, [r7, #32]
 810a282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a284:	69f9      	ldr	r1, [r7, #28]
 810a286:	6a3a      	ldr	r2, [r7, #32]
 810a288:	e841 2300 	strex	r3, r2, [r1]
 810a28c:	61bb      	str	r3, [r7, #24]
   return(result);
 810a28e:	69bb      	ldr	r3, [r7, #24]
 810a290:	2b00      	cmp	r3, #0
 810a292:	d1e5      	bne.n	810a260 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 810a294:	68fb      	ldr	r3, [r7, #12]
 810a296:	2220      	movs	r2, #32
 810a298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810a29c:	68fb      	ldr	r3, [r7, #12]
 810a29e:	2220      	movs	r2, #32
 810a2a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810a2a4:	68fb      	ldr	r3, [r7, #12]
 810a2a6:	2220      	movs	r2, #32
 810a2a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a2ac:	68fb      	ldr	r3, [r7, #12]
 810a2ae:	2200      	movs	r2, #0
 810a2b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810a2b4:	2303      	movs	r3, #3
 810a2b6:	e010      	b.n	810a2da <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a2b8:	68fb      	ldr	r3, [r7, #12]
 810a2ba:	681b      	ldr	r3, [r3, #0]
 810a2bc:	69da      	ldr	r2, [r3, #28]
 810a2be:	68bb      	ldr	r3, [r7, #8]
 810a2c0:	4013      	ands	r3, r2
 810a2c2:	68ba      	ldr	r2, [r7, #8]
 810a2c4:	429a      	cmp	r2, r3
 810a2c6:	bf0c      	ite	eq
 810a2c8:	2301      	moveq	r3, #1
 810a2ca:	2300      	movne	r3, #0
 810a2cc:	b2db      	uxtb	r3, r3
 810a2ce:	461a      	mov	r2, r3
 810a2d0:	79fb      	ldrb	r3, [r7, #7]
 810a2d2:	429a      	cmp	r2, r3
 810a2d4:	f43f af46 	beq.w	810a164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810a2d8:	2300      	movs	r3, #0
}
 810a2da:	4618      	mov	r0, r3
 810a2dc:	3770      	adds	r7, #112	; 0x70
 810a2de:	46bd      	mov	sp, r7
 810a2e0:	bd80      	pop	{r7, pc}

0810a2e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810a2e2:	b480      	push	{r7}
 810a2e4:	b085      	sub	sp, #20
 810a2e6:	af00      	add	r7, sp, #0
 810a2e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a2ea:	687b      	ldr	r3, [r7, #4]
 810a2ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a2f0:	2b01      	cmp	r3, #1
 810a2f2:	d101      	bne.n	810a2f8 <HAL_UARTEx_DisableFifoMode+0x16>
 810a2f4:	2302      	movs	r3, #2
 810a2f6:	e027      	b.n	810a348 <HAL_UARTEx_DisableFifoMode+0x66>
 810a2f8:	687b      	ldr	r3, [r7, #4]
 810a2fa:	2201      	movs	r2, #1
 810a2fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810a300:	687b      	ldr	r3, [r7, #4]
 810a302:	2224      	movs	r2, #36	; 0x24
 810a304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a308:	687b      	ldr	r3, [r7, #4]
 810a30a:	681b      	ldr	r3, [r3, #0]
 810a30c:	681b      	ldr	r3, [r3, #0]
 810a30e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a310:	687b      	ldr	r3, [r7, #4]
 810a312:	681b      	ldr	r3, [r3, #0]
 810a314:	681a      	ldr	r2, [r3, #0]
 810a316:	687b      	ldr	r3, [r7, #4]
 810a318:	681b      	ldr	r3, [r3, #0]
 810a31a:	f022 0201 	bic.w	r2, r2, #1
 810a31e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810a320:	68fb      	ldr	r3, [r7, #12]
 810a322:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810a326:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810a328:	687b      	ldr	r3, [r7, #4]
 810a32a:	2200      	movs	r2, #0
 810a32c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a32e:	687b      	ldr	r3, [r7, #4]
 810a330:	681b      	ldr	r3, [r3, #0]
 810a332:	68fa      	ldr	r2, [r7, #12]
 810a334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a336:	687b      	ldr	r3, [r7, #4]
 810a338:	2220      	movs	r2, #32
 810a33a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a33e:	687b      	ldr	r3, [r7, #4]
 810a340:	2200      	movs	r2, #0
 810a342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810a346:	2300      	movs	r3, #0
}
 810a348:	4618      	mov	r0, r3
 810a34a:	3714      	adds	r7, #20
 810a34c:	46bd      	mov	sp, r7
 810a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a352:	4770      	bx	lr

0810a354 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810a354:	b580      	push	{r7, lr}
 810a356:	b084      	sub	sp, #16
 810a358:	af00      	add	r7, sp, #0
 810a35a:	6078      	str	r0, [r7, #4]
 810a35c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a35e:	687b      	ldr	r3, [r7, #4]
 810a360:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a364:	2b01      	cmp	r3, #1
 810a366:	d101      	bne.n	810a36c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810a368:	2302      	movs	r3, #2
 810a36a:	e02d      	b.n	810a3c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810a36c:	687b      	ldr	r3, [r7, #4]
 810a36e:	2201      	movs	r2, #1
 810a370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810a374:	687b      	ldr	r3, [r7, #4]
 810a376:	2224      	movs	r2, #36	; 0x24
 810a378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a37c:	687b      	ldr	r3, [r7, #4]
 810a37e:	681b      	ldr	r3, [r3, #0]
 810a380:	681b      	ldr	r3, [r3, #0]
 810a382:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a384:	687b      	ldr	r3, [r7, #4]
 810a386:	681b      	ldr	r3, [r3, #0]
 810a388:	681a      	ldr	r2, [r3, #0]
 810a38a:	687b      	ldr	r3, [r7, #4]
 810a38c:	681b      	ldr	r3, [r3, #0]
 810a38e:	f022 0201 	bic.w	r2, r2, #1
 810a392:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810a394:	687b      	ldr	r3, [r7, #4]
 810a396:	681b      	ldr	r3, [r3, #0]
 810a398:	689b      	ldr	r3, [r3, #8]
 810a39a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810a39e:	687b      	ldr	r3, [r7, #4]
 810a3a0:	681b      	ldr	r3, [r3, #0]
 810a3a2:	683a      	ldr	r2, [r7, #0]
 810a3a4:	430a      	orrs	r2, r1
 810a3a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810a3a8:	6878      	ldr	r0, [r7, #4]
 810a3aa:	f000 f84f 	bl	810a44c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a3ae:	687b      	ldr	r3, [r7, #4]
 810a3b0:	681b      	ldr	r3, [r3, #0]
 810a3b2:	68fa      	ldr	r2, [r7, #12]
 810a3b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a3b6:	687b      	ldr	r3, [r7, #4]
 810a3b8:	2220      	movs	r2, #32
 810a3ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a3be:	687b      	ldr	r3, [r7, #4]
 810a3c0:	2200      	movs	r2, #0
 810a3c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810a3c6:	2300      	movs	r3, #0
}
 810a3c8:	4618      	mov	r0, r3
 810a3ca:	3710      	adds	r7, #16
 810a3cc:	46bd      	mov	sp, r7
 810a3ce:	bd80      	pop	{r7, pc}

0810a3d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810a3d0:	b580      	push	{r7, lr}
 810a3d2:	b084      	sub	sp, #16
 810a3d4:	af00      	add	r7, sp, #0
 810a3d6:	6078      	str	r0, [r7, #4]
 810a3d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a3da:	687b      	ldr	r3, [r7, #4]
 810a3dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a3e0:	2b01      	cmp	r3, #1
 810a3e2:	d101      	bne.n	810a3e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810a3e4:	2302      	movs	r3, #2
 810a3e6:	e02d      	b.n	810a444 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810a3e8:	687b      	ldr	r3, [r7, #4]
 810a3ea:	2201      	movs	r2, #1
 810a3ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810a3f0:	687b      	ldr	r3, [r7, #4]
 810a3f2:	2224      	movs	r2, #36	; 0x24
 810a3f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a3f8:	687b      	ldr	r3, [r7, #4]
 810a3fa:	681b      	ldr	r3, [r3, #0]
 810a3fc:	681b      	ldr	r3, [r3, #0]
 810a3fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a400:	687b      	ldr	r3, [r7, #4]
 810a402:	681b      	ldr	r3, [r3, #0]
 810a404:	681a      	ldr	r2, [r3, #0]
 810a406:	687b      	ldr	r3, [r7, #4]
 810a408:	681b      	ldr	r3, [r3, #0]
 810a40a:	f022 0201 	bic.w	r2, r2, #1
 810a40e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810a410:	687b      	ldr	r3, [r7, #4]
 810a412:	681b      	ldr	r3, [r3, #0]
 810a414:	689b      	ldr	r3, [r3, #8]
 810a416:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810a41a:	687b      	ldr	r3, [r7, #4]
 810a41c:	681b      	ldr	r3, [r3, #0]
 810a41e:	683a      	ldr	r2, [r7, #0]
 810a420:	430a      	orrs	r2, r1
 810a422:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810a424:	6878      	ldr	r0, [r7, #4]
 810a426:	f000 f811 	bl	810a44c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a42a:	687b      	ldr	r3, [r7, #4]
 810a42c:	681b      	ldr	r3, [r3, #0]
 810a42e:	68fa      	ldr	r2, [r7, #12]
 810a430:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a432:	687b      	ldr	r3, [r7, #4]
 810a434:	2220      	movs	r2, #32
 810a436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a43a:	687b      	ldr	r3, [r7, #4]
 810a43c:	2200      	movs	r2, #0
 810a43e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810a442:	2300      	movs	r3, #0
}
 810a444:	4618      	mov	r0, r3
 810a446:	3710      	adds	r7, #16
 810a448:	46bd      	mov	sp, r7
 810a44a:	bd80      	pop	{r7, pc}

0810a44c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810a44c:	b480      	push	{r7}
 810a44e:	b085      	sub	sp, #20
 810a450:	af00      	add	r7, sp, #0
 810a452:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810a454:	687b      	ldr	r3, [r7, #4]
 810a456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a458:	2b00      	cmp	r3, #0
 810a45a:	d108      	bne.n	810a46e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810a45c:	687b      	ldr	r3, [r7, #4]
 810a45e:	2201      	movs	r2, #1
 810a460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810a464:	687b      	ldr	r3, [r7, #4]
 810a466:	2201      	movs	r2, #1
 810a468:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810a46c:	e031      	b.n	810a4d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810a46e:	2310      	movs	r3, #16
 810a470:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810a472:	2310      	movs	r3, #16
 810a474:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810a476:	687b      	ldr	r3, [r7, #4]
 810a478:	681b      	ldr	r3, [r3, #0]
 810a47a:	689b      	ldr	r3, [r3, #8]
 810a47c:	0e5b      	lsrs	r3, r3, #25
 810a47e:	b2db      	uxtb	r3, r3
 810a480:	f003 0307 	and.w	r3, r3, #7
 810a484:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810a486:	687b      	ldr	r3, [r7, #4]
 810a488:	681b      	ldr	r3, [r3, #0]
 810a48a:	689b      	ldr	r3, [r3, #8]
 810a48c:	0f5b      	lsrs	r3, r3, #29
 810a48e:	b2db      	uxtb	r3, r3
 810a490:	f003 0307 	and.w	r3, r3, #7
 810a494:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810a496:	7bbb      	ldrb	r3, [r7, #14]
 810a498:	7b3a      	ldrb	r2, [r7, #12]
 810a49a:	4911      	ldr	r1, [pc, #68]	; (810a4e0 <UARTEx_SetNbDataToProcess+0x94>)
 810a49c:	5c8a      	ldrb	r2, [r1, r2]
 810a49e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810a4a2:	7b3a      	ldrb	r2, [r7, #12]
 810a4a4:	490f      	ldr	r1, [pc, #60]	; (810a4e4 <UARTEx_SetNbDataToProcess+0x98>)
 810a4a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810a4a8:	fb93 f3f2 	sdiv	r3, r3, r2
 810a4ac:	b29a      	uxth	r2, r3
 810a4ae:	687b      	ldr	r3, [r7, #4]
 810a4b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810a4b4:	7bfb      	ldrb	r3, [r7, #15]
 810a4b6:	7b7a      	ldrb	r2, [r7, #13]
 810a4b8:	4909      	ldr	r1, [pc, #36]	; (810a4e0 <UARTEx_SetNbDataToProcess+0x94>)
 810a4ba:	5c8a      	ldrb	r2, [r1, r2]
 810a4bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810a4c0:	7b7a      	ldrb	r2, [r7, #13]
 810a4c2:	4908      	ldr	r1, [pc, #32]	; (810a4e4 <UARTEx_SetNbDataToProcess+0x98>)
 810a4c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810a4c6:	fb93 f3f2 	sdiv	r3, r3, r2
 810a4ca:	b29a      	uxth	r2, r3
 810a4cc:	687b      	ldr	r3, [r7, #4]
 810a4ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810a4d2:	bf00      	nop
 810a4d4:	3714      	adds	r7, #20
 810a4d6:	46bd      	mov	sp, r7
 810a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4dc:	4770      	bx	lr
 810a4de:	bf00      	nop
 810a4e0:	0810b47c 	.word	0x0810b47c
 810a4e4:	0810b484 	.word	0x0810b484

0810a4e8 <__libc_init_array>:
 810a4e8:	b570      	push	{r4, r5, r6, lr}
 810a4ea:	4d0d      	ldr	r5, [pc, #52]	; (810a520 <__libc_init_array+0x38>)
 810a4ec:	4c0d      	ldr	r4, [pc, #52]	; (810a524 <__libc_init_array+0x3c>)
 810a4ee:	1b64      	subs	r4, r4, r5
 810a4f0:	10a4      	asrs	r4, r4, #2
 810a4f2:	2600      	movs	r6, #0
 810a4f4:	42a6      	cmp	r6, r4
 810a4f6:	d109      	bne.n	810a50c <__libc_init_array+0x24>
 810a4f8:	4d0b      	ldr	r5, [pc, #44]	; (810a528 <__libc_init_array+0x40>)
 810a4fa:	4c0c      	ldr	r4, [pc, #48]	; (810a52c <__libc_init_array+0x44>)
 810a4fc:	f000 fc9c 	bl	810ae38 <_init>
 810a500:	1b64      	subs	r4, r4, r5
 810a502:	10a4      	asrs	r4, r4, #2
 810a504:	2600      	movs	r6, #0
 810a506:	42a6      	cmp	r6, r4
 810a508:	d105      	bne.n	810a516 <__libc_init_array+0x2e>
 810a50a:	bd70      	pop	{r4, r5, r6, pc}
 810a50c:	f855 3b04 	ldr.w	r3, [r5], #4
 810a510:	4798      	blx	r3
 810a512:	3601      	adds	r6, #1
 810a514:	e7ee      	b.n	810a4f4 <__libc_init_array+0xc>
 810a516:	f855 3b04 	ldr.w	r3, [r5], #4
 810a51a:	4798      	blx	r3
 810a51c:	3601      	adds	r6, #1
 810a51e:	e7f2      	b.n	810a506 <__libc_init_array+0x1e>
 810a520:	0810b4c8 	.word	0x0810b4c8
 810a524:	0810b4c8 	.word	0x0810b4c8
 810a528:	0810b4c8 	.word	0x0810b4c8
 810a52c:	0810b4cc 	.word	0x0810b4cc

0810a530 <memset>:
 810a530:	4402      	add	r2, r0
 810a532:	4603      	mov	r3, r0
 810a534:	4293      	cmp	r3, r2
 810a536:	d100      	bne.n	810a53a <memset+0xa>
 810a538:	4770      	bx	lr
 810a53a:	f803 1b01 	strb.w	r1, [r3], #1
 810a53e:	e7f9      	b.n	810a534 <memset+0x4>

0810a540 <siprintf>:
 810a540:	b40e      	push	{r1, r2, r3}
 810a542:	b500      	push	{lr}
 810a544:	b09c      	sub	sp, #112	; 0x70
 810a546:	ab1d      	add	r3, sp, #116	; 0x74
 810a548:	9002      	str	r0, [sp, #8]
 810a54a:	9006      	str	r0, [sp, #24]
 810a54c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810a550:	4809      	ldr	r0, [pc, #36]	; (810a578 <siprintf+0x38>)
 810a552:	9107      	str	r1, [sp, #28]
 810a554:	9104      	str	r1, [sp, #16]
 810a556:	4909      	ldr	r1, [pc, #36]	; (810a57c <siprintf+0x3c>)
 810a558:	f853 2b04 	ldr.w	r2, [r3], #4
 810a55c:	9105      	str	r1, [sp, #20]
 810a55e:	6800      	ldr	r0, [r0, #0]
 810a560:	9301      	str	r3, [sp, #4]
 810a562:	a902      	add	r1, sp, #8
 810a564:	f000 f868 	bl	810a638 <_svfiprintf_r>
 810a568:	9b02      	ldr	r3, [sp, #8]
 810a56a:	2200      	movs	r2, #0
 810a56c:	701a      	strb	r2, [r3, #0]
 810a56e:	b01c      	add	sp, #112	; 0x70
 810a570:	f85d eb04 	ldr.w	lr, [sp], #4
 810a574:	b003      	add	sp, #12
 810a576:	4770      	bx	lr
 810a578:	10000020 	.word	0x10000020
 810a57c:	ffff0208 	.word	0xffff0208

0810a580 <__ssputs_r>:
 810a580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a584:	688e      	ldr	r6, [r1, #8]
 810a586:	429e      	cmp	r6, r3
 810a588:	4682      	mov	sl, r0
 810a58a:	460c      	mov	r4, r1
 810a58c:	4690      	mov	r8, r2
 810a58e:	461f      	mov	r7, r3
 810a590:	d838      	bhi.n	810a604 <__ssputs_r+0x84>
 810a592:	898a      	ldrh	r2, [r1, #12]
 810a594:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810a598:	d032      	beq.n	810a600 <__ssputs_r+0x80>
 810a59a:	6825      	ldr	r5, [r4, #0]
 810a59c:	6909      	ldr	r1, [r1, #16]
 810a59e:	eba5 0901 	sub.w	r9, r5, r1
 810a5a2:	6965      	ldr	r5, [r4, #20]
 810a5a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810a5a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810a5ac:	3301      	adds	r3, #1
 810a5ae:	444b      	add	r3, r9
 810a5b0:	106d      	asrs	r5, r5, #1
 810a5b2:	429d      	cmp	r5, r3
 810a5b4:	bf38      	it	cc
 810a5b6:	461d      	movcc	r5, r3
 810a5b8:	0553      	lsls	r3, r2, #21
 810a5ba:	d531      	bpl.n	810a620 <__ssputs_r+0xa0>
 810a5bc:	4629      	mov	r1, r5
 810a5be:	f000 fb63 	bl	810ac88 <_malloc_r>
 810a5c2:	4606      	mov	r6, r0
 810a5c4:	b950      	cbnz	r0, 810a5dc <__ssputs_r+0x5c>
 810a5c6:	230c      	movs	r3, #12
 810a5c8:	f8ca 3000 	str.w	r3, [sl]
 810a5cc:	89a3      	ldrh	r3, [r4, #12]
 810a5ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a5d2:	81a3      	strh	r3, [r4, #12]
 810a5d4:	f04f 30ff 	mov.w	r0, #4294967295
 810a5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a5dc:	6921      	ldr	r1, [r4, #16]
 810a5de:	464a      	mov	r2, r9
 810a5e0:	f000 fabe 	bl	810ab60 <memcpy>
 810a5e4:	89a3      	ldrh	r3, [r4, #12]
 810a5e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810a5ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a5ee:	81a3      	strh	r3, [r4, #12]
 810a5f0:	6126      	str	r6, [r4, #16]
 810a5f2:	6165      	str	r5, [r4, #20]
 810a5f4:	444e      	add	r6, r9
 810a5f6:	eba5 0509 	sub.w	r5, r5, r9
 810a5fa:	6026      	str	r6, [r4, #0]
 810a5fc:	60a5      	str	r5, [r4, #8]
 810a5fe:	463e      	mov	r6, r7
 810a600:	42be      	cmp	r6, r7
 810a602:	d900      	bls.n	810a606 <__ssputs_r+0x86>
 810a604:	463e      	mov	r6, r7
 810a606:	6820      	ldr	r0, [r4, #0]
 810a608:	4632      	mov	r2, r6
 810a60a:	4641      	mov	r1, r8
 810a60c:	f000 fab6 	bl	810ab7c <memmove>
 810a610:	68a3      	ldr	r3, [r4, #8]
 810a612:	1b9b      	subs	r3, r3, r6
 810a614:	60a3      	str	r3, [r4, #8]
 810a616:	6823      	ldr	r3, [r4, #0]
 810a618:	4433      	add	r3, r6
 810a61a:	6023      	str	r3, [r4, #0]
 810a61c:	2000      	movs	r0, #0
 810a61e:	e7db      	b.n	810a5d8 <__ssputs_r+0x58>
 810a620:	462a      	mov	r2, r5
 810a622:	f000 fba5 	bl	810ad70 <_realloc_r>
 810a626:	4606      	mov	r6, r0
 810a628:	2800      	cmp	r0, #0
 810a62a:	d1e1      	bne.n	810a5f0 <__ssputs_r+0x70>
 810a62c:	6921      	ldr	r1, [r4, #16]
 810a62e:	4650      	mov	r0, sl
 810a630:	f000 fabe 	bl	810abb0 <_free_r>
 810a634:	e7c7      	b.n	810a5c6 <__ssputs_r+0x46>
	...

0810a638 <_svfiprintf_r>:
 810a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a63c:	4698      	mov	r8, r3
 810a63e:	898b      	ldrh	r3, [r1, #12]
 810a640:	061b      	lsls	r3, r3, #24
 810a642:	b09d      	sub	sp, #116	; 0x74
 810a644:	4607      	mov	r7, r0
 810a646:	460d      	mov	r5, r1
 810a648:	4614      	mov	r4, r2
 810a64a:	d50e      	bpl.n	810a66a <_svfiprintf_r+0x32>
 810a64c:	690b      	ldr	r3, [r1, #16]
 810a64e:	b963      	cbnz	r3, 810a66a <_svfiprintf_r+0x32>
 810a650:	2140      	movs	r1, #64	; 0x40
 810a652:	f000 fb19 	bl	810ac88 <_malloc_r>
 810a656:	6028      	str	r0, [r5, #0]
 810a658:	6128      	str	r0, [r5, #16]
 810a65a:	b920      	cbnz	r0, 810a666 <_svfiprintf_r+0x2e>
 810a65c:	230c      	movs	r3, #12
 810a65e:	603b      	str	r3, [r7, #0]
 810a660:	f04f 30ff 	mov.w	r0, #4294967295
 810a664:	e0d1      	b.n	810a80a <_svfiprintf_r+0x1d2>
 810a666:	2340      	movs	r3, #64	; 0x40
 810a668:	616b      	str	r3, [r5, #20]
 810a66a:	2300      	movs	r3, #0
 810a66c:	9309      	str	r3, [sp, #36]	; 0x24
 810a66e:	2320      	movs	r3, #32
 810a670:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810a674:	f8cd 800c 	str.w	r8, [sp, #12]
 810a678:	2330      	movs	r3, #48	; 0x30
 810a67a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810a824 <_svfiprintf_r+0x1ec>
 810a67e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810a682:	f04f 0901 	mov.w	r9, #1
 810a686:	4623      	mov	r3, r4
 810a688:	469a      	mov	sl, r3
 810a68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a68e:	b10a      	cbz	r2, 810a694 <_svfiprintf_r+0x5c>
 810a690:	2a25      	cmp	r2, #37	; 0x25
 810a692:	d1f9      	bne.n	810a688 <_svfiprintf_r+0x50>
 810a694:	ebba 0b04 	subs.w	fp, sl, r4
 810a698:	d00b      	beq.n	810a6b2 <_svfiprintf_r+0x7a>
 810a69a:	465b      	mov	r3, fp
 810a69c:	4622      	mov	r2, r4
 810a69e:	4629      	mov	r1, r5
 810a6a0:	4638      	mov	r0, r7
 810a6a2:	f7ff ff6d 	bl	810a580 <__ssputs_r>
 810a6a6:	3001      	adds	r0, #1
 810a6a8:	f000 80aa 	beq.w	810a800 <_svfiprintf_r+0x1c8>
 810a6ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a6ae:	445a      	add	r2, fp
 810a6b0:	9209      	str	r2, [sp, #36]	; 0x24
 810a6b2:	f89a 3000 	ldrb.w	r3, [sl]
 810a6b6:	2b00      	cmp	r3, #0
 810a6b8:	f000 80a2 	beq.w	810a800 <_svfiprintf_r+0x1c8>
 810a6bc:	2300      	movs	r3, #0
 810a6be:	f04f 32ff 	mov.w	r2, #4294967295
 810a6c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a6c6:	f10a 0a01 	add.w	sl, sl, #1
 810a6ca:	9304      	str	r3, [sp, #16]
 810a6cc:	9307      	str	r3, [sp, #28]
 810a6ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810a6d2:	931a      	str	r3, [sp, #104]	; 0x68
 810a6d4:	4654      	mov	r4, sl
 810a6d6:	2205      	movs	r2, #5
 810a6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a6dc:	4851      	ldr	r0, [pc, #324]	; (810a824 <_svfiprintf_r+0x1ec>)
 810a6de:	f7f5 fdff 	bl	81002e0 <memchr>
 810a6e2:	9a04      	ldr	r2, [sp, #16]
 810a6e4:	b9d8      	cbnz	r0, 810a71e <_svfiprintf_r+0xe6>
 810a6e6:	06d0      	lsls	r0, r2, #27
 810a6e8:	bf44      	itt	mi
 810a6ea:	2320      	movmi	r3, #32
 810a6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a6f0:	0711      	lsls	r1, r2, #28
 810a6f2:	bf44      	itt	mi
 810a6f4:	232b      	movmi	r3, #43	; 0x2b
 810a6f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a6fa:	f89a 3000 	ldrb.w	r3, [sl]
 810a6fe:	2b2a      	cmp	r3, #42	; 0x2a
 810a700:	d015      	beq.n	810a72e <_svfiprintf_r+0xf6>
 810a702:	9a07      	ldr	r2, [sp, #28]
 810a704:	4654      	mov	r4, sl
 810a706:	2000      	movs	r0, #0
 810a708:	f04f 0c0a 	mov.w	ip, #10
 810a70c:	4621      	mov	r1, r4
 810a70e:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a712:	3b30      	subs	r3, #48	; 0x30
 810a714:	2b09      	cmp	r3, #9
 810a716:	d94e      	bls.n	810a7b6 <_svfiprintf_r+0x17e>
 810a718:	b1b0      	cbz	r0, 810a748 <_svfiprintf_r+0x110>
 810a71a:	9207      	str	r2, [sp, #28]
 810a71c:	e014      	b.n	810a748 <_svfiprintf_r+0x110>
 810a71e:	eba0 0308 	sub.w	r3, r0, r8
 810a722:	fa09 f303 	lsl.w	r3, r9, r3
 810a726:	4313      	orrs	r3, r2
 810a728:	9304      	str	r3, [sp, #16]
 810a72a:	46a2      	mov	sl, r4
 810a72c:	e7d2      	b.n	810a6d4 <_svfiprintf_r+0x9c>
 810a72e:	9b03      	ldr	r3, [sp, #12]
 810a730:	1d19      	adds	r1, r3, #4
 810a732:	681b      	ldr	r3, [r3, #0]
 810a734:	9103      	str	r1, [sp, #12]
 810a736:	2b00      	cmp	r3, #0
 810a738:	bfbb      	ittet	lt
 810a73a:	425b      	neglt	r3, r3
 810a73c:	f042 0202 	orrlt.w	r2, r2, #2
 810a740:	9307      	strge	r3, [sp, #28]
 810a742:	9307      	strlt	r3, [sp, #28]
 810a744:	bfb8      	it	lt
 810a746:	9204      	strlt	r2, [sp, #16]
 810a748:	7823      	ldrb	r3, [r4, #0]
 810a74a:	2b2e      	cmp	r3, #46	; 0x2e
 810a74c:	d10c      	bne.n	810a768 <_svfiprintf_r+0x130>
 810a74e:	7863      	ldrb	r3, [r4, #1]
 810a750:	2b2a      	cmp	r3, #42	; 0x2a
 810a752:	d135      	bne.n	810a7c0 <_svfiprintf_r+0x188>
 810a754:	9b03      	ldr	r3, [sp, #12]
 810a756:	1d1a      	adds	r2, r3, #4
 810a758:	681b      	ldr	r3, [r3, #0]
 810a75a:	9203      	str	r2, [sp, #12]
 810a75c:	2b00      	cmp	r3, #0
 810a75e:	bfb8      	it	lt
 810a760:	f04f 33ff 	movlt.w	r3, #4294967295
 810a764:	3402      	adds	r4, #2
 810a766:	9305      	str	r3, [sp, #20]
 810a768:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810a834 <_svfiprintf_r+0x1fc>
 810a76c:	7821      	ldrb	r1, [r4, #0]
 810a76e:	2203      	movs	r2, #3
 810a770:	4650      	mov	r0, sl
 810a772:	f7f5 fdb5 	bl	81002e0 <memchr>
 810a776:	b140      	cbz	r0, 810a78a <_svfiprintf_r+0x152>
 810a778:	2340      	movs	r3, #64	; 0x40
 810a77a:	eba0 000a 	sub.w	r0, r0, sl
 810a77e:	fa03 f000 	lsl.w	r0, r3, r0
 810a782:	9b04      	ldr	r3, [sp, #16]
 810a784:	4303      	orrs	r3, r0
 810a786:	3401      	adds	r4, #1
 810a788:	9304      	str	r3, [sp, #16]
 810a78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a78e:	4826      	ldr	r0, [pc, #152]	; (810a828 <_svfiprintf_r+0x1f0>)
 810a790:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810a794:	2206      	movs	r2, #6
 810a796:	f7f5 fda3 	bl	81002e0 <memchr>
 810a79a:	2800      	cmp	r0, #0
 810a79c:	d038      	beq.n	810a810 <_svfiprintf_r+0x1d8>
 810a79e:	4b23      	ldr	r3, [pc, #140]	; (810a82c <_svfiprintf_r+0x1f4>)
 810a7a0:	bb1b      	cbnz	r3, 810a7ea <_svfiprintf_r+0x1b2>
 810a7a2:	9b03      	ldr	r3, [sp, #12]
 810a7a4:	3307      	adds	r3, #7
 810a7a6:	f023 0307 	bic.w	r3, r3, #7
 810a7aa:	3308      	adds	r3, #8
 810a7ac:	9303      	str	r3, [sp, #12]
 810a7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a7b0:	4433      	add	r3, r6
 810a7b2:	9309      	str	r3, [sp, #36]	; 0x24
 810a7b4:	e767      	b.n	810a686 <_svfiprintf_r+0x4e>
 810a7b6:	fb0c 3202 	mla	r2, ip, r2, r3
 810a7ba:	460c      	mov	r4, r1
 810a7bc:	2001      	movs	r0, #1
 810a7be:	e7a5      	b.n	810a70c <_svfiprintf_r+0xd4>
 810a7c0:	2300      	movs	r3, #0
 810a7c2:	3401      	adds	r4, #1
 810a7c4:	9305      	str	r3, [sp, #20]
 810a7c6:	4619      	mov	r1, r3
 810a7c8:	f04f 0c0a 	mov.w	ip, #10
 810a7cc:	4620      	mov	r0, r4
 810a7ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a7d2:	3a30      	subs	r2, #48	; 0x30
 810a7d4:	2a09      	cmp	r2, #9
 810a7d6:	d903      	bls.n	810a7e0 <_svfiprintf_r+0x1a8>
 810a7d8:	2b00      	cmp	r3, #0
 810a7da:	d0c5      	beq.n	810a768 <_svfiprintf_r+0x130>
 810a7dc:	9105      	str	r1, [sp, #20]
 810a7de:	e7c3      	b.n	810a768 <_svfiprintf_r+0x130>
 810a7e0:	fb0c 2101 	mla	r1, ip, r1, r2
 810a7e4:	4604      	mov	r4, r0
 810a7e6:	2301      	movs	r3, #1
 810a7e8:	e7f0      	b.n	810a7cc <_svfiprintf_r+0x194>
 810a7ea:	ab03      	add	r3, sp, #12
 810a7ec:	9300      	str	r3, [sp, #0]
 810a7ee:	462a      	mov	r2, r5
 810a7f0:	4b0f      	ldr	r3, [pc, #60]	; (810a830 <_svfiprintf_r+0x1f8>)
 810a7f2:	a904      	add	r1, sp, #16
 810a7f4:	4638      	mov	r0, r7
 810a7f6:	f3af 8000 	nop.w
 810a7fa:	1c42      	adds	r2, r0, #1
 810a7fc:	4606      	mov	r6, r0
 810a7fe:	d1d6      	bne.n	810a7ae <_svfiprintf_r+0x176>
 810a800:	89ab      	ldrh	r3, [r5, #12]
 810a802:	065b      	lsls	r3, r3, #25
 810a804:	f53f af2c 	bmi.w	810a660 <_svfiprintf_r+0x28>
 810a808:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a80a:	b01d      	add	sp, #116	; 0x74
 810a80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a810:	ab03      	add	r3, sp, #12
 810a812:	9300      	str	r3, [sp, #0]
 810a814:	462a      	mov	r2, r5
 810a816:	4b06      	ldr	r3, [pc, #24]	; (810a830 <_svfiprintf_r+0x1f8>)
 810a818:	a904      	add	r1, sp, #16
 810a81a:	4638      	mov	r0, r7
 810a81c:	f000 f87a 	bl	810a914 <_printf_i>
 810a820:	e7eb      	b.n	810a7fa <_svfiprintf_r+0x1c2>
 810a822:	bf00      	nop
 810a824:	0810b48c 	.word	0x0810b48c
 810a828:	0810b496 	.word	0x0810b496
 810a82c:	00000000 	.word	0x00000000
 810a830:	0810a581 	.word	0x0810a581
 810a834:	0810b492 	.word	0x0810b492

0810a838 <_printf_common>:
 810a838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a83c:	4616      	mov	r6, r2
 810a83e:	4699      	mov	r9, r3
 810a840:	688a      	ldr	r2, [r1, #8]
 810a842:	690b      	ldr	r3, [r1, #16]
 810a844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810a848:	4293      	cmp	r3, r2
 810a84a:	bfb8      	it	lt
 810a84c:	4613      	movlt	r3, r2
 810a84e:	6033      	str	r3, [r6, #0]
 810a850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810a854:	4607      	mov	r7, r0
 810a856:	460c      	mov	r4, r1
 810a858:	b10a      	cbz	r2, 810a85e <_printf_common+0x26>
 810a85a:	3301      	adds	r3, #1
 810a85c:	6033      	str	r3, [r6, #0]
 810a85e:	6823      	ldr	r3, [r4, #0]
 810a860:	0699      	lsls	r1, r3, #26
 810a862:	bf42      	ittt	mi
 810a864:	6833      	ldrmi	r3, [r6, #0]
 810a866:	3302      	addmi	r3, #2
 810a868:	6033      	strmi	r3, [r6, #0]
 810a86a:	6825      	ldr	r5, [r4, #0]
 810a86c:	f015 0506 	ands.w	r5, r5, #6
 810a870:	d106      	bne.n	810a880 <_printf_common+0x48>
 810a872:	f104 0a19 	add.w	sl, r4, #25
 810a876:	68e3      	ldr	r3, [r4, #12]
 810a878:	6832      	ldr	r2, [r6, #0]
 810a87a:	1a9b      	subs	r3, r3, r2
 810a87c:	42ab      	cmp	r3, r5
 810a87e:	dc26      	bgt.n	810a8ce <_printf_common+0x96>
 810a880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810a884:	1e13      	subs	r3, r2, #0
 810a886:	6822      	ldr	r2, [r4, #0]
 810a888:	bf18      	it	ne
 810a88a:	2301      	movne	r3, #1
 810a88c:	0692      	lsls	r2, r2, #26
 810a88e:	d42b      	bmi.n	810a8e8 <_printf_common+0xb0>
 810a890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810a894:	4649      	mov	r1, r9
 810a896:	4638      	mov	r0, r7
 810a898:	47c0      	blx	r8
 810a89a:	3001      	adds	r0, #1
 810a89c:	d01e      	beq.n	810a8dc <_printf_common+0xa4>
 810a89e:	6823      	ldr	r3, [r4, #0]
 810a8a0:	68e5      	ldr	r5, [r4, #12]
 810a8a2:	6832      	ldr	r2, [r6, #0]
 810a8a4:	f003 0306 	and.w	r3, r3, #6
 810a8a8:	2b04      	cmp	r3, #4
 810a8aa:	bf08      	it	eq
 810a8ac:	1aad      	subeq	r5, r5, r2
 810a8ae:	68a3      	ldr	r3, [r4, #8]
 810a8b0:	6922      	ldr	r2, [r4, #16]
 810a8b2:	bf0c      	ite	eq
 810a8b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810a8b8:	2500      	movne	r5, #0
 810a8ba:	4293      	cmp	r3, r2
 810a8bc:	bfc4      	itt	gt
 810a8be:	1a9b      	subgt	r3, r3, r2
 810a8c0:	18ed      	addgt	r5, r5, r3
 810a8c2:	2600      	movs	r6, #0
 810a8c4:	341a      	adds	r4, #26
 810a8c6:	42b5      	cmp	r5, r6
 810a8c8:	d11a      	bne.n	810a900 <_printf_common+0xc8>
 810a8ca:	2000      	movs	r0, #0
 810a8cc:	e008      	b.n	810a8e0 <_printf_common+0xa8>
 810a8ce:	2301      	movs	r3, #1
 810a8d0:	4652      	mov	r2, sl
 810a8d2:	4649      	mov	r1, r9
 810a8d4:	4638      	mov	r0, r7
 810a8d6:	47c0      	blx	r8
 810a8d8:	3001      	adds	r0, #1
 810a8da:	d103      	bne.n	810a8e4 <_printf_common+0xac>
 810a8dc:	f04f 30ff 	mov.w	r0, #4294967295
 810a8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a8e4:	3501      	adds	r5, #1
 810a8e6:	e7c6      	b.n	810a876 <_printf_common+0x3e>
 810a8e8:	18e1      	adds	r1, r4, r3
 810a8ea:	1c5a      	adds	r2, r3, #1
 810a8ec:	2030      	movs	r0, #48	; 0x30
 810a8ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810a8f2:	4422      	add	r2, r4
 810a8f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810a8f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810a8fc:	3302      	adds	r3, #2
 810a8fe:	e7c7      	b.n	810a890 <_printf_common+0x58>
 810a900:	2301      	movs	r3, #1
 810a902:	4622      	mov	r2, r4
 810a904:	4649      	mov	r1, r9
 810a906:	4638      	mov	r0, r7
 810a908:	47c0      	blx	r8
 810a90a:	3001      	adds	r0, #1
 810a90c:	d0e6      	beq.n	810a8dc <_printf_common+0xa4>
 810a90e:	3601      	adds	r6, #1
 810a910:	e7d9      	b.n	810a8c6 <_printf_common+0x8e>
	...

0810a914 <_printf_i>:
 810a914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a918:	7e0f      	ldrb	r7, [r1, #24]
 810a91a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810a91c:	2f78      	cmp	r7, #120	; 0x78
 810a91e:	4691      	mov	r9, r2
 810a920:	4680      	mov	r8, r0
 810a922:	460c      	mov	r4, r1
 810a924:	469a      	mov	sl, r3
 810a926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810a92a:	d807      	bhi.n	810a93c <_printf_i+0x28>
 810a92c:	2f62      	cmp	r7, #98	; 0x62
 810a92e:	d80a      	bhi.n	810a946 <_printf_i+0x32>
 810a930:	2f00      	cmp	r7, #0
 810a932:	f000 80d8 	beq.w	810aae6 <_printf_i+0x1d2>
 810a936:	2f58      	cmp	r7, #88	; 0x58
 810a938:	f000 80a3 	beq.w	810aa82 <_printf_i+0x16e>
 810a93c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810a944:	e03a      	b.n	810a9bc <_printf_i+0xa8>
 810a946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810a94a:	2b15      	cmp	r3, #21
 810a94c:	d8f6      	bhi.n	810a93c <_printf_i+0x28>
 810a94e:	a101      	add	r1, pc, #4	; (adr r1, 810a954 <_printf_i+0x40>)
 810a950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810a954:	0810a9ad 	.word	0x0810a9ad
 810a958:	0810a9c1 	.word	0x0810a9c1
 810a95c:	0810a93d 	.word	0x0810a93d
 810a960:	0810a93d 	.word	0x0810a93d
 810a964:	0810a93d 	.word	0x0810a93d
 810a968:	0810a93d 	.word	0x0810a93d
 810a96c:	0810a9c1 	.word	0x0810a9c1
 810a970:	0810a93d 	.word	0x0810a93d
 810a974:	0810a93d 	.word	0x0810a93d
 810a978:	0810a93d 	.word	0x0810a93d
 810a97c:	0810a93d 	.word	0x0810a93d
 810a980:	0810aacd 	.word	0x0810aacd
 810a984:	0810a9f1 	.word	0x0810a9f1
 810a988:	0810aaaf 	.word	0x0810aaaf
 810a98c:	0810a93d 	.word	0x0810a93d
 810a990:	0810a93d 	.word	0x0810a93d
 810a994:	0810aaef 	.word	0x0810aaef
 810a998:	0810a93d 	.word	0x0810a93d
 810a99c:	0810a9f1 	.word	0x0810a9f1
 810a9a0:	0810a93d 	.word	0x0810a93d
 810a9a4:	0810a93d 	.word	0x0810a93d
 810a9a8:	0810aab7 	.word	0x0810aab7
 810a9ac:	682b      	ldr	r3, [r5, #0]
 810a9ae:	1d1a      	adds	r2, r3, #4
 810a9b0:	681b      	ldr	r3, [r3, #0]
 810a9b2:	602a      	str	r2, [r5, #0]
 810a9b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a9b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810a9bc:	2301      	movs	r3, #1
 810a9be:	e0a3      	b.n	810ab08 <_printf_i+0x1f4>
 810a9c0:	6820      	ldr	r0, [r4, #0]
 810a9c2:	6829      	ldr	r1, [r5, #0]
 810a9c4:	0606      	lsls	r6, r0, #24
 810a9c6:	f101 0304 	add.w	r3, r1, #4
 810a9ca:	d50a      	bpl.n	810a9e2 <_printf_i+0xce>
 810a9cc:	680e      	ldr	r6, [r1, #0]
 810a9ce:	602b      	str	r3, [r5, #0]
 810a9d0:	2e00      	cmp	r6, #0
 810a9d2:	da03      	bge.n	810a9dc <_printf_i+0xc8>
 810a9d4:	232d      	movs	r3, #45	; 0x2d
 810a9d6:	4276      	negs	r6, r6
 810a9d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a9dc:	485e      	ldr	r0, [pc, #376]	; (810ab58 <_printf_i+0x244>)
 810a9de:	230a      	movs	r3, #10
 810a9e0:	e019      	b.n	810aa16 <_printf_i+0x102>
 810a9e2:	680e      	ldr	r6, [r1, #0]
 810a9e4:	602b      	str	r3, [r5, #0]
 810a9e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 810a9ea:	bf18      	it	ne
 810a9ec:	b236      	sxthne	r6, r6
 810a9ee:	e7ef      	b.n	810a9d0 <_printf_i+0xbc>
 810a9f0:	682b      	ldr	r3, [r5, #0]
 810a9f2:	6820      	ldr	r0, [r4, #0]
 810a9f4:	1d19      	adds	r1, r3, #4
 810a9f6:	6029      	str	r1, [r5, #0]
 810a9f8:	0601      	lsls	r1, r0, #24
 810a9fa:	d501      	bpl.n	810aa00 <_printf_i+0xec>
 810a9fc:	681e      	ldr	r6, [r3, #0]
 810a9fe:	e002      	b.n	810aa06 <_printf_i+0xf2>
 810aa00:	0646      	lsls	r6, r0, #25
 810aa02:	d5fb      	bpl.n	810a9fc <_printf_i+0xe8>
 810aa04:	881e      	ldrh	r6, [r3, #0]
 810aa06:	4854      	ldr	r0, [pc, #336]	; (810ab58 <_printf_i+0x244>)
 810aa08:	2f6f      	cmp	r7, #111	; 0x6f
 810aa0a:	bf0c      	ite	eq
 810aa0c:	2308      	moveq	r3, #8
 810aa0e:	230a      	movne	r3, #10
 810aa10:	2100      	movs	r1, #0
 810aa12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810aa16:	6865      	ldr	r5, [r4, #4]
 810aa18:	60a5      	str	r5, [r4, #8]
 810aa1a:	2d00      	cmp	r5, #0
 810aa1c:	bfa2      	ittt	ge
 810aa1e:	6821      	ldrge	r1, [r4, #0]
 810aa20:	f021 0104 	bicge.w	r1, r1, #4
 810aa24:	6021      	strge	r1, [r4, #0]
 810aa26:	b90e      	cbnz	r6, 810aa2c <_printf_i+0x118>
 810aa28:	2d00      	cmp	r5, #0
 810aa2a:	d04d      	beq.n	810aac8 <_printf_i+0x1b4>
 810aa2c:	4615      	mov	r5, r2
 810aa2e:	fbb6 f1f3 	udiv	r1, r6, r3
 810aa32:	fb03 6711 	mls	r7, r3, r1, r6
 810aa36:	5dc7      	ldrb	r7, [r0, r7]
 810aa38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810aa3c:	4637      	mov	r7, r6
 810aa3e:	42bb      	cmp	r3, r7
 810aa40:	460e      	mov	r6, r1
 810aa42:	d9f4      	bls.n	810aa2e <_printf_i+0x11a>
 810aa44:	2b08      	cmp	r3, #8
 810aa46:	d10b      	bne.n	810aa60 <_printf_i+0x14c>
 810aa48:	6823      	ldr	r3, [r4, #0]
 810aa4a:	07de      	lsls	r6, r3, #31
 810aa4c:	d508      	bpl.n	810aa60 <_printf_i+0x14c>
 810aa4e:	6923      	ldr	r3, [r4, #16]
 810aa50:	6861      	ldr	r1, [r4, #4]
 810aa52:	4299      	cmp	r1, r3
 810aa54:	bfde      	ittt	le
 810aa56:	2330      	movle	r3, #48	; 0x30
 810aa58:	f805 3c01 	strble.w	r3, [r5, #-1]
 810aa5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 810aa60:	1b52      	subs	r2, r2, r5
 810aa62:	6122      	str	r2, [r4, #16]
 810aa64:	f8cd a000 	str.w	sl, [sp]
 810aa68:	464b      	mov	r3, r9
 810aa6a:	aa03      	add	r2, sp, #12
 810aa6c:	4621      	mov	r1, r4
 810aa6e:	4640      	mov	r0, r8
 810aa70:	f7ff fee2 	bl	810a838 <_printf_common>
 810aa74:	3001      	adds	r0, #1
 810aa76:	d14c      	bne.n	810ab12 <_printf_i+0x1fe>
 810aa78:	f04f 30ff 	mov.w	r0, #4294967295
 810aa7c:	b004      	add	sp, #16
 810aa7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810aa82:	4835      	ldr	r0, [pc, #212]	; (810ab58 <_printf_i+0x244>)
 810aa84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 810aa88:	6829      	ldr	r1, [r5, #0]
 810aa8a:	6823      	ldr	r3, [r4, #0]
 810aa8c:	f851 6b04 	ldr.w	r6, [r1], #4
 810aa90:	6029      	str	r1, [r5, #0]
 810aa92:	061d      	lsls	r5, r3, #24
 810aa94:	d514      	bpl.n	810aac0 <_printf_i+0x1ac>
 810aa96:	07df      	lsls	r7, r3, #31
 810aa98:	bf44      	itt	mi
 810aa9a:	f043 0320 	orrmi.w	r3, r3, #32
 810aa9e:	6023      	strmi	r3, [r4, #0]
 810aaa0:	b91e      	cbnz	r6, 810aaaa <_printf_i+0x196>
 810aaa2:	6823      	ldr	r3, [r4, #0]
 810aaa4:	f023 0320 	bic.w	r3, r3, #32
 810aaa8:	6023      	str	r3, [r4, #0]
 810aaaa:	2310      	movs	r3, #16
 810aaac:	e7b0      	b.n	810aa10 <_printf_i+0xfc>
 810aaae:	6823      	ldr	r3, [r4, #0]
 810aab0:	f043 0320 	orr.w	r3, r3, #32
 810aab4:	6023      	str	r3, [r4, #0]
 810aab6:	2378      	movs	r3, #120	; 0x78
 810aab8:	4828      	ldr	r0, [pc, #160]	; (810ab5c <_printf_i+0x248>)
 810aaba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810aabe:	e7e3      	b.n	810aa88 <_printf_i+0x174>
 810aac0:	0659      	lsls	r1, r3, #25
 810aac2:	bf48      	it	mi
 810aac4:	b2b6      	uxthmi	r6, r6
 810aac6:	e7e6      	b.n	810aa96 <_printf_i+0x182>
 810aac8:	4615      	mov	r5, r2
 810aaca:	e7bb      	b.n	810aa44 <_printf_i+0x130>
 810aacc:	682b      	ldr	r3, [r5, #0]
 810aace:	6826      	ldr	r6, [r4, #0]
 810aad0:	6961      	ldr	r1, [r4, #20]
 810aad2:	1d18      	adds	r0, r3, #4
 810aad4:	6028      	str	r0, [r5, #0]
 810aad6:	0635      	lsls	r5, r6, #24
 810aad8:	681b      	ldr	r3, [r3, #0]
 810aada:	d501      	bpl.n	810aae0 <_printf_i+0x1cc>
 810aadc:	6019      	str	r1, [r3, #0]
 810aade:	e002      	b.n	810aae6 <_printf_i+0x1d2>
 810aae0:	0670      	lsls	r0, r6, #25
 810aae2:	d5fb      	bpl.n	810aadc <_printf_i+0x1c8>
 810aae4:	8019      	strh	r1, [r3, #0]
 810aae6:	2300      	movs	r3, #0
 810aae8:	6123      	str	r3, [r4, #16]
 810aaea:	4615      	mov	r5, r2
 810aaec:	e7ba      	b.n	810aa64 <_printf_i+0x150>
 810aaee:	682b      	ldr	r3, [r5, #0]
 810aaf0:	1d1a      	adds	r2, r3, #4
 810aaf2:	602a      	str	r2, [r5, #0]
 810aaf4:	681d      	ldr	r5, [r3, #0]
 810aaf6:	6862      	ldr	r2, [r4, #4]
 810aaf8:	2100      	movs	r1, #0
 810aafa:	4628      	mov	r0, r5
 810aafc:	f7f5 fbf0 	bl	81002e0 <memchr>
 810ab00:	b108      	cbz	r0, 810ab06 <_printf_i+0x1f2>
 810ab02:	1b40      	subs	r0, r0, r5
 810ab04:	6060      	str	r0, [r4, #4]
 810ab06:	6863      	ldr	r3, [r4, #4]
 810ab08:	6123      	str	r3, [r4, #16]
 810ab0a:	2300      	movs	r3, #0
 810ab0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810ab10:	e7a8      	b.n	810aa64 <_printf_i+0x150>
 810ab12:	6923      	ldr	r3, [r4, #16]
 810ab14:	462a      	mov	r2, r5
 810ab16:	4649      	mov	r1, r9
 810ab18:	4640      	mov	r0, r8
 810ab1a:	47d0      	blx	sl
 810ab1c:	3001      	adds	r0, #1
 810ab1e:	d0ab      	beq.n	810aa78 <_printf_i+0x164>
 810ab20:	6823      	ldr	r3, [r4, #0]
 810ab22:	079b      	lsls	r3, r3, #30
 810ab24:	d413      	bmi.n	810ab4e <_printf_i+0x23a>
 810ab26:	68e0      	ldr	r0, [r4, #12]
 810ab28:	9b03      	ldr	r3, [sp, #12]
 810ab2a:	4298      	cmp	r0, r3
 810ab2c:	bfb8      	it	lt
 810ab2e:	4618      	movlt	r0, r3
 810ab30:	e7a4      	b.n	810aa7c <_printf_i+0x168>
 810ab32:	2301      	movs	r3, #1
 810ab34:	4632      	mov	r2, r6
 810ab36:	4649      	mov	r1, r9
 810ab38:	4640      	mov	r0, r8
 810ab3a:	47d0      	blx	sl
 810ab3c:	3001      	adds	r0, #1
 810ab3e:	d09b      	beq.n	810aa78 <_printf_i+0x164>
 810ab40:	3501      	adds	r5, #1
 810ab42:	68e3      	ldr	r3, [r4, #12]
 810ab44:	9903      	ldr	r1, [sp, #12]
 810ab46:	1a5b      	subs	r3, r3, r1
 810ab48:	42ab      	cmp	r3, r5
 810ab4a:	dcf2      	bgt.n	810ab32 <_printf_i+0x21e>
 810ab4c:	e7eb      	b.n	810ab26 <_printf_i+0x212>
 810ab4e:	2500      	movs	r5, #0
 810ab50:	f104 0619 	add.w	r6, r4, #25
 810ab54:	e7f5      	b.n	810ab42 <_printf_i+0x22e>
 810ab56:	bf00      	nop
 810ab58:	0810b49d 	.word	0x0810b49d
 810ab5c:	0810b4ae 	.word	0x0810b4ae

0810ab60 <memcpy>:
 810ab60:	440a      	add	r2, r1
 810ab62:	4291      	cmp	r1, r2
 810ab64:	f100 33ff 	add.w	r3, r0, #4294967295
 810ab68:	d100      	bne.n	810ab6c <memcpy+0xc>
 810ab6a:	4770      	bx	lr
 810ab6c:	b510      	push	{r4, lr}
 810ab6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ab72:	f803 4f01 	strb.w	r4, [r3, #1]!
 810ab76:	4291      	cmp	r1, r2
 810ab78:	d1f9      	bne.n	810ab6e <memcpy+0xe>
 810ab7a:	bd10      	pop	{r4, pc}

0810ab7c <memmove>:
 810ab7c:	4288      	cmp	r0, r1
 810ab7e:	b510      	push	{r4, lr}
 810ab80:	eb01 0402 	add.w	r4, r1, r2
 810ab84:	d902      	bls.n	810ab8c <memmove+0x10>
 810ab86:	4284      	cmp	r4, r0
 810ab88:	4623      	mov	r3, r4
 810ab8a:	d807      	bhi.n	810ab9c <memmove+0x20>
 810ab8c:	1e43      	subs	r3, r0, #1
 810ab8e:	42a1      	cmp	r1, r4
 810ab90:	d008      	beq.n	810aba4 <memmove+0x28>
 810ab92:	f811 2b01 	ldrb.w	r2, [r1], #1
 810ab96:	f803 2f01 	strb.w	r2, [r3, #1]!
 810ab9a:	e7f8      	b.n	810ab8e <memmove+0x12>
 810ab9c:	4402      	add	r2, r0
 810ab9e:	4601      	mov	r1, r0
 810aba0:	428a      	cmp	r2, r1
 810aba2:	d100      	bne.n	810aba6 <memmove+0x2a>
 810aba4:	bd10      	pop	{r4, pc}
 810aba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810abaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810abae:	e7f7      	b.n	810aba0 <memmove+0x24>

0810abb0 <_free_r>:
 810abb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810abb2:	2900      	cmp	r1, #0
 810abb4:	d044      	beq.n	810ac40 <_free_r+0x90>
 810abb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810abba:	9001      	str	r0, [sp, #4]
 810abbc:	2b00      	cmp	r3, #0
 810abbe:	f1a1 0404 	sub.w	r4, r1, #4
 810abc2:	bfb8      	it	lt
 810abc4:	18e4      	addlt	r4, r4, r3
 810abc6:	f000 f913 	bl	810adf0 <__malloc_lock>
 810abca:	4a1e      	ldr	r2, [pc, #120]	; (810ac44 <_free_r+0x94>)
 810abcc:	9801      	ldr	r0, [sp, #4]
 810abce:	6813      	ldr	r3, [r2, #0]
 810abd0:	b933      	cbnz	r3, 810abe0 <_free_r+0x30>
 810abd2:	6063      	str	r3, [r4, #4]
 810abd4:	6014      	str	r4, [r2, #0]
 810abd6:	b003      	add	sp, #12
 810abd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810abdc:	f000 b90e 	b.w	810adfc <__malloc_unlock>
 810abe0:	42a3      	cmp	r3, r4
 810abe2:	d908      	bls.n	810abf6 <_free_r+0x46>
 810abe4:	6825      	ldr	r5, [r4, #0]
 810abe6:	1961      	adds	r1, r4, r5
 810abe8:	428b      	cmp	r3, r1
 810abea:	bf01      	itttt	eq
 810abec:	6819      	ldreq	r1, [r3, #0]
 810abee:	685b      	ldreq	r3, [r3, #4]
 810abf0:	1949      	addeq	r1, r1, r5
 810abf2:	6021      	streq	r1, [r4, #0]
 810abf4:	e7ed      	b.n	810abd2 <_free_r+0x22>
 810abf6:	461a      	mov	r2, r3
 810abf8:	685b      	ldr	r3, [r3, #4]
 810abfa:	b10b      	cbz	r3, 810ac00 <_free_r+0x50>
 810abfc:	42a3      	cmp	r3, r4
 810abfe:	d9fa      	bls.n	810abf6 <_free_r+0x46>
 810ac00:	6811      	ldr	r1, [r2, #0]
 810ac02:	1855      	adds	r5, r2, r1
 810ac04:	42a5      	cmp	r5, r4
 810ac06:	d10b      	bne.n	810ac20 <_free_r+0x70>
 810ac08:	6824      	ldr	r4, [r4, #0]
 810ac0a:	4421      	add	r1, r4
 810ac0c:	1854      	adds	r4, r2, r1
 810ac0e:	42a3      	cmp	r3, r4
 810ac10:	6011      	str	r1, [r2, #0]
 810ac12:	d1e0      	bne.n	810abd6 <_free_r+0x26>
 810ac14:	681c      	ldr	r4, [r3, #0]
 810ac16:	685b      	ldr	r3, [r3, #4]
 810ac18:	6053      	str	r3, [r2, #4]
 810ac1a:	4421      	add	r1, r4
 810ac1c:	6011      	str	r1, [r2, #0]
 810ac1e:	e7da      	b.n	810abd6 <_free_r+0x26>
 810ac20:	d902      	bls.n	810ac28 <_free_r+0x78>
 810ac22:	230c      	movs	r3, #12
 810ac24:	6003      	str	r3, [r0, #0]
 810ac26:	e7d6      	b.n	810abd6 <_free_r+0x26>
 810ac28:	6825      	ldr	r5, [r4, #0]
 810ac2a:	1961      	adds	r1, r4, r5
 810ac2c:	428b      	cmp	r3, r1
 810ac2e:	bf04      	itt	eq
 810ac30:	6819      	ldreq	r1, [r3, #0]
 810ac32:	685b      	ldreq	r3, [r3, #4]
 810ac34:	6063      	str	r3, [r4, #4]
 810ac36:	bf04      	itt	eq
 810ac38:	1949      	addeq	r1, r1, r5
 810ac3a:	6021      	streq	r1, [r4, #0]
 810ac3c:	6054      	str	r4, [r2, #4]
 810ac3e:	e7ca      	b.n	810abd6 <_free_r+0x26>
 810ac40:	b003      	add	sp, #12
 810ac42:	bd30      	pop	{r4, r5, pc}
 810ac44:	10000430 	.word	0x10000430

0810ac48 <sbrk_aligned>:
 810ac48:	b570      	push	{r4, r5, r6, lr}
 810ac4a:	4e0e      	ldr	r6, [pc, #56]	; (810ac84 <sbrk_aligned+0x3c>)
 810ac4c:	460c      	mov	r4, r1
 810ac4e:	6831      	ldr	r1, [r6, #0]
 810ac50:	4605      	mov	r5, r0
 810ac52:	b911      	cbnz	r1, 810ac5a <sbrk_aligned+0x12>
 810ac54:	f000 f8bc 	bl	810add0 <_sbrk_r>
 810ac58:	6030      	str	r0, [r6, #0]
 810ac5a:	4621      	mov	r1, r4
 810ac5c:	4628      	mov	r0, r5
 810ac5e:	f000 f8b7 	bl	810add0 <_sbrk_r>
 810ac62:	1c43      	adds	r3, r0, #1
 810ac64:	d00a      	beq.n	810ac7c <sbrk_aligned+0x34>
 810ac66:	1cc4      	adds	r4, r0, #3
 810ac68:	f024 0403 	bic.w	r4, r4, #3
 810ac6c:	42a0      	cmp	r0, r4
 810ac6e:	d007      	beq.n	810ac80 <sbrk_aligned+0x38>
 810ac70:	1a21      	subs	r1, r4, r0
 810ac72:	4628      	mov	r0, r5
 810ac74:	f000 f8ac 	bl	810add0 <_sbrk_r>
 810ac78:	3001      	adds	r0, #1
 810ac7a:	d101      	bne.n	810ac80 <sbrk_aligned+0x38>
 810ac7c:	f04f 34ff 	mov.w	r4, #4294967295
 810ac80:	4620      	mov	r0, r4
 810ac82:	bd70      	pop	{r4, r5, r6, pc}
 810ac84:	10000434 	.word	0x10000434

0810ac88 <_malloc_r>:
 810ac88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ac8c:	1ccd      	adds	r5, r1, #3
 810ac8e:	f025 0503 	bic.w	r5, r5, #3
 810ac92:	3508      	adds	r5, #8
 810ac94:	2d0c      	cmp	r5, #12
 810ac96:	bf38      	it	cc
 810ac98:	250c      	movcc	r5, #12
 810ac9a:	2d00      	cmp	r5, #0
 810ac9c:	4607      	mov	r7, r0
 810ac9e:	db01      	blt.n	810aca4 <_malloc_r+0x1c>
 810aca0:	42a9      	cmp	r1, r5
 810aca2:	d905      	bls.n	810acb0 <_malloc_r+0x28>
 810aca4:	230c      	movs	r3, #12
 810aca6:	603b      	str	r3, [r7, #0]
 810aca8:	2600      	movs	r6, #0
 810acaa:	4630      	mov	r0, r6
 810acac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810acb0:	4e2e      	ldr	r6, [pc, #184]	; (810ad6c <_malloc_r+0xe4>)
 810acb2:	f000 f89d 	bl	810adf0 <__malloc_lock>
 810acb6:	6833      	ldr	r3, [r6, #0]
 810acb8:	461c      	mov	r4, r3
 810acba:	bb34      	cbnz	r4, 810ad0a <_malloc_r+0x82>
 810acbc:	4629      	mov	r1, r5
 810acbe:	4638      	mov	r0, r7
 810acc0:	f7ff ffc2 	bl	810ac48 <sbrk_aligned>
 810acc4:	1c43      	adds	r3, r0, #1
 810acc6:	4604      	mov	r4, r0
 810acc8:	d14d      	bne.n	810ad66 <_malloc_r+0xde>
 810acca:	6834      	ldr	r4, [r6, #0]
 810accc:	4626      	mov	r6, r4
 810acce:	2e00      	cmp	r6, #0
 810acd0:	d140      	bne.n	810ad54 <_malloc_r+0xcc>
 810acd2:	6823      	ldr	r3, [r4, #0]
 810acd4:	4631      	mov	r1, r6
 810acd6:	4638      	mov	r0, r7
 810acd8:	eb04 0803 	add.w	r8, r4, r3
 810acdc:	f000 f878 	bl	810add0 <_sbrk_r>
 810ace0:	4580      	cmp	r8, r0
 810ace2:	d13a      	bne.n	810ad5a <_malloc_r+0xd2>
 810ace4:	6821      	ldr	r1, [r4, #0]
 810ace6:	3503      	adds	r5, #3
 810ace8:	1a6d      	subs	r5, r5, r1
 810acea:	f025 0503 	bic.w	r5, r5, #3
 810acee:	3508      	adds	r5, #8
 810acf0:	2d0c      	cmp	r5, #12
 810acf2:	bf38      	it	cc
 810acf4:	250c      	movcc	r5, #12
 810acf6:	4629      	mov	r1, r5
 810acf8:	4638      	mov	r0, r7
 810acfa:	f7ff ffa5 	bl	810ac48 <sbrk_aligned>
 810acfe:	3001      	adds	r0, #1
 810ad00:	d02b      	beq.n	810ad5a <_malloc_r+0xd2>
 810ad02:	6823      	ldr	r3, [r4, #0]
 810ad04:	442b      	add	r3, r5
 810ad06:	6023      	str	r3, [r4, #0]
 810ad08:	e00e      	b.n	810ad28 <_malloc_r+0xa0>
 810ad0a:	6822      	ldr	r2, [r4, #0]
 810ad0c:	1b52      	subs	r2, r2, r5
 810ad0e:	d41e      	bmi.n	810ad4e <_malloc_r+0xc6>
 810ad10:	2a0b      	cmp	r2, #11
 810ad12:	d916      	bls.n	810ad42 <_malloc_r+0xba>
 810ad14:	1961      	adds	r1, r4, r5
 810ad16:	42a3      	cmp	r3, r4
 810ad18:	6025      	str	r5, [r4, #0]
 810ad1a:	bf18      	it	ne
 810ad1c:	6059      	strne	r1, [r3, #4]
 810ad1e:	6863      	ldr	r3, [r4, #4]
 810ad20:	bf08      	it	eq
 810ad22:	6031      	streq	r1, [r6, #0]
 810ad24:	5162      	str	r2, [r4, r5]
 810ad26:	604b      	str	r3, [r1, #4]
 810ad28:	4638      	mov	r0, r7
 810ad2a:	f104 060b 	add.w	r6, r4, #11
 810ad2e:	f000 f865 	bl	810adfc <__malloc_unlock>
 810ad32:	f026 0607 	bic.w	r6, r6, #7
 810ad36:	1d23      	adds	r3, r4, #4
 810ad38:	1af2      	subs	r2, r6, r3
 810ad3a:	d0b6      	beq.n	810acaa <_malloc_r+0x22>
 810ad3c:	1b9b      	subs	r3, r3, r6
 810ad3e:	50a3      	str	r3, [r4, r2]
 810ad40:	e7b3      	b.n	810acaa <_malloc_r+0x22>
 810ad42:	6862      	ldr	r2, [r4, #4]
 810ad44:	42a3      	cmp	r3, r4
 810ad46:	bf0c      	ite	eq
 810ad48:	6032      	streq	r2, [r6, #0]
 810ad4a:	605a      	strne	r2, [r3, #4]
 810ad4c:	e7ec      	b.n	810ad28 <_malloc_r+0xa0>
 810ad4e:	4623      	mov	r3, r4
 810ad50:	6864      	ldr	r4, [r4, #4]
 810ad52:	e7b2      	b.n	810acba <_malloc_r+0x32>
 810ad54:	4634      	mov	r4, r6
 810ad56:	6876      	ldr	r6, [r6, #4]
 810ad58:	e7b9      	b.n	810acce <_malloc_r+0x46>
 810ad5a:	230c      	movs	r3, #12
 810ad5c:	603b      	str	r3, [r7, #0]
 810ad5e:	4638      	mov	r0, r7
 810ad60:	f000 f84c 	bl	810adfc <__malloc_unlock>
 810ad64:	e7a1      	b.n	810acaa <_malloc_r+0x22>
 810ad66:	6025      	str	r5, [r4, #0]
 810ad68:	e7de      	b.n	810ad28 <_malloc_r+0xa0>
 810ad6a:	bf00      	nop
 810ad6c:	10000430 	.word	0x10000430

0810ad70 <_realloc_r>:
 810ad70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ad74:	4680      	mov	r8, r0
 810ad76:	4614      	mov	r4, r2
 810ad78:	460e      	mov	r6, r1
 810ad7a:	b921      	cbnz	r1, 810ad86 <_realloc_r+0x16>
 810ad7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810ad80:	4611      	mov	r1, r2
 810ad82:	f7ff bf81 	b.w	810ac88 <_malloc_r>
 810ad86:	b92a      	cbnz	r2, 810ad94 <_realloc_r+0x24>
 810ad88:	f7ff ff12 	bl	810abb0 <_free_r>
 810ad8c:	4625      	mov	r5, r4
 810ad8e:	4628      	mov	r0, r5
 810ad90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ad94:	f000 f838 	bl	810ae08 <_malloc_usable_size_r>
 810ad98:	4284      	cmp	r4, r0
 810ad9a:	4607      	mov	r7, r0
 810ad9c:	d802      	bhi.n	810ada4 <_realloc_r+0x34>
 810ad9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810ada2:	d812      	bhi.n	810adca <_realloc_r+0x5a>
 810ada4:	4621      	mov	r1, r4
 810ada6:	4640      	mov	r0, r8
 810ada8:	f7ff ff6e 	bl	810ac88 <_malloc_r>
 810adac:	4605      	mov	r5, r0
 810adae:	2800      	cmp	r0, #0
 810adb0:	d0ed      	beq.n	810ad8e <_realloc_r+0x1e>
 810adb2:	42bc      	cmp	r4, r7
 810adb4:	4622      	mov	r2, r4
 810adb6:	4631      	mov	r1, r6
 810adb8:	bf28      	it	cs
 810adba:	463a      	movcs	r2, r7
 810adbc:	f7ff fed0 	bl	810ab60 <memcpy>
 810adc0:	4631      	mov	r1, r6
 810adc2:	4640      	mov	r0, r8
 810adc4:	f7ff fef4 	bl	810abb0 <_free_r>
 810adc8:	e7e1      	b.n	810ad8e <_realloc_r+0x1e>
 810adca:	4635      	mov	r5, r6
 810adcc:	e7df      	b.n	810ad8e <_realloc_r+0x1e>
	...

0810add0 <_sbrk_r>:
 810add0:	b538      	push	{r3, r4, r5, lr}
 810add2:	4d06      	ldr	r5, [pc, #24]	; (810adec <_sbrk_r+0x1c>)
 810add4:	2300      	movs	r3, #0
 810add6:	4604      	mov	r4, r0
 810add8:	4608      	mov	r0, r1
 810adda:	602b      	str	r3, [r5, #0]
 810addc:	f000 f81e 	bl	810ae1c <_sbrk>
 810ade0:	1c43      	adds	r3, r0, #1
 810ade2:	d102      	bne.n	810adea <_sbrk_r+0x1a>
 810ade4:	682b      	ldr	r3, [r5, #0]
 810ade6:	b103      	cbz	r3, 810adea <_sbrk_r+0x1a>
 810ade8:	6023      	str	r3, [r4, #0]
 810adea:	bd38      	pop	{r3, r4, r5, pc}
 810adec:	10000438 	.word	0x10000438

0810adf0 <__malloc_lock>:
 810adf0:	4801      	ldr	r0, [pc, #4]	; (810adf8 <__malloc_lock+0x8>)
 810adf2:	f000 b811 	b.w	810ae18 <__retarget_lock_acquire_recursive>
 810adf6:	bf00      	nop
 810adf8:	1000043c 	.word	0x1000043c

0810adfc <__malloc_unlock>:
 810adfc:	4801      	ldr	r0, [pc, #4]	; (810ae04 <__malloc_unlock+0x8>)
 810adfe:	f000 b80c 	b.w	810ae1a <__retarget_lock_release_recursive>
 810ae02:	bf00      	nop
 810ae04:	1000043c 	.word	0x1000043c

0810ae08 <_malloc_usable_size_r>:
 810ae08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ae0c:	1f18      	subs	r0, r3, #4
 810ae0e:	2b00      	cmp	r3, #0
 810ae10:	bfbc      	itt	lt
 810ae12:	580b      	ldrlt	r3, [r1, r0]
 810ae14:	18c0      	addlt	r0, r0, r3
 810ae16:	4770      	bx	lr

0810ae18 <__retarget_lock_acquire_recursive>:
 810ae18:	4770      	bx	lr

0810ae1a <__retarget_lock_release_recursive>:
 810ae1a:	4770      	bx	lr

0810ae1c <_sbrk>:
 810ae1c:	4a04      	ldr	r2, [pc, #16]	; (810ae30 <_sbrk+0x14>)
 810ae1e:	6811      	ldr	r1, [r2, #0]
 810ae20:	4603      	mov	r3, r0
 810ae22:	b909      	cbnz	r1, 810ae28 <_sbrk+0xc>
 810ae24:	4903      	ldr	r1, [pc, #12]	; (810ae34 <_sbrk+0x18>)
 810ae26:	6011      	str	r1, [r2, #0]
 810ae28:	6810      	ldr	r0, [r2, #0]
 810ae2a:	4403      	add	r3, r0
 810ae2c:	6013      	str	r3, [r2, #0]
 810ae2e:	4770      	bx	lr
 810ae30:	10000440 	.word	0x10000440
 810ae34:	10000448 	.word	0x10000448

0810ae38 <_init>:
 810ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ae3a:	bf00      	nop
 810ae3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ae3e:	bc08      	pop	{r3}
 810ae40:	469e      	mov	lr, r3
 810ae42:	4770      	bx	lr

0810ae44 <_fini>:
 810ae44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ae46:	bf00      	nop
 810ae48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ae4a:	bc08      	pop	{r3}
 810ae4c:	469e      	mov	lr, r3
 810ae4e:	4770      	bx	lr
