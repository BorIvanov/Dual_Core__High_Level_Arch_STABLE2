
Dual_Core__High_Level_Arch_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e78  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0810a118  0810a118  0001a118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810a424  0810a424  0001a424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810a42c  0810a42c  0001a42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810a430  0810a430  0001a430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  10000000  0810a434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000394  10000078  0810a4ac  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  1000040c  0810a4ac  0002040c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024296  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000045a6  00000000  00000000  0004433e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b90  00000000  00000000  000488e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019b8  00000000  00000000  0004a478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004137c  00000000  00000000  0004be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027163  00000000  00000000  0008d1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a2806  00000000  00000000  000b430f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00256b15  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000076d8  00000000  00000000  00256b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810a100 	.word	0x0810a100

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	0810a100 	.word	0x0810a100

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_uldivmod>:
 8100380:	b953      	cbnz	r3, 8100398 <__aeabi_uldivmod+0x18>
 8100382:	b94a      	cbnz	r2, 8100398 <__aeabi_uldivmod+0x18>
 8100384:	2900      	cmp	r1, #0
 8100386:	bf08      	it	eq
 8100388:	2800      	cmpeq	r0, #0
 810038a:	bf1c      	itt	ne
 810038c:	f04f 31ff 	movne.w	r1, #4294967295
 8100390:	f04f 30ff 	movne.w	r0, #4294967295
 8100394:	f000 b974 	b.w	8100680 <__aeabi_idiv0>
 8100398:	f1ad 0c08 	sub.w	ip, sp, #8
 810039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003a0:	f000 f806 	bl	81003b0 <__udivmoddi4>
 81003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003ac:	b004      	add	sp, #16
 81003ae:	4770      	bx	lr

081003b0 <__udivmoddi4>:
 81003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003b4:	9d08      	ldr	r5, [sp, #32]
 81003b6:	4604      	mov	r4, r0
 81003b8:	468e      	mov	lr, r1
 81003ba:	2b00      	cmp	r3, #0
 81003bc:	d14d      	bne.n	810045a <__udivmoddi4+0xaa>
 81003be:	428a      	cmp	r2, r1
 81003c0:	4694      	mov	ip, r2
 81003c2:	d969      	bls.n	8100498 <__udivmoddi4+0xe8>
 81003c4:	fab2 f282 	clz	r2, r2
 81003c8:	b152      	cbz	r2, 81003e0 <__udivmoddi4+0x30>
 81003ca:	fa01 f302 	lsl.w	r3, r1, r2
 81003ce:	f1c2 0120 	rsb	r1, r2, #32
 81003d2:	fa20 f101 	lsr.w	r1, r0, r1
 81003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 81003da:	ea41 0e03 	orr.w	lr, r1, r3
 81003de:	4094      	lsls	r4, r2
 81003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003e4:	0c21      	lsrs	r1, r4, #16
 81003e6:	fbbe f6f8 	udiv	r6, lr, r8
 81003ea:	fa1f f78c 	uxth.w	r7, ip
 81003ee:	fb08 e316 	mls	r3, r8, r6, lr
 81003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 81003f6:	fb06 f107 	mul.w	r1, r6, r7
 81003fa:	4299      	cmp	r1, r3
 81003fc:	d90a      	bls.n	8100414 <__udivmoddi4+0x64>
 81003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8100402:	f106 30ff 	add.w	r0, r6, #4294967295
 8100406:	f080 811f 	bcs.w	8100648 <__udivmoddi4+0x298>
 810040a:	4299      	cmp	r1, r3
 810040c:	f240 811c 	bls.w	8100648 <__udivmoddi4+0x298>
 8100410:	3e02      	subs	r6, #2
 8100412:	4463      	add	r3, ip
 8100414:	1a5b      	subs	r3, r3, r1
 8100416:	b2a4      	uxth	r4, r4
 8100418:	fbb3 f0f8 	udiv	r0, r3, r8
 810041c:	fb08 3310 	mls	r3, r8, r0, r3
 8100420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100424:	fb00 f707 	mul.w	r7, r0, r7
 8100428:	42a7      	cmp	r7, r4
 810042a:	d90a      	bls.n	8100442 <__udivmoddi4+0x92>
 810042c:	eb1c 0404 	adds.w	r4, ip, r4
 8100430:	f100 33ff 	add.w	r3, r0, #4294967295
 8100434:	f080 810a 	bcs.w	810064c <__udivmoddi4+0x29c>
 8100438:	42a7      	cmp	r7, r4
 810043a:	f240 8107 	bls.w	810064c <__udivmoddi4+0x29c>
 810043e:	4464      	add	r4, ip
 8100440:	3802      	subs	r0, #2
 8100442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100446:	1be4      	subs	r4, r4, r7
 8100448:	2600      	movs	r6, #0
 810044a:	b11d      	cbz	r5, 8100454 <__udivmoddi4+0xa4>
 810044c:	40d4      	lsrs	r4, r2
 810044e:	2300      	movs	r3, #0
 8100450:	e9c5 4300 	strd	r4, r3, [r5]
 8100454:	4631      	mov	r1, r6
 8100456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810045a:	428b      	cmp	r3, r1
 810045c:	d909      	bls.n	8100472 <__udivmoddi4+0xc2>
 810045e:	2d00      	cmp	r5, #0
 8100460:	f000 80ef 	beq.w	8100642 <__udivmoddi4+0x292>
 8100464:	2600      	movs	r6, #0
 8100466:	e9c5 0100 	strd	r0, r1, [r5]
 810046a:	4630      	mov	r0, r6
 810046c:	4631      	mov	r1, r6
 810046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100472:	fab3 f683 	clz	r6, r3
 8100476:	2e00      	cmp	r6, #0
 8100478:	d14a      	bne.n	8100510 <__udivmoddi4+0x160>
 810047a:	428b      	cmp	r3, r1
 810047c:	d302      	bcc.n	8100484 <__udivmoddi4+0xd4>
 810047e:	4282      	cmp	r2, r0
 8100480:	f200 80f9 	bhi.w	8100676 <__udivmoddi4+0x2c6>
 8100484:	1a84      	subs	r4, r0, r2
 8100486:	eb61 0303 	sbc.w	r3, r1, r3
 810048a:	2001      	movs	r0, #1
 810048c:	469e      	mov	lr, r3
 810048e:	2d00      	cmp	r5, #0
 8100490:	d0e0      	beq.n	8100454 <__udivmoddi4+0xa4>
 8100492:	e9c5 4e00 	strd	r4, lr, [r5]
 8100496:	e7dd      	b.n	8100454 <__udivmoddi4+0xa4>
 8100498:	b902      	cbnz	r2, 810049c <__udivmoddi4+0xec>
 810049a:	deff      	udf	#255	; 0xff
 810049c:	fab2 f282 	clz	r2, r2
 81004a0:	2a00      	cmp	r2, #0
 81004a2:	f040 8092 	bne.w	81005ca <__udivmoddi4+0x21a>
 81004a6:	eba1 010c 	sub.w	r1, r1, ip
 81004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81004ae:	fa1f fe8c 	uxth.w	lr, ip
 81004b2:	2601      	movs	r6, #1
 81004b4:	0c20      	lsrs	r0, r4, #16
 81004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 81004ba:	fb07 1113 	mls	r1, r7, r3, r1
 81004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81004c2:	fb0e f003 	mul.w	r0, lr, r3
 81004c6:	4288      	cmp	r0, r1
 81004c8:	d908      	bls.n	81004dc <__udivmoddi4+0x12c>
 81004ca:	eb1c 0101 	adds.w	r1, ip, r1
 81004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 81004d2:	d202      	bcs.n	81004da <__udivmoddi4+0x12a>
 81004d4:	4288      	cmp	r0, r1
 81004d6:	f200 80cb 	bhi.w	8100670 <__udivmoddi4+0x2c0>
 81004da:	4643      	mov	r3, r8
 81004dc:	1a09      	subs	r1, r1, r0
 81004de:	b2a4      	uxth	r4, r4
 81004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 81004e4:	fb07 1110 	mls	r1, r7, r0, r1
 81004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 81004ec:	fb0e fe00 	mul.w	lr, lr, r0
 81004f0:	45a6      	cmp	lr, r4
 81004f2:	d908      	bls.n	8100506 <__udivmoddi4+0x156>
 81004f4:	eb1c 0404 	adds.w	r4, ip, r4
 81004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 81004fc:	d202      	bcs.n	8100504 <__udivmoddi4+0x154>
 81004fe:	45a6      	cmp	lr, r4
 8100500:	f200 80bb 	bhi.w	810067a <__udivmoddi4+0x2ca>
 8100504:	4608      	mov	r0, r1
 8100506:	eba4 040e 	sub.w	r4, r4, lr
 810050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 810050e:	e79c      	b.n	810044a <__udivmoddi4+0x9a>
 8100510:	f1c6 0720 	rsb	r7, r6, #32
 8100514:	40b3      	lsls	r3, r6
 8100516:	fa22 fc07 	lsr.w	ip, r2, r7
 810051a:	ea4c 0c03 	orr.w	ip, ip, r3
 810051e:	fa20 f407 	lsr.w	r4, r0, r7
 8100522:	fa01 f306 	lsl.w	r3, r1, r6
 8100526:	431c      	orrs	r4, r3
 8100528:	40f9      	lsrs	r1, r7
 810052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 810052e:	fa00 f306 	lsl.w	r3, r0, r6
 8100532:	fbb1 f8f9 	udiv	r8, r1, r9
 8100536:	0c20      	lsrs	r0, r4, #16
 8100538:	fa1f fe8c 	uxth.w	lr, ip
 810053c:	fb09 1118 	mls	r1, r9, r8, r1
 8100540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100544:	fb08 f00e 	mul.w	r0, r8, lr
 8100548:	4288      	cmp	r0, r1
 810054a:	fa02 f206 	lsl.w	r2, r2, r6
 810054e:	d90b      	bls.n	8100568 <__udivmoddi4+0x1b8>
 8100550:	eb1c 0101 	adds.w	r1, ip, r1
 8100554:	f108 3aff 	add.w	sl, r8, #4294967295
 8100558:	f080 8088 	bcs.w	810066c <__udivmoddi4+0x2bc>
 810055c:	4288      	cmp	r0, r1
 810055e:	f240 8085 	bls.w	810066c <__udivmoddi4+0x2bc>
 8100562:	f1a8 0802 	sub.w	r8, r8, #2
 8100566:	4461      	add	r1, ip
 8100568:	1a09      	subs	r1, r1, r0
 810056a:	b2a4      	uxth	r4, r4
 810056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8100570:	fb09 1110 	mls	r1, r9, r0, r1
 8100574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100578:	fb00 fe0e 	mul.w	lr, r0, lr
 810057c:	458e      	cmp	lr, r1
 810057e:	d908      	bls.n	8100592 <__udivmoddi4+0x1e2>
 8100580:	eb1c 0101 	adds.w	r1, ip, r1
 8100584:	f100 34ff 	add.w	r4, r0, #4294967295
 8100588:	d26c      	bcs.n	8100664 <__udivmoddi4+0x2b4>
 810058a:	458e      	cmp	lr, r1
 810058c:	d96a      	bls.n	8100664 <__udivmoddi4+0x2b4>
 810058e:	3802      	subs	r0, #2
 8100590:	4461      	add	r1, ip
 8100592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8100596:	fba0 9402 	umull	r9, r4, r0, r2
 810059a:	eba1 010e 	sub.w	r1, r1, lr
 810059e:	42a1      	cmp	r1, r4
 81005a0:	46c8      	mov	r8, r9
 81005a2:	46a6      	mov	lr, r4
 81005a4:	d356      	bcc.n	8100654 <__udivmoddi4+0x2a4>
 81005a6:	d053      	beq.n	8100650 <__udivmoddi4+0x2a0>
 81005a8:	b15d      	cbz	r5, 81005c2 <__udivmoddi4+0x212>
 81005aa:	ebb3 0208 	subs.w	r2, r3, r8
 81005ae:	eb61 010e 	sbc.w	r1, r1, lr
 81005b2:	fa01 f707 	lsl.w	r7, r1, r7
 81005b6:	fa22 f306 	lsr.w	r3, r2, r6
 81005ba:	40f1      	lsrs	r1, r6
 81005bc:	431f      	orrs	r7, r3
 81005be:	e9c5 7100 	strd	r7, r1, [r5]
 81005c2:	2600      	movs	r6, #0
 81005c4:	4631      	mov	r1, r6
 81005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81005ca:	f1c2 0320 	rsb	r3, r2, #32
 81005ce:	40d8      	lsrs	r0, r3
 81005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 81005d4:	fa21 f303 	lsr.w	r3, r1, r3
 81005d8:	4091      	lsls	r1, r2
 81005da:	4301      	orrs	r1, r0
 81005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81005e0:	fa1f fe8c 	uxth.w	lr, ip
 81005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 81005e8:	fb07 3610 	mls	r6, r7, r0, r3
 81005ec:	0c0b      	lsrs	r3, r1, #16
 81005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 81005f2:	fb00 f60e 	mul.w	r6, r0, lr
 81005f6:	429e      	cmp	r6, r3
 81005f8:	fa04 f402 	lsl.w	r4, r4, r2
 81005fc:	d908      	bls.n	8100610 <__udivmoddi4+0x260>
 81005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8100602:	f100 38ff 	add.w	r8, r0, #4294967295
 8100606:	d22f      	bcs.n	8100668 <__udivmoddi4+0x2b8>
 8100608:	429e      	cmp	r6, r3
 810060a:	d92d      	bls.n	8100668 <__udivmoddi4+0x2b8>
 810060c:	3802      	subs	r0, #2
 810060e:	4463      	add	r3, ip
 8100610:	1b9b      	subs	r3, r3, r6
 8100612:	b289      	uxth	r1, r1
 8100614:	fbb3 f6f7 	udiv	r6, r3, r7
 8100618:	fb07 3316 	mls	r3, r7, r6, r3
 810061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100620:	fb06 f30e 	mul.w	r3, r6, lr
 8100624:	428b      	cmp	r3, r1
 8100626:	d908      	bls.n	810063a <__udivmoddi4+0x28a>
 8100628:	eb1c 0101 	adds.w	r1, ip, r1
 810062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8100630:	d216      	bcs.n	8100660 <__udivmoddi4+0x2b0>
 8100632:	428b      	cmp	r3, r1
 8100634:	d914      	bls.n	8100660 <__udivmoddi4+0x2b0>
 8100636:	3e02      	subs	r6, #2
 8100638:	4461      	add	r1, ip
 810063a:	1ac9      	subs	r1, r1, r3
 810063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100640:	e738      	b.n	81004b4 <__udivmoddi4+0x104>
 8100642:	462e      	mov	r6, r5
 8100644:	4628      	mov	r0, r5
 8100646:	e705      	b.n	8100454 <__udivmoddi4+0xa4>
 8100648:	4606      	mov	r6, r0
 810064a:	e6e3      	b.n	8100414 <__udivmoddi4+0x64>
 810064c:	4618      	mov	r0, r3
 810064e:	e6f8      	b.n	8100442 <__udivmoddi4+0x92>
 8100650:	454b      	cmp	r3, r9
 8100652:	d2a9      	bcs.n	81005a8 <__udivmoddi4+0x1f8>
 8100654:	ebb9 0802 	subs.w	r8, r9, r2
 8100658:	eb64 0e0c 	sbc.w	lr, r4, ip
 810065c:	3801      	subs	r0, #1
 810065e:	e7a3      	b.n	81005a8 <__udivmoddi4+0x1f8>
 8100660:	4646      	mov	r6, r8
 8100662:	e7ea      	b.n	810063a <__udivmoddi4+0x28a>
 8100664:	4620      	mov	r0, r4
 8100666:	e794      	b.n	8100592 <__udivmoddi4+0x1e2>
 8100668:	4640      	mov	r0, r8
 810066a:	e7d1      	b.n	8100610 <__udivmoddi4+0x260>
 810066c:	46d0      	mov	r8, sl
 810066e:	e77b      	b.n	8100568 <__udivmoddi4+0x1b8>
 8100670:	3b02      	subs	r3, #2
 8100672:	4461      	add	r1, ip
 8100674:	e732      	b.n	81004dc <__udivmoddi4+0x12c>
 8100676:	4630      	mov	r0, r6
 8100678:	e709      	b.n	810048e <__udivmoddi4+0xde>
 810067a:	4464      	add	r4, ip
 810067c:	3802      	subs	r0, #2
 810067e:	e742      	b.n	8100506 <__udivmoddi4+0x156>

08100680 <__aeabi_idiv0>:
 8100680:	4770      	bx	lr
 8100682:	bf00      	nop

08100684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100684:	b480      	push	{r7}
 8100686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100688:	4b09      	ldr	r3, [pc, #36]	; (81006b0 <SystemInit+0x2c>)
 810068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810068e:	4a08      	ldr	r2, [pc, #32]	; (81006b0 <SystemInit+0x2c>)
 8100690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100698:	4b05      	ldr	r3, [pc, #20]	; (81006b0 <SystemInit+0x2c>)
 810069a:	691b      	ldr	r3, [r3, #16]
 810069c:	4a04      	ldr	r2, [pc, #16]	; (81006b0 <SystemInit+0x2c>)
 810069e:	f043 0310 	orr.w	r3, r3, #16
 81006a2:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81006a4:	bf00      	nop
 81006a6:	46bd      	mov	sp, r7
 81006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ac:	4770      	bx	lr
 81006ae:	bf00      	nop
 81006b0:	e000ed00 	.word	0xe000ed00

081006b4 <start_PWM>:
#include "level_2/init_CM4.h"


void start_PWM(void)
/* start_PWM: Function which initialises the PWM TIMERs 2,13,14. */
{
 81006b4:	b580      	push	{r7, lr}
 81006b6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 81006b8:	2100      	movs	r1, #0
 81006ba:	4808      	ldr	r0, [pc, #32]	; (81006dc <start_PWM+0x28>)
 81006bc:	f006 fe4e 	bl	810735c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 81006c0:	2100      	movs	r1, #0
 81006c2:	4807      	ldr	r0, [pc, #28]	; (81006e0 <start_PWM+0x2c>)
 81006c4:	f006 fe4a 	bl	810735c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 81006c8:	2108      	movs	r1, #8
 81006ca:	4806      	ldr	r0, [pc, #24]	; (81006e4 <start_PWM+0x30>)
 81006cc:	f006 fe46 	bl	810735c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 81006d0:	210c      	movs	r1, #12
 81006d2:	4804      	ldr	r0, [pc, #16]	; (81006e4 <start_PWM+0x30>)
 81006d4:	f006 fe42 	bl	810735c <HAL_TIM_PWM_Start>
}
 81006d8:	bf00      	nop
 81006da:	bd80      	pop	{r7, pc}
 81006dc:	100002cc 	.word	0x100002cc
 81006e0:	10000318 	.word	0x10000318
 81006e4:	1000019c 	.word	0x1000019c

081006e8 <init_Movement>:

void init_Movement(void)
/* start_Movement: Function which initialises the motors and servos */
{
 81006e8:	b580      	push	{r7, lr}
 81006ea:	af00      	add	r7, sp, #0
	initMotors();
 81006ec:	f000 fb6a 	bl	8100dc4 <initMotors>
	set_Enable_Power();
 81006f0:	f001 f830 	bl	8101754 <set_Enable_Power>
	start_PWM();
 81006f4:	f7ff ffde 	bl	81006b4 <start_PWM>
}
 81006f8:	bf00      	nop
 81006fa:	bd80      	pop	{r7, pc}

081006fc <init_MX_init>:

void init_MX_init(void)
/* start_MX_init: Function which initialises the STM32H peripherals */
{
 81006fc:	b580      	push	{r7, lr}
 81006fe:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8100700:	f000 fd7c 	bl	81011fc <MX_ADC1_Init>
	MX_I2C1_Init();
 8100704:	f001 f860 	bl	81017c8 <MX_I2C1_Init>
	MX_TIM2_Init();
 8100708:	f001 f95a 	bl	81019c0 <MX_TIM2_Init>
	MX_TIM3_Init();
 810070c:	f001 f9bc 	bl	8101a88 <MX_TIM3_Init>
	MX_TIM4_Init();
 8100710:	f001 fa10 	bl	8101b34 <MX_TIM4_Init>
	MX_TIM7_Init();
 8100714:	f001 fa64 	bl	8101be0 <MX_TIM7_Init>
	MX_TIM13_Init();
 8100718:	f001 fa98 	bl	8101c4c <MX_TIM13_Init>
	MX_TIM14_Init();
 810071c:	f001 fae4 	bl	8101ce8 <MX_TIM14_Init>

	HAL_TIM_Base_Start_IT(&htim7); // activate interrupt for TIM7
 8100720:	4802      	ldr	r0, [pc, #8]	; (810072c <init_MX_init+0x30>)
 8100722:	f006 fd4b 	bl	81071bc <HAL_TIM_Base_Start_IT>

}
 8100726:	bf00      	nop
 8100728:	bd80      	pop	{r7, pc}
 810072a:	bf00      	nop
 810072c:	10000280 	.word	0x10000280

08100730 <init_Start_Up>:
void init_Start_Up(void)
/* init_Start_Up: Function to initialise the whole system and set inital values to PWMs
 *	The microcontroller peripherals. The Motors and Servos.
 *	Homes the servos.
 */
{
 8100730:	b580      	push	{r7, lr}
 8100732:	af00      	add	r7, sp, #0
	send_msg((uint8_t*)"\r!Initialising Micro-controller Signals!\n\r");
 8100734:	481c      	ldr	r0, [pc, #112]	; (81007a8 <init_Start_Up+0x78>)
 8100736:	f001 fe0f 	bl	8102358 <send_msg>
	init_MX_init();
 810073a:	f7ff ffdf 	bl	81006fc <init_MX_init>
	HAL_Delay(50);
 810073e:	2032      	movs	r0, #50	; 0x32
 8100740:	f001 ff00 	bl	8102544 <HAL_Delay>

	send_msg((uint8_t*)"\r!Initialising movement signals!\n\r");
 8100744:	4819      	ldr	r0, [pc, #100]	; (81007ac <init_Start_Up+0x7c>)
 8100746:	f001 fe07 	bl	8102358 <send_msg>
	init_Movement();
 810074a:	f7ff ffcd 	bl	81006e8 <init_Movement>
	HAL_Delay(50);
 810074e:	2032      	movs	r0, #50	; 0x32
 8100750:	f001 fef8 	bl	8102544 <HAL_Delay>

	send_msg((uint8_t*)"\rHoming Motors\n\r");
 8100754:	4816      	ldr	r0, [pc, #88]	; (81007b0 <init_Start_Up+0x80>)
 8100756:	f001 fdff 	bl	8102358 <send_msg>
	HAL_Delay(50);
 810075a:	2032      	movs	r0, #50	; 0x32
 810075c:	f001 fef2 	bl	8102544 <HAL_Delay>

	HomeMotors(1, 1); // homing motors
 8100760:	2101      	movs	r1, #1
 8100762:	2001      	movs	r0, #1
 8100764:	f000 fb36 	bl	8100dd4 <HomeMotors>
	HAL_Delay(50);
 8100768:	2032      	movs	r0, #50	; 0x32
 810076a:	f001 feeb 	bl	8102544 <HAL_Delay>

	send_msg((uint8_t*)"\r########Motors Homed########\n\r");
 810076e:	4811      	ldr	r0, [pc, #68]	; (81007b4 <init_Start_Up+0x84>)
 8100770:	f001 fdf2 	bl	8102358 <send_msg>
	HAL_Delay(50);
 8100774:	2032      	movs	r0, #50	; 0x32
 8100776:	f001 fee5 	bl	8102544 <HAL_Delay>

	send_msg((uint8_t*)"\rHoming servos\n\r");
 810077a:	480f      	ldr	r0, [pc, #60]	; (81007b8 <init_Start_Up+0x88>)
 810077c:	f001 fdec 	bl	8102358 <send_msg>
	HAL_Delay(50);
 8100780:	2032      	movs	r0, #50	; 0x32
 8100782:	f001 fedf 	bl	8102544 <HAL_Delay>

	set_Slide_Servo(SLIDE_CLOSED);
 8100786:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 810078a:	f000 fc17 	bl	8100fbc <set_Slide_Servo>
	set_Rotate_Servo(ROTATE_NEUTRAL);
 810078e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 81007bc <init_Start_Up+0x8c>
 8100792:	f000 fbdd 	bl	8100f50 <set_Rotate_Servo>
	send_msg((uint8_t*)"\r########Servos Homed########\n\r");
 8100796:	480a      	ldr	r0, [pc, #40]	; (81007c0 <init_Start_Up+0x90>)
 8100798:	f001 fdde 	bl	8102358 <send_msg>
	HAL_Delay(50);
 810079c:	2032      	movs	r0, #50	; 0x32
 810079e:	f001 fed1 	bl	8102544 <HAL_Delay>

}
 81007a2:	bf00      	nop
 81007a4:	bd80      	pop	{r7, pc}
 81007a6:	bf00      	nop
 81007a8:	0810a118 	.word	0x0810a118
 81007ac:	0810a144 	.word	0x0810a144
 81007b0:	0810a168 	.word	0x0810a168
 81007b4:	0810a17c 	.word	0x0810a17c
 81007b8:	0810a19c 	.word	0x0810a19c
 81007bc:	40a9999a 	.word	0x40a9999a
 81007c0:	0810a1b0 	.word	0x0810a1b0

081007c4 <separate_tokens>:
/* separate_tokens: Function which separates tokens to robot/user storage
 *
 * Shoots yellow token, or gives signal to move red token
 *
 */
{
 81007c4:	b580      	push	{r7, lr}
 81007c6:	b084      	sub	sp, #16
 81007c8:	af00      	add	r7, sp, #0
 81007ca:	6078      	str	r0, [r7, #4]
	int value_rgb = 0;
 81007cc:	2300      	movs	r3, #0
 81007ce:	60fb      	str	r3, [r7, #12]

	value_rgb = rgb_read_sensor(self); // store sensor readings
 81007d0:	6878      	ldr	r0, [r7, #4]
 81007d2:	f000 f943 	bl	8100a5c <rgb_read_sensor>
 81007d6:	60f8      	str	r0, [r7, #12]

	switch (value_rgb)
 81007d8:	68fb      	ldr	r3, [r7, #12]
 81007da:	2b03      	cmp	r3, #3
 81007dc:	d011      	beq.n	8100802 <separate_tokens+0x3e>
 81007de:	68fb      	ldr	r3, [r7, #12]
 81007e0:	2b03      	cmp	r3, #3
 81007e2:	dc12      	bgt.n	810080a <separate_tokens+0x46>
 81007e4:	68fb      	ldr	r3, [r7, #12]
 81007e6:	2b00      	cmp	r3, #0
 81007e8:	d003      	beq.n	81007f2 <separate_tokens+0x2e>
 81007ea:	68fb      	ldr	r3, [r7, #12]
 81007ec:	2b01      	cmp	r3, #1
 81007ee:	d004      	beq.n	81007fa <separate_tokens+0x36>
 81007f0:	e00b      	b.n	810080a <separate_tokens+0x46>
	{
	case 0: 	// yellow token
		send_msg((uint8_t*)"\rThe colour of the token is YELLOW!\n\r");
 81007f2:	480a      	ldr	r0, [pc, #40]	; (810081c <separate_tokens+0x58>)
 81007f4:	f001 fdb0 	bl	8102358 <send_msg>
		set_Flipper();
		HAL_Delay(5);
		reset_Flipper();
		break;
		*/
		break;
 81007f8:	e00b      	b.n	8100812 <separate_tokens+0x4e>

	case 1: 	// red token
		send_msg((uint8_t*)"\rThe colour of the token is RED!\n\r");
 81007fa:	4809      	ldr	r0, [pc, #36]	; (8100820 <separate_tokens+0x5c>)
 81007fc:	f001 fdac 	bl	8102358 <send_msg>
		break;
 8100800:	e007      	b.n	8100812 <separate_tokens+0x4e>

	case 3:		// no token present
		send_msg((uint8_t*)"\rNo token is present!\n\r");
 8100802:	4808      	ldr	r0, [pc, #32]	; (8100824 <separate_tokens+0x60>)
 8100804:	f001 fda8 	bl	8102358 <send_msg>
		break;
 8100808:	e003      	b.n	8100812 <separate_tokens+0x4e>

	default:
		send_msg((uint8_t*)"\rDEF:No token is present!\n\r");
 810080a:	4807      	ldr	r0, [pc, #28]	; (8100828 <separate_tokens+0x64>)
 810080c:	f001 fda4 	bl	8102358 <send_msg>
		break;
 8100810:	bf00      	nop
	}
	return value_rgb;
 8100812:	68fb      	ldr	r3, [r7, #12]
}
 8100814:	4618      	mov	r0, r3
 8100816:	3710      	adds	r7, #16
 8100818:	46bd      	mov	sp, r7
 810081a:	bd80      	pop	{r7, pc}
 810081c:	0810a1d0 	.word	0x0810a1d0
 8100820:	0810a1f8 	.word	0x0810a1f8
 8100824:	0810a21c 	.word	0x0810a21c
 8100828:	0810a234 	.word	0x0810a234

0810082c <init_coinDetector>:
	}
	return stack;
}

void init_coinDetector(void)
{
 810082c:	b580      	push	{r7, lr}
 810082e:	b084      	sub	sp, #16
 8100830:	af02      	add	r7, sp, #8
	uint8_t inputPorts = 0;
 8100832:	2300      	movs	r3, #0
 8100834:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef dev_Status;
	uint8_t data = 0xFF;
 8100836:	23ff      	movs	r3, #255	; 0xff
 8100838:	717b      	strb	r3, [r7, #5]

	// Program command byte:
	// configuration register [0x03] sets all ports as inputs (1)
	dev_Status = i2c_Transmit(&hi2c1, CD_ADD, 0x03, 1, &data, 1);
 810083a:	2301      	movs	r3, #1
 810083c:	9301      	str	r3, [sp, #4]
 810083e:	1d7b      	adds	r3, r7, #5
 8100840:	9300      	str	r3, [sp, #0]
 8100842:	2301      	movs	r3, #1
 8100844:	2203      	movs	r2, #3
 8100846:	2138      	movs	r1, #56	; 0x38
 8100848:	4811      	ldr	r0, [pc, #68]	; (8100890 <init_coinDetector+0x64>)
 810084a:	f001 f863 	bl	8101914 <i2c_Transmit>
 810084e:	4603      	mov	r3, r0
 8100850:	71fb      	strb	r3, [r7, #7]

	if (dev_Status != HAL_OK) // if device is not OK
 8100852:	79fb      	ldrb	r3, [r7, #7]
 8100854:	2b00      	cmp	r3, #0
 8100856:	d003      	beq.n	8100860 <init_coinDetector+0x34>
	{
		send_msg((uint8_t*) "\r¡User-Detector Initialisation FAILED¡\n\r");
 8100858:	480e      	ldr	r0, [pc, #56]	; (8100894 <init_coinDetector+0x68>)
 810085a:	f001 fd7d 	bl	8102358 <send_msg>
 810085e:	e013      	b.n	8100888 <init_coinDetector+0x5c>
		return;
	}
	else
	{
		send_msg((uint8_t*) "\r!User-Detector Initialised!\n\r");
 8100860:	480d      	ldr	r0, [pc, #52]	; (8100898 <init_coinDetector+0x6c>)
 8100862:	f001 fd79 	bl	8102358 <send_msg>
	}

	dev_Status = i2c_Receive(&hi2c1, CD_ADD, 0x03, 1, &inputPorts, 1);
 8100866:	2301      	movs	r3, #1
 8100868:	9301      	str	r3, [sp, #4]
 810086a:	1dbb      	adds	r3, r7, #6
 810086c:	9300      	str	r3, [sp, #0]
 810086e:	2301      	movs	r3, #1
 8100870:	2203      	movs	r2, #3
 8100872:	2138      	movs	r1, #56	; 0x38
 8100874:	4806      	ldr	r0, [pc, #24]	; (8100890 <init_coinDetector+0x64>)
 8100876:	f001 f876 	bl	8101966 <i2c_Receive>
 810087a:	4603      	mov	r3, r0
 810087c:	71fb      	strb	r3, [r7, #7]

	inputPorts &= ~0x01;
 810087e:	79bb      	ldrb	r3, [r7, #6]
 8100880:	f023 0301 	bic.w	r3, r3, #1
 8100884:	b2db      	uxtb	r3, r3
 8100886:	71bb      	strb	r3, [r7, #6]
	// Program command byte:
	// Preparing the device to read input port register

}
 8100888:	3708      	adds	r7, #8
 810088a:	46bd      	mov	sp, r7
 810088c:	bd80      	pop	{r7, pc}
 810088e:	bf00      	nop
 8100890:	10000150 	.word	0x10000150
 8100894:	0810a250 	.word	0x0810a250
 8100898:	0810a27c 	.word	0x0810a27c

0810089c <queryLightGate>:
 * -2: Error from PCA9554
 * -1: All gates are free
 * 1-7: Stack where gate is blocked
 * 9: More than one gate is blocked
 */
{
 810089c:	b580      	push	{r7, lr}
 810089e:	b084      	sub	sp, #16
 81008a0:	af02      	add	r7, sp, #8
	 0100 1011 - 0x4B
	 0100 1101 - 0x4D
	 0100 1111 - 0x4F
	 */
	// Program command byte: Reading the input port [0x00] register
	dev_Status = i2c_Receive(&hi2c1, CD_ADD, 0x00, 1, &cd, sizeof(cd));
 81008a2:	2301      	movs	r3, #1
 81008a4:	9301      	str	r3, [sp, #4]
 81008a6:	1d7b      	adds	r3, r7, #5
 81008a8:	9300      	str	r3, [sp, #0]
 81008aa:	2301      	movs	r3, #1
 81008ac:	2200      	movs	r2, #0
 81008ae:	2138      	movs	r1, #56	; 0x38
 81008b0:	484b      	ldr	r0, [pc, #300]	; (81009e0 <queryLightGate+0x144>)
 81008b2:	f001 f858 	bl	8101966 <i2c_Receive>
 81008b6:	4603      	mov	r3, r0
 81008b8:	71fb      	strb	r3, [r7, #7]
	cd_full = cd;
 81008ba:	797b      	ldrb	r3, [r7, #5]
 81008bc:	71bb      	strb	r3, [r7, #6]

	if (dev_Status != HAL_OK)
 81008be:	79fb      	ldrb	r3, [r7, #7]
 81008c0:	2b00      	cmp	r3, #0
 81008c2:	d002      	beq.n	81008ca <queryLightGate+0x2e>
	{
		return -2;
 81008c4:	f06f 0301 	mvn.w	r3, #1
 81008c8:	e085      	b.n	81009d6 <queryLightGate+0x13a>
	}
	else
	{
		/* Remove LSB: is always 1 */
		cd &= ~0x01;
 81008ca:	797b      	ldrb	r3, [r7, #5]
 81008cc:	f023 0301 	bic.w	r3, r3, #1
 81008d0:	b2db      	uxtb	r3, r3
 81008d2:	717b      	strb	r3, [r7, #5]

		/* Check if empty: */
		if (!cd)
 81008d4:	797b      	ldrb	r3, [r7, #5]
 81008d6:	2b00      	cmp	r3, #0
 81008d8:	d102      	bne.n	81008e0 <queryLightGate+0x44>
			return -1;
 81008da:	f04f 33ff 	mov.w	r3, #4294967295
 81008de:	e07a      	b.n	81009d6 <queryLightGate+0x13a>

		if (cd == 0x02)
 81008e0:	797b      	ldrb	r3, [r7, #5]
 81008e2:	2b02      	cmp	r3, #2
 81008e4:	d101      	bne.n	81008ea <queryLightGate+0x4e>
		{
			return 7;
 81008e6:	2307      	movs	r3, #7
 81008e8:	e075      	b.n	81009d6 <queryLightGate+0x13a>
		}
		if (cd == 0x04)
 81008ea:	797b      	ldrb	r3, [r7, #5]
 81008ec:	2b04      	cmp	r3, #4
 81008ee:	d101      	bne.n	81008f4 <queryLightGate+0x58>
		{
			return 6;
 81008f0:	2306      	movs	r3, #6
 81008f2:	e070      	b.n	81009d6 <queryLightGate+0x13a>
		}
		if (cd == 0x08)
 81008f4:	797b      	ldrb	r3, [r7, #5]
 81008f6:	2b08      	cmp	r3, #8
 81008f8:	d101      	bne.n	81008fe <queryLightGate+0x62>
		{
			return 5;
 81008fa:	2305      	movs	r3, #5
 81008fc:	e06b      	b.n	81009d6 <queryLightGate+0x13a>
		}
		if (cd == 0x10)
 81008fe:	797b      	ldrb	r3, [r7, #5]
 8100900:	2b10      	cmp	r3, #16
 8100902:	d101      	bne.n	8100908 <queryLightGate+0x6c>
		{
			return 3; 	// flipped in hardware
 8100904:	2303      	movs	r3, #3
 8100906:	e066      	b.n	81009d6 <queryLightGate+0x13a>
		}
		if (cd == 0x20)
 8100908:	797b      	ldrb	r3, [r7, #5]
 810090a:	2b20      	cmp	r3, #32
 810090c:	d101      	bne.n	8100912 <queryLightGate+0x76>
		{
			return 4; 	// flipped in hardware
 810090e:	2304      	movs	r3, #4
 8100910:	e061      	b.n	81009d6 <queryLightGate+0x13a>
		}
		if (cd == 0x40)
 8100912:	797b      	ldrb	r3, [r7, #5]
 8100914:	2b40      	cmp	r3, #64	; 0x40
 8100916:	d101      	bne.n	810091c <queryLightGate+0x80>
		{
			return 1; 	// flipped in hardware
 8100918:	2301      	movs	r3, #1
 810091a:	e05c      	b.n	81009d6 <queryLightGate+0x13a>
		}
		if (cd == 0x80)
 810091c:	797b      	ldrb	r3, [r7, #5]
 810091e:	2b80      	cmp	r3, #128	; 0x80
 8100920:	d101      	bne.n	8100926 <queryLightGate+0x8a>
		{
			return 2; 	// flipped in hardware
 8100922:	2302      	movs	r3, #2
 8100924:	e057      	b.n	81009d6 <queryLightGate+0x13a>
		}

		//More than one coin
		if ((cd >> 1) & 1)
 8100926:	797b      	ldrb	r3, [r7, #5]
 8100928:	085b      	lsrs	r3, r3, #1
 810092a:	b2db      	uxtb	r3, r3
 810092c:	f003 0301 	and.w	r3, r3, #1
 8100930:	2b00      	cmp	r3, #0
 8100932:	d004      	beq.n	810093e <queryLightGate+0xa2>
		{
			mem_Board[7 - 1]++;
 8100934:	4b2b      	ldr	r3, [pc, #172]	; (81009e4 <queryLightGate+0x148>)
 8100936:	699b      	ldr	r3, [r3, #24]
 8100938:	3301      	adds	r3, #1
 810093a:	4a2a      	ldr	r2, [pc, #168]	; (81009e4 <queryLightGate+0x148>)
 810093c:	6193      	str	r3, [r2, #24]
		}
		if ((cd >> 2) & 1)
 810093e:	797b      	ldrb	r3, [r7, #5]
 8100940:	089b      	lsrs	r3, r3, #2
 8100942:	b2db      	uxtb	r3, r3
 8100944:	f003 0301 	and.w	r3, r3, #1
 8100948:	2b00      	cmp	r3, #0
 810094a:	d004      	beq.n	8100956 <queryLightGate+0xba>
		{
			mem_Board[6 - 1]++;
 810094c:	4b25      	ldr	r3, [pc, #148]	; (81009e4 <queryLightGate+0x148>)
 810094e:	695b      	ldr	r3, [r3, #20]
 8100950:	3301      	adds	r3, #1
 8100952:	4a24      	ldr	r2, [pc, #144]	; (81009e4 <queryLightGate+0x148>)
 8100954:	6153      	str	r3, [r2, #20]
		}
		if ((cd >> 3) & 1)
 8100956:	797b      	ldrb	r3, [r7, #5]
 8100958:	08db      	lsrs	r3, r3, #3
 810095a:	b2db      	uxtb	r3, r3
 810095c:	f003 0301 	and.w	r3, r3, #1
 8100960:	2b00      	cmp	r3, #0
 8100962:	d004      	beq.n	810096e <queryLightGate+0xd2>
		{
			mem_Board[5 - 1]++;
 8100964:	4b1f      	ldr	r3, [pc, #124]	; (81009e4 <queryLightGate+0x148>)
 8100966:	691b      	ldr	r3, [r3, #16]
 8100968:	3301      	adds	r3, #1
 810096a:	4a1e      	ldr	r2, [pc, #120]	; (81009e4 <queryLightGate+0x148>)
 810096c:	6113      	str	r3, [r2, #16]
		}
		if ((cd >> 4) & 1)
 810096e:	797b      	ldrb	r3, [r7, #5]
 8100970:	091b      	lsrs	r3, r3, #4
 8100972:	b2db      	uxtb	r3, r3
 8100974:	f003 0301 	and.w	r3, r3, #1
 8100978:	2b00      	cmp	r3, #0
 810097a:	d004      	beq.n	8100986 <queryLightGate+0xea>
		{
			mem_Board[3 - 1]++;
 810097c:	4b19      	ldr	r3, [pc, #100]	; (81009e4 <queryLightGate+0x148>)
 810097e:	689b      	ldr	r3, [r3, #8]
 8100980:	3301      	adds	r3, #1
 8100982:	4a18      	ldr	r2, [pc, #96]	; (81009e4 <queryLightGate+0x148>)
 8100984:	6093      	str	r3, [r2, #8]
		}
		if ((cd >> 5) & 1)
 8100986:	797b      	ldrb	r3, [r7, #5]
 8100988:	095b      	lsrs	r3, r3, #5
 810098a:	b2db      	uxtb	r3, r3
 810098c:	f003 0301 	and.w	r3, r3, #1
 8100990:	2b00      	cmp	r3, #0
 8100992:	d004      	beq.n	810099e <queryLightGate+0x102>
		{
			mem_Board[4 - 1]++;
 8100994:	4b13      	ldr	r3, [pc, #76]	; (81009e4 <queryLightGate+0x148>)
 8100996:	68db      	ldr	r3, [r3, #12]
 8100998:	3301      	adds	r3, #1
 810099a:	4a12      	ldr	r2, [pc, #72]	; (81009e4 <queryLightGate+0x148>)
 810099c:	60d3      	str	r3, [r2, #12]
		}
		if ((cd >> 6) & 1)
 810099e:	797b      	ldrb	r3, [r7, #5]
 81009a0:	099b      	lsrs	r3, r3, #6
 81009a2:	b2db      	uxtb	r3, r3
 81009a4:	f003 0301 	and.w	r3, r3, #1
 81009a8:	2b00      	cmp	r3, #0
 81009aa:	d004      	beq.n	81009b6 <queryLightGate+0x11a>
		{
			mem_Board[1 - 1]++;
 81009ac:	4b0d      	ldr	r3, [pc, #52]	; (81009e4 <queryLightGate+0x148>)
 81009ae:	681b      	ldr	r3, [r3, #0]
 81009b0:	3301      	adds	r3, #1
 81009b2:	4a0c      	ldr	r2, [pc, #48]	; (81009e4 <queryLightGate+0x148>)
 81009b4:	6013      	str	r3, [r2, #0]
		}
		if ((cd >> 7) & 1)
 81009b6:	797b      	ldrb	r3, [r7, #5]
 81009b8:	09db      	lsrs	r3, r3, #7
 81009ba:	b2db      	uxtb	r3, r3
 81009bc:	f003 0301 	and.w	r3, r3, #1
 81009c0:	2b00      	cmp	r3, #0
 81009c2:	d004      	beq.n	81009ce <queryLightGate+0x132>
		{
			mem_Board[2 - 1]++;
 81009c4:	4b07      	ldr	r3, [pc, #28]	; (81009e4 <queryLightGate+0x148>)
 81009c6:	685b      	ldr	r3, [r3, #4]
 81009c8:	3301      	adds	r3, #1
 81009ca:	4a06      	ldr	r2, [pc, #24]	; (81009e4 <queryLightGate+0x148>)
 81009cc:	6053      	str	r3, [r2, #4]
		}
		sens = 0;
 81009ce:	4b06      	ldr	r3, [pc, #24]	; (81009e8 <queryLightGate+0x14c>)
 81009d0:	2200      	movs	r2, #0
 81009d2:	601a      	str	r2, [r3, #0]
		return 9;
 81009d4:	2309      	movs	r3, #9
	}
}
 81009d6:	4618      	mov	r0, r3
 81009d8:	3708      	adds	r7, #8
 81009da:	46bd      	mov	sp, r7
 81009dc:	bd80      	pop	{r7, pc}
 81009de:	bf00      	nop
 81009e0:	10000150 	.word	0x10000150
 81009e4:	10000094 	.word	0x10000094
 81009e8:	10000008 	.word	0x10000008

081009ec <TCS3472_Create>:
int yellow = 0;
int rgb_error = 0;

TCS3472 TCS3472_Create(uint8_t addr, I2C_HandleTypeDef *handle)
/* Structure with the address and I2C handle of the RGB Sensor */
{
 81009ec:	b480      	push	{r7}
 81009ee:	b087      	sub	sp, #28
 81009f0:	af00      	add	r7, sp, #0
 81009f2:	60f8      	str	r0, [r7, #12]
 81009f4:	460b      	mov	r3, r1
 81009f6:	607a      	str	r2, [r7, #4]
 81009f8:	72fb      	strb	r3, [r7, #11]
	//create structure of RBG sensor data
	TCS3472 sensor_data =
 81009fa:	7afb      	ldrb	r3, [r7, #11]
 81009fc:	743b      	strb	r3, [r7, #16]
 81009fe:	687b      	ldr	r3, [r7, #4]
 8100a00:	617b      	str	r3, [r7, #20]
	{ addr, handle };
	return sensor_data;
 8100a02:	68fb      	ldr	r3, [r7, #12]
 8100a04:	461a      	mov	r2, r3
 8100a06:	f107 0310 	add.w	r3, r7, #16
 8100a0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8100a0e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8100a12:	68f8      	ldr	r0, [r7, #12]
 8100a14:	371c      	adds	r7, #28
 8100a16:	46bd      	mov	sp, r7
 8100a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a1c:	4770      	bx	lr
	...

08100a20 <rgb_init>:

void rgb_init(const TCS3472 *const self)
{
 8100a20:	b580      	push	{r7, lr}
 8100a22:	b082      	sub	sp, #8
 8100a24:	af00      	add	r7, sp, #0
 8100a26:	6078      	str	r0, [r7, #4]
	// command to turn on the device [0x03] sent to register [0x80]
	rgb_send(self, RGB_COMMAND_REG | RGB_REG_ENABLE,
 8100a28:	2203      	movs	r2, #3
 8100a2a:	2180      	movs	r1, #128	; 0x80
 8100a2c:	6878      	ldr	r0, [r7, #4]
 8100a2e:	f000 f86b 	bl	8100b08 <rgb_send>
			RGB_ENABLE_PON | RGB_ENABLE_AEN);

	HAL_Delay(2);
 8100a32:	2002      	movs	r0, #2
 8100a34:	f001 fd86 	bl	8102544 <HAL_Delay>
	// 0xFF = 2.4 ms
	// 0x00 = 700 ms
	// 0xEE = 238; (256 - 238) * 2.4 = 43.2 ms

	//  ATIME = 0xEE; sent to TIMING register [0x81]
	rgb_send(self, RGB_COMMAND_REG | RGB_REG_TIMING, 0xEE);
 8100a38:	22ee      	movs	r2, #238	; 0xee
 8100a3a:	2181      	movs	r1, #129	; 0x81
 8100a3c:	6878      	ldr	r0, [r7, #4]
 8100a3e:	f000 f863 	bl	8100b08 <rgb_send>
	HAL_Delay(10);
 8100a42:	200a      	movs	r0, #10
 8100a44:	f001 fd7e 	bl	8102544 <HAL_Delay>
	send_msg((uint8_t*) "\r!RGB-Sensor Initialised!\n\r");
 8100a48:	4803      	ldr	r0, [pc, #12]	; (8100a58 <rgb_init+0x38>)
 8100a4a:	f001 fc85 	bl	8102358 <send_msg>

}
 8100a4e:	bf00      	nop
 8100a50:	3708      	adds	r7, #8
 8100a52:	46bd      	mov	sp, r7
 8100a54:	bd80      	pop	{r7, pc}
 8100a56:	bf00      	nop
 8100a58:	0810a29c 	.word	0x0810a29c

08100a5c <rgb_read_sensor>:
 * RETURNS:
 * robotCoin = 0 --> The token is yellow
 * robotCoin = 1 --> The token is red
 * robotCoin = 3 --> The token is not present
 */
{
 8100a5c:	b580      	push	{r7, lr}
 8100a5e:	b086      	sub	sp, #24
 8100a60:	af00      	add	r7, sp, #0
 8100a62:	6078      	str	r0, [r7, #4]
	struct Color sens_RGBOut;
	int robotCoin = -2; 		// arbitrary value to enter while loop
 8100a64:	f06f 0301 	mvn.w	r3, #1
 8100a68:	617b      	str	r3, [r7, #20]
	int t_it_RGB = 0;			// integration time ? interrupt time ? Can't figure out name
 8100a6a:	2300      	movs	r3, #0
 8100a6c:	613b      	str	r3, [r7, #16]
	uint16_t hue = 0;
 8100a6e:	2300      	movs	r3, #0
 8100a70:	81fb      	strh	r3, [r7, #14]

	while (robotCoin == -2) // loop until any return is reached
 8100a72:	e039      	b.n	8100ae8 <rgb_read_sensor+0x8c>
	{
		sens_RGBOut = queryRGBSensor(self); // store the structure of colours values from sens
 8100a74:	f107 0308 	add.w	r3, r7, #8
 8100a78:	6879      	ldr	r1, [r7, #4]
 8100a7a:	4618      	mov	r0, r3
 8100a7c:	f000 f85c 	bl	8100b38 <queryRGBSensor>

		// get hue value (dominant wavelength) out of RGB sensor readings
		hue = getHue(sens_RGBOut.r, sens_RGBOut.g, sens_RGBOut.b);
 8100a80:	893b      	ldrh	r3, [r7, #8]
 8100a82:	8979      	ldrh	r1, [r7, #10]
 8100a84:	89ba      	ldrh	r2, [r7, #12]
 8100a86:	4618      	mov	r0, r3
 8100a88:	f000 f8f2 	bl	8100c70 <getHue>
 8100a8c:	4603      	mov	r3, r0
 8100a8e:	81fb      	strh	r3, [r7, #14]

		if (hue >= 35 && hue <= 75)
 8100a90:	89fb      	ldrh	r3, [r7, #14]
 8100a92:	2b22      	cmp	r3, #34	; 0x22
 8100a94:	d909      	bls.n	8100aaa <rgb_read_sensor+0x4e>
 8100a96:	89fb      	ldrh	r3, [r7, #14]
 8100a98:	2b4b      	cmp	r3, #75	; 0x4b
 8100a9a:	d806      	bhi.n	8100aaa <rgb_read_sensor+0x4e>
		{
			robotCoin = 0;
 8100a9c:	2300      	movs	r3, #0
 8100a9e:	617b      	str	r3, [r7, #20]
			yellow++;
 8100aa0:	4b16      	ldr	r3, [pc, #88]	; (8100afc <rgb_read_sensor+0xa0>)
 8100aa2:	681b      	ldr	r3, [r3, #0]
 8100aa4:	3301      	adds	r3, #1
 8100aa6:	4a15      	ldr	r2, [pc, #84]	; (8100afc <rgb_read_sensor+0xa0>)
 8100aa8:	6013      	str	r3, [r2, #0]
		}
		if (hue >= 340 && hue <= 360)
 8100aaa:	89fb      	ldrh	r3, [r7, #14]
 8100aac:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8100ab0:	d30a      	bcc.n	8100ac8 <rgb_read_sensor+0x6c>
 8100ab2:	89fb      	ldrh	r3, [r7, #14]
 8100ab4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8100ab8:	d806      	bhi.n	8100ac8 <rgb_read_sensor+0x6c>
		{
			robotCoin = 1;
 8100aba:	2301      	movs	r3, #1
 8100abc:	617b      	str	r3, [r7, #20]
			red++;
 8100abe:	4b10      	ldr	r3, [pc, #64]	; (8100b00 <rgb_read_sensor+0xa4>)
 8100ac0:	681b      	ldr	r3, [r3, #0]
 8100ac2:	3301      	adds	r3, #1
 8100ac4:	4a0e      	ldr	r2, [pc, #56]	; (8100b00 <rgb_read_sensor+0xa4>)
 8100ac6:	6013      	str	r3, [r2, #0]
		}

		t_it_RGB++;
 8100ac8:	693b      	ldr	r3, [r7, #16]
 8100aca:	3301      	adds	r3, #1
 8100acc:	613b      	str	r3, [r7, #16]
		HAL_Delay(2);
 8100ace:	2002      	movs	r0, #2
 8100ad0:	f001 fd38 	bl	8102544 <HAL_Delay>
		if (t_it_RGB > 24)
 8100ad4:	693b      	ldr	r3, [r7, #16]
 8100ad6:	2b18      	cmp	r3, #24
 8100ad8:	dd06      	ble.n	8100ae8 <rgb_read_sensor+0x8c>
		{
			// no token present
			robotCoin = 3;
 8100ada:	2303      	movs	r3, #3
 8100adc:	617b      	str	r3, [r7, #20]
			rgb_error++;
 8100ade:	4b09      	ldr	r3, [pc, #36]	; (8100b04 <rgb_read_sensor+0xa8>)
 8100ae0:	681b      	ldr	r3, [r3, #0]
 8100ae2:	3301      	adds	r3, #1
 8100ae4:	4a07      	ldr	r2, [pc, #28]	; (8100b04 <rgb_read_sensor+0xa8>)
 8100ae6:	6013      	str	r3, [r2, #0]
	while (robotCoin == -2) // loop until any return is reached
 8100ae8:	697b      	ldr	r3, [r7, #20]
 8100aea:	f113 0f02 	cmn.w	r3, #2
 8100aee:	d0c1      	beq.n	8100a74 <rgb_read_sensor+0x18>
		}
	}
	return robotCoin;
 8100af0:	697b      	ldr	r3, [r7, #20]
}
 8100af2:	4618      	mov	r0, r3
 8100af4:	3718      	adds	r7, #24
 8100af6:	46bd      	mov	sp, r7
 8100af8:	bd80      	pop	{r7, pc}
 8100afa:	bf00      	nop
 8100afc:	100000b4 	.word	0x100000b4
 8100b00:	100000b0 	.word	0x100000b0
 8100b04:	100000b8 	.word	0x100000b8

08100b08 <rgb_send>:
 *
 * @param1 self: the structure which holds information about the RGB sensor
 * @param2 regAddress: the register to which the data will be written to
 * @param3 data: the data to be written in the register
 */
{
 8100b08:	b580      	push	{r7, lr}
 8100b0a:	b084      	sub	sp, #16
 8100b0c:	af02      	add	r7, sp, #8
 8100b0e:	6078      	str	r0, [r7, #4]
 8100b10:	460b      	mov	r3, r1
 8100b12:	70fb      	strb	r3, [r7, #3]
 8100b14:	4613      	mov	r3, r2
 8100b16:	70bb      	strb	r3, [r7, #2]
	i2c_Transmit(self->handle, self->dev_addr, regAddress, 1, &data, 1);
 8100b18:	687b      	ldr	r3, [r7, #4]
 8100b1a:	6858      	ldr	r0, [r3, #4]
 8100b1c:	687b      	ldr	r3, [r7, #4]
 8100b1e:	7819      	ldrb	r1, [r3, #0]
 8100b20:	78fa      	ldrb	r2, [r7, #3]
 8100b22:	2301      	movs	r3, #1
 8100b24:	9301      	str	r3, [sp, #4]
 8100b26:	1cbb      	adds	r3, r7, #2
 8100b28:	9300      	str	r3, [sp, #0]
 8100b2a:	2301      	movs	r3, #1
 8100b2c:	f000 fef2 	bl	8101914 <i2c_Transmit>
}
 8100b30:	bf00      	nop
 8100b32:	3708      	adds	r7, #8
 8100b34:	46bd      	mov	sp, r7
 8100b36:	bd80      	pop	{r7, pc}

08100b38 <queryRGBSensor>:
 * @param1 self: An address to the structure of the device
 *
 * Returns:
 * 	Colour struct containing r, g and b
 */
{
 8100b38:	b580      	push	{r7, lr}
 8100b3a:	b088      	sub	sp, #32
 8100b3c:	af02      	add	r7, sp, #8
 8100b3e:	6078      	str	r0, [r7, #4]
 8100b40:	6039      	str	r1, [r7, #0]

	/* Read RGB values */
	uint8_t low = 0; // temporary
 8100b42:	2300      	movs	r3, #0
 8100b44:	75bb      	strb	r3, [r7, #22]
	uint8_t high = 0; // temporary
 8100b46:	2300      	movs	r3, #0
 8100b48:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef dev_Status;
	struct Color color;

	// Read red value; LOW and HIGH channels
	dev_Status = i2c_Receive(self->handle, self->dev_addr,
 8100b4a:	683b      	ldr	r3, [r7, #0]
 8100b4c:	6858      	ldr	r0, [r3, #4]
 8100b4e:	683b      	ldr	r3, [r7, #0]
 8100b50:	7819      	ldrb	r1, [r3, #0]
 8100b52:	2301      	movs	r3, #1
 8100b54:	9301      	str	r3, [sp, #4]
 8100b56:	f107 0316 	add.w	r3, r7, #22
 8100b5a:	9300      	str	r3, [sp, #0]
 8100b5c:	2301      	movs	r3, #1
 8100b5e:	2296      	movs	r2, #150	; 0x96
 8100b60:	f000 ff01 	bl	8101966 <i2c_Receive>
 8100b64:	4603      	mov	r3, r0
 8100b66:	75fb      	strb	r3, [r7, #23]
			RGB_COMMAND_REG | RGB_RED_LOW, 1, &low, sizeof(low));
	dev_Status = i2c_Receive(self->handle, self->dev_addr,
 8100b68:	683b      	ldr	r3, [r7, #0]
 8100b6a:	6858      	ldr	r0, [r3, #4]
 8100b6c:	683b      	ldr	r3, [r7, #0]
 8100b6e:	7819      	ldrb	r1, [r3, #0]
 8100b70:	2301      	movs	r3, #1
 8100b72:	9301      	str	r3, [sp, #4]
 8100b74:	f107 0315 	add.w	r3, r7, #21
 8100b78:	9300      	str	r3, [sp, #0]
 8100b7a:	2301      	movs	r3, #1
 8100b7c:	2297      	movs	r2, #151	; 0x97
 8100b7e:	f000 fef2 	bl	8101966 <i2c_Receive>
 8100b82:	4603      	mov	r3, r0
 8100b84:	75fb      	strb	r3, [r7, #23]
			RGB_COMMAND_REG | RGB_RED_HIGH, 1, &high, sizeof(high));
	if (dev_Status != HAL_OK) // if device is not OK
 8100b86:	7dfb      	ldrb	r3, [r7, #23]
 8100b88:	2b00      	cmp	r3, #0
 8100b8a:	d002      	beq.n	8100b92 <queryRGBSensor+0x5a>
	{
		color.r = 0; //output 0
 8100b8c:	2300      	movs	r3, #0
 8100b8e:	81bb      	strh	r3, [r7, #12]
 8100b90:	e008      	b.n	8100ba4 <queryRGBSensor+0x6c>
	}
	else
	{
		color.r = (high << 8) | low; // combine both local values into the output struct
 8100b92:	7d7b      	ldrb	r3, [r7, #21]
 8100b94:	021b      	lsls	r3, r3, #8
 8100b96:	b21a      	sxth	r2, r3
 8100b98:	7dbb      	ldrb	r3, [r7, #22]
 8100b9a:	b21b      	sxth	r3, r3
 8100b9c:	4313      	orrs	r3, r2
 8100b9e:	b21b      	sxth	r3, r3
 8100ba0:	b29b      	uxth	r3, r3
 8100ba2:	81bb      	strh	r3, [r7, #12]
	}

	// Read green value; LOW and HIGH channels
	dev_Status = i2c_Receive(self->handle, self->dev_addr,
 8100ba4:	683b      	ldr	r3, [r7, #0]
 8100ba6:	6858      	ldr	r0, [r3, #4]
 8100ba8:	683b      	ldr	r3, [r7, #0]
 8100baa:	7819      	ldrb	r1, [r3, #0]
 8100bac:	2301      	movs	r3, #1
 8100bae:	9301      	str	r3, [sp, #4]
 8100bb0:	f107 0316 	add.w	r3, r7, #22
 8100bb4:	9300      	str	r3, [sp, #0]
 8100bb6:	2301      	movs	r3, #1
 8100bb8:	2298      	movs	r2, #152	; 0x98
 8100bba:	f000 fed4 	bl	8101966 <i2c_Receive>
 8100bbe:	4603      	mov	r3, r0
 8100bc0:	75fb      	strb	r3, [r7, #23]
			RGB_COMMAND_REG | RGB_GREEN_LOW, 1, &low, sizeof(low));
	dev_Status = i2c_Receive(self->handle, self->dev_addr,
 8100bc2:	683b      	ldr	r3, [r7, #0]
 8100bc4:	6858      	ldr	r0, [r3, #4]
 8100bc6:	683b      	ldr	r3, [r7, #0]
 8100bc8:	7819      	ldrb	r1, [r3, #0]
 8100bca:	2301      	movs	r3, #1
 8100bcc:	9301      	str	r3, [sp, #4]
 8100bce:	f107 0315 	add.w	r3, r7, #21
 8100bd2:	9300      	str	r3, [sp, #0]
 8100bd4:	2301      	movs	r3, #1
 8100bd6:	2299      	movs	r2, #153	; 0x99
 8100bd8:	f000 fec5 	bl	8101966 <i2c_Receive>
 8100bdc:	4603      	mov	r3, r0
 8100bde:	75fb      	strb	r3, [r7, #23]
			RGB_COMMAND_REG | RGB_GREEN_HIGH, 1, &high, sizeof(high));
	if (dev_Status != HAL_OK) // if device is not OK
 8100be0:	7dfb      	ldrb	r3, [r7, #23]
 8100be2:	2b00      	cmp	r3, #0
 8100be4:	d002      	beq.n	8100bec <queryRGBSensor+0xb4>
	{
		color.g = 0; //output 0
 8100be6:	2300      	movs	r3, #0
 8100be8:	81fb      	strh	r3, [r7, #14]
 8100bea:	e008      	b.n	8100bfe <queryRGBSensor+0xc6>
	}
	else
	{
		color.g = (high << 8) | low; // combine both local values into the output struct
 8100bec:	7d7b      	ldrb	r3, [r7, #21]
 8100bee:	021b      	lsls	r3, r3, #8
 8100bf0:	b21a      	sxth	r2, r3
 8100bf2:	7dbb      	ldrb	r3, [r7, #22]
 8100bf4:	b21b      	sxth	r3, r3
 8100bf6:	4313      	orrs	r3, r2
 8100bf8:	b21b      	sxth	r3, r3
 8100bfa:	b29b      	uxth	r3, r3
 8100bfc:	81fb      	strh	r3, [r7, #14]
	}

	// Read blue value; LOW and HIGH channels
	dev_Status = i2c_Receive(self->handle, self->dev_addr,
 8100bfe:	683b      	ldr	r3, [r7, #0]
 8100c00:	6858      	ldr	r0, [r3, #4]
 8100c02:	683b      	ldr	r3, [r7, #0]
 8100c04:	7819      	ldrb	r1, [r3, #0]
 8100c06:	2301      	movs	r3, #1
 8100c08:	9301      	str	r3, [sp, #4]
 8100c0a:	f107 0316 	add.w	r3, r7, #22
 8100c0e:	9300      	str	r3, [sp, #0]
 8100c10:	2301      	movs	r3, #1
 8100c12:	229a      	movs	r2, #154	; 0x9a
 8100c14:	f000 fea7 	bl	8101966 <i2c_Receive>
 8100c18:	4603      	mov	r3, r0
 8100c1a:	75fb      	strb	r3, [r7, #23]
			RGB_COMMAND_REG | RGB_BLUE_LOW, 1, &low, sizeof(low));
	dev_Status = i2c_Receive(self->handle, self->dev_addr,
 8100c1c:	683b      	ldr	r3, [r7, #0]
 8100c1e:	6858      	ldr	r0, [r3, #4]
 8100c20:	683b      	ldr	r3, [r7, #0]
 8100c22:	7819      	ldrb	r1, [r3, #0]
 8100c24:	2301      	movs	r3, #1
 8100c26:	9301      	str	r3, [sp, #4]
 8100c28:	f107 0315 	add.w	r3, r7, #21
 8100c2c:	9300      	str	r3, [sp, #0]
 8100c2e:	2301      	movs	r3, #1
 8100c30:	229b      	movs	r2, #155	; 0x9b
 8100c32:	f000 fe98 	bl	8101966 <i2c_Receive>
 8100c36:	4603      	mov	r3, r0
 8100c38:	75fb      	strb	r3, [r7, #23]
			RGB_COMMAND_REG | RGB_BLUE_HIGH, 1, &high, sizeof(high));
	if (dev_Status != HAL_OK) // if device is not OK
 8100c3a:	7dfb      	ldrb	r3, [r7, #23]
 8100c3c:	2b00      	cmp	r3, #0
 8100c3e:	d002      	beq.n	8100c46 <queryRGBSensor+0x10e>
	{
		color.b = 0; //output 0
 8100c40:	2300      	movs	r3, #0
 8100c42:	823b      	strh	r3, [r7, #16]
 8100c44:	e008      	b.n	8100c58 <queryRGBSensor+0x120>
	}
	else
	{
		color.b = (high << 8) | low; // combine both local values into the output struct
 8100c46:	7d7b      	ldrb	r3, [r7, #21]
 8100c48:	021b      	lsls	r3, r3, #8
 8100c4a:	b21a      	sxth	r2, r3
 8100c4c:	7dbb      	ldrb	r3, [r7, #22]
 8100c4e:	b21b      	sxth	r3, r3
 8100c50:	4313      	orrs	r3, r2
 8100c52:	b21b      	sxth	r3, r3
 8100c54:	b29b      	uxth	r3, r3
 8100c56:	823b      	strh	r3, [r7, #16]
	}
	return color;
 8100c58:	687b      	ldr	r3, [r7, #4]
 8100c5a:	461a      	mov	r2, r3
 8100c5c:	f107 030c 	add.w	r3, r7, #12
 8100c60:	6818      	ldr	r0, [r3, #0]
 8100c62:	6010      	str	r0, [r2, #0]
 8100c64:	889b      	ldrh	r3, [r3, #4]
 8100c66:	8093      	strh	r3, [r2, #4]
}
 8100c68:	6878      	ldr	r0, [r7, #4]
 8100c6a:	3718      	adds	r7, #24
 8100c6c:	46bd      	mov	sp, r7
 8100c6e:	bd80      	pop	{r7, pc}

08100c70 <getHue>:
 *
 * Returns:
 * 	hue value in the range of 0 to 360
 */
uint16_t getHue(uint16_t red, uint16_t green, uint16_t blue)
{
 8100c70:	b580      	push	{r7, lr}
 8100c72:	b08a      	sub	sp, #40	; 0x28
 8100c74:	af00      	add	r7, sp, #0
 8100c76:	4603      	mov	r3, r0
 8100c78:	80fb      	strh	r3, [r7, #6]
 8100c7a:	460b      	mov	r3, r1
 8100c7c:	80bb      	strh	r3, [r7, #4]
 8100c7e:	4613      	mov	r3, r2
 8100c80:	807b      	strh	r3, [r7, #2]
	uint16_t max = max(max(red, green), blue);
 8100c82:	88fb      	ldrh	r3, [r7, #6]
 8100c84:	847b      	strh	r3, [r7, #34]	; 0x22
 8100c86:	88bb      	ldrh	r3, [r7, #4]
 8100c88:	843b      	strh	r3, [r7, #32]
 8100c8a:	8c3a      	ldrh	r2, [r7, #32]
 8100c8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8100c8e:	4293      	cmp	r3, r2
 8100c90:	bf38      	it	cc
 8100c92:	4613      	movcc	r3, r2
 8100c94:	b29b      	uxth	r3, r3
 8100c96:	61fb      	str	r3, [r7, #28]
 8100c98:	887b      	ldrh	r3, [r7, #2]
 8100c9a:	837b      	strh	r3, [r7, #26]
 8100c9c:	8b7a      	ldrh	r2, [r7, #26]
 8100c9e:	69fb      	ldr	r3, [r7, #28]
 8100ca0:	4293      	cmp	r3, r2
 8100ca2:	bfb8      	it	lt
 8100ca4:	4613      	movlt	r3, r2
 8100ca6:	833b      	strh	r3, [r7, #24]
	uint16_t min = min(min(red, green), blue);
 8100ca8:	88fb      	ldrh	r3, [r7, #6]
 8100caa:	82fb      	strh	r3, [r7, #22]
 8100cac:	88bb      	ldrh	r3, [r7, #4]
 8100cae:	82bb      	strh	r3, [r7, #20]
 8100cb0:	8aba      	ldrh	r2, [r7, #20]
 8100cb2:	8afb      	ldrh	r3, [r7, #22]
 8100cb4:	4293      	cmp	r3, r2
 8100cb6:	bf28      	it	cs
 8100cb8:	4613      	movcs	r3, r2
 8100cba:	b29b      	uxth	r3, r3
 8100cbc:	613b      	str	r3, [r7, #16]
 8100cbe:	887b      	ldrh	r3, [r7, #2]
 8100cc0:	81fb      	strh	r3, [r7, #14]
 8100cc2:	89fa      	ldrh	r2, [r7, #14]
 8100cc4:	693b      	ldr	r3, [r7, #16]
 8100cc6:	4293      	cmp	r3, r2
 8100cc8:	bfa8      	it	ge
 8100cca:	4613      	movge	r3, r2
 8100ccc:	81bb      	strh	r3, [r7, #12]
	float hue = 0;
 8100cce:	f04f 0300 	mov.w	r3, #0
 8100cd2:	627b      	str	r3, [r7, #36]	; 0x24

	// grey:
	if (min == max)
 8100cd4:	89ba      	ldrh	r2, [r7, #12]
 8100cd6:	8b3b      	ldrh	r3, [r7, #24]
 8100cd8:	429a      	cmp	r2, r3
 8100cda:	d101      	bne.n	8100ce0 <getHue+0x70>
	{
		return 0;
 8100cdc:	2300      	movs	r3, #0
 8100cde:	e069      	b.n	8100db4 <getHue+0x144>
	}

	if (max == red)
 8100ce0:	8b3a      	ldrh	r2, [r7, #24]
 8100ce2:	88fb      	ldrh	r3, [r7, #6]
 8100ce4:	429a      	cmp	r2, r3
 8100ce6:	d112      	bne.n	8100d0e <getHue+0x9e>
	{
		hue = (green - blue) / (float) (max - min);
 8100ce8:	88ba      	ldrh	r2, [r7, #4]
 8100cea:	887b      	ldrh	r3, [r7, #2]
 8100cec:	1ad3      	subs	r3, r2, r3
 8100cee:	ee07 3a90 	vmov	s15, r3
 8100cf2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8100cf6:	8b3a      	ldrh	r2, [r7, #24]
 8100cf8:	89bb      	ldrh	r3, [r7, #12]
 8100cfa:	1ad3      	subs	r3, r2, r3
 8100cfc:	ee07 3a90 	vmov	s15, r3
 8100d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8100d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100d08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8100d0c:	e030      	b.n	8100d70 <getHue+0x100>
	}
	else if (max == green)
 8100d0e:	8b3a      	ldrh	r2, [r7, #24]
 8100d10:	88bb      	ldrh	r3, [r7, #4]
 8100d12:	429a      	cmp	r2, r3
 8100d14:	d116      	bne.n	8100d44 <getHue+0xd4>
	{
		hue = 2.0f + (blue - red) / (float) (max - min);
 8100d16:	887a      	ldrh	r2, [r7, #2]
 8100d18:	88fb      	ldrh	r3, [r7, #6]
 8100d1a:	1ad3      	subs	r3, r2, r3
 8100d1c:	ee07 3a90 	vmov	s15, r3
 8100d20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8100d24:	8b3a      	ldrh	r2, [r7, #24]
 8100d26:	89bb      	ldrh	r3, [r7, #12]
 8100d28:	1ad3      	subs	r3, r2, r3
 8100d2a:	ee07 3a90 	vmov	s15, r3
 8100d2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8100d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100d36:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8100d3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8100d3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8100d42:	e015      	b.n	8100d70 <getHue+0x100>
	}
	else
	{
		hue = 4.0f + (red - green) / (float) (max - min);
 8100d44:	88fa      	ldrh	r2, [r7, #6]
 8100d46:	88bb      	ldrh	r3, [r7, #4]
 8100d48:	1ad3      	subs	r3, r2, r3
 8100d4a:	ee07 3a90 	vmov	s15, r3
 8100d4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8100d52:	8b3a      	ldrh	r2, [r7, #24]
 8100d54:	89bb      	ldrh	r3, [r7, #12]
 8100d56:	1ad3      	subs	r3, r2, r3
 8100d58:	ee07 3a90 	vmov	s15, r3
 8100d5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8100d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100d64:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8100d68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8100d6c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	hue *= 60;
 8100d70:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8100d74:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8100dbc <getHue+0x14c>
 8100d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8100d7c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	// if hue is negative, add 360
	if (hue < 0)
 8100d80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8100d84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8100d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100d8c:	d507      	bpl.n	8100d9e <getHue+0x12e>
		hue += 360;
 8100d8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8100d92:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8100dc0 <getHue+0x150>
 8100d96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8100d9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	// round hue value and return
	return roundf(hue);
 8100d9e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8100da2:	f009 f97b 	bl	810a09c <roundf>
 8100da6:	eef0 7a40 	vmov.f32	s15, s0
 8100daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100dae:	ee17 3a90 	vmov	r3, s15
 8100db2:	b29b      	uxth	r3, r3
}
 8100db4:	4618      	mov	r0, r3
 8100db6:	3728      	adds	r7, #40	; 0x28
 8100db8:	46bd      	mov	sp, r7
 8100dba:	bd80      	pop	{r7, pc}
 8100dbc:	42700000 	.word	0x42700000
 8100dc0:	43b40000 	.word	0x43b40000

08100dc4 <initMotors>:
 *      Author: Pascal
 */
#include "level_3/motor_master.h"

void initMotors()
{
 8100dc4:	b580      	push	{r7, lr}
 8100dc6:	af00      	add	r7, sp, #0
	initMotorX();
 8100dc8:	f000 f832 	bl	8100e30 <initMotorX>
	initMotorZ();
 8100dcc:	f000 f878 	bl	8100ec0 <initMotorZ>
}
 8100dd0:	bf00      	nop
 8100dd2:	bd80      	pop	{r7, pc}

08100dd4 <HomeMotors>:

	return 1;
}

uint8_t HomeMotors(uint8_t homeX, uint8_t homeZ)
{
 8100dd4:	b580      	push	{r7, lr}
 8100dd6:	b082      	sub	sp, #8
 8100dd8:	af00      	add	r7, sp, #0
 8100dda:	4603      	mov	r3, r0
 8100ddc:	460a      	mov	r2, r1
 8100dde:	71fb      	strb	r3, [r7, #7]
 8100de0:	4613      	mov	r3, r2
 8100de2:	71bb      	strb	r3, [r7, #6]
	send_msg((uint8_t*)"\r#### HOMING Motor X №###\n\r");
 8100de4:	480e      	ldr	r0, [pc, #56]	; (8100e20 <HomeMotors+0x4c>)
 8100de6:	f001 fab7 	bl	8102358 <send_msg>
	if (homeX)
 8100dea:	79fb      	ldrb	r3, [r7, #7]
 8100dec:	2b00      	cmp	r3, #0
 8100dee:	d001      	beq.n	8100df4 <HomeMotors+0x20>
	{
		homeMotorX();
 8100df0:	f000 f82e 	bl	8100e50 <homeMotorX>
	}
	send_msg((uint8_t*)"\r######## Motor X is at HOME ########\n\r");
 8100df4:	480b      	ldr	r0, [pc, #44]	; (8100e24 <HomeMotors+0x50>)
 8100df6:	f001 faaf 	bl	8102358 <send_msg>

	HAL_Delay(250);
 8100dfa:	20fa      	movs	r0, #250	; 0xfa
 8100dfc:	f001 fba2 	bl	8102544 <HAL_Delay>
	send_msg((uint8_t*)"\r#### HOMING Motor Z ####\n\r");
 8100e00:	4809      	ldr	r0, [pc, #36]	; (8100e28 <HomeMotors+0x54>)
 8100e02:	f001 faa9 	bl	8102358 <send_msg>
	if (homeZ)
 8100e06:	79bb      	ldrb	r3, [r7, #6]
 8100e08:	2b00      	cmp	r3, #0
 8100e0a:	d001      	beq.n	8100e10 <HomeMotors+0x3c>
	{
		homeMotorZ();
 8100e0c:	f000 f868 	bl	8100ee0 <homeMotorZ>
	}
	send_msg((uint8_t*)"\r######## Motor Z is at HOME ########\n\r");
 8100e10:	4806      	ldr	r0, [pc, #24]	; (8100e2c <HomeMotors+0x58>)
 8100e12:	f001 faa1 	bl	8102358 <send_msg>
	return 1;
 8100e16:	2301      	movs	r3, #1
}
 8100e18:	4618      	mov	r0, r3
 8100e1a:	3708      	adds	r7, #8
 8100e1c:	46bd      	mov	sp, r7
 8100e1e:	bd80      	pop	{r7, pc}
 8100e20:	0810a318 	.word	0x0810a318
 8100e24:	0810a338 	.word	0x0810a338
 8100e28:	0810a360 	.word	0x0810a360
 8100e2c:	0810a37c 	.word	0x0810a37c

08100e30 <initMotorX>:
uint8_t i_X = 0;
uint8_t once_X = 1;

void initMotorX()
/* Initialises the necessary timers for motor X */
{
 8100e30:	b580      	push	{r7, lr}
 8100e32:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8100e34:	2108      	movs	r1, #8
 8100e36:	4804      	ldr	r0, [pc, #16]	; (8100e48 <initMotorX+0x18>)
 8100e38:	f006 fa90 	bl	810735c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8100e3c:	213c      	movs	r1, #60	; 0x3c
 8100e3e:	4803      	ldr	r0, [pc, #12]	; (8100e4c <initMotorX+0x1c>)
 8100e40:	f006 fc40 	bl	81076c4 <HAL_TIM_Encoder_Start_IT>
}
 8100e44:	bf00      	nop
 8100e46:	bd80      	pop	{r7, pc}
 8100e48:	1000019c 	.word	0x1000019c
 8100e4c:	100001e8 	.word	0x100001e8

08100e50 <homeMotorX>:

uint8_t homeMotorX()
/* homeMotorX: Moves the motor to the home position */
{
 8100e50:	b580      	push	{r7, lr}
 8100e52:	af00      	add	r7, sp, #0

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 130); 	// set PWM of motor
 8100e54:	4b15      	ldr	r3, [pc, #84]	; (8100eac <homeMotorX+0x5c>)
 8100e56:	681b      	ldr	r3, [r3, #0]
 8100e58:	2282      	movs	r2, #130	; 0x82
 8100e5a:	63da      	str	r2, [r3, #60]	; 0x3c

	set_Direction_X(); 									// counter-clockwise  | towards HOME TODO:Change name
 8100e5c:	f000 fc32 	bl	81016c4 <set_Direction_X>
	set_Ready_X(); 										// enables motor X TODO:Change name
 8100e60:	f000 fc3c 	bl	81016dc <set_Ready_X>

	while (!get_Homing_X())
 8100e64:	bf00      	nop
 8100e66:	f000 fc8d 	bl	8101784 <get_Homing_X>
 8100e6a:	4603      	mov	r3, r0
 8100e6c:	2b00      	cmp	r3, #0
 8100e6e:	d0fa      	beq.n	8100e66 <homeMotorX+0x16>
	{

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0); 	// set PWM of motor
 8100e70:	4b0e      	ldr	r3, [pc, #56]	; (8100eac <homeMotorX+0x5c>)
 8100e72:	681b      	ldr	r3, [r3, #0]
 8100e74:	2200      	movs	r2, #0
 8100e76:	63da      	str	r2, [r3, #60]	; 0x3c
	reset_Ready_X(); 									// disables motor
 8100e78:	f000 fc3c 	bl	81016f4 <reset_Ready_X>
	HAL_Delay(1000);
 8100e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100e80:	f001 fb60 	bl	8102544 <HAL_Delay>
	/* Initialise variables */
	position_mm_X = 0.0;
 8100e84:	490a      	ldr	r1, [pc, #40]	; (8100eb0 <homeMotorX+0x60>)
 8100e86:	f04f 0200 	mov.w	r2, #0
 8100e8a:	f04f 0300 	mov.w	r3, #0
 8100e8e:	e9c1 2300 	strd	r2, r3, [r1]
	counterX = 0;
 8100e92:	4b08      	ldr	r3, [pc, #32]	; (8100eb4 <homeMotorX+0x64>)
 8100e94:	2200      	movs	r2, #0
 8100e96:	601a      	str	r2, [r3, #0]
	i_X = 0;
 8100e98:	4b07      	ldr	r3, [pc, #28]	; (8100eb8 <homeMotorX+0x68>)
 8100e9a:	2200      	movs	r2, #0
 8100e9c:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0); 					// reset timer
 8100e9e:	4b07      	ldr	r3, [pc, #28]	; (8100ebc <homeMotorX+0x6c>)
 8100ea0:	681b      	ldr	r3, [r3, #0]
 8100ea2:	2200      	movs	r2, #0
 8100ea4:	625a      	str	r2, [r3, #36]	; 0x24
	return 1;
 8100ea6:	2301      	movs	r3, #1
}
 8100ea8:	4618      	mov	r0, r3
 8100eaa:	bd80      	pop	{r7, pc}
 8100eac:	1000019c 	.word	0x1000019c
 8100eb0:	100000c0 	.word	0x100000c0
 8100eb4:	100000bc 	.word	0x100000bc
 8100eb8:	100000c8 	.word	0x100000c8
 8100ebc:	100001e8 	.word	0x100001e8

08100ec0 <initMotorZ>:
uint8_t i_Z = 0;
uint8_t once_Z = 1;

void initMotorZ()
/* Initialises the necessary timers for motor Z */
{
 8100ec0:	b580      	push	{r7, lr}
 8100ec2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8100ec4:	210c      	movs	r1, #12
 8100ec6:	4804      	ldr	r0, [pc, #16]	; (8100ed8 <initMotorZ+0x18>)
 8100ec8:	f006 fa48 	bl	810735c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8100ecc:	213c      	movs	r1, #60	; 0x3c
 8100ece:	4803      	ldr	r0, [pc, #12]	; (8100edc <initMotorZ+0x1c>)
 8100ed0:	f006 fbf8 	bl	81076c4 <HAL_TIM_Encoder_Start_IT>
}
 8100ed4:	bf00      	nop
 8100ed6:	bd80      	pop	{r7, pc}
 8100ed8:	1000019c 	.word	0x1000019c
 8100edc:	10000234 	.word	0x10000234

08100ee0 <homeMotorZ>:

uint8_t homeMotorZ()
/* homeMotorZ: Moves the motor to the home position */
{
 8100ee0:	b580      	push	{r7, lr}
 8100ee2:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 115); 	// set PWM of motor
 8100ee4:	4b15      	ldr	r3, [pc, #84]	; (8100f3c <homeMotorZ+0x5c>)
 8100ee6:	681b      	ldr	r3, [r3, #0]
 8100ee8:	2273      	movs	r2, #115	; 0x73
 8100eea:	641a      	str	r2, [r3, #64]	; 0x40

	set_Direction_Z(); 									// counter-clockwise | towards HOME TODO:Change name
 8100eec:	f000 fc0e 	bl	810170c <set_Direction_Z>
	set_Ready_Z(); 										// enable motor TODO:Change name
 8100ef0:	f000 fc18 	bl	8101724 <set_Ready_Z>


	while (!get_Homing_Z()) 							// wait until home-switch is hit
 8100ef4:	bf00      	nop
 8100ef6:	f000 fc57 	bl	81017a8 <get_Homing_Z>
 8100efa:	4603      	mov	r3, r0
 8100efc:	2b00      	cmp	r3, #0
 8100efe:	d0fa      	beq.n	8100ef6 <homeMotorZ+0x16>
	{

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 0); 	// set PWM of motor
 8100f00:	4b0e      	ldr	r3, [pc, #56]	; (8100f3c <homeMotorZ+0x5c>)
 8100f02:	681b      	ldr	r3, [r3, #0]
 8100f04:	2200      	movs	r2, #0
 8100f06:	641a      	str	r2, [r3, #64]	; 0x40
	reset_Ready_Z(); 									//disable motor
 8100f08:	f000 fc18 	bl	810173c <reset_Ready_Z>
	HAL_Delay(1000);
 8100f0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100f10:	f001 fb18 	bl	8102544 <HAL_Delay>
	/* Initialise variables */
	position_mm_Z = 0.0;
 8100f14:	490a      	ldr	r1, [pc, #40]	; (8100f40 <homeMotorZ+0x60>)
 8100f16:	f04f 0200 	mov.w	r2, #0
 8100f1a:	f04f 0300 	mov.w	r3, #0
 8100f1e:	e9c1 2300 	strd	r2, r3, [r1]
	counterZ = 0;
 8100f22:	4b08      	ldr	r3, [pc, #32]	; (8100f44 <homeMotorZ+0x64>)
 8100f24:	2200      	movs	r2, #0
 8100f26:	601a      	str	r2, [r3, #0]
	i_Z = 0;
 8100f28:	4b07      	ldr	r3, [pc, #28]	; (8100f48 <homeMotorZ+0x68>)
 8100f2a:	2200      	movs	r2, #0
 8100f2c:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim4, 0); 					// reset timer
 8100f2e:	4b07      	ldr	r3, [pc, #28]	; (8100f4c <homeMotorZ+0x6c>)
 8100f30:	681b      	ldr	r3, [r3, #0]
 8100f32:	2200      	movs	r2, #0
 8100f34:	625a      	str	r2, [r3, #36]	; 0x24
	return 1;
 8100f36:	2301      	movs	r3, #1
}
 8100f38:	4618      	mov	r0, r3
 8100f3a:	bd80      	pop	{r7, pc}
 8100f3c:	1000019c 	.word	0x1000019c
 8100f40:	100000d0 	.word	0x100000d0
 8100f44:	100000cc 	.word	0x100000cc
 8100f48:	100000d8 	.word	0x100000d8
 8100f4c:	10000234 	.word	0x10000234

08100f50 <set_Rotate_Servo>:
/* set_Rotate_Servo: Sets the angle of the servo controlling the end-effector rotator
 *
 * @param angle: Angle of rotation in degrees
 * Acceptable values between 1 - 23 degrees
 */
{
 8100f50:	b480      	push	{r7}
 8100f52:	b083      	sub	sp, #12
 8100f54:	af00      	add	r7, sp, #0
 8100f56:	ed87 0a01 	vstr	s0, [r7, #4]
	t_pulse_rotate = 10 * ((uint32_t) angle) + CONTROL_PULSE_MIN; 	// from data sheet of Parallax Standard Servo
 8100f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8100f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100f62:	ee17 2a90 	vmov	r2, s15
 8100f66:	4613      	mov	r3, r2
 8100f68:	009b      	lsls	r3, r3, #2
 8100f6a:	4413      	add	r3, r2
 8100f6c:	005b      	lsls	r3, r3, #1
 8100f6e:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8100f72:	4a0d      	ldr	r2, [pc, #52]	; (8100fa8 <set_Rotate_Servo+0x58>)
 8100f74:	6013      	str	r3, [r2, #0]
	CCR_value_rotate = (t_pulse_rotate - CONTROL_PULSE_MIN)
			* (TIMER_COUNTER_PERIOD) / (CONTROL_PULSE_RANGE); 		// mapping the values of us to the range of Timer Counter
 8100f76:	4b0c      	ldr	r3, [pc, #48]	; (8100fa8 <set_Rotate_Servo+0x58>)
 8100f78:	681b      	ldr	r3, [r3, #0]
 8100f7a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8100f7e:	fb03 f202 	mul.w	r2, r3, r2
 8100f82:	4b0a      	ldr	r3, [pc, #40]	; (8100fac <set_Rotate_Servo+0x5c>)
 8100f84:	4413      	add	r3, r2
 8100f86:	4a0a      	ldr	r2, [pc, #40]	; (8100fb0 <set_Rotate_Servo+0x60>)
 8100f88:	fba2 2303 	umull	r2, r3, r2, r3
 8100f8c:	0a9b      	lsrs	r3, r3, #10
	CCR_value_rotate = (t_pulse_rotate - CONTROL_PULSE_MIN)
 8100f8e:	4a09      	ldr	r2, [pc, #36]	; (8100fb4 <set_Rotate_Servo+0x64>)
 8100f90:	6013      	str	r3, [r2, #0]
	TIM13->CCR1 = CCR_value_rotate; 								// applying value to TIM
 8100f92:	4a09      	ldr	r2, [pc, #36]	; (8100fb8 <set_Rotate_Servo+0x68>)
 8100f94:	4b07      	ldr	r3, [pc, #28]	; (8100fb4 <set_Rotate_Servo+0x64>)
 8100f96:	681b      	ldr	r3, [r3, #0]
 8100f98:	6353      	str	r3, [r2, #52]	; 0x34
}
 8100f9a:	bf00      	nop
 8100f9c:	370c      	adds	r7, #12
 8100f9e:	46bd      	mov	sp, r7
 8100fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fa4:	4770      	bx	lr
 8100fa6:	bf00      	nop
 8100fa8:	100000dc 	.word	0x100000dc
 8100fac:	fdc85f80 	.word	0xfdc85f80
 8100fb0:	91a2b3c5 	.word	0x91a2b3c5
 8100fb4:	100000e4 	.word	0x100000e4
 8100fb8:	40001c00 	.word	0x40001c00

08100fbc <set_Slide_Servo>:
/* set_Slide_Servo: Sets the angle of the servo controlling the board opening slider
 *
 * @param angle: Angle of rotation in degrees
 * Acceptable values between 1 - 25 degrees
 */
{
 8100fbc:	b480      	push	{r7}
 8100fbe:	b083      	sub	sp, #12
 8100fc0:	af00      	add	r7, sp, #0
 8100fc2:	ed87 0a01 	vstr	s0, [r7, #4]
	t_pulse_slide = 10 * ((uint32_t) angle) + CONTROL_PULSE_MIN; 	// from data sheet of Parallax Standard Servo
 8100fc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8100fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100fce:	ee17 2a90 	vmov	r2, s15
 8100fd2:	4613      	mov	r3, r2
 8100fd4:	009b      	lsls	r3, r3, #2
 8100fd6:	4413      	add	r3, r2
 8100fd8:	005b      	lsls	r3, r3, #1
 8100fda:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8100fde:	4a0d      	ldr	r2, [pc, #52]	; (8101014 <set_Slide_Servo+0x58>)
 8100fe0:	6013      	str	r3, [r2, #0]
	CCR_value_slide = (t_pulse_slide - CONTROL_PULSE_MIN)
			* (TIMER_COUNTER_PERIOD) / (CONTROL_PULSE_RANGE); 		// mapping the values of us to the range of Timer Counter
 8100fe2:	4b0c      	ldr	r3, [pc, #48]	; (8101014 <set_Slide_Servo+0x58>)
 8100fe4:	681b      	ldr	r3, [r3, #0]
 8100fe6:	f64e 2260 	movw	r2, #60000	; 0xea60
 8100fea:	fb03 f202 	mul.w	r2, r3, r2
 8100fee:	4b0a      	ldr	r3, [pc, #40]	; (8101018 <set_Slide_Servo+0x5c>)
 8100ff0:	4413      	add	r3, r2
 8100ff2:	4a0a      	ldr	r2, [pc, #40]	; (810101c <set_Slide_Servo+0x60>)
 8100ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8100ff8:	0a9b      	lsrs	r3, r3, #10
	CCR_value_slide = (t_pulse_slide - CONTROL_PULSE_MIN)
 8100ffa:	4a09      	ldr	r2, [pc, #36]	; (8101020 <set_Slide_Servo+0x64>)
 8100ffc:	6013      	str	r3, [r2, #0]
	TIM14->CCR1 = CCR_value_slide; 									// applying value to TIM
 8100ffe:	4a09      	ldr	r2, [pc, #36]	; (8101024 <set_Slide_Servo+0x68>)
 8101000:	4b07      	ldr	r3, [pc, #28]	; (8101020 <set_Slide_Servo+0x64>)
 8101002:	681b      	ldr	r3, [r3, #0]
 8101004:	6353      	str	r3, [r2, #52]	; 0x34
}
 8101006:	bf00      	nop
 8101008:	370c      	adds	r7, #12
 810100a:	46bd      	mov	sp, r7
 810100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101010:	4770      	bx	lr
 8101012:	bf00      	nop
 8101014:	100000e0 	.word	0x100000e0
 8101018:	fdc85f80 	.word	0xfdc85f80
 810101c:	91a2b3c5 	.word	0x91a2b3c5
 8101020:	100000e8 	.word	0x100000e8
 8101024:	40002000 	.word	0x40002000

08101028 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8101028:	b480      	push	{r7}
 810102a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810102c:	f3bf 8f4f 	dsb	sy
}
 8101030:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8101032:	4b06      	ldr	r3, [pc, #24]	; (810104c <__NVIC_SystemReset+0x24>)
 8101034:	68db      	ldr	r3, [r3, #12]
 8101036:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 810103a:	4904      	ldr	r1, [pc, #16]	; (810104c <__NVIC_SystemReset+0x24>)
 810103c:	4b04      	ldr	r3, [pc, #16]	; (8101050 <__NVIC_SystemReset+0x28>)
 810103e:	4313      	orrs	r3, r2
 8101040:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8101042:	f3bf 8f4f 	dsb	sy
}
 8101046:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8101048:	bf00      	nop
 810104a:	e7fd      	b.n	8101048 <__NVIC_SystemReset+0x20>
 810104c:	e000ed00 	.word	0xe000ed00
 8101050:	05fa0004 	.word	0x05fa0004

08101054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101054:	b580      	push	{r7, lr}
 8101056:	b08a      	sub	sp, #40	; 0x28
 8101058:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 810105a:	4b2f      	ldr	r3, [pc, #188]	; (8101118 <main+0xc4>)
 810105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101060:	4a2d      	ldr	r2, [pc, #180]	; (8101118 <main+0xc4>)
 8101062:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810106a:	4b2b      	ldr	r3, [pc, #172]	; (8101118 <main+0xc4>)
 810106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101074:	60fb      	str	r3, [r7, #12]
 8101076:	68fb      	ldr	r3, [r7, #12]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101078:	2001      	movs	r0, #1
 810107a:	f002 fe29 	bl	8103cd0 <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 810107e:	f003 fcd3 	bl	8104a28 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101082:	2201      	movs	r2, #1
 8101084:	2102      	movs	r1, #2
 8101086:	2000      	movs	r0, #0
 8101088:	f003 fc54 	bl	8104934 <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810108c:	4b23      	ldr	r3, [pc, #140]	; (810111c <main+0xc8>)
 810108e:	681b      	ldr	r3, [r3, #0]
 8101090:	091b      	lsrs	r3, r3, #4
 8101092:	f003 030f 	and.w	r3, r3, #15
 8101096:	2b07      	cmp	r3, #7
 8101098:	d108      	bne.n	81010ac <main+0x58>
 810109a:	4b21      	ldr	r3, [pc, #132]	; (8101120 <main+0xcc>)
 810109c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81010a0:	4a1f      	ldr	r2, [pc, #124]	; (8101120 <main+0xcc>)
 81010a2:	f043 0301 	orr.w	r3, r3, #1
 81010a6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81010aa:	e007      	b.n	81010bc <main+0x68>
 81010ac:	4b1c      	ldr	r3, [pc, #112]	; (8101120 <main+0xcc>)
 81010ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81010b2:	4a1b      	ldr	r2, [pc, #108]	; (8101120 <main+0xcc>)
 81010b4:	f043 0301 	orr.w	r3, r3, #1
 81010b8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81010bc:	f001 f98e 	bl	81023dc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81010c0:	f000 f984 	bl	81013cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 81010c4:	f001 f80e 	bl	81020e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	init_Start_Up();
 81010c8:	f7ff fb32 	bl	8100730 <init_Start_Up>

	uint16_t value_proxy = 0;
 81010cc:	2300      	movs	r3, #0
 81010ce:	84fb      	strh	r3, [r7, #38]	; 0x26
	int columnDetected = 0;
 81010d0:	2300      	movs	r3, #0
 81010d2:	623b      	str	r3, [r7, #32]

	VCNL4010 struct_proxy;
	TCS3472 struct_rgb;

	struct_rgb = TCS3472_Create(RGB_ADD, &hi2c1);
 81010d4:	463b      	mov	r3, r7
 81010d6:	4a13      	ldr	r2, [pc, #76]	; (8101124 <main+0xd0>)
 81010d8:	2129      	movs	r1, #41	; 0x29
 81010da:	4618      	mov	r0, r3
 81010dc:	f7ff fc86 	bl	81009ec <TCS3472_Create>
 81010e0:	f107 0310 	add.w	r3, r7, #16
 81010e4:	463a      	mov	r2, r7
 81010e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 81010ea:	e883 0003 	stmia.w	r3, {r0, r1}
	rgb_init(&struct_rgb);
 81010ee:	f107 0310 	add.w	r3, r7, #16
 81010f2:	4618      	mov	r0, r3
 81010f4:	f7ff fc94 	bl	8100a20 <rgb_init>
	init_coinDetector();
 81010f8:	f7ff fb98 	bl	810082c <init_coinDetector>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		set_Rotate_Servo(ROTATE_NEUTRAL);
 81010fc:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8101128 <main+0xd4>
 8101100:	f7ff ff26 	bl	8100f50 <set_Rotate_Servo>

		move_to_X_and_Z(X_POS_FLIPPER, Z_POS_FLIPPER_BASE);
		HAL_Delay(500);
		*/

		separate_tokens(&struct_rgb);
 8101104:	f107 0310 	add.w	r3, r7, #16
 8101108:	4618      	mov	r0, r3
 810110a:	f7ff fb5b 	bl	81007c4 <separate_tokens>
		columnDetected = queryLightGate();
 810110e:	f7ff fbc5 	bl	810089c <queryLightGate>
 8101112:	6238      	str	r0, [r7, #32]
	{
 8101114:	e7f2      	b.n	81010fc <main+0xa8>
 8101116:	bf00      	nop
 8101118:	58024400 	.word	0x58024400
 810111c:	e000ed00 	.word	0xe000ed00
 8101120:	58026400 	.word	0x58026400
 8101124:	10000150 	.word	0x10000150
 8101128:	40a9999a 	.word	0x40a9999a

0810112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810112c:	b580      	push	{r7, lr}
 810112e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8101130:	b672      	cpsid	i
}
 8101132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	reset_Enable_Power();
 8101134:	f000 fb1a 	bl	810176c <reset_Enable_Power>

	send_msg("\rERROR, resetting\n\r");
 8101138:	4802      	ldr	r0, [pc, #8]	; (8101144 <Error_Handler+0x18>)
 810113a:	f001 f90d 	bl	8102358 <send_msg>

	NVIC_SystemReset();
 810113e:	f7ff ff73 	bl	8101028 <__NVIC_SystemReset>
 8101142:	bf00      	nop
 8101144:	0810a3a4 	.word	0x0810a3a4

08101148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101148:	b580      	push	{r7, lr}
 810114a:	b082      	sub	sp, #8
 810114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810114e:	4b0d      	ldr	r3, [pc, #52]	; (8101184 <HAL_MspInit+0x3c>)
 8101150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101154:	4a0b      	ldr	r2, [pc, #44]	; (8101184 <HAL_MspInit+0x3c>)
 8101156:	f043 0302 	orr.w	r3, r3, #2
 810115a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810115e:	4b09      	ldr	r3, [pc, #36]	; (8101184 <HAL_MspInit+0x3c>)
 8101160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101164:	f003 0302 	and.w	r3, r3, #2
 8101168:	607b      	str	r3, [r7, #4]
 810116a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 810116c:	2200      	movs	r2, #0
 810116e:	2100      	movs	r1, #0
 8101170:	207e      	movs	r0, #126	; 0x7e
 8101172:	f002 fb82 	bl	810387a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101176:	207e      	movs	r0, #126	; 0x7e
 8101178:	f002 fb99 	bl	81038ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810117c:	bf00      	nop
 810117e:	3708      	adds	r7, #8
 8101180:	46bd      	mov	sp, r7
 8101182:	bd80      	pop	{r7, pc}
 8101184:	58024400 	.word	0x58024400

08101188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101188:	b480      	push	{r7}
 810118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810118c:	e7fe      	b.n	810118c <NMI_Handler+0x4>

0810118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810118e:	b480      	push	{r7}
 8101190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101192:	e7fe      	b.n	8101192 <HardFault_Handler+0x4>

08101194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101194:	b480      	push	{r7}
 8101196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101198:	e7fe      	b.n	8101198 <MemManage_Handler+0x4>

0810119a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810119a:	b480      	push	{r7}
 810119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810119e:	e7fe      	b.n	810119e <BusFault_Handler+0x4>

081011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81011a0:	b480      	push	{r7}
 81011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81011a4:	e7fe      	b.n	81011a4 <UsageFault_Handler+0x4>

081011a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81011a6:	b480      	push	{r7}
 81011a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81011aa:	bf00      	nop
 81011ac:	46bd      	mov	sp, r7
 81011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011b2:	4770      	bx	lr

081011b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81011b4:	b480      	push	{r7}
 81011b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81011b8:	bf00      	nop
 81011ba:	46bd      	mov	sp, r7
 81011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011c0:	4770      	bx	lr

081011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81011c2:	b480      	push	{r7}
 81011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81011c6:	bf00      	nop
 81011c8:	46bd      	mov	sp, r7
 81011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ce:	4770      	bx	lr

081011d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81011d0:	b580      	push	{r7, lr}
 81011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81011d4:	f001 f996 	bl	8102504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81011d8:	bf00      	nop
 81011da:	bd80      	pop	{r7, pc}

081011dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 81011dc:	b580      	push	{r7, lr}
 81011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 81011e0:	4802      	ldr	r0, [pc, #8]	; (81011ec <TIM7_IRQHandler+0x10>)
 81011e2:	f006 fb1d 	bl	8107820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 81011e6:	bf00      	nop
 81011e8:	bd80      	pop	{r7, pc}
 81011ea:	bf00      	nop
 81011ec:	10000280 	.word	0x10000280

081011f0 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 81011f0:	b580      	push	{r7, lr}
 81011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 81011f4:	f002 fd7e 	bl	8103cf4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 81011f8:	bf00      	nop
 81011fa:	bd80      	pop	{r7, pc}

081011fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 81011fc:	b580      	push	{r7, lr}
 81011fe:	b08a      	sub	sp, #40	; 0x28
 8101200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8101202:	f107 031c 	add.w	r3, r7, #28
 8101206:	2200      	movs	r2, #0
 8101208:	601a      	str	r2, [r3, #0]
 810120a:	605a      	str	r2, [r3, #4]
 810120c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810120e:	463b      	mov	r3, r7
 8101210:	2200      	movs	r2, #0
 8101212:	601a      	str	r2, [r3, #0]
 8101214:	605a      	str	r2, [r3, #4]
 8101216:	609a      	str	r2, [r3, #8]
 8101218:	60da      	str	r2, [r3, #12]
 810121a:	611a      	str	r2, [r3, #16]
 810121c:	615a      	str	r2, [r3, #20]
 810121e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8101220:	4b2f      	ldr	r3, [pc, #188]	; (81012e0 <MX_ADC1_Init+0xe4>)
 8101222:	4a30      	ldr	r2, [pc, #192]	; (81012e4 <MX_ADC1_Init+0xe8>)
 8101224:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8101226:	4b2e      	ldr	r3, [pc, #184]	; (81012e0 <MX_ADC1_Init+0xe4>)
 8101228:	2200      	movs	r2, #0
 810122a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 810122c:	4b2c      	ldr	r3, [pc, #176]	; (81012e0 <MX_ADC1_Init+0xe4>)
 810122e:	2208      	movs	r2, #8
 8101230:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8101232:	4b2b      	ldr	r3, [pc, #172]	; (81012e0 <MX_ADC1_Init+0xe4>)
 8101234:	2200      	movs	r2, #0
 8101236:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101238:	4b29      	ldr	r3, [pc, #164]	; (81012e0 <MX_ADC1_Init+0xe4>)
 810123a:	2204      	movs	r2, #4
 810123c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 810123e:	4b28      	ldr	r3, [pc, #160]	; (81012e0 <MX_ADC1_Init+0xe4>)
 8101240:	2200      	movs	r2, #0
 8101242:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8101244:	4b26      	ldr	r3, [pc, #152]	; (81012e0 <MX_ADC1_Init+0xe4>)
 8101246:	2200      	movs	r2, #0
 8101248:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810124a:	4b25      	ldr	r3, [pc, #148]	; (81012e0 <MX_ADC1_Init+0xe4>)
 810124c:	2201      	movs	r2, #1
 810124e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8101250:	4b23      	ldr	r3, [pc, #140]	; (81012e0 <MX_ADC1_Init+0xe4>)
 8101252:	2200      	movs	r2, #0
 8101254:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101256:	4b22      	ldr	r3, [pc, #136]	; (81012e0 <MX_ADC1_Init+0xe4>)
 8101258:	2200      	movs	r2, #0
 810125a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810125c:	4b20      	ldr	r3, [pc, #128]	; (81012e0 <MX_ADC1_Init+0xe4>)
 810125e:	2200      	movs	r2, #0
 8101260:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8101262:	4b1f      	ldr	r3, [pc, #124]	; (81012e0 <MX_ADC1_Init+0xe4>)
 8101264:	2200      	movs	r2, #0
 8101266:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8101268:	4b1d      	ldr	r3, [pc, #116]	; (81012e0 <MX_ADC1_Init+0xe4>)
 810126a:	2200      	movs	r2, #0
 810126c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810126e:	4b1c      	ldr	r3, [pc, #112]	; (81012e0 <MX_ADC1_Init+0xe4>)
 8101270:	2200      	movs	r2, #0
 8101272:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8101274:	4b1a      	ldr	r3, [pc, #104]	; (81012e0 <MX_ADC1_Init+0xe4>)
 8101276:	2200      	movs	r2, #0
 8101278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810127c:	4818      	ldr	r0, [pc, #96]	; (81012e0 <MX_ADC1_Init+0xe4>)
 810127e:	f001 fb1d 	bl	81028bc <HAL_ADC_Init>
 8101282:	4603      	mov	r3, r0
 8101284:	2b00      	cmp	r3, #0
 8101286:	d001      	beq.n	810128c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8101288:	f7ff ff50 	bl	810112c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 810128c:	2300      	movs	r3, #0
 810128e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101290:	f107 031c 	add.w	r3, r7, #28
 8101294:	4619      	mov	r1, r3
 8101296:	4812      	ldr	r0, [pc, #72]	; (81012e0 <MX_ADC1_Init+0xe4>)
 8101298:	f002 f932 	bl	8103500 <HAL_ADCEx_MultiModeConfigChannel>
 810129c:	4603      	mov	r3, r0
 810129e:	2b00      	cmp	r3, #0
 81012a0:	d001      	beq.n	81012a6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 81012a2:	f7ff ff43 	bl	810112c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 81012a6:	4b10      	ldr	r3, [pc, #64]	; (81012e8 <MX_ADC1_Init+0xec>)
 81012a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81012aa:	2306      	movs	r3, #6
 81012ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81012ae:	2300      	movs	r3, #0
 81012b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81012b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81012b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81012b8:	2304      	movs	r3, #4
 81012ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81012bc:	2300      	movs	r3, #0
 81012be:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81012c0:	2300      	movs	r3, #0
 81012c2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81012c4:	463b      	mov	r3, r7
 81012c6:	4619      	mov	r1, r3
 81012c8:	4805      	ldr	r0, [pc, #20]	; (81012e0 <MX_ADC1_Init+0xe4>)
 81012ca:	f001 fc99 	bl	8102c00 <HAL_ADC_ConfigChannel>
 81012ce:	4603      	mov	r3, r0
 81012d0:	2b00      	cmp	r3, #0
 81012d2:	d001      	beq.n	81012d8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 81012d4:	f7ff ff2a 	bl	810112c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 81012d8:	bf00      	nop
 81012da:	3728      	adds	r7, #40	; 0x28
 81012dc:	46bd      	mov	sp, r7
 81012de:	bd80      	pop	{r7, pc}
 81012e0:	100000ec 	.word	0x100000ec
 81012e4:	40022000 	.word	0x40022000
 81012e8:	4b840000 	.word	0x4b840000

081012ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 81012ec:	b580      	push	{r7, lr}
 81012ee:	b0b8      	sub	sp, #224	; 0xe0
 81012f0:	af00      	add	r7, sp, #0
 81012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81012f8:	2200      	movs	r2, #0
 81012fa:	601a      	str	r2, [r3, #0]
 81012fc:	605a      	str	r2, [r3, #4]
 81012fe:	609a      	str	r2, [r3, #8]
 8101300:	60da      	str	r2, [r3, #12]
 8101302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101304:	f107 0310 	add.w	r3, r7, #16
 8101308:	22bc      	movs	r2, #188	; 0xbc
 810130a:	2100      	movs	r1, #0
 810130c:	4618      	mov	r0, r3
 810130e:	f008 fa4f 	bl	81097b0 <memset>
  if(adcHandle->Instance==ADC1)
 8101312:	687b      	ldr	r3, [r7, #4]
 8101314:	681b      	ldr	r3, [r3, #0]
 8101316:	4a2a      	ldr	r2, [pc, #168]	; (81013c0 <HAL_ADC_MspInit+0xd4>)
 8101318:	4293      	cmp	r3, r2
 810131a:	d14c      	bne.n	81013b6 <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 810131c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8101320:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8101322:	2301      	movs	r3, #1
 8101324:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8101326:	2313      	movs	r3, #19
 8101328:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 128;
 810132a:	2380      	movs	r3, #128	; 0x80
 810132c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 810132e:	2302      	movs	r3, #2
 8101330:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8101332:	2302      	movs	r3, #2
 8101334:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8101336:	23c0      	movs	r3, #192	; 0xc0
 8101338:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 810133a:	2320      	movs	r3, #32
 810133c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 810133e:	2300      	movs	r3, #0
 8101340:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8101342:	2300      	movs	r3, #0
 8101344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101348:	f107 0310 	add.w	r3, r7, #16
 810134c:	4618      	mov	r0, r3
 810134e:	f003 fd51 	bl	8104df4 <HAL_RCCEx_PeriphCLKConfig>
 8101352:	4603      	mov	r3, r0
 8101354:	2b00      	cmp	r3, #0
 8101356:	d001      	beq.n	810135c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8101358:	f7ff fee8 	bl	810112c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 810135c:	4b19      	ldr	r3, [pc, #100]	; (81013c4 <HAL_ADC_MspInit+0xd8>)
 810135e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101362:	4a18      	ldr	r2, [pc, #96]	; (81013c4 <HAL_ADC_MspInit+0xd8>)
 8101364:	f043 0320 	orr.w	r3, r3, #32
 8101368:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810136c:	4b15      	ldr	r3, [pc, #84]	; (81013c4 <HAL_ADC_MspInit+0xd8>)
 810136e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101372:	f003 0320 	and.w	r3, r3, #32
 8101376:	60fb      	str	r3, [r7, #12]
 8101378:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810137a:	4b12      	ldr	r3, [pc, #72]	; (81013c4 <HAL_ADC_MspInit+0xd8>)
 810137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101380:	4a10      	ldr	r2, [pc, #64]	; (81013c4 <HAL_ADC_MspInit+0xd8>)
 8101382:	f043 0301 	orr.w	r3, r3, #1
 8101386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810138a:	4b0e      	ldr	r3, [pc, #56]	; (81013c4 <HAL_ADC_MspInit+0xd8>)
 810138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101390:	f003 0301 	and.w	r3, r3, #1
 8101394:	60bb      	str	r3, [r7, #8]
 8101396:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = Vaccuum_Sensor_Pin;
 8101398:	2310      	movs	r3, #16
 810139a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 810139e:	2303      	movs	r3, #3
 81013a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013a4:	2300      	movs	r3, #0
 81013a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(Vaccuum_Sensor_GPIO_Port, &GPIO_InitStruct);
 81013aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81013ae:	4619      	mov	r1, r3
 81013b0:	4805      	ldr	r0, [pc, #20]	; (81013c8 <HAL_ADC_MspInit+0xdc>)
 81013b2:	f002 faab 	bl	810390c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 81013b6:	bf00      	nop
 81013b8:	37e0      	adds	r7, #224	; 0xe0
 81013ba:	46bd      	mov	sp, r7
 81013bc:	bd80      	pop	{r7, pc}
 81013be:	bf00      	nop
 81013c0:	40022000 	.word	0x40022000
 81013c4:	58024400 	.word	0x58024400
 81013c8:	58020000 	.word	0x58020000

081013cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 81013cc:	b580      	push	{r7, lr}
 81013ce:	b08c      	sub	sp, #48	; 0x30
 81013d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81013d2:	f107 031c 	add.w	r3, r7, #28
 81013d6:	2200      	movs	r2, #0
 81013d8:	601a      	str	r2, [r3, #0]
 81013da:	605a      	str	r2, [r3, #4]
 81013dc:	609a      	str	r2, [r3, #8]
 81013de:	60da      	str	r2, [r3, #12]
 81013e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81013e2:	4bb0      	ldr	r3, [pc, #704]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 81013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013e8:	4aae      	ldr	r2, [pc, #696]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 81013ea:	f043 0310 	orr.w	r3, r3, #16
 81013ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013f2:	4bac      	ldr	r3, [pc, #688]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 81013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013f8:	f003 0310 	and.w	r3, r3, #16
 81013fc:	61bb      	str	r3, [r7, #24]
 81013fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101400:	4ba8      	ldr	r3, [pc, #672]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 8101402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101406:	4aa7      	ldr	r2, [pc, #668]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 8101408:	f043 0304 	orr.w	r3, r3, #4
 810140c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101410:	4ba4      	ldr	r3, [pc, #656]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 8101412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101416:	f003 0304 	and.w	r3, r3, #4
 810141a:	617b      	str	r3, [r7, #20]
 810141c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810141e:	4ba1      	ldr	r3, [pc, #644]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 8101420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101424:	4a9f      	ldr	r2, [pc, #636]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 8101426:	f043 0320 	orr.w	r3, r3, #32
 810142a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810142e:	4b9d      	ldr	r3, [pc, #628]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 8101430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101434:	f003 0320 	and.w	r3, r3, #32
 8101438:	613b      	str	r3, [r7, #16]
 810143a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810143c:	4b99      	ldr	r3, [pc, #612]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 810143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101442:	4a98      	ldr	r2, [pc, #608]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 8101444:	f043 0301 	orr.w	r3, r3, #1
 8101448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810144c:	4b95      	ldr	r3, [pc, #596]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 810144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101452:	f003 0301 	and.w	r3, r3, #1
 8101456:	60fb      	str	r3, [r7, #12]
 8101458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810145a:	4b92      	ldr	r3, [pc, #584]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 810145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101460:	4a90      	ldr	r2, [pc, #576]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 8101462:	f043 0302 	orr.w	r3, r3, #2
 8101466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810146a:	4b8e      	ldr	r3, [pc, #568]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 810146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101470:	f003 0302 	and.w	r3, r3, #2
 8101474:	60bb      	str	r3, [r7, #8]
 8101476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101478:	4b8a      	ldr	r3, [pc, #552]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 810147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810147e:	4a89      	ldr	r2, [pc, #548]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 8101480:	f043 0308 	orr.w	r3, r3, #8
 8101484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101488:	4b86      	ldr	r3, [pc, #536]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 810148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810148e:	f003 0308 	and.w	r3, r3, #8
 8101492:	607b      	str	r3, [r7, #4]
 8101494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8101496:	4b83      	ldr	r3, [pc, #524]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 8101498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810149c:	4a81      	ldr	r2, [pc, #516]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 810149e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81014a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014a6:	4b7f      	ldr	r3, [pc, #508]	; (81016a4 <MX_GPIO_Init+0x2d8>)
 81014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81014b0:	603b      	str	r3, [r7, #0]
 81014b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DigiIN_OUT_Z_Pin|Direction_Z_Pin|LD2_Pin, GPIO_PIN_RESET);
 81014b4:	2200      	movs	r2, #0
 81014b6:	2107      	movs	r1, #7
 81014b8:	487b      	ldr	r0, [pc, #492]	; (81016a8 <MX_GPIO_Init+0x2dc>)
 81014ba:	f002 fbef 	bl	8103c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_RESET);
 81014be:	2200      	movs	r2, #0
 81014c0:	2101      	movs	r1, #1
 81014c2:	487a      	ldr	r0, [pc, #488]	; (81016ac <MX_GPIO_Init+0x2e0>)
 81014c4:	f002 fbea 	bl	8103c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 81014c8:	2200      	movs	r2, #0
 81014ca:	f244 0101 	movw	r1, #16385	; 0x4001
 81014ce:	4878      	ldr	r0, [pc, #480]	; (81016b0 <MX_GPIO_Init+0x2e4>)
 81014d0:	f002 fbe4 	bl	8103c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|DigiIN_OUT_X_Pin|Ready_X_Pin|Debug_1_Pin
 81014d4:	2200      	movs	r2, #0
 81014d6:	f24c 4178 	movw	r1, #50296	; 0xc478
 81014da:	4876      	ldr	r0, [pc, #472]	; (81016b4 <MX_GPIO_Init+0x2e8>)
 81014dc:	f002 fbde 	bl	8103c9c <HAL_GPIO_WritePin>
                          |Debug_2_Pin|Debug_3_Pin|Debug_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Vaccuum_Valve_Pin|Vaccuum_Pump_Pin|Solenoid_Pin, GPIO_PIN_SET);
 81014e0:	2201      	movs	r2, #1
 81014e2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 81014e6:	4874      	ldr	r0, [pc, #464]	; (81016b8 <MX_GPIO_Init+0x2ec>)
 81014e8:	f002 fbd8 	bl	8103c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_SET);
 81014ec:	2201      	movs	r2, #1
 81014ee:	2101      	movs	r1, #1
 81014f0:	4870      	ldr	r0, [pc, #448]	; (81016b4 <MX_GPIO_Init+0x2e8>)
 81014f2:	f002 fbd3 	bl	8103c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 81014f6:	2200      	movs	r2, #0
 81014f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81014fc:	486f      	ldr	r0, [pc, #444]	; (81016bc <MX_GPIO_Init+0x2f0>)
 81014fe:	f002 fbcd 	bl	8103c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DigiIN_OUT_Z_Pin|Direction_Z_Pin|LD2_Pin;
 8101502:	2307      	movs	r3, #7
 8101504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101506:	2301      	movs	r3, #1
 8101508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810150a:	2300      	movs	r3, #0
 810150c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810150e:	2300      	movs	r3, #0
 8101510:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101512:	f107 031c 	add.w	r3, r7, #28
 8101516:	4619      	mov	r1, r3
 8101518:	4863      	ldr	r0, [pc, #396]	; (81016a8 <MX_GPIO_Init+0x2dc>)
 810151a:	f002 f9f7 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|Rotary_Switch_C2_Pin;
 810151e:	f242 0301 	movw	r3, #8193	; 0x2001
 8101522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101524:	2300      	movs	r3, #0
 8101526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101528:	2300      	movs	r3, #0
 810152a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810152c:	f107 031c 	add.w	r3, r7, #28
 8101530:	4619      	mov	r1, r3
 8101532:	4861      	ldr	r0, [pc, #388]	; (81016b8 <MX_GPIO_Init+0x2ec>)
 8101534:	f002 f9ea 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rotary_Switch_C8_Pin;
 8101538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810153e:	2300      	movs	r3, #0
 8101540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101542:	2300      	movs	r3, #0
 8101544:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rotary_Switch_C8_GPIO_Port, &GPIO_InitStruct);
 8101546:	f107 031c 	add.w	r3, r7, #28
 810154a:	4619      	mov	r1, r3
 810154c:	485c      	ldr	r0, [pc, #368]	; (81016c0 <MX_GPIO_Init+0x2f4>)
 810154e:	f002 f9dd 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Ready_Z_Pin;
 8101552:	2301      	movs	r3, #1
 8101554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101556:	2301      	movs	r3, #1
 8101558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810155a:	2300      	movs	r3, #0
 810155c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810155e:	2300      	movs	r3, #0
 8101560:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Ready_Z_GPIO_Port, &GPIO_InitStruct);
 8101562:	f107 031c 	add.w	r3, r7, #28
 8101566:	4619      	mov	r1, r3
 8101568:	4850      	ldr	r0, [pc, #320]	; (81016ac <MX_GPIO_Init+0x2e0>)
 810156a:	f002 f9cf 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rotary_Switch_C1_Pin;
 810156e:	2308      	movs	r3, #8
 8101570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101572:	2300      	movs	r3, #0
 8101574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101576:	2300      	movs	r3, #0
 8101578:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rotary_Switch_C1_GPIO_Port, &GPIO_InitStruct);
 810157a:	f107 031c 	add.w	r3, r7, #28
 810157e:	4619      	mov	r1, r3
 8101580:	484a      	ldr	r0, [pc, #296]	; (81016ac <MX_GPIO_Init+0x2e0>)
 8101582:	f002 f9c3 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8101586:	f244 0301 	movw	r3, #16385	; 0x4001
 810158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810158c:	2301      	movs	r3, #1
 810158e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101590:	2300      	movs	r3, #0
 8101592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101594:	2300      	movs	r3, #0
 8101596:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101598:	f107 031c 	add.w	r3, r7, #28
 810159c:	4619      	mov	r1, r3
 810159e:	4844      	ldr	r0, [pc, #272]	; (81016b0 <MX_GPIO_Init+0x2e4>)
 81015a0:	f002 f9b4 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rotary_Switch_C4_Pin;
 81015a4:	2302      	movs	r3, #2
 81015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81015a8:	2300      	movs	r3, #0
 81015aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015ac:	2300      	movs	r3, #0
 81015ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rotary_Switch_C4_GPIO_Port, &GPIO_InitStruct);
 81015b0:	f107 031c 	add.w	r3, r7, #28
 81015b4:	4619      	mov	r1, r3
 81015b6:	483e      	ldr	r0, [pc, #248]	; (81016b0 <MX_GPIO_Init+0x2e4>)
 81015b8:	f002 f9a8 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Homing_Z_Pin;
 81015bc:	2304      	movs	r3, #4
 81015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81015c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015c6:	2300      	movs	r3, #0
 81015c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Homing_Z_GPIO_Port, &GPIO_InitStruct);
 81015ca:	f107 031c 	add.w	r3, r7, #28
 81015ce:	4619      	mov	r1, r3
 81015d0:	4837      	ldr	r0, [pc, #220]	; (81016b0 <MX_GPIO_Init+0x2e4>)
 81015d2:	f002 f99b 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Pushbutton_Rotary_Switch_Pin;
 81015d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 81015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81015dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81015e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015e2:	2300      	movs	r3, #0
 81015e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Pushbutton_Rotary_Switch_GPIO_Port, &GPIO_InitStruct);
 81015e6:	f107 031c 	add.w	r3, r7, #28
 81015ea:	4619      	mov	r1, r3
 81015ec:	482e      	ldr	r0, [pc, #184]	; (81016a8 <MX_GPIO_Init+0x2dc>)
 81015ee:	f002 f98d 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Homing_X_Pin|Endstop_X_Pin|Endstop_Z_Pin;
 81015f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 81015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81015f8:	2300      	movs	r3, #0
 81015fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015fc:	2300      	movs	r3, #0
 81015fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101600:	f107 031c 	add.w	r3, r7, #28
 8101604:	4619      	mov	r1, r3
 8101606:	4828      	ldr	r0, [pc, #160]	; (81016a8 <MX_GPIO_Init+0x2dc>)
 8101608:	f002 f980 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|DigiIN_OUT_X_Pin|Ready_X_Pin|Enable_PWR_Pin
 810160c:	f24c 4379 	movw	r3, #50297	; 0xc479
 8101610:	61fb      	str	r3, [r7, #28]
                          |Debug_1_Pin|Debug_2_Pin|Debug_3_Pin|Debug_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101612:	2301      	movs	r3, #1
 8101614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101616:	2300      	movs	r3, #0
 8101618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810161a:	2300      	movs	r3, #0
 810161c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810161e:	f107 031c 	add.w	r3, r7, #28
 8101622:	4619      	mov	r1, r3
 8101624:	4823      	ldr	r0, [pc, #140]	; (81016b4 <MX_GPIO_Init+0x2e8>)
 8101626:	f002 f971 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Vaccuum_Valve_Pin|Vaccuum_Pump_Pin|Solenoid_Pin;
 810162a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 810162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101630:	2301      	movs	r3, #1
 8101632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101634:	2300      	movs	r3, #0
 8101636:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101638:	2300      	movs	r3, #0
 810163a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810163c:	f107 031c 	add.w	r3, r7, #28
 8101640:	4619      	mov	r1, r3
 8101642:	481d      	ldr	r0, [pc, #116]	; (81016b8 <MX_GPIO_Init+0x2ec>)
 8101644:	f002 f962 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Coin_INT_Pin|Prox_INT_Pin;
 8101648:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 810164e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101654:	2300      	movs	r3, #0
 8101656:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101658:	f107 031c 	add.w	r3, r7, #28
 810165c:	4619      	mov	r1, r3
 810165e:	4816      	ldr	r0, [pc, #88]	; (81016b8 <MX_GPIO_Init+0x2ec>)
 8101660:	f002 f954 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Read_EMO_Pin;
 8101664:	2302      	movs	r3, #2
 8101666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101668:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 810166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810166e:	2300      	movs	r3, #0
 8101670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Read_EMO_GPIO_Port, &GPIO_InitStruct);
 8101672:	f107 031c 	add.w	r3, r7, #28
 8101676:	4619      	mov	r1, r3
 8101678:	480e      	ldr	r0, [pc, #56]	; (81016b4 <MX_GPIO_Init+0x2e8>)
 810167a:	f002 f947 	bl	810390c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Direction_X_Pin;
 810167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101684:	2301      	movs	r3, #1
 8101686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101688:	2300      	movs	r3, #0
 810168a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810168c:	2300      	movs	r3, #0
 810168e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Direction_X_GPIO_Port, &GPIO_InitStruct);
 8101690:	f107 031c 	add.w	r3, r7, #28
 8101694:	4619      	mov	r1, r3
 8101696:	4809      	ldr	r0, [pc, #36]	; (81016bc <MX_GPIO_Init+0x2f0>)
 8101698:	f002 f938 	bl	810390c <HAL_GPIO_Init>

}
 810169c:	bf00      	nop
 810169e:	3730      	adds	r7, #48	; 0x30
 81016a0:	46bd      	mov	sp, r7
 81016a2:	bd80      	pop	{r7, pc}
 81016a4:	58024400 	.word	0x58024400
 81016a8:	58021000 	.word	0x58021000
 81016ac:	58020000 	.word	0x58020000
 81016b0:	58020400 	.word	0x58020400
 81016b4:	58020c00 	.word	0x58020c00
 81016b8:	58020800 	.word	0x58020800
 81016bc:	58021800 	.word	0x58021800
 81016c0:	58021400 	.word	0x58021400

081016c4 <set_Direction_X>:
	HAL_GPIO_WritePin(Solenoid_GPIO_Port, Solenoid_Pin, GPIO_PIN_RESET);
}



void set_Direction_X(void){
 81016c4:	b580      	push	{r7, lr}
 81016c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_SET);
 81016c8:	2201      	movs	r2, #1
 81016ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 81016ce:	4802      	ldr	r0, [pc, #8]	; (81016d8 <set_Direction_X+0x14>)
 81016d0:	f002 fae4 	bl	8103c9c <HAL_GPIO_WritePin>
}
 81016d4:	bf00      	nop
 81016d6:	bd80      	pop	{r7, pc}
 81016d8:	58021800 	.word	0x58021800

081016dc <set_Ready_X>:
void reset_Direction_X(void){
	HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
}

void set_Ready_X(void){
 81016dc:	b580      	push	{r7, lr}
 81016de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_SET);
 81016e0:	2201      	movs	r2, #1
 81016e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81016e6:	4802      	ldr	r0, [pc, #8]	; (81016f0 <set_Ready_X+0x14>)
 81016e8:	f002 fad8 	bl	8103c9c <HAL_GPIO_WritePin>
}
 81016ec:	bf00      	nop
 81016ee:	bd80      	pop	{r7, pc}
 81016f0:	58020c00 	.word	0x58020c00

081016f4 <reset_Ready_X>:
void reset_Ready_X(void){
 81016f4:	b580      	push	{r7, lr}
 81016f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_RESET);
 81016f8:	2200      	movs	r2, #0
 81016fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81016fe:	4802      	ldr	r0, [pc, #8]	; (8101708 <reset_Ready_X+0x14>)
 8101700:	f002 facc 	bl	8103c9c <HAL_GPIO_WritePin>
}
 8101704:	bf00      	nop
 8101706:	bd80      	pop	{r7, pc}
 8101708:	58020c00 	.word	0x58020c00

0810170c <set_Direction_Z>:
	HAL_GPIO_WritePin(DigiIN_OUT_X_GPIO_Port, DigiIN_OUT_X_Pin, GPIO_PIN_RESET);
}



void set_Direction_Z(void){
 810170c:	b580      	push	{r7, lr}
 810170e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_SET);
 8101710:	2201      	movs	r2, #1
 8101712:	2101      	movs	r1, #1
 8101714:	4802      	ldr	r0, [pc, #8]	; (8101720 <set_Direction_Z+0x14>)
 8101716:	f002 fac1 	bl	8103c9c <HAL_GPIO_WritePin>
}
 810171a:	bf00      	nop
 810171c:	bd80      	pop	{r7, pc}
 810171e:	bf00      	nop
 8101720:	58021000 	.word	0x58021000

08101724 <set_Ready_Z>:
void reset_Direction_Z(void){
	HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_RESET);
}

void set_Ready_Z(void){
 8101724:	b580      	push	{r7, lr}
 8101726:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_SET);
 8101728:	2201      	movs	r2, #1
 810172a:	2101      	movs	r1, #1
 810172c:	4802      	ldr	r0, [pc, #8]	; (8101738 <set_Ready_Z+0x14>)
 810172e:	f002 fab5 	bl	8103c9c <HAL_GPIO_WritePin>
}
 8101732:	bf00      	nop
 8101734:	bd80      	pop	{r7, pc}
 8101736:	bf00      	nop
 8101738:	58020000 	.word	0x58020000

0810173c <reset_Ready_Z>:
void reset_Ready_Z(void){
 810173c:	b580      	push	{r7, lr}
 810173e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_RESET);
 8101740:	2200      	movs	r2, #0
 8101742:	2101      	movs	r1, #1
 8101744:	4802      	ldr	r0, [pc, #8]	; (8101750 <reset_Ready_Z+0x14>)
 8101746:	f002 faa9 	bl	8103c9c <HAL_GPIO_WritePin>
}
 810174a:	bf00      	nop
 810174c:	bd80      	pop	{r7, pc}
 810174e:	bf00      	nop
 8101750:	58020000 	.word	0x58020000

08101754 <set_Enable_Power>:
	HAL_GPIO_WritePin(DigiIN_OUT_Z_GPIO_Port, DigiIN_OUT_Z_Pin, GPIO_PIN_RESET);
}



void set_Enable_Power(void){
 8101754:	b580      	push	{r7, lr}
 8101756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_RESET);
 8101758:	2200      	movs	r2, #0
 810175a:	2101      	movs	r1, #1
 810175c:	4802      	ldr	r0, [pc, #8]	; (8101768 <set_Enable_Power+0x14>)
 810175e:	f002 fa9d 	bl	8103c9c <HAL_GPIO_WritePin>
}
 8101762:	bf00      	nop
 8101764:	bd80      	pop	{r7, pc}
 8101766:	bf00      	nop
 8101768:	58020c00 	.word	0x58020c00

0810176c <reset_Enable_Power>:
void reset_Enable_Power(void){
 810176c:	b580      	push	{r7, lr}
 810176e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_SET);
 8101770:	2201      	movs	r2, #1
 8101772:	2101      	movs	r1, #1
 8101774:	4802      	ldr	r0, [pc, #8]	; (8101780 <reset_Enable_Power+0x14>)
 8101776:	f002 fa91 	bl	8103c9c <HAL_GPIO_WritePin>
}
 810177a:	bf00      	nop
 810177c:	bd80      	pop	{r7, pc}
 810177e:	bf00      	nop
 8101780:	58020c00 	.word	0x58020c00

08101784 <get_Homing_X>:

int get_Homing_X(void){
 8101784:	b580      	push	{r7, lr}
 8101786:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Homing_X_GPIO_Port, Homing_X_Pin) == GPIO_PIN_RESET;
 8101788:	f44f 6100 	mov.w	r1, #2048	; 0x800
 810178c:	4805      	ldr	r0, [pc, #20]	; (81017a4 <get_Homing_X+0x20>)
 810178e:	f002 fa6d 	bl	8103c6c <HAL_GPIO_ReadPin>
 8101792:	4603      	mov	r3, r0
 8101794:	2b00      	cmp	r3, #0
 8101796:	bf0c      	ite	eq
 8101798:	2301      	moveq	r3, #1
 810179a:	2300      	movne	r3, #0
 810179c:	b2db      	uxtb	r3, r3
}
 810179e:	4618      	mov	r0, r3
 81017a0:	bd80      	pop	{r7, pc}
 81017a2:	bf00      	nop
 81017a4:	58021000 	.word	0x58021000

081017a8 <get_Homing_Z>:
int get_Homing_Z(void){
 81017a8:	b580      	push	{r7, lr}
 81017aa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Homing_Z_GPIO_Port, Homing_Z_Pin) == GPIO_PIN_RESET;
 81017ac:	2104      	movs	r1, #4
 81017ae:	4805      	ldr	r0, [pc, #20]	; (81017c4 <get_Homing_Z+0x1c>)
 81017b0:	f002 fa5c 	bl	8103c6c <HAL_GPIO_ReadPin>
 81017b4:	4603      	mov	r3, r0
 81017b6:	2b00      	cmp	r3, #0
 81017b8:	bf0c      	ite	eq
 81017ba:	2301      	moveq	r3, #1
 81017bc:	2300      	movne	r3, #0
 81017be:	b2db      	uxtb	r3, r3
}
 81017c0:	4618      	mov	r0, r3
 81017c2:	bd80      	pop	{r7, pc}
 81017c4:	58020400 	.word	0x58020400

081017c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 81017c8:	b580      	push	{r7, lr}
 81017ca:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 81017cc:	4b1b      	ldr	r3, [pc, #108]	; (810183c <MX_I2C1_Init+0x74>)
 81017ce:	4a1c      	ldr	r2, [pc, #112]	; (8101840 <MX_I2C1_Init+0x78>)
 81017d0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 81017d2:	4b1a      	ldr	r3, [pc, #104]	; (810183c <MX_I2C1_Init+0x74>)
 81017d4:	4a1b      	ldr	r2, [pc, #108]	; (8101844 <MX_I2C1_Init+0x7c>)
 81017d6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 81017d8:	4b18      	ldr	r3, [pc, #96]	; (810183c <MX_I2C1_Init+0x74>)
 81017da:	2200      	movs	r2, #0
 81017dc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81017de:	4b17      	ldr	r3, [pc, #92]	; (810183c <MX_I2C1_Init+0x74>)
 81017e0:	2201      	movs	r2, #1
 81017e2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81017e4:	4b15      	ldr	r3, [pc, #84]	; (810183c <MX_I2C1_Init+0x74>)
 81017e6:	2200      	movs	r2, #0
 81017e8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 81017ea:	4b14      	ldr	r3, [pc, #80]	; (810183c <MX_I2C1_Init+0x74>)
 81017ec:	2200      	movs	r2, #0
 81017ee:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81017f0:	4b12      	ldr	r3, [pc, #72]	; (810183c <MX_I2C1_Init+0x74>)
 81017f2:	2200      	movs	r2, #0
 81017f4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81017f6:	4b11      	ldr	r3, [pc, #68]	; (810183c <MX_I2C1_Init+0x74>)
 81017f8:	2200      	movs	r2, #0
 81017fa:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81017fc:	4b0f      	ldr	r3, [pc, #60]	; (810183c <MX_I2C1_Init+0x74>)
 81017fe:	2200      	movs	r2, #0
 8101800:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101802:	480e      	ldr	r0, [pc, #56]	; (810183c <MX_I2C1_Init+0x74>)
 8101804:	f002 fa9a 	bl	8103d3c <HAL_I2C_Init>
 8101808:	4603      	mov	r3, r0
 810180a:	2b00      	cmp	r3, #0
 810180c:	d001      	beq.n	8101812 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 810180e:	f7ff fc8d 	bl	810112c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101812:	2100      	movs	r1, #0
 8101814:	4809      	ldr	r0, [pc, #36]	; (810183c <MX_I2C1_Init+0x74>)
 8101816:	f002 fff5 	bl	8104804 <HAL_I2CEx_ConfigAnalogFilter>
 810181a:	4603      	mov	r3, r0
 810181c:	2b00      	cmp	r3, #0
 810181e:	d001      	beq.n	8101824 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8101820:	f7ff fc84 	bl	810112c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101824:	2100      	movs	r1, #0
 8101826:	4805      	ldr	r0, [pc, #20]	; (810183c <MX_I2C1_Init+0x74>)
 8101828:	f003 f837 	bl	810489a <HAL_I2CEx_ConfigDigitalFilter>
 810182c:	4603      	mov	r3, r0
 810182e:	2b00      	cmp	r3, #0
 8101830:	d001      	beq.n	8101836 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8101832:	f7ff fc7b 	bl	810112c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8101836:	bf00      	nop
 8101838:	bd80      	pop	{r7, pc}
 810183a:	bf00      	nop
 810183c:	10000150 	.word	0x10000150
 8101840:	40005400 	.word	0x40005400
 8101844:	307075b1 	.word	0x307075b1

08101848 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 8101848:	b580      	push	{r7, lr}
 810184a:	b0b8      	sub	sp, #224	; 0xe0
 810184c:	af00      	add	r7, sp, #0
 810184e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8101850:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101854:	2200      	movs	r2, #0
 8101856:	601a      	str	r2, [r3, #0]
 8101858:	605a      	str	r2, [r3, #4]
 810185a:	609a      	str	r2, [r3, #8]
 810185c:	60da      	str	r2, [r3, #12]
 810185e:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8101860:	f107 0310 	add.w	r3, r7, #16
 8101864:	22bc      	movs	r2, #188	; 0xbc
 8101866:	2100      	movs	r1, #0
 8101868:	4618      	mov	r0, r3
 810186a:	f007 ffa1 	bl	81097b0 <memset>
	{ 0 };
	if (i2cHandle->Instance == I2C1)
 810186e:	687b      	ldr	r3, [r7, #4]
 8101870:	681b      	ldr	r3, [r3, #0]
 8101872:	4a25      	ldr	r2, [pc, #148]	; (8101908 <HAL_I2C_MspInit+0xc0>)
 8101874:	4293      	cmp	r3, r2
 8101876:	d142      	bne.n	81018fe <HAL_I2C_MspInit+0xb6>

		/* USER CODE END I2C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101878:	2308      	movs	r3, #8
 810187a:	613b      	str	r3, [r7, #16]
		PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 810187c:	2300      	movs	r3, #0
 810187e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101882:	f107 0310 	add.w	r3, r7, #16
 8101886:	4618      	mov	r0, r3
 8101888:	f003 fab4 	bl	8104df4 <HAL_RCCEx_PeriphCLKConfig>
 810188c:	4603      	mov	r3, r0
 810188e:	2b00      	cmp	r3, #0
 8101890:	d001      	beq.n	8101896 <HAL_I2C_MspInit+0x4e>
		{
			Error_Handler();
 8101892:	f7ff fc4b 	bl	810112c <Error_Handler>
		}

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8101896:	4b1d      	ldr	r3, [pc, #116]	; (810190c <HAL_I2C_MspInit+0xc4>)
 8101898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810189c:	4a1b      	ldr	r2, [pc, #108]	; (810190c <HAL_I2C_MspInit+0xc4>)
 810189e:	f043 0302 	orr.w	r3, r3, #2
 81018a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81018a6:	4b19      	ldr	r3, [pc, #100]	; (810190c <HAL_I2C_MspInit+0xc4>)
 81018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018ac:	f003 0302 	and.w	r3, r3, #2
 81018b0:	60fb      	str	r3, [r7, #12]
 81018b2:	68fb      	ldr	r3, [r7, #12]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 81018b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 81018b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81018bc:	2312      	movs	r3, #18
 81018be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018c2:	2300      	movs	r3, #0
 81018c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018c8:	2300      	movs	r3, #0
 81018ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81018ce:	2304      	movs	r3, #4
 81018d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81018d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81018d8:	4619      	mov	r1, r3
 81018da:	480d      	ldr	r0, [pc, #52]	; (8101910 <HAL_I2C_MspInit+0xc8>)
 81018dc:	f002 f816 	bl	810390c <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 81018e0:	4b0a      	ldr	r3, [pc, #40]	; (810190c <HAL_I2C_MspInit+0xc4>)
 81018e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81018e6:	4a09      	ldr	r2, [pc, #36]	; (810190c <HAL_I2C_MspInit+0xc4>)
 81018e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81018ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81018f0:	4b06      	ldr	r3, [pc, #24]	; (810190c <HAL_I2C_MspInit+0xc4>)
 81018f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81018f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81018fa:	60bb      	str	r3, [r7, #8]
 81018fc:	68bb      	ldr	r3, [r7, #8]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 81018fe:	bf00      	nop
 8101900:	37e0      	adds	r7, #224	; 0xe0
 8101902:	46bd      	mov	sp, r7
 8101904:	bd80      	pop	{r7, pc}
 8101906:	bf00      	nop
 8101908:	40005400 	.word	0x40005400
 810190c:	58024400 	.word	0x58024400
 8101910:	58020400 	.word	0x58020400

08101914 <i2c_Transmit>:
@param[5] pData: Pointer to the data buffer containing the data to be transmitted.
@param[6] pData_size: Size of the data buffer in bytes.

@retval HAL_StatusTypeDef: HAL status enumeration value.
 */
{
 8101914:	b590      	push	{r4, r7, lr}
 8101916:	b089      	sub	sp, #36	; 0x24
 8101918:	af04      	add	r7, sp, #16
 810191a:	6078      	str	r0, [r7, #4]
 810191c:	4608      	mov	r0, r1
 810191e:	4611      	mov	r1, r2
 8101920:	461a      	mov	r2, r3
 8101922:	4603      	mov	r3, r0
 8101924:	70fb      	strb	r3, [r7, #3]
 8101926:	460b      	mov	r3, r1
 8101928:	70bb      	strb	r3, [r7, #2]
 810192a:	4613      	mov	r3, r2
 810192c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef retFunc;
	uint8_t write_addr = DevAddress << 1;
 810192e:	78fb      	ldrb	r3, [r7, #3]
 8101930:	005b      	lsls	r3, r3, #1
 8101932:	73fb      	strb	r3, [r7, #15]
	retFunc = HAL_I2C_Mem_Write(bus, write_addr, MemAddress, MemAddSize, pData,
 8101934:	7bfb      	ldrb	r3, [r7, #15]
 8101936:	b299      	uxth	r1, r3
 8101938:	78bb      	ldrb	r3, [r7, #2]
 810193a:	b29a      	uxth	r2, r3
 810193c:	787b      	ldrb	r3, [r7, #1]
 810193e:	b298      	uxth	r0, r3
 8101940:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8101944:	b29b      	uxth	r3, r3
 8101946:	2432      	movs	r4, #50	; 0x32
 8101948:	9402      	str	r4, [sp, #8]
 810194a:	9301      	str	r3, [sp, #4]
 810194c:	6a3b      	ldr	r3, [r7, #32]
 810194e:	9300      	str	r3, [sp, #0]
 8101950:	4603      	mov	r3, r0
 8101952:	6878      	ldr	r0, [r7, #4]
 8101954:	f002 fa82 	bl	8103e5c <HAL_I2C_Mem_Write>
 8101958:	4603      	mov	r3, r0
 810195a:	73bb      	strb	r3, [r7, #14]
			pData_size, TIME_OUT);
	return retFunc;
 810195c:	7bbb      	ldrb	r3, [r7, #14]
}
 810195e:	4618      	mov	r0, r3
 8101960:	3714      	adds	r7, #20
 8101962:	46bd      	mov	sp, r7
 8101964:	bd90      	pop	{r4, r7, pc}

08101966 <i2c_Receive>:
@param[5] pData: Pointer to the data buffer to store the received data.
@param[6] pData_size: Size of the data buffer in bytes.

@retval HAL_StatusTypeDef: HAL status enumeration value.
 */
{
 8101966:	b590      	push	{r4, r7, lr}
 8101968:	b089      	sub	sp, #36	; 0x24
 810196a:	af04      	add	r7, sp, #16
 810196c:	6078      	str	r0, [r7, #4]
 810196e:	4608      	mov	r0, r1
 8101970:	4611      	mov	r1, r2
 8101972:	461a      	mov	r2, r3
 8101974:	4603      	mov	r3, r0
 8101976:	70fb      	strb	r3, [r7, #3]
 8101978:	460b      	mov	r3, r1
 810197a:	70bb      	strb	r3, [r7, #2]
 810197c:	4613      	mov	r3, r2
 810197e:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef retFunc;
	uint8_t read_addr = (DevAddress << 1) | 0x01;
 8101980:	78fb      	ldrb	r3, [r7, #3]
 8101982:	005b      	lsls	r3, r3, #1
 8101984:	b25b      	sxtb	r3, r3
 8101986:	f043 0301 	orr.w	r3, r3, #1
 810198a:	b25b      	sxtb	r3, r3
 810198c:	73fb      	strb	r3, [r7, #15]
	retFunc = HAL_I2C_Mem_Read(bus, read_addr, MemAddress, MemAddSize, pData,
 810198e:	7bfb      	ldrb	r3, [r7, #15]
 8101990:	b299      	uxth	r1, r3
 8101992:	78bb      	ldrb	r3, [r7, #2]
 8101994:	b29a      	uxth	r2, r3
 8101996:	787b      	ldrb	r3, [r7, #1]
 8101998:	b298      	uxth	r0, r3
 810199a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 810199e:	b29b      	uxth	r3, r3
 81019a0:	2432      	movs	r4, #50	; 0x32
 81019a2:	9402      	str	r4, [sp, #8]
 81019a4:	9301      	str	r3, [sp, #4]
 81019a6:	6a3b      	ldr	r3, [r7, #32]
 81019a8:	9300      	str	r3, [sp, #0]
 81019aa:	4603      	mov	r3, r0
 81019ac:	6878      	ldr	r0, [r7, #4]
 81019ae:	f002 fb69 	bl	8104084 <HAL_I2C_Mem_Read>
 81019b2:	4603      	mov	r3, r0
 81019b4:	73bb      	strb	r3, [r7, #14]
			pData_size, TIME_OUT);
	return retFunc;
 81019b6:	7bbb      	ldrb	r3, [r7, #14]
}
 81019b8:	4618      	mov	r0, r3
 81019ba:	3714      	adds	r7, #20
 81019bc:	46bd      	mov	sp, r7
 81019be:	bd90      	pop	{r4, r7, pc}

081019c0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 81019c0:	b580      	push	{r7, lr}
 81019c2:	b08a      	sub	sp, #40	; 0x28
 81019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81019c6:	f107 031c 	add.w	r3, r7, #28
 81019ca:	2200      	movs	r2, #0
 81019cc:	601a      	str	r2, [r3, #0]
 81019ce:	605a      	str	r2, [r3, #4]
 81019d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81019d2:	463b      	mov	r3, r7
 81019d4:	2200      	movs	r2, #0
 81019d6:	601a      	str	r2, [r3, #0]
 81019d8:	605a      	str	r2, [r3, #4]
 81019da:	609a      	str	r2, [r3, #8]
 81019dc:	60da      	str	r2, [r3, #12]
 81019de:	611a      	str	r2, [r3, #16]
 81019e0:	615a      	str	r2, [r3, #20]
 81019e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 81019e4:	4b27      	ldr	r3, [pc, #156]	; (8101a84 <MX_TIM2_Init+0xc4>)
 81019e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81019ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 81019ec:	4b25      	ldr	r3, [pc, #148]	; (8101a84 <MX_TIM2_Init+0xc4>)
 81019ee:	222f      	movs	r2, #47	; 0x2f
 81019f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81019f2:	4b24      	ldr	r3, [pc, #144]	; (8101a84 <MX_TIM2_Init+0xc4>)
 81019f4:	2200      	movs	r2, #0
 81019f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 81019f8:	4b22      	ldr	r3, [pc, #136]	; (8101a84 <MX_TIM2_Init+0xc4>)
 81019fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 81019fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101a00:	4b20      	ldr	r3, [pc, #128]	; (8101a84 <MX_TIM2_Init+0xc4>)
 8101a02:	2200      	movs	r2, #0
 8101a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101a06:	4b1f      	ldr	r3, [pc, #124]	; (8101a84 <MX_TIM2_Init+0xc4>)
 8101a08:	2200      	movs	r2, #0
 8101a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8101a0c:	481d      	ldr	r0, [pc, #116]	; (8101a84 <MX_TIM2_Init+0xc4>)
 8101a0e:	f005 fc4d 	bl	81072ac <HAL_TIM_PWM_Init>
 8101a12:	4603      	mov	r3, r0
 8101a14:	2b00      	cmp	r3, #0
 8101a16:	d001      	beq.n	8101a1c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8101a18:	f7ff fb88 	bl	810112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101a1c:	2300      	movs	r3, #0
 8101a1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101a20:	2300      	movs	r3, #0
 8101a22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101a24:	f107 031c 	add.w	r3, r7, #28
 8101a28:	4619      	mov	r1, r3
 8101a2a:	4816      	ldr	r0, [pc, #88]	; (8101a84 <MX_TIM2_Init+0xc4>)
 8101a2c:	f006 fcea 	bl	8108404 <HAL_TIMEx_MasterConfigSynchronization>
 8101a30:	4603      	mov	r3, r0
 8101a32:	2b00      	cmp	r3, #0
 8101a34:	d001      	beq.n	8101a3a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8101a36:	f7ff fb79 	bl	810112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101a3a:	2360      	movs	r3, #96	; 0x60
 8101a3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8101a3e:	2300      	movs	r3, #0
 8101a40:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101a42:	2300      	movs	r3, #0
 8101a44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101a46:	2300      	movs	r3, #0
 8101a48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101a4a:	463b      	mov	r3, r7
 8101a4c:	2208      	movs	r2, #8
 8101a4e:	4619      	mov	r1, r3
 8101a50:	480c      	ldr	r0, [pc, #48]	; (8101a84 <MX_TIM2_Init+0xc4>)
 8101a52:	f006 f805 	bl	8107a60 <HAL_TIM_PWM_ConfigChannel>
 8101a56:	4603      	mov	r3, r0
 8101a58:	2b00      	cmp	r3, #0
 8101a5a:	d001      	beq.n	8101a60 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8101a5c:	f7ff fb66 	bl	810112c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8101a60:	463b      	mov	r3, r7
 8101a62:	220c      	movs	r2, #12
 8101a64:	4619      	mov	r1, r3
 8101a66:	4807      	ldr	r0, [pc, #28]	; (8101a84 <MX_TIM2_Init+0xc4>)
 8101a68:	f005 fffa 	bl	8107a60 <HAL_TIM_PWM_ConfigChannel>
 8101a6c:	4603      	mov	r3, r0
 8101a6e:	2b00      	cmp	r3, #0
 8101a70:	d001      	beq.n	8101a76 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8101a72:	f7ff fb5b 	bl	810112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8101a76:	4803      	ldr	r0, [pc, #12]	; (8101a84 <MX_TIM2_Init+0xc4>)
 8101a78:	f000 fa9e 	bl	8101fb8 <HAL_TIM_MspPostInit>

}
 8101a7c:	bf00      	nop
 8101a7e:	3728      	adds	r7, #40	; 0x28
 8101a80:	46bd      	mov	sp, r7
 8101a82:	bd80      	pop	{r7, pc}
 8101a84:	1000019c 	.word	0x1000019c

08101a88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8101a88:	b580      	push	{r7, lr}
 8101a8a:	b08c      	sub	sp, #48	; 0x30
 8101a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8101a8e:	f107 030c 	add.w	r3, r7, #12
 8101a92:	2224      	movs	r2, #36	; 0x24
 8101a94:	2100      	movs	r1, #0
 8101a96:	4618      	mov	r0, r3
 8101a98:	f007 fe8a 	bl	81097b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101a9c:	463b      	mov	r3, r7
 8101a9e:	2200      	movs	r2, #0
 8101aa0:	601a      	str	r2, [r3, #0]
 8101aa2:	605a      	str	r2, [r3, #4]
 8101aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8101aa6:	4b21      	ldr	r3, [pc, #132]	; (8101b2c <MX_TIM3_Init+0xa4>)
 8101aa8:	4a21      	ldr	r2, [pc, #132]	; (8101b30 <MX_TIM3_Init+0xa8>)
 8101aaa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8101aac:	4b1f      	ldr	r3, [pc, #124]	; (8101b2c <MX_TIM3_Init+0xa4>)
 8101aae:	2200      	movs	r2, #0
 8101ab0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101ab2:	4b1e      	ldr	r3, [pc, #120]	; (8101b2c <MX_TIM3_Init+0xa4>)
 8101ab4:	2200      	movs	r2, #0
 8101ab6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8101ab8:	4b1c      	ldr	r3, [pc, #112]	; (8101b2c <MX_TIM3_Init+0xa4>)
 8101aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8101abe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101ac0:	4b1a      	ldr	r3, [pc, #104]	; (8101b2c <MX_TIM3_Init+0xa4>)
 8101ac2:	2200      	movs	r2, #0
 8101ac4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101ac6:	4b19      	ldr	r3, [pc, #100]	; (8101b2c <MX_TIM3_Init+0xa4>)
 8101ac8:	2200      	movs	r2, #0
 8101aca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8101acc:	2301      	movs	r3, #1
 8101ace:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8101ad0:	2300      	movs	r3, #0
 8101ad2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8101ad4:	2301      	movs	r3, #1
 8101ad6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8101ad8:	2300      	movs	r3, #0
 8101ada:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8101adc:	2300      	movs	r3, #0
 8101ade:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8101ae0:	2302      	movs	r3, #2
 8101ae2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8101ae4:	2301      	movs	r3, #1
 8101ae6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8101ae8:	2300      	movs	r3, #0
 8101aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8101aec:	2300      	movs	r3, #0
 8101aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8101af0:	f107 030c 	add.w	r3, r7, #12
 8101af4:	4619      	mov	r1, r3
 8101af6:	480d      	ldr	r0, [pc, #52]	; (8101b2c <MX_TIM3_Init+0xa4>)
 8101af8:	f005 fd3e 	bl	8107578 <HAL_TIM_Encoder_Init>
 8101afc:	4603      	mov	r3, r0
 8101afe:	2b00      	cmp	r3, #0
 8101b00:	d001      	beq.n	8101b06 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8101b02:	f7ff fb13 	bl	810112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101b06:	2300      	movs	r3, #0
 8101b08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101b0a:	2300      	movs	r3, #0
 8101b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8101b0e:	463b      	mov	r3, r7
 8101b10:	4619      	mov	r1, r3
 8101b12:	4806      	ldr	r0, [pc, #24]	; (8101b2c <MX_TIM3_Init+0xa4>)
 8101b14:	f006 fc76 	bl	8108404 <HAL_TIMEx_MasterConfigSynchronization>
 8101b18:	4603      	mov	r3, r0
 8101b1a:	2b00      	cmp	r3, #0
 8101b1c:	d001      	beq.n	8101b22 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8101b1e:	f7ff fb05 	bl	810112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8101b22:	bf00      	nop
 8101b24:	3730      	adds	r7, #48	; 0x30
 8101b26:	46bd      	mov	sp, r7
 8101b28:	bd80      	pop	{r7, pc}
 8101b2a:	bf00      	nop
 8101b2c:	100001e8 	.word	0x100001e8
 8101b30:	40000400 	.word	0x40000400

08101b34 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8101b34:	b580      	push	{r7, lr}
 8101b36:	b08c      	sub	sp, #48	; 0x30
 8101b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8101b3a:	f107 030c 	add.w	r3, r7, #12
 8101b3e:	2224      	movs	r2, #36	; 0x24
 8101b40:	2100      	movs	r1, #0
 8101b42:	4618      	mov	r0, r3
 8101b44:	f007 fe34 	bl	81097b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101b48:	463b      	mov	r3, r7
 8101b4a:	2200      	movs	r2, #0
 8101b4c:	601a      	str	r2, [r3, #0]
 8101b4e:	605a      	str	r2, [r3, #4]
 8101b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8101b52:	4b21      	ldr	r3, [pc, #132]	; (8101bd8 <MX_TIM4_Init+0xa4>)
 8101b54:	4a21      	ldr	r2, [pc, #132]	; (8101bdc <MX_TIM4_Init+0xa8>)
 8101b56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8101b58:	4b1f      	ldr	r3, [pc, #124]	; (8101bd8 <MX_TIM4_Init+0xa4>)
 8101b5a:	2200      	movs	r2, #0
 8101b5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101b5e:	4b1e      	ldr	r3, [pc, #120]	; (8101bd8 <MX_TIM4_Init+0xa4>)
 8101b60:	2200      	movs	r2, #0
 8101b62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8101b64:	4b1c      	ldr	r3, [pc, #112]	; (8101bd8 <MX_TIM4_Init+0xa4>)
 8101b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8101b6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101b6c:	4b1a      	ldr	r3, [pc, #104]	; (8101bd8 <MX_TIM4_Init+0xa4>)
 8101b6e:	2200      	movs	r2, #0
 8101b70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101b72:	4b19      	ldr	r3, [pc, #100]	; (8101bd8 <MX_TIM4_Init+0xa4>)
 8101b74:	2200      	movs	r2, #0
 8101b76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8101b78:	2301      	movs	r3, #1
 8101b7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8101b7c:	2300      	movs	r3, #0
 8101b7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8101b80:	2301      	movs	r3, #1
 8101b82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8101b84:	2300      	movs	r3, #0
 8101b86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8101b88:	2300      	movs	r3, #0
 8101b8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8101b8c:	2302      	movs	r3, #2
 8101b8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8101b90:	2301      	movs	r3, #1
 8101b92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8101b94:	2300      	movs	r3, #0
 8101b96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8101b98:	2300      	movs	r3, #0
 8101b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8101b9c:	f107 030c 	add.w	r3, r7, #12
 8101ba0:	4619      	mov	r1, r3
 8101ba2:	480d      	ldr	r0, [pc, #52]	; (8101bd8 <MX_TIM4_Init+0xa4>)
 8101ba4:	f005 fce8 	bl	8107578 <HAL_TIM_Encoder_Init>
 8101ba8:	4603      	mov	r3, r0
 8101baa:	2b00      	cmp	r3, #0
 8101bac:	d001      	beq.n	8101bb2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8101bae:	f7ff fabd 	bl	810112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101bb2:	2300      	movs	r3, #0
 8101bb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101bb6:	2300      	movs	r3, #0
 8101bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8101bba:	463b      	mov	r3, r7
 8101bbc:	4619      	mov	r1, r3
 8101bbe:	4806      	ldr	r0, [pc, #24]	; (8101bd8 <MX_TIM4_Init+0xa4>)
 8101bc0:	f006 fc20 	bl	8108404 <HAL_TIMEx_MasterConfigSynchronization>
 8101bc4:	4603      	mov	r3, r0
 8101bc6:	2b00      	cmp	r3, #0
 8101bc8:	d001      	beq.n	8101bce <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8101bca:	f7ff faaf 	bl	810112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8101bce:	bf00      	nop
 8101bd0:	3730      	adds	r7, #48	; 0x30
 8101bd2:	46bd      	mov	sp, r7
 8101bd4:	bd80      	pop	{r7, pc}
 8101bd6:	bf00      	nop
 8101bd8:	10000234 	.word	0x10000234
 8101bdc:	40000800 	.word	0x40000800

08101be0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8101be0:	b580      	push	{r7, lr}
 8101be2:	b084      	sub	sp, #16
 8101be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101be6:	1d3b      	adds	r3, r7, #4
 8101be8:	2200      	movs	r2, #0
 8101bea:	601a      	str	r2, [r3, #0]
 8101bec:	605a      	str	r2, [r3, #4]
 8101bee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8101bf0:	4b14      	ldr	r3, [pc, #80]	; (8101c44 <MX_TIM7_Init+0x64>)
 8101bf2:	4a15      	ldr	r2, [pc, #84]	; (8101c48 <MX_TIM7_Init+0x68>)
 8101bf4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 8101bf6:	4b13      	ldr	r3, [pc, #76]	; (8101c44 <MX_TIM7_Init+0x64>)
 8101bf8:	224f      	movs	r2, #79	; 0x4f
 8101bfa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101bfc:	4b11      	ldr	r3, [pc, #68]	; (8101c44 <MX_TIM7_Init+0x64>)
 8101bfe:	2200      	movs	r2, #0
 8101c00:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 60000-1;
 8101c02:	4b10      	ldr	r3, [pc, #64]	; (8101c44 <MX_TIM7_Init+0x64>)
 8101c04:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8101c08:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101c0a:	4b0e      	ldr	r3, [pc, #56]	; (8101c44 <MX_TIM7_Init+0x64>)
 8101c0c:	2200      	movs	r2, #0
 8101c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8101c10:	480c      	ldr	r0, [pc, #48]	; (8101c44 <MX_TIM7_Init+0x64>)
 8101c12:	f005 fa7b 	bl	810710c <HAL_TIM_Base_Init>
 8101c16:	4603      	mov	r3, r0
 8101c18:	2b00      	cmp	r3, #0
 8101c1a:	d001      	beq.n	8101c20 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8101c1c:	f7ff fa86 	bl	810112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101c20:	2300      	movs	r3, #0
 8101c22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101c24:	2300      	movs	r3, #0
 8101c26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8101c28:	1d3b      	adds	r3, r7, #4
 8101c2a:	4619      	mov	r1, r3
 8101c2c:	4805      	ldr	r0, [pc, #20]	; (8101c44 <MX_TIM7_Init+0x64>)
 8101c2e:	f006 fbe9 	bl	8108404 <HAL_TIMEx_MasterConfigSynchronization>
 8101c32:	4603      	mov	r3, r0
 8101c34:	2b00      	cmp	r3, #0
 8101c36:	d001      	beq.n	8101c3c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8101c38:	f7ff fa78 	bl	810112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8101c3c:	bf00      	nop
 8101c3e:	3710      	adds	r7, #16
 8101c40:	46bd      	mov	sp, r7
 8101c42:	bd80      	pop	{r7, pc}
 8101c44:	10000280 	.word	0x10000280
 8101c48:	40001400 	.word	0x40001400

08101c4c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8101c4c:	b580      	push	{r7, lr}
 8101c4e:	b088      	sub	sp, #32
 8101c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8101c52:	1d3b      	adds	r3, r7, #4
 8101c54:	2200      	movs	r2, #0
 8101c56:	601a      	str	r2, [r3, #0]
 8101c58:	605a      	str	r2, [r3, #4]
 8101c5a:	609a      	str	r2, [r3, #8]
 8101c5c:	60da      	str	r2, [r3, #12]
 8101c5e:	611a      	str	r2, [r3, #16]
 8101c60:	615a      	str	r2, [r3, #20]
 8101c62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8101c64:	4b1e      	ldr	r3, [pc, #120]	; (8101ce0 <MX_TIM13_Init+0x94>)
 8101c66:	4a1f      	ldr	r2, [pc, #124]	; (8101ce4 <MX_TIM13_Init+0x98>)
 8101c68:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 80-1;
 8101c6a:	4b1d      	ldr	r3, [pc, #116]	; (8101ce0 <MX_TIM13_Init+0x94>)
 8101c6c:	224f      	movs	r2, #79	; 0x4f
 8101c6e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101c70:	4b1b      	ldr	r3, [pc, #108]	; (8101ce0 <MX_TIM13_Init+0x94>)
 8101c72:	2200      	movs	r2, #0
 8101c74:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 60000-1;
 8101c76:	4b1a      	ldr	r3, [pc, #104]	; (8101ce0 <MX_TIM13_Init+0x94>)
 8101c78:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8101c7c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101c7e:	4b18      	ldr	r3, [pc, #96]	; (8101ce0 <MX_TIM13_Init+0x94>)
 8101c80:	2200      	movs	r2, #0
 8101c82:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101c84:	4b16      	ldr	r3, [pc, #88]	; (8101ce0 <MX_TIM13_Init+0x94>)
 8101c86:	2200      	movs	r2, #0
 8101c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8101c8a:	4815      	ldr	r0, [pc, #84]	; (8101ce0 <MX_TIM13_Init+0x94>)
 8101c8c:	f005 fa3e 	bl	810710c <HAL_TIM_Base_Init>
 8101c90:	4603      	mov	r3, r0
 8101c92:	2b00      	cmp	r3, #0
 8101c94:	d001      	beq.n	8101c9a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8101c96:	f7ff fa49 	bl	810112c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8101c9a:	4811      	ldr	r0, [pc, #68]	; (8101ce0 <MX_TIM13_Init+0x94>)
 8101c9c:	f005 fb06 	bl	81072ac <HAL_TIM_PWM_Init>
 8101ca0:	4603      	mov	r3, r0
 8101ca2:	2b00      	cmp	r3, #0
 8101ca4:	d001      	beq.n	8101caa <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8101ca6:	f7ff fa41 	bl	810112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101caa:	2360      	movs	r3, #96	; 0x60
 8101cac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8101cae:	2300      	movs	r3, #0
 8101cb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101cb2:	2300      	movs	r3, #0
 8101cb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101cb6:	2300      	movs	r3, #0
 8101cb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101cba:	1d3b      	adds	r3, r7, #4
 8101cbc:	2200      	movs	r2, #0
 8101cbe:	4619      	mov	r1, r3
 8101cc0:	4807      	ldr	r0, [pc, #28]	; (8101ce0 <MX_TIM13_Init+0x94>)
 8101cc2:	f005 fecd 	bl	8107a60 <HAL_TIM_PWM_ConfigChannel>
 8101cc6:	4603      	mov	r3, r0
 8101cc8:	2b00      	cmp	r3, #0
 8101cca:	d001      	beq.n	8101cd0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8101ccc:	f7ff fa2e 	bl	810112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8101cd0:	4803      	ldr	r0, [pc, #12]	; (8101ce0 <MX_TIM13_Init+0x94>)
 8101cd2:	f000 f971 	bl	8101fb8 <HAL_TIM_MspPostInit>

}
 8101cd6:	bf00      	nop
 8101cd8:	3720      	adds	r7, #32
 8101cda:	46bd      	mov	sp, r7
 8101cdc:	bd80      	pop	{r7, pc}
 8101cde:	bf00      	nop
 8101ce0:	100002cc 	.word	0x100002cc
 8101ce4:	40001c00 	.word	0x40001c00

08101ce8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8101ce8:	b580      	push	{r7, lr}
 8101cea:	b088      	sub	sp, #32
 8101cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8101cee:	1d3b      	adds	r3, r7, #4
 8101cf0:	2200      	movs	r2, #0
 8101cf2:	601a      	str	r2, [r3, #0]
 8101cf4:	605a      	str	r2, [r3, #4]
 8101cf6:	609a      	str	r2, [r3, #8]
 8101cf8:	60da      	str	r2, [r3, #12]
 8101cfa:	611a      	str	r2, [r3, #16]
 8101cfc:	615a      	str	r2, [r3, #20]
 8101cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8101d00:	4b1e      	ldr	r3, [pc, #120]	; (8101d7c <MX_TIM14_Init+0x94>)
 8101d02:	4a1f      	ldr	r2, [pc, #124]	; (8101d80 <MX_TIM14_Init+0x98>)
 8101d04:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80-1;
 8101d06:	4b1d      	ldr	r3, [pc, #116]	; (8101d7c <MX_TIM14_Init+0x94>)
 8101d08:	224f      	movs	r2, #79	; 0x4f
 8101d0a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101d0c:	4b1b      	ldr	r3, [pc, #108]	; (8101d7c <MX_TIM14_Init+0x94>)
 8101d0e:	2200      	movs	r2, #0
 8101d10:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 60000-1;
 8101d12:	4b1a      	ldr	r3, [pc, #104]	; (8101d7c <MX_TIM14_Init+0x94>)
 8101d14:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8101d18:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101d1a:	4b18      	ldr	r3, [pc, #96]	; (8101d7c <MX_TIM14_Init+0x94>)
 8101d1c:	2200      	movs	r2, #0
 8101d1e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101d20:	4b16      	ldr	r3, [pc, #88]	; (8101d7c <MX_TIM14_Init+0x94>)
 8101d22:	2200      	movs	r2, #0
 8101d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8101d26:	4815      	ldr	r0, [pc, #84]	; (8101d7c <MX_TIM14_Init+0x94>)
 8101d28:	f005 f9f0 	bl	810710c <HAL_TIM_Base_Init>
 8101d2c:	4603      	mov	r3, r0
 8101d2e:	2b00      	cmp	r3, #0
 8101d30:	d001      	beq.n	8101d36 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8101d32:	f7ff f9fb 	bl	810112c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8101d36:	4811      	ldr	r0, [pc, #68]	; (8101d7c <MX_TIM14_Init+0x94>)
 8101d38:	f005 fab8 	bl	81072ac <HAL_TIM_PWM_Init>
 8101d3c:	4603      	mov	r3, r0
 8101d3e:	2b00      	cmp	r3, #0
 8101d40:	d001      	beq.n	8101d46 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8101d42:	f7ff f9f3 	bl	810112c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101d46:	2360      	movs	r3, #96	; 0x60
 8101d48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8101d4a:	2300      	movs	r3, #0
 8101d4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101d4e:	2300      	movs	r3, #0
 8101d50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101d52:	2300      	movs	r3, #0
 8101d54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101d56:	1d3b      	adds	r3, r7, #4
 8101d58:	2200      	movs	r2, #0
 8101d5a:	4619      	mov	r1, r3
 8101d5c:	4807      	ldr	r0, [pc, #28]	; (8101d7c <MX_TIM14_Init+0x94>)
 8101d5e:	f005 fe7f 	bl	8107a60 <HAL_TIM_PWM_ConfigChannel>
 8101d62:	4603      	mov	r3, r0
 8101d64:	2b00      	cmp	r3, #0
 8101d66:	d001      	beq.n	8101d6c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8101d68:	f7ff f9e0 	bl	810112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8101d6c:	4803      	ldr	r0, [pc, #12]	; (8101d7c <MX_TIM14_Init+0x94>)
 8101d6e:	f000 f923 	bl	8101fb8 <HAL_TIM_MspPostInit>

}
 8101d72:	bf00      	nop
 8101d74:	3720      	adds	r7, #32
 8101d76:	46bd      	mov	sp, r7
 8101d78:	bd80      	pop	{r7, pc}
 8101d7a:	bf00      	nop
 8101d7c:	10000318 	.word	0x10000318
 8101d80:	40002000 	.word	0x40002000

08101d84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8101d84:	b480      	push	{r7}
 8101d86:	b085      	sub	sp, #20
 8101d88:	af00      	add	r7, sp, #0
 8101d8a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8101d8c:	687b      	ldr	r3, [r7, #4]
 8101d8e:	681b      	ldr	r3, [r3, #0]
 8101d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101d94:	d10e      	bne.n	8101db4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101d96:	4b0a      	ldr	r3, [pc, #40]	; (8101dc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8101d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d9c:	4a08      	ldr	r2, [pc, #32]	; (8101dc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8101d9e:	f043 0301 	orr.w	r3, r3, #1
 8101da2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101da6:	4b06      	ldr	r3, [pc, #24]	; (8101dc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8101da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101dac:	f003 0301 	and.w	r3, r3, #1
 8101db0:	60fb      	str	r3, [r7, #12]
 8101db2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8101db4:	bf00      	nop
 8101db6:	3714      	adds	r7, #20
 8101db8:	46bd      	mov	sp, r7
 8101dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dbe:	4770      	bx	lr
 8101dc0:	58024400 	.word	0x58024400

08101dc4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8101dc4:	b580      	push	{r7, lr}
 8101dc6:	b08c      	sub	sp, #48	; 0x30
 8101dc8:	af00      	add	r7, sp, #0
 8101dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101dcc:	f107 031c 	add.w	r3, r7, #28
 8101dd0:	2200      	movs	r2, #0
 8101dd2:	601a      	str	r2, [r3, #0]
 8101dd4:	605a      	str	r2, [r3, #4]
 8101dd6:	609a      	str	r2, [r3, #8]
 8101dd8:	60da      	str	r2, [r3, #12]
 8101dda:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8101ddc:	687b      	ldr	r3, [r7, #4]
 8101dde:	681b      	ldr	r3, [r3, #0]
 8101de0:	4a44      	ldr	r2, [pc, #272]	; (8101ef4 <HAL_TIM_Encoder_MspInit+0x130>)
 8101de2:	4293      	cmp	r3, r2
 8101de4:	d14d      	bne.n	8101e82 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8101de6:	4b44      	ldr	r3, [pc, #272]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101dec:	4a42      	ldr	r2, [pc, #264]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101dee:	f043 0302 	orr.w	r3, r3, #2
 8101df2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101df6:	4b40      	ldr	r3, [pc, #256]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101dfc:	f003 0302 	and.w	r3, r3, #2
 8101e00:	61bb      	str	r3, [r7, #24]
 8101e02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101e04:	4b3c      	ldr	r3, [pc, #240]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e0a:	4a3b      	ldr	r2, [pc, #236]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101e0c:	f043 0301 	orr.w	r3, r3, #1
 8101e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e14:	4b38      	ldr	r3, [pc, #224]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e1a:	f003 0301 	and.w	r3, r3, #1
 8101e1e:	617b      	str	r3, [r7, #20]
 8101e20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101e22:	4b35      	ldr	r3, [pc, #212]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e28:	4a33      	ldr	r2, [pc, #204]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101e2a:	f043 0302 	orr.w	r3, r3, #2
 8101e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e32:	4b31      	ldr	r3, [pc, #196]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e38:	f003 0302 	and.w	r3, r3, #2
 8101e3c:	613b      	str	r3, [r7, #16]
 8101e3e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_X_A_Pin;
 8101e40:	2340      	movs	r3, #64	; 0x40
 8101e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e44:	2302      	movs	r3, #2
 8101e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e48:	2300      	movs	r3, #0
 8101e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e4c:	2300      	movs	r3, #0
 8101e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101e50:	2302      	movs	r3, #2
 8101e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Encoder_X_A_GPIO_Port, &GPIO_InitStruct);
 8101e54:	f107 031c 	add.w	r3, r7, #28
 8101e58:	4619      	mov	r1, r3
 8101e5a:	4828      	ldr	r0, [pc, #160]	; (8101efc <HAL_TIM_Encoder_MspInit+0x138>)
 8101e5c:	f001 fd56 	bl	810390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_X_B_Pin;
 8101e60:	2320      	movs	r3, #32
 8101e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101e64:	2302      	movs	r3, #2
 8101e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e68:	2300      	movs	r3, #0
 8101e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e6c:	2300      	movs	r3, #0
 8101e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101e70:	2302      	movs	r3, #2
 8101e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Encoder_X_B_GPIO_Port, &GPIO_InitStruct);
 8101e74:	f107 031c 	add.w	r3, r7, #28
 8101e78:	4619      	mov	r1, r3
 8101e7a:	4821      	ldr	r0, [pc, #132]	; (8101f00 <HAL_TIM_Encoder_MspInit+0x13c>)
 8101e7c:	f001 fd46 	bl	810390c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8101e80:	e033      	b.n	8101eea <HAL_TIM_Encoder_MspInit+0x126>
  else if(tim_encoderHandle->Instance==TIM4)
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	681b      	ldr	r3, [r3, #0]
 8101e86:	4a1f      	ldr	r2, [pc, #124]	; (8101f04 <HAL_TIM_Encoder_MspInit+0x140>)
 8101e88:	4293      	cmp	r3, r2
 8101e8a:	d12e      	bne.n	8101eea <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8101e8c:	4b1a      	ldr	r3, [pc, #104]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e92:	4a19      	ldr	r2, [pc, #100]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101e94:	f043 0304 	orr.w	r3, r3, #4
 8101e98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e9c:	4b16      	ldr	r3, [pc, #88]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ea2:	f003 0304 	and.w	r3, r3, #4
 8101ea6:	60fb      	str	r3, [r7, #12]
 8101ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101eaa:	4b13      	ldr	r3, [pc, #76]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101eb0:	4a11      	ldr	r2, [pc, #68]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101eb2:	f043 0308 	orr.w	r3, r3, #8
 8101eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101eba:	4b0f      	ldr	r3, [pc, #60]	; (8101ef8 <HAL_TIM_Encoder_MspInit+0x134>)
 8101ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ec0:	f003 0308 	and.w	r3, r3, #8
 8101ec4:	60bb      	str	r3, [r7, #8]
 8101ec6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Z_A_Pin|Encoder_Z_B_Pin;
 8101ec8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8101ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ece:	2302      	movs	r3, #2
 8101ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ed2:	2300      	movs	r3, #0
 8101ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ed6:	2300      	movs	r3, #0
 8101ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8101eda:	2302      	movs	r3, #2
 8101edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101ede:	f107 031c 	add.w	r3, r7, #28
 8101ee2:	4619      	mov	r1, r3
 8101ee4:	4808      	ldr	r0, [pc, #32]	; (8101f08 <HAL_TIM_Encoder_MspInit+0x144>)
 8101ee6:	f001 fd11 	bl	810390c <HAL_GPIO_Init>
}
 8101eea:	bf00      	nop
 8101eec:	3730      	adds	r7, #48	; 0x30
 8101eee:	46bd      	mov	sp, r7
 8101ef0:	bd80      	pop	{r7, pc}
 8101ef2:	bf00      	nop
 8101ef4:	40000400 	.word	0x40000400
 8101ef8:	58024400 	.word	0x58024400
 8101efc:	58020000 	.word	0x58020000
 8101f00:	58020400 	.word	0x58020400
 8101f04:	40000800 	.word	0x40000800
 8101f08:	58020c00 	.word	0x58020c00

08101f0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8101f0c:	b580      	push	{r7, lr}
 8101f0e:	b086      	sub	sp, #24
 8101f10:	af00      	add	r7, sp, #0
 8101f12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8101f14:	687b      	ldr	r3, [r7, #4]
 8101f16:	681b      	ldr	r3, [r3, #0]
 8101f18:	4a23      	ldr	r2, [pc, #140]	; (8101fa8 <HAL_TIM_Base_MspInit+0x9c>)
 8101f1a:	4293      	cmp	r3, r2
 8101f1c:	d117      	bne.n	8101f4e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8101f1e:	4b23      	ldr	r3, [pc, #140]	; (8101fac <HAL_TIM_Base_MspInit+0xa0>)
 8101f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f24:	4a21      	ldr	r2, [pc, #132]	; (8101fac <HAL_TIM_Base_MspInit+0xa0>)
 8101f26:	f043 0320 	orr.w	r3, r3, #32
 8101f2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101f2e:	4b1f      	ldr	r3, [pc, #124]	; (8101fac <HAL_TIM_Base_MspInit+0xa0>)
 8101f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f34:	f003 0320 	and.w	r3, r3, #32
 8101f38:	617b      	str	r3, [r7, #20]
 8101f3a:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8101f3c:	2200      	movs	r2, #0
 8101f3e:	2100      	movs	r1, #0
 8101f40:	2037      	movs	r0, #55	; 0x37
 8101f42:	f001 fc9a 	bl	810387a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8101f46:	2037      	movs	r0, #55	; 0x37
 8101f48:	f001 fcb1 	bl	81038ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8101f4c:	e028      	b.n	8101fa0 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM13)
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	681b      	ldr	r3, [r3, #0]
 8101f52:	4a17      	ldr	r2, [pc, #92]	; (8101fb0 <HAL_TIM_Base_MspInit+0xa4>)
 8101f54:	4293      	cmp	r3, r2
 8101f56:	d10f      	bne.n	8101f78 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8101f58:	4b14      	ldr	r3, [pc, #80]	; (8101fac <HAL_TIM_Base_MspInit+0xa0>)
 8101f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f5e:	4a13      	ldr	r2, [pc, #76]	; (8101fac <HAL_TIM_Base_MspInit+0xa0>)
 8101f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101f64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101f68:	4b10      	ldr	r3, [pc, #64]	; (8101fac <HAL_TIM_Base_MspInit+0xa0>)
 8101f6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101f72:	613b      	str	r3, [r7, #16]
 8101f74:	693b      	ldr	r3, [r7, #16]
}
 8101f76:	e013      	b.n	8101fa0 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM14)
 8101f78:	687b      	ldr	r3, [r7, #4]
 8101f7a:	681b      	ldr	r3, [r3, #0]
 8101f7c:	4a0d      	ldr	r2, [pc, #52]	; (8101fb4 <HAL_TIM_Base_MspInit+0xa8>)
 8101f7e:	4293      	cmp	r3, r2
 8101f80:	d10e      	bne.n	8101fa0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8101f82:	4b0a      	ldr	r3, [pc, #40]	; (8101fac <HAL_TIM_Base_MspInit+0xa0>)
 8101f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f88:	4a08      	ldr	r2, [pc, #32]	; (8101fac <HAL_TIM_Base_MspInit+0xa0>)
 8101f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101f8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101f92:	4b06      	ldr	r3, [pc, #24]	; (8101fac <HAL_TIM_Base_MspInit+0xa0>)
 8101f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101f9c:	60fb      	str	r3, [r7, #12]
 8101f9e:	68fb      	ldr	r3, [r7, #12]
}
 8101fa0:	bf00      	nop
 8101fa2:	3718      	adds	r7, #24
 8101fa4:	46bd      	mov	sp, r7
 8101fa6:	bd80      	pop	{r7, pc}
 8101fa8:	40001400 	.word	0x40001400
 8101fac:	58024400 	.word	0x58024400
 8101fb0:	40001c00 	.word	0x40001c00
 8101fb4:	40002000 	.word	0x40002000

08101fb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8101fb8:	b580      	push	{r7, lr}
 8101fba:	b08a      	sub	sp, #40	; 0x28
 8101fbc:	af00      	add	r7, sp, #0
 8101fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101fc0:	f107 0314 	add.w	r3, r7, #20
 8101fc4:	2200      	movs	r2, #0
 8101fc6:	601a      	str	r2, [r3, #0]
 8101fc8:	605a      	str	r2, [r3, #4]
 8101fca:	609a      	str	r2, [r3, #8]
 8101fcc:	60da      	str	r2, [r3, #12]
 8101fce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	681b      	ldr	r3, [r3, #0]
 8101fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101fd8:	d120      	bne.n	810201c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101fda:	4b38      	ldr	r3, [pc, #224]	; (81020bc <HAL_TIM_MspPostInit+0x104>)
 8101fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fe0:	4a36      	ldr	r2, [pc, #216]	; (81020bc <HAL_TIM_MspPostInit+0x104>)
 8101fe2:	f043 0302 	orr.w	r3, r3, #2
 8101fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101fea:	4b34      	ldr	r3, [pc, #208]	; (81020bc <HAL_TIM_MspPostInit+0x104>)
 8101fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ff0:	f003 0302 	and.w	r3, r3, #2
 8101ff4:	613b      	str	r3, [r7, #16]
 8101ff6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_X_Pin|PWM_Z_Pin;
 8101ff8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ffe:	2302      	movs	r3, #2
 8102000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102002:	2300      	movs	r3, #0
 8102004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102006:	2300      	movs	r3, #0
 8102008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 810200a:	2301      	movs	r3, #1
 810200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810200e:	f107 0314 	add.w	r3, r7, #20
 8102012:	4619      	mov	r1, r3
 8102014:	482a      	ldr	r0, [pc, #168]	; (81020c0 <HAL_TIM_MspPostInit+0x108>)
 8102016:	f001 fc79 	bl	810390c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 810201a:	e04a      	b.n	81020b2 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	681b      	ldr	r3, [r3, #0]
 8102020:	4a28      	ldr	r2, [pc, #160]	; (81020c4 <HAL_TIM_MspPostInit+0x10c>)
 8102022:	4293      	cmp	r3, r2
 8102024:	d120      	bne.n	8102068 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102026:	4b25      	ldr	r3, [pc, #148]	; (81020bc <HAL_TIM_MspPostInit+0x104>)
 8102028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810202c:	4a23      	ldr	r2, [pc, #140]	; (81020bc <HAL_TIM_MspPostInit+0x104>)
 810202e:	f043 0320 	orr.w	r3, r3, #32
 8102032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102036:	4b21      	ldr	r3, [pc, #132]	; (81020bc <HAL_TIM_MspPostInit+0x104>)
 8102038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810203c:	f003 0320 	and.w	r3, r3, #32
 8102040:	60fb      	str	r3, [r7, #12]
 8102042:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Servo_Rotate_Pin;
 8102044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8102048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810204a:	2302      	movs	r3, #2
 810204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810204e:	2300      	movs	r3, #0
 8102050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102052:	2300      	movs	r3, #0
 8102054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8102056:	2309      	movs	r3, #9
 8102058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Servo_Rotate_GPIO_Port, &GPIO_InitStruct);
 810205a:	f107 0314 	add.w	r3, r7, #20
 810205e:	4619      	mov	r1, r3
 8102060:	4819      	ldr	r0, [pc, #100]	; (81020c8 <HAL_TIM_MspPostInit+0x110>)
 8102062:	f001 fc53 	bl	810390c <HAL_GPIO_Init>
}
 8102066:	e024      	b.n	81020b2 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8102068:	687b      	ldr	r3, [r7, #4]
 810206a:	681b      	ldr	r3, [r3, #0]
 810206c:	4a17      	ldr	r2, [pc, #92]	; (81020cc <HAL_TIM_MspPostInit+0x114>)
 810206e:	4293      	cmp	r3, r2
 8102070:	d11f      	bne.n	81020b2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102072:	4b12      	ldr	r3, [pc, #72]	; (81020bc <HAL_TIM_MspPostInit+0x104>)
 8102074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102078:	4a10      	ldr	r2, [pc, #64]	; (81020bc <HAL_TIM_MspPostInit+0x104>)
 810207a:	f043 0320 	orr.w	r3, r3, #32
 810207e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102082:	4b0e      	ldr	r3, [pc, #56]	; (81020bc <HAL_TIM_MspPostInit+0x104>)
 8102084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102088:	f003 0320 	and.w	r3, r3, #32
 810208c:	60bb      	str	r3, [r7, #8]
 810208e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_Servo_Slider_Pin;
 8102090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8102094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102096:	2302      	movs	r3, #2
 8102098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810209a:	2300      	movs	r3, #0
 810209c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810209e:	2300      	movs	r3, #0
 81020a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 81020a2:	2309      	movs	r3, #9
 81020a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Servo_Slider_GPIO_Port, &GPIO_InitStruct);
 81020a6:	f107 0314 	add.w	r3, r7, #20
 81020aa:	4619      	mov	r1, r3
 81020ac:	4806      	ldr	r0, [pc, #24]	; (81020c8 <HAL_TIM_MspPostInit+0x110>)
 81020ae:	f001 fc2d 	bl	810390c <HAL_GPIO_Init>
}
 81020b2:	bf00      	nop
 81020b4:	3728      	adds	r7, #40	; 0x28
 81020b6:	46bd      	mov	sp, r7
 81020b8:	bd80      	pop	{r7, pc}
 81020ba:	bf00      	nop
 81020bc:	58024400 	.word	0x58024400
 81020c0:	58020400 	.word	0x58020400
 81020c4:	40001c00 	.word	0x40001c00
 81020c8:	58021400 	.word	0x58021400
 81020cc:	40002000 	.word	0x40002000

081020d0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
// Interrupt to check if a coin has been inserted
// Frequency is 50Hz ?
{
 81020d0:	b480      	push	{r7}
 81020d2:	b083      	sub	sp, #12
 81020d4:	af00      	add	r7, sp, #0
 81020d6:	6078      	str	r0, [r7, #4]
		{
			mem_Board[Sens_CoinEntry - 1]++;
		}
		*/
	}
}
 81020d8:	bf00      	nop
 81020da:	370c      	adds	r7, #12
 81020dc:	46bd      	mov	sp, r7
 81020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020e2:	4770      	bx	lr

081020e4 <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 81020e4:	b580      	push	{r7, lr}
 81020e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81020e8:	4b22      	ldr	r3, [pc, #136]	; (8102174 <MX_USART3_UART_Init+0x90>)
 81020ea:	4a23      	ldr	r2, [pc, #140]	; (8102178 <MX_USART3_UART_Init+0x94>)
 81020ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81020ee:	4b21      	ldr	r3, [pc, #132]	; (8102174 <MX_USART3_UART_Init+0x90>)
 81020f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81020f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81020f6:	4b1f      	ldr	r3, [pc, #124]	; (8102174 <MX_USART3_UART_Init+0x90>)
 81020f8:	2200      	movs	r2, #0
 81020fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81020fc:	4b1d      	ldr	r3, [pc, #116]	; (8102174 <MX_USART3_UART_Init+0x90>)
 81020fe:	2200      	movs	r2, #0
 8102100:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102102:	4b1c      	ldr	r3, [pc, #112]	; (8102174 <MX_USART3_UART_Init+0x90>)
 8102104:	2200      	movs	r2, #0
 8102106:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102108:	4b1a      	ldr	r3, [pc, #104]	; (8102174 <MX_USART3_UART_Init+0x90>)
 810210a:	220c      	movs	r2, #12
 810210c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810210e:	4b19      	ldr	r3, [pc, #100]	; (8102174 <MX_USART3_UART_Init+0x90>)
 8102110:	2200      	movs	r2, #0
 8102112:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102114:	4b17      	ldr	r3, [pc, #92]	; (8102174 <MX_USART3_UART_Init+0x90>)
 8102116:	2200      	movs	r2, #0
 8102118:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810211a:	4b16      	ldr	r3, [pc, #88]	; (8102174 <MX_USART3_UART_Init+0x90>)
 810211c:	2200      	movs	r2, #0
 810211e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102120:	4b14      	ldr	r3, [pc, #80]	; (8102174 <MX_USART3_UART_Init+0x90>)
 8102122:	2200      	movs	r2, #0
 8102124:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102126:	4b13      	ldr	r3, [pc, #76]	; (8102174 <MX_USART3_UART_Init+0x90>)
 8102128:	2200      	movs	r2, #0
 810212a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 810212c:	4811      	ldr	r0, [pc, #68]	; (8102174 <MX_USART3_UART_Init+0x90>)
 810212e:	f006 fa15 	bl	810855c <HAL_UART_Init>
 8102132:	4603      	mov	r3, r0
 8102134:	2b00      	cmp	r3, #0
 8102136:	d001      	beq.n	810213c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8102138:	f7fe fff8 	bl	810112c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810213c:	2100      	movs	r1, #0
 810213e:	480d      	ldr	r0, [pc, #52]	; (8102174 <MX_USART3_UART_Init+0x90>)
 8102140:	f007 fa48 	bl	81095d4 <HAL_UARTEx_SetTxFifoThreshold>
 8102144:	4603      	mov	r3, r0
 8102146:	2b00      	cmp	r3, #0
 8102148:	d001      	beq.n	810214e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810214a:	f7fe ffef 	bl	810112c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810214e:	2100      	movs	r1, #0
 8102150:	4808      	ldr	r0, [pc, #32]	; (8102174 <MX_USART3_UART_Init+0x90>)
 8102152:	f007 fa7d 	bl	8109650 <HAL_UARTEx_SetRxFifoThreshold>
 8102156:	4603      	mov	r3, r0
 8102158:	2b00      	cmp	r3, #0
 810215a:	d001      	beq.n	8102160 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 810215c:	f7fe ffe6 	bl	810112c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102160:	4804      	ldr	r0, [pc, #16]	; (8102174 <MX_USART3_UART_Init+0x90>)
 8102162:	f007 f9fe 	bl	8109562 <HAL_UARTEx_DisableFifoMode>
 8102166:	4603      	mov	r3, r0
 8102168:	2b00      	cmp	r3, #0
 810216a:	d001      	beq.n	8102170 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 810216c:	f7fe ffde 	bl	810112c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102170:	bf00      	nop
 8102172:	bd80      	pop	{r7, pc}
 8102174:	10000364 	.word	0x10000364
 8102178:	40004800 	.word	0x40004800

0810217c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 810217c:	b580      	push	{r7, lr}
 810217e:	b0bc      	sub	sp, #240	; 0xf0
 8102180:	af00      	add	r7, sp, #0
 8102182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102184:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102188:	2200      	movs	r2, #0
 810218a:	601a      	str	r2, [r3, #0]
 810218c:	605a      	str	r2, [r3, #4]
 810218e:	609a      	str	r2, [r3, #8]
 8102190:	60da      	str	r2, [r3, #12]
 8102192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102194:	f107 0320 	add.w	r3, r7, #32
 8102198:	22bc      	movs	r2, #188	; 0xbc
 810219a:	2100      	movs	r1, #0
 810219c:	4618      	mov	r0, r3
 810219e:	f007 fb07 	bl	81097b0 <memset>
  if(uartHandle->Instance==UART5)
 81021a2:	687b      	ldr	r3, [r7, #4]
 81021a4:	681b      	ldr	r3, [r3, #0]
 81021a6:	4a5c      	ldr	r2, [pc, #368]	; (8102318 <HAL_UART_MspInit+0x19c>)
 81021a8:	4293      	cmp	r3, r2
 81021aa:	d168      	bne.n	810227e <HAL_UART_MspInit+0x102>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 81021ac:	2302      	movs	r3, #2
 81021ae:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81021b0:	2300      	movs	r3, #0
 81021b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81021b6:	f107 0320 	add.w	r3, r7, #32
 81021ba:	4618      	mov	r0, r3
 81021bc:	f002 fe1a 	bl	8104df4 <HAL_RCCEx_PeriphCLKConfig>
 81021c0:	4603      	mov	r3, r0
 81021c2:	2b00      	cmp	r3, #0
 81021c4:	d001      	beq.n	81021ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 81021c6:	f7fe ffb1 	bl	810112c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 81021ca:	4b54      	ldr	r3, [pc, #336]	; (810231c <HAL_UART_MspInit+0x1a0>)
 81021cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81021d0:	4a52      	ldr	r2, [pc, #328]	; (810231c <HAL_UART_MspInit+0x1a0>)
 81021d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81021d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81021da:	4b50      	ldr	r3, [pc, #320]	; (810231c <HAL_UART_MspInit+0x1a0>)
 81021dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81021e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81021e4:	61fb      	str	r3, [r7, #28]
 81021e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81021e8:	4b4c      	ldr	r3, [pc, #304]	; (810231c <HAL_UART_MspInit+0x1a0>)
 81021ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021ee:	4a4b      	ldr	r2, [pc, #300]	; (810231c <HAL_UART_MspInit+0x1a0>)
 81021f0:	f043 0302 	orr.w	r3, r3, #2
 81021f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81021f8:	4b48      	ldr	r3, [pc, #288]	; (810231c <HAL_UART_MspInit+0x1a0>)
 81021fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021fe:	f003 0302 	and.w	r3, r3, #2
 8102202:	61bb      	str	r3, [r7, #24]
 8102204:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8102206:	4b45      	ldr	r3, [pc, #276]	; (810231c <HAL_UART_MspInit+0x1a0>)
 8102208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810220c:	4a43      	ldr	r2, [pc, #268]	; (810231c <HAL_UART_MspInit+0x1a0>)
 810220e:	f043 0304 	orr.w	r3, r3, #4
 8102212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102216:	4b41      	ldr	r3, [pc, #260]	; (810231c <HAL_UART_MspInit+0x1a0>)
 8102218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810221c:	f003 0304 	and.w	r3, r3, #4
 8102220:	617b      	str	r3, [r7, #20]
 8102222:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8102224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102228:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810222c:	2302      	movs	r3, #2
 810222e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102232:	2300      	movs	r3, #0
 8102234:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102238:	2300      	movs	r3, #0
 810223a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 810223e:	230e      	movs	r3, #14
 8102240:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102244:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102248:	4619      	mov	r1, r3
 810224a:	4835      	ldr	r0, [pc, #212]	; (8102320 <HAL_UART_MspInit+0x1a4>)
 810224c:	f001 fb5e 	bl	810390c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8102250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102254:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102258:	2302      	movs	r3, #2
 810225a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810225e:	2300      	movs	r3, #0
 8102260:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102264:	2300      	movs	r3, #0
 8102266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 810226a:	2308      	movs	r3, #8
 810226c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102270:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102274:	4619      	mov	r1, r3
 8102276:	482b      	ldr	r0, [pc, #172]	; (8102324 <HAL_UART_MspInit+0x1a8>)
 8102278:	f001 fb48 	bl	810390c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 810227c:	e047      	b.n	810230e <HAL_UART_MspInit+0x192>
  else if(uartHandle->Instance==USART3)
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	681b      	ldr	r3, [r3, #0]
 8102282:	4a29      	ldr	r2, [pc, #164]	; (8102328 <HAL_UART_MspInit+0x1ac>)
 8102284:	4293      	cmp	r3, r2
 8102286:	d142      	bne.n	810230e <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102288:	2302      	movs	r3, #2
 810228a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810228c:	2300      	movs	r3, #0
 810228e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102292:	f107 0320 	add.w	r3, r7, #32
 8102296:	4618      	mov	r0, r3
 8102298:	f002 fdac 	bl	8104df4 <HAL_RCCEx_PeriphCLKConfig>
 810229c:	4603      	mov	r3, r0
 810229e:	2b00      	cmp	r3, #0
 81022a0:	d001      	beq.n	81022a6 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 81022a2:	f7fe ff43 	bl	810112c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 81022a6:	4b1d      	ldr	r3, [pc, #116]	; (810231c <HAL_UART_MspInit+0x1a0>)
 81022a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81022ac:	4a1b      	ldr	r2, [pc, #108]	; (810231c <HAL_UART_MspInit+0x1a0>)
 81022ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81022b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81022b6:	4b19      	ldr	r3, [pc, #100]	; (810231c <HAL_UART_MspInit+0x1a0>)
 81022b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81022bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81022c0:	613b      	str	r3, [r7, #16]
 81022c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81022c4:	4b15      	ldr	r3, [pc, #84]	; (810231c <HAL_UART_MspInit+0x1a0>)
 81022c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81022ca:	4a14      	ldr	r2, [pc, #80]	; (810231c <HAL_UART_MspInit+0x1a0>)
 81022cc:	f043 0308 	orr.w	r3, r3, #8
 81022d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81022d4:	4b11      	ldr	r3, [pc, #68]	; (810231c <HAL_UART_MspInit+0x1a0>)
 81022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81022da:	f003 0308 	and.w	r3, r3, #8
 81022de:	60fb      	str	r3, [r7, #12]
 81022e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 81022e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 81022e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81022ea:	2302      	movs	r3, #2
 81022ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81022f0:	2300      	movs	r3, #0
 81022f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81022f6:	2300      	movs	r3, #0
 81022f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81022fc:	2307      	movs	r3, #7
 81022fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102302:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102306:	4619      	mov	r1, r3
 8102308:	4808      	ldr	r0, [pc, #32]	; (810232c <HAL_UART_MspInit+0x1b0>)
 810230a:	f001 faff 	bl	810390c <HAL_GPIO_Init>
}
 810230e:	bf00      	nop
 8102310:	37f0      	adds	r7, #240	; 0xf0
 8102312:	46bd      	mov	sp, r7
 8102314:	bd80      	pop	{r7, pc}
 8102316:	bf00      	nop
 8102318:	40005000 	.word	0x40005000
 810231c:	58024400 	.word	0x58024400
 8102320:	58020400 	.word	0x58020400
 8102324:	58020800 	.word	0x58020800
 8102328:	40004800 	.word	0x40004800
 810232c:	58020c00 	.word	0x58020c00

08102330 <ST_LINK_WRITE>:
  }
}

/* USER CODE BEGIN 1 */
void ST_LINK_WRITE(uint8_t * msg, uint8_t length)
{
 8102330:	b580      	push	{r7, lr}
 8102332:	b082      	sub	sp, #8
 8102334:	af00      	add	r7, sp, #0
 8102336:	6078      	str	r0, [r7, #4]
 8102338:	460b      	mov	r3, r1
 810233a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3,msg,length,100);
 810233c:	78fb      	ldrb	r3, [r7, #3]
 810233e:	b29a      	uxth	r2, r3
 8102340:	2364      	movs	r3, #100	; 0x64
 8102342:	6879      	ldr	r1, [r7, #4]
 8102344:	4803      	ldr	r0, [pc, #12]	; (8102354 <ST_LINK_WRITE+0x24>)
 8102346:	f006 f959 	bl	81085fc <HAL_UART_Transmit>
}
 810234a:	bf00      	nop
 810234c:	3708      	adds	r7, #8
 810234e:	46bd      	mov	sp, r7
 8102350:	bd80      	pop	{r7, pc}
 8102352:	bf00      	nop
 8102354:	10000364 	.word	0x10000364

08102358 <send_msg>:

void send_msg(uint8_t *msg_array)
/* Sends a message to the user */
{
 8102358:	b580      	push	{r7, lr}
 810235a:	b090      	sub	sp, #64	; 0x40
 810235c:	af00      	add	r7, sp, #0
 810235e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[50]; // TODO: I think all buffers could be a global one at
						// a later stage or local for the library
	sprintf(buffer,(uint8_t*) msg_array);
 8102360:	f107 030c 	add.w	r3, r7, #12
 8102364:	6879      	ldr	r1, [r7, #4]
 8102366:	4618      	mov	r0, r3
 8102368:	f007 fa2a 	bl	81097c0 <siprintf>
	ST_LINK_WRITE(buffer, sizeof(buffer));
 810236c:	f107 030c 	add.w	r3, r7, #12
 8102370:	2132      	movs	r1, #50	; 0x32
 8102372:	4618      	mov	r0, r3
 8102374:	f7ff ffdc 	bl	8102330 <ST_LINK_WRITE>
	HAL_Delay(10);
 8102378:	200a      	movs	r0, #10
 810237a:	f000 f8e3 	bl	8102544 <HAL_Delay>
}
 810237e:	bf00      	nop
 8102380:	3740      	adds	r7, #64	; 0x40
 8102382:	46bd      	mov	sp, r7
 8102384:	bd80      	pop	{r7, pc}
	...

08102388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102388:	f8df d034 	ldr.w	sp, [pc, #52]	; 81023c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810238c:	f7fe f97a 	bl	8100684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102390:	480c      	ldr	r0, [pc, #48]	; (81023c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102392:	490d      	ldr	r1, [pc, #52]	; (81023c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102394:	4a0d      	ldr	r2, [pc, #52]	; (81023cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102398:	e002      	b.n	81023a0 <LoopCopyDataInit>

0810239a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810239a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810239c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810239e:	3304      	adds	r3, #4

081023a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81023a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81023a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81023a4:	d3f9      	bcc.n	810239a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81023a6:	4a0a      	ldr	r2, [pc, #40]	; (81023d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81023a8:	4c0a      	ldr	r4, [pc, #40]	; (81023d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 81023aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 81023ac:	e001      	b.n	81023b2 <LoopFillZerobss>

081023ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81023ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81023b0:	3204      	adds	r2, #4

081023b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81023b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81023b4:	d3fb      	bcc.n	81023ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81023b6:	f007 f9d7 	bl	8109768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81023ba:	f7fe fe4b 	bl	8101054 <main>
  bx  lr
 81023be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81023c0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81023c4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81023c8:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 81023cc:	0810a434 	.word	0x0810a434
  ldr r2, =_sbss
 81023d0:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 81023d4:	1000040c 	.word	0x1000040c

081023d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81023d8:	e7fe      	b.n	81023d8 <ADC3_IRQHandler>
	...

081023dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81023dc:	b580      	push	{r7, lr}
 81023de:	b082      	sub	sp, #8
 81023e0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81023e2:	4b28      	ldr	r3, [pc, #160]	; (8102484 <HAL_Init+0xa8>)
 81023e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81023e8:	4a26      	ldr	r2, [pc, #152]	; (8102484 <HAL_Init+0xa8>)
 81023ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81023ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81023f2:	4b24      	ldr	r3, [pc, #144]	; (8102484 <HAL_Init+0xa8>)
 81023f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81023f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81023fc:	603b      	str	r3, [r7, #0]
 81023fe:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102400:	4b21      	ldr	r3, [pc, #132]	; (8102488 <HAL_Init+0xac>)
 8102402:	681b      	ldr	r3, [r3, #0]
 8102404:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102408:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810240c:	4a1e      	ldr	r2, [pc, #120]	; (8102488 <HAL_Init+0xac>)
 810240e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102412:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102414:	4b1c      	ldr	r3, [pc, #112]	; (8102488 <HAL_Init+0xac>)
 8102416:	681b      	ldr	r3, [r3, #0]
 8102418:	4a1b      	ldr	r2, [pc, #108]	; (8102488 <HAL_Init+0xac>)
 810241a:	f043 0301 	orr.w	r3, r3, #1
 810241e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102420:	2003      	movs	r0, #3
 8102422:	f001 fa1f 	bl	8103864 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102426:	f002 fb0d 	bl	8104a44 <HAL_RCC_GetSysClockFreq>
 810242a:	4602      	mov	r2, r0
 810242c:	4b15      	ldr	r3, [pc, #84]	; (8102484 <HAL_Init+0xa8>)
 810242e:	699b      	ldr	r3, [r3, #24]
 8102430:	0a1b      	lsrs	r3, r3, #8
 8102432:	f003 030f 	and.w	r3, r3, #15
 8102436:	4915      	ldr	r1, [pc, #84]	; (810248c <HAL_Init+0xb0>)
 8102438:	5ccb      	ldrb	r3, [r1, r3]
 810243a:	f003 031f 	and.w	r3, r3, #31
 810243e:	fa22 f303 	lsr.w	r3, r2, r3
 8102442:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102444:	4b0f      	ldr	r3, [pc, #60]	; (8102484 <HAL_Init+0xa8>)
 8102446:	699b      	ldr	r3, [r3, #24]
 8102448:	f003 030f 	and.w	r3, r3, #15
 810244c:	4a0f      	ldr	r2, [pc, #60]	; (810248c <HAL_Init+0xb0>)
 810244e:	5cd3      	ldrb	r3, [r2, r3]
 8102450:	f003 031f 	and.w	r3, r3, #31
 8102454:	687a      	ldr	r2, [r7, #4]
 8102456:	fa22 f303 	lsr.w	r3, r2, r3
 810245a:	4a0d      	ldr	r2, [pc, #52]	; (8102490 <HAL_Init+0xb4>)
 810245c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810245e:	4b0c      	ldr	r3, [pc, #48]	; (8102490 <HAL_Init+0xb4>)
 8102460:	681b      	ldr	r3, [r3, #0]
 8102462:	4a0c      	ldr	r2, [pc, #48]	; (8102494 <HAL_Init+0xb8>)
 8102464:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102466:	2000      	movs	r0, #0
 8102468:	f000 f816 	bl	8102498 <HAL_InitTick>
 810246c:	4603      	mov	r3, r0
 810246e:	2b00      	cmp	r3, #0
 8102470:	d001      	beq.n	8102476 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102472:	2301      	movs	r3, #1
 8102474:	e002      	b.n	810247c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102476:	f7fe fe67 	bl	8101148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810247a:	2300      	movs	r3, #0
}
 810247c:	4618      	mov	r0, r3
 810247e:	3708      	adds	r7, #8
 8102480:	46bd      	mov	sp, r7
 8102482:	bd80      	pop	{r7, pc}
 8102484:	58024400 	.word	0x58024400
 8102488:	40024400 	.word	0x40024400
 810248c:	0810a3b8 	.word	0x0810a3b8
 8102490:	10000004 	.word	0x10000004
 8102494:	10000000 	.word	0x10000000

08102498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102498:	b580      	push	{r7, lr}
 810249a:	b082      	sub	sp, #8
 810249c:	af00      	add	r7, sp, #0
 810249e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81024a0:	4b15      	ldr	r3, [pc, #84]	; (81024f8 <HAL_InitTick+0x60>)
 81024a2:	781b      	ldrb	r3, [r3, #0]
 81024a4:	2b00      	cmp	r3, #0
 81024a6:	d101      	bne.n	81024ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81024a8:	2301      	movs	r3, #1
 81024aa:	e021      	b.n	81024f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81024ac:	4b13      	ldr	r3, [pc, #76]	; (81024fc <HAL_InitTick+0x64>)
 81024ae:	681a      	ldr	r2, [r3, #0]
 81024b0:	4b11      	ldr	r3, [pc, #68]	; (81024f8 <HAL_InitTick+0x60>)
 81024b2:	781b      	ldrb	r3, [r3, #0]
 81024b4:	4619      	mov	r1, r3
 81024b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 81024be:	fbb2 f3f3 	udiv	r3, r2, r3
 81024c2:	4618      	mov	r0, r3
 81024c4:	f001 fa01 	bl	81038ca <HAL_SYSTICK_Config>
 81024c8:	4603      	mov	r3, r0
 81024ca:	2b00      	cmp	r3, #0
 81024cc:	d001      	beq.n	81024d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81024ce:	2301      	movs	r3, #1
 81024d0:	e00e      	b.n	81024f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	2b0f      	cmp	r3, #15
 81024d6:	d80a      	bhi.n	81024ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81024d8:	2200      	movs	r2, #0
 81024da:	6879      	ldr	r1, [r7, #4]
 81024dc:	f04f 30ff 	mov.w	r0, #4294967295
 81024e0:	f001 f9cb 	bl	810387a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81024e4:	4a06      	ldr	r2, [pc, #24]	; (8102500 <HAL_InitTick+0x68>)
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81024ea:	2300      	movs	r3, #0
 81024ec:	e000      	b.n	81024f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81024ee:	2301      	movs	r3, #1
}
 81024f0:	4618      	mov	r0, r3
 81024f2:	3708      	adds	r7, #8
 81024f4:	46bd      	mov	sp, r7
 81024f6:	bd80      	pop	{r7, pc}
 81024f8:	10000010 	.word	0x10000010
 81024fc:	10000000 	.word	0x10000000
 8102500:	1000000c 	.word	0x1000000c

08102504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102504:	b480      	push	{r7}
 8102506:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102508:	4b06      	ldr	r3, [pc, #24]	; (8102524 <HAL_IncTick+0x20>)
 810250a:	781b      	ldrb	r3, [r3, #0]
 810250c:	461a      	mov	r2, r3
 810250e:	4b06      	ldr	r3, [pc, #24]	; (8102528 <HAL_IncTick+0x24>)
 8102510:	681b      	ldr	r3, [r3, #0]
 8102512:	4413      	add	r3, r2
 8102514:	4a04      	ldr	r2, [pc, #16]	; (8102528 <HAL_IncTick+0x24>)
 8102516:	6013      	str	r3, [r2, #0]
}
 8102518:	bf00      	nop
 810251a:	46bd      	mov	sp, r7
 810251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102520:	4770      	bx	lr
 8102522:	bf00      	nop
 8102524:	10000010 	.word	0x10000010
 8102528:	100003f4 	.word	0x100003f4

0810252c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810252c:	b480      	push	{r7}
 810252e:	af00      	add	r7, sp, #0
  return uwTick;
 8102530:	4b03      	ldr	r3, [pc, #12]	; (8102540 <HAL_GetTick+0x14>)
 8102532:	681b      	ldr	r3, [r3, #0]
}
 8102534:	4618      	mov	r0, r3
 8102536:	46bd      	mov	sp, r7
 8102538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810253c:	4770      	bx	lr
 810253e:	bf00      	nop
 8102540:	100003f4 	.word	0x100003f4

08102544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102544:	b580      	push	{r7, lr}
 8102546:	b084      	sub	sp, #16
 8102548:	af00      	add	r7, sp, #0
 810254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810254c:	f7ff ffee 	bl	810252c <HAL_GetTick>
 8102550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102556:	68fb      	ldr	r3, [r7, #12]
 8102558:	f1b3 3fff 	cmp.w	r3, #4294967295
 810255c:	d005      	beq.n	810256a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810255e:	4b0a      	ldr	r3, [pc, #40]	; (8102588 <HAL_Delay+0x44>)
 8102560:	781b      	ldrb	r3, [r3, #0]
 8102562:	461a      	mov	r2, r3
 8102564:	68fb      	ldr	r3, [r7, #12]
 8102566:	4413      	add	r3, r2
 8102568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810256a:	bf00      	nop
 810256c:	f7ff ffde 	bl	810252c <HAL_GetTick>
 8102570:	4602      	mov	r2, r0
 8102572:	68bb      	ldr	r3, [r7, #8]
 8102574:	1ad3      	subs	r3, r2, r3
 8102576:	68fa      	ldr	r2, [r7, #12]
 8102578:	429a      	cmp	r2, r3
 810257a:	d8f7      	bhi.n	810256c <HAL_Delay+0x28>
  {
  }
}
 810257c:	bf00      	nop
 810257e:	bf00      	nop
 8102580:	3710      	adds	r7, #16
 8102582:	46bd      	mov	sp, r7
 8102584:	bd80      	pop	{r7, pc}
 8102586:	bf00      	nop
 8102588:	10000010 	.word	0x10000010

0810258c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 810258c:	b480      	push	{r7}
 810258e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102590:	4b03      	ldr	r3, [pc, #12]	; (81025a0 <HAL_GetREVID+0x14>)
 8102592:	681b      	ldr	r3, [r3, #0]
 8102594:	0c1b      	lsrs	r3, r3, #16
}
 8102596:	4618      	mov	r0, r3
 8102598:	46bd      	mov	sp, r7
 810259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810259e:	4770      	bx	lr
 81025a0:	5c001000 	.word	0x5c001000

081025a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81025a4:	b480      	push	{r7}
 81025a6:	b083      	sub	sp, #12
 81025a8:	af00      	add	r7, sp, #0
 81025aa:	6078      	str	r0, [r7, #4]
 81025ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	689b      	ldr	r3, [r3, #8]
 81025b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81025b6:	683b      	ldr	r3, [r7, #0]
 81025b8:	431a      	orrs	r2, r3
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	609a      	str	r2, [r3, #8]
}
 81025be:	bf00      	nop
 81025c0:	370c      	adds	r7, #12
 81025c2:	46bd      	mov	sp, r7
 81025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025c8:	4770      	bx	lr

081025ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81025ca:	b480      	push	{r7}
 81025cc:	b083      	sub	sp, #12
 81025ce:	af00      	add	r7, sp, #0
 81025d0:	6078      	str	r0, [r7, #4]
 81025d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81025d4:	687b      	ldr	r3, [r7, #4]
 81025d6:	689b      	ldr	r3, [r3, #8]
 81025d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 81025dc:	683b      	ldr	r3, [r7, #0]
 81025de:	431a      	orrs	r2, r3
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	609a      	str	r2, [r3, #8]
}
 81025e4:	bf00      	nop
 81025e6:	370c      	adds	r7, #12
 81025e8:	46bd      	mov	sp, r7
 81025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025ee:	4770      	bx	lr

081025f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81025f0:	b480      	push	{r7}
 81025f2:	b083      	sub	sp, #12
 81025f4:	af00      	add	r7, sp, #0
 81025f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	689b      	ldr	r3, [r3, #8]
 81025fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8102600:	4618      	mov	r0, r3
 8102602:	370c      	adds	r7, #12
 8102604:	46bd      	mov	sp, r7
 8102606:	f85d 7b04 	ldr.w	r7, [sp], #4
 810260a:	4770      	bx	lr

0810260c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 810260c:	b480      	push	{r7}
 810260e:	b087      	sub	sp, #28
 8102610:	af00      	add	r7, sp, #0
 8102612:	60f8      	str	r0, [r7, #12]
 8102614:	60b9      	str	r1, [r7, #8]
 8102616:	607a      	str	r2, [r7, #4]
 8102618:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810261a:	68fb      	ldr	r3, [r7, #12]
 810261c:	3360      	adds	r3, #96	; 0x60
 810261e:	461a      	mov	r2, r3
 8102620:	68bb      	ldr	r3, [r7, #8]
 8102622:	009b      	lsls	r3, r3, #2
 8102624:	4413      	add	r3, r2
 8102626:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102628:	697b      	ldr	r3, [r7, #20]
 810262a:	681b      	ldr	r3, [r3, #0]
 810262c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8102630:	687b      	ldr	r3, [r7, #4]
 8102632:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8102636:	683b      	ldr	r3, [r7, #0]
 8102638:	430b      	orrs	r3, r1
 810263a:	431a      	orrs	r2, r3
 810263c:	697b      	ldr	r3, [r7, #20]
 810263e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102640:	bf00      	nop
 8102642:	371c      	adds	r7, #28
 8102644:	46bd      	mov	sp, r7
 8102646:	f85d 7b04 	ldr.w	r7, [sp], #4
 810264a:	4770      	bx	lr

0810264c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 810264c:	b480      	push	{r7}
 810264e:	b085      	sub	sp, #20
 8102650:	af00      	add	r7, sp, #0
 8102652:	60f8      	str	r0, [r7, #12]
 8102654:	60b9      	str	r1, [r7, #8]
 8102656:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102658:	68fb      	ldr	r3, [r7, #12]
 810265a:	691b      	ldr	r3, [r3, #16]
 810265c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8102660:	68bb      	ldr	r3, [r7, #8]
 8102662:	f003 031f 	and.w	r3, r3, #31
 8102666:	6879      	ldr	r1, [r7, #4]
 8102668:	fa01 f303 	lsl.w	r3, r1, r3
 810266c:	431a      	orrs	r2, r3
 810266e:	68fb      	ldr	r3, [r7, #12]
 8102670:	611a      	str	r2, [r3, #16]
}
 8102672:	bf00      	nop
 8102674:	3714      	adds	r7, #20
 8102676:	46bd      	mov	sp, r7
 8102678:	f85d 7b04 	ldr.w	r7, [sp], #4
 810267c:	4770      	bx	lr

0810267e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 810267e:	b480      	push	{r7}
 8102680:	b087      	sub	sp, #28
 8102682:	af00      	add	r7, sp, #0
 8102684:	60f8      	str	r0, [r7, #12]
 8102686:	60b9      	str	r1, [r7, #8]
 8102688:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810268a:	68fb      	ldr	r3, [r7, #12]
 810268c:	3360      	adds	r3, #96	; 0x60
 810268e:	461a      	mov	r2, r3
 8102690:	68bb      	ldr	r3, [r7, #8]
 8102692:	009b      	lsls	r3, r3, #2
 8102694:	4413      	add	r3, r2
 8102696:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102698:	697b      	ldr	r3, [r7, #20]
 810269a:	681b      	ldr	r3, [r3, #0]
 810269c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81026a0:	687b      	ldr	r3, [r7, #4]
 81026a2:	431a      	orrs	r2, r3
 81026a4:	697b      	ldr	r3, [r7, #20]
 81026a6:	601a      	str	r2, [r3, #0]
  }
}
 81026a8:	bf00      	nop
 81026aa:	371c      	adds	r7, #28
 81026ac:	46bd      	mov	sp, r7
 81026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026b2:	4770      	bx	lr

081026b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81026b4:	b480      	push	{r7}
 81026b6:	b087      	sub	sp, #28
 81026b8:	af00      	add	r7, sp, #0
 81026ba:	60f8      	str	r0, [r7, #12]
 81026bc:	60b9      	str	r1, [r7, #8]
 81026be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81026c0:	68fb      	ldr	r3, [r7, #12]
 81026c2:	3330      	adds	r3, #48	; 0x30
 81026c4:	461a      	mov	r2, r3
 81026c6:	68bb      	ldr	r3, [r7, #8]
 81026c8:	0a1b      	lsrs	r3, r3, #8
 81026ca:	009b      	lsls	r3, r3, #2
 81026cc:	f003 030c 	and.w	r3, r3, #12
 81026d0:	4413      	add	r3, r2
 81026d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81026d4:	697b      	ldr	r3, [r7, #20]
 81026d6:	681a      	ldr	r2, [r3, #0]
 81026d8:	68bb      	ldr	r3, [r7, #8]
 81026da:	f003 031f 	and.w	r3, r3, #31
 81026de:	211f      	movs	r1, #31
 81026e0:	fa01 f303 	lsl.w	r3, r1, r3
 81026e4:	43db      	mvns	r3, r3
 81026e6:	401a      	ands	r2, r3
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	0e9b      	lsrs	r3, r3, #26
 81026ec:	f003 011f 	and.w	r1, r3, #31
 81026f0:	68bb      	ldr	r3, [r7, #8]
 81026f2:	f003 031f 	and.w	r3, r3, #31
 81026f6:	fa01 f303 	lsl.w	r3, r1, r3
 81026fa:	431a      	orrs	r2, r3
 81026fc:	697b      	ldr	r3, [r7, #20]
 81026fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102700:	bf00      	nop
 8102702:	371c      	adds	r7, #28
 8102704:	46bd      	mov	sp, r7
 8102706:	f85d 7b04 	ldr.w	r7, [sp], #4
 810270a:	4770      	bx	lr

0810270c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 810270c:	b480      	push	{r7}
 810270e:	b087      	sub	sp, #28
 8102710:	af00      	add	r7, sp, #0
 8102712:	60f8      	str	r0, [r7, #12]
 8102714:	60b9      	str	r1, [r7, #8]
 8102716:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102718:	68fb      	ldr	r3, [r7, #12]
 810271a:	3314      	adds	r3, #20
 810271c:	461a      	mov	r2, r3
 810271e:	68bb      	ldr	r3, [r7, #8]
 8102720:	0e5b      	lsrs	r3, r3, #25
 8102722:	009b      	lsls	r3, r3, #2
 8102724:	f003 0304 	and.w	r3, r3, #4
 8102728:	4413      	add	r3, r2
 810272a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810272c:	697b      	ldr	r3, [r7, #20]
 810272e:	681a      	ldr	r2, [r3, #0]
 8102730:	68bb      	ldr	r3, [r7, #8]
 8102732:	0d1b      	lsrs	r3, r3, #20
 8102734:	f003 031f 	and.w	r3, r3, #31
 8102738:	2107      	movs	r1, #7
 810273a:	fa01 f303 	lsl.w	r3, r1, r3
 810273e:	43db      	mvns	r3, r3
 8102740:	401a      	ands	r2, r3
 8102742:	68bb      	ldr	r3, [r7, #8]
 8102744:	0d1b      	lsrs	r3, r3, #20
 8102746:	f003 031f 	and.w	r3, r3, #31
 810274a:	6879      	ldr	r1, [r7, #4]
 810274c:	fa01 f303 	lsl.w	r3, r1, r3
 8102750:	431a      	orrs	r2, r3
 8102752:	697b      	ldr	r3, [r7, #20]
 8102754:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102756:	bf00      	nop
 8102758:	371c      	adds	r7, #28
 810275a:	46bd      	mov	sp, r7
 810275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102760:	4770      	bx	lr
	...

08102764 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102764:	b480      	push	{r7}
 8102766:	b085      	sub	sp, #20
 8102768:	af00      	add	r7, sp, #0
 810276a:	60f8      	str	r0, [r7, #12]
 810276c:	60b9      	str	r1, [r7, #8]
 810276e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102770:	68fb      	ldr	r3, [r7, #12]
 8102772:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8102776:	68bb      	ldr	r3, [r7, #8]
 8102778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810277c:	43db      	mvns	r3, r3
 810277e:	401a      	ands	r2, r3
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	f003 0318 	and.w	r3, r3, #24
 8102786:	4908      	ldr	r1, [pc, #32]	; (81027a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102788:	40d9      	lsrs	r1, r3
 810278a:	68bb      	ldr	r3, [r7, #8]
 810278c:	400b      	ands	r3, r1
 810278e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102792:	431a      	orrs	r2, r3
 8102794:	68fb      	ldr	r3, [r7, #12]
 8102796:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 810279a:	bf00      	nop
 810279c:	3714      	adds	r7, #20
 810279e:	46bd      	mov	sp, r7
 81027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027a4:	4770      	bx	lr
 81027a6:	bf00      	nop
 81027a8:	000fffff 	.word	0x000fffff

081027ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81027ac:	b480      	push	{r7}
 81027ae:	b083      	sub	sp, #12
 81027b0:	af00      	add	r7, sp, #0
 81027b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81027b4:	687b      	ldr	r3, [r7, #4]
 81027b6:	689b      	ldr	r3, [r3, #8]
 81027b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 81027bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81027c0:	687a      	ldr	r2, [r7, #4]
 81027c2:	6093      	str	r3, [r2, #8]
}
 81027c4:	bf00      	nop
 81027c6:	370c      	adds	r7, #12
 81027c8:	46bd      	mov	sp, r7
 81027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ce:	4770      	bx	lr

081027d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 81027d0:	b480      	push	{r7}
 81027d2:	b083      	sub	sp, #12
 81027d4:	af00      	add	r7, sp, #0
 81027d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	689b      	ldr	r3, [r3, #8]
 81027dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81027e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81027e4:	d101      	bne.n	81027ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 81027e6:	2301      	movs	r3, #1
 81027e8:	e000      	b.n	81027ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 81027ea:	2300      	movs	r3, #0
}
 81027ec:	4618      	mov	r0, r3
 81027ee:	370c      	adds	r7, #12
 81027f0:	46bd      	mov	sp, r7
 81027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027f6:	4770      	bx	lr

081027f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 81027f8:	b480      	push	{r7}
 81027fa:	b083      	sub	sp, #12
 81027fc:	af00      	add	r7, sp, #0
 81027fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102800:	687b      	ldr	r3, [r7, #4]
 8102802:	689b      	ldr	r3, [r3, #8]
 8102804:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8102808:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810280c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102814:	bf00      	nop
 8102816:	370c      	adds	r7, #12
 8102818:	46bd      	mov	sp, r7
 810281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810281e:	4770      	bx	lr

08102820 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8102820:	b480      	push	{r7}
 8102822:	b083      	sub	sp, #12
 8102824:	af00      	add	r7, sp, #0
 8102826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	689b      	ldr	r3, [r3, #8]
 810282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102834:	d101      	bne.n	810283a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102836:	2301      	movs	r3, #1
 8102838:	e000      	b.n	810283c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 810283a:	2300      	movs	r3, #0
}
 810283c:	4618      	mov	r0, r3
 810283e:	370c      	adds	r7, #12
 8102840:	46bd      	mov	sp, r7
 8102842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102846:	4770      	bx	lr

08102848 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8102848:	b480      	push	{r7}
 810284a:	b083      	sub	sp, #12
 810284c:	af00      	add	r7, sp, #0
 810284e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	689b      	ldr	r3, [r3, #8]
 8102854:	f003 0301 	and.w	r3, r3, #1
 8102858:	2b01      	cmp	r3, #1
 810285a:	d101      	bne.n	8102860 <LL_ADC_IsEnabled+0x18>
 810285c:	2301      	movs	r3, #1
 810285e:	e000      	b.n	8102862 <LL_ADC_IsEnabled+0x1a>
 8102860:	2300      	movs	r3, #0
}
 8102862:	4618      	mov	r0, r3
 8102864:	370c      	adds	r7, #12
 8102866:	46bd      	mov	sp, r7
 8102868:	f85d 7b04 	ldr.w	r7, [sp], #4
 810286c:	4770      	bx	lr

0810286e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810286e:	b480      	push	{r7}
 8102870:	b083      	sub	sp, #12
 8102872:	af00      	add	r7, sp, #0
 8102874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	689b      	ldr	r3, [r3, #8]
 810287a:	f003 0304 	and.w	r3, r3, #4
 810287e:	2b04      	cmp	r3, #4
 8102880:	d101      	bne.n	8102886 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102882:	2301      	movs	r3, #1
 8102884:	e000      	b.n	8102888 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102886:	2300      	movs	r3, #0
}
 8102888:	4618      	mov	r0, r3
 810288a:	370c      	adds	r7, #12
 810288c:	46bd      	mov	sp, r7
 810288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102892:	4770      	bx	lr

08102894 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102894:	b480      	push	{r7}
 8102896:	b083      	sub	sp, #12
 8102898:	af00      	add	r7, sp, #0
 810289a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 810289c:	687b      	ldr	r3, [r7, #4]
 810289e:	689b      	ldr	r3, [r3, #8]
 81028a0:	f003 0308 	and.w	r3, r3, #8
 81028a4:	2b08      	cmp	r3, #8
 81028a6:	d101      	bne.n	81028ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 81028a8:	2301      	movs	r3, #1
 81028aa:	e000      	b.n	81028ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81028ac:	2300      	movs	r3, #0
}
 81028ae:	4618      	mov	r0, r3
 81028b0:	370c      	adds	r7, #12
 81028b2:	46bd      	mov	sp, r7
 81028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028b8:	4770      	bx	lr
	...

081028bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81028bc:	b590      	push	{r4, r7, lr}
 81028be:	b089      	sub	sp, #36	; 0x24
 81028c0:	af00      	add	r7, sp, #0
 81028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81028c4:	2300      	movs	r3, #0
 81028c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81028c8:	2300      	movs	r3, #0
 81028ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	2b00      	cmp	r3, #0
 81028d0:	d101      	bne.n	81028d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81028d2:	2301      	movs	r3, #1
 81028d4:	e18f      	b.n	8102bf6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	68db      	ldr	r3, [r3, #12]
 81028da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028e0:	2b00      	cmp	r3, #0
 81028e2:	d109      	bne.n	81028f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81028e4:	6878      	ldr	r0, [r7, #4]
 81028e6:	f7fe fd01 	bl	81012ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	2200      	movs	r2, #0
 81028ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	2200      	movs	r2, #0
 81028f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81028f8:	687b      	ldr	r3, [r7, #4]
 81028fa:	681b      	ldr	r3, [r3, #0]
 81028fc:	4618      	mov	r0, r3
 81028fe:	f7ff ff67 	bl	81027d0 <LL_ADC_IsDeepPowerDownEnabled>
 8102902:	4603      	mov	r3, r0
 8102904:	2b00      	cmp	r3, #0
 8102906:	d004      	beq.n	8102912 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	681b      	ldr	r3, [r3, #0]
 810290c:	4618      	mov	r0, r3
 810290e:	f7ff ff4d 	bl	81027ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102912:	687b      	ldr	r3, [r7, #4]
 8102914:	681b      	ldr	r3, [r3, #0]
 8102916:	4618      	mov	r0, r3
 8102918:	f7ff ff82 	bl	8102820 <LL_ADC_IsInternalRegulatorEnabled>
 810291c:	4603      	mov	r3, r0
 810291e:	2b00      	cmp	r3, #0
 8102920:	d114      	bne.n	810294c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	681b      	ldr	r3, [r3, #0]
 8102926:	4618      	mov	r0, r3
 8102928:	f7ff ff66 	bl	81027f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810292c:	4b88      	ldr	r3, [pc, #544]	; (8102b50 <HAL_ADC_Init+0x294>)
 810292e:	681b      	ldr	r3, [r3, #0]
 8102930:	099b      	lsrs	r3, r3, #6
 8102932:	4a88      	ldr	r2, [pc, #544]	; (8102b54 <HAL_ADC_Init+0x298>)
 8102934:	fba2 2303 	umull	r2, r3, r2, r3
 8102938:	099b      	lsrs	r3, r3, #6
 810293a:	3301      	adds	r3, #1
 810293c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810293e:	e002      	b.n	8102946 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8102940:	68bb      	ldr	r3, [r7, #8]
 8102942:	3b01      	subs	r3, #1
 8102944:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102946:	68bb      	ldr	r3, [r7, #8]
 8102948:	2b00      	cmp	r3, #0
 810294a:	d1f9      	bne.n	8102940 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810294c:	687b      	ldr	r3, [r7, #4]
 810294e:	681b      	ldr	r3, [r3, #0]
 8102950:	4618      	mov	r0, r3
 8102952:	f7ff ff65 	bl	8102820 <LL_ADC_IsInternalRegulatorEnabled>
 8102956:	4603      	mov	r3, r0
 8102958:	2b00      	cmp	r3, #0
 810295a:	d10d      	bne.n	8102978 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102960:	f043 0210 	orr.w	r2, r3, #16
 8102964:	687b      	ldr	r3, [r7, #4]
 8102966:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810296c:	f043 0201 	orr.w	r2, r3, #1
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8102974:	2301      	movs	r3, #1
 8102976:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102978:	687b      	ldr	r3, [r7, #4]
 810297a:	681b      	ldr	r3, [r3, #0]
 810297c:	4618      	mov	r0, r3
 810297e:	f7ff ff76 	bl	810286e <LL_ADC_REG_IsConversionOngoing>
 8102982:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102988:	f003 0310 	and.w	r3, r3, #16
 810298c:	2b00      	cmp	r3, #0
 810298e:	f040 8129 	bne.w	8102be4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8102992:	697b      	ldr	r3, [r7, #20]
 8102994:	2b00      	cmp	r3, #0
 8102996:	f040 8125 	bne.w	8102be4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 810299a:	687b      	ldr	r3, [r7, #4]
 810299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810299e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 81029a2:	f043 0202 	orr.w	r2, r3, #2
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81029aa:	687b      	ldr	r3, [r7, #4]
 81029ac:	681b      	ldr	r3, [r3, #0]
 81029ae:	4618      	mov	r0, r3
 81029b0:	f7ff ff4a 	bl	8102848 <LL_ADC_IsEnabled>
 81029b4:	4603      	mov	r3, r0
 81029b6:	2b00      	cmp	r3, #0
 81029b8:	d136      	bne.n	8102a28 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81029ba:	687b      	ldr	r3, [r7, #4]
 81029bc:	681b      	ldr	r3, [r3, #0]
 81029be:	4a66      	ldr	r2, [pc, #408]	; (8102b58 <HAL_ADC_Init+0x29c>)
 81029c0:	4293      	cmp	r3, r2
 81029c2:	d004      	beq.n	81029ce <HAL_ADC_Init+0x112>
 81029c4:	687b      	ldr	r3, [r7, #4]
 81029c6:	681b      	ldr	r3, [r3, #0]
 81029c8:	4a64      	ldr	r2, [pc, #400]	; (8102b5c <HAL_ADC_Init+0x2a0>)
 81029ca:	4293      	cmp	r3, r2
 81029cc:	d10e      	bne.n	81029ec <HAL_ADC_Init+0x130>
 81029ce:	4862      	ldr	r0, [pc, #392]	; (8102b58 <HAL_ADC_Init+0x29c>)
 81029d0:	f7ff ff3a 	bl	8102848 <LL_ADC_IsEnabled>
 81029d4:	4604      	mov	r4, r0
 81029d6:	4861      	ldr	r0, [pc, #388]	; (8102b5c <HAL_ADC_Init+0x2a0>)
 81029d8:	f7ff ff36 	bl	8102848 <LL_ADC_IsEnabled>
 81029dc:	4603      	mov	r3, r0
 81029de:	4323      	orrs	r3, r4
 81029e0:	2b00      	cmp	r3, #0
 81029e2:	bf0c      	ite	eq
 81029e4:	2301      	moveq	r3, #1
 81029e6:	2300      	movne	r3, #0
 81029e8:	b2db      	uxtb	r3, r3
 81029ea:	e008      	b.n	81029fe <HAL_ADC_Init+0x142>
 81029ec:	485c      	ldr	r0, [pc, #368]	; (8102b60 <HAL_ADC_Init+0x2a4>)
 81029ee:	f7ff ff2b 	bl	8102848 <LL_ADC_IsEnabled>
 81029f2:	4603      	mov	r3, r0
 81029f4:	2b00      	cmp	r3, #0
 81029f6:	bf0c      	ite	eq
 81029f8:	2301      	moveq	r3, #1
 81029fa:	2300      	movne	r3, #0
 81029fc:	b2db      	uxtb	r3, r3
 81029fe:	2b00      	cmp	r3, #0
 8102a00:	d012      	beq.n	8102a28 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	681b      	ldr	r3, [r3, #0]
 8102a06:	4a54      	ldr	r2, [pc, #336]	; (8102b58 <HAL_ADC_Init+0x29c>)
 8102a08:	4293      	cmp	r3, r2
 8102a0a:	d004      	beq.n	8102a16 <HAL_ADC_Init+0x15a>
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	681b      	ldr	r3, [r3, #0]
 8102a10:	4a52      	ldr	r2, [pc, #328]	; (8102b5c <HAL_ADC_Init+0x2a0>)
 8102a12:	4293      	cmp	r3, r2
 8102a14:	d101      	bne.n	8102a1a <HAL_ADC_Init+0x15e>
 8102a16:	4a53      	ldr	r2, [pc, #332]	; (8102b64 <HAL_ADC_Init+0x2a8>)
 8102a18:	e000      	b.n	8102a1c <HAL_ADC_Init+0x160>
 8102a1a:	4a53      	ldr	r2, [pc, #332]	; (8102b68 <HAL_ADC_Init+0x2ac>)
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	685b      	ldr	r3, [r3, #4]
 8102a20:	4619      	mov	r1, r3
 8102a22:	4610      	mov	r0, r2
 8102a24:	f7ff fdbe 	bl	81025a4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102a28:	f7ff fdb0 	bl	810258c <HAL_GetREVID>
 8102a2c:	4603      	mov	r3, r0
 8102a2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8102a32:	4293      	cmp	r3, r2
 8102a34:	d914      	bls.n	8102a60 <HAL_ADC_Init+0x1a4>
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	689b      	ldr	r3, [r3, #8]
 8102a3a:	2b10      	cmp	r3, #16
 8102a3c:	d110      	bne.n	8102a60 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	7d5b      	ldrb	r3, [r3, #21]
 8102a42:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102a44:	687b      	ldr	r3, [r7, #4]
 8102a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a48:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102a4e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102a50:	687b      	ldr	r3, [r7, #4]
 8102a52:	7f1b      	ldrb	r3, [r3, #28]
 8102a54:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102a56:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a58:	f043 030c 	orr.w	r3, r3, #12
 8102a5c:	61bb      	str	r3, [r7, #24]
 8102a5e:	e00d      	b.n	8102a7c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	7d5b      	ldrb	r3, [r3, #21]
 8102a64:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a6a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102a6c:	687b      	ldr	r3, [r7, #4]
 8102a6e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102a70:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	7f1b      	ldrb	r3, [r3, #28]
 8102a76:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a78:	4313      	orrs	r3, r2
 8102a7a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	7f1b      	ldrb	r3, [r3, #28]
 8102a80:	2b01      	cmp	r3, #1
 8102a82:	d106      	bne.n	8102a92 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102a84:	687b      	ldr	r3, [r7, #4]
 8102a86:	6a1b      	ldr	r3, [r3, #32]
 8102a88:	3b01      	subs	r3, #1
 8102a8a:	045b      	lsls	r3, r3, #17
 8102a8c:	69ba      	ldr	r2, [r7, #24]
 8102a8e:	4313      	orrs	r3, r2
 8102a90:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102a96:	2b00      	cmp	r3, #0
 8102a98:	d009      	beq.n	8102aae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102a9e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102aa6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102aa8:	69ba      	ldr	r2, [r7, #24]
 8102aaa:	4313      	orrs	r3, r2
 8102aac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	681b      	ldr	r3, [r3, #0]
 8102ab2:	68da      	ldr	r2, [r3, #12]
 8102ab4:	4b2d      	ldr	r3, [pc, #180]	; (8102b6c <HAL_ADC_Init+0x2b0>)
 8102ab6:	4013      	ands	r3, r2
 8102ab8:	687a      	ldr	r2, [r7, #4]
 8102aba:	6812      	ldr	r2, [r2, #0]
 8102abc:	69b9      	ldr	r1, [r7, #24]
 8102abe:	430b      	orrs	r3, r1
 8102ac0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	681b      	ldr	r3, [r3, #0]
 8102ac6:	4618      	mov	r0, r3
 8102ac8:	f7ff fed1 	bl	810286e <LL_ADC_REG_IsConversionOngoing>
 8102acc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	681b      	ldr	r3, [r3, #0]
 8102ad2:	4618      	mov	r0, r3
 8102ad4:	f7ff fede 	bl	8102894 <LL_ADC_INJ_IsConversionOngoing>
 8102ad8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102ada:	693b      	ldr	r3, [r7, #16]
 8102adc:	2b00      	cmp	r3, #0
 8102ade:	d15f      	bne.n	8102ba0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102ae0:	68fb      	ldr	r3, [r7, #12]
 8102ae2:	2b00      	cmp	r3, #0
 8102ae4:	d15c      	bne.n	8102ba0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	7d1b      	ldrb	r3, [r3, #20]
 8102aea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8102af0:	4313      	orrs	r3, r2
 8102af2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	68db      	ldr	r3, [r3, #12]
 8102afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8102afe:	f023 0303 	bic.w	r3, r3, #3
 8102b02:	687a      	ldr	r2, [r7, #4]
 8102b04:	6812      	ldr	r2, [r2, #0]
 8102b06:	69b9      	ldr	r1, [r7, #24]
 8102b08:	430b      	orrs	r3, r1
 8102b0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8102b0c:	687b      	ldr	r3, [r7, #4]
 8102b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8102b12:	2b01      	cmp	r3, #1
 8102b14:	d12e      	bne.n	8102b74 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102b1a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	681b      	ldr	r3, [r3, #0]
 8102b20:	691a      	ldr	r2, [r3, #16]
 8102b22:	4b13      	ldr	r3, [pc, #76]	; (8102b70 <HAL_ADC_Init+0x2b4>)
 8102b24:	4013      	ands	r3, r2
 8102b26:	687a      	ldr	r2, [r7, #4]
 8102b28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102b2a:	3a01      	subs	r2, #1
 8102b2c:	0411      	lsls	r1, r2, #16
 8102b2e:	687a      	ldr	r2, [r7, #4]
 8102b30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8102b32:	4311      	orrs	r1, r2
 8102b34:	687a      	ldr	r2, [r7, #4]
 8102b36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102b38:	4311      	orrs	r1, r2
 8102b3a:	687a      	ldr	r2, [r7, #4]
 8102b3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8102b3e:	430a      	orrs	r2, r1
 8102b40:	431a      	orrs	r2, r3
 8102b42:	687b      	ldr	r3, [r7, #4]
 8102b44:	681b      	ldr	r3, [r3, #0]
 8102b46:	f042 0201 	orr.w	r2, r2, #1
 8102b4a:	611a      	str	r2, [r3, #16]
 8102b4c:	e01a      	b.n	8102b84 <HAL_ADC_Init+0x2c8>
 8102b4e:	bf00      	nop
 8102b50:	10000000 	.word	0x10000000
 8102b54:	053e2d63 	.word	0x053e2d63
 8102b58:	40022000 	.word	0x40022000
 8102b5c:	40022100 	.word	0x40022100
 8102b60:	58026000 	.word	0x58026000
 8102b64:	40022300 	.word	0x40022300
 8102b68:	58026300 	.word	0x58026300
 8102b6c:	fff0c003 	.word	0xfff0c003
 8102b70:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102b74:	687b      	ldr	r3, [r7, #4]
 8102b76:	681b      	ldr	r3, [r3, #0]
 8102b78:	691a      	ldr	r2, [r3, #16]
 8102b7a:	687b      	ldr	r3, [r7, #4]
 8102b7c:	681b      	ldr	r3, [r3, #0]
 8102b7e:	f022 0201 	bic.w	r2, r2, #1
 8102b82:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102b84:	687b      	ldr	r3, [r7, #4]
 8102b86:	681b      	ldr	r3, [r3, #0]
 8102b88:	691b      	ldr	r3, [r3, #16]
 8102b8a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8102b8e:	687b      	ldr	r3, [r7, #4]
 8102b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8102b92:	687b      	ldr	r3, [r7, #4]
 8102b94:	681b      	ldr	r3, [r3, #0]
 8102b96:	430a      	orrs	r2, r1
 8102b98:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8102b9a:	6878      	ldr	r0, [r7, #4]
 8102b9c:	f000 fb80 	bl	81032a0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102ba0:	687b      	ldr	r3, [r7, #4]
 8102ba2:	68db      	ldr	r3, [r3, #12]
 8102ba4:	2b01      	cmp	r3, #1
 8102ba6:	d10c      	bne.n	8102bc2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102ba8:	687b      	ldr	r3, [r7, #4]
 8102baa:	681b      	ldr	r3, [r3, #0]
 8102bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102bae:	f023 010f 	bic.w	r1, r3, #15
 8102bb2:	687b      	ldr	r3, [r7, #4]
 8102bb4:	699b      	ldr	r3, [r3, #24]
 8102bb6:	1e5a      	subs	r2, r3, #1
 8102bb8:	687b      	ldr	r3, [r7, #4]
 8102bba:	681b      	ldr	r3, [r3, #0]
 8102bbc:	430a      	orrs	r2, r1
 8102bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8102bc0:	e007      	b.n	8102bd2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8102bc2:	687b      	ldr	r3, [r7, #4]
 8102bc4:	681b      	ldr	r3, [r3, #0]
 8102bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8102bc8:	687b      	ldr	r3, [r7, #4]
 8102bca:	681b      	ldr	r3, [r3, #0]
 8102bcc:	f022 020f 	bic.w	r2, r2, #15
 8102bd0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102bd6:	f023 0303 	bic.w	r3, r3, #3
 8102bda:	f043 0201 	orr.w	r2, r3, #1
 8102bde:	687b      	ldr	r3, [r7, #4]
 8102be0:	655a      	str	r2, [r3, #84]	; 0x54
 8102be2:	e007      	b.n	8102bf4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102be4:	687b      	ldr	r3, [r7, #4]
 8102be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102be8:	f043 0210 	orr.w	r2, r3, #16
 8102bec:	687b      	ldr	r3, [r7, #4]
 8102bee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102bf0:	2301      	movs	r3, #1
 8102bf2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8102bf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8102bf6:	4618      	mov	r0, r3
 8102bf8:	3724      	adds	r7, #36	; 0x24
 8102bfa:	46bd      	mov	sp, r7
 8102bfc:	bd90      	pop	{r4, r7, pc}
 8102bfe:	bf00      	nop

08102c00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102c00:	b590      	push	{r4, r7, lr}
 8102c02:	b0a1      	sub	sp, #132	; 0x84
 8102c04:	af00      	add	r7, sp, #0
 8102c06:	6078      	str	r0, [r7, #4]
 8102c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102c0a:	2300      	movs	r3, #0
 8102c0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102c10:	2300      	movs	r3, #0
 8102c12:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8102c14:	683b      	ldr	r3, [r7, #0]
 8102c16:	68db      	ldr	r3, [r3, #12]
 8102c18:	4a9d      	ldr	r2, [pc, #628]	; (8102e90 <HAL_ADC_ConfigChannel+0x290>)
 8102c1a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102c1c:	687b      	ldr	r3, [r7, #4]
 8102c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102c22:	2b01      	cmp	r3, #1
 8102c24:	d101      	bne.n	8102c2a <HAL_ADC_ConfigChannel+0x2a>
 8102c26:	2302      	movs	r3, #2
 8102c28:	e321      	b.n	810326e <HAL_ADC_ConfigChannel+0x66e>
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	2201      	movs	r2, #1
 8102c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102c32:	687b      	ldr	r3, [r7, #4]
 8102c34:	681b      	ldr	r3, [r3, #0]
 8102c36:	4618      	mov	r0, r3
 8102c38:	f7ff fe19 	bl	810286e <LL_ADC_REG_IsConversionOngoing>
 8102c3c:	4603      	mov	r3, r0
 8102c3e:	2b00      	cmp	r3, #0
 8102c40:	f040 8306 	bne.w	8103250 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102c44:	683b      	ldr	r3, [r7, #0]
 8102c46:	681b      	ldr	r3, [r3, #0]
 8102c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c4c:	2b00      	cmp	r3, #0
 8102c4e:	d108      	bne.n	8102c62 <HAL_ADC_ConfigChannel+0x62>
 8102c50:	683b      	ldr	r3, [r7, #0]
 8102c52:	681b      	ldr	r3, [r3, #0]
 8102c54:	0e9b      	lsrs	r3, r3, #26
 8102c56:	f003 031f 	and.w	r3, r3, #31
 8102c5a:	2201      	movs	r2, #1
 8102c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8102c60:	e016      	b.n	8102c90 <HAL_ADC_ConfigChannel+0x90>
 8102c62:	683b      	ldr	r3, [r7, #0]
 8102c64:	681b      	ldr	r3, [r3, #0]
 8102c66:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8102c6a:	fa93 f3a3 	rbit	r3, r3
 8102c6e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8102c72:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102c76:	2b00      	cmp	r3, #0
 8102c78:	d101      	bne.n	8102c7e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8102c7a:	2320      	movs	r3, #32
 8102c7c:	e003      	b.n	8102c86 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8102c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102c80:	fab3 f383 	clz	r3, r3
 8102c84:	b2db      	uxtb	r3, r3
 8102c86:	f003 031f 	and.w	r3, r3, #31
 8102c8a:	2201      	movs	r2, #1
 8102c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8102c90:	687a      	ldr	r2, [r7, #4]
 8102c92:	6812      	ldr	r2, [r2, #0]
 8102c94:	69d1      	ldr	r1, [r2, #28]
 8102c96:	687a      	ldr	r2, [r7, #4]
 8102c98:	6812      	ldr	r2, [r2, #0]
 8102c9a:	430b      	orrs	r3, r1
 8102c9c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8102c9e:	687b      	ldr	r3, [r7, #4]
 8102ca0:	6818      	ldr	r0, [r3, #0]
 8102ca2:	683b      	ldr	r3, [r7, #0]
 8102ca4:	6859      	ldr	r1, [r3, #4]
 8102ca6:	683b      	ldr	r3, [r7, #0]
 8102ca8:	681b      	ldr	r3, [r3, #0]
 8102caa:	461a      	mov	r2, r3
 8102cac:	f7ff fd02 	bl	81026b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102cb0:	687b      	ldr	r3, [r7, #4]
 8102cb2:	681b      	ldr	r3, [r3, #0]
 8102cb4:	4618      	mov	r0, r3
 8102cb6:	f7ff fdda 	bl	810286e <LL_ADC_REG_IsConversionOngoing>
 8102cba:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102cbc:	687b      	ldr	r3, [r7, #4]
 8102cbe:	681b      	ldr	r3, [r3, #0]
 8102cc0:	4618      	mov	r0, r3
 8102cc2:	f7ff fde7 	bl	8102894 <LL_ADC_INJ_IsConversionOngoing>
 8102cc6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102cca:	2b00      	cmp	r3, #0
 8102ccc:	f040 80b3 	bne.w	8102e36 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8102cd2:	2b00      	cmp	r3, #0
 8102cd4:	f040 80af 	bne.w	8102e36 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102cd8:	687b      	ldr	r3, [r7, #4]
 8102cda:	6818      	ldr	r0, [r3, #0]
 8102cdc:	683b      	ldr	r3, [r7, #0]
 8102cde:	6819      	ldr	r1, [r3, #0]
 8102ce0:	683b      	ldr	r3, [r7, #0]
 8102ce2:	689b      	ldr	r3, [r3, #8]
 8102ce4:	461a      	mov	r2, r3
 8102ce6:	f7ff fd11 	bl	810270c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102cea:	4b6a      	ldr	r3, [pc, #424]	; (8102e94 <HAL_ADC_ConfigChannel+0x294>)
 8102cec:	681b      	ldr	r3, [r3, #0]
 8102cee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8102cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102cf6:	d10b      	bne.n	8102d10 <HAL_ADC_ConfigChannel+0x110>
 8102cf8:	683b      	ldr	r3, [r7, #0]
 8102cfa:	695a      	ldr	r2, [r3, #20]
 8102cfc:	687b      	ldr	r3, [r7, #4]
 8102cfe:	681b      	ldr	r3, [r3, #0]
 8102d00:	68db      	ldr	r3, [r3, #12]
 8102d02:	089b      	lsrs	r3, r3, #2
 8102d04:	f003 0307 	and.w	r3, r3, #7
 8102d08:	005b      	lsls	r3, r3, #1
 8102d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8102d0e:	e01d      	b.n	8102d4c <HAL_ADC_ConfigChannel+0x14c>
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	681b      	ldr	r3, [r3, #0]
 8102d14:	68db      	ldr	r3, [r3, #12]
 8102d16:	f003 0310 	and.w	r3, r3, #16
 8102d1a:	2b00      	cmp	r3, #0
 8102d1c:	d10b      	bne.n	8102d36 <HAL_ADC_ConfigChannel+0x136>
 8102d1e:	683b      	ldr	r3, [r7, #0]
 8102d20:	695a      	ldr	r2, [r3, #20]
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	681b      	ldr	r3, [r3, #0]
 8102d26:	68db      	ldr	r3, [r3, #12]
 8102d28:	089b      	lsrs	r3, r3, #2
 8102d2a:	f003 0307 	and.w	r3, r3, #7
 8102d2e:	005b      	lsls	r3, r3, #1
 8102d30:	fa02 f303 	lsl.w	r3, r2, r3
 8102d34:	e00a      	b.n	8102d4c <HAL_ADC_ConfigChannel+0x14c>
 8102d36:	683b      	ldr	r3, [r7, #0]
 8102d38:	695a      	ldr	r2, [r3, #20]
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	681b      	ldr	r3, [r3, #0]
 8102d3e:	68db      	ldr	r3, [r3, #12]
 8102d40:	089b      	lsrs	r3, r3, #2
 8102d42:	f003 0304 	and.w	r3, r3, #4
 8102d46:	005b      	lsls	r3, r3, #1
 8102d48:	fa02 f303 	lsl.w	r3, r2, r3
 8102d4c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102d4e:	683b      	ldr	r3, [r7, #0]
 8102d50:	691b      	ldr	r3, [r3, #16]
 8102d52:	2b04      	cmp	r3, #4
 8102d54:	d027      	beq.n	8102da6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	6818      	ldr	r0, [r3, #0]
 8102d5a:	683b      	ldr	r3, [r7, #0]
 8102d5c:	6919      	ldr	r1, [r3, #16]
 8102d5e:	683b      	ldr	r3, [r7, #0]
 8102d60:	681a      	ldr	r2, [r3, #0]
 8102d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102d64:	f7ff fc52 	bl	810260c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102d68:	687b      	ldr	r3, [r7, #4]
 8102d6a:	6818      	ldr	r0, [r3, #0]
 8102d6c:	683b      	ldr	r3, [r7, #0]
 8102d6e:	6919      	ldr	r1, [r3, #16]
 8102d70:	683b      	ldr	r3, [r7, #0]
 8102d72:	7e5b      	ldrb	r3, [r3, #25]
 8102d74:	2b01      	cmp	r3, #1
 8102d76:	d102      	bne.n	8102d7e <HAL_ADC_ConfigChannel+0x17e>
 8102d78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8102d7c:	e000      	b.n	8102d80 <HAL_ADC_ConfigChannel+0x180>
 8102d7e:	2300      	movs	r3, #0
 8102d80:	461a      	mov	r2, r3
 8102d82:	f7ff fc7c 	bl	810267e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102d86:	687b      	ldr	r3, [r7, #4]
 8102d88:	6818      	ldr	r0, [r3, #0]
 8102d8a:	683b      	ldr	r3, [r7, #0]
 8102d8c:	6919      	ldr	r1, [r3, #16]
 8102d8e:	683b      	ldr	r3, [r7, #0]
 8102d90:	7e1b      	ldrb	r3, [r3, #24]
 8102d92:	2b01      	cmp	r3, #1
 8102d94:	d102      	bne.n	8102d9c <HAL_ADC_ConfigChannel+0x19c>
 8102d96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8102d9a:	e000      	b.n	8102d9e <HAL_ADC_ConfigChannel+0x19e>
 8102d9c:	2300      	movs	r3, #0
 8102d9e:	461a      	mov	r2, r3
 8102da0:	f7ff fc54 	bl	810264c <LL_ADC_SetDataRightShift>
 8102da4:	e047      	b.n	8102e36 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102da6:	687b      	ldr	r3, [r7, #4]
 8102da8:	681b      	ldr	r3, [r3, #0]
 8102daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102dac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102db0:	683b      	ldr	r3, [r7, #0]
 8102db2:	681b      	ldr	r3, [r3, #0]
 8102db4:	069b      	lsls	r3, r3, #26
 8102db6:	429a      	cmp	r2, r3
 8102db8:	d107      	bne.n	8102dca <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102dba:	687b      	ldr	r3, [r7, #4]
 8102dbc:	681b      	ldr	r3, [r3, #0]
 8102dbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8102dc0:	687b      	ldr	r3, [r7, #4]
 8102dc2:	681b      	ldr	r3, [r3, #0]
 8102dc4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102dc8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	681b      	ldr	r3, [r3, #0]
 8102dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102dd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102dd4:	683b      	ldr	r3, [r7, #0]
 8102dd6:	681b      	ldr	r3, [r3, #0]
 8102dd8:	069b      	lsls	r3, r3, #26
 8102dda:	429a      	cmp	r2, r3
 8102ddc:	d107      	bne.n	8102dee <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102dde:	687b      	ldr	r3, [r7, #4]
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8102de4:	687b      	ldr	r3, [r7, #4]
 8102de6:	681b      	ldr	r3, [r3, #0]
 8102de8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102dec:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	681b      	ldr	r3, [r3, #0]
 8102df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102df4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102df8:	683b      	ldr	r3, [r7, #0]
 8102dfa:	681b      	ldr	r3, [r3, #0]
 8102dfc:	069b      	lsls	r3, r3, #26
 8102dfe:	429a      	cmp	r2, r3
 8102e00:	d107      	bne.n	8102e12 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102e02:	687b      	ldr	r3, [r7, #4]
 8102e04:	681b      	ldr	r3, [r3, #0]
 8102e06:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102e10:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102e18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102e1c:	683b      	ldr	r3, [r7, #0]
 8102e1e:	681b      	ldr	r3, [r3, #0]
 8102e20:	069b      	lsls	r3, r3, #26
 8102e22:	429a      	cmp	r2, r3
 8102e24:	d107      	bne.n	8102e36 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	681b      	ldr	r3, [r3, #0]
 8102e30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102e34:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102e36:	687b      	ldr	r3, [r7, #4]
 8102e38:	681b      	ldr	r3, [r3, #0]
 8102e3a:	4618      	mov	r0, r3
 8102e3c:	f7ff fd04 	bl	8102848 <LL_ADC_IsEnabled>
 8102e40:	4603      	mov	r3, r0
 8102e42:	2b00      	cmp	r3, #0
 8102e44:	f040 820d 	bne.w	8103262 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	6818      	ldr	r0, [r3, #0]
 8102e4c:	683b      	ldr	r3, [r7, #0]
 8102e4e:	6819      	ldr	r1, [r3, #0]
 8102e50:	683b      	ldr	r3, [r7, #0]
 8102e52:	68db      	ldr	r3, [r3, #12]
 8102e54:	461a      	mov	r2, r3
 8102e56:	f7ff fc85 	bl	8102764 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102e5a:	683b      	ldr	r3, [r7, #0]
 8102e5c:	68db      	ldr	r3, [r3, #12]
 8102e5e:	4a0c      	ldr	r2, [pc, #48]	; (8102e90 <HAL_ADC_ConfigChannel+0x290>)
 8102e60:	4293      	cmp	r3, r2
 8102e62:	f040 8133 	bne.w	81030cc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102e6a:	683b      	ldr	r3, [r7, #0]
 8102e6c:	681b      	ldr	r3, [r3, #0]
 8102e6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102e72:	2b00      	cmp	r3, #0
 8102e74:	d110      	bne.n	8102e98 <HAL_ADC_ConfigChannel+0x298>
 8102e76:	683b      	ldr	r3, [r7, #0]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	0e9b      	lsrs	r3, r3, #26
 8102e7c:	3301      	adds	r3, #1
 8102e7e:	f003 031f 	and.w	r3, r3, #31
 8102e82:	2b09      	cmp	r3, #9
 8102e84:	bf94      	ite	ls
 8102e86:	2301      	movls	r3, #1
 8102e88:	2300      	movhi	r3, #0
 8102e8a:	b2db      	uxtb	r3, r3
 8102e8c:	e01e      	b.n	8102ecc <HAL_ADC_ConfigChannel+0x2cc>
 8102e8e:	bf00      	nop
 8102e90:	47ff0000 	.word	0x47ff0000
 8102e94:	5c001000 	.word	0x5c001000
 8102e98:	683b      	ldr	r3, [r7, #0]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102ea0:	fa93 f3a3 	rbit	r3, r3
 8102ea4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8102ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8102eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102eac:	2b00      	cmp	r3, #0
 8102eae:	d101      	bne.n	8102eb4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8102eb0:	2320      	movs	r3, #32
 8102eb2:	e003      	b.n	8102ebc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8102eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102eb6:	fab3 f383 	clz	r3, r3
 8102eba:	b2db      	uxtb	r3, r3
 8102ebc:	3301      	adds	r3, #1
 8102ebe:	f003 031f 	and.w	r3, r3, #31
 8102ec2:	2b09      	cmp	r3, #9
 8102ec4:	bf94      	ite	ls
 8102ec6:	2301      	movls	r3, #1
 8102ec8:	2300      	movhi	r3, #0
 8102eca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102ecc:	2b00      	cmp	r3, #0
 8102ece:	d079      	beq.n	8102fc4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102ed0:	683b      	ldr	r3, [r7, #0]
 8102ed2:	681b      	ldr	r3, [r3, #0]
 8102ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102ed8:	2b00      	cmp	r3, #0
 8102eda:	d107      	bne.n	8102eec <HAL_ADC_ConfigChannel+0x2ec>
 8102edc:	683b      	ldr	r3, [r7, #0]
 8102ede:	681b      	ldr	r3, [r3, #0]
 8102ee0:	0e9b      	lsrs	r3, r3, #26
 8102ee2:	3301      	adds	r3, #1
 8102ee4:	069b      	lsls	r3, r3, #26
 8102ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102eea:	e015      	b.n	8102f18 <HAL_ADC_ConfigChannel+0x318>
 8102eec:	683b      	ldr	r3, [r7, #0]
 8102eee:	681b      	ldr	r3, [r3, #0]
 8102ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102ef4:	fa93 f3a3 	rbit	r3, r3
 8102ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8102efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102efc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8102efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102f00:	2b00      	cmp	r3, #0
 8102f02:	d101      	bne.n	8102f08 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8102f04:	2320      	movs	r3, #32
 8102f06:	e003      	b.n	8102f10 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8102f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102f0a:	fab3 f383 	clz	r3, r3
 8102f0e:	b2db      	uxtb	r3, r3
 8102f10:	3301      	adds	r3, #1
 8102f12:	069b      	lsls	r3, r3, #26
 8102f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102f18:	683b      	ldr	r3, [r7, #0]
 8102f1a:	681b      	ldr	r3, [r3, #0]
 8102f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102f20:	2b00      	cmp	r3, #0
 8102f22:	d109      	bne.n	8102f38 <HAL_ADC_ConfigChannel+0x338>
 8102f24:	683b      	ldr	r3, [r7, #0]
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	0e9b      	lsrs	r3, r3, #26
 8102f2a:	3301      	adds	r3, #1
 8102f2c:	f003 031f 	and.w	r3, r3, #31
 8102f30:	2101      	movs	r1, #1
 8102f32:	fa01 f303 	lsl.w	r3, r1, r3
 8102f36:	e017      	b.n	8102f68 <HAL_ADC_ConfigChannel+0x368>
 8102f38:	683b      	ldr	r3, [r7, #0]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102f40:	fa93 f3a3 	rbit	r3, r3
 8102f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8102f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102f48:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8102f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102f4c:	2b00      	cmp	r3, #0
 8102f4e:	d101      	bne.n	8102f54 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8102f50:	2320      	movs	r3, #32
 8102f52:	e003      	b.n	8102f5c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8102f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102f56:	fab3 f383 	clz	r3, r3
 8102f5a:	b2db      	uxtb	r3, r3
 8102f5c:	3301      	adds	r3, #1
 8102f5e:	f003 031f 	and.w	r3, r3, #31
 8102f62:	2101      	movs	r1, #1
 8102f64:	fa01 f303 	lsl.w	r3, r1, r3
 8102f68:	ea42 0103 	orr.w	r1, r2, r3
 8102f6c:	683b      	ldr	r3, [r7, #0]
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102f74:	2b00      	cmp	r3, #0
 8102f76:	d10a      	bne.n	8102f8e <HAL_ADC_ConfigChannel+0x38e>
 8102f78:	683b      	ldr	r3, [r7, #0]
 8102f7a:	681b      	ldr	r3, [r3, #0]
 8102f7c:	0e9b      	lsrs	r3, r3, #26
 8102f7e:	3301      	adds	r3, #1
 8102f80:	f003 021f 	and.w	r2, r3, #31
 8102f84:	4613      	mov	r3, r2
 8102f86:	005b      	lsls	r3, r3, #1
 8102f88:	4413      	add	r3, r2
 8102f8a:	051b      	lsls	r3, r3, #20
 8102f8c:	e018      	b.n	8102fc0 <HAL_ADC_ConfigChannel+0x3c0>
 8102f8e:	683b      	ldr	r3, [r7, #0]
 8102f90:	681b      	ldr	r3, [r3, #0]
 8102f92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102f96:	fa93 f3a3 	rbit	r3, r3
 8102f9a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8102f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8102fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102fa2:	2b00      	cmp	r3, #0
 8102fa4:	d101      	bne.n	8102faa <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8102fa6:	2320      	movs	r3, #32
 8102fa8:	e003      	b.n	8102fb2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8102faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102fac:	fab3 f383 	clz	r3, r3
 8102fb0:	b2db      	uxtb	r3, r3
 8102fb2:	3301      	adds	r3, #1
 8102fb4:	f003 021f 	and.w	r2, r3, #31
 8102fb8:	4613      	mov	r3, r2
 8102fba:	005b      	lsls	r3, r3, #1
 8102fbc:	4413      	add	r3, r2
 8102fbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102fc0:	430b      	orrs	r3, r1
 8102fc2:	e07e      	b.n	81030c2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102fc4:	683b      	ldr	r3, [r7, #0]
 8102fc6:	681b      	ldr	r3, [r3, #0]
 8102fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102fcc:	2b00      	cmp	r3, #0
 8102fce:	d107      	bne.n	8102fe0 <HAL_ADC_ConfigChannel+0x3e0>
 8102fd0:	683b      	ldr	r3, [r7, #0]
 8102fd2:	681b      	ldr	r3, [r3, #0]
 8102fd4:	0e9b      	lsrs	r3, r3, #26
 8102fd6:	3301      	adds	r3, #1
 8102fd8:	069b      	lsls	r3, r3, #26
 8102fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102fde:	e015      	b.n	810300c <HAL_ADC_ConfigChannel+0x40c>
 8102fe0:	683b      	ldr	r3, [r7, #0]
 8102fe2:	681b      	ldr	r3, [r3, #0]
 8102fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102fe8:	fa93 f3a3 	rbit	r3, r3
 8102fec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8102fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8102ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102ff4:	2b00      	cmp	r3, #0
 8102ff6:	d101      	bne.n	8102ffc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8102ff8:	2320      	movs	r3, #32
 8102ffa:	e003      	b.n	8103004 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8102ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102ffe:	fab3 f383 	clz	r3, r3
 8103002:	b2db      	uxtb	r3, r3
 8103004:	3301      	adds	r3, #1
 8103006:	069b      	lsls	r3, r3, #26
 8103008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810300c:	683b      	ldr	r3, [r7, #0]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103014:	2b00      	cmp	r3, #0
 8103016:	d109      	bne.n	810302c <HAL_ADC_ConfigChannel+0x42c>
 8103018:	683b      	ldr	r3, [r7, #0]
 810301a:	681b      	ldr	r3, [r3, #0]
 810301c:	0e9b      	lsrs	r3, r3, #26
 810301e:	3301      	adds	r3, #1
 8103020:	f003 031f 	and.w	r3, r3, #31
 8103024:	2101      	movs	r1, #1
 8103026:	fa01 f303 	lsl.w	r3, r1, r3
 810302a:	e017      	b.n	810305c <HAL_ADC_ConfigChannel+0x45c>
 810302c:	683b      	ldr	r3, [r7, #0]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103032:	69fb      	ldr	r3, [r7, #28]
 8103034:	fa93 f3a3 	rbit	r3, r3
 8103038:	61bb      	str	r3, [r7, #24]
  return result;
 810303a:	69bb      	ldr	r3, [r7, #24]
 810303c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 810303e:	6a3b      	ldr	r3, [r7, #32]
 8103040:	2b00      	cmp	r3, #0
 8103042:	d101      	bne.n	8103048 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8103044:	2320      	movs	r3, #32
 8103046:	e003      	b.n	8103050 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103048:	6a3b      	ldr	r3, [r7, #32]
 810304a:	fab3 f383 	clz	r3, r3
 810304e:	b2db      	uxtb	r3, r3
 8103050:	3301      	adds	r3, #1
 8103052:	f003 031f 	and.w	r3, r3, #31
 8103056:	2101      	movs	r1, #1
 8103058:	fa01 f303 	lsl.w	r3, r1, r3
 810305c:	ea42 0103 	orr.w	r1, r2, r3
 8103060:	683b      	ldr	r3, [r7, #0]
 8103062:	681b      	ldr	r3, [r3, #0]
 8103064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103068:	2b00      	cmp	r3, #0
 810306a:	d10d      	bne.n	8103088 <HAL_ADC_ConfigChannel+0x488>
 810306c:	683b      	ldr	r3, [r7, #0]
 810306e:	681b      	ldr	r3, [r3, #0]
 8103070:	0e9b      	lsrs	r3, r3, #26
 8103072:	3301      	adds	r3, #1
 8103074:	f003 021f 	and.w	r2, r3, #31
 8103078:	4613      	mov	r3, r2
 810307a:	005b      	lsls	r3, r3, #1
 810307c:	4413      	add	r3, r2
 810307e:	3b1e      	subs	r3, #30
 8103080:	051b      	lsls	r3, r3, #20
 8103082:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103086:	e01b      	b.n	81030c0 <HAL_ADC_ConfigChannel+0x4c0>
 8103088:	683b      	ldr	r3, [r7, #0]
 810308a:	681b      	ldr	r3, [r3, #0]
 810308c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810308e:	693b      	ldr	r3, [r7, #16]
 8103090:	fa93 f3a3 	rbit	r3, r3
 8103094:	60fb      	str	r3, [r7, #12]
  return result;
 8103096:	68fb      	ldr	r3, [r7, #12]
 8103098:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 810309a:	697b      	ldr	r3, [r7, #20]
 810309c:	2b00      	cmp	r3, #0
 810309e:	d101      	bne.n	81030a4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 81030a0:	2320      	movs	r3, #32
 81030a2:	e003      	b.n	81030ac <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 81030a4:	697b      	ldr	r3, [r7, #20]
 81030a6:	fab3 f383 	clz	r3, r3
 81030aa:	b2db      	uxtb	r3, r3
 81030ac:	3301      	adds	r3, #1
 81030ae:	f003 021f 	and.w	r2, r3, #31
 81030b2:	4613      	mov	r3, r2
 81030b4:	005b      	lsls	r3, r3, #1
 81030b6:	4413      	add	r3, r2
 81030b8:	3b1e      	subs	r3, #30
 81030ba:	051b      	lsls	r3, r3, #20
 81030bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81030c0:	430b      	orrs	r3, r1
 81030c2:	683a      	ldr	r2, [r7, #0]
 81030c4:	6892      	ldr	r2, [r2, #8]
 81030c6:	4619      	mov	r1, r3
 81030c8:	f7ff fb20 	bl	810270c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 81030cc:	683b      	ldr	r3, [r7, #0]
 81030ce:	681b      	ldr	r3, [r3, #0]
 81030d0:	2b00      	cmp	r3, #0
 81030d2:	f280 80c6 	bge.w	8103262 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	681b      	ldr	r3, [r3, #0]
 81030da:	4a67      	ldr	r2, [pc, #412]	; (8103278 <HAL_ADC_ConfigChannel+0x678>)
 81030dc:	4293      	cmp	r3, r2
 81030de:	d004      	beq.n	81030ea <HAL_ADC_ConfigChannel+0x4ea>
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	681b      	ldr	r3, [r3, #0]
 81030e4:	4a65      	ldr	r2, [pc, #404]	; (810327c <HAL_ADC_ConfigChannel+0x67c>)
 81030e6:	4293      	cmp	r3, r2
 81030e8:	d101      	bne.n	81030ee <HAL_ADC_ConfigChannel+0x4ee>
 81030ea:	4b65      	ldr	r3, [pc, #404]	; (8103280 <HAL_ADC_ConfigChannel+0x680>)
 81030ec:	e000      	b.n	81030f0 <HAL_ADC_ConfigChannel+0x4f0>
 81030ee:	4b65      	ldr	r3, [pc, #404]	; (8103284 <HAL_ADC_ConfigChannel+0x684>)
 81030f0:	4618      	mov	r0, r3
 81030f2:	f7ff fa7d 	bl	81025f0 <LL_ADC_GetCommonPathInternalCh>
 81030f6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	681b      	ldr	r3, [r3, #0]
 81030fc:	4a5e      	ldr	r2, [pc, #376]	; (8103278 <HAL_ADC_ConfigChannel+0x678>)
 81030fe:	4293      	cmp	r3, r2
 8103100:	d004      	beq.n	810310c <HAL_ADC_ConfigChannel+0x50c>
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	681b      	ldr	r3, [r3, #0]
 8103106:	4a5d      	ldr	r2, [pc, #372]	; (810327c <HAL_ADC_ConfigChannel+0x67c>)
 8103108:	4293      	cmp	r3, r2
 810310a:	d10e      	bne.n	810312a <HAL_ADC_ConfigChannel+0x52a>
 810310c:	485a      	ldr	r0, [pc, #360]	; (8103278 <HAL_ADC_ConfigChannel+0x678>)
 810310e:	f7ff fb9b 	bl	8102848 <LL_ADC_IsEnabled>
 8103112:	4604      	mov	r4, r0
 8103114:	4859      	ldr	r0, [pc, #356]	; (810327c <HAL_ADC_ConfigChannel+0x67c>)
 8103116:	f7ff fb97 	bl	8102848 <LL_ADC_IsEnabled>
 810311a:	4603      	mov	r3, r0
 810311c:	4323      	orrs	r3, r4
 810311e:	2b00      	cmp	r3, #0
 8103120:	bf0c      	ite	eq
 8103122:	2301      	moveq	r3, #1
 8103124:	2300      	movne	r3, #0
 8103126:	b2db      	uxtb	r3, r3
 8103128:	e008      	b.n	810313c <HAL_ADC_ConfigChannel+0x53c>
 810312a:	4857      	ldr	r0, [pc, #348]	; (8103288 <HAL_ADC_ConfigChannel+0x688>)
 810312c:	f7ff fb8c 	bl	8102848 <LL_ADC_IsEnabled>
 8103130:	4603      	mov	r3, r0
 8103132:	2b00      	cmp	r3, #0
 8103134:	bf0c      	ite	eq
 8103136:	2301      	moveq	r3, #1
 8103138:	2300      	movne	r3, #0
 810313a:	b2db      	uxtb	r3, r3
 810313c:	2b00      	cmp	r3, #0
 810313e:	d07d      	beq.n	810323c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103140:	683b      	ldr	r3, [r7, #0]
 8103142:	681b      	ldr	r3, [r3, #0]
 8103144:	4a51      	ldr	r2, [pc, #324]	; (810328c <HAL_ADC_ConfigChannel+0x68c>)
 8103146:	4293      	cmp	r3, r2
 8103148:	d130      	bne.n	81031ac <HAL_ADC_ConfigChannel+0x5ac>
 810314a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810314c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103150:	2b00      	cmp	r3, #0
 8103152:	d12b      	bne.n	81031ac <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	681b      	ldr	r3, [r3, #0]
 8103158:	4a4b      	ldr	r2, [pc, #300]	; (8103288 <HAL_ADC_ConfigChannel+0x688>)
 810315a:	4293      	cmp	r3, r2
 810315c:	f040 8081 	bne.w	8103262 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	4a44      	ldr	r2, [pc, #272]	; (8103278 <HAL_ADC_ConfigChannel+0x678>)
 8103166:	4293      	cmp	r3, r2
 8103168:	d004      	beq.n	8103174 <HAL_ADC_ConfigChannel+0x574>
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	4a43      	ldr	r2, [pc, #268]	; (810327c <HAL_ADC_ConfigChannel+0x67c>)
 8103170:	4293      	cmp	r3, r2
 8103172:	d101      	bne.n	8103178 <HAL_ADC_ConfigChannel+0x578>
 8103174:	4a42      	ldr	r2, [pc, #264]	; (8103280 <HAL_ADC_ConfigChannel+0x680>)
 8103176:	e000      	b.n	810317a <HAL_ADC_ConfigChannel+0x57a>
 8103178:	4a42      	ldr	r2, [pc, #264]	; (8103284 <HAL_ADC_ConfigChannel+0x684>)
 810317a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810317c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103180:	4619      	mov	r1, r3
 8103182:	4610      	mov	r0, r2
 8103184:	f7ff fa21 	bl	81025ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103188:	4b41      	ldr	r3, [pc, #260]	; (8103290 <HAL_ADC_ConfigChannel+0x690>)
 810318a:	681b      	ldr	r3, [r3, #0]
 810318c:	099b      	lsrs	r3, r3, #6
 810318e:	4a41      	ldr	r2, [pc, #260]	; (8103294 <HAL_ADC_ConfigChannel+0x694>)
 8103190:	fba2 2303 	umull	r2, r3, r2, r3
 8103194:	099b      	lsrs	r3, r3, #6
 8103196:	3301      	adds	r3, #1
 8103198:	005b      	lsls	r3, r3, #1
 810319a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 810319c:	e002      	b.n	81031a4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 810319e:	68bb      	ldr	r3, [r7, #8]
 81031a0:	3b01      	subs	r3, #1
 81031a2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 81031a4:	68bb      	ldr	r3, [r7, #8]
 81031a6:	2b00      	cmp	r3, #0
 81031a8:	d1f9      	bne.n	810319e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81031aa:	e05a      	b.n	8103262 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 81031ac:	683b      	ldr	r3, [r7, #0]
 81031ae:	681b      	ldr	r3, [r3, #0]
 81031b0:	4a39      	ldr	r2, [pc, #228]	; (8103298 <HAL_ADC_ConfigChannel+0x698>)
 81031b2:	4293      	cmp	r3, r2
 81031b4:	d11e      	bne.n	81031f4 <HAL_ADC_ConfigChannel+0x5f4>
 81031b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81031b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81031bc:	2b00      	cmp	r3, #0
 81031be:	d119      	bne.n	81031f4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	681b      	ldr	r3, [r3, #0]
 81031c4:	4a30      	ldr	r2, [pc, #192]	; (8103288 <HAL_ADC_ConfigChannel+0x688>)
 81031c6:	4293      	cmp	r3, r2
 81031c8:	d14b      	bne.n	8103262 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	681b      	ldr	r3, [r3, #0]
 81031ce:	4a2a      	ldr	r2, [pc, #168]	; (8103278 <HAL_ADC_ConfigChannel+0x678>)
 81031d0:	4293      	cmp	r3, r2
 81031d2:	d004      	beq.n	81031de <HAL_ADC_ConfigChannel+0x5de>
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	681b      	ldr	r3, [r3, #0]
 81031d8:	4a28      	ldr	r2, [pc, #160]	; (810327c <HAL_ADC_ConfigChannel+0x67c>)
 81031da:	4293      	cmp	r3, r2
 81031dc:	d101      	bne.n	81031e2 <HAL_ADC_ConfigChannel+0x5e2>
 81031de:	4a28      	ldr	r2, [pc, #160]	; (8103280 <HAL_ADC_ConfigChannel+0x680>)
 81031e0:	e000      	b.n	81031e4 <HAL_ADC_ConfigChannel+0x5e4>
 81031e2:	4a28      	ldr	r2, [pc, #160]	; (8103284 <HAL_ADC_ConfigChannel+0x684>)
 81031e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81031e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81031ea:	4619      	mov	r1, r3
 81031ec:	4610      	mov	r0, r2
 81031ee:	f7ff f9ec 	bl	81025ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81031f2:	e036      	b.n	8103262 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 81031f4:	683b      	ldr	r3, [r7, #0]
 81031f6:	681b      	ldr	r3, [r3, #0]
 81031f8:	4a28      	ldr	r2, [pc, #160]	; (810329c <HAL_ADC_ConfigChannel+0x69c>)
 81031fa:	4293      	cmp	r3, r2
 81031fc:	d131      	bne.n	8103262 <HAL_ADC_ConfigChannel+0x662>
 81031fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103204:	2b00      	cmp	r3, #0
 8103206:	d12c      	bne.n	8103262 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	681b      	ldr	r3, [r3, #0]
 810320c:	4a1e      	ldr	r2, [pc, #120]	; (8103288 <HAL_ADC_ConfigChannel+0x688>)
 810320e:	4293      	cmp	r3, r2
 8103210:	d127      	bne.n	8103262 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	681b      	ldr	r3, [r3, #0]
 8103216:	4a18      	ldr	r2, [pc, #96]	; (8103278 <HAL_ADC_ConfigChannel+0x678>)
 8103218:	4293      	cmp	r3, r2
 810321a:	d004      	beq.n	8103226 <HAL_ADC_ConfigChannel+0x626>
 810321c:	687b      	ldr	r3, [r7, #4]
 810321e:	681b      	ldr	r3, [r3, #0]
 8103220:	4a16      	ldr	r2, [pc, #88]	; (810327c <HAL_ADC_ConfigChannel+0x67c>)
 8103222:	4293      	cmp	r3, r2
 8103224:	d101      	bne.n	810322a <HAL_ADC_ConfigChannel+0x62a>
 8103226:	4a16      	ldr	r2, [pc, #88]	; (8103280 <HAL_ADC_ConfigChannel+0x680>)
 8103228:	e000      	b.n	810322c <HAL_ADC_ConfigChannel+0x62c>
 810322a:	4a16      	ldr	r2, [pc, #88]	; (8103284 <HAL_ADC_ConfigChannel+0x684>)
 810322c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810322e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103232:	4619      	mov	r1, r3
 8103234:	4610      	mov	r0, r2
 8103236:	f7ff f9c8 	bl	81025ca <LL_ADC_SetCommonPathInternalCh>
 810323a:	e012      	b.n	8103262 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103240:	f043 0220 	orr.w	r2, r3, #32
 8103244:	687b      	ldr	r3, [r7, #4]
 8103246:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103248:	2301      	movs	r3, #1
 810324a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 810324e:	e008      	b.n	8103262 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103254:	f043 0220 	orr.w	r2, r3, #32
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810325c:	2301      	movs	r3, #1
 810325e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	2200      	movs	r2, #0
 8103266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 810326a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 810326e:	4618      	mov	r0, r3
 8103270:	3784      	adds	r7, #132	; 0x84
 8103272:	46bd      	mov	sp, r7
 8103274:	bd90      	pop	{r4, r7, pc}
 8103276:	bf00      	nop
 8103278:	40022000 	.word	0x40022000
 810327c:	40022100 	.word	0x40022100
 8103280:	40022300 	.word	0x40022300
 8103284:	58026300 	.word	0x58026300
 8103288:	58026000 	.word	0x58026000
 810328c:	cb840000 	.word	0xcb840000
 8103290:	10000000 	.word	0x10000000
 8103294:	053e2d63 	.word	0x053e2d63
 8103298:	c7520000 	.word	0xc7520000
 810329c:	cfb80000 	.word	0xcfb80000

081032a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81032a0:	b580      	push	{r7, lr}
 81032a2:	b084      	sub	sp, #16
 81032a4:	af00      	add	r7, sp, #0
 81032a6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	4a79      	ldr	r2, [pc, #484]	; (8103494 <ADC_ConfigureBoostMode+0x1f4>)
 81032ae:	4293      	cmp	r3, r2
 81032b0:	d004      	beq.n	81032bc <ADC_ConfigureBoostMode+0x1c>
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	4a78      	ldr	r2, [pc, #480]	; (8103498 <ADC_ConfigureBoostMode+0x1f8>)
 81032b8:	4293      	cmp	r3, r2
 81032ba:	d109      	bne.n	81032d0 <ADC_ConfigureBoostMode+0x30>
 81032bc:	4b77      	ldr	r3, [pc, #476]	; (810349c <ADC_ConfigureBoostMode+0x1fc>)
 81032be:	689b      	ldr	r3, [r3, #8]
 81032c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81032c4:	2b00      	cmp	r3, #0
 81032c6:	bf14      	ite	ne
 81032c8:	2301      	movne	r3, #1
 81032ca:	2300      	moveq	r3, #0
 81032cc:	b2db      	uxtb	r3, r3
 81032ce:	e008      	b.n	81032e2 <ADC_ConfigureBoostMode+0x42>
 81032d0:	4b73      	ldr	r3, [pc, #460]	; (81034a0 <ADC_ConfigureBoostMode+0x200>)
 81032d2:	689b      	ldr	r3, [r3, #8]
 81032d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81032d8:	2b00      	cmp	r3, #0
 81032da:	bf14      	ite	ne
 81032dc:	2301      	movne	r3, #1
 81032de:	2300      	moveq	r3, #0
 81032e0:	b2db      	uxtb	r3, r3
 81032e2:	2b00      	cmp	r3, #0
 81032e4:	d01c      	beq.n	8103320 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 81032e6:	f001 fd27 	bl	8104d38 <HAL_RCC_GetHCLKFreq>
 81032ea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	685b      	ldr	r3, [r3, #4]
 81032f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81032f4:	d010      	beq.n	8103318 <ADC_ConfigureBoostMode+0x78>
 81032f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81032fa:	d871      	bhi.n	81033e0 <ADC_ConfigureBoostMode+0x140>
 81032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103300:	d002      	beq.n	8103308 <ADC_ConfigureBoostMode+0x68>
 8103302:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103306:	d16b      	bne.n	81033e0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	685b      	ldr	r3, [r3, #4]
 810330c:	0c1b      	lsrs	r3, r3, #16
 810330e:	68fa      	ldr	r2, [r7, #12]
 8103310:	fbb2 f3f3 	udiv	r3, r2, r3
 8103314:	60fb      	str	r3, [r7, #12]
        break;
 8103316:	e066      	b.n	81033e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103318:	68fb      	ldr	r3, [r7, #12]
 810331a:	089b      	lsrs	r3, r3, #2
 810331c:	60fb      	str	r3, [r7, #12]
        break;
 810331e:	e062      	b.n	81033e6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103320:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103324:	f002 fcac 	bl	8105c80 <HAL_RCCEx_GetPeriphCLKFreq>
 8103328:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810332a:	687b      	ldr	r3, [r7, #4]
 810332c:	685b      	ldr	r3, [r3, #4]
 810332e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103332:	d051      	beq.n	81033d8 <ADC_ConfigureBoostMode+0x138>
 8103334:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103338:	d854      	bhi.n	81033e4 <ADC_ConfigureBoostMode+0x144>
 810333a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810333e:	d047      	beq.n	81033d0 <ADC_ConfigureBoostMode+0x130>
 8103340:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103344:	d84e      	bhi.n	81033e4 <ADC_ConfigureBoostMode+0x144>
 8103346:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 810334a:	d03d      	beq.n	81033c8 <ADC_ConfigureBoostMode+0x128>
 810334c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103350:	d848      	bhi.n	81033e4 <ADC_ConfigureBoostMode+0x144>
 8103352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103356:	d033      	beq.n	81033c0 <ADC_ConfigureBoostMode+0x120>
 8103358:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810335c:	d842      	bhi.n	81033e4 <ADC_ConfigureBoostMode+0x144>
 810335e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103362:	d029      	beq.n	81033b8 <ADC_ConfigureBoostMode+0x118>
 8103364:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103368:	d83c      	bhi.n	81033e4 <ADC_ConfigureBoostMode+0x144>
 810336a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 810336e:	d01a      	beq.n	81033a6 <ADC_ConfigureBoostMode+0x106>
 8103370:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103374:	d836      	bhi.n	81033e4 <ADC_ConfigureBoostMode+0x144>
 8103376:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 810337a:	d014      	beq.n	81033a6 <ADC_ConfigureBoostMode+0x106>
 810337c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103380:	d830      	bhi.n	81033e4 <ADC_ConfigureBoostMode+0x144>
 8103382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103386:	d00e      	beq.n	81033a6 <ADC_ConfigureBoostMode+0x106>
 8103388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810338c:	d82a      	bhi.n	81033e4 <ADC_ConfigureBoostMode+0x144>
 810338e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103392:	d008      	beq.n	81033a6 <ADC_ConfigureBoostMode+0x106>
 8103394:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103398:	d824      	bhi.n	81033e4 <ADC_ConfigureBoostMode+0x144>
 810339a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810339e:	d002      	beq.n	81033a6 <ADC_ConfigureBoostMode+0x106>
 81033a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81033a4:	d11e      	bne.n	81033e4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	685b      	ldr	r3, [r3, #4]
 81033aa:	0c9b      	lsrs	r3, r3, #18
 81033ac:	005b      	lsls	r3, r3, #1
 81033ae:	68fa      	ldr	r2, [r7, #12]
 81033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 81033b4:	60fb      	str	r3, [r7, #12]
        break;
 81033b6:	e016      	b.n	81033e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 81033b8:	68fb      	ldr	r3, [r7, #12]
 81033ba:	091b      	lsrs	r3, r3, #4
 81033bc:	60fb      	str	r3, [r7, #12]
        break;
 81033be:	e012      	b.n	81033e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 81033c0:	68fb      	ldr	r3, [r7, #12]
 81033c2:	095b      	lsrs	r3, r3, #5
 81033c4:	60fb      	str	r3, [r7, #12]
        break;
 81033c6:	e00e      	b.n	81033e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 81033c8:	68fb      	ldr	r3, [r7, #12]
 81033ca:	099b      	lsrs	r3, r3, #6
 81033cc:	60fb      	str	r3, [r7, #12]
        break;
 81033ce:	e00a      	b.n	81033e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 81033d0:	68fb      	ldr	r3, [r7, #12]
 81033d2:	09db      	lsrs	r3, r3, #7
 81033d4:	60fb      	str	r3, [r7, #12]
        break;
 81033d6:	e006      	b.n	81033e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 81033d8:	68fb      	ldr	r3, [r7, #12]
 81033da:	0a1b      	lsrs	r3, r3, #8
 81033dc:	60fb      	str	r3, [r7, #12]
        break;
 81033de:	e002      	b.n	81033e6 <ADC_ConfigureBoostMode+0x146>
        break;
 81033e0:	bf00      	nop
 81033e2:	e000      	b.n	81033e6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 81033e4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81033e6:	f7ff f8d1 	bl	810258c <HAL_GetREVID>
 81033ea:	4603      	mov	r3, r0
 81033ec:	f241 0203 	movw	r2, #4099	; 0x1003
 81033f0:	4293      	cmp	r3, r2
 81033f2:	d815      	bhi.n	8103420 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 81033f4:	68fb      	ldr	r3, [r7, #12]
 81033f6:	4a2b      	ldr	r2, [pc, #172]	; (81034a4 <ADC_ConfigureBoostMode+0x204>)
 81033f8:	4293      	cmp	r3, r2
 81033fa:	d908      	bls.n	810340e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	681b      	ldr	r3, [r3, #0]
 8103400:	689a      	ldr	r2, [r3, #8]
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	681b      	ldr	r3, [r3, #0]
 8103406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810340a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 810340c:	e03e      	b.n	810348c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	681b      	ldr	r3, [r3, #0]
 8103412:	689a      	ldr	r2, [r3, #8]
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810341c:	609a      	str	r2, [r3, #8]
}
 810341e:	e035      	b.n	810348c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103420:	68fb      	ldr	r3, [r7, #12]
 8103422:	085b      	lsrs	r3, r3, #1
 8103424:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103426:	68fb      	ldr	r3, [r7, #12]
 8103428:	4a1f      	ldr	r2, [pc, #124]	; (81034a8 <ADC_ConfigureBoostMode+0x208>)
 810342a:	4293      	cmp	r3, r2
 810342c:	d808      	bhi.n	8103440 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	681b      	ldr	r3, [r3, #0]
 8103432:	689a      	ldr	r2, [r3, #8]
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 810343c:	609a      	str	r2, [r3, #8]
}
 810343e:	e025      	b.n	810348c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8103440:	68fb      	ldr	r3, [r7, #12]
 8103442:	4a1a      	ldr	r2, [pc, #104]	; (81034ac <ADC_ConfigureBoostMode+0x20c>)
 8103444:	4293      	cmp	r3, r2
 8103446:	d80a      	bhi.n	810345e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	689b      	ldr	r3, [r3, #8]
 810344e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	681b      	ldr	r3, [r3, #0]
 8103456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810345a:	609a      	str	r2, [r3, #8]
}
 810345c:	e016      	b.n	810348c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 810345e:	68fb      	ldr	r3, [r7, #12]
 8103460:	4a13      	ldr	r2, [pc, #76]	; (81034b0 <ADC_ConfigureBoostMode+0x210>)
 8103462:	4293      	cmp	r3, r2
 8103464:	d80a      	bhi.n	810347c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	681b      	ldr	r3, [r3, #0]
 810346a:	689b      	ldr	r3, [r3, #8]
 810346c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	681b      	ldr	r3, [r3, #0]
 8103474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103478:	609a      	str	r2, [r3, #8]
}
 810347a:	e007      	b.n	810348c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	681b      	ldr	r3, [r3, #0]
 8103480:	689a      	ldr	r2, [r3, #8]
 8103482:	687b      	ldr	r3, [r7, #4]
 8103484:	681b      	ldr	r3, [r3, #0]
 8103486:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 810348a:	609a      	str	r2, [r3, #8]
}
 810348c:	bf00      	nop
 810348e:	3710      	adds	r7, #16
 8103490:	46bd      	mov	sp, r7
 8103492:	bd80      	pop	{r7, pc}
 8103494:	40022000 	.word	0x40022000
 8103498:	40022100 	.word	0x40022100
 810349c:	40022300 	.word	0x40022300
 81034a0:	58026300 	.word	0x58026300
 81034a4:	01312d00 	.word	0x01312d00
 81034a8:	005f5e10 	.word	0x005f5e10
 81034ac:	00bebc20 	.word	0x00bebc20
 81034b0:	017d7840 	.word	0x017d7840

081034b4 <LL_ADC_IsEnabled>:
{
 81034b4:	b480      	push	{r7}
 81034b6:	b083      	sub	sp, #12
 81034b8:	af00      	add	r7, sp, #0
 81034ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	689b      	ldr	r3, [r3, #8]
 81034c0:	f003 0301 	and.w	r3, r3, #1
 81034c4:	2b01      	cmp	r3, #1
 81034c6:	d101      	bne.n	81034cc <LL_ADC_IsEnabled+0x18>
 81034c8:	2301      	movs	r3, #1
 81034ca:	e000      	b.n	81034ce <LL_ADC_IsEnabled+0x1a>
 81034cc:	2300      	movs	r3, #0
}
 81034ce:	4618      	mov	r0, r3
 81034d0:	370c      	adds	r7, #12
 81034d2:	46bd      	mov	sp, r7
 81034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034d8:	4770      	bx	lr

081034da <LL_ADC_REG_IsConversionOngoing>:
{
 81034da:	b480      	push	{r7}
 81034dc:	b083      	sub	sp, #12
 81034de:	af00      	add	r7, sp, #0
 81034e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81034e2:	687b      	ldr	r3, [r7, #4]
 81034e4:	689b      	ldr	r3, [r3, #8]
 81034e6:	f003 0304 	and.w	r3, r3, #4
 81034ea:	2b04      	cmp	r3, #4
 81034ec:	d101      	bne.n	81034f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 81034ee:	2301      	movs	r3, #1
 81034f0:	e000      	b.n	81034f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81034f2:	2300      	movs	r3, #0
}
 81034f4:	4618      	mov	r0, r3
 81034f6:	370c      	adds	r7, #12
 81034f8:	46bd      	mov	sp, r7
 81034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034fe:	4770      	bx	lr

08103500 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103500:	b590      	push	{r4, r7, lr}
 8103502:	b09f      	sub	sp, #124	; 0x7c
 8103504:	af00      	add	r7, sp, #0
 8103506:	6078      	str	r0, [r7, #4]
 8103508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810350a:	2300      	movs	r3, #0
 810350c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103516:	2b01      	cmp	r3, #1
 8103518:	d101      	bne.n	810351e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 810351a:	2302      	movs	r3, #2
 810351c:	e0c4      	b.n	81036a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	2201      	movs	r2, #1
 8103522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103526:	2300      	movs	r3, #0
 8103528:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 810352a:	2300      	movs	r3, #0
 810352c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810352e:	687b      	ldr	r3, [r7, #4]
 8103530:	681b      	ldr	r3, [r3, #0]
 8103532:	4a5f      	ldr	r2, [pc, #380]	; (81036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103534:	4293      	cmp	r3, r2
 8103536:	d102      	bne.n	810353e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103538:	4b5e      	ldr	r3, [pc, #376]	; (81036b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810353a:	60bb      	str	r3, [r7, #8]
 810353c:	e001      	b.n	8103542 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 810353e:	2300      	movs	r3, #0
 8103540:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8103542:	68bb      	ldr	r3, [r7, #8]
 8103544:	2b00      	cmp	r3, #0
 8103546:	d10b      	bne.n	8103560 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810354c:	f043 0220 	orr.w	r2, r3, #32
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	2200      	movs	r2, #0
 8103558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 810355c:	2301      	movs	r3, #1
 810355e:	e0a3      	b.n	81036a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103560:	68bb      	ldr	r3, [r7, #8]
 8103562:	4618      	mov	r0, r3
 8103564:	f7ff ffb9 	bl	81034da <LL_ADC_REG_IsConversionOngoing>
 8103568:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810356a:	687b      	ldr	r3, [r7, #4]
 810356c:	681b      	ldr	r3, [r3, #0]
 810356e:	4618      	mov	r0, r3
 8103570:	f7ff ffb3 	bl	81034da <LL_ADC_REG_IsConversionOngoing>
 8103574:	4603      	mov	r3, r0
 8103576:	2b00      	cmp	r3, #0
 8103578:	f040 8085 	bne.w	8103686 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 810357c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810357e:	2b00      	cmp	r3, #0
 8103580:	f040 8081 	bne.w	8103686 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103584:	687b      	ldr	r3, [r7, #4]
 8103586:	681b      	ldr	r3, [r3, #0]
 8103588:	4a49      	ldr	r2, [pc, #292]	; (81036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810358a:	4293      	cmp	r3, r2
 810358c:	d004      	beq.n	8103598 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	681b      	ldr	r3, [r3, #0]
 8103592:	4a48      	ldr	r2, [pc, #288]	; (81036b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103594:	4293      	cmp	r3, r2
 8103596:	d101      	bne.n	810359c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103598:	4b47      	ldr	r3, [pc, #284]	; (81036b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 810359a:	e000      	b.n	810359e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 810359c:	4b47      	ldr	r3, [pc, #284]	; (81036bc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810359e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81035a0:	683b      	ldr	r3, [r7, #0]
 81035a2:	681b      	ldr	r3, [r3, #0]
 81035a4:	2b00      	cmp	r3, #0
 81035a6:	d03b      	beq.n	8103620 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81035a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81035aa:	689b      	ldr	r3, [r3, #8]
 81035ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81035b0:	683b      	ldr	r3, [r7, #0]
 81035b2:	685b      	ldr	r3, [r3, #4]
 81035b4:	431a      	orrs	r2, r3
 81035b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81035b8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	681b      	ldr	r3, [r3, #0]
 81035be:	4a3c      	ldr	r2, [pc, #240]	; (81036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81035c0:	4293      	cmp	r3, r2
 81035c2:	d004      	beq.n	81035ce <HAL_ADCEx_MultiModeConfigChannel+0xce>
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	681b      	ldr	r3, [r3, #0]
 81035c8:	4a3a      	ldr	r2, [pc, #232]	; (81036b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81035ca:	4293      	cmp	r3, r2
 81035cc:	d10e      	bne.n	81035ec <HAL_ADCEx_MultiModeConfigChannel+0xec>
 81035ce:	4838      	ldr	r0, [pc, #224]	; (81036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81035d0:	f7ff ff70 	bl	81034b4 <LL_ADC_IsEnabled>
 81035d4:	4604      	mov	r4, r0
 81035d6:	4837      	ldr	r0, [pc, #220]	; (81036b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81035d8:	f7ff ff6c 	bl	81034b4 <LL_ADC_IsEnabled>
 81035dc:	4603      	mov	r3, r0
 81035de:	4323      	orrs	r3, r4
 81035e0:	2b00      	cmp	r3, #0
 81035e2:	bf0c      	ite	eq
 81035e4:	2301      	moveq	r3, #1
 81035e6:	2300      	movne	r3, #0
 81035e8:	b2db      	uxtb	r3, r3
 81035ea:	e008      	b.n	81035fe <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 81035ec:	4834      	ldr	r0, [pc, #208]	; (81036c0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81035ee:	f7ff ff61 	bl	81034b4 <LL_ADC_IsEnabled>
 81035f2:	4603      	mov	r3, r0
 81035f4:	2b00      	cmp	r3, #0
 81035f6:	bf0c      	ite	eq
 81035f8:	2301      	moveq	r3, #1
 81035fa:	2300      	movne	r3, #0
 81035fc:	b2db      	uxtb	r3, r3
 81035fe:	2b00      	cmp	r3, #0
 8103600:	d04b      	beq.n	810369a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8103602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103604:	689b      	ldr	r3, [r3, #8]
 8103606:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 810360a:	f023 030f 	bic.w	r3, r3, #15
 810360e:	683a      	ldr	r2, [r7, #0]
 8103610:	6811      	ldr	r1, [r2, #0]
 8103612:	683a      	ldr	r2, [r7, #0]
 8103614:	6892      	ldr	r2, [r2, #8]
 8103616:	430a      	orrs	r2, r1
 8103618:	431a      	orrs	r2, r3
 810361a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810361c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810361e:	e03c      	b.n	810369a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8103620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103622:	689b      	ldr	r3, [r3, #8]
 8103624:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810362a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	681b      	ldr	r3, [r3, #0]
 8103630:	4a1f      	ldr	r2, [pc, #124]	; (81036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103632:	4293      	cmp	r3, r2
 8103634:	d004      	beq.n	8103640 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	681b      	ldr	r3, [r3, #0]
 810363a:	4a1e      	ldr	r2, [pc, #120]	; (81036b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810363c:	4293      	cmp	r3, r2
 810363e:	d10e      	bne.n	810365e <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8103640:	481b      	ldr	r0, [pc, #108]	; (81036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103642:	f7ff ff37 	bl	81034b4 <LL_ADC_IsEnabled>
 8103646:	4604      	mov	r4, r0
 8103648:	481a      	ldr	r0, [pc, #104]	; (81036b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810364a:	f7ff ff33 	bl	81034b4 <LL_ADC_IsEnabled>
 810364e:	4603      	mov	r3, r0
 8103650:	4323      	orrs	r3, r4
 8103652:	2b00      	cmp	r3, #0
 8103654:	bf0c      	ite	eq
 8103656:	2301      	moveq	r3, #1
 8103658:	2300      	movne	r3, #0
 810365a:	b2db      	uxtb	r3, r3
 810365c:	e008      	b.n	8103670 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 810365e:	4818      	ldr	r0, [pc, #96]	; (81036c0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103660:	f7ff ff28 	bl	81034b4 <LL_ADC_IsEnabled>
 8103664:	4603      	mov	r3, r0
 8103666:	2b00      	cmp	r3, #0
 8103668:	bf0c      	ite	eq
 810366a:	2301      	moveq	r3, #1
 810366c:	2300      	movne	r3, #0
 810366e:	b2db      	uxtb	r3, r3
 8103670:	2b00      	cmp	r3, #0
 8103672:	d012      	beq.n	810369a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103676:	689b      	ldr	r3, [r3, #8]
 8103678:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 810367c:	f023 030f 	bic.w	r3, r3, #15
 8103680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8103682:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103684:	e009      	b.n	810369a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810368a:	f043 0220 	orr.w	r2, r3, #32
 810368e:	687b      	ldr	r3, [r7, #4]
 8103690:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103692:	2301      	movs	r3, #1
 8103694:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8103698:	e000      	b.n	810369c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810369a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	2200      	movs	r2, #0
 81036a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81036a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 81036a8:	4618      	mov	r0, r3
 81036aa:	377c      	adds	r7, #124	; 0x7c
 81036ac:	46bd      	mov	sp, r7
 81036ae:	bd90      	pop	{r4, r7, pc}
 81036b0:	40022000 	.word	0x40022000
 81036b4:	40022100 	.word	0x40022100
 81036b8:	40022300 	.word	0x40022300
 81036bc:	58026300 	.word	0x58026300
 81036c0:	58026000 	.word	0x58026000

081036c4 <__NVIC_SetPriorityGrouping>:
{
 81036c4:	b480      	push	{r7}
 81036c6:	b085      	sub	sp, #20
 81036c8:	af00      	add	r7, sp, #0
 81036ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81036cc:	687b      	ldr	r3, [r7, #4]
 81036ce:	f003 0307 	and.w	r3, r3, #7
 81036d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81036d4:	4b0c      	ldr	r3, [pc, #48]	; (8103708 <__NVIC_SetPriorityGrouping+0x44>)
 81036d6:	68db      	ldr	r3, [r3, #12]
 81036d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81036da:	68ba      	ldr	r2, [r7, #8]
 81036dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81036e0:	4013      	ands	r3, r2
 81036e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81036e4:	68fb      	ldr	r3, [r7, #12]
 81036e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81036e8:	68bb      	ldr	r3, [r7, #8]
 81036ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81036ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81036f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81036f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81036f6:	4a04      	ldr	r2, [pc, #16]	; (8103708 <__NVIC_SetPriorityGrouping+0x44>)
 81036f8:	68bb      	ldr	r3, [r7, #8]
 81036fa:	60d3      	str	r3, [r2, #12]
}
 81036fc:	bf00      	nop
 81036fe:	3714      	adds	r7, #20
 8103700:	46bd      	mov	sp, r7
 8103702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103706:	4770      	bx	lr
 8103708:	e000ed00 	.word	0xe000ed00

0810370c <__NVIC_GetPriorityGrouping>:
{
 810370c:	b480      	push	{r7}
 810370e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103710:	4b04      	ldr	r3, [pc, #16]	; (8103724 <__NVIC_GetPriorityGrouping+0x18>)
 8103712:	68db      	ldr	r3, [r3, #12]
 8103714:	0a1b      	lsrs	r3, r3, #8
 8103716:	f003 0307 	and.w	r3, r3, #7
}
 810371a:	4618      	mov	r0, r3
 810371c:	46bd      	mov	sp, r7
 810371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103722:	4770      	bx	lr
 8103724:	e000ed00 	.word	0xe000ed00

08103728 <__NVIC_EnableIRQ>:
{
 8103728:	b480      	push	{r7}
 810372a:	b083      	sub	sp, #12
 810372c:	af00      	add	r7, sp, #0
 810372e:	4603      	mov	r3, r0
 8103730:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103736:	2b00      	cmp	r3, #0
 8103738:	db0b      	blt.n	8103752 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810373a:	88fb      	ldrh	r3, [r7, #6]
 810373c:	f003 021f 	and.w	r2, r3, #31
 8103740:	4907      	ldr	r1, [pc, #28]	; (8103760 <__NVIC_EnableIRQ+0x38>)
 8103742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103746:	095b      	lsrs	r3, r3, #5
 8103748:	2001      	movs	r0, #1
 810374a:	fa00 f202 	lsl.w	r2, r0, r2
 810374e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8103752:	bf00      	nop
 8103754:	370c      	adds	r7, #12
 8103756:	46bd      	mov	sp, r7
 8103758:	f85d 7b04 	ldr.w	r7, [sp], #4
 810375c:	4770      	bx	lr
 810375e:	bf00      	nop
 8103760:	e000e100 	.word	0xe000e100

08103764 <__NVIC_SetPriority>:
{
 8103764:	b480      	push	{r7}
 8103766:	b083      	sub	sp, #12
 8103768:	af00      	add	r7, sp, #0
 810376a:	4603      	mov	r3, r0
 810376c:	6039      	str	r1, [r7, #0]
 810376e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103774:	2b00      	cmp	r3, #0
 8103776:	db0a      	blt.n	810378e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103778:	683b      	ldr	r3, [r7, #0]
 810377a:	b2da      	uxtb	r2, r3
 810377c:	490c      	ldr	r1, [pc, #48]	; (81037b0 <__NVIC_SetPriority+0x4c>)
 810377e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103782:	0112      	lsls	r2, r2, #4
 8103784:	b2d2      	uxtb	r2, r2
 8103786:	440b      	add	r3, r1
 8103788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 810378c:	e00a      	b.n	81037a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810378e:	683b      	ldr	r3, [r7, #0]
 8103790:	b2da      	uxtb	r2, r3
 8103792:	4908      	ldr	r1, [pc, #32]	; (81037b4 <__NVIC_SetPriority+0x50>)
 8103794:	88fb      	ldrh	r3, [r7, #6]
 8103796:	f003 030f 	and.w	r3, r3, #15
 810379a:	3b04      	subs	r3, #4
 810379c:	0112      	lsls	r2, r2, #4
 810379e:	b2d2      	uxtb	r2, r2
 81037a0:	440b      	add	r3, r1
 81037a2:	761a      	strb	r2, [r3, #24]
}
 81037a4:	bf00      	nop
 81037a6:	370c      	adds	r7, #12
 81037a8:	46bd      	mov	sp, r7
 81037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037ae:	4770      	bx	lr
 81037b0:	e000e100 	.word	0xe000e100
 81037b4:	e000ed00 	.word	0xe000ed00

081037b8 <NVIC_EncodePriority>:
{
 81037b8:	b480      	push	{r7}
 81037ba:	b089      	sub	sp, #36	; 0x24
 81037bc:	af00      	add	r7, sp, #0
 81037be:	60f8      	str	r0, [r7, #12]
 81037c0:	60b9      	str	r1, [r7, #8]
 81037c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81037c4:	68fb      	ldr	r3, [r7, #12]
 81037c6:	f003 0307 	and.w	r3, r3, #7
 81037ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81037cc:	69fb      	ldr	r3, [r7, #28]
 81037ce:	f1c3 0307 	rsb	r3, r3, #7
 81037d2:	2b04      	cmp	r3, #4
 81037d4:	bf28      	it	cs
 81037d6:	2304      	movcs	r3, #4
 81037d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81037da:	69fb      	ldr	r3, [r7, #28]
 81037dc:	3304      	adds	r3, #4
 81037de:	2b06      	cmp	r3, #6
 81037e0:	d902      	bls.n	81037e8 <NVIC_EncodePriority+0x30>
 81037e2:	69fb      	ldr	r3, [r7, #28]
 81037e4:	3b03      	subs	r3, #3
 81037e6:	e000      	b.n	81037ea <NVIC_EncodePriority+0x32>
 81037e8:	2300      	movs	r3, #0
 81037ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81037ec:	f04f 32ff 	mov.w	r2, #4294967295
 81037f0:	69bb      	ldr	r3, [r7, #24]
 81037f2:	fa02 f303 	lsl.w	r3, r2, r3
 81037f6:	43da      	mvns	r2, r3
 81037f8:	68bb      	ldr	r3, [r7, #8]
 81037fa:	401a      	ands	r2, r3
 81037fc:	697b      	ldr	r3, [r7, #20]
 81037fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103800:	f04f 31ff 	mov.w	r1, #4294967295
 8103804:	697b      	ldr	r3, [r7, #20]
 8103806:	fa01 f303 	lsl.w	r3, r1, r3
 810380a:	43d9      	mvns	r1, r3
 810380c:	687b      	ldr	r3, [r7, #4]
 810380e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103810:	4313      	orrs	r3, r2
}
 8103812:	4618      	mov	r0, r3
 8103814:	3724      	adds	r7, #36	; 0x24
 8103816:	46bd      	mov	sp, r7
 8103818:	f85d 7b04 	ldr.w	r7, [sp], #4
 810381c:	4770      	bx	lr
	...

08103820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103820:	b580      	push	{r7, lr}
 8103822:	b082      	sub	sp, #8
 8103824:	af00      	add	r7, sp, #0
 8103826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	3b01      	subs	r3, #1
 810382c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103830:	d301      	bcc.n	8103836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103832:	2301      	movs	r3, #1
 8103834:	e00f      	b.n	8103856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103836:	4a0a      	ldr	r2, [pc, #40]	; (8103860 <SysTick_Config+0x40>)
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	3b01      	subs	r3, #1
 810383c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810383e:	210f      	movs	r1, #15
 8103840:	f04f 30ff 	mov.w	r0, #4294967295
 8103844:	f7ff ff8e 	bl	8103764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103848:	4b05      	ldr	r3, [pc, #20]	; (8103860 <SysTick_Config+0x40>)
 810384a:	2200      	movs	r2, #0
 810384c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810384e:	4b04      	ldr	r3, [pc, #16]	; (8103860 <SysTick_Config+0x40>)
 8103850:	2207      	movs	r2, #7
 8103852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103854:	2300      	movs	r3, #0
}
 8103856:	4618      	mov	r0, r3
 8103858:	3708      	adds	r7, #8
 810385a:	46bd      	mov	sp, r7
 810385c:	bd80      	pop	{r7, pc}
 810385e:	bf00      	nop
 8103860:	e000e010 	.word	0xe000e010

08103864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103864:	b580      	push	{r7, lr}
 8103866:	b082      	sub	sp, #8
 8103868:	af00      	add	r7, sp, #0
 810386a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810386c:	6878      	ldr	r0, [r7, #4]
 810386e:	f7ff ff29 	bl	81036c4 <__NVIC_SetPriorityGrouping>
}
 8103872:	bf00      	nop
 8103874:	3708      	adds	r7, #8
 8103876:	46bd      	mov	sp, r7
 8103878:	bd80      	pop	{r7, pc}

0810387a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810387a:	b580      	push	{r7, lr}
 810387c:	b086      	sub	sp, #24
 810387e:	af00      	add	r7, sp, #0
 8103880:	4603      	mov	r3, r0
 8103882:	60b9      	str	r1, [r7, #8]
 8103884:	607a      	str	r2, [r7, #4]
 8103886:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103888:	f7ff ff40 	bl	810370c <__NVIC_GetPriorityGrouping>
 810388c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810388e:	687a      	ldr	r2, [r7, #4]
 8103890:	68b9      	ldr	r1, [r7, #8]
 8103892:	6978      	ldr	r0, [r7, #20]
 8103894:	f7ff ff90 	bl	81037b8 <NVIC_EncodePriority>
 8103898:	4602      	mov	r2, r0
 810389a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810389e:	4611      	mov	r1, r2
 81038a0:	4618      	mov	r0, r3
 81038a2:	f7ff ff5f 	bl	8103764 <__NVIC_SetPriority>
}
 81038a6:	bf00      	nop
 81038a8:	3718      	adds	r7, #24
 81038aa:	46bd      	mov	sp, r7
 81038ac:	bd80      	pop	{r7, pc}

081038ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81038ae:	b580      	push	{r7, lr}
 81038b0:	b082      	sub	sp, #8
 81038b2:	af00      	add	r7, sp, #0
 81038b4:	4603      	mov	r3, r0
 81038b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81038b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81038bc:	4618      	mov	r0, r3
 81038be:	f7ff ff33 	bl	8103728 <__NVIC_EnableIRQ>
}
 81038c2:	bf00      	nop
 81038c4:	3708      	adds	r7, #8
 81038c6:	46bd      	mov	sp, r7
 81038c8:	bd80      	pop	{r7, pc}

081038ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81038ca:	b580      	push	{r7, lr}
 81038cc:	b082      	sub	sp, #8
 81038ce:	af00      	add	r7, sp, #0
 81038d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81038d2:	6878      	ldr	r0, [r7, #4]
 81038d4:	f7ff ffa4 	bl	8103820 <SysTick_Config>
 81038d8:	4603      	mov	r3, r0
}
 81038da:	4618      	mov	r0, r3
 81038dc:	3708      	adds	r7, #8
 81038de:	46bd      	mov	sp, r7
 81038e0:	bd80      	pop	{r7, pc}
	...

081038e4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81038e4:	b480      	push	{r7}
 81038e6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81038e8:	4b07      	ldr	r3, [pc, #28]	; (8103908 <HAL_GetCurrentCPUID+0x24>)
 81038ea:	681b      	ldr	r3, [r3, #0]
 81038ec:	091b      	lsrs	r3, r3, #4
 81038ee:	f003 030f 	and.w	r3, r3, #15
 81038f2:	2b07      	cmp	r3, #7
 81038f4:	d101      	bne.n	81038fa <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81038f6:	2303      	movs	r3, #3
 81038f8:	e000      	b.n	81038fc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81038fa:	2301      	movs	r3, #1
  }
}
 81038fc:	4618      	mov	r0, r3
 81038fe:	46bd      	mov	sp, r7
 8103900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103904:	4770      	bx	lr
 8103906:	bf00      	nop
 8103908:	e000ed00 	.word	0xe000ed00

0810390c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810390c:	b480      	push	{r7}
 810390e:	b089      	sub	sp, #36	; 0x24
 8103910:	af00      	add	r7, sp, #0
 8103912:	6078      	str	r0, [r7, #4]
 8103914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103916:	2300      	movs	r3, #0
 8103918:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810391a:	4b89      	ldr	r3, [pc, #548]	; (8103b40 <HAL_GPIO_Init+0x234>)
 810391c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810391e:	e194      	b.n	8103c4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103920:	683b      	ldr	r3, [r7, #0]
 8103922:	681a      	ldr	r2, [r3, #0]
 8103924:	2101      	movs	r1, #1
 8103926:	69fb      	ldr	r3, [r7, #28]
 8103928:	fa01 f303 	lsl.w	r3, r1, r3
 810392c:	4013      	ands	r3, r2
 810392e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103930:	693b      	ldr	r3, [r7, #16]
 8103932:	2b00      	cmp	r3, #0
 8103934:	f000 8186 	beq.w	8103c44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103938:	683b      	ldr	r3, [r7, #0]
 810393a:	685b      	ldr	r3, [r3, #4]
 810393c:	f003 0303 	and.w	r3, r3, #3
 8103940:	2b01      	cmp	r3, #1
 8103942:	d005      	beq.n	8103950 <HAL_GPIO_Init+0x44>
 8103944:	683b      	ldr	r3, [r7, #0]
 8103946:	685b      	ldr	r3, [r3, #4]
 8103948:	f003 0303 	and.w	r3, r3, #3
 810394c:	2b02      	cmp	r3, #2
 810394e:	d130      	bne.n	81039b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	689b      	ldr	r3, [r3, #8]
 8103954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103956:	69fb      	ldr	r3, [r7, #28]
 8103958:	005b      	lsls	r3, r3, #1
 810395a:	2203      	movs	r2, #3
 810395c:	fa02 f303 	lsl.w	r3, r2, r3
 8103960:	43db      	mvns	r3, r3
 8103962:	69ba      	ldr	r2, [r7, #24]
 8103964:	4013      	ands	r3, r2
 8103966:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103968:	683b      	ldr	r3, [r7, #0]
 810396a:	68da      	ldr	r2, [r3, #12]
 810396c:	69fb      	ldr	r3, [r7, #28]
 810396e:	005b      	lsls	r3, r3, #1
 8103970:	fa02 f303 	lsl.w	r3, r2, r3
 8103974:	69ba      	ldr	r2, [r7, #24]
 8103976:	4313      	orrs	r3, r2
 8103978:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	69ba      	ldr	r2, [r7, #24]
 810397e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	685b      	ldr	r3, [r3, #4]
 8103984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103986:	2201      	movs	r2, #1
 8103988:	69fb      	ldr	r3, [r7, #28]
 810398a:	fa02 f303 	lsl.w	r3, r2, r3
 810398e:	43db      	mvns	r3, r3
 8103990:	69ba      	ldr	r2, [r7, #24]
 8103992:	4013      	ands	r3, r2
 8103994:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8103996:	683b      	ldr	r3, [r7, #0]
 8103998:	685b      	ldr	r3, [r3, #4]
 810399a:	091b      	lsrs	r3, r3, #4
 810399c:	f003 0201 	and.w	r2, r3, #1
 81039a0:	69fb      	ldr	r3, [r7, #28]
 81039a2:	fa02 f303 	lsl.w	r3, r2, r3
 81039a6:	69ba      	ldr	r2, [r7, #24]
 81039a8:	4313      	orrs	r3, r2
 81039aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	69ba      	ldr	r2, [r7, #24]
 81039b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81039b2:	683b      	ldr	r3, [r7, #0]
 81039b4:	685b      	ldr	r3, [r3, #4]
 81039b6:	f003 0303 	and.w	r3, r3, #3
 81039ba:	2b03      	cmp	r3, #3
 81039bc:	d017      	beq.n	81039ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	68db      	ldr	r3, [r3, #12]
 81039c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81039c4:	69fb      	ldr	r3, [r7, #28]
 81039c6:	005b      	lsls	r3, r3, #1
 81039c8:	2203      	movs	r2, #3
 81039ca:	fa02 f303 	lsl.w	r3, r2, r3
 81039ce:	43db      	mvns	r3, r3
 81039d0:	69ba      	ldr	r2, [r7, #24]
 81039d2:	4013      	ands	r3, r2
 81039d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81039d6:	683b      	ldr	r3, [r7, #0]
 81039d8:	689a      	ldr	r2, [r3, #8]
 81039da:	69fb      	ldr	r3, [r7, #28]
 81039dc:	005b      	lsls	r3, r3, #1
 81039de:	fa02 f303 	lsl.w	r3, r2, r3
 81039e2:	69ba      	ldr	r2, [r7, #24]
 81039e4:	4313      	orrs	r3, r2
 81039e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	69ba      	ldr	r2, [r7, #24]
 81039ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81039ee:	683b      	ldr	r3, [r7, #0]
 81039f0:	685b      	ldr	r3, [r3, #4]
 81039f2:	f003 0303 	and.w	r3, r3, #3
 81039f6:	2b02      	cmp	r3, #2
 81039f8:	d123      	bne.n	8103a42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81039fa:	69fb      	ldr	r3, [r7, #28]
 81039fc:	08da      	lsrs	r2, r3, #3
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	3208      	adds	r2, #8
 8103a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103a08:	69fb      	ldr	r3, [r7, #28]
 8103a0a:	f003 0307 	and.w	r3, r3, #7
 8103a0e:	009b      	lsls	r3, r3, #2
 8103a10:	220f      	movs	r2, #15
 8103a12:	fa02 f303 	lsl.w	r3, r2, r3
 8103a16:	43db      	mvns	r3, r3
 8103a18:	69ba      	ldr	r2, [r7, #24]
 8103a1a:	4013      	ands	r3, r2
 8103a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103a1e:	683b      	ldr	r3, [r7, #0]
 8103a20:	691a      	ldr	r2, [r3, #16]
 8103a22:	69fb      	ldr	r3, [r7, #28]
 8103a24:	f003 0307 	and.w	r3, r3, #7
 8103a28:	009b      	lsls	r3, r3, #2
 8103a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8103a2e:	69ba      	ldr	r2, [r7, #24]
 8103a30:	4313      	orrs	r3, r2
 8103a32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103a34:	69fb      	ldr	r3, [r7, #28]
 8103a36:	08da      	lsrs	r2, r3, #3
 8103a38:	687b      	ldr	r3, [r7, #4]
 8103a3a:	3208      	adds	r2, #8
 8103a3c:	69b9      	ldr	r1, [r7, #24]
 8103a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103a42:	687b      	ldr	r3, [r7, #4]
 8103a44:	681b      	ldr	r3, [r3, #0]
 8103a46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103a48:	69fb      	ldr	r3, [r7, #28]
 8103a4a:	005b      	lsls	r3, r3, #1
 8103a4c:	2203      	movs	r2, #3
 8103a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8103a52:	43db      	mvns	r3, r3
 8103a54:	69ba      	ldr	r2, [r7, #24]
 8103a56:	4013      	ands	r3, r2
 8103a58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103a5a:	683b      	ldr	r3, [r7, #0]
 8103a5c:	685b      	ldr	r3, [r3, #4]
 8103a5e:	f003 0203 	and.w	r2, r3, #3
 8103a62:	69fb      	ldr	r3, [r7, #28]
 8103a64:	005b      	lsls	r3, r3, #1
 8103a66:	fa02 f303 	lsl.w	r3, r2, r3
 8103a6a:	69ba      	ldr	r2, [r7, #24]
 8103a6c:	4313      	orrs	r3, r2
 8103a6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	69ba      	ldr	r2, [r7, #24]
 8103a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8103a76:	683b      	ldr	r3, [r7, #0]
 8103a78:	685b      	ldr	r3, [r3, #4]
 8103a7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103a7e:	2b00      	cmp	r3, #0
 8103a80:	f000 80e0 	beq.w	8103c44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103a84:	4b2f      	ldr	r3, [pc, #188]	; (8103b44 <HAL_GPIO_Init+0x238>)
 8103a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103a8a:	4a2e      	ldr	r2, [pc, #184]	; (8103b44 <HAL_GPIO_Init+0x238>)
 8103a8c:	f043 0302 	orr.w	r3, r3, #2
 8103a90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103a94:	4b2b      	ldr	r3, [pc, #172]	; (8103b44 <HAL_GPIO_Init+0x238>)
 8103a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103a9a:	f003 0302 	and.w	r3, r3, #2
 8103a9e:	60fb      	str	r3, [r7, #12]
 8103aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103aa2:	4a29      	ldr	r2, [pc, #164]	; (8103b48 <HAL_GPIO_Init+0x23c>)
 8103aa4:	69fb      	ldr	r3, [r7, #28]
 8103aa6:	089b      	lsrs	r3, r3, #2
 8103aa8:	3302      	adds	r3, #2
 8103aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103ab0:	69fb      	ldr	r3, [r7, #28]
 8103ab2:	f003 0303 	and.w	r3, r3, #3
 8103ab6:	009b      	lsls	r3, r3, #2
 8103ab8:	220f      	movs	r2, #15
 8103aba:	fa02 f303 	lsl.w	r3, r2, r3
 8103abe:	43db      	mvns	r3, r3
 8103ac0:	69ba      	ldr	r2, [r7, #24]
 8103ac2:	4013      	ands	r3, r2
 8103ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103ac6:	687b      	ldr	r3, [r7, #4]
 8103ac8:	4a20      	ldr	r2, [pc, #128]	; (8103b4c <HAL_GPIO_Init+0x240>)
 8103aca:	4293      	cmp	r3, r2
 8103acc:	d052      	beq.n	8103b74 <HAL_GPIO_Init+0x268>
 8103ace:	687b      	ldr	r3, [r7, #4]
 8103ad0:	4a1f      	ldr	r2, [pc, #124]	; (8103b50 <HAL_GPIO_Init+0x244>)
 8103ad2:	4293      	cmp	r3, r2
 8103ad4:	d031      	beq.n	8103b3a <HAL_GPIO_Init+0x22e>
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	4a1e      	ldr	r2, [pc, #120]	; (8103b54 <HAL_GPIO_Init+0x248>)
 8103ada:	4293      	cmp	r3, r2
 8103adc:	d02b      	beq.n	8103b36 <HAL_GPIO_Init+0x22a>
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	4a1d      	ldr	r2, [pc, #116]	; (8103b58 <HAL_GPIO_Init+0x24c>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d025      	beq.n	8103b32 <HAL_GPIO_Init+0x226>
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	4a1c      	ldr	r2, [pc, #112]	; (8103b5c <HAL_GPIO_Init+0x250>)
 8103aea:	4293      	cmp	r3, r2
 8103aec:	d01f      	beq.n	8103b2e <HAL_GPIO_Init+0x222>
 8103aee:	687b      	ldr	r3, [r7, #4]
 8103af0:	4a1b      	ldr	r2, [pc, #108]	; (8103b60 <HAL_GPIO_Init+0x254>)
 8103af2:	4293      	cmp	r3, r2
 8103af4:	d019      	beq.n	8103b2a <HAL_GPIO_Init+0x21e>
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	4a1a      	ldr	r2, [pc, #104]	; (8103b64 <HAL_GPIO_Init+0x258>)
 8103afa:	4293      	cmp	r3, r2
 8103afc:	d013      	beq.n	8103b26 <HAL_GPIO_Init+0x21a>
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	4a19      	ldr	r2, [pc, #100]	; (8103b68 <HAL_GPIO_Init+0x25c>)
 8103b02:	4293      	cmp	r3, r2
 8103b04:	d00d      	beq.n	8103b22 <HAL_GPIO_Init+0x216>
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	4a18      	ldr	r2, [pc, #96]	; (8103b6c <HAL_GPIO_Init+0x260>)
 8103b0a:	4293      	cmp	r3, r2
 8103b0c:	d007      	beq.n	8103b1e <HAL_GPIO_Init+0x212>
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	4a17      	ldr	r2, [pc, #92]	; (8103b70 <HAL_GPIO_Init+0x264>)
 8103b12:	4293      	cmp	r3, r2
 8103b14:	d101      	bne.n	8103b1a <HAL_GPIO_Init+0x20e>
 8103b16:	2309      	movs	r3, #9
 8103b18:	e02d      	b.n	8103b76 <HAL_GPIO_Init+0x26a>
 8103b1a:	230a      	movs	r3, #10
 8103b1c:	e02b      	b.n	8103b76 <HAL_GPIO_Init+0x26a>
 8103b1e:	2308      	movs	r3, #8
 8103b20:	e029      	b.n	8103b76 <HAL_GPIO_Init+0x26a>
 8103b22:	2307      	movs	r3, #7
 8103b24:	e027      	b.n	8103b76 <HAL_GPIO_Init+0x26a>
 8103b26:	2306      	movs	r3, #6
 8103b28:	e025      	b.n	8103b76 <HAL_GPIO_Init+0x26a>
 8103b2a:	2305      	movs	r3, #5
 8103b2c:	e023      	b.n	8103b76 <HAL_GPIO_Init+0x26a>
 8103b2e:	2304      	movs	r3, #4
 8103b30:	e021      	b.n	8103b76 <HAL_GPIO_Init+0x26a>
 8103b32:	2303      	movs	r3, #3
 8103b34:	e01f      	b.n	8103b76 <HAL_GPIO_Init+0x26a>
 8103b36:	2302      	movs	r3, #2
 8103b38:	e01d      	b.n	8103b76 <HAL_GPIO_Init+0x26a>
 8103b3a:	2301      	movs	r3, #1
 8103b3c:	e01b      	b.n	8103b76 <HAL_GPIO_Init+0x26a>
 8103b3e:	bf00      	nop
 8103b40:	580000c0 	.word	0x580000c0
 8103b44:	58024400 	.word	0x58024400
 8103b48:	58000400 	.word	0x58000400
 8103b4c:	58020000 	.word	0x58020000
 8103b50:	58020400 	.word	0x58020400
 8103b54:	58020800 	.word	0x58020800
 8103b58:	58020c00 	.word	0x58020c00
 8103b5c:	58021000 	.word	0x58021000
 8103b60:	58021400 	.word	0x58021400
 8103b64:	58021800 	.word	0x58021800
 8103b68:	58021c00 	.word	0x58021c00
 8103b6c:	58022000 	.word	0x58022000
 8103b70:	58022400 	.word	0x58022400
 8103b74:	2300      	movs	r3, #0
 8103b76:	69fa      	ldr	r2, [r7, #28]
 8103b78:	f002 0203 	and.w	r2, r2, #3
 8103b7c:	0092      	lsls	r2, r2, #2
 8103b7e:	4093      	lsls	r3, r2
 8103b80:	69ba      	ldr	r2, [r7, #24]
 8103b82:	4313      	orrs	r3, r2
 8103b84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103b86:	4938      	ldr	r1, [pc, #224]	; (8103c68 <HAL_GPIO_Init+0x35c>)
 8103b88:	69fb      	ldr	r3, [r7, #28]
 8103b8a:	089b      	lsrs	r3, r3, #2
 8103b8c:	3302      	adds	r3, #2
 8103b8e:	69ba      	ldr	r2, [r7, #24]
 8103b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103b98:	681b      	ldr	r3, [r3, #0]
 8103b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103b9c:	693b      	ldr	r3, [r7, #16]
 8103b9e:	43db      	mvns	r3, r3
 8103ba0:	69ba      	ldr	r2, [r7, #24]
 8103ba2:	4013      	ands	r3, r2
 8103ba4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103ba6:	683b      	ldr	r3, [r7, #0]
 8103ba8:	685b      	ldr	r3, [r3, #4]
 8103baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103bae:	2b00      	cmp	r3, #0
 8103bb0:	d003      	beq.n	8103bba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103bb2:	69ba      	ldr	r2, [r7, #24]
 8103bb4:	693b      	ldr	r3, [r7, #16]
 8103bb6:	4313      	orrs	r3, r2
 8103bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103bbe:	69bb      	ldr	r3, [r7, #24]
 8103bc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103bc6:	685b      	ldr	r3, [r3, #4]
 8103bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103bca:	693b      	ldr	r3, [r7, #16]
 8103bcc:	43db      	mvns	r3, r3
 8103bce:	69ba      	ldr	r2, [r7, #24]
 8103bd0:	4013      	ands	r3, r2
 8103bd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103bd4:	683b      	ldr	r3, [r7, #0]
 8103bd6:	685b      	ldr	r3, [r3, #4]
 8103bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103bdc:	2b00      	cmp	r3, #0
 8103bde:	d003      	beq.n	8103be8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103be0:	69ba      	ldr	r2, [r7, #24]
 8103be2:	693b      	ldr	r3, [r7, #16]
 8103be4:	4313      	orrs	r3, r2
 8103be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103bec:	69bb      	ldr	r3, [r7, #24]
 8103bee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103bf0:	697b      	ldr	r3, [r7, #20]
 8103bf2:	685b      	ldr	r3, [r3, #4]
 8103bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103bf6:	693b      	ldr	r3, [r7, #16]
 8103bf8:	43db      	mvns	r3, r3
 8103bfa:	69ba      	ldr	r2, [r7, #24]
 8103bfc:	4013      	ands	r3, r2
 8103bfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103c00:	683b      	ldr	r3, [r7, #0]
 8103c02:	685b      	ldr	r3, [r3, #4]
 8103c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103c08:	2b00      	cmp	r3, #0
 8103c0a:	d003      	beq.n	8103c14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103c0c:	69ba      	ldr	r2, [r7, #24]
 8103c0e:	693b      	ldr	r3, [r7, #16]
 8103c10:	4313      	orrs	r3, r2
 8103c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103c14:	697b      	ldr	r3, [r7, #20]
 8103c16:	69ba      	ldr	r2, [r7, #24]
 8103c18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103c1a:	697b      	ldr	r3, [r7, #20]
 8103c1c:	681b      	ldr	r3, [r3, #0]
 8103c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103c20:	693b      	ldr	r3, [r7, #16]
 8103c22:	43db      	mvns	r3, r3
 8103c24:	69ba      	ldr	r2, [r7, #24]
 8103c26:	4013      	ands	r3, r2
 8103c28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103c2a:	683b      	ldr	r3, [r7, #0]
 8103c2c:	685b      	ldr	r3, [r3, #4]
 8103c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103c32:	2b00      	cmp	r3, #0
 8103c34:	d003      	beq.n	8103c3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103c36:	69ba      	ldr	r2, [r7, #24]
 8103c38:	693b      	ldr	r3, [r7, #16]
 8103c3a:	4313      	orrs	r3, r2
 8103c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103c3e:	697b      	ldr	r3, [r7, #20]
 8103c40:	69ba      	ldr	r2, [r7, #24]
 8103c42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103c44:	69fb      	ldr	r3, [r7, #28]
 8103c46:	3301      	adds	r3, #1
 8103c48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103c4a:	683b      	ldr	r3, [r7, #0]
 8103c4c:	681a      	ldr	r2, [r3, #0]
 8103c4e:	69fb      	ldr	r3, [r7, #28]
 8103c50:	fa22 f303 	lsr.w	r3, r2, r3
 8103c54:	2b00      	cmp	r3, #0
 8103c56:	f47f ae63 	bne.w	8103920 <HAL_GPIO_Init+0x14>
  }
}
 8103c5a:	bf00      	nop
 8103c5c:	bf00      	nop
 8103c5e:	3724      	adds	r7, #36	; 0x24
 8103c60:	46bd      	mov	sp, r7
 8103c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c66:	4770      	bx	lr
 8103c68:	58000400 	.word	0x58000400

08103c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8103c6c:	b480      	push	{r7}
 8103c6e:	b085      	sub	sp, #20
 8103c70:	af00      	add	r7, sp, #0
 8103c72:	6078      	str	r0, [r7, #4]
 8103c74:	460b      	mov	r3, r1
 8103c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8103c78:	687b      	ldr	r3, [r7, #4]
 8103c7a:	691a      	ldr	r2, [r3, #16]
 8103c7c:	887b      	ldrh	r3, [r7, #2]
 8103c7e:	4013      	ands	r3, r2
 8103c80:	2b00      	cmp	r3, #0
 8103c82:	d002      	beq.n	8103c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8103c84:	2301      	movs	r3, #1
 8103c86:	73fb      	strb	r3, [r7, #15]
 8103c88:	e001      	b.n	8103c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8103c8a:	2300      	movs	r3, #0
 8103c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8103c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8103c90:	4618      	mov	r0, r3
 8103c92:	3714      	adds	r7, #20
 8103c94:	46bd      	mov	sp, r7
 8103c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c9a:	4770      	bx	lr

08103c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103c9c:	b480      	push	{r7}
 8103c9e:	b083      	sub	sp, #12
 8103ca0:	af00      	add	r7, sp, #0
 8103ca2:	6078      	str	r0, [r7, #4]
 8103ca4:	460b      	mov	r3, r1
 8103ca6:	807b      	strh	r3, [r7, #2]
 8103ca8:	4613      	mov	r3, r2
 8103caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103cac:	787b      	ldrb	r3, [r7, #1]
 8103cae:	2b00      	cmp	r3, #0
 8103cb0:	d003      	beq.n	8103cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103cb2:	887a      	ldrh	r2, [r7, #2]
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103cb8:	e003      	b.n	8103cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103cba:	887b      	ldrh	r3, [r7, #2]
 8103cbc:	041a      	lsls	r2, r3, #16
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	619a      	str	r2, [r3, #24]
}
 8103cc2:	bf00      	nop
 8103cc4:	370c      	adds	r7, #12
 8103cc6:	46bd      	mov	sp, r7
 8103cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ccc:	4770      	bx	lr
	...

08103cd0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103cd0:	b480      	push	{r7}
 8103cd2:	b083      	sub	sp, #12
 8103cd4:	af00      	add	r7, sp, #0
 8103cd6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103cd8:	4b05      	ldr	r3, [pc, #20]	; (8103cf0 <HAL_HSEM_ActivateNotification+0x20>)
 8103cda:	681a      	ldr	r2, [r3, #0]
 8103cdc:	4904      	ldr	r1, [pc, #16]	; (8103cf0 <HAL_HSEM_ActivateNotification+0x20>)
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	4313      	orrs	r3, r2
 8103ce2:	600b      	str	r3, [r1, #0]
#endif
}
 8103ce4:	bf00      	nop
 8103ce6:	370c      	adds	r7, #12
 8103ce8:	46bd      	mov	sp, r7
 8103cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cee:	4770      	bx	lr
 8103cf0:	58026510 	.word	0x58026510

08103cf4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8103cf4:	b580      	push	{r7, lr}
 8103cf6:	b082      	sub	sp, #8
 8103cf8:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8103cfa:	4b0a      	ldr	r3, [pc, #40]	; (8103d24 <HAL_HSEM_IRQHandler+0x30>)
 8103cfc:	68db      	ldr	r3, [r3, #12]
 8103cfe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8103d00:	4b08      	ldr	r3, [pc, #32]	; (8103d24 <HAL_HSEM_IRQHandler+0x30>)
 8103d02:	681a      	ldr	r2, [r3, #0]
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	43db      	mvns	r3, r3
 8103d08:	4906      	ldr	r1, [pc, #24]	; (8103d24 <HAL_HSEM_IRQHandler+0x30>)
 8103d0a:	4013      	ands	r3, r2
 8103d0c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8103d0e:	4a05      	ldr	r2, [pc, #20]	; (8103d24 <HAL_HSEM_IRQHandler+0x30>)
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8103d14:	6878      	ldr	r0, [r7, #4]
 8103d16:	f000 f807 	bl	8103d28 <HAL_HSEM_FreeCallback>
}
 8103d1a:	bf00      	nop
 8103d1c:	3708      	adds	r7, #8
 8103d1e:	46bd      	mov	sp, r7
 8103d20:	bd80      	pop	{r7, pc}
 8103d22:	bf00      	nop
 8103d24:	58026510 	.word	0x58026510

08103d28 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8103d28:	b480      	push	{r7}
 8103d2a:	b083      	sub	sp, #12
 8103d2c:	af00      	add	r7, sp, #0
 8103d2e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8103d30:	bf00      	nop
 8103d32:	370c      	adds	r7, #12
 8103d34:	46bd      	mov	sp, r7
 8103d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d3a:	4770      	bx	lr

08103d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8103d3c:	b580      	push	{r7, lr}
 8103d3e:	b082      	sub	sp, #8
 8103d40:	af00      	add	r7, sp, #0
 8103d42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	2b00      	cmp	r3, #0
 8103d48:	d101      	bne.n	8103d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8103d4a:	2301      	movs	r3, #1
 8103d4c:	e081      	b.n	8103e52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103d54:	b2db      	uxtb	r3, r3
 8103d56:	2b00      	cmp	r3, #0
 8103d58:	d106      	bne.n	8103d68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	2200      	movs	r2, #0
 8103d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8103d62:	6878      	ldr	r0, [r7, #4]
 8103d64:	f7fd fd70 	bl	8101848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8103d68:	687b      	ldr	r3, [r7, #4]
 8103d6a:	2224      	movs	r2, #36	; 0x24
 8103d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8103d70:	687b      	ldr	r3, [r7, #4]
 8103d72:	681b      	ldr	r3, [r3, #0]
 8103d74:	681a      	ldr	r2, [r3, #0]
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	681b      	ldr	r3, [r3, #0]
 8103d7a:	f022 0201 	bic.w	r2, r2, #1
 8103d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	685a      	ldr	r2, [r3, #4]
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	681b      	ldr	r3, [r3, #0]
 8103d88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8103d8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	681b      	ldr	r3, [r3, #0]
 8103d92:	689a      	ldr	r2, [r3, #8]
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	681b      	ldr	r3, [r3, #0]
 8103d98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103d9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	68db      	ldr	r3, [r3, #12]
 8103da2:	2b01      	cmp	r3, #1
 8103da4:	d107      	bne.n	8103db6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	689a      	ldr	r2, [r3, #8]
 8103daa:	687b      	ldr	r3, [r7, #4]
 8103dac:	681b      	ldr	r3, [r3, #0]
 8103dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103db2:	609a      	str	r2, [r3, #8]
 8103db4:	e006      	b.n	8103dc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	689a      	ldr	r2, [r3, #8]
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	681b      	ldr	r3, [r3, #0]
 8103dbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8103dc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	68db      	ldr	r3, [r3, #12]
 8103dc8:	2b02      	cmp	r3, #2
 8103dca:	d104      	bne.n	8103dd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	681b      	ldr	r3, [r3, #0]
 8103dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103dd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	681b      	ldr	r3, [r3, #0]
 8103dda:	685b      	ldr	r3, [r3, #4]
 8103ddc:	687a      	ldr	r2, [r7, #4]
 8103dde:	6812      	ldr	r2, [r2, #0]
 8103de0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8103de8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	681b      	ldr	r3, [r3, #0]
 8103dee:	68da      	ldr	r2, [r3, #12]
 8103df0:	687b      	ldr	r3, [r7, #4]
 8103df2:	681b      	ldr	r3, [r3, #0]
 8103df4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103df8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103dfa:	687b      	ldr	r3, [r7, #4]
 8103dfc:	691a      	ldr	r2, [r3, #16]
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	695b      	ldr	r3, [r3, #20]
 8103e02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	699b      	ldr	r3, [r3, #24]
 8103e0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	681b      	ldr	r3, [r3, #0]
 8103e10:	430a      	orrs	r2, r1
 8103e12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	69d9      	ldr	r1, [r3, #28]
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	6a1a      	ldr	r2, [r3, #32]
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	681b      	ldr	r3, [r3, #0]
 8103e20:	430a      	orrs	r2, r1
 8103e22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	681a      	ldr	r2, [r3, #0]
 8103e2a:	687b      	ldr	r3, [r7, #4]
 8103e2c:	681b      	ldr	r3, [r3, #0]
 8103e2e:	f042 0201 	orr.w	r2, r2, #1
 8103e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103e34:	687b      	ldr	r3, [r7, #4]
 8103e36:	2200      	movs	r2, #0
 8103e38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	2220      	movs	r2, #32
 8103e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	2200      	movs	r2, #0
 8103e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103e48:	687b      	ldr	r3, [r7, #4]
 8103e4a:	2200      	movs	r2, #0
 8103e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8103e50:	2300      	movs	r3, #0
}
 8103e52:	4618      	mov	r0, r3
 8103e54:	3708      	adds	r7, #8
 8103e56:	46bd      	mov	sp, r7
 8103e58:	bd80      	pop	{r7, pc}
	...

08103e5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103e5c:	b580      	push	{r7, lr}
 8103e5e:	b088      	sub	sp, #32
 8103e60:	af02      	add	r7, sp, #8
 8103e62:	60f8      	str	r0, [r7, #12]
 8103e64:	4608      	mov	r0, r1
 8103e66:	4611      	mov	r1, r2
 8103e68:	461a      	mov	r2, r3
 8103e6a:	4603      	mov	r3, r0
 8103e6c:	817b      	strh	r3, [r7, #10]
 8103e6e:	460b      	mov	r3, r1
 8103e70:	813b      	strh	r3, [r7, #8]
 8103e72:	4613      	mov	r3, r2
 8103e74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103e76:	68fb      	ldr	r3, [r7, #12]
 8103e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103e7c:	b2db      	uxtb	r3, r3
 8103e7e:	2b20      	cmp	r3, #32
 8103e80:	f040 80f9 	bne.w	8104076 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8103e84:	6a3b      	ldr	r3, [r7, #32]
 8103e86:	2b00      	cmp	r3, #0
 8103e88:	d002      	beq.n	8103e90 <HAL_I2C_Mem_Write+0x34>
 8103e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8103e8c:	2b00      	cmp	r3, #0
 8103e8e:	d105      	bne.n	8103e9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8103e90:	68fb      	ldr	r3, [r7, #12]
 8103e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103e96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8103e98:	2301      	movs	r3, #1
 8103e9a:	e0ed      	b.n	8104078 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103e9c:	68fb      	ldr	r3, [r7, #12]
 8103e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103ea2:	2b01      	cmp	r3, #1
 8103ea4:	d101      	bne.n	8103eaa <HAL_I2C_Mem_Write+0x4e>
 8103ea6:	2302      	movs	r3, #2
 8103ea8:	e0e6      	b.n	8104078 <HAL_I2C_Mem_Write+0x21c>
 8103eaa:	68fb      	ldr	r3, [r7, #12]
 8103eac:	2201      	movs	r2, #1
 8103eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103eb2:	f7fe fb3b 	bl	810252c <HAL_GetTick>
 8103eb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103eb8:	697b      	ldr	r3, [r7, #20]
 8103eba:	9300      	str	r3, [sp, #0]
 8103ebc:	2319      	movs	r3, #25
 8103ebe:	2201      	movs	r2, #1
 8103ec0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103ec4:	68f8      	ldr	r0, [r7, #12]
 8103ec6:	f000 fac3 	bl	8104450 <I2C_WaitOnFlagUntilTimeout>
 8103eca:	4603      	mov	r3, r0
 8103ecc:	2b00      	cmp	r3, #0
 8103ece:	d001      	beq.n	8103ed4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8103ed0:	2301      	movs	r3, #1
 8103ed2:	e0d1      	b.n	8104078 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8103ed4:	68fb      	ldr	r3, [r7, #12]
 8103ed6:	2221      	movs	r2, #33	; 0x21
 8103ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8103edc:	68fb      	ldr	r3, [r7, #12]
 8103ede:	2240      	movs	r2, #64	; 0x40
 8103ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103ee4:	68fb      	ldr	r3, [r7, #12]
 8103ee6:	2200      	movs	r2, #0
 8103ee8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103eea:	68fb      	ldr	r3, [r7, #12]
 8103eec:	6a3a      	ldr	r2, [r7, #32]
 8103eee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103ef0:	68fb      	ldr	r3, [r7, #12]
 8103ef2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8103ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103ef6:	68fb      	ldr	r3, [r7, #12]
 8103ef8:	2200      	movs	r2, #0
 8103efa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8103efc:	88f8      	ldrh	r0, [r7, #6]
 8103efe:	893a      	ldrh	r2, [r7, #8]
 8103f00:	8979      	ldrh	r1, [r7, #10]
 8103f02:	697b      	ldr	r3, [r7, #20]
 8103f04:	9301      	str	r3, [sp, #4]
 8103f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103f08:	9300      	str	r3, [sp, #0]
 8103f0a:	4603      	mov	r3, r0
 8103f0c:	68f8      	ldr	r0, [r7, #12]
 8103f0e:	f000 f9d3 	bl	81042b8 <I2C_RequestMemoryWrite>
 8103f12:	4603      	mov	r3, r0
 8103f14:	2b00      	cmp	r3, #0
 8103f16:	d005      	beq.n	8103f24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103f18:	68fb      	ldr	r3, [r7, #12]
 8103f1a:	2200      	movs	r2, #0
 8103f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8103f20:	2301      	movs	r3, #1
 8103f22:	e0a9      	b.n	8104078 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103f24:	68fb      	ldr	r3, [r7, #12]
 8103f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f28:	b29b      	uxth	r3, r3
 8103f2a:	2bff      	cmp	r3, #255	; 0xff
 8103f2c:	d90e      	bls.n	8103f4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103f2e:	68fb      	ldr	r3, [r7, #12]
 8103f30:	22ff      	movs	r2, #255	; 0xff
 8103f32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8103f34:	68fb      	ldr	r3, [r7, #12]
 8103f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103f38:	b2da      	uxtb	r2, r3
 8103f3a:	8979      	ldrh	r1, [r7, #10]
 8103f3c:	2300      	movs	r3, #0
 8103f3e:	9300      	str	r3, [sp, #0]
 8103f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103f44:	68f8      	ldr	r0, [r7, #12]
 8103f46:	f000 fc2b 	bl	81047a0 <I2C_TransferConfig>
 8103f4a:	e00f      	b.n	8103f6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103f4c:	68fb      	ldr	r3, [r7, #12]
 8103f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f50:	b29a      	uxth	r2, r3
 8103f52:	68fb      	ldr	r3, [r7, #12]
 8103f54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8103f56:	68fb      	ldr	r3, [r7, #12]
 8103f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103f5a:	b2da      	uxtb	r2, r3
 8103f5c:	8979      	ldrh	r1, [r7, #10]
 8103f5e:	2300      	movs	r3, #0
 8103f60:	9300      	str	r3, [sp, #0]
 8103f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103f66:	68f8      	ldr	r0, [r7, #12]
 8103f68:	f000 fc1a 	bl	81047a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103f6c:	697a      	ldr	r2, [r7, #20]
 8103f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8103f70:	68f8      	ldr	r0, [r7, #12]
 8103f72:	f000 faad 	bl	81044d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8103f76:	4603      	mov	r3, r0
 8103f78:	2b00      	cmp	r3, #0
 8103f7a:	d001      	beq.n	8103f80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8103f7c:	2301      	movs	r3, #1
 8103f7e:	e07b      	b.n	8104078 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8103f80:	68fb      	ldr	r3, [r7, #12]
 8103f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103f84:	781a      	ldrb	r2, [r3, #0]
 8103f86:	68fb      	ldr	r3, [r7, #12]
 8103f88:	681b      	ldr	r3, [r3, #0]
 8103f8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103f8c:	68fb      	ldr	r3, [r7, #12]
 8103f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103f90:	1c5a      	adds	r2, r3, #1
 8103f92:	68fb      	ldr	r3, [r7, #12]
 8103f94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8103f96:	68fb      	ldr	r3, [r7, #12]
 8103f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f9a:	b29b      	uxth	r3, r3
 8103f9c:	3b01      	subs	r3, #1
 8103f9e:	b29a      	uxth	r2, r3
 8103fa0:	68fb      	ldr	r3, [r7, #12]
 8103fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8103fa4:	68fb      	ldr	r3, [r7, #12]
 8103fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103fa8:	3b01      	subs	r3, #1
 8103faa:	b29a      	uxth	r2, r3
 8103fac:	68fb      	ldr	r3, [r7, #12]
 8103fae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103fb0:	68fb      	ldr	r3, [r7, #12]
 8103fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103fb4:	b29b      	uxth	r3, r3
 8103fb6:	2b00      	cmp	r3, #0
 8103fb8:	d034      	beq.n	8104024 <HAL_I2C_Mem_Write+0x1c8>
 8103fba:	68fb      	ldr	r3, [r7, #12]
 8103fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103fbe:	2b00      	cmp	r3, #0
 8103fc0:	d130      	bne.n	8104024 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103fc2:	697b      	ldr	r3, [r7, #20]
 8103fc4:	9300      	str	r3, [sp, #0]
 8103fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103fc8:	2200      	movs	r2, #0
 8103fca:	2180      	movs	r1, #128	; 0x80
 8103fcc:	68f8      	ldr	r0, [r7, #12]
 8103fce:	f000 fa3f 	bl	8104450 <I2C_WaitOnFlagUntilTimeout>
 8103fd2:	4603      	mov	r3, r0
 8103fd4:	2b00      	cmp	r3, #0
 8103fd6:	d001      	beq.n	8103fdc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8103fd8:	2301      	movs	r3, #1
 8103fda:	e04d      	b.n	8104078 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103fdc:	68fb      	ldr	r3, [r7, #12]
 8103fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103fe0:	b29b      	uxth	r3, r3
 8103fe2:	2bff      	cmp	r3, #255	; 0xff
 8103fe4:	d90e      	bls.n	8104004 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103fe6:	68fb      	ldr	r3, [r7, #12]
 8103fe8:	22ff      	movs	r2, #255	; 0xff
 8103fea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103fec:	68fb      	ldr	r3, [r7, #12]
 8103fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103ff0:	b2da      	uxtb	r2, r3
 8103ff2:	8979      	ldrh	r1, [r7, #10]
 8103ff4:	2300      	movs	r3, #0
 8103ff6:	9300      	str	r3, [sp, #0]
 8103ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103ffc:	68f8      	ldr	r0, [r7, #12]
 8103ffe:	f000 fbcf 	bl	81047a0 <I2C_TransferConfig>
 8104002:	e00f      	b.n	8104024 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104004:	68fb      	ldr	r3, [r7, #12]
 8104006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104008:	b29a      	uxth	r2, r3
 810400a:	68fb      	ldr	r3, [r7, #12]
 810400c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810400e:	68fb      	ldr	r3, [r7, #12]
 8104010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104012:	b2da      	uxtb	r2, r3
 8104014:	8979      	ldrh	r1, [r7, #10]
 8104016:	2300      	movs	r3, #0
 8104018:	9300      	str	r3, [sp, #0]
 810401a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810401e:	68f8      	ldr	r0, [r7, #12]
 8104020:	f000 fbbe 	bl	81047a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8104024:	68fb      	ldr	r3, [r7, #12]
 8104026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104028:	b29b      	uxth	r3, r3
 810402a:	2b00      	cmp	r3, #0
 810402c:	d19e      	bne.n	8103f6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810402e:	697a      	ldr	r2, [r7, #20]
 8104030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104032:	68f8      	ldr	r0, [r7, #12]
 8104034:	f000 fa8c 	bl	8104550 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104038:	4603      	mov	r3, r0
 810403a:	2b00      	cmp	r3, #0
 810403c:	d001      	beq.n	8104042 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810403e:	2301      	movs	r3, #1
 8104040:	e01a      	b.n	8104078 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104042:	68fb      	ldr	r3, [r7, #12]
 8104044:	681b      	ldr	r3, [r3, #0]
 8104046:	2220      	movs	r2, #32
 8104048:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810404a:	68fb      	ldr	r3, [r7, #12]
 810404c:	681b      	ldr	r3, [r3, #0]
 810404e:	6859      	ldr	r1, [r3, #4]
 8104050:	68fb      	ldr	r3, [r7, #12]
 8104052:	681a      	ldr	r2, [r3, #0]
 8104054:	4b0a      	ldr	r3, [pc, #40]	; (8104080 <HAL_I2C_Mem_Write+0x224>)
 8104056:	400b      	ands	r3, r1
 8104058:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810405a:	68fb      	ldr	r3, [r7, #12]
 810405c:	2220      	movs	r2, #32
 810405e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104062:	68fb      	ldr	r3, [r7, #12]
 8104064:	2200      	movs	r2, #0
 8104066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810406a:	68fb      	ldr	r3, [r7, #12]
 810406c:	2200      	movs	r2, #0
 810406e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104072:	2300      	movs	r3, #0
 8104074:	e000      	b.n	8104078 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8104076:	2302      	movs	r3, #2
  }
}
 8104078:	4618      	mov	r0, r3
 810407a:	3718      	adds	r7, #24
 810407c:	46bd      	mov	sp, r7
 810407e:	bd80      	pop	{r7, pc}
 8104080:	fe00e800 	.word	0xfe00e800

08104084 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104084:	b580      	push	{r7, lr}
 8104086:	b088      	sub	sp, #32
 8104088:	af02      	add	r7, sp, #8
 810408a:	60f8      	str	r0, [r7, #12]
 810408c:	4608      	mov	r0, r1
 810408e:	4611      	mov	r1, r2
 8104090:	461a      	mov	r2, r3
 8104092:	4603      	mov	r3, r0
 8104094:	817b      	strh	r3, [r7, #10]
 8104096:	460b      	mov	r3, r1
 8104098:	813b      	strh	r3, [r7, #8]
 810409a:	4613      	mov	r3, r2
 810409c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810409e:	68fb      	ldr	r3, [r7, #12]
 81040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81040a4:	b2db      	uxtb	r3, r3
 81040a6:	2b20      	cmp	r3, #32
 81040a8:	f040 80fd 	bne.w	81042a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81040ac:	6a3b      	ldr	r3, [r7, #32]
 81040ae:	2b00      	cmp	r3, #0
 81040b0:	d002      	beq.n	81040b8 <HAL_I2C_Mem_Read+0x34>
 81040b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81040b4:	2b00      	cmp	r3, #0
 81040b6:	d105      	bne.n	81040c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81040b8:	68fb      	ldr	r3, [r7, #12]
 81040ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 81040be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81040c0:	2301      	movs	r3, #1
 81040c2:	e0f1      	b.n	81042a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81040c4:	68fb      	ldr	r3, [r7, #12]
 81040c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81040ca:	2b01      	cmp	r3, #1
 81040cc:	d101      	bne.n	81040d2 <HAL_I2C_Mem_Read+0x4e>
 81040ce:	2302      	movs	r3, #2
 81040d0:	e0ea      	b.n	81042a8 <HAL_I2C_Mem_Read+0x224>
 81040d2:	68fb      	ldr	r3, [r7, #12]
 81040d4:	2201      	movs	r2, #1
 81040d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81040da:	f7fe fa27 	bl	810252c <HAL_GetTick>
 81040de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81040e0:	697b      	ldr	r3, [r7, #20]
 81040e2:	9300      	str	r3, [sp, #0]
 81040e4:	2319      	movs	r3, #25
 81040e6:	2201      	movs	r2, #1
 81040e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81040ec:	68f8      	ldr	r0, [r7, #12]
 81040ee:	f000 f9af 	bl	8104450 <I2C_WaitOnFlagUntilTimeout>
 81040f2:	4603      	mov	r3, r0
 81040f4:	2b00      	cmp	r3, #0
 81040f6:	d001      	beq.n	81040fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81040f8:	2301      	movs	r3, #1
 81040fa:	e0d5      	b.n	81042a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81040fc:	68fb      	ldr	r3, [r7, #12]
 81040fe:	2222      	movs	r2, #34	; 0x22
 8104100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104104:	68fb      	ldr	r3, [r7, #12]
 8104106:	2240      	movs	r2, #64	; 0x40
 8104108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810410c:	68fb      	ldr	r3, [r7, #12]
 810410e:	2200      	movs	r2, #0
 8104110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104112:	68fb      	ldr	r3, [r7, #12]
 8104114:	6a3a      	ldr	r2, [r7, #32]
 8104116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104118:	68fb      	ldr	r3, [r7, #12]
 810411a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 810411c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810411e:	68fb      	ldr	r3, [r7, #12]
 8104120:	2200      	movs	r2, #0
 8104122:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104124:	88f8      	ldrh	r0, [r7, #6]
 8104126:	893a      	ldrh	r2, [r7, #8]
 8104128:	8979      	ldrh	r1, [r7, #10]
 810412a:	697b      	ldr	r3, [r7, #20]
 810412c:	9301      	str	r3, [sp, #4]
 810412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104130:	9300      	str	r3, [sp, #0]
 8104132:	4603      	mov	r3, r0
 8104134:	68f8      	ldr	r0, [r7, #12]
 8104136:	f000 f913 	bl	8104360 <I2C_RequestMemoryRead>
 810413a:	4603      	mov	r3, r0
 810413c:	2b00      	cmp	r3, #0
 810413e:	d005      	beq.n	810414c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104140:	68fb      	ldr	r3, [r7, #12]
 8104142:	2200      	movs	r2, #0
 8104144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104148:	2301      	movs	r3, #1
 810414a:	e0ad      	b.n	81042a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810414c:	68fb      	ldr	r3, [r7, #12]
 810414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104150:	b29b      	uxth	r3, r3
 8104152:	2bff      	cmp	r3, #255	; 0xff
 8104154:	d90e      	bls.n	8104174 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104156:	68fb      	ldr	r3, [r7, #12]
 8104158:	22ff      	movs	r2, #255	; 0xff
 810415a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810415c:	68fb      	ldr	r3, [r7, #12]
 810415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104160:	b2da      	uxtb	r2, r3
 8104162:	8979      	ldrh	r1, [r7, #10]
 8104164:	4b52      	ldr	r3, [pc, #328]	; (81042b0 <HAL_I2C_Mem_Read+0x22c>)
 8104166:	9300      	str	r3, [sp, #0]
 8104168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810416c:	68f8      	ldr	r0, [r7, #12]
 810416e:	f000 fb17 	bl	81047a0 <I2C_TransferConfig>
 8104172:	e00f      	b.n	8104194 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104174:	68fb      	ldr	r3, [r7, #12]
 8104176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104178:	b29a      	uxth	r2, r3
 810417a:	68fb      	ldr	r3, [r7, #12]
 810417c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810417e:	68fb      	ldr	r3, [r7, #12]
 8104180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104182:	b2da      	uxtb	r2, r3
 8104184:	8979      	ldrh	r1, [r7, #10]
 8104186:	4b4a      	ldr	r3, [pc, #296]	; (81042b0 <HAL_I2C_Mem_Read+0x22c>)
 8104188:	9300      	str	r3, [sp, #0]
 810418a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810418e:	68f8      	ldr	r0, [r7, #12]
 8104190:	f000 fb06 	bl	81047a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8104194:	697b      	ldr	r3, [r7, #20]
 8104196:	9300      	str	r3, [sp, #0]
 8104198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810419a:	2200      	movs	r2, #0
 810419c:	2104      	movs	r1, #4
 810419e:	68f8      	ldr	r0, [r7, #12]
 81041a0:	f000 f956 	bl	8104450 <I2C_WaitOnFlagUntilTimeout>
 81041a4:	4603      	mov	r3, r0
 81041a6:	2b00      	cmp	r3, #0
 81041a8:	d001      	beq.n	81041ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81041aa:	2301      	movs	r3, #1
 81041ac:	e07c      	b.n	81042a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81041ae:	68fb      	ldr	r3, [r7, #12]
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81041b4:	68fb      	ldr	r3, [r7, #12]
 81041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81041b8:	b2d2      	uxtb	r2, r2
 81041ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81041bc:	68fb      	ldr	r3, [r7, #12]
 81041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81041c0:	1c5a      	adds	r2, r3, #1
 81041c2:	68fb      	ldr	r3, [r7, #12]
 81041c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81041c6:	68fb      	ldr	r3, [r7, #12]
 81041c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81041ca:	3b01      	subs	r3, #1
 81041cc:	b29a      	uxth	r2, r3
 81041ce:	68fb      	ldr	r3, [r7, #12]
 81041d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81041d2:	68fb      	ldr	r3, [r7, #12]
 81041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81041d6:	b29b      	uxth	r3, r3
 81041d8:	3b01      	subs	r3, #1
 81041da:	b29a      	uxth	r2, r3
 81041dc:	68fb      	ldr	r3, [r7, #12]
 81041de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81041e0:	68fb      	ldr	r3, [r7, #12]
 81041e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81041e4:	b29b      	uxth	r3, r3
 81041e6:	2b00      	cmp	r3, #0
 81041e8:	d034      	beq.n	8104254 <HAL_I2C_Mem_Read+0x1d0>
 81041ea:	68fb      	ldr	r3, [r7, #12]
 81041ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81041ee:	2b00      	cmp	r3, #0
 81041f0:	d130      	bne.n	8104254 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81041f2:	697b      	ldr	r3, [r7, #20]
 81041f4:	9300      	str	r3, [sp, #0]
 81041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81041f8:	2200      	movs	r2, #0
 81041fa:	2180      	movs	r1, #128	; 0x80
 81041fc:	68f8      	ldr	r0, [r7, #12]
 81041fe:	f000 f927 	bl	8104450 <I2C_WaitOnFlagUntilTimeout>
 8104202:	4603      	mov	r3, r0
 8104204:	2b00      	cmp	r3, #0
 8104206:	d001      	beq.n	810420c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8104208:	2301      	movs	r3, #1
 810420a:	e04d      	b.n	81042a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810420c:	68fb      	ldr	r3, [r7, #12]
 810420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104210:	b29b      	uxth	r3, r3
 8104212:	2bff      	cmp	r3, #255	; 0xff
 8104214:	d90e      	bls.n	8104234 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104216:	68fb      	ldr	r3, [r7, #12]
 8104218:	22ff      	movs	r2, #255	; 0xff
 810421a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 810421c:	68fb      	ldr	r3, [r7, #12]
 810421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104220:	b2da      	uxtb	r2, r3
 8104222:	8979      	ldrh	r1, [r7, #10]
 8104224:	2300      	movs	r3, #0
 8104226:	9300      	str	r3, [sp, #0]
 8104228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810422c:	68f8      	ldr	r0, [r7, #12]
 810422e:	f000 fab7 	bl	81047a0 <I2C_TransferConfig>
 8104232:	e00f      	b.n	8104254 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104238:	b29a      	uxth	r2, r3
 810423a:	68fb      	ldr	r3, [r7, #12]
 810423c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810423e:	68fb      	ldr	r3, [r7, #12]
 8104240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104242:	b2da      	uxtb	r2, r3
 8104244:	8979      	ldrh	r1, [r7, #10]
 8104246:	2300      	movs	r3, #0
 8104248:	9300      	str	r3, [sp, #0]
 810424a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810424e:	68f8      	ldr	r0, [r7, #12]
 8104250:	f000 faa6 	bl	81047a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8104254:	68fb      	ldr	r3, [r7, #12]
 8104256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104258:	b29b      	uxth	r3, r3
 810425a:	2b00      	cmp	r3, #0
 810425c:	d19a      	bne.n	8104194 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810425e:	697a      	ldr	r2, [r7, #20]
 8104260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104262:	68f8      	ldr	r0, [r7, #12]
 8104264:	f000 f974 	bl	8104550 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104268:	4603      	mov	r3, r0
 810426a:	2b00      	cmp	r3, #0
 810426c:	d001      	beq.n	8104272 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810426e:	2301      	movs	r3, #1
 8104270:	e01a      	b.n	81042a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104272:	68fb      	ldr	r3, [r7, #12]
 8104274:	681b      	ldr	r3, [r3, #0]
 8104276:	2220      	movs	r2, #32
 8104278:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810427a:	68fb      	ldr	r3, [r7, #12]
 810427c:	681b      	ldr	r3, [r3, #0]
 810427e:	6859      	ldr	r1, [r3, #4]
 8104280:	68fb      	ldr	r3, [r7, #12]
 8104282:	681a      	ldr	r2, [r3, #0]
 8104284:	4b0b      	ldr	r3, [pc, #44]	; (81042b4 <HAL_I2C_Mem_Read+0x230>)
 8104286:	400b      	ands	r3, r1
 8104288:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810428a:	68fb      	ldr	r3, [r7, #12]
 810428c:	2220      	movs	r2, #32
 810428e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104292:	68fb      	ldr	r3, [r7, #12]
 8104294:	2200      	movs	r2, #0
 8104296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810429a:	68fb      	ldr	r3, [r7, #12]
 810429c:	2200      	movs	r2, #0
 810429e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81042a2:	2300      	movs	r3, #0
 81042a4:	e000      	b.n	81042a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81042a6:	2302      	movs	r3, #2
  }
}
 81042a8:	4618      	mov	r0, r3
 81042aa:	3718      	adds	r7, #24
 81042ac:	46bd      	mov	sp, r7
 81042ae:	bd80      	pop	{r7, pc}
 81042b0:	80002400 	.word	0x80002400
 81042b4:	fe00e800 	.word	0xfe00e800

081042b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 81042b8:	b580      	push	{r7, lr}
 81042ba:	b086      	sub	sp, #24
 81042bc:	af02      	add	r7, sp, #8
 81042be:	60f8      	str	r0, [r7, #12]
 81042c0:	4608      	mov	r0, r1
 81042c2:	4611      	mov	r1, r2
 81042c4:	461a      	mov	r2, r3
 81042c6:	4603      	mov	r3, r0
 81042c8:	817b      	strh	r3, [r7, #10]
 81042ca:	460b      	mov	r3, r1
 81042cc:	813b      	strh	r3, [r7, #8]
 81042ce:	4613      	mov	r3, r2
 81042d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81042d2:	88fb      	ldrh	r3, [r7, #6]
 81042d4:	b2da      	uxtb	r2, r3
 81042d6:	8979      	ldrh	r1, [r7, #10]
 81042d8:	4b20      	ldr	r3, [pc, #128]	; (810435c <I2C_RequestMemoryWrite+0xa4>)
 81042da:	9300      	str	r3, [sp, #0]
 81042dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81042e0:	68f8      	ldr	r0, [r7, #12]
 81042e2:	f000 fa5d 	bl	81047a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81042e6:	69fa      	ldr	r2, [r7, #28]
 81042e8:	69b9      	ldr	r1, [r7, #24]
 81042ea:	68f8      	ldr	r0, [r7, #12]
 81042ec:	f000 f8f0 	bl	81044d0 <I2C_WaitOnTXISFlagUntilTimeout>
 81042f0:	4603      	mov	r3, r0
 81042f2:	2b00      	cmp	r3, #0
 81042f4:	d001      	beq.n	81042fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81042f6:	2301      	movs	r3, #1
 81042f8:	e02c      	b.n	8104354 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81042fa:	88fb      	ldrh	r3, [r7, #6]
 81042fc:	2b01      	cmp	r3, #1
 81042fe:	d105      	bne.n	810430c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104300:	893b      	ldrh	r3, [r7, #8]
 8104302:	b2da      	uxtb	r2, r3
 8104304:	68fb      	ldr	r3, [r7, #12]
 8104306:	681b      	ldr	r3, [r3, #0]
 8104308:	629a      	str	r2, [r3, #40]	; 0x28
 810430a:	e015      	b.n	8104338 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810430c:	893b      	ldrh	r3, [r7, #8]
 810430e:	0a1b      	lsrs	r3, r3, #8
 8104310:	b29b      	uxth	r3, r3
 8104312:	b2da      	uxtb	r2, r3
 8104314:	68fb      	ldr	r3, [r7, #12]
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810431a:	69fa      	ldr	r2, [r7, #28]
 810431c:	69b9      	ldr	r1, [r7, #24]
 810431e:	68f8      	ldr	r0, [r7, #12]
 8104320:	f000 f8d6 	bl	81044d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8104324:	4603      	mov	r3, r0
 8104326:	2b00      	cmp	r3, #0
 8104328:	d001      	beq.n	810432e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810432a:	2301      	movs	r3, #1
 810432c:	e012      	b.n	8104354 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810432e:	893b      	ldrh	r3, [r7, #8]
 8104330:	b2da      	uxtb	r2, r3
 8104332:	68fb      	ldr	r3, [r7, #12]
 8104334:	681b      	ldr	r3, [r3, #0]
 8104336:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8104338:	69fb      	ldr	r3, [r7, #28]
 810433a:	9300      	str	r3, [sp, #0]
 810433c:	69bb      	ldr	r3, [r7, #24]
 810433e:	2200      	movs	r2, #0
 8104340:	2180      	movs	r1, #128	; 0x80
 8104342:	68f8      	ldr	r0, [r7, #12]
 8104344:	f000 f884 	bl	8104450 <I2C_WaitOnFlagUntilTimeout>
 8104348:	4603      	mov	r3, r0
 810434a:	2b00      	cmp	r3, #0
 810434c:	d001      	beq.n	8104352 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810434e:	2301      	movs	r3, #1
 8104350:	e000      	b.n	8104354 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8104352:	2300      	movs	r3, #0
}
 8104354:	4618      	mov	r0, r3
 8104356:	3710      	adds	r7, #16
 8104358:	46bd      	mov	sp, r7
 810435a:	bd80      	pop	{r7, pc}
 810435c:	80002000 	.word	0x80002000

08104360 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8104360:	b580      	push	{r7, lr}
 8104362:	b086      	sub	sp, #24
 8104364:	af02      	add	r7, sp, #8
 8104366:	60f8      	str	r0, [r7, #12]
 8104368:	4608      	mov	r0, r1
 810436a:	4611      	mov	r1, r2
 810436c:	461a      	mov	r2, r3
 810436e:	4603      	mov	r3, r0
 8104370:	817b      	strh	r3, [r7, #10]
 8104372:	460b      	mov	r3, r1
 8104374:	813b      	strh	r3, [r7, #8]
 8104376:	4613      	mov	r3, r2
 8104378:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810437a:	88fb      	ldrh	r3, [r7, #6]
 810437c:	b2da      	uxtb	r2, r3
 810437e:	8979      	ldrh	r1, [r7, #10]
 8104380:	4b20      	ldr	r3, [pc, #128]	; (8104404 <I2C_RequestMemoryRead+0xa4>)
 8104382:	9300      	str	r3, [sp, #0]
 8104384:	2300      	movs	r3, #0
 8104386:	68f8      	ldr	r0, [r7, #12]
 8104388:	f000 fa0a 	bl	81047a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810438c:	69fa      	ldr	r2, [r7, #28]
 810438e:	69b9      	ldr	r1, [r7, #24]
 8104390:	68f8      	ldr	r0, [r7, #12]
 8104392:	f000 f89d 	bl	81044d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8104396:	4603      	mov	r3, r0
 8104398:	2b00      	cmp	r3, #0
 810439a:	d001      	beq.n	81043a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810439c:	2301      	movs	r3, #1
 810439e:	e02c      	b.n	81043fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81043a0:	88fb      	ldrh	r3, [r7, #6]
 81043a2:	2b01      	cmp	r3, #1
 81043a4:	d105      	bne.n	81043b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81043a6:	893b      	ldrh	r3, [r7, #8]
 81043a8:	b2da      	uxtb	r2, r3
 81043aa:	68fb      	ldr	r3, [r7, #12]
 81043ac:	681b      	ldr	r3, [r3, #0]
 81043ae:	629a      	str	r2, [r3, #40]	; 0x28
 81043b0:	e015      	b.n	81043de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81043b2:	893b      	ldrh	r3, [r7, #8]
 81043b4:	0a1b      	lsrs	r3, r3, #8
 81043b6:	b29b      	uxth	r3, r3
 81043b8:	b2da      	uxtb	r2, r3
 81043ba:	68fb      	ldr	r3, [r7, #12]
 81043bc:	681b      	ldr	r3, [r3, #0]
 81043be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81043c0:	69fa      	ldr	r2, [r7, #28]
 81043c2:	69b9      	ldr	r1, [r7, #24]
 81043c4:	68f8      	ldr	r0, [r7, #12]
 81043c6:	f000 f883 	bl	81044d0 <I2C_WaitOnTXISFlagUntilTimeout>
 81043ca:	4603      	mov	r3, r0
 81043cc:	2b00      	cmp	r3, #0
 81043ce:	d001      	beq.n	81043d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81043d0:	2301      	movs	r3, #1
 81043d2:	e012      	b.n	81043fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81043d4:	893b      	ldrh	r3, [r7, #8]
 81043d6:	b2da      	uxtb	r2, r3
 81043d8:	68fb      	ldr	r3, [r7, #12]
 81043da:	681b      	ldr	r3, [r3, #0]
 81043dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81043de:	69fb      	ldr	r3, [r7, #28]
 81043e0:	9300      	str	r3, [sp, #0]
 81043e2:	69bb      	ldr	r3, [r7, #24]
 81043e4:	2200      	movs	r2, #0
 81043e6:	2140      	movs	r1, #64	; 0x40
 81043e8:	68f8      	ldr	r0, [r7, #12]
 81043ea:	f000 f831 	bl	8104450 <I2C_WaitOnFlagUntilTimeout>
 81043ee:	4603      	mov	r3, r0
 81043f0:	2b00      	cmp	r3, #0
 81043f2:	d001      	beq.n	81043f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81043f4:	2301      	movs	r3, #1
 81043f6:	e000      	b.n	81043fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81043f8:	2300      	movs	r3, #0
}
 81043fa:	4618      	mov	r0, r3
 81043fc:	3710      	adds	r7, #16
 81043fe:	46bd      	mov	sp, r7
 8104400:	bd80      	pop	{r7, pc}
 8104402:	bf00      	nop
 8104404:	80002000 	.word	0x80002000

08104408 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8104408:	b480      	push	{r7}
 810440a:	b083      	sub	sp, #12
 810440c:	af00      	add	r7, sp, #0
 810440e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	699b      	ldr	r3, [r3, #24]
 8104416:	f003 0302 	and.w	r3, r3, #2
 810441a:	2b02      	cmp	r3, #2
 810441c:	d103      	bne.n	8104426 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810441e:	687b      	ldr	r3, [r7, #4]
 8104420:	681b      	ldr	r3, [r3, #0]
 8104422:	2200      	movs	r2, #0
 8104424:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	681b      	ldr	r3, [r3, #0]
 810442a:	699b      	ldr	r3, [r3, #24]
 810442c:	f003 0301 	and.w	r3, r3, #1
 8104430:	2b01      	cmp	r3, #1
 8104432:	d007      	beq.n	8104444 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8104434:	687b      	ldr	r3, [r7, #4]
 8104436:	681b      	ldr	r3, [r3, #0]
 8104438:	699a      	ldr	r2, [r3, #24]
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	f042 0201 	orr.w	r2, r2, #1
 8104442:	619a      	str	r2, [r3, #24]
  }
}
 8104444:	bf00      	nop
 8104446:	370c      	adds	r7, #12
 8104448:	46bd      	mov	sp, r7
 810444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810444e:	4770      	bx	lr

08104450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8104450:	b580      	push	{r7, lr}
 8104452:	b084      	sub	sp, #16
 8104454:	af00      	add	r7, sp, #0
 8104456:	60f8      	str	r0, [r7, #12]
 8104458:	60b9      	str	r1, [r7, #8]
 810445a:	603b      	str	r3, [r7, #0]
 810445c:	4613      	mov	r3, r2
 810445e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104460:	e022      	b.n	81044a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104462:	683b      	ldr	r3, [r7, #0]
 8104464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104468:	d01e      	beq.n	81044a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810446a:	f7fe f85f 	bl	810252c <HAL_GetTick>
 810446e:	4602      	mov	r2, r0
 8104470:	69bb      	ldr	r3, [r7, #24]
 8104472:	1ad3      	subs	r3, r2, r3
 8104474:	683a      	ldr	r2, [r7, #0]
 8104476:	429a      	cmp	r2, r3
 8104478:	d302      	bcc.n	8104480 <I2C_WaitOnFlagUntilTimeout+0x30>
 810447a:	683b      	ldr	r3, [r7, #0]
 810447c:	2b00      	cmp	r3, #0
 810447e:	d113      	bne.n	81044a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104480:	68fb      	ldr	r3, [r7, #12]
 8104482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104484:	f043 0220 	orr.w	r2, r3, #32
 8104488:	68fb      	ldr	r3, [r7, #12]
 810448a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810448c:	68fb      	ldr	r3, [r7, #12]
 810448e:	2220      	movs	r2, #32
 8104490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104494:	68fb      	ldr	r3, [r7, #12]
 8104496:	2200      	movs	r2, #0
 8104498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810449c:	68fb      	ldr	r3, [r7, #12]
 810449e:	2200      	movs	r2, #0
 81044a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81044a4:	2301      	movs	r3, #1
 81044a6:	e00f      	b.n	81044c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81044a8:	68fb      	ldr	r3, [r7, #12]
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	699a      	ldr	r2, [r3, #24]
 81044ae:	68bb      	ldr	r3, [r7, #8]
 81044b0:	4013      	ands	r3, r2
 81044b2:	68ba      	ldr	r2, [r7, #8]
 81044b4:	429a      	cmp	r2, r3
 81044b6:	bf0c      	ite	eq
 81044b8:	2301      	moveq	r3, #1
 81044ba:	2300      	movne	r3, #0
 81044bc:	b2db      	uxtb	r3, r3
 81044be:	461a      	mov	r2, r3
 81044c0:	79fb      	ldrb	r3, [r7, #7]
 81044c2:	429a      	cmp	r2, r3
 81044c4:	d0cd      	beq.n	8104462 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81044c6:	2300      	movs	r3, #0
}
 81044c8:	4618      	mov	r0, r3
 81044ca:	3710      	adds	r7, #16
 81044cc:	46bd      	mov	sp, r7
 81044ce:	bd80      	pop	{r7, pc}

081044d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81044d0:	b580      	push	{r7, lr}
 81044d2:	b084      	sub	sp, #16
 81044d4:	af00      	add	r7, sp, #0
 81044d6:	60f8      	str	r0, [r7, #12]
 81044d8:	60b9      	str	r1, [r7, #8]
 81044da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81044dc:	e02c      	b.n	8104538 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81044de:	687a      	ldr	r2, [r7, #4]
 81044e0:	68b9      	ldr	r1, [r7, #8]
 81044e2:	68f8      	ldr	r0, [r7, #12]
 81044e4:	f000 f870 	bl	81045c8 <I2C_IsErrorOccurred>
 81044e8:	4603      	mov	r3, r0
 81044ea:	2b00      	cmp	r3, #0
 81044ec:	d001      	beq.n	81044f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81044ee:	2301      	movs	r3, #1
 81044f0:	e02a      	b.n	8104548 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81044f2:	68bb      	ldr	r3, [r7, #8]
 81044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81044f8:	d01e      	beq.n	8104538 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81044fa:	f7fe f817 	bl	810252c <HAL_GetTick>
 81044fe:	4602      	mov	r2, r0
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	1ad3      	subs	r3, r2, r3
 8104504:	68ba      	ldr	r2, [r7, #8]
 8104506:	429a      	cmp	r2, r3
 8104508:	d302      	bcc.n	8104510 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810450a:	68bb      	ldr	r3, [r7, #8]
 810450c:	2b00      	cmp	r3, #0
 810450e:	d113      	bne.n	8104538 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104510:	68fb      	ldr	r3, [r7, #12]
 8104512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104514:	f043 0220 	orr.w	r2, r3, #32
 8104518:	68fb      	ldr	r3, [r7, #12]
 810451a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810451c:	68fb      	ldr	r3, [r7, #12]
 810451e:	2220      	movs	r2, #32
 8104520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104524:	68fb      	ldr	r3, [r7, #12]
 8104526:	2200      	movs	r2, #0
 8104528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810452c:	68fb      	ldr	r3, [r7, #12]
 810452e:	2200      	movs	r2, #0
 8104530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8104534:	2301      	movs	r3, #1
 8104536:	e007      	b.n	8104548 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104538:	68fb      	ldr	r3, [r7, #12]
 810453a:	681b      	ldr	r3, [r3, #0]
 810453c:	699b      	ldr	r3, [r3, #24]
 810453e:	f003 0302 	and.w	r3, r3, #2
 8104542:	2b02      	cmp	r3, #2
 8104544:	d1cb      	bne.n	81044de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8104546:	2300      	movs	r3, #0
}
 8104548:	4618      	mov	r0, r3
 810454a:	3710      	adds	r7, #16
 810454c:	46bd      	mov	sp, r7
 810454e:	bd80      	pop	{r7, pc}

08104550 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8104550:	b580      	push	{r7, lr}
 8104552:	b084      	sub	sp, #16
 8104554:	af00      	add	r7, sp, #0
 8104556:	60f8      	str	r0, [r7, #12]
 8104558:	60b9      	str	r1, [r7, #8]
 810455a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810455c:	e028      	b.n	81045b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810455e:	687a      	ldr	r2, [r7, #4]
 8104560:	68b9      	ldr	r1, [r7, #8]
 8104562:	68f8      	ldr	r0, [r7, #12]
 8104564:	f000 f830 	bl	81045c8 <I2C_IsErrorOccurred>
 8104568:	4603      	mov	r3, r0
 810456a:	2b00      	cmp	r3, #0
 810456c:	d001      	beq.n	8104572 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810456e:	2301      	movs	r3, #1
 8104570:	e026      	b.n	81045c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104572:	f7fd ffdb 	bl	810252c <HAL_GetTick>
 8104576:	4602      	mov	r2, r0
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	1ad3      	subs	r3, r2, r3
 810457c:	68ba      	ldr	r2, [r7, #8]
 810457e:	429a      	cmp	r2, r3
 8104580:	d302      	bcc.n	8104588 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8104582:	68bb      	ldr	r3, [r7, #8]
 8104584:	2b00      	cmp	r3, #0
 8104586:	d113      	bne.n	81045b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104588:	68fb      	ldr	r3, [r7, #12]
 810458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810458c:	f043 0220 	orr.w	r2, r3, #32
 8104590:	68fb      	ldr	r3, [r7, #12]
 8104592:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8104594:	68fb      	ldr	r3, [r7, #12]
 8104596:	2220      	movs	r2, #32
 8104598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 810459c:	68fb      	ldr	r3, [r7, #12]
 810459e:	2200      	movs	r2, #0
 81045a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81045a4:	68fb      	ldr	r3, [r7, #12]
 81045a6:	2200      	movs	r2, #0
 81045a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81045ac:	2301      	movs	r3, #1
 81045ae:	e007      	b.n	81045c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81045b0:	68fb      	ldr	r3, [r7, #12]
 81045b2:	681b      	ldr	r3, [r3, #0]
 81045b4:	699b      	ldr	r3, [r3, #24]
 81045b6:	f003 0320 	and.w	r3, r3, #32
 81045ba:	2b20      	cmp	r3, #32
 81045bc:	d1cf      	bne.n	810455e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81045be:	2300      	movs	r3, #0
}
 81045c0:	4618      	mov	r0, r3
 81045c2:	3710      	adds	r7, #16
 81045c4:	46bd      	mov	sp, r7
 81045c6:	bd80      	pop	{r7, pc}

081045c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81045c8:	b580      	push	{r7, lr}
 81045ca:	b08a      	sub	sp, #40	; 0x28
 81045cc:	af00      	add	r7, sp, #0
 81045ce:	60f8      	str	r0, [r7, #12]
 81045d0:	60b9      	str	r1, [r7, #8]
 81045d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81045d4:	2300      	movs	r3, #0
 81045d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81045da:	68fb      	ldr	r3, [r7, #12]
 81045dc:	681b      	ldr	r3, [r3, #0]
 81045de:	699b      	ldr	r3, [r3, #24]
 81045e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81045e2:	2300      	movs	r3, #0
 81045e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81045e6:	687b      	ldr	r3, [r7, #4]
 81045e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81045ea:	69bb      	ldr	r3, [r7, #24]
 81045ec:	f003 0310 	and.w	r3, r3, #16
 81045f0:	2b00      	cmp	r3, #0
 81045f2:	d075      	beq.n	81046e0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81045f4:	68fb      	ldr	r3, [r7, #12]
 81045f6:	681b      	ldr	r3, [r3, #0]
 81045f8:	2210      	movs	r2, #16
 81045fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81045fc:	e056      	b.n	81046ac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81045fe:	68bb      	ldr	r3, [r7, #8]
 8104600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104604:	d052      	beq.n	81046ac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8104606:	f7fd ff91 	bl	810252c <HAL_GetTick>
 810460a:	4602      	mov	r2, r0
 810460c:	69fb      	ldr	r3, [r7, #28]
 810460e:	1ad3      	subs	r3, r2, r3
 8104610:	68ba      	ldr	r2, [r7, #8]
 8104612:	429a      	cmp	r2, r3
 8104614:	d302      	bcc.n	810461c <I2C_IsErrorOccurred+0x54>
 8104616:	68bb      	ldr	r3, [r7, #8]
 8104618:	2b00      	cmp	r3, #0
 810461a:	d147      	bne.n	81046ac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810461c:	68fb      	ldr	r3, [r7, #12]
 810461e:	681b      	ldr	r3, [r3, #0]
 8104620:	685b      	ldr	r3, [r3, #4]
 8104622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8104626:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8104628:	68fb      	ldr	r3, [r7, #12]
 810462a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810462e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8104630:	68fb      	ldr	r3, [r7, #12]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	699b      	ldr	r3, [r3, #24]
 8104636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810463a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810463e:	d12e      	bne.n	810469e <I2C_IsErrorOccurred+0xd6>
 8104640:	697b      	ldr	r3, [r7, #20]
 8104642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104646:	d02a      	beq.n	810469e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8104648:	7cfb      	ldrb	r3, [r7, #19]
 810464a:	2b20      	cmp	r3, #32
 810464c:	d027      	beq.n	810469e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810464e:	68fb      	ldr	r3, [r7, #12]
 8104650:	681b      	ldr	r3, [r3, #0]
 8104652:	685a      	ldr	r2, [r3, #4]
 8104654:	68fb      	ldr	r3, [r7, #12]
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810465c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810465e:	f7fd ff65 	bl	810252c <HAL_GetTick>
 8104662:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104664:	e01b      	b.n	810469e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8104666:	f7fd ff61 	bl	810252c <HAL_GetTick>
 810466a:	4602      	mov	r2, r0
 810466c:	69fb      	ldr	r3, [r7, #28]
 810466e:	1ad3      	subs	r3, r2, r3
 8104670:	2b19      	cmp	r3, #25
 8104672:	d914      	bls.n	810469e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104674:	68fb      	ldr	r3, [r7, #12]
 8104676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104678:	f043 0220 	orr.w	r2, r3, #32
 810467c:	68fb      	ldr	r3, [r7, #12]
 810467e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8104680:	68fb      	ldr	r3, [r7, #12]
 8104682:	2220      	movs	r2, #32
 8104684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8104688:	68fb      	ldr	r3, [r7, #12]
 810468a:	2200      	movs	r2, #0
 810468c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8104690:	68fb      	ldr	r3, [r7, #12]
 8104692:	2200      	movs	r2, #0
 8104694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8104698:	2301      	movs	r3, #1
 810469a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810469e:	68fb      	ldr	r3, [r7, #12]
 81046a0:	681b      	ldr	r3, [r3, #0]
 81046a2:	699b      	ldr	r3, [r3, #24]
 81046a4:	f003 0320 	and.w	r3, r3, #32
 81046a8:	2b20      	cmp	r3, #32
 81046aa:	d1dc      	bne.n	8104666 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81046ac:	68fb      	ldr	r3, [r7, #12]
 81046ae:	681b      	ldr	r3, [r3, #0]
 81046b0:	699b      	ldr	r3, [r3, #24]
 81046b2:	f003 0320 	and.w	r3, r3, #32
 81046b6:	2b20      	cmp	r3, #32
 81046b8:	d003      	beq.n	81046c2 <I2C_IsErrorOccurred+0xfa>
 81046ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81046be:	2b00      	cmp	r3, #0
 81046c0:	d09d      	beq.n	81045fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81046c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81046c6:	2b00      	cmp	r3, #0
 81046c8:	d103      	bne.n	81046d2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81046ca:	68fb      	ldr	r3, [r7, #12]
 81046cc:	681b      	ldr	r3, [r3, #0]
 81046ce:	2220      	movs	r2, #32
 81046d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81046d2:	6a3b      	ldr	r3, [r7, #32]
 81046d4:	f043 0304 	orr.w	r3, r3, #4
 81046d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81046da:	2301      	movs	r3, #1
 81046dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81046e0:	68fb      	ldr	r3, [r7, #12]
 81046e2:	681b      	ldr	r3, [r3, #0]
 81046e4:	699b      	ldr	r3, [r3, #24]
 81046e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81046e8:	69bb      	ldr	r3, [r7, #24]
 81046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81046ee:	2b00      	cmp	r3, #0
 81046f0:	d00b      	beq.n	810470a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81046f2:	6a3b      	ldr	r3, [r7, #32]
 81046f4:	f043 0301 	orr.w	r3, r3, #1
 81046f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81046fa:	68fb      	ldr	r3, [r7, #12]
 81046fc:	681b      	ldr	r3, [r3, #0]
 81046fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8104702:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104704:	2301      	movs	r3, #1
 8104706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810470a:	69bb      	ldr	r3, [r7, #24]
 810470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104710:	2b00      	cmp	r3, #0
 8104712:	d00b      	beq.n	810472c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8104714:	6a3b      	ldr	r3, [r7, #32]
 8104716:	f043 0308 	orr.w	r3, r3, #8
 810471a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810471c:	68fb      	ldr	r3, [r7, #12]
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8104724:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104726:	2301      	movs	r3, #1
 8104728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810472c:	69bb      	ldr	r3, [r7, #24]
 810472e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104732:	2b00      	cmp	r3, #0
 8104734:	d00b      	beq.n	810474e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8104736:	6a3b      	ldr	r3, [r7, #32]
 8104738:	f043 0302 	orr.w	r3, r3, #2
 810473c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810473e:	68fb      	ldr	r3, [r7, #12]
 8104740:	681b      	ldr	r3, [r3, #0]
 8104742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104746:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104748:	2301      	movs	r3, #1
 810474a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 810474e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8104752:	2b00      	cmp	r3, #0
 8104754:	d01c      	beq.n	8104790 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8104756:	68f8      	ldr	r0, [r7, #12]
 8104758:	f7ff fe56 	bl	8104408 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	681b      	ldr	r3, [r3, #0]
 8104760:	6859      	ldr	r1, [r3, #4]
 8104762:	68fb      	ldr	r3, [r7, #12]
 8104764:	681a      	ldr	r2, [r3, #0]
 8104766:	4b0d      	ldr	r3, [pc, #52]	; (810479c <I2C_IsErrorOccurred+0x1d4>)
 8104768:	400b      	ands	r3, r1
 810476a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810476c:	68fb      	ldr	r3, [r7, #12]
 810476e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8104770:	6a3b      	ldr	r3, [r7, #32]
 8104772:	431a      	orrs	r2, r3
 8104774:	68fb      	ldr	r3, [r7, #12]
 8104776:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8104778:	68fb      	ldr	r3, [r7, #12]
 810477a:	2220      	movs	r2, #32
 810477c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8104780:	68fb      	ldr	r3, [r7, #12]
 8104782:	2200      	movs	r2, #0
 8104784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104788:	68fb      	ldr	r3, [r7, #12]
 810478a:	2200      	movs	r2, #0
 810478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8104790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8104794:	4618      	mov	r0, r3
 8104796:	3728      	adds	r7, #40	; 0x28
 8104798:	46bd      	mov	sp, r7
 810479a:	bd80      	pop	{r7, pc}
 810479c:	fe00e800 	.word	0xfe00e800

081047a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81047a0:	b480      	push	{r7}
 81047a2:	b087      	sub	sp, #28
 81047a4:	af00      	add	r7, sp, #0
 81047a6:	60f8      	str	r0, [r7, #12]
 81047a8:	607b      	str	r3, [r7, #4]
 81047aa:	460b      	mov	r3, r1
 81047ac:	817b      	strh	r3, [r7, #10]
 81047ae:	4613      	mov	r3, r2
 81047b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81047b2:	897b      	ldrh	r3, [r7, #10]
 81047b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81047b8:	7a7b      	ldrb	r3, [r7, #9]
 81047ba:	041b      	lsls	r3, r3, #16
 81047bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81047c0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81047c6:	6a3b      	ldr	r3, [r7, #32]
 81047c8:	4313      	orrs	r3, r2
 81047ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81047ce:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81047d0:	68fb      	ldr	r3, [r7, #12]
 81047d2:	681b      	ldr	r3, [r3, #0]
 81047d4:	685a      	ldr	r2, [r3, #4]
 81047d6:	6a3b      	ldr	r3, [r7, #32]
 81047d8:	0d5b      	lsrs	r3, r3, #21
 81047da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81047de:	4b08      	ldr	r3, [pc, #32]	; (8104800 <I2C_TransferConfig+0x60>)
 81047e0:	430b      	orrs	r3, r1
 81047e2:	43db      	mvns	r3, r3
 81047e4:	ea02 0103 	and.w	r1, r2, r3
 81047e8:	68fb      	ldr	r3, [r7, #12]
 81047ea:	681b      	ldr	r3, [r3, #0]
 81047ec:	697a      	ldr	r2, [r7, #20]
 81047ee:	430a      	orrs	r2, r1
 81047f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81047f2:	bf00      	nop
 81047f4:	371c      	adds	r7, #28
 81047f6:	46bd      	mov	sp, r7
 81047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047fc:	4770      	bx	lr
 81047fe:	bf00      	nop
 8104800:	03ff63ff 	.word	0x03ff63ff

08104804 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8104804:	b480      	push	{r7}
 8104806:	b083      	sub	sp, #12
 8104808:	af00      	add	r7, sp, #0
 810480a:	6078      	str	r0, [r7, #4]
 810480c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104814:	b2db      	uxtb	r3, r3
 8104816:	2b20      	cmp	r3, #32
 8104818:	d138      	bne.n	810488c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104820:	2b01      	cmp	r3, #1
 8104822:	d101      	bne.n	8104828 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8104824:	2302      	movs	r3, #2
 8104826:	e032      	b.n	810488e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8104828:	687b      	ldr	r3, [r7, #4]
 810482a:	2201      	movs	r2, #1
 810482c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104830:	687b      	ldr	r3, [r7, #4]
 8104832:	2224      	movs	r2, #36	; 0x24
 8104834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	681b      	ldr	r3, [r3, #0]
 810483c:	681a      	ldr	r2, [r3, #0]
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	681b      	ldr	r3, [r3, #0]
 8104842:	f022 0201 	bic.w	r2, r2, #1
 8104846:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8104848:	687b      	ldr	r3, [r7, #4]
 810484a:	681b      	ldr	r3, [r3, #0]
 810484c:	681a      	ldr	r2, [r3, #0]
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	681b      	ldr	r3, [r3, #0]
 8104852:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8104856:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	6819      	ldr	r1, [r3, #0]
 810485e:	687b      	ldr	r3, [r7, #4]
 8104860:	681b      	ldr	r3, [r3, #0]
 8104862:	683a      	ldr	r2, [r7, #0]
 8104864:	430a      	orrs	r2, r1
 8104866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	681b      	ldr	r3, [r3, #0]
 810486c:	681a      	ldr	r2, [r3, #0]
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	681b      	ldr	r3, [r3, #0]
 8104872:	f042 0201 	orr.w	r2, r2, #1
 8104876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	2220      	movs	r2, #32
 810487c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104880:	687b      	ldr	r3, [r7, #4]
 8104882:	2200      	movs	r2, #0
 8104884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104888:	2300      	movs	r3, #0
 810488a:	e000      	b.n	810488e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810488c:	2302      	movs	r3, #2
  }
}
 810488e:	4618      	mov	r0, r3
 8104890:	370c      	adds	r7, #12
 8104892:	46bd      	mov	sp, r7
 8104894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104898:	4770      	bx	lr

0810489a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810489a:	b480      	push	{r7}
 810489c:	b085      	sub	sp, #20
 810489e:	af00      	add	r7, sp, #0
 81048a0:	6078      	str	r0, [r7, #4]
 81048a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81048aa:	b2db      	uxtb	r3, r3
 81048ac:	2b20      	cmp	r3, #32
 81048ae:	d139      	bne.n	8104924 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81048b0:	687b      	ldr	r3, [r7, #4]
 81048b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81048b6:	2b01      	cmp	r3, #1
 81048b8:	d101      	bne.n	81048be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81048ba:	2302      	movs	r3, #2
 81048bc:	e033      	b.n	8104926 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	2201      	movs	r2, #1
 81048c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81048c6:	687b      	ldr	r3, [r7, #4]
 81048c8:	2224      	movs	r2, #36	; 0x24
 81048ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81048ce:	687b      	ldr	r3, [r7, #4]
 81048d0:	681b      	ldr	r3, [r3, #0]
 81048d2:	681a      	ldr	r2, [r3, #0]
 81048d4:	687b      	ldr	r3, [r7, #4]
 81048d6:	681b      	ldr	r3, [r3, #0]
 81048d8:	f022 0201 	bic.w	r2, r2, #1
 81048dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81048de:	687b      	ldr	r3, [r7, #4]
 81048e0:	681b      	ldr	r3, [r3, #0]
 81048e2:	681b      	ldr	r3, [r3, #0]
 81048e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81048e6:	68fb      	ldr	r3, [r7, #12]
 81048e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81048ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81048ee:	683b      	ldr	r3, [r7, #0]
 81048f0:	021b      	lsls	r3, r3, #8
 81048f2:	68fa      	ldr	r2, [r7, #12]
 81048f4:	4313      	orrs	r3, r2
 81048f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	681b      	ldr	r3, [r3, #0]
 81048fc:	68fa      	ldr	r2, [r7, #12]
 81048fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104900:	687b      	ldr	r3, [r7, #4]
 8104902:	681b      	ldr	r3, [r3, #0]
 8104904:	681a      	ldr	r2, [r3, #0]
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	f042 0201 	orr.w	r2, r2, #1
 810490e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104910:	687b      	ldr	r3, [r7, #4]
 8104912:	2220      	movs	r2, #32
 8104914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104918:	687b      	ldr	r3, [r7, #4]
 810491a:	2200      	movs	r2, #0
 810491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104920:	2300      	movs	r3, #0
 8104922:	e000      	b.n	8104926 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8104924:	2302      	movs	r3, #2
  }
}
 8104926:	4618      	mov	r0, r3
 8104928:	3714      	adds	r7, #20
 810492a:	46bd      	mov	sp, r7
 810492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104930:	4770      	bx	lr
	...

08104934 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104934:	b580      	push	{r7, lr}
 8104936:	b084      	sub	sp, #16
 8104938:	af00      	add	r7, sp, #0
 810493a:	60f8      	str	r0, [r7, #12]
 810493c:	460b      	mov	r3, r1
 810493e:	607a      	str	r2, [r7, #4]
 8104940:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104942:	4b37      	ldr	r3, [pc, #220]	; (8104a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104944:	681b      	ldr	r3, [r3, #0]
 8104946:	f023 0201 	bic.w	r2, r3, #1
 810494a:	4935      	ldr	r1, [pc, #212]	; (8104a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 810494c:	68fb      	ldr	r3, [r7, #12]
 810494e:	4313      	orrs	r3, r2
 8104950:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104952:	687b      	ldr	r3, [r7, #4]
 8104954:	2b00      	cmp	r3, #0
 8104956:	d123      	bne.n	81049a0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104958:	f7fe ffc4 	bl	81038e4 <HAL_GetCurrentCPUID>
 810495c:	4603      	mov	r3, r0
 810495e:	2b03      	cmp	r3, #3
 8104960:	d158      	bne.n	8104a14 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104962:	4b2f      	ldr	r3, [pc, #188]	; (8104a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104964:	691b      	ldr	r3, [r3, #16]
 8104966:	4a2e      	ldr	r2, [pc, #184]	; (8104a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104968:	f023 0301 	bic.w	r3, r3, #1
 810496c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810496e:	4b2d      	ldr	r3, [pc, #180]	; (8104a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104970:	691b      	ldr	r3, [r3, #16]
 8104972:	4a2c      	ldr	r2, [pc, #176]	; (8104a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104974:	f043 0304 	orr.w	r3, r3, #4
 8104978:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810497a:	f3bf 8f4f 	dsb	sy
}
 810497e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104980:	f3bf 8f6f 	isb	sy
}
 8104984:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104986:	7afb      	ldrb	r3, [r7, #11]
 8104988:	2b01      	cmp	r3, #1
 810498a:	d101      	bne.n	8104990 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810498c:	bf30      	wfi
 810498e:	e000      	b.n	8104992 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104990:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104992:	4b24      	ldr	r3, [pc, #144]	; (8104a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104994:	691b      	ldr	r3, [r3, #16]
 8104996:	4a23      	ldr	r2, [pc, #140]	; (8104a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104998:	f023 0304 	bic.w	r3, r3, #4
 810499c:	6113      	str	r3, [r2, #16]
 810499e:	e03c      	b.n	8104a1a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81049a0:	687b      	ldr	r3, [r7, #4]
 81049a2:	2b01      	cmp	r3, #1
 81049a4:	d123      	bne.n	81049ee <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81049a6:	f7fe ff9d 	bl	81038e4 <HAL_GetCurrentCPUID>
 81049aa:	4603      	mov	r3, r0
 81049ac:	2b01      	cmp	r3, #1
 81049ae:	d133      	bne.n	8104a18 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81049b0:	4b1b      	ldr	r3, [pc, #108]	; (8104a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 81049b2:	695b      	ldr	r3, [r3, #20]
 81049b4:	4a1a      	ldr	r2, [pc, #104]	; (8104a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 81049b6:	f023 0302 	bic.w	r3, r3, #2
 81049ba:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81049bc:	4b19      	ldr	r3, [pc, #100]	; (8104a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81049be:	691b      	ldr	r3, [r3, #16]
 81049c0:	4a18      	ldr	r2, [pc, #96]	; (8104a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81049c2:	f043 0304 	orr.w	r3, r3, #4
 81049c6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81049c8:	f3bf 8f4f 	dsb	sy
}
 81049cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81049ce:	f3bf 8f6f 	isb	sy
}
 81049d2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81049d4:	7afb      	ldrb	r3, [r7, #11]
 81049d6:	2b01      	cmp	r3, #1
 81049d8:	d101      	bne.n	81049de <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81049da:	bf30      	wfi
 81049dc:	e000      	b.n	81049e0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81049de:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81049e0:	4b10      	ldr	r3, [pc, #64]	; (8104a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81049e2:	691b      	ldr	r3, [r3, #16]
 81049e4:	4a0f      	ldr	r2, [pc, #60]	; (8104a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81049e6:	f023 0304 	bic.w	r3, r3, #4
 81049ea:	6113      	str	r3, [r2, #16]
 81049ec:	e015      	b.n	8104a1a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81049ee:	f7fe ff79 	bl	81038e4 <HAL_GetCurrentCPUID>
 81049f2:	4603      	mov	r3, r0
 81049f4:	2b03      	cmp	r3, #3
 81049f6:	d106      	bne.n	8104a06 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81049f8:	4b09      	ldr	r3, [pc, #36]	; (8104a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 81049fa:	691b      	ldr	r3, [r3, #16]
 81049fc:	4a08      	ldr	r2, [pc, #32]	; (8104a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 81049fe:	f023 0304 	bic.w	r3, r3, #4
 8104a02:	6113      	str	r3, [r2, #16]
 8104a04:	e009      	b.n	8104a1a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104a06:	4b06      	ldr	r3, [pc, #24]	; (8104a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104a08:	695b      	ldr	r3, [r3, #20]
 8104a0a:	4a05      	ldr	r2, [pc, #20]	; (8104a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104a0c:	f023 0304 	bic.w	r3, r3, #4
 8104a10:	6153      	str	r3, [r2, #20]
 8104a12:	e002      	b.n	8104a1a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104a14:	bf00      	nop
 8104a16:	e000      	b.n	8104a1a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104a18:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104a1a:	3710      	adds	r7, #16
 8104a1c:	46bd      	mov	sp, r7
 8104a1e:	bd80      	pop	{r7, pc}
 8104a20:	58024800 	.word	0x58024800
 8104a24:	e000ed00 	.word	0xe000ed00

08104a28 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104a28:	b580      	push	{r7, lr}
 8104a2a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104a2c:	f7fe ff5a 	bl	81038e4 <HAL_GetCurrentCPUID>
 8104a30:	4603      	mov	r3, r0
 8104a32:	2b03      	cmp	r3, #3
 8104a34:	d101      	bne.n	8104a3a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104a36:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104a38:	e001      	b.n	8104a3e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104a3a:	bf40      	sev
    __WFE ();
 8104a3c:	bf20      	wfe
}
 8104a3e:	bf00      	nop
 8104a40:	bd80      	pop	{r7, pc}
	...

08104a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104a44:	b480      	push	{r7}
 8104a46:	b089      	sub	sp, #36	; 0x24
 8104a48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104a4a:	4bb3      	ldr	r3, [pc, #716]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a4c:	691b      	ldr	r3, [r3, #16]
 8104a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104a52:	2b18      	cmp	r3, #24
 8104a54:	f200 8155 	bhi.w	8104d02 <HAL_RCC_GetSysClockFreq+0x2be>
 8104a58:	a201      	add	r2, pc, #4	; (adr r2, 8104a60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8104a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104a5e:	bf00      	nop
 8104a60:	08104ac5 	.word	0x08104ac5
 8104a64:	08104d03 	.word	0x08104d03
 8104a68:	08104d03 	.word	0x08104d03
 8104a6c:	08104d03 	.word	0x08104d03
 8104a70:	08104d03 	.word	0x08104d03
 8104a74:	08104d03 	.word	0x08104d03
 8104a78:	08104d03 	.word	0x08104d03
 8104a7c:	08104d03 	.word	0x08104d03
 8104a80:	08104aeb 	.word	0x08104aeb
 8104a84:	08104d03 	.word	0x08104d03
 8104a88:	08104d03 	.word	0x08104d03
 8104a8c:	08104d03 	.word	0x08104d03
 8104a90:	08104d03 	.word	0x08104d03
 8104a94:	08104d03 	.word	0x08104d03
 8104a98:	08104d03 	.word	0x08104d03
 8104a9c:	08104d03 	.word	0x08104d03
 8104aa0:	08104af1 	.word	0x08104af1
 8104aa4:	08104d03 	.word	0x08104d03
 8104aa8:	08104d03 	.word	0x08104d03
 8104aac:	08104d03 	.word	0x08104d03
 8104ab0:	08104d03 	.word	0x08104d03
 8104ab4:	08104d03 	.word	0x08104d03
 8104ab8:	08104d03 	.word	0x08104d03
 8104abc:	08104d03 	.word	0x08104d03
 8104ac0:	08104af7 	.word	0x08104af7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104ac4:	4b94      	ldr	r3, [pc, #592]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104ac6:	681b      	ldr	r3, [r3, #0]
 8104ac8:	f003 0320 	and.w	r3, r3, #32
 8104acc:	2b00      	cmp	r3, #0
 8104ace:	d009      	beq.n	8104ae4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104ad0:	4b91      	ldr	r3, [pc, #580]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104ad2:	681b      	ldr	r3, [r3, #0]
 8104ad4:	08db      	lsrs	r3, r3, #3
 8104ad6:	f003 0303 	and.w	r3, r3, #3
 8104ada:	4a90      	ldr	r2, [pc, #576]	; (8104d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104adc:	fa22 f303 	lsr.w	r3, r2, r3
 8104ae0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8104ae2:	e111      	b.n	8104d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104ae4:	4b8d      	ldr	r3, [pc, #564]	; (8104d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104ae6:	61bb      	str	r3, [r7, #24]
    break;
 8104ae8:	e10e      	b.n	8104d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8104aea:	4b8d      	ldr	r3, [pc, #564]	; (8104d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104aec:	61bb      	str	r3, [r7, #24]
    break;
 8104aee:	e10b      	b.n	8104d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8104af0:	4b8c      	ldr	r3, [pc, #560]	; (8104d24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8104af2:	61bb      	str	r3, [r7, #24]
    break;
 8104af4:	e108      	b.n	8104d08 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104af6:	4b88      	ldr	r3, [pc, #544]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104afa:	f003 0303 	and.w	r3, r3, #3
 8104afe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104b00:	4b85      	ldr	r3, [pc, #532]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b04:	091b      	lsrs	r3, r3, #4
 8104b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104b0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104b0c:	4b82      	ldr	r3, [pc, #520]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b10:	f003 0301 	and.w	r3, r3, #1
 8104b14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104b16:	4b80      	ldr	r3, [pc, #512]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104b1a:	08db      	lsrs	r3, r3, #3
 8104b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104b20:	68fa      	ldr	r2, [r7, #12]
 8104b22:	fb02 f303 	mul.w	r3, r2, r3
 8104b26:	ee07 3a90 	vmov	s15, r3
 8104b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8104b32:	693b      	ldr	r3, [r7, #16]
 8104b34:	2b00      	cmp	r3, #0
 8104b36:	f000 80e1 	beq.w	8104cfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8104b3a:	697b      	ldr	r3, [r7, #20]
 8104b3c:	2b02      	cmp	r3, #2
 8104b3e:	f000 8083 	beq.w	8104c48 <HAL_RCC_GetSysClockFreq+0x204>
 8104b42:	697b      	ldr	r3, [r7, #20]
 8104b44:	2b02      	cmp	r3, #2
 8104b46:	f200 80a1 	bhi.w	8104c8c <HAL_RCC_GetSysClockFreq+0x248>
 8104b4a:	697b      	ldr	r3, [r7, #20]
 8104b4c:	2b00      	cmp	r3, #0
 8104b4e:	d003      	beq.n	8104b58 <HAL_RCC_GetSysClockFreq+0x114>
 8104b50:	697b      	ldr	r3, [r7, #20]
 8104b52:	2b01      	cmp	r3, #1
 8104b54:	d056      	beq.n	8104c04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8104b56:	e099      	b.n	8104c8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104b58:	4b6f      	ldr	r3, [pc, #444]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b5a:	681b      	ldr	r3, [r3, #0]
 8104b5c:	f003 0320 	and.w	r3, r3, #32
 8104b60:	2b00      	cmp	r3, #0
 8104b62:	d02d      	beq.n	8104bc0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104b64:	4b6c      	ldr	r3, [pc, #432]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b66:	681b      	ldr	r3, [r3, #0]
 8104b68:	08db      	lsrs	r3, r3, #3
 8104b6a:	f003 0303 	and.w	r3, r3, #3
 8104b6e:	4a6b      	ldr	r2, [pc, #428]	; (8104d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104b70:	fa22 f303 	lsr.w	r3, r2, r3
 8104b74:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	ee07 3a90 	vmov	s15, r3
 8104b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b80:	693b      	ldr	r3, [r7, #16]
 8104b82:	ee07 3a90 	vmov	s15, r3
 8104b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b8e:	4b62      	ldr	r3, [pc, #392]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b96:	ee07 3a90 	vmov	s15, r3
 8104b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104ba2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8104bbe:	e087      	b.n	8104cd0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104bc0:	693b      	ldr	r3, [r7, #16]
 8104bc2:	ee07 3a90 	vmov	s15, r3
 8104bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104d2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8104bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104bd2:	4b51      	ldr	r3, [pc, #324]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104bda:	ee07 3a90 	vmov	s15, r3
 8104bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8104be6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104c02:	e065      	b.n	8104cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104c04:	693b      	ldr	r3, [r7, #16]
 8104c06:	ee07 3a90 	vmov	s15, r3
 8104c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8104d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c16:	4b40      	ldr	r3, [pc, #256]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c1e:	ee07 3a90 	vmov	s15, r3
 8104c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8104c2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104c46:	e043      	b.n	8104cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104c48:	693b      	ldr	r3, [r7, #16]
 8104c4a:	ee07 3a90 	vmov	s15, r3
 8104c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8104d34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c5a:	4b2f      	ldr	r3, [pc, #188]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c62:	ee07 3a90 	vmov	s15, r3
 8104c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8104c6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104c8a:	e021      	b.n	8104cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104c8c:	693b      	ldr	r3, [r7, #16]
 8104c8e:	ee07 3a90 	vmov	s15, r3
 8104c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8104d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c9e:	4b1e      	ldr	r3, [pc, #120]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ca6:	ee07 3a90 	vmov	s15, r3
 8104caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8104cb2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104cce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8104cd0:	4b11      	ldr	r3, [pc, #68]	; (8104d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104cd4:	0a5b      	lsrs	r3, r3, #9
 8104cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104cda:	3301      	adds	r3, #1
 8104cdc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8104cde:	683b      	ldr	r3, [r7, #0]
 8104ce0:	ee07 3a90 	vmov	s15, r3
 8104ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8104cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104cf4:	ee17 3a90 	vmov	r3, s15
 8104cf8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8104cfa:	e005      	b.n	8104d08 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8104cfc:	2300      	movs	r3, #0
 8104cfe:	61bb      	str	r3, [r7, #24]
    break;
 8104d00:	e002      	b.n	8104d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8104d02:	4b07      	ldr	r3, [pc, #28]	; (8104d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104d04:	61bb      	str	r3, [r7, #24]
    break;
 8104d06:	bf00      	nop
  }

  return sysclockfreq;
 8104d08:	69bb      	ldr	r3, [r7, #24]
}
 8104d0a:	4618      	mov	r0, r3
 8104d0c:	3724      	adds	r7, #36	; 0x24
 8104d0e:	46bd      	mov	sp, r7
 8104d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d14:	4770      	bx	lr
 8104d16:	bf00      	nop
 8104d18:	58024400 	.word	0x58024400
 8104d1c:	03d09000 	.word	0x03d09000
 8104d20:	003d0900 	.word	0x003d0900
 8104d24:	007a1200 	.word	0x007a1200
 8104d28:	46000000 	.word	0x46000000
 8104d2c:	4c742400 	.word	0x4c742400
 8104d30:	4a742400 	.word	0x4a742400
 8104d34:	4af42400 	.word	0x4af42400

08104d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104d38:	b580      	push	{r7, lr}
 8104d3a:	b082      	sub	sp, #8
 8104d3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104d3e:	f7ff fe81 	bl	8104a44 <HAL_RCC_GetSysClockFreq>
 8104d42:	4602      	mov	r2, r0
 8104d44:	4b11      	ldr	r3, [pc, #68]	; (8104d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8104d46:	699b      	ldr	r3, [r3, #24]
 8104d48:	0a1b      	lsrs	r3, r3, #8
 8104d4a:	f003 030f 	and.w	r3, r3, #15
 8104d4e:	4910      	ldr	r1, [pc, #64]	; (8104d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8104d50:	5ccb      	ldrb	r3, [r1, r3]
 8104d52:	f003 031f 	and.w	r3, r3, #31
 8104d56:	fa22 f303 	lsr.w	r3, r2, r3
 8104d5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104d5c:	4b0b      	ldr	r3, [pc, #44]	; (8104d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8104d5e:	699b      	ldr	r3, [r3, #24]
 8104d60:	f003 030f 	and.w	r3, r3, #15
 8104d64:	4a0a      	ldr	r2, [pc, #40]	; (8104d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8104d66:	5cd3      	ldrb	r3, [r2, r3]
 8104d68:	f003 031f 	and.w	r3, r3, #31
 8104d6c:	687a      	ldr	r2, [r7, #4]
 8104d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8104d72:	4a08      	ldr	r2, [pc, #32]	; (8104d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104d74:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104d76:	4b07      	ldr	r3, [pc, #28]	; (8104d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104d78:	681b      	ldr	r3, [r3, #0]
 8104d7a:	4a07      	ldr	r2, [pc, #28]	; (8104d98 <HAL_RCC_GetHCLKFreq+0x60>)
 8104d7c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104d7e:	4b05      	ldr	r3, [pc, #20]	; (8104d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104d80:	681b      	ldr	r3, [r3, #0]
}
 8104d82:	4618      	mov	r0, r3
 8104d84:	3708      	adds	r7, #8
 8104d86:	46bd      	mov	sp, r7
 8104d88:	bd80      	pop	{r7, pc}
 8104d8a:	bf00      	nop
 8104d8c:	58024400 	.word	0x58024400
 8104d90:	0810a3b8 	.word	0x0810a3b8
 8104d94:	10000004 	.word	0x10000004
 8104d98:	10000000 	.word	0x10000000

08104d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104d9c:	b580      	push	{r7, lr}
 8104d9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104da0:	f7ff ffca 	bl	8104d38 <HAL_RCC_GetHCLKFreq>
 8104da4:	4602      	mov	r2, r0
 8104da6:	4b06      	ldr	r3, [pc, #24]	; (8104dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104da8:	69db      	ldr	r3, [r3, #28]
 8104daa:	091b      	lsrs	r3, r3, #4
 8104dac:	f003 0307 	and.w	r3, r3, #7
 8104db0:	4904      	ldr	r1, [pc, #16]	; (8104dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8104db2:	5ccb      	ldrb	r3, [r1, r3]
 8104db4:	f003 031f 	and.w	r3, r3, #31
 8104db8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104dbc:	4618      	mov	r0, r3
 8104dbe:	bd80      	pop	{r7, pc}
 8104dc0:	58024400 	.word	0x58024400
 8104dc4:	0810a3b8 	.word	0x0810a3b8

08104dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104dc8:	b580      	push	{r7, lr}
 8104dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104dcc:	f7ff ffb4 	bl	8104d38 <HAL_RCC_GetHCLKFreq>
 8104dd0:	4602      	mov	r2, r0
 8104dd2:	4b06      	ldr	r3, [pc, #24]	; (8104dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8104dd4:	69db      	ldr	r3, [r3, #28]
 8104dd6:	0a1b      	lsrs	r3, r3, #8
 8104dd8:	f003 0307 	and.w	r3, r3, #7
 8104ddc:	4904      	ldr	r1, [pc, #16]	; (8104df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8104dde:	5ccb      	ldrb	r3, [r1, r3]
 8104de0:	f003 031f 	and.w	r3, r3, #31
 8104de4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104de8:	4618      	mov	r0, r3
 8104dea:	bd80      	pop	{r7, pc}
 8104dec:	58024400 	.word	0x58024400
 8104df0:	0810a3b8 	.word	0x0810a3b8

08104df4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8104df4:	b580      	push	{r7, lr}
 8104df6:	b086      	sub	sp, #24
 8104df8:	af00      	add	r7, sp, #0
 8104dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104dfc:	2300      	movs	r3, #0
 8104dfe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104e00:	2300      	movs	r3, #0
 8104e02:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104e04:	687b      	ldr	r3, [r7, #4]
 8104e06:	681b      	ldr	r3, [r3, #0]
 8104e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104e0c:	2b00      	cmp	r3, #0
 8104e0e:	d03f      	beq.n	8104e90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104e14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104e18:	d02a      	beq.n	8104e70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8104e1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104e1e:	d824      	bhi.n	8104e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104e24:	d018      	beq.n	8104e58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104e2a:	d81e      	bhi.n	8104e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104e2c:	2b00      	cmp	r3, #0
 8104e2e:	d003      	beq.n	8104e38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8104e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104e34:	d007      	beq.n	8104e46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8104e36:	e018      	b.n	8104e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e38:	4ba3      	ldr	r3, [pc, #652]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e3c:	4aa2      	ldr	r2, [pc, #648]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104e44:	e015      	b.n	8104e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	3304      	adds	r3, #4
 8104e4a:	2102      	movs	r1, #2
 8104e4c:	4618      	mov	r0, r3
 8104e4e:	f001 fff9 	bl	8106e44 <RCCEx_PLL2_Config>
 8104e52:	4603      	mov	r3, r0
 8104e54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104e56:	e00c      	b.n	8104e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104e58:	687b      	ldr	r3, [r7, #4]
 8104e5a:	3324      	adds	r3, #36	; 0x24
 8104e5c:	2102      	movs	r1, #2
 8104e5e:	4618      	mov	r0, r3
 8104e60:	f002 f8a2 	bl	8106fa8 <RCCEx_PLL3_Config>
 8104e64:	4603      	mov	r3, r0
 8104e66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104e68:	e003      	b.n	8104e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104e6a:	2301      	movs	r3, #1
 8104e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8104e6e:	e000      	b.n	8104e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8104e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104e72:	7dfb      	ldrb	r3, [r7, #23]
 8104e74:	2b00      	cmp	r3, #0
 8104e76:	d109      	bne.n	8104e8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104e78:	4b93      	ldr	r3, [pc, #588]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104e80:	687b      	ldr	r3, [r7, #4]
 8104e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104e84:	4990      	ldr	r1, [pc, #576]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104e86:	4313      	orrs	r3, r2
 8104e88:	650b      	str	r3, [r1, #80]	; 0x50
 8104e8a:	e001      	b.n	8104e90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e8c:	7dfb      	ldrb	r3, [r7, #23]
 8104e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104e90:	687b      	ldr	r3, [r7, #4]
 8104e92:	681b      	ldr	r3, [r3, #0]
 8104e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104e98:	2b00      	cmp	r3, #0
 8104e9a:	d03d      	beq.n	8104f18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104ea0:	2b04      	cmp	r3, #4
 8104ea2:	d826      	bhi.n	8104ef2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8104ea4:	a201      	add	r2, pc, #4	; (adr r2, 8104eac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8104ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104eaa:	bf00      	nop
 8104eac:	08104ec1 	.word	0x08104ec1
 8104eb0:	08104ecf 	.word	0x08104ecf
 8104eb4:	08104ee1 	.word	0x08104ee1
 8104eb8:	08104ef9 	.word	0x08104ef9
 8104ebc:	08104ef9 	.word	0x08104ef9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ec0:	4b81      	ldr	r3, [pc, #516]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ec4:	4a80      	ldr	r2, [pc, #512]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104ecc:	e015      	b.n	8104efa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	3304      	adds	r3, #4
 8104ed2:	2100      	movs	r1, #0
 8104ed4:	4618      	mov	r0, r3
 8104ed6:	f001 ffb5 	bl	8106e44 <RCCEx_PLL2_Config>
 8104eda:	4603      	mov	r3, r0
 8104edc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104ede:	e00c      	b.n	8104efa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	3324      	adds	r3, #36	; 0x24
 8104ee4:	2100      	movs	r1, #0
 8104ee6:	4618      	mov	r0, r3
 8104ee8:	f002 f85e 	bl	8106fa8 <RCCEx_PLL3_Config>
 8104eec:	4603      	mov	r3, r0
 8104eee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104ef0:	e003      	b.n	8104efa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104ef2:	2301      	movs	r3, #1
 8104ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8104ef6:	e000      	b.n	8104efa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8104ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104efa:	7dfb      	ldrb	r3, [r7, #23]
 8104efc:	2b00      	cmp	r3, #0
 8104efe:	d109      	bne.n	8104f14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104f00:	4b71      	ldr	r3, [pc, #452]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f04:	f023 0207 	bic.w	r2, r3, #7
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f0c:	496e      	ldr	r1, [pc, #440]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104f0e:	4313      	orrs	r3, r2
 8104f10:	650b      	str	r3, [r1, #80]	; 0x50
 8104f12:	e001      	b.n	8104f18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f14:	7dfb      	ldrb	r3, [r7, #23]
 8104f16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104f18:	687b      	ldr	r3, [r7, #4]
 8104f1a:	681b      	ldr	r3, [r3, #0]
 8104f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104f20:	2b00      	cmp	r3, #0
 8104f22:	d042      	beq.n	8104faa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104f2c:	d02b      	beq.n	8104f86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8104f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104f32:	d825      	bhi.n	8104f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104f34:	2bc0      	cmp	r3, #192	; 0xc0
 8104f36:	d028      	beq.n	8104f8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8104f38:	2bc0      	cmp	r3, #192	; 0xc0
 8104f3a:	d821      	bhi.n	8104f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104f3c:	2b80      	cmp	r3, #128	; 0x80
 8104f3e:	d016      	beq.n	8104f6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8104f40:	2b80      	cmp	r3, #128	; 0x80
 8104f42:	d81d      	bhi.n	8104f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104f44:	2b00      	cmp	r3, #0
 8104f46:	d002      	beq.n	8104f4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8104f48:	2b40      	cmp	r3, #64	; 0x40
 8104f4a:	d007      	beq.n	8104f5c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8104f4c:	e018      	b.n	8104f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104f4e:	4b5e      	ldr	r3, [pc, #376]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f52:	4a5d      	ldr	r2, [pc, #372]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104f5a:	e017      	b.n	8104f8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	3304      	adds	r3, #4
 8104f60:	2100      	movs	r1, #0
 8104f62:	4618      	mov	r0, r3
 8104f64:	f001 ff6e 	bl	8106e44 <RCCEx_PLL2_Config>
 8104f68:	4603      	mov	r3, r0
 8104f6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104f6c:	e00e      	b.n	8104f8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104f6e:	687b      	ldr	r3, [r7, #4]
 8104f70:	3324      	adds	r3, #36	; 0x24
 8104f72:	2100      	movs	r1, #0
 8104f74:	4618      	mov	r0, r3
 8104f76:	f002 f817 	bl	8106fa8 <RCCEx_PLL3_Config>
 8104f7a:	4603      	mov	r3, r0
 8104f7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104f7e:	e005      	b.n	8104f8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104f80:	2301      	movs	r3, #1
 8104f82:	75fb      	strb	r3, [r7, #23]
      break;
 8104f84:	e002      	b.n	8104f8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104f86:	bf00      	nop
 8104f88:	e000      	b.n	8104f8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104f8c:	7dfb      	ldrb	r3, [r7, #23]
 8104f8e:	2b00      	cmp	r3, #0
 8104f90:	d109      	bne.n	8104fa6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104f92:	4b4d      	ldr	r3, [pc, #308]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8104f9a:	687b      	ldr	r3, [r7, #4]
 8104f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f9e:	494a      	ldr	r1, [pc, #296]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104fa0:	4313      	orrs	r3, r2
 8104fa2:	650b      	str	r3, [r1, #80]	; 0x50
 8104fa4:	e001      	b.n	8104faa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fa6:	7dfb      	ldrb	r3, [r7, #23]
 8104fa8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104faa:	687b      	ldr	r3, [r7, #4]
 8104fac:	681b      	ldr	r3, [r3, #0]
 8104fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104fb2:	2b00      	cmp	r3, #0
 8104fb4:	d049      	beq.n	810504a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8104fb6:	687b      	ldr	r3, [r7, #4]
 8104fb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104fbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104fc0:	d030      	beq.n	8105024 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8104fc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104fc6:	d82a      	bhi.n	810501e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104fc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104fcc:	d02c      	beq.n	8105028 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8104fce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104fd2:	d824      	bhi.n	810501e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104fd8:	d018      	beq.n	810500c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8104fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104fde:	d81e      	bhi.n	810501e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104fe0:	2b00      	cmp	r3, #0
 8104fe2:	d003      	beq.n	8104fec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8104fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104fe8:	d007      	beq.n	8104ffa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8104fea:	e018      	b.n	810501e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104fec:	4b36      	ldr	r3, [pc, #216]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ff0:	4a35      	ldr	r2, [pc, #212]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104ff8:	e017      	b.n	810502a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	3304      	adds	r3, #4
 8104ffe:	2100      	movs	r1, #0
 8105000:	4618      	mov	r0, r3
 8105002:	f001 ff1f 	bl	8106e44 <RCCEx_PLL2_Config>
 8105006:	4603      	mov	r3, r0
 8105008:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810500a:	e00e      	b.n	810502a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	3324      	adds	r3, #36	; 0x24
 8105010:	2100      	movs	r1, #0
 8105012:	4618      	mov	r0, r3
 8105014:	f001 ffc8 	bl	8106fa8 <RCCEx_PLL3_Config>
 8105018:	4603      	mov	r3, r0
 810501a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810501c:	e005      	b.n	810502a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810501e:	2301      	movs	r3, #1
 8105020:	75fb      	strb	r3, [r7, #23]
      break;
 8105022:	e002      	b.n	810502a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105024:	bf00      	nop
 8105026:	e000      	b.n	810502a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105028:	bf00      	nop
    }

    if(ret == HAL_OK)
 810502a:	7dfb      	ldrb	r3, [r7, #23]
 810502c:	2b00      	cmp	r3, #0
 810502e:	d10a      	bne.n	8105046 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105030:	4b25      	ldr	r3, [pc, #148]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105034:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810503e:	4922      	ldr	r1, [pc, #136]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105040:	4313      	orrs	r3, r2
 8105042:	658b      	str	r3, [r1, #88]	; 0x58
 8105044:	e001      	b.n	810504a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105046:	7dfb      	ldrb	r3, [r7, #23]
 8105048:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810504a:	687b      	ldr	r3, [r7, #4]
 810504c:	681b      	ldr	r3, [r3, #0]
 810504e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105052:	2b00      	cmp	r3, #0
 8105054:	d04b      	beq.n	81050ee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8105056:	687b      	ldr	r3, [r7, #4]
 8105058:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810505c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105060:	d030      	beq.n	81050c4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8105062:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105066:	d82a      	bhi.n	81050be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105068:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810506c:	d02e      	beq.n	81050cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 810506e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105072:	d824      	bhi.n	81050be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105078:	d018      	beq.n	81050ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810507a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810507e:	d81e      	bhi.n	81050be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105080:	2b00      	cmp	r3, #0
 8105082:	d003      	beq.n	810508c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8105084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105088:	d007      	beq.n	810509a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810508a:	e018      	b.n	81050be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810508c:	4b0e      	ldr	r3, [pc, #56]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105090:	4a0d      	ldr	r2, [pc, #52]	; (81050c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105096:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105098:	e019      	b.n	81050ce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810509a:	687b      	ldr	r3, [r7, #4]
 810509c:	3304      	adds	r3, #4
 810509e:	2100      	movs	r1, #0
 81050a0:	4618      	mov	r0, r3
 81050a2:	f001 fecf 	bl	8106e44 <RCCEx_PLL2_Config>
 81050a6:	4603      	mov	r3, r0
 81050a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81050aa:	e010      	b.n	81050ce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81050ac:	687b      	ldr	r3, [r7, #4]
 81050ae:	3324      	adds	r3, #36	; 0x24
 81050b0:	2100      	movs	r1, #0
 81050b2:	4618      	mov	r0, r3
 81050b4:	f001 ff78 	bl	8106fa8 <RCCEx_PLL3_Config>
 81050b8:	4603      	mov	r3, r0
 81050ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81050bc:	e007      	b.n	81050ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81050be:	2301      	movs	r3, #1
 81050c0:	75fb      	strb	r3, [r7, #23]
      break;
 81050c2:	e004      	b.n	81050ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 81050c4:	bf00      	nop
 81050c6:	e002      	b.n	81050ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 81050c8:	58024400 	.word	0x58024400
      break;
 81050cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81050ce:	7dfb      	ldrb	r3, [r7, #23]
 81050d0:	2b00      	cmp	r3, #0
 81050d2:	d10a      	bne.n	81050ea <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81050d4:	4b99      	ldr	r3, [pc, #612]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81050d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81050d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81050e2:	4996      	ldr	r1, [pc, #600]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81050e4:	4313      	orrs	r3, r2
 81050e6:	658b      	str	r3, [r1, #88]	; 0x58
 81050e8:	e001      	b.n	81050ee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81050ea:	7dfb      	ldrb	r3, [r7, #23]
 81050ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	681b      	ldr	r3, [r3, #0]
 81050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81050f6:	2b00      	cmp	r3, #0
 81050f8:	d032      	beq.n	8105160 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81050fa:	687b      	ldr	r3, [r7, #4]
 81050fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81050fe:	2b30      	cmp	r3, #48	; 0x30
 8105100:	d01c      	beq.n	810513c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8105102:	2b30      	cmp	r3, #48	; 0x30
 8105104:	d817      	bhi.n	8105136 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105106:	2b20      	cmp	r3, #32
 8105108:	d00c      	beq.n	8105124 <HAL_RCCEx_PeriphCLKConfig+0x330>
 810510a:	2b20      	cmp	r3, #32
 810510c:	d813      	bhi.n	8105136 <HAL_RCCEx_PeriphCLKConfig+0x342>
 810510e:	2b00      	cmp	r3, #0
 8105110:	d016      	beq.n	8105140 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8105112:	2b10      	cmp	r3, #16
 8105114:	d10f      	bne.n	8105136 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105116:	4b89      	ldr	r3, [pc, #548]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810511a:	4a88      	ldr	r2, [pc, #544]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810511c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105120:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105122:	e00e      	b.n	8105142 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105124:	687b      	ldr	r3, [r7, #4]
 8105126:	3304      	adds	r3, #4
 8105128:	2102      	movs	r1, #2
 810512a:	4618      	mov	r0, r3
 810512c:	f001 fe8a 	bl	8106e44 <RCCEx_PLL2_Config>
 8105130:	4603      	mov	r3, r0
 8105132:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105134:	e005      	b.n	8105142 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105136:	2301      	movs	r3, #1
 8105138:	75fb      	strb	r3, [r7, #23]
      break;
 810513a:	e002      	b.n	8105142 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 810513c:	bf00      	nop
 810513e:	e000      	b.n	8105142 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105142:	7dfb      	ldrb	r3, [r7, #23]
 8105144:	2b00      	cmp	r3, #0
 8105146:	d109      	bne.n	810515c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105148:	4b7c      	ldr	r3, [pc, #496]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810514a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810514c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105154:	4979      	ldr	r1, [pc, #484]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105156:	4313      	orrs	r3, r2
 8105158:	64cb      	str	r3, [r1, #76]	; 0x4c
 810515a:	e001      	b.n	8105160 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810515c:	7dfb      	ldrb	r3, [r7, #23]
 810515e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105160:	687b      	ldr	r3, [r7, #4]
 8105162:	681b      	ldr	r3, [r3, #0]
 8105164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8105168:	2b00      	cmp	r3, #0
 810516a:	d047      	beq.n	81051fc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105174:	d030      	beq.n	81051d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8105176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810517a:	d82a      	bhi.n	81051d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 810517c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105180:	d02c      	beq.n	81051dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8105182:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105186:	d824      	bhi.n	81051d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810518c:	d018      	beq.n	81051c0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 810518e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105192:	d81e      	bhi.n	81051d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105194:	2b00      	cmp	r3, #0
 8105196:	d003      	beq.n	81051a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8105198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810519c:	d007      	beq.n	81051ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 810519e:	e018      	b.n	81051d2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81051a0:	4b66      	ldr	r3, [pc, #408]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051a4:	4a65      	ldr	r2, [pc, #404]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81051a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81051aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81051ac:	e017      	b.n	81051de <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	3304      	adds	r3, #4
 81051b2:	2100      	movs	r1, #0
 81051b4:	4618      	mov	r0, r3
 81051b6:	f001 fe45 	bl	8106e44 <RCCEx_PLL2_Config>
 81051ba:	4603      	mov	r3, r0
 81051bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81051be:	e00e      	b.n	81051de <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81051c0:	687b      	ldr	r3, [r7, #4]
 81051c2:	3324      	adds	r3, #36	; 0x24
 81051c4:	2100      	movs	r1, #0
 81051c6:	4618      	mov	r0, r3
 81051c8:	f001 feee 	bl	8106fa8 <RCCEx_PLL3_Config>
 81051cc:	4603      	mov	r3, r0
 81051ce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81051d0:	e005      	b.n	81051de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81051d2:	2301      	movs	r3, #1
 81051d4:	75fb      	strb	r3, [r7, #23]
      break;
 81051d6:	e002      	b.n	81051de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81051d8:	bf00      	nop
 81051da:	e000      	b.n	81051de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81051dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81051de:	7dfb      	ldrb	r3, [r7, #23]
 81051e0:	2b00      	cmp	r3, #0
 81051e2:	d109      	bne.n	81051f8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81051e4:	4b55      	ldr	r3, [pc, #340]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81051e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81051e8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81051ec:	687b      	ldr	r3, [r7, #4]
 81051ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81051f0:	4952      	ldr	r1, [pc, #328]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81051f2:	4313      	orrs	r3, r2
 81051f4:	650b      	str	r3, [r1, #80]	; 0x50
 81051f6:	e001      	b.n	81051fc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81051f8:	7dfb      	ldrb	r3, [r7, #23]
 81051fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	681b      	ldr	r3, [r3, #0]
 8105200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8105204:	2b00      	cmp	r3, #0
 8105206:	d049      	beq.n	810529c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810520c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105210:	d02e      	beq.n	8105270 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8105212:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105216:	d828      	bhi.n	810526a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105218:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810521c:	d02a      	beq.n	8105274 <HAL_RCCEx_PeriphCLKConfig+0x480>
 810521e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105222:	d822      	bhi.n	810526a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105224:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105228:	d026      	beq.n	8105278 <HAL_RCCEx_PeriphCLKConfig+0x484>
 810522a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810522e:	d81c      	bhi.n	810526a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105234:	d010      	beq.n	8105258 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8105236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810523a:	d816      	bhi.n	810526a <HAL_RCCEx_PeriphCLKConfig+0x476>
 810523c:	2b00      	cmp	r3, #0
 810523e:	d01d      	beq.n	810527c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8105240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105244:	d111      	bne.n	810526a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105246:	687b      	ldr	r3, [r7, #4]
 8105248:	3304      	adds	r3, #4
 810524a:	2101      	movs	r1, #1
 810524c:	4618      	mov	r0, r3
 810524e:	f001 fdf9 	bl	8106e44 <RCCEx_PLL2_Config>
 8105252:	4603      	mov	r3, r0
 8105254:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105256:	e012      	b.n	810527e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105258:	687b      	ldr	r3, [r7, #4]
 810525a:	3324      	adds	r3, #36	; 0x24
 810525c:	2101      	movs	r1, #1
 810525e:	4618      	mov	r0, r3
 8105260:	f001 fea2 	bl	8106fa8 <RCCEx_PLL3_Config>
 8105264:	4603      	mov	r3, r0
 8105266:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105268:	e009      	b.n	810527e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810526a:	2301      	movs	r3, #1
 810526c:	75fb      	strb	r3, [r7, #23]
      break;
 810526e:	e006      	b.n	810527e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105270:	bf00      	nop
 8105272:	e004      	b.n	810527e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105274:	bf00      	nop
 8105276:	e002      	b.n	810527e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105278:	bf00      	nop
 810527a:	e000      	b.n	810527e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 810527c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810527e:	7dfb      	ldrb	r3, [r7, #23]
 8105280:	2b00      	cmp	r3, #0
 8105282:	d109      	bne.n	8105298 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105284:	4b2d      	ldr	r3, [pc, #180]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105288:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810528c:	687b      	ldr	r3, [r7, #4]
 810528e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105290:	492a      	ldr	r1, [pc, #168]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105292:	4313      	orrs	r3, r2
 8105294:	650b      	str	r3, [r1, #80]	; 0x50
 8105296:	e001      	b.n	810529c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105298:	7dfb      	ldrb	r3, [r7, #23]
 810529a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	681b      	ldr	r3, [r3, #0]
 81052a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81052a4:	2b00      	cmp	r3, #0
 81052a6:	d04d      	beq.n	8105344 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81052a8:	687b      	ldr	r3, [r7, #4]
 81052aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81052ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81052b2:	d02e      	beq.n	8105312 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 81052b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81052b8:	d828      	bhi.n	810530c <HAL_RCCEx_PeriphCLKConfig+0x518>
 81052ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81052be:	d02a      	beq.n	8105316 <HAL_RCCEx_PeriphCLKConfig+0x522>
 81052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81052c4:	d822      	bhi.n	810530c <HAL_RCCEx_PeriphCLKConfig+0x518>
 81052c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81052ca:	d026      	beq.n	810531a <HAL_RCCEx_PeriphCLKConfig+0x526>
 81052cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81052d0:	d81c      	bhi.n	810530c <HAL_RCCEx_PeriphCLKConfig+0x518>
 81052d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81052d6:	d010      	beq.n	81052fa <HAL_RCCEx_PeriphCLKConfig+0x506>
 81052d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81052dc:	d816      	bhi.n	810530c <HAL_RCCEx_PeriphCLKConfig+0x518>
 81052de:	2b00      	cmp	r3, #0
 81052e0:	d01d      	beq.n	810531e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 81052e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81052e6:	d111      	bne.n	810530c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81052e8:	687b      	ldr	r3, [r7, #4]
 81052ea:	3304      	adds	r3, #4
 81052ec:	2101      	movs	r1, #1
 81052ee:	4618      	mov	r0, r3
 81052f0:	f001 fda8 	bl	8106e44 <RCCEx_PLL2_Config>
 81052f4:	4603      	mov	r3, r0
 81052f6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81052f8:	e012      	b.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81052fa:	687b      	ldr	r3, [r7, #4]
 81052fc:	3324      	adds	r3, #36	; 0x24
 81052fe:	2101      	movs	r1, #1
 8105300:	4618      	mov	r0, r3
 8105302:	f001 fe51 	bl	8106fa8 <RCCEx_PLL3_Config>
 8105306:	4603      	mov	r3, r0
 8105308:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810530a:	e009      	b.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810530c:	2301      	movs	r3, #1
 810530e:	75fb      	strb	r3, [r7, #23]
      break;
 8105310:	e006      	b.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105312:	bf00      	nop
 8105314:	e004      	b.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105316:	bf00      	nop
 8105318:	e002      	b.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810531a:	bf00      	nop
 810531c:	e000      	b.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810531e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105320:	7dfb      	ldrb	r3, [r7, #23]
 8105322:	2b00      	cmp	r3, #0
 8105324:	d10c      	bne.n	8105340 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105326:	4b05      	ldr	r3, [pc, #20]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810532a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105334:	4901      	ldr	r1, [pc, #4]	; (810533c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105336:	4313      	orrs	r3, r2
 8105338:	658b      	str	r3, [r1, #88]	; 0x58
 810533a:	e003      	b.n	8105344 <HAL_RCCEx_PeriphCLKConfig+0x550>
 810533c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105340:	7dfb      	ldrb	r3, [r7, #23]
 8105342:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105344:	687b      	ldr	r3, [r7, #4]
 8105346:	681b      	ldr	r3, [r3, #0]
 8105348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810534c:	2b00      	cmp	r3, #0
 810534e:	d02f      	beq.n	81053b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105358:	d00e      	beq.n	8105378 <HAL_RCCEx_PeriphCLKConfig+0x584>
 810535a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810535e:	d814      	bhi.n	810538a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8105360:	2b00      	cmp	r3, #0
 8105362:	d015      	beq.n	8105390 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8105364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105368:	d10f      	bne.n	810538a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810536a:	4bb0      	ldr	r3, [pc, #704]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810536e:	4aaf      	ldr	r2, [pc, #700]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105374:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105376:	e00c      	b.n	8105392 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105378:	687b      	ldr	r3, [r7, #4]
 810537a:	3304      	adds	r3, #4
 810537c:	2101      	movs	r1, #1
 810537e:	4618      	mov	r0, r3
 8105380:	f001 fd60 	bl	8106e44 <RCCEx_PLL2_Config>
 8105384:	4603      	mov	r3, r0
 8105386:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105388:	e003      	b.n	8105392 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810538a:	2301      	movs	r3, #1
 810538c:	75fb      	strb	r3, [r7, #23]
      break;
 810538e:	e000      	b.n	8105392 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8105390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105392:	7dfb      	ldrb	r3, [r7, #23]
 8105394:	2b00      	cmp	r3, #0
 8105396:	d109      	bne.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105398:	4ba4      	ldr	r3, [pc, #656]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810539c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81053a0:	687b      	ldr	r3, [r7, #4]
 81053a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81053a4:	49a1      	ldr	r1, [pc, #644]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81053a6:	4313      	orrs	r3, r2
 81053a8:	650b      	str	r3, [r1, #80]	; 0x50
 81053aa:	e001      	b.n	81053b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81053ac:	7dfb      	ldrb	r3, [r7, #23]
 81053ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81053b0:	687b      	ldr	r3, [r7, #4]
 81053b2:	681b      	ldr	r3, [r3, #0]
 81053b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81053b8:	2b00      	cmp	r3, #0
 81053ba:	d032      	beq.n	8105422 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81053bc:	687b      	ldr	r3, [r7, #4]
 81053be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81053c0:	2b03      	cmp	r3, #3
 81053c2:	d81b      	bhi.n	81053fc <HAL_RCCEx_PeriphCLKConfig+0x608>
 81053c4:	a201      	add	r2, pc, #4	; (adr r2, 81053cc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 81053c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81053ca:	bf00      	nop
 81053cc:	08105403 	.word	0x08105403
 81053d0:	081053dd 	.word	0x081053dd
 81053d4:	081053eb 	.word	0x081053eb
 81053d8:	08105403 	.word	0x08105403
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81053dc:	4b93      	ldr	r3, [pc, #588]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053e0:	4a92      	ldr	r2, [pc, #584]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81053e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81053e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81053e8:	e00c      	b.n	8105404 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81053ea:	687b      	ldr	r3, [r7, #4]
 81053ec:	3304      	adds	r3, #4
 81053ee:	2102      	movs	r1, #2
 81053f0:	4618      	mov	r0, r3
 81053f2:	f001 fd27 	bl	8106e44 <RCCEx_PLL2_Config>
 81053f6:	4603      	mov	r3, r0
 81053f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81053fa:	e003      	b.n	8105404 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81053fc:	2301      	movs	r3, #1
 81053fe:	75fb      	strb	r3, [r7, #23]
      break;
 8105400:	e000      	b.n	8105404 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8105402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105404:	7dfb      	ldrb	r3, [r7, #23]
 8105406:	2b00      	cmp	r3, #0
 8105408:	d109      	bne.n	810541e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810540a:	4b88      	ldr	r3, [pc, #544]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810540c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810540e:	f023 0203 	bic.w	r2, r3, #3
 8105412:	687b      	ldr	r3, [r7, #4]
 8105414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105416:	4985      	ldr	r1, [pc, #532]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105418:	4313      	orrs	r3, r2
 810541a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810541c:	e001      	b.n	8105422 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810541e:	7dfb      	ldrb	r3, [r7, #23]
 8105420:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105422:	687b      	ldr	r3, [r7, #4]
 8105424:	681b      	ldr	r3, [r3, #0]
 8105426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810542a:	2b00      	cmp	r3, #0
 810542c:	f000 8088 	beq.w	8105540 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105430:	4b7f      	ldr	r3, [pc, #508]	; (8105630 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8105432:	681b      	ldr	r3, [r3, #0]
 8105434:	4a7e      	ldr	r2, [pc, #504]	; (8105630 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8105436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810543a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810543c:	f7fd f876 	bl	810252c <HAL_GetTick>
 8105440:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105442:	e009      	b.n	8105458 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105444:	f7fd f872 	bl	810252c <HAL_GetTick>
 8105448:	4602      	mov	r2, r0
 810544a:	693b      	ldr	r3, [r7, #16]
 810544c:	1ad3      	subs	r3, r2, r3
 810544e:	2b64      	cmp	r3, #100	; 0x64
 8105450:	d902      	bls.n	8105458 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8105452:	2303      	movs	r3, #3
 8105454:	75fb      	strb	r3, [r7, #23]
        break;
 8105456:	e005      	b.n	8105464 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105458:	4b75      	ldr	r3, [pc, #468]	; (8105630 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810545a:	681b      	ldr	r3, [r3, #0]
 810545c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105460:	2b00      	cmp	r3, #0
 8105462:	d0ef      	beq.n	8105444 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8105464:	7dfb      	ldrb	r3, [r7, #23]
 8105466:	2b00      	cmp	r3, #0
 8105468:	d168      	bne.n	810553c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810546a:	4b70      	ldr	r3, [pc, #448]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810546c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105474:	4053      	eors	r3, r2
 8105476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810547a:	2b00      	cmp	r3, #0
 810547c:	d013      	beq.n	81054a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810547e:	4b6b      	ldr	r3, [pc, #428]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105486:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8105488:	4b68      	ldr	r3, [pc, #416]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810548a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810548c:	4a67      	ldr	r2, [pc, #412]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810548e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105492:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105494:	4b65      	ldr	r3, [pc, #404]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105498:	4a64      	ldr	r2, [pc, #400]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810549a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810549e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81054a0:	4a62      	ldr	r2, [pc, #392]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81054a2:	68fb      	ldr	r3, [r7, #12]
 81054a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81054ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81054b0:	d115      	bne.n	81054de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81054b2:	f7fd f83b 	bl	810252c <HAL_GetTick>
 81054b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81054b8:	e00b      	b.n	81054d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81054ba:	f7fd f837 	bl	810252c <HAL_GetTick>
 81054be:	4602      	mov	r2, r0
 81054c0:	693b      	ldr	r3, [r7, #16]
 81054c2:	1ad3      	subs	r3, r2, r3
 81054c4:	f241 3288 	movw	r2, #5000	; 0x1388
 81054c8:	4293      	cmp	r3, r2
 81054ca:	d902      	bls.n	81054d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81054cc:	2303      	movs	r3, #3
 81054ce:	75fb      	strb	r3, [r7, #23]
            break;
 81054d0:	e005      	b.n	81054de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81054d2:	4b56      	ldr	r3, [pc, #344]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81054d6:	f003 0302 	and.w	r3, r3, #2
 81054da:	2b00      	cmp	r3, #0
 81054dc:	d0ed      	beq.n	81054ba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81054de:	7dfb      	ldrb	r3, [r7, #23]
 81054e0:	2b00      	cmp	r3, #0
 81054e2:	d128      	bne.n	8105536 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81054ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81054ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81054f2:	d10f      	bne.n	8105514 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81054f4:	4b4d      	ldr	r3, [pc, #308]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81054f6:	691b      	ldr	r3, [r3, #16]
 81054f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105502:	091b      	lsrs	r3, r3, #4
 8105504:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8105508:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810550c:	4947      	ldr	r1, [pc, #284]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810550e:	4313      	orrs	r3, r2
 8105510:	610b      	str	r3, [r1, #16]
 8105512:	e005      	b.n	8105520 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8105514:	4b45      	ldr	r3, [pc, #276]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105516:	691b      	ldr	r3, [r3, #16]
 8105518:	4a44      	ldr	r2, [pc, #272]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810551a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810551e:	6113      	str	r3, [r2, #16]
 8105520:	4b42      	ldr	r3, [pc, #264]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105522:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810552a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810552e:	493f      	ldr	r1, [pc, #252]	; (810562c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105530:	4313      	orrs	r3, r2
 8105532:	670b      	str	r3, [r1, #112]	; 0x70
 8105534:	e004      	b.n	8105540 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8105536:	7dfb      	ldrb	r3, [r7, #23]
 8105538:	75bb      	strb	r3, [r7, #22]
 810553a:	e001      	b.n	8105540 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810553c:	7dfb      	ldrb	r3, [r7, #23]
 810553e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105540:	687b      	ldr	r3, [r7, #4]
 8105542:	681b      	ldr	r3, [r3, #0]
 8105544:	f003 0301 	and.w	r3, r3, #1
 8105548:	2b00      	cmp	r3, #0
 810554a:	f000 8083 	beq.w	8105654 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810554e:	687b      	ldr	r3, [r7, #4]
 8105550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105552:	2b28      	cmp	r3, #40	; 0x28
 8105554:	d866      	bhi.n	8105624 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8105556:	a201      	add	r2, pc, #4	; (adr r2, 810555c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8105558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810555c:	08105635 	.word	0x08105635
 8105560:	08105625 	.word	0x08105625
 8105564:	08105625 	.word	0x08105625
 8105568:	08105625 	.word	0x08105625
 810556c:	08105625 	.word	0x08105625
 8105570:	08105625 	.word	0x08105625
 8105574:	08105625 	.word	0x08105625
 8105578:	08105625 	.word	0x08105625
 810557c:	08105601 	.word	0x08105601
 8105580:	08105625 	.word	0x08105625
 8105584:	08105625 	.word	0x08105625
 8105588:	08105625 	.word	0x08105625
 810558c:	08105625 	.word	0x08105625
 8105590:	08105625 	.word	0x08105625
 8105594:	08105625 	.word	0x08105625
 8105598:	08105625 	.word	0x08105625
 810559c:	08105613 	.word	0x08105613
 81055a0:	08105625 	.word	0x08105625
 81055a4:	08105625 	.word	0x08105625
 81055a8:	08105625 	.word	0x08105625
 81055ac:	08105625 	.word	0x08105625
 81055b0:	08105625 	.word	0x08105625
 81055b4:	08105625 	.word	0x08105625
 81055b8:	08105625 	.word	0x08105625
 81055bc:	08105635 	.word	0x08105635
 81055c0:	08105625 	.word	0x08105625
 81055c4:	08105625 	.word	0x08105625
 81055c8:	08105625 	.word	0x08105625
 81055cc:	08105625 	.word	0x08105625
 81055d0:	08105625 	.word	0x08105625
 81055d4:	08105625 	.word	0x08105625
 81055d8:	08105625 	.word	0x08105625
 81055dc:	08105635 	.word	0x08105635
 81055e0:	08105625 	.word	0x08105625
 81055e4:	08105625 	.word	0x08105625
 81055e8:	08105625 	.word	0x08105625
 81055ec:	08105625 	.word	0x08105625
 81055f0:	08105625 	.word	0x08105625
 81055f4:	08105625 	.word	0x08105625
 81055f8:	08105625 	.word	0x08105625
 81055fc:	08105635 	.word	0x08105635
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105600:	687b      	ldr	r3, [r7, #4]
 8105602:	3304      	adds	r3, #4
 8105604:	2101      	movs	r1, #1
 8105606:	4618      	mov	r0, r3
 8105608:	f001 fc1c 	bl	8106e44 <RCCEx_PLL2_Config>
 810560c:	4603      	mov	r3, r0
 810560e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105610:	e011      	b.n	8105636 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105612:	687b      	ldr	r3, [r7, #4]
 8105614:	3324      	adds	r3, #36	; 0x24
 8105616:	2101      	movs	r1, #1
 8105618:	4618      	mov	r0, r3
 810561a:	f001 fcc5 	bl	8106fa8 <RCCEx_PLL3_Config>
 810561e:	4603      	mov	r3, r0
 8105620:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105622:	e008      	b.n	8105636 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105624:	2301      	movs	r3, #1
 8105626:	75fb      	strb	r3, [r7, #23]
      break;
 8105628:	e005      	b.n	8105636 <HAL_RCCEx_PeriphCLKConfig+0x842>
 810562a:	bf00      	nop
 810562c:	58024400 	.word	0x58024400
 8105630:	58024800 	.word	0x58024800
      break;
 8105634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105636:	7dfb      	ldrb	r3, [r7, #23]
 8105638:	2b00      	cmp	r3, #0
 810563a:	d109      	bne.n	8105650 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810563c:	4b96      	ldr	r3, [pc, #600]	; (8105898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810563e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105640:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105648:	4993      	ldr	r1, [pc, #588]	; (8105898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810564a:	4313      	orrs	r3, r2
 810564c:	654b      	str	r3, [r1, #84]	; 0x54
 810564e:	e001      	b.n	8105654 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105650:	7dfb      	ldrb	r3, [r7, #23]
 8105652:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	f003 0302 	and.w	r3, r3, #2
 810565c:	2b00      	cmp	r3, #0
 810565e:	d038      	beq.n	81056d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105664:	2b05      	cmp	r3, #5
 8105666:	d821      	bhi.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8105668:	a201      	add	r2, pc, #4	; (adr r2, 8105670 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810566e:	bf00      	nop
 8105670:	081056b3 	.word	0x081056b3
 8105674:	08105689 	.word	0x08105689
 8105678:	0810569b 	.word	0x0810569b
 810567c:	081056b3 	.word	0x081056b3
 8105680:	081056b3 	.word	0x081056b3
 8105684:	081056b3 	.word	0x081056b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105688:	687b      	ldr	r3, [r7, #4]
 810568a:	3304      	adds	r3, #4
 810568c:	2101      	movs	r1, #1
 810568e:	4618      	mov	r0, r3
 8105690:	f001 fbd8 	bl	8106e44 <RCCEx_PLL2_Config>
 8105694:	4603      	mov	r3, r0
 8105696:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8105698:	e00c      	b.n	81056b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810569a:	687b      	ldr	r3, [r7, #4]
 810569c:	3324      	adds	r3, #36	; 0x24
 810569e:	2101      	movs	r1, #1
 81056a0:	4618      	mov	r0, r3
 81056a2:	f001 fc81 	bl	8106fa8 <RCCEx_PLL3_Config>
 81056a6:	4603      	mov	r3, r0
 81056a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81056aa:	e003      	b.n	81056b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81056ac:	2301      	movs	r3, #1
 81056ae:	75fb      	strb	r3, [r7, #23]
      break;
 81056b0:	e000      	b.n	81056b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81056b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81056b4:	7dfb      	ldrb	r3, [r7, #23]
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	d109      	bne.n	81056ce <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81056ba:	4b77      	ldr	r3, [pc, #476]	; (8105898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81056be:	f023 0207 	bic.w	r2, r3, #7
 81056c2:	687b      	ldr	r3, [r7, #4]
 81056c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81056c6:	4974      	ldr	r1, [pc, #464]	; (8105898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81056c8:	4313      	orrs	r3, r2
 81056ca:	654b      	str	r3, [r1, #84]	; 0x54
 81056cc:	e001      	b.n	81056d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056ce:	7dfb      	ldrb	r3, [r7, #23]
 81056d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	681b      	ldr	r3, [r3, #0]
 81056d6:	f003 0304 	and.w	r3, r3, #4
 81056da:	2b00      	cmp	r3, #0
 81056dc:	d03a      	beq.n	8105754 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81056de:	687b      	ldr	r3, [r7, #4]
 81056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81056e4:	2b05      	cmp	r3, #5
 81056e6:	d821      	bhi.n	810572c <HAL_RCCEx_PeriphCLKConfig+0x938>
 81056e8:	a201      	add	r2, pc, #4	; (adr r2, 81056f0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81056ee:	bf00      	nop
 81056f0:	08105733 	.word	0x08105733
 81056f4:	08105709 	.word	0x08105709
 81056f8:	0810571b 	.word	0x0810571b
 81056fc:	08105733 	.word	0x08105733
 8105700:	08105733 	.word	0x08105733
 8105704:	08105733 	.word	0x08105733
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105708:	687b      	ldr	r3, [r7, #4]
 810570a:	3304      	adds	r3, #4
 810570c:	2101      	movs	r1, #1
 810570e:	4618      	mov	r0, r3
 8105710:	f001 fb98 	bl	8106e44 <RCCEx_PLL2_Config>
 8105714:	4603      	mov	r3, r0
 8105716:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8105718:	e00c      	b.n	8105734 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810571a:	687b      	ldr	r3, [r7, #4]
 810571c:	3324      	adds	r3, #36	; 0x24
 810571e:	2101      	movs	r1, #1
 8105720:	4618      	mov	r0, r3
 8105722:	f001 fc41 	bl	8106fa8 <RCCEx_PLL3_Config>
 8105726:	4603      	mov	r3, r0
 8105728:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810572a:	e003      	b.n	8105734 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810572c:	2301      	movs	r3, #1
 810572e:	75fb      	strb	r3, [r7, #23]
      break;
 8105730:	e000      	b.n	8105734 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8105732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105734:	7dfb      	ldrb	r3, [r7, #23]
 8105736:	2b00      	cmp	r3, #0
 8105738:	d10a      	bne.n	8105750 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810573a:	4b57      	ldr	r3, [pc, #348]	; (8105898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810573e:	f023 0207 	bic.w	r2, r3, #7
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105748:	4953      	ldr	r1, [pc, #332]	; (8105898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810574a:	4313      	orrs	r3, r2
 810574c:	658b      	str	r3, [r1, #88]	; 0x58
 810574e:	e001      	b.n	8105754 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105750:	7dfb      	ldrb	r3, [r7, #23]
 8105752:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	681b      	ldr	r3, [r3, #0]
 8105758:	f003 0320 	and.w	r3, r3, #32
 810575c:	2b00      	cmp	r3, #0
 810575e:	d04b      	beq.n	81057f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8105760:	687b      	ldr	r3, [r7, #4]
 8105762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810576a:	d02e      	beq.n	81057ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810576c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105770:	d828      	bhi.n	81057c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8105772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105776:	d02a      	beq.n	81057ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8105778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810577c:	d822      	bhi.n	81057c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810577e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105782:	d026      	beq.n	81057d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8105784:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105788:	d81c      	bhi.n	81057c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810578a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810578e:	d010      	beq.n	81057b2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8105790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105794:	d816      	bhi.n	81057c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8105796:	2b00      	cmp	r3, #0
 8105798:	d01d      	beq.n	81057d6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810579a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810579e:	d111      	bne.n	81057c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	3304      	adds	r3, #4
 81057a4:	2100      	movs	r1, #0
 81057a6:	4618      	mov	r0, r3
 81057a8:	f001 fb4c 	bl	8106e44 <RCCEx_PLL2_Config>
 81057ac:	4603      	mov	r3, r0
 81057ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81057b0:	e012      	b.n	81057d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81057b2:	687b      	ldr	r3, [r7, #4]
 81057b4:	3324      	adds	r3, #36	; 0x24
 81057b6:	2102      	movs	r1, #2
 81057b8:	4618      	mov	r0, r3
 81057ba:	f001 fbf5 	bl	8106fa8 <RCCEx_PLL3_Config>
 81057be:	4603      	mov	r3, r0
 81057c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81057c2:	e009      	b.n	81057d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81057c4:	2301      	movs	r3, #1
 81057c6:	75fb      	strb	r3, [r7, #23]
      break;
 81057c8:	e006      	b.n	81057d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81057ca:	bf00      	nop
 81057cc:	e004      	b.n	81057d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81057ce:	bf00      	nop
 81057d0:	e002      	b.n	81057d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81057d2:	bf00      	nop
 81057d4:	e000      	b.n	81057d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81057d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81057d8:	7dfb      	ldrb	r3, [r7, #23]
 81057da:	2b00      	cmp	r3, #0
 81057dc:	d10a      	bne.n	81057f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81057de:	4b2e      	ldr	r3, [pc, #184]	; (8105898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81057e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81057e6:	687b      	ldr	r3, [r7, #4]
 81057e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81057ec:	492a      	ldr	r1, [pc, #168]	; (8105898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81057ee:	4313      	orrs	r3, r2
 81057f0:	654b      	str	r3, [r1, #84]	; 0x54
 81057f2:	e001      	b.n	81057f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81057f4:	7dfb      	ldrb	r3, [r7, #23]
 81057f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81057f8:	687b      	ldr	r3, [r7, #4]
 81057fa:	681b      	ldr	r3, [r3, #0]
 81057fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105800:	2b00      	cmp	r3, #0
 8105802:	d04d      	beq.n	81058a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8105804:	687b      	ldr	r3, [r7, #4]
 8105806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810580a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810580e:	d02e      	beq.n	810586e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8105810:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105814:	d828      	bhi.n	8105868 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810581a:	d02a      	beq.n	8105872 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810581c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105820:	d822      	bhi.n	8105868 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105822:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105826:	d026      	beq.n	8105876 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8105828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810582c:	d81c      	bhi.n	8105868 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810582e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105832:	d010      	beq.n	8105856 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8105834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105838:	d816      	bhi.n	8105868 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810583a:	2b00      	cmp	r3, #0
 810583c:	d01d      	beq.n	810587a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 810583e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8105842:	d111      	bne.n	8105868 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105844:	687b      	ldr	r3, [r7, #4]
 8105846:	3304      	adds	r3, #4
 8105848:	2100      	movs	r1, #0
 810584a:	4618      	mov	r0, r3
 810584c:	f001 fafa 	bl	8106e44 <RCCEx_PLL2_Config>
 8105850:	4603      	mov	r3, r0
 8105852:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8105854:	e012      	b.n	810587c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105856:	687b      	ldr	r3, [r7, #4]
 8105858:	3324      	adds	r3, #36	; 0x24
 810585a:	2102      	movs	r1, #2
 810585c:	4618      	mov	r0, r3
 810585e:	f001 fba3 	bl	8106fa8 <RCCEx_PLL3_Config>
 8105862:	4603      	mov	r3, r0
 8105864:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8105866:	e009      	b.n	810587c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105868:	2301      	movs	r3, #1
 810586a:	75fb      	strb	r3, [r7, #23]
      break;
 810586c:	e006      	b.n	810587c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810586e:	bf00      	nop
 8105870:	e004      	b.n	810587c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8105872:	bf00      	nop
 8105874:	e002      	b.n	810587c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8105876:	bf00      	nop
 8105878:	e000      	b.n	810587c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810587a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810587c:	7dfb      	ldrb	r3, [r7, #23]
 810587e:	2b00      	cmp	r3, #0
 8105880:	d10c      	bne.n	810589c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105882:	4b05      	ldr	r3, [pc, #20]	; (8105898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105886:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810588a:	687b      	ldr	r3, [r7, #4]
 810588c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105890:	4901      	ldr	r1, [pc, #4]	; (8105898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105892:	4313      	orrs	r3, r2
 8105894:	658b      	str	r3, [r1, #88]	; 0x58
 8105896:	e003      	b.n	81058a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8105898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810589c:	7dfb      	ldrb	r3, [r7, #23]
 810589e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	681b      	ldr	r3, [r3, #0]
 81058a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81058a8:	2b00      	cmp	r3, #0
 81058aa:	d04b      	beq.n	8105944 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81058ac:	687b      	ldr	r3, [r7, #4]
 81058ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81058b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81058b6:	d02e      	beq.n	8105916 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81058b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81058bc:	d828      	bhi.n	8105910 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81058be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81058c2:	d02a      	beq.n	810591a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81058c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81058c8:	d822      	bhi.n	8105910 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81058ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81058ce:	d026      	beq.n	810591e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81058d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81058d4:	d81c      	bhi.n	8105910 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81058d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81058da:	d010      	beq.n	81058fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81058dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81058e0:	d816      	bhi.n	8105910 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81058e2:	2b00      	cmp	r3, #0
 81058e4:	d01d      	beq.n	8105922 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81058e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81058ea:	d111      	bne.n	8105910 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81058ec:	687b      	ldr	r3, [r7, #4]
 81058ee:	3304      	adds	r3, #4
 81058f0:	2100      	movs	r1, #0
 81058f2:	4618      	mov	r0, r3
 81058f4:	f001 faa6 	bl	8106e44 <RCCEx_PLL2_Config>
 81058f8:	4603      	mov	r3, r0
 81058fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81058fc:	e012      	b.n	8105924 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81058fe:	687b      	ldr	r3, [r7, #4]
 8105900:	3324      	adds	r3, #36	; 0x24
 8105902:	2102      	movs	r1, #2
 8105904:	4618      	mov	r0, r3
 8105906:	f001 fb4f 	bl	8106fa8 <RCCEx_PLL3_Config>
 810590a:	4603      	mov	r3, r0
 810590c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810590e:	e009      	b.n	8105924 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105910:	2301      	movs	r3, #1
 8105912:	75fb      	strb	r3, [r7, #23]
      break;
 8105914:	e006      	b.n	8105924 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105916:	bf00      	nop
 8105918:	e004      	b.n	8105924 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810591a:	bf00      	nop
 810591c:	e002      	b.n	8105924 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810591e:	bf00      	nop
 8105920:	e000      	b.n	8105924 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105924:	7dfb      	ldrb	r3, [r7, #23]
 8105926:	2b00      	cmp	r3, #0
 8105928:	d10a      	bne.n	8105940 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810592a:	4b9d      	ldr	r3, [pc, #628]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810592c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810592e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8105932:	687b      	ldr	r3, [r7, #4]
 8105934:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105938:	4999      	ldr	r1, [pc, #612]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810593a:	4313      	orrs	r3, r2
 810593c:	658b      	str	r3, [r1, #88]	; 0x58
 810593e:	e001      	b.n	8105944 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105940:	7dfb      	ldrb	r3, [r7, #23]
 8105942:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105944:	687b      	ldr	r3, [r7, #4]
 8105946:	681b      	ldr	r3, [r3, #0]
 8105948:	f003 0308 	and.w	r3, r3, #8
 810594c:	2b00      	cmp	r3, #0
 810594e:	d01a      	beq.n	8105986 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8105950:	687b      	ldr	r3, [r7, #4]
 8105952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810595a:	d10a      	bne.n	8105972 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810595c:	687b      	ldr	r3, [r7, #4]
 810595e:	3324      	adds	r3, #36	; 0x24
 8105960:	2102      	movs	r1, #2
 8105962:	4618      	mov	r0, r3
 8105964:	f001 fb20 	bl	8106fa8 <RCCEx_PLL3_Config>
 8105968:	4603      	mov	r3, r0
 810596a:	2b00      	cmp	r3, #0
 810596c:	d001      	beq.n	8105972 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 810596e:	2301      	movs	r3, #1
 8105970:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105972:	4b8b      	ldr	r3, [pc, #556]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105976:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810597a:	687b      	ldr	r3, [r7, #4]
 810597c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105980:	4987      	ldr	r1, [pc, #540]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105982:	4313      	orrs	r3, r2
 8105984:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105986:	687b      	ldr	r3, [r7, #4]
 8105988:	681b      	ldr	r3, [r3, #0]
 810598a:	f003 0310 	and.w	r3, r3, #16
 810598e:	2b00      	cmp	r3, #0
 8105990:	d01a      	beq.n	81059c8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8105992:	687b      	ldr	r3, [r7, #4]
 8105994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810599c:	d10a      	bne.n	81059b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810599e:	687b      	ldr	r3, [r7, #4]
 81059a0:	3324      	adds	r3, #36	; 0x24
 81059a2:	2102      	movs	r1, #2
 81059a4:	4618      	mov	r0, r3
 81059a6:	f001 faff 	bl	8106fa8 <RCCEx_PLL3_Config>
 81059aa:	4603      	mov	r3, r0
 81059ac:	2b00      	cmp	r3, #0
 81059ae:	d001      	beq.n	81059b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81059b0:	2301      	movs	r3, #1
 81059b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81059b4:	4b7a      	ldr	r3, [pc, #488]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81059b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81059b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81059c2:	4977      	ldr	r1, [pc, #476]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81059c4:	4313      	orrs	r3, r2
 81059c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	681b      	ldr	r3, [r3, #0]
 81059cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81059d0:	2b00      	cmp	r3, #0
 81059d2:	d034      	beq.n	8105a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81059d4:	687b      	ldr	r3, [r7, #4]
 81059d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81059da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81059de:	d01d      	beq.n	8105a1c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81059e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81059e4:	d817      	bhi.n	8105a16 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81059e6:	2b00      	cmp	r3, #0
 81059e8:	d003      	beq.n	81059f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81059ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81059ee:	d009      	beq.n	8105a04 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81059f0:	e011      	b.n	8105a16 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81059f2:	687b      	ldr	r3, [r7, #4]
 81059f4:	3304      	adds	r3, #4
 81059f6:	2100      	movs	r1, #0
 81059f8:	4618      	mov	r0, r3
 81059fa:	f001 fa23 	bl	8106e44 <RCCEx_PLL2_Config>
 81059fe:	4603      	mov	r3, r0
 8105a00:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8105a02:	e00c      	b.n	8105a1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	3324      	adds	r3, #36	; 0x24
 8105a08:	2102      	movs	r1, #2
 8105a0a:	4618      	mov	r0, r3
 8105a0c:	f001 facc 	bl	8106fa8 <RCCEx_PLL3_Config>
 8105a10:	4603      	mov	r3, r0
 8105a12:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8105a14:	e003      	b.n	8105a1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105a16:	2301      	movs	r3, #1
 8105a18:	75fb      	strb	r3, [r7, #23]
      break;
 8105a1a:	e000      	b.n	8105a1e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8105a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105a1e:	7dfb      	ldrb	r3, [r7, #23]
 8105a20:	2b00      	cmp	r3, #0
 8105a22:	d10a      	bne.n	8105a3a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105a24:	4b5e      	ldr	r3, [pc, #376]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105a32:	495b      	ldr	r1, [pc, #364]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105a34:	4313      	orrs	r3, r2
 8105a36:	658b      	str	r3, [r1, #88]	; 0x58
 8105a38:	e001      	b.n	8105a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a3a:	7dfb      	ldrb	r3, [r7, #23]
 8105a3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105a3e:	687b      	ldr	r3, [r7, #4]
 8105a40:	681b      	ldr	r3, [r3, #0]
 8105a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105a46:	2b00      	cmp	r3, #0
 8105a48:	d033      	beq.n	8105ab2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105a50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105a54:	d01c      	beq.n	8105a90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8105a56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105a5a:	d816      	bhi.n	8105a8a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8105a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105a60:	d003      	beq.n	8105a6a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8105a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105a66:	d007      	beq.n	8105a78 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8105a68:	e00f      	b.n	8105a8a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105a6a:	4b4d      	ldr	r3, [pc, #308]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a6e:	4a4c      	ldr	r2, [pc, #304]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105a74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8105a76:	e00c      	b.n	8105a92 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	3324      	adds	r3, #36	; 0x24
 8105a7c:	2101      	movs	r1, #1
 8105a7e:	4618      	mov	r0, r3
 8105a80:	f001 fa92 	bl	8106fa8 <RCCEx_PLL3_Config>
 8105a84:	4603      	mov	r3, r0
 8105a86:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8105a88:	e003      	b.n	8105a92 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105a8a:	2301      	movs	r3, #1
 8105a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8105a8e:	e000      	b.n	8105a92 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8105a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105a92:	7dfb      	ldrb	r3, [r7, #23]
 8105a94:	2b00      	cmp	r3, #0
 8105a96:	d10a      	bne.n	8105aae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8105a98:	4b41      	ldr	r3, [pc, #260]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8105aa0:	687b      	ldr	r3, [r7, #4]
 8105aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105aa6:	493e      	ldr	r1, [pc, #248]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105aa8:	4313      	orrs	r3, r2
 8105aaa:	654b      	str	r3, [r1, #84]	; 0x54
 8105aac:	e001      	b.n	8105ab2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105aae:	7dfb      	ldrb	r3, [r7, #23]
 8105ab0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	681b      	ldr	r3, [r3, #0]
 8105ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105aba:	2b00      	cmp	r3, #0
 8105abc:	d029      	beq.n	8105b12 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8105abe:	687b      	ldr	r3, [r7, #4]
 8105ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105ac2:	2b00      	cmp	r3, #0
 8105ac4:	d003      	beq.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8105ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105aca:	d007      	beq.n	8105adc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8105acc:	e00f      	b.n	8105aee <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ace:	4b34      	ldr	r3, [pc, #208]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ad2:	4a33      	ldr	r2, [pc, #204]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8105ada:	e00b      	b.n	8105af4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	3304      	adds	r3, #4
 8105ae0:	2102      	movs	r1, #2
 8105ae2:	4618      	mov	r0, r3
 8105ae4:	f001 f9ae 	bl	8106e44 <RCCEx_PLL2_Config>
 8105ae8:	4603      	mov	r3, r0
 8105aea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8105aec:	e002      	b.n	8105af4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8105aee:	2301      	movs	r3, #1
 8105af0:	75fb      	strb	r3, [r7, #23]
      break;
 8105af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105af4:	7dfb      	ldrb	r3, [r7, #23]
 8105af6:	2b00      	cmp	r3, #0
 8105af8:	d109      	bne.n	8105b0e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105afa:	4b29      	ldr	r3, [pc, #164]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105afe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8105b02:	687b      	ldr	r3, [r7, #4]
 8105b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105b06:	4926      	ldr	r1, [pc, #152]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105b08:	4313      	orrs	r3, r2
 8105b0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105b0c:	e001      	b.n	8105b12 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b0e:	7dfb      	ldrb	r3, [r7, #23]
 8105b10:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105b12:	687b      	ldr	r3, [r7, #4]
 8105b14:	681b      	ldr	r3, [r3, #0]
 8105b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105b1a:	2b00      	cmp	r3, #0
 8105b1c:	d00a      	beq.n	8105b34 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8105b1e:	687b      	ldr	r3, [r7, #4]
 8105b20:	3324      	adds	r3, #36	; 0x24
 8105b22:	2102      	movs	r1, #2
 8105b24:	4618      	mov	r0, r3
 8105b26:	f001 fa3f 	bl	8106fa8 <RCCEx_PLL3_Config>
 8105b2a:	4603      	mov	r3, r0
 8105b2c:	2b00      	cmp	r3, #0
 8105b2e:	d001      	beq.n	8105b34 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8105b30:	2301      	movs	r3, #1
 8105b32:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105b34:	687b      	ldr	r3, [r7, #4]
 8105b36:	681b      	ldr	r3, [r3, #0]
 8105b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105b3c:	2b00      	cmp	r3, #0
 8105b3e:	d033      	beq.n	8105ba8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8105b40:	687b      	ldr	r3, [r7, #4]
 8105b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105b48:	d017      	beq.n	8105b7a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8105b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105b4e:	d811      	bhi.n	8105b74 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8105b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105b54:	d013      	beq.n	8105b7e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8105b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105b5a:	d80b      	bhi.n	8105b74 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8105b5c:	2b00      	cmp	r3, #0
 8105b5e:	d010      	beq.n	8105b82 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8105b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105b64:	d106      	bne.n	8105b74 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b66:	4b0e      	ldr	r3, [pc, #56]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b6a:	4a0d      	ldr	r2, [pc, #52]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8105b72:	e007      	b.n	8105b84 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105b74:	2301      	movs	r3, #1
 8105b76:	75fb      	strb	r3, [r7, #23]
      break;
 8105b78:	e004      	b.n	8105b84 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8105b7a:	bf00      	nop
 8105b7c:	e002      	b.n	8105b84 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8105b7e:	bf00      	nop
 8105b80:	e000      	b.n	8105b84 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8105b82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105b84:	7dfb      	ldrb	r3, [r7, #23]
 8105b86:	2b00      	cmp	r3, #0
 8105b88:	d10c      	bne.n	8105ba4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105b8a:	4b05      	ldr	r3, [pc, #20]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8105b92:	687b      	ldr	r3, [r7, #4]
 8105b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105b96:	4902      	ldr	r1, [pc, #8]	; (8105ba0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105b98:	4313      	orrs	r3, r2
 8105b9a:	654b      	str	r3, [r1, #84]	; 0x54
 8105b9c:	e004      	b.n	8105ba8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8105b9e:	bf00      	nop
 8105ba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ba4:	7dfb      	ldrb	r3, [r7, #23]
 8105ba6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105ba8:	687b      	ldr	r3, [r7, #4]
 8105baa:	681b      	ldr	r3, [r3, #0]
 8105bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8105bb0:	2b00      	cmp	r3, #0
 8105bb2:	d008      	beq.n	8105bc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105bb4:	4b31      	ldr	r3, [pc, #196]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105bb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8105bbc:	687b      	ldr	r3, [r7, #4]
 8105bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105bc0:	492e      	ldr	r1, [pc, #184]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105bc2:	4313      	orrs	r3, r2
 8105bc4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8105bc6:	687b      	ldr	r3, [r7, #4]
 8105bc8:	681b      	ldr	r3, [r3, #0]
 8105bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8105bce:	2b00      	cmp	r3, #0
 8105bd0:	d009      	beq.n	8105be6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105bd2:	4b2a      	ldr	r3, [pc, #168]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105bd4:	691b      	ldr	r3, [r3, #16]
 8105bd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8105bda:	687b      	ldr	r3, [r7, #4]
 8105bdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105be0:	4926      	ldr	r1, [pc, #152]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105be2:	4313      	orrs	r3, r2
 8105be4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105be6:	687b      	ldr	r3, [r7, #4]
 8105be8:	681b      	ldr	r3, [r3, #0]
 8105bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8105bee:	2b00      	cmp	r3, #0
 8105bf0:	d008      	beq.n	8105c04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105bf2:	4b22      	ldr	r3, [pc, #136]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105bf6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8105bfa:	687b      	ldr	r3, [r7, #4]
 8105bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105bfe:	491f      	ldr	r1, [pc, #124]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105c00:	4313      	orrs	r3, r2
 8105c02:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105c04:	687b      	ldr	r3, [r7, #4]
 8105c06:	681b      	ldr	r3, [r3, #0]
 8105c08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8105c0c:	2b00      	cmp	r3, #0
 8105c0e:	d00d      	beq.n	8105c2c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105c10:	4b1a      	ldr	r3, [pc, #104]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105c12:	691b      	ldr	r3, [r3, #16]
 8105c14:	4a19      	ldr	r2, [pc, #100]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105c16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8105c1a:	6113      	str	r3, [r2, #16]
 8105c1c:	4b17      	ldr	r3, [pc, #92]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105c1e:	691a      	ldr	r2, [r3, #16]
 8105c20:	687b      	ldr	r3, [r7, #4]
 8105c22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8105c26:	4915      	ldr	r1, [pc, #84]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105c28:	4313      	orrs	r3, r2
 8105c2a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105c2c:	687b      	ldr	r3, [r7, #4]
 8105c2e:	681b      	ldr	r3, [r3, #0]
 8105c30:	2b00      	cmp	r3, #0
 8105c32:	da08      	bge.n	8105c46 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105c34:	4b11      	ldr	r3, [pc, #68]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105c38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105c40:	490e      	ldr	r1, [pc, #56]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105c42:	4313      	orrs	r3, r2
 8105c44:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105c46:	687b      	ldr	r3, [r7, #4]
 8105c48:	681b      	ldr	r3, [r3, #0]
 8105c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8105c4e:	2b00      	cmp	r3, #0
 8105c50:	d009      	beq.n	8105c66 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105c52:	4b0a      	ldr	r3, [pc, #40]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105c56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8105c5a:	687b      	ldr	r3, [r7, #4]
 8105c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105c60:	4906      	ldr	r1, [pc, #24]	; (8105c7c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105c62:	4313      	orrs	r3, r2
 8105c64:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8105c66:	7dbb      	ldrb	r3, [r7, #22]
 8105c68:	2b00      	cmp	r3, #0
 8105c6a:	d101      	bne.n	8105c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8105c6c:	2300      	movs	r3, #0
 8105c6e:	e000      	b.n	8105c72 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8105c70:	2301      	movs	r3, #1
}
 8105c72:	4618      	mov	r0, r3
 8105c74:	3718      	adds	r7, #24
 8105c76:	46bd      	mov	sp, r7
 8105c78:	bd80      	pop	{r7, pc}
 8105c7a:	bf00      	nop
 8105c7c:	58024400 	.word	0x58024400

08105c80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8105c80:	b580      	push	{r7, lr}
 8105c82:	b090      	sub	sp, #64	; 0x40
 8105c84:	af00      	add	r7, sp, #0
 8105c86:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105c8e:	f040 8095 	bne.w	8105dbc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8105c92:	4b97      	ldr	r3, [pc, #604]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105c96:	f003 0307 	and.w	r3, r3, #7
 8105c9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8105c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105c9e:	2b04      	cmp	r3, #4
 8105ca0:	f200 8088 	bhi.w	8105db4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8105ca4:	a201      	add	r2, pc, #4	; (adr r2, 8105cac <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8105ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105caa:	bf00      	nop
 8105cac:	08105cc1 	.word	0x08105cc1
 8105cb0:	08105ce9 	.word	0x08105ce9
 8105cb4:	08105d11 	.word	0x08105d11
 8105cb8:	08105dad 	.word	0x08105dad
 8105cbc:	08105d39 	.word	0x08105d39
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105cc0:	4b8b      	ldr	r3, [pc, #556]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105cc2:	681b      	ldr	r3, [r3, #0]
 8105cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105cc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105ccc:	d108      	bne.n	8105ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105cd2:	4618      	mov	r0, r3
 8105cd4:	f000 ff64 	bl	8106ba0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8105cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105cda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105cdc:	f000 bc94 	b.w	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105ce0:	2300      	movs	r3, #0
 8105ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105ce4:	f000 bc90 	b.w	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105ce8:	4b81      	ldr	r3, [pc, #516]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105cea:	681b      	ldr	r3, [r3, #0]
 8105cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105cf4:	d108      	bne.n	8105d08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105cf6:	f107 0318 	add.w	r3, r7, #24
 8105cfa:	4618      	mov	r0, r3
 8105cfc:	f000 fca8 	bl	8106650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105d00:	69bb      	ldr	r3, [r7, #24]
 8105d02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105d04:	f000 bc80 	b.w	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105d08:	2300      	movs	r3, #0
 8105d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105d0c:	f000 bc7c 	b.w	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105d10:	4b77      	ldr	r3, [pc, #476]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105d12:	681b      	ldr	r3, [r3, #0]
 8105d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105d1c:	d108      	bne.n	8105d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105d1e:	f107 030c 	add.w	r3, r7, #12
 8105d22:	4618      	mov	r0, r3
 8105d24:	f000 fde8 	bl	81068f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105d28:	68fb      	ldr	r3, [r7, #12]
 8105d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105d2c:	f000 bc6c 	b.w	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105d30:	2300      	movs	r3, #0
 8105d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105d34:	f000 bc68 	b.w	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105d38:	4b6d      	ldr	r3, [pc, #436]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105d3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105d40:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105d42:	4b6b      	ldr	r3, [pc, #428]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105d44:	681b      	ldr	r3, [r3, #0]
 8105d46:	f003 0304 	and.w	r3, r3, #4
 8105d4a:	2b04      	cmp	r3, #4
 8105d4c:	d10c      	bne.n	8105d68 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8105d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d50:	2b00      	cmp	r3, #0
 8105d52:	d109      	bne.n	8105d68 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105d54:	4b66      	ldr	r3, [pc, #408]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	08db      	lsrs	r3, r3, #3
 8105d5a:	f003 0303 	and.w	r3, r3, #3
 8105d5e:	4a65      	ldr	r2, [pc, #404]	; (8105ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8105d60:	fa22 f303 	lsr.w	r3, r2, r3
 8105d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105d66:	e01f      	b.n	8105da8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105d68:	4b61      	ldr	r3, [pc, #388]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105d6a:	681b      	ldr	r3, [r3, #0]
 8105d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105d74:	d106      	bne.n	8105d84 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8105d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105d7c:	d102      	bne.n	8105d84 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105d7e:	4b5e      	ldr	r3, [pc, #376]	; (8105ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8105d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105d82:	e011      	b.n	8105da8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105d84:	4b5a      	ldr	r3, [pc, #360]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105d86:	681b      	ldr	r3, [r3, #0]
 8105d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105d90:	d106      	bne.n	8105da0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8105d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105d98:	d102      	bne.n	8105da0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105d9a:	4b58      	ldr	r3, [pc, #352]	; (8105efc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8105d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105d9e:	e003      	b.n	8105da8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105da0:	2300      	movs	r3, #0
 8105da2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8105da4:	f000 bc30 	b.w	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105da8:	f000 bc2e 	b.w	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8105dac:	4b54      	ldr	r3, [pc, #336]	; (8105f00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8105dae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105db0:	f000 bc2a 	b.w	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8105db4:	2300      	movs	r3, #0
 8105db6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105db8:	f000 bc26 	b.w	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8105dbc:	687b      	ldr	r3, [r7, #4]
 8105dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105dc2:	f040 809f 	bne.w	8105f04 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8105dc6:	4b4a      	ldr	r3, [pc, #296]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105dca:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8105dce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8105dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105dd6:	d04d      	beq.n	8105e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8105dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105dde:	f200 8084 	bhi.w	8105eea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8105de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105de4:	2bc0      	cmp	r3, #192	; 0xc0
 8105de6:	d07d      	beq.n	8105ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8105de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105dea:	2bc0      	cmp	r3, #192	; 0xc0
 8105dec:	d87d      	bhi.n	8105eea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8105dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105df0:	2b80      	cmp	r3, #128	; 0x80
 8105df2:	d02d      	beq.n	8105e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8105df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105df6:	2b80      	cmp	r3, #128	; 0x80
 8105df8:	d877      	bhi.n	8105eea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8105dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105dfc:	2b00      	cmp	r3, #0
 8105dfe:	d003      	beq.n	8105e08 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8105e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e02:	2b40      	cmp	r3, #64	; 0x40
 8105e04:	d012      	beq.n	8105e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8105e06:	e070      	b.n	8105eea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105e08:	4b39      	ldr	r3, [pc, #228]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105e0a:	681b      	ldr	r3, [r3, #0]
 8105e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105e14:	d107      	bne.n	8105e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105e1a:	4618      	mov	r0, r3
 8105e1c:	f000 fec0 	bl	8106ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105e22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105e24:	e3f0      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105e26:	2300      	movs	r3, #0
 8105e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105e2a:	e3ed      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105e2c:	4b30      	ldr	r3, [pc, #192]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105e2e:	681b      	ldr	r3, [r3, #0]
 8105e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105e34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105e38:	d107      	bne.n	8105e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105e3a:	f107 0318 	add.w	r3, r7, #24
 8105e3e:	4618      	mov	r0, r3
 8105e40:	f000 fc06 	bl	8106650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105e44:	69bb      	ldr	r3, [r7, #24]
 8105e46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105e48:	e3de      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105e4a:	2300      	movs	r3, #0
 8105e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105e4e:	e3db      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105e50:	4b27      	ldr	r3, [pc, #156]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105e52:	681b      	ldr	r3, [r3, #0]
 8105e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105e5c:	d107      	bne.n	8105e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105e5e:	f107 030c 	add.w	r3, r7, #12
 8105e62:	4618      	mov	r0, r3
 8105e64:	f000 fd48 	bl	81068f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105e68:	68fb      	ldr	r3, [r7, #12]
 8105e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105e6c:	e3cc      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105e6e:	2300      	movs	r3, #0
 8105e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105e72:	e3c9      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105e74:	4b1e      	ldr	r3, [pc, #120]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105e7c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105e7e:	4b1c      	ldr	r3, [pc, #112]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105e80:	681b      	ldr	r3, [r3, #0]
 8105e82:	f003 0304 	and.w	r3, r3, #4
 8105e86:	2b04      	cmp	r3, #4
 8105e88:	d10c      	bne.n	8105ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8105e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105e8c:	2b00      	cmp	r3, #0
 8105e8e:	d109      	bne.n	8105ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105e90:	4b17      	ldr	r3, [pc, #92]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105e92:	681b      	ldr	r3, [r3, #0]
 8105e94:	08db      	lsrs	r3, r3, #3
 8105e96:	f003 0303 	and.w	r3, r3, #3
 8105e9a:	4a16      	ldr	r2, [pc, #88]	; (8105ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8105e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8105ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105ea2:	e01e      	b.n	8105ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105ea4:	4b12      	ldr	r3, [pc, #72]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105ea6:	681b      	ldr	r3, [r3, #0]
 8105ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105eb0:	d106      	bne.n	8105ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8105eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105eb8:	d102      	bne.n	8105ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105eba:	4b0f      	ldr	r3, [pc, #60]	; (8105ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8105ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105ebe:	e010      	b.n	8105ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105ec0:	4b0b      	ldr	r3, [pc, #44]	; (8105ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8105ec2:	681b      	ldr	r3, [r3, #0]
 8105ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105ec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105ecc:	d106      	bne.n	8105edc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8105ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ed4:	d102      	bne.n	8105edc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105ed6:	4b09      	ldr	r3, [pc, #36]	; (8105efc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8105ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105eda:	e002      	b.n	8105ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105edc:	2300      	movs	r3, #0
 8105ede:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8105ee0:	e392      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105ee2:	e391      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8105ee4:	4b06      	ldr	r3, [pc, #24]	; (8105f00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8105ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105ee8:	e38e      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8105eea:	2300      	movs	r3, #0
 8105eec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105eee:	e38b      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8105ef0:	58024400 	.word	0x58024400
 8105ef4:	03d09000 	.word	0x03d09000
 8105ef8:	003d0900 	.word	0x003d0900
 8105efc:	007a1200 	.word	0x007a1200
 8105f00:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8105f04:	687b      	ldr	r3, [r7, #4]
 8105f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8105f0a:	f040 809c 	bne.w	8106046 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8105f0e:	4b9d      	ldr	r3, [pc, #628]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105f12:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8105f16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8105f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105f1e:	d054      	beq.n	8105fca <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8105f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105f26:	f200 808b 	bhi.w	8106040 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8105f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105f30:	f000 8083 	beq.w	810603a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8105f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105f3a:	f200 8081 	bhi.w	8106040 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8105f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105f44:	d02f      	beq.n	8105fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8105f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105f4c:	d878      	bhi.n	8106040 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8105f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f50:	2b00      	cmp	r3, #0
 8105f52:	d004      	beq.n	8105f5e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8105f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105f5a:	d012      	beq.n	8105f82 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8105f5c:	e070      	b.n	8106040 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105f5e:	4b89      	ldr	r3, [pc, #548]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105f60:	681b      	ldr	r3, [r3, #0]
 8105f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105f6a:	d107      	bne.n	8105f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105f70:	4618      	mov	r0, r3
 8105f72:	f000 fe15 	bl	8106ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105f78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105f7a:	e345      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105f7c:	2300      	movs	r3, #0
 8105f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105f80:	e342      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105f82:	4b80      	ldr	r3, [pc, #512]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105f84:	681b      	ldr	r3, [r3, #0]
 8105f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105f8e:	d107      	bne.n	8105fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105f90:	f107 0318 	add.w	r3, r7, #24
 8105f94:	4618      	mov	r0, r3
 8105f96:	f000 fb5b 	bl	8106650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105f9a:	69bb      	ldr	r3, [r7, #24]
 8105f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105f9e:	e333      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105fa0:	2300      	movs	r3, #0
 8105fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105fa4:	e330      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105fa6:	4b77      	ldr	r3, [pc, #476]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105fa8:	681b      	ldr	r3, [r3, #0]
 8105faa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105fb2:	d107      	bne.n	8105fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105fb4:	f107 030c 	add.w	r3, r7, #12
 8105fb8:	4618      	mov	r0, r3
 8105fba:	f000 fc9d 	bl	81068f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105fbe:	68fb      	ldr	r3, [r7, #12]
 8105fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105fc2:	e321      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105fc4:	2300      	movs	r3, #0
 8105fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105fc8:	e31e      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105fca:	4b6e      	ldr	r3, [pc, #440]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105fd2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105fd4:	4b6b      	ldr	r3, [pc, #428]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105fd6:	681b      	ldr	r3, [r3, #0]
 8105fd8:	f003 0304 	and.w	r3, r3, #4
 8105fdc:	2b04      	cmp	r3, #4
 8105fde:	d10c      	bne.n	8105ffa <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8105fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105fe2:	2b00      	cmp	r3, #0
 8105fe4:	d109      	bne.n	8105ffa <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105fe6:	4b67      	ldr	r3, [pc, #412]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105fe8:	681b      	ldr	r3, [r3, #0]
 8105fea:	08db      	lsrs	r3, r3, #3
 8105fec:	f003 0303 	and.w	r3, r3, #3
 8105ff0:	4a65      	ldr	r2, [pc, #404]	; (8106188 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8105ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8105ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105ff8:	e01e      	b.n	8106038 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105ffa:	4b62      	ldr	r3, [pc, #392]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8105ffc:	681b      	ldr	r3, [r3, #0]
 8105ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106006:	d106      	bne.n	8106016 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8106008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810600a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810600e:	d102      	bne.n	8106016 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106010:	4b5e      	ldr	r3, [pc, #376]	; (810618c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8106012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106014:	e010      	b.n	8106038 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106016:	4b5b      	ldr	r3, [pc, #364]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106018:	681b      	ldr	r3, [r3, #0]
 810601a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810601e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106022:	d106      	bne.n	8106032 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8106024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810602a:	d102      	bne.n	8106032 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810602c:	4b58      	ldr	r3, [pc, #352]	; (8106190 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 810602e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106030:	e002      	b.n	8106038 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106032:	2300      	movs	r3, #0
 8106034:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106036:	e2e7      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106038:	e2e6      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810603a:	4b56      	ldr	r3, [pc, #344]	; (8106194 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 810603c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810603e:	e2e3      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8106040:	2300      	movs	r3, #0
 8106042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106044:	e2e0      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8106046:	687b      	ldr	r3, [r7, #4]
 8106048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810604c:	f040 80a7 	bne.w	810619e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8106050:	4b4c      	ldr	r3, [pc, #304]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106054:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8106058:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810605c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106060:	d055      	beq.n	810610e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8106062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106064:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106068:	f200 8096 	bhi.w	8106198 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 810606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810606e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106072:	f000 8084 	beq.w	810617e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8106076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106078:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810607c:	f200 808c 	bhi.w	8106198 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8106080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106086:	d030      	beq.n	81060ea <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8106088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810608a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810608e:	f200 8083 	bhi.w	8106198 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8106092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106094:	2b00      	cmp	r3, #0
 8106096:	d004      	beq.n	81060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8106098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810609a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810609e:	d012      	beq.n	81060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 81060a0:	e07a      	b.n	8106198 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81060a2:	4b38      	ldr	r3, [pc, #224]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81060a4:	681b      	ldr	r3, [r3, #0]
 81060a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81060aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81060ae:	d107      	bne.n	81060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81060b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81060b4:	4618      	mov	r0, r3
 81060b6:	f000 fd73 	bl	8106ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81060bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81060be:	e2a3      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81060c0:	2300      	movs	r3, #0
 81060c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81060c4:	e2a0      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81060c6:	4b2f      	ldr	r3, [pc, #188]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81060c8:	681b      	ldr	r3, [r3, #0]
 81060ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81060ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81060d2:	d107      	bne.n	81060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81060d4:	f107 0318 	add.w	r3, r7, #24
 81060d8:	4618      	mov	r0, r3
 81060da:	f000 fab9 	bl	8106650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81060de:	69bb      	ldr	r3, [r7, #24]
 81060e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 81060e2:	e291      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81060e4:	2300      	movs	r3, #0
 81060e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81060e8:	e28e      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81060ea:	4b26      	ldr	r3, [pc, #152]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81060ec:	681b      	ldr	r3, [r3, #0]
 81060ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81060f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81060f6:	d107      	bne.n	8106108 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81060f8:	f107 030c 	add.w	r3, r7, #12
 81060fc:	4618      	mov	r0, r3
 81060fe:	f000 fbfb 	bl	81068f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106102:	68fb      	ldr	r3, [r7, #12]
 8106104:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106106:	e27f      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106108:	2300      	movs	r3, #0
 810610a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810610c:	e27c      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810610e:	4b1d      	ldr	r3, [pc, #116]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106112:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106116:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106118:	4b1a      	ldr	r3, [pc, #104]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810611a:	681b      	ldr	r3, [r3, #0]
 810611c:	f003 0304 	and.w	r3, r3, #4
 8106120:	2b04      	cmp	r3, #4
 8106122:	d10c      	bne.n	810613e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8106124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106126:	2b00      	cmp	r3, #0
 8106128:	d109      	bne.n	810613e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810612a:	4b16      	ldr	r3, [pc, #88]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810612c:	681b      	ldr	r3, [r3, #0]
 810612e:	08db      	lsrs	r3, r3, #3
 8106130:	f003 0303 	and.w	r3, r3, #3
 8106134:	4a14      	ldr	r2, [pc, #80]	; (8106188 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8106136:	fa22 f303 	lsr.w	r3, r2, r3
 810613a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810613c:	e01e      	b.n	810617c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810613e:	4b11      	ldr	r3, [pc, #68]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106140:	681b      	ldr	r3, [r3, #0]
 8106142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810614a:	d106      	bne.n	810615a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 810614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810614e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106152:	d102      	bne.n	810615a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106154:	4b0d      	ldr	r3, [pc, #52]	; (810618c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8106156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106158:	e010      	b.n	810617c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810615a:	4b0a      	ldr	r3, [pc, #40]	; (8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810615c:	681b      	ldr	r3, [r3, #0]
 810615e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106166:	d106      	bne.n	8106176 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8106168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810616a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810616e:	d102      	bne.n	8106176 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106170:	4b07      	ldr	r3, [pc, #28]	; (8106190 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8106172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106174:	e002      	b.n	810617c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106176:	2300      	movs	r3, #0
 8106178:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810617a:	e245      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 810617c:	e244      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810617e:	4b05      	ldr	r3, [pc, #20]	; (8106194 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8106180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106182:	e241      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106184:	58024400 	.word	0x58024400
 8106188:	03d09000 	.word	0x03d09000
 810618c:	003d0900 	.word	0x003d0900
 8106190:	007a1200 	.word	0x007a1200
 8106194:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8106198:	2300      	movs	r3, #0
 810619a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810619c:	e234      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810619e:	687b      	ldr	r3, [r7, #4]
 81061a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81061a4:	f040 809c 	bne.w	81062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 81061a8:	4b9b      	ldr	r3, [pc, #620]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81061aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81061ac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 81061b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81061b8:	d054      	beq.n	8106264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 81061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81061c0:	f200 808b 	bhi.w	81062da <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 81061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81061ca:	f000 8083 	beq.w	81062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 81061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81061d4:	f200 8081 	bhi.w	81062da <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 81061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81061de:	d02f      	beq.n	8106240 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 81061e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81061e6:	d878      	bhi.n	81062da <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 81061e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061ea:	2b00      	cmp	r3, #0
 81061ec:	d004      	beq.n	81061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 81061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81061f4:	d012      	beq.n	810621c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 81061f6:	e070      	b.n	81062da <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81061f8:	4b87      	ldr	r3, [pc, #540]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81061fa:	681b      	ldr	r3, [r3, #0]
 81061fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106200:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106204:	d107      	bne.n	8106216 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810620a:	4618      	mov	r0, r3
 810620c:	f000 fcc8 	bl	8106ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106212:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106214:	e1f8      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106216:	2300      	movs	r3, #0
 8106218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810621a:	e1f5      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810621c:	4b7e      	ldr	r3, [pc, #504]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810621e:	681b      	ldr	r3, [r3, #0]
 8106220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106228:	d107      	bne.n	810623a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810622a:	f107 0318 	add.w	r3, r7, #24
 810622e:	4618      	mov	r0, r3
 8106230:	f000 fa0e 	bl	8106650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106234:	69bb      	ldr	r3, [r7, #24]
 8106236:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106238:	e1e6      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810623a:	2300      	movs	r3, #0
 810623c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810623e:	e1e3      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106240:	4b75      	ldr	r3, [pc, #468]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106242:	681b      	ldr	r3, [r3, #0]
 8106244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810624c:	d107      	bne.n	810625e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810624e:	f107 030c 	add.w	r3, r7, #12
 8106252:	4618      	mov	r0, r3
 8106254:	f000 fb50 	bl	81068f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106258:	68fb      	ldr	r3, [r7, #12]
 810625a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810625c:	e1d4      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810625e:	2300      	movs	r3, #0
 8106260:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106262:	e1d1      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106264:	4b6c      	ldr	r3, [pc, #432]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810626c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810626e:	4b6a      	ldr	r3, [pc, #424]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106270:	681b      	ldr	r3, [r3, #0]
 8106272:	f003 0304 	and.w	r3, r3, #4
 8106276:	2b04      	cmp	r3, #4
 8106278:	d10c      	bne.n	8106294 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810627c:	2b00      	cmp	r3, #0
 810627e:	d109      	bne.n	8106294 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106280:	4b65      	ldr	r3, [pc, #404]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106282:	681b      	ldr	r3, [r3, #0]
 8106284:	08db      	lsrs	r3, r3, #3
 8106286:	f003 0303 	and.w	r3, r3, #3
 810628a:	4a64      	ldr	r2, [pc, #400]	; (810641c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 810628c:	fa22 f303 	lsr.w	r3, r2, r3
 8106290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106292:	e01e      	b.n	81062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106294:	4b60      	ldr	r3, [pc, #384]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106296:	681b      	ldr	r3, [r3, #0]
 8106298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810629c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81062a0:	d106      	bne.n	81062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 81062a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81062a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81062a8:	d102      	bne.n	81062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81062aa:	4b5d      	ldr	r3, [pc, #372]	; (8106420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 81062ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 81062ae:	e010      	b.n	81062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81062b0:	4b59      	ldr	r3, [pc, #356]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81062b2:	681b      	ldr	r3, [r3, #0]
 81062b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81062b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81062bc:	d106      	bne.n	81062cc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 81062be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81062c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81062c4:	d102      	bne.n	81062cc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81062c6:	4b57      	ldr	r3, [pc, #348]	; (8106424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 81062c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81062ca:	e002      	b.n	81062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81062cc:	2300      	movs	r3, #0
 81062ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81062d0:	e19a      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81062d2:	e199      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81062d4:	4b54      	ldr	r3, [pc, #336]	; (8106428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81062d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81062d8:	e196      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81062da:	2300      	movs	r3, #0
 81062dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81062de:	e193      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81062e0:	687b      	ldr	r3, [r7, #4]
 81062e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81062e6:	d173      	bne.n	81063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 81062e8:	4b4b      	ldr	r3, [pc, #300]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81062ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81062ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81062f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81062f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81062f8:	d02f      	beq.n	810635a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 81062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81062fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106300:	d863      	bhi.n	81063ca <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8106302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106304:	2b00      	cmp	r3, #0
 8106306:	d004      	beq.n	8106312 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8106308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810630a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810630e:	d012      	beq.n	8106336 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8106310:	e05b      	b.n	81063ca <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106312:	4b41      	ldr	r3, [pc, #260]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106314:	681b      	ldr	r3, [r3, #0]
 8106316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810631a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810631e:	d107      	bne.n	8106330 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106320:	f107 0318 	add.w	r3, r7, #24
 8106324:	4618      	mov	r0, r3
 8106326:	f000 f993 	bl	8106650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810632a:	69bb      	ldr	r3, [r7, #24]
 810632c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810632e:	e16b      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106330:	2300      	movs	r3, #0
 8106332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106334:	e168      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106336:	4b38      	ldr	r3, [pc, #224]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106338:	681b      	ldr	r3, [r3, #0]
 810633a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810633e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106342:	d107      	bne.n	8106354 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106344:	f107 030c 	add.w	r3, r7, #12
 8106348:	4618      	mov	r0, r3
 810634a:	f000 fad5 	bl	81068f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810634e:	697b      	ldr	r3, [r7, #20]
 8106350:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106352:	e159      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106354:	2300      	movs	r3, #0
 8106356:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106358:	e156      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810635a:	4b2f      	ldr	r3, [pc, #188]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810635c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810635e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106362:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106364:	4b2c      	ldr	r3, [pc, #176]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106366:	681b      	ldr	r3, [r3, #0]
 8106368:	f003 0304 	and.w	r3, r3, #4
 810636c:	2b04      	cmp	r3, #4
 810636e:	d10c      	bne.n	810638a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8106370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106372:	2b00      	cmp	r3, #0
 8106374:	d109      	bne.n	810638a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106376:	4b28      	ldr	r3, [pc, #160]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106378:	681b      	ldr	r3, [r3, #0]
 810637a:	08db      	lsrs	r3, r3, #3
 810637c:	f003 0303 	and.w	r3, r3, #3
 8106380:	4a26      	ldr	r2, [pc, #152]	; (810641c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8106382:	fa22 f303 	lsr.w	r3, r2, r3
 8106386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106388:	e01e      	b.n	81063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810638a:	4b23      	ldr	r3, [pc, #140]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810638c:	681b      	ldr	r3, [r3, #0]
 810638e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106396:	d106      	bne.n	81063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8106398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810639a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810639e:	d102      	bne.n	81063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81063a0:	4b1f      	ldr	r3, [pc, #124]	; (8106420 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 81063a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81063a4:	e010      	b.n	81063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81063a6:	4b1c      	ldr	r3, [pc, #112]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81063a8:	681b      	ldr	r3, [r3, #0]
 81063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81063ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81063b2:	d106      	bne.n	81063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 81063b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81063b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81063ba:	d102      	bne.n	81063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81063bc:	4b19      	ldr	r3, [pc, #100]	; (8106424 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 81063be:	63fb      	str	r3, [r7, #60]	; 0x3c
 81063c0:	e002      	b.n	81063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81063c2:	2300      	movs	r3, #0
 81063c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81063c6:	e11f      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81063c8:	e11e      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 81063ca:	2300      	movs	r3, #0
 81063cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81063ce:	e11b      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81063d6:	d13e      	bne.n	8106456 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 81063d8:	4b0f      	ldr	r3, [pc, #60]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81063da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81063dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81063e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81063e4:	2b00      	cmp	r3, #0
 81063e6:	d004      	beq.n	81063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 81063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81063ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81063ee:	d01d      	beq.n	810642c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 81063f0:	e02e      	b.n	8106450 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81063f2:	4b09      	ldr	r3, [pc, #36]	; (8106418 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81063f4:	681b      	ldr	r3, [r3, #0]
 81063f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81063fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81063fe:	d107      	bne.n	8106410 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106404:	4618      	mov	r0, r3
 8106406:	f000 fbcb 	bl	8106ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810640c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810640e:	e0fb      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106410:	2300      	movs	r3, #0
 8106412:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106414:	e0f8      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106416:	bf00      	nop
 8106418:	58024400 	.word	0x58024400
 810641c:	03d09000 	.word	0x03d09000
 8106420:	003d0900 	.word	0x003d0900
 8106424:	007a1200 	.word	0x007a1200
 8106428:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810642c:	4b79      	ldr	r3, [pc, #484]	; (8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810642e:	681b      	ldr	r3, [r3, #0]
 8106430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106438:	d107      	bne.n	810644a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810643a:	f107 0318 	add.w	r3, r7, #24
 810643e:	4618      	mov	r0, r3
 8106440:	f000 f906 	bl	8106650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8106444:	6a3b      	ldr	r3, [r7, #32]
 8106446:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106448:	e0de      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810644a:	2300      	movs	r3, #0
 810644c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810644e:	e0db      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8106450:	2300      	movs	r3, #0
 8106452:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106454:	e0d8      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810645c:	f040 8085 	bne.w	810656a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8106460:	4b6c      	ldr	r3, [pc, #432]	; (8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106464:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8106468:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810646c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106470:	d06b      	beq.n	810654a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8106472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106478:	d874      	bhi.n	8106564 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810647c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106480:	d056      	beq.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8106482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106488:	d86c      	bhi.n	8106564 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810648c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106490:	d03b      	beq.n	810650a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8106492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106494:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106498:	d864      	bhi.n	8106564 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810649c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81064a0:	d021      	beq.n	81064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 81064a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81064a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81064a8:	d85c      	bhi.n	8106564 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 81064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81064ac:	2b00      	cmp	r3, #0
 81064ae:	d004      	beq.n	81064ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81064b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81064b6:	d004      	beq.n	81064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 81064b8:	e054      	b.n	8106564 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81064ba:	f000 f8b3 	bl	8106624 <HAL_RCCEx_GetD3PCLK1Freq>
 81064be:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 81064c0:	e0a2      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81064c2:	4b54      	ldr	r3, [pc, #336]	; (8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81064c4:	681b      	ldr	r3, [r3, #0]
 81064c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81064ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81064ce:	d107      	bne.n	81064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81064d0:	f107 0318 	add.w	r3, r7, #24
 81064d4:	4618      	mov	r0, r3
 81064d6:	f000 f8bb 	bl	8106650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81064da:	69fb      	ldr	r3, [r7, #28]
 81064dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81064de:	e093      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81064e0:	2300      	movs	r3, #0
 81064e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81064e4:	e090      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81064e6:	4b4b      	ldr	r3, [pc, #300]	; (8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81064e8:	681b      	ldr	r3, [r3, #0]
 81064ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81064ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81064f2:	d107      	bne.n	8106504 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81064f4:	f107 030c 	add.w	r3, r7, #12
 81064f8:	4618      	mov	r0, r3
 81064fa:	f000 f9fd 	bl	81068f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81064fe:	693b      	ldr	r3, [r7, #16]
 8106500:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106502:	e081      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106504:	2300      	movs	r3, #0
 8106506:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106508:	e07e      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810650a:	4b42      	ldr	r3, [pc, #264]	; (8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810650c:	681b      	ldr	r3, [r3, #0]
 810650e:	f003 0304 	and.w	r3, r3, #4
 8106512:	2b04      	cmp	r3, #4
 8106514:	d109      	bne.n	810652a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106516:	4b3f      	ldr	r3, [pc, #252]	; (8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106518:	681b      	ldr	r3, [r3, #0]
 810651a:	08db      	lsrs	r3, r3, #3
 810651c:	f003 0303 	and.w	r3, r3, #3
 8106520:	4a3d      	ldr	r2, [pc, #244]	; (8106618 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8106522:	fa22 f303 	lsr.w	r3, r2, r3
 8106526:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106528:	e06e      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810652a:	2300      	movs	r3, #0
 810652c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810652e:	e06b      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106530:	4b38      	ldr	r3, [pc, #224]	; (8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106532:	681b      	ldr	r3, [r3, #0]
 8106534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810653c:	d102      	bne.n	8106544 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 810653e:	4b37      	ldr	r3, [pc, #220]	; (810661c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8106540:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106542:	e061      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106544:	2300      	movs	r3, #0
 8106546:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106548:	e05e      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810654a:	4b32      	ldr	r3, [pc, #200]	; (8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810654c:	681b      	ldr	r3, [r3, #0]
 810654e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106556:	d102      	bne.n	810655e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8106558:	4b31      	ldr	r3, [pc, #196]	; (8106620 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810655a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810655c:	e054      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810655e:	2300      	movs	r3, #0
 8106560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106562:	e051      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8106564:	2300      	movs	r3, #0
 8106566:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106568:	e04e      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810656a:	687b      	ldr	r3, [r7, #4]
 810656c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106570:	d148      	bne.n	8106604 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8106572:	4b28      	ldr	r3, [pc, #160]	; (8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106576:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810657a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810657e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106582:	d02a      	beq.n	81065da <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8106584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810658a:	d838      	bhi.n	81065fe <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 810658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810658e:	2b00      	cmp	r3, #0
 8106590:	d004      	beq.n	810659c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8106592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106598:	d00d      	beq.n	81065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 810659a:	e030      	b.n	81065fe <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810659c:	4b1d      	ldr	r3, [pc, #116]	; (8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810659e:	681b      	ldr	r3, [r3, #0]
 81065a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81065a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81065a8:	d102      	bne.n	81065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 81065aa:	4b1d      	ldr	r3, [pc, #116]	; (8106620 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 81065ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81065ae:	e02b      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81065b0:	2300      	movs	r3, #0
 81065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81065b4:	e028      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81065b6:	4b17      	ldr	r3, [pc, #92]	; (8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81065b8:	681b      	ldr	r3, [r3, #0]
 81065ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81065be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81065c2:	d107      	bne.n	81065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81065c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81065c8:	4618      	mov	r0, r3
 81065ca:	f000 fae9 	bl	8106ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81065d2:	e019      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81065d4:	2300      	movs	r3, #0
 81065d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81065d8:	e016      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81065da:	4b0e      	ldr	r3, [pc, #56]	; (8106614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81065dc:	681b      	ldr	r3, [r3, #0]
 81065de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81065e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81065e6:	d107      	bne.n	81065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81065e8:	f107 0318 	add.w	r3, r7, #24
 81065ec:	4618      	mov	r0, r3
 81065ee:	f000 f82f 	bl	8106650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81065f2:	69fb      	ldr	r3, [r7, #28]
 81065f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81065f6:	e007      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81065f8:	2300      	movs	r3, #0
 81065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81065fc:	e004      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81065fe:	2300      	movs	r3, #0
 8106600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106602:	e001      	b.n	8106608 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8106604:	2300      	movs	r3, #0
 8106606:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8106608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810660a:	4618      	mov	r0, r3
 810660c:	3740      	adds	r7, #64	; 0x40
 810660e:	46bd      	mov	sp, r7
 8106610:	bd80      	pop	{r7, pc}
 8106612:	bf00      	nop
 8106614:	58024400 	.word	0x58024400
 8106618:	03d09000 	.word	0x03d09000
 810661c:	003d0900 	.word	0x003d0900
 8106620:	007a1200 	.word	0x007a1200

08106624 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106624:	b580      	push	{r7, lr}
 8106626:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106628:	f7fe fb86 	bl	8104d38 <HAL_RCC_GetHCLKFreq>
 810662c:	4602      	mov	r2, r0
 810662e:	4b06      	ldr	r3, [pc, #24]	; (8106648 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106630:	6a1b      	ldr	r3, [r3, #32]
 8106632:	091b      	lsrs	r3, r3, #4
 8106634:	f003 0307 	and.w	r3, r3, #7
 8106638:	4904      	ldr	r1, [pc, #16]	; (810664c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810663a:	5ccb      	ldrb	r3, [r1, r3]
 810663c:	f003 031f 	and.w	r3, r3, #31
 8106640:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106644:	4618      	mov	r0, r3
 8106646:	bd80      	pop	{r7, pc}
 8106648:	58024400 	.word	0x58024400
 810664c:	0810a3b8 	.word	0x0810a3b8

08106650 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106650:	b480      	push	{r7}
 8106652:	b089      	sub	sp, #36	; 0x24
 8106654:	af00      	add	r7, sp, #0
 8106656:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106658:	4ba1      	ldr	r3, [pc, #644]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810665c:	f003 0303 	and.w	r3, r3, #3
 8106660:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8106662:	4b9f      	ldr	r3, [pc, #636]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106666:	0b1b      	lsrs	r3, r3, #12
 8106668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810666c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810666e:	4b9c      	ldr	r3, [pc, #624]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106672:	091b      	lsrs	r3, r3, #4
 8106674:	f003 0301 	and.w	r3, r3, #1
 8106678:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810667a:	4b99      	ldr	r3, [pc, #612]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810667c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810667e:	08db      	lsrs	r3, r3, #3
 8106680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106684:	693a      	ldr	r2, [r7, #16]
 8106686:	fb02 f303 	mul.w	r3, r2, r3
 810668a:	ee07 3a90 	vmov	s15, r3
 810668e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106692:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106696:	697b      	ldr	r3, [r7, #20]
 8106698:	2b00      	cmp	r3, #0
 810669a:	f000 8111 	beq.w	81068c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810669e:	69bb      	ldr	r3, [r7, #24]
 81066a0:	2b02      	cmp	r3, #2
 81066a2:	f000 8083 	beq.w	81067ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81066a6:	69bb      	ldr	r3, [r7, #24]
 81066a8:	2b02      	cmp	r3, #2
 81066aa:	f200 80a1 	bhi.w	81067f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81066ae:	69bb      	ldr	r3, [r7, #24]
 81066b0:	2b00      	cmp	r3, #0
 81066b2:	d003      	beq.n	81066bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81066b4:	69bb      	ldr	r3, [r7, #24]
 81066b6:	2b01      	cmp	r3, #1
 81066b8:	d056      	beq.n	8106768 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81066ba:	e099      	b.n	81067f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81066bc:	4b88      	ldr	r3, [pc, #544]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81066be:	681b      	ldr	r3, [r3, #0]
 81066c0:	f003 0320 	and.w	r3, r3, #32
 81066c4:	2b00      	cmp	r3, #0
 81066c6:	d02d      	beq.n	8106724 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81066c8:	4b85      	ldr	r3, [pc, #532]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81066ca:	681b      	ldr	r3, [r3, #0]
 81066cc:	08db      	lsrs	r3, r3, #3
 81066ce:	f003 0303 	and.w	r3, r3, #3
 81066d2:	4a84      	ldr	r2, [pc, #528]	; (81068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81066d4:	fa22 f303 	lsr.w	r3, r2, r3
 81066d8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81066da:	68bb      	ldr	r3, [r7, #8]
 81066dc:	ee07 3a90 	vmov	s15, r3
 81066e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81066e4:	697b      	ldr	r3, [r7, #20]
 81066e6:	ee07 3a90 	vmov	s15, r3
 81066ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81066f2:	4b7b      	ldr	r3, [pc, #492]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81066f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81066f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81066fa:	ee07 3a90 	vmov	s15, r3
 81066fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106702:	ed97 6a03 	vldr	s12, [r7, #12]
 8106706:	eddf 5a78 	vldr	s11, [pc, #480]	; 81068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810670a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810670e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810671a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810671e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106722:	e087      	b.n	8106834 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106724:	697b      	ldr	r3, [r7, #20]
 8106726:	ee07 3a90 	vmov	s15, r3
 810672a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810672e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81068ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8106732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106736:	4b6a      	ldr	r3, [pc, #424]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810673a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810673e:	ee07 3a90 	vmov	s15, r3
 8106742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106746:	ed97 6a03 	vldr	s12, [r7, #12]
 810674a:	eddf 5a67 	vldr	s11, [pc, #412]	; 81068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810674e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810675a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810675e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106762:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106766:	e065      	b.n	8106834 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106768:	697b      	ldr	r3, [r7, #20]
 810676a:	ee07 3a90 	vmov	s15, r3
 810676e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106772:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810677a:	4b59      	ldr	r3, [pc, #356]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810677e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106782:	ee07 3a90 	vmov	s15, r3
 8106786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810678a:	ed97 6a03 	vldr	s12, [r7, #12]
 810678e:	eddf 5a56 	vldr	s11, [pc, #344]	; 81068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810679a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810679e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81067aa:	e043      	b.n	8106834 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81067ac:	697b      	ldr	r3, [r7, #20]
 81067ae:	ee07 3a90 	vmov	s15, r3
 81067b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81068f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81067ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067be:	4b48      	ldr	r3, [pc, #288]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81067c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81067c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81067c6:	ee07 3a90 	vmov	s15, r3
 81067ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81067d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 81068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81067d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81067da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81067de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81067e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81067ee:	e021      	b.n	8106834 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81067f0:	697b      	ldr	r3, [r7, #20]
 81067f2:	ee07 3a90 	vmov	s15, r3
 81067f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81067fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106802:	4b37      	ldr	r3, [pc, #220]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810680a:	ee07 3a90 	vmov	s15, r3
 810680e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106812:	ed97 6a03 	vldr	s12, [r7, #12]
 8106816:	eddf 5a34 	vldr	s11, [pc, #208]	; 81068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810681a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810681e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810682a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810682e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106832:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8106834:	4b2a      	ldr	r3, [pc, #168]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106838:	0a5b      	lsrs	r3, r3, #9
 810683a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810683e:	ee07 3a90 	vmov	s15, r3
 8106842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810684a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810684e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810685a:	ee17 2a90 	vmov	r2, s15
 810685e:	687b      	ldr	r3, [r7, #4]
 8106860:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106862:	4b1f      	ldr	r3, [pc, #124]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106866:	0c1b      	lsrs	r3, r3, #16
 8106868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810686c:	ee07 3a90 	vmov	s15, r3
 8106870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106878:	ee37 7a87 	vadd.f32	s14, s15, s14
 810687c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106888:	ee17 2a90 	vmov	r2, s15
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8106890:	4b13      	ldr	r3, [pc, #76]	; (81068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106894:	0e1b      	lsrs	r3, r3, #24
 8106896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810689a:	ee07 3a90 	vmov	s15, r3
 810689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81068a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81068aa:	edd7 6a07 	vldr	s13, [r7, #28]
 81068ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81068b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81068b6:	ee17 2a90 	vmov	r2, s15
 81068ba:	687b      	ldr	r3, [r7, #4]
 81068bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81068be:	e008      	b.n	81068d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	2200      	movs	r2, #0
 81068c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	2200      	movs	r2, #0
 81068ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	2200      	movs	r2, #0
 81068d0:	609a      	str	r2, [r3, #8]
}
 81068d2:	bf00      	nop
 81068d4:	3724      	adds	r7, #36	; 0x24
 81068d6:	46bd      	mov	sp, r7
 81068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068dc:	4770      	bx	lr
 81068de:	bf00      	nop
 81068e0:	58024400 	.word	0x58024400
 81068e4:	03d09000 	.word	0x03d09000
 81068e8:	46000000 	.word	0x46000000
 81068ec:	4c742400 	.word	0x4c742400
 81068f0:	4a742400 	.word	0x4a742400
 81068f4:	4af42400 	.word	0x4af42400

081068f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81068f8:	b480      	push	{r7}
 81068fa:	b089      	sub	sp, #36	; 0x24
 81068fc:	af00      	add	r7, sp, #0
 81068fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106900:	4ba1      	ldr	r3, [pc, #644]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106904:	f003 0303 	and.w	r3, r3, #3
 8106908:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810690a:	4b9f      	ldr	r3, [pc, #636]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810690e:	0d1b      	lsrs	r3, r3, #20
 8106910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106914:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106916:	4b9c      	ldr	r3, [pc, #624]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810691a:	0a1b      	lsrs	r3, r3, #8
 810691c:	f003 0301 	and.w	r3, r3, #1
 8106920:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8106922:	4b99      	ldr	r3, [pc, #612]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106926:	08db      	lsrs	r3, r3, #3
 8106928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810692c:	693a      	ldr	r2, [r7, #16]
 810692e:	fb02 f303 	mul.w	r3, r2, r3
 8106932:	ee07 3a90 	vmov	s15, r3
 8106936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810693a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810693e:	697b      	ldr	r3, [r7, #20]
 8106940:	2b00      	cmp	r3, #0
 8106942:	f000 8111 	beq.w	8106b68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8106946:	69bb      	ldr	r3, [r7, #24]
 8106948:	2b02      	cmp	r3, #2
 810694a:	f000 8083 	beq.w	8106a54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810694e:	69bb      	ldr	r3, [r7, #24]
 8106950:	2b02      	cmp	r3, #2
 8106952:	f200 80a1 	bhi.w	8106a98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8106956:	69bb      	ldr	r3, [r7, #24]
 8106958:	2b00      	cmp	r3, #0
 810695a:	d003      	beq.n	8106964 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810695c:	69bb      	ldr	r3, [r7, #24]
 810695e:	2b01      	cmp	r3, #1
 8106960:	d056      	beq.n	8106a10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106962:	e099      	b.n	8106a98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106964:	4b88      	ldr	r3, [pc, #544]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106966:	681b      	ldr	r3, [r3, #0]
 8106968:	f003 0320 	and.w	r3, r3, #32
 810696c:	2b00      	cmp	r3, #0
 810696e:	d02d      	beq.n	81069cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106970:	4b85      	ldr	r3, [pc, #532]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106972:	681b      	ldr	r3, [r3, #0]
 8106974:	08db      	lsrs	r3, r3, #3
 8106976:	f003 0303 	and.w	r3, r3, #3
 810697a:	4a84      	ldr	r2, [pc, #528]	; (8106b8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810697c:	fa22 f303 	lsr.w	r3, r2, r3
 8106980:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106982:	68bb      	ldr	r3, [r7, #8]
 8106984:	ee07 3a90 	vmov	s15, r3
 8106988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810698c:	697b      	ldr	r3, [r7, #20]
 810698e:	ee07 3a90 	vmov	s15, r3
 8106992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810699a:	4b7b      	ldr	r3, [pc, #492]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810699e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81069a2:	ee07 3a90 	vmov	s15, r3
 81069a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81069aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81069ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106b90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81069b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81069b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81069ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81069be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81069c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81069c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81069ca:	e087      	b.n	8106adc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81069cc:	697b      	ldr	r3, [r7, #20]
 81069ce:	ee07 3a90 	vmov	s15, r3
 81069d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106b94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81069da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81069de:	4b6a      	ldr	r3, [pc, #424]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81069e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81069e6:	ee07 3a90 	vmov	s15, r3
 81069ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81069ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81069f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106b90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81069f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81069fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81069fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106a0e:	e065      	b.n	8106adc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106a10:	697b      	ldr	r3, [r7, #20]
 8106a12:	ee07 3a90 	vmov	s15, r3
 8106a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a22:	4b59      	ldr	r3, [pc, #356]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a2a:	ee07 3a90 	vmov	s15, r3
 8106a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8106a36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106b90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106a52:	e043      	b.n	8106adc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106a54:	697b      	ldr	r3, [r7, #20]
 8106a56:	ee07 3a90 	vmov	s15, r3
 8106a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a66:	4b48      	ldr	r3, [pc, #288]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a6e:	ee07 3a90 	vmov	s15, r3
 8106a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8106a7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106b90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106a96:	e021      	b.n	8106adc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106a98:	697b      	ldr	r3, [r7, #20]
 8106a9a:	ee07 3a90 	vmov	s15, r3
 8106a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106aa2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106aaa:	4b37      	ldr	r3, [pc, #220]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106ab2:	ee07 3a90 	vmov	s15, r3
 8106ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8106abe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106b90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106ada:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8106adc:	4b2a      	ldr	r3, [pc, #168]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106ae0:	0a5b      	lsrs	r3, r3, #9
 8106ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106ae6:	ee07 3a90 	vmov	s15, r3
 8106aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8106afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106b02:	ee17 2a90 	vmov	r2, s15
 8106b06:	687b      	ldr	r3, [r7, #4]
 8106b08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8106b0a:	4b1f      	ldr	r3, [pc, #124]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106b0e:	0c1b      	lsrs	r3, r3, #16
 8106b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106b14:	ee07 3a90 	vmov	s15, r3
 8106b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106b20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106b24:	edd7 6a07 	vldr	s13, [r7, #28]
 8106b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106b30:	ee17 2a90 	vmov	r2, s15
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8106b38:	4b13      	ldr	r3, [pc, #76]	; (8106b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106b3c:	0e1b      	lsrs	r3, r3, #24
 8106b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106b42:	ee07 3a90 	vmov	s15, r3
 8106b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106b4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106b52:	edd7 6a07 	vldr	s13, [r7, #28]
 8106b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106b5e:	ee17 2a90 	vmov	r2, s15
 8106b62:	687b      	ldr	r3, [r7, #4]
 8106b64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106b66:	e008      	b.n	8106b7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	2200      	movs	r2, #0
 8106b6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106b6e:	687b      	ldr	r3, [r7, #4]
 8106b70:	2200      	movs	r2, #0
 8106b72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106b74:	687b      	ldr	r3, [r7, #4]
 8106b76:	2200      	movs	r2, #0
 8106b78:	609a      	str	r2, [r3, #8]
}
 8106b7a:	bf00      	nop
 8106b7c:	3724      	adds	r7, #36	; 0x24
 8106b7e:	46bd      	mov	sp, r7
 8106b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b84:	4770      	bx	lr
 8106b86:	bf00      	nop
 8106b88:	58024400 	.word	0x58024400
 8106b8c:	03d09000 	.word	0x03d09000
 8106b90:	46000000 	.word	0x46000000
 8106b94:	4c742400 	.word	0x4c742400
 8106b98:	4a742400 	.word	0x4a742400
 8106b9c:	4af42400 	.word	0x4af42400

08106ba0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8106ba0:	b480      	push	{r7}
 8106ba2:	b089      	sub	sp, #36	; 0x24
 8106ba4:	af00      	add	r7, sp, #0
 8106ba6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106ba8:	4ba0      	ldr	r3, [pc, #640]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106bac:	f003 0303 	and.w	r3, r3, #3
 8106bb0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8106bb2:	4b9e      	ldr	r3, [pc, #632]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106bb6:	091b      	lsrs	r3, r3, #4
 8106bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106bbc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8106bbe:	4b9b      	ldr	r3, [pc, #620]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106bc2:	f003 0301 	and.w	r3, r3, #1
 8106bc6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8106bc8:	4b98      	ldr	r3, [pc, #608]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106bcc:	08db      	lsrs	r3, r3, #3
 8106bce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106bd2:	693a      	ldr	r2, [r7, #16]
 8106bd4:	fb02 f303 	mul.w	r3, r2, r3
 8106bd8:	ee07 3a90 	vmov	s15, r3
 8106bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106be0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8106be4:	697b      	ldr	r3, [r7, #20]
 8106be6:	2b00      	cmp	r3, #0
 8106be8:	f000 8111 	beq.w	8106e0e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8106bec:	69bb      	ldr	r3, [r7, #24]
 8106bee:	2b02      	cmp	r3, #2
 8106bf0:	f000 8083 	beq.w	8106cfa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8106bf4:	69bb      	ldr	r3, [r7, #24]
 8106bf6:	2b02      	cmp	r3, #2
 8106bf8:	f200 80a1 	bhi.w	8106d3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8106bfc:	69bb      	ldr	r3, [r7, #24]
 8106bfe:	2b00      	cmp	r3, #0
 8106c00:	d003      	beq.n	8106c0a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8106c02:	69bb      	ldr	r3, [r7, #24]
 8106c04:	2b01      	cmp	r3, #1
 8106c06:	d056      	beq.n	8106cb6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8106c08:	e099      	b.n	8106d3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106c0a:	4b88      	ldr	r3, [pc, #544]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106c0c:	681b      	ldr	r3, [r3, #0]
 8106c0e:	f003 0320 	and.w	r3, r3, #32
 8106c12:	2b00      	cmp	r3, #0
 8106c14:	d02d      	beq.n	8106c72 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106c16:	4b85      	ldr	r3, [pc, #532]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106c18:	681b      	ldr	r3, [r3, #0]
 8106c1a:	08db      	lsrs	r3, r3, #3
 8106c1c:	f003 0303 	and.w	r3, r3, #3
 8106c20:	4a83      	ldr	r2, [pc, #524]	; (8106e30 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8106c22:	fa22 f303 	lsr.w	r3, r2, r3
 8106c26:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106c28:	68bb      	ldr	r3, [r7, #8]
 8106c2a:	ee07 3a90 	vmov	s15, r3
 8106c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c32:	697b      	ldr	r3, [r7, #20]
 8106c34:	ee07 3a90 	vmov	s15, r3
 8106c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c40:	4b7a      	ldr	r3, [pc, #488]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c48:	ee07 3a90 	vmov	s15, r3
 8106c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c50:	ed97 6a03 	vldr	s12, [r7, #12]
 8106c54:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106e34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106c60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106c6c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106c70:	e087      	b.n	8106d82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106c72:	697b      	ldr	r3, [r7, #20]
 8106c74:	ee07 3a90 	vmov	s15, r3
 8106c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c7c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106e38 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106c84:	4b69      	ldr	r3, [pc, #420]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106c8c:	ee07 3a90 	vmov	s15, r3
 8106c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106c94:	ed97 6a03 	vldr	s12, [r7, #12]
 8106c98:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106e34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106c9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106cb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106cb4:	e065      	b.n	8106d82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106cb6:	697b      	ldr	r3, [r7, #20]
 8106cb8:	ee07 3a90 	vmov	s15, r3
 8106cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cc0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106e3c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8106cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106cc8:	4b58      	ldr	r3, [pc, #352]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106cd0:	ee07 3a90 	vmov	s15, r3
 8106cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106cd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8106cdc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106e34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106ce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106cf4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106cf8:	e043      	b.n	8106d82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106cfa:	697b      	ldr	r3, [r7, #20]
 8106cfc:	ee07 3a90 	vmov	s15, r3
 8106d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d04:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106e40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8106d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d0c:	4b47      	ldr	r3, [pc, #284]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d14:	ee07 3a90 	vmov	s15, r3
 8106d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106d20:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106e34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106d3c:	e021      	b.n	8106d82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106d3e:	697b      	ldr	r3, [r7, #20]
 8106d40:	ee07 3a90 	vmov	s15, r3
 8106d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d48:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8106e38 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d50:	4b36      	ldr	r3, [pc, #216]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d58:	ee07 3a90 	vmov	s15, r3
 8106d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d60:	ed97 6a03 	vldr	s12, [r7, #12]
 8106d64:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106e34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106d80:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8106d82:	4b2a      	ldr	r3, [pc, #168]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106d86:	0a5b      	lsrs	r3, r3, #9
 8106d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106d8c:	ee07 3a90 	vmov	s15, r3
 8106d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106da8:	ee17 2a90 	vmov	r2, s15
 8106dac:	687b      	ldr	r3, [r7, #4]
 8106dae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8106db0:	4b1e      	ldr	r3, [pc, #120]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106db4:	0c1b      	lsrs	r3, r3, #16
 8106db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106dba:	ee07 3a90 	vmov	s15, r3
 8106dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8106dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106dd6:	ee17 2a90 	vmov	r2, s15
 8106dda:	687b      	ldr	r3, [r7, #4]
 8106ddc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8106dde:	4b13      	ldr	r3, [pc, #76]	; (8106e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106de2:	0e1b      	lsrs	r3, r3, #24
 8106de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106de8:	ee07 3a90 	vmov	s15, r3
 8106dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106df4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8106dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106e04:	ee17 2a90 	vmov	r2, s15
 8106e08:	687b      	ldr	r3, [r7, #4]
 8106e0a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8106e0c:	e008      	b.n	8106e20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8106e0e:	687b      	ldr	r3, [r7, #4]
 8106e10:	2200      	movs	r2, #0
 8106e12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	2200      	movs	r2, #0
 8106e18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8106e1a:	687b      	ldr	r3, [r7, #4]
 8106e1c:	2200      	movs	r2, #0
 8106e1e:	609a      	str	r2, [r3, #8]
}
 8106e20:	bf00      	nop
 8106e22:	3724      	adds	r7, #36	; 0x24
 8106e24:	46bd      	mov	sp, r7
 8106e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e2a:	4770      	bx	lr
 8106e2c:	58024400 	.word	0x58024400
 8106e30:	03d09000 	.word	0x03d09000
 8106e34:	46000000 	.word	0x46000000
 8106e38:	4c742400 	.word	0x4c742400
 8106e3c:	4a742400 	.word	0x4a742400
 8106e40:	4af42400 	.word	0x4af42400

08106e44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106e44:	b580      	push	{r7, lr}
 8106e46:	b084      	sub	sp, #16
 8106e48:	af00      	add	r7, sp, #0
 8106e4a:	6078      	str	r0, [r7, #4]
 8106e4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106e4e:	2300      	movs	r3, #0
 8106e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106e52:	4b54      	ldr	r3, [pc, #336]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106e56:	f003 0303 	and.w	r3, r3, #3
 8106e5a:	2b03      	cmp	r3, #3
 8106e5c:	d101      	bne.n	8106e62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8106e5e:	2301      	movs	r3, #1
 8106e60:	e09b      	b.n	8106f9a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106e62:	4b50      	ldr	r3, [pc, #320]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106e64:	681b      	ldr	r3, [r3, #0]
 8106e66:	4a4f      	ldr	r2, [pc, #316]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106e68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8106e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106e6e:	f7fb fb5d 	bl	810252c <HAL_GetTick>
 8106e72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106e74:	e008      	b.n	8106e88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106e76:	f7fb fb59 	bl	810252c <HAL_GetTick>
 8106e7a:	4602      	mov	r2, r0
 8106e7c:	68bb      	ldr	r3, [r7, #8]
 8106e7e:	1ad3      	subs	r3, r2, r3
 8106e80:	2b02      	cmp	r3, #2
 8106e82:	d901      	bls.n	8106e88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106e84:	2303      	movs	r3, #3
 8106e86:	e088      	b.n	8106f9a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106e88:	4b46      	ldr	r3, [pc, #280]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106e8a:	681b      	ldr	r3, [r3, #0]
 8106e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106e90:	2b00      	cmp	r3, #0
 8106e92:	d1f0      	bne.n	8106e76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106e94:	4b43      	ldr	r3, [pc, #268]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106e98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8106e9c:	687b      	ldr	r3, [r7, #4]
 8106e9e:	681b      	ldr	r3, [r3, #0]
 8106ea0:	031b      	lsls	r3, r3, #12
 8106ea2:	4940      	ldr	r1, [pc, #256]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106ea4:	4313      	orrs	r3, r2
 8106ea6:	628b      	str	r3, [r1, #40]	; 0x28
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	685b      	ldr	r3, [r3, #4]
 8106eac:	3b01      	subs	r3, #1
 8106eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106eb2:	687b      	ldr	r3, [r7, #4]
 8106eb4:	689b      	ldr	r3, [r3, #8]
 8106eb6:	3b01      	subs	r3, #1
 8106eb8:	025b      	lsls	r3, r3, #9
 8106eba:	b29b      	uxth	r3, r3
 8106ebc:	431a      	orrs	r2, r3
 8106ebe:	687b      	ldr	r3, [r7, #4]
 8106ec0:	68db      	ldr	r3, [r3, #12]
 8106ec2:	3b01      	subs	r3, #1
 8106ec4:	041b      	lsls	r3, r3, #16
 8106ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106eca:	431a      	orrs	r2, r3
 8106ecc:	687b      	ldr	r3, [r7, #4]
 8106ece:	691b      	ldr	r3, [r3, #16]
 8106ed0:	3b01      	subs	r3, #1
 8106ed2:	061b      	lsls	r3, r3, #24
 8106ed4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106ed8:	4932      	ldr	r1, [pc, #200]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106eda:	4313      	orrs	r3, r2
 8106edc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8106ede:	4b31      	ldr	r3, [pc, #196]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ee2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8106ee6:	687b      	ldr	r3, [r7, #4]
 8106ee8:	695b      	ldr	r3, [r3, #20]
 8106eea:	492e      	ldr	r1, [pc, #184]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106eec:	4313      	orrs	r3, r2
 8106eee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8106ef0:	4b2c      	ldr	r3, [pc, #176]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ef4:	f023 0220 	bic.w	r2, r3, #32
 8106ef8:	687b      	ldr	r3, [r7, #4]
 8106efa:	699b      	ldr	r3, [r3, #24]
 8106efc:	4929      	ldr	r1, [pc, #164]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106efe:	4313      	orrs	r3, r2
 8106f00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8106f02:	4b28      	ldr	r3, [pc, #160]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f06:	4a27      	ldr	r2, [pc, #156]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f08:	f023 0310 	bic.w	r3, r3, #16
 8106f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8106f0e:	4b25      	ldr	r3, [pc, #148]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106f16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106f1a:	687a      	ldr	r2, [r7, #4]
 8106f1c:	69d2      	ldr	r2, [r2, #28]
 8106f1e:	00d2      	lsls	r2, r2, #3
 8106f20:	4920      	ldr	r1, [pc, #128]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f22:	4313      	orrs	r3, r2
 8106f24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106f26:	4b1f      	ldr	r3, [pc, #124]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f2a:	4a1e      	ldr	r2, [pc, #120]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f2c:	f043 0310 	orr.w	r3, r3, #16
 8106f30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8106f32:	683b      	ldr	r3, [r7, #0]
 8106f34:	2b00      	cmp	r3, #0
 8106f36:	d106      	bne.n	8106f46 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106f38:	4b1a      	ldr	r3, [pc, #104]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f3c:	4a19      	ldr	r2, [pc, #100]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8106f42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106f44:	e00f      	b.n	8106f66 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8106f46:	683b      	ldr	r3, [r7, #0]
 8106f48:	2b01      	cmp	r3, #1
 8106f4a:	d106      	bne.n	8106f5a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8106f4c:	4b15      	ldr	r3, [pc, #84]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f50:	4a14      	ldr	r2, [pc, #80]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106f56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106f58:	e005      	b.n	8106f66 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8106f5a:	4b12      	ldr	r3, [pc, #72]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f5e:	4a11      	ldr	r2, [pc, #68]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106f64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106f66:	4b0f      	ldr	r3, [pc, #60]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f68:	681b      	ldr	r3, [r3, #0]
 8106f6a:	4a0e      	ldr	r2, [pc, #56]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8106f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106f72:	f7fb fadb 	bl	810252c <HAL_GetTick>
 8106f76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106f78:	e008      	b.n	8106f8c <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106f7a:	f7fb fad7 	bl	810252c <HAL_GetTick>
 8106f7e:	4602      	mov	r2, r0
 8106f80:	68bb      	ldr	r3, [r7, #8]
 8106f82:	1ad3      	subs	r3, r2, r3
 8106f84:	2b02      	cmp	r3, #2
 8106f86:	d901      	bls.n	8106f8c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106f88:	2303      	movs	r3, #3
 8106f8a:	e006      	b.n	8106f9a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106f8c:	4b05      	ldr	r3, [pc, #20]	; (8106fa4 <RCCEx_PLL2_Config+0x160>)
 8106f8e:	681b      	ldr	r3, [r3, #0]
 8106f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106f94:	2b00      	cmp	r3, #0
 8106f96:	d0f0      	beq.n	8106f7a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8106f9a:	4618      	mov	r0, r3
 8106f9c:	3710      	adds	r7, #16
 8106f9e:	46bd      	mov	sp, r7
 8106fa0:	bd80      	pop	{r7, pc}
 8106fa2:	bf00      	nop
 8106fa4:	58024400 	.word	0x58024400

08106fa8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106fa8:	b580      	push	{r7, lr}
 8106faa:	b084      	sub	sp, #16
 8106fac:	af00      	add	r7, sp, #0
 8106fae:	6078      	str	r0, [r7, #4]
 8106fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106fb2:	2300      	movs	r3, #0
 8106fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106fb6:	4b54      	ldr	r3, [pc, #336]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8106fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106fba:	f003 0303 	and.w	r3, r3, #3
 8106fbe:	2b03      	cmp	r3, #3
 8106fc0:	d101      	bne.n	8106fc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8106fc2:	2301      	movs	r3, #1
 8106fc4:	e09b      	b.n	81070fe <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106fc6:	4b50      	ldr	r3, [pc, #320]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8106fc8:	681b      	ldr	r3, [r3, #0]
 8106fca:	4a4f      	ldr	r2, [pc, #316]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8106fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106fd2:	f7fb faab 	bl	810252c <HAL_GetTick>
 8106fd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106fd8:	e008      	b.n	8106fec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8106fda:	f7fb faa7 	bl	810252c <HAL_GetTick>
 8106fde:	4602      	mov	r2, r0
 8106fe0:	68bb      	ldr	r3, [r7, #8]
 8106fe2:	1ad3      	subs	r3, r2, r3
 8106fe4:	2b02      	cmp	r3, #2
 8106fe6:	d901      	bls.n	8106fec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106fe8:	2303      	movs	r3, #3
 8106fea:	e088      	b.n	81070fe <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106fec:	4b46      	ldr	r3, [pc, #280]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8106fee:	681b      	ldr	r3, [r3, #0]
 8106ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106ff4:	2b00      	cmp	r3, #0
 8106ff6:	d1f0      	bne.n	8106fda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106ff8:	4b43      	ldr	r3, [pc, #268]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8106ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106ffc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8107000:	687b      	ldr	r3, [r7, #4]
 8107002:	681b      	ldr	r3, [r3, #0]
 8107004:	051b      	lsls	r3, r3, #20
 8107006:	4940      	ldr	r1, [pc, #256]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8107008:	4313      	orrs	r3, r2
 810700a:	628b      	str	r3, [r1, #40]	; 0x28
 810700c:	687b      	ldr	r3, [r7, #4]
 810700e:	685b      	ldr	r3, [r3, #4]
 8107010:	3b01      	subs	r3, #1
 8107012:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107016:	687b      	ldr	r3, [r7, #4]
 8107018:	689b      	ldr	r3, [r3, #8]
 810701a:	3b01      	subs	r3, #1
 810701c:	025b      	lsls	r3, r3, #9
 810701e:	b29b      	uxth	r3, r3
 8107020:	431a      	orrs	r2, r3
 8107022:	687b      	ldr	r3, [r7, #4]
 8107024:	68db      	ldr	r3, [r3, #12]
 8107026:	3b01      	subs	r3, #1
 8107028:	041b      	lsls	r3, r3, #16
 810702a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810702e:	431a      	orrs	r2, r3
 8107030:	687b      	ldr	r3, [r7, #4]
 8107032:	691b      	ldr	r3, [r3, #16]
 8107034:	3b01      	subs	r3, #1
 8107036:	061b      	lsls	r3, r3, #24
 8107038:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810703c:	4932      	ldr	r1, [pc, #200]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 810703e:	4313      	orrs	r3, r2
 8107040:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107042:	4b31      	ldr	r3, [pc, #196]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8107044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107046:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810704a:	687b      	ldr	r3, [r7, #4]
 810704c:	695b      	ldr	r3, [r3, #20]
 810704e:	492e      	ldr	r1, [pc, #184]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8107050:	4313      	orrs	r3, r2
 8107052:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107054:	4b2c      	ldr	r3, [pc, #176]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8107056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107058:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	699b      	ldr	r3, [r3, #24]
 8107060:	4929      	ldr	r1, [pc, #164]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8107062:	4313      	orrs	r3, r2
 8107064:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107066:	4b28      	ldr	r3, [pc, #160]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8107068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810706a:	4a27      	ldr	r2, [pc, #156]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 810706c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107070:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107072:	4b25      	ldr	r3, [pc, #148]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8107074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810707a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810707e:	687a      	ldr	r2, [r7, #4]
 8107080:	69d2      	ldr	r2, [r2, #28]
 8107082:	00d2      	lsls	r2, r2, #3
 8107084:	4920      	ldr	r1, [pc, #128]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8107086:	4313      	orrs	r3, r2
 8107088:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810708a:	4b1f      	ldr	r3, [pc, #124]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 810708c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810708e:	4a1e      	ldr	r2, [pc, #120]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 8107090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107094:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107096:	683b      	ldr	r3, [r7, #0]
 8107098:	2b00      	cmp	r3, #0
 810709a:	d106      	bne.n	81070aa <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810709c:	4b1a      	ldr	r3, [pc, #104]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 810709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81070a0:	4a19      	ldr	r2, [pc, #100]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 81070a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81070a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81070a8:	e00f      	b.n	81070ca <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81070aa:	683b      	ldr	r3, [r7, #0]
 81070ac:	2b01      	cmp	r3, #1
 81070ae:	d106      	bne.n	81070be <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81070b0:	4b15      	ldr	r3, [pc, #84]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 81070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81070b4:	4a14      	ldr	r2, [pc, #80]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 81070b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81070ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 81070bc:	e005      	b.n	81070ca <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81070be:	4b12      	ldr	r3, [pc, #72]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 81070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81070c2:	4a11      	ldr	r2, [pc, #68]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 81070c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81070c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81070ca:	4b0f      	ldr	r3, [pc, #60]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 81070cc:	681b      	ldr	r3, [r3, #0]
 81070ce:	4a0e      	ldr	r2, [pc, #56]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 81070d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81070d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81070d6:	f7fb fa29 	bl	810252c <HAL_GetTick>
 81070da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81070dc:	e008      	b.n	81070f0 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81070de:	f7fb fa25 	bl	810252c <HAL_GetTick>
 81070e2:	4602      	mov	r2, r0
 81070e4:	68bb      	ldr	r3, [r7, #8]
 81070e6:	1ad3      	subs	r3, r2, r3
 81070e8:	2b02      	cmp	r3, #2
 81070ea:	d901      	bls.n	81070f0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81070ec:	2303      	movs	r3, #3
 81070ee:	e006      	b.n	81070fe <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81070f0:	4b05      	ldr	r3, [pc, #20]	; (8107108 <RCCEx_PLL3_Config+0x160>)
 81070f2:	681b      	ldr	r3, [r3, #0]
 81070f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81070f8:	2b00      	cmp	r3, #0
 81070fa:	d0f0      	beq.n	81070de <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81070fc:	7bfb      	ldrb	r3, [r7, #15]
}
 81070fe:	4618      	mov	r0, r3
 8107100:	3710      	adds	r7, #16
 8107102:	46bd      	mov	sp, r7
 8107104:	bd80      	pop	{r7, pc}
 8107106:	bf00      	nop
 8107108:	58024400 	.word	0x58024400

0810710c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810710c:	b580      	push	{r7, lr}
 810710e:	b082      	sub	sp, #8
 8107110:	af00      	add	r7, sp, #0
 8107112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107114:	687b      	ldr	r3, [r7, #4]
 8107116:	2b00      	cmp	r3, #0
 8107118:	d101      	bne.n	810711e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810711a:	2301      	movs	r3, #1
 810711c:	e049      	b.n	81071b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810711e:	687b      	ldr	r3, [r7, #4]
 8107120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107124:	b2db      	uxtb	r3, r3
 8107126:	2b00      	cmp	r3, #0
 8107128:	d106      	bne.n	8107138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810712a:	687b      	ldr	r3, [r7, #4]
 810712c:	2200      	movs	r2, #0
 810712e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107132:	6878      	ldr	r0, [r7, #4]
 8107134:	f7fa feea 	bl	8101f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107138:	687b      	ldr	r3, [r7, #4]
 810713a:	2202      	movs	r2, #2
 810713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107140:	687b      	ldr	r3, [r7, #4]
 8107142:	681a      	ldr	r2, [r3, #0]
 8107144:	687b      	ldr	r3, [r7, #4]
 8107146:	3304      	adds	r3, #4
 8107148:	4619      	mov	r1, r3
 810714a:	4610      	mov	r0, r2
 810714c:	f000 fdc4 	bl	8107cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107150:	687b      	ldr	r3, [r7, #4]
 8107152:	2201      	movs	r2, #1
 8107154:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107158:	687b      	ldr	r3, [r7, #4]
 810715a:	2201      	movs	r2, #1
 810715c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	2201      	movs	r2, #1
 8107164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107168:	687b      	ldr	r3, [r7, #4]
 810716a:	2201      	movs	r2, #1
 810716c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107170:	687b      	ldr	r3, [r7, #4]
 8107172:	2201      	movs	r2, #1
 8107174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107178:	687b      	ldr	r3, [r7, #4]
 810717a:	2201      	movs	r2, #1
 810717c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107180:	687b      	ldr	r3, [r7, #4]
 8107182:	2201      	movs	r2, #1
 8107184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107188:	687b      	ldr	r3, [r7, #4]
 810718a:	2201      	movs	r2, #1
 810718c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107190:	687b      	ldr	r3, [r7, #4]
 8107192:	2201      	movs	r2, #1
 8107194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107198:	687b      	ldr	r3, [r7, #4]
 810719a:	2201      	movs	r2, #1
 810719c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81071a0:	687b      	ldr	r3, [r7, #4]
 81071a2:	2201      	movs	r2, #1
 81071a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81071a8:	687b      	ldr	r3, [r7, #4]
 81071aa:	2201      	movs	r2, #1
 81071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81071b0:	2300      	movs	r3, #0
}
 81071b2:	4618      	mov	r0, r3
 81071b4:	3708      	adds	r7, #8
 81071b6:	46bd      	mov	sp, r7
 81071b8:	bd80      	pop	{r7, pc}
	...

081071bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81071bc:	b480      	push	{r7}
 81071be:	b085      	sub	sp, #20
 81071c0:	af00      	add	r7, sp, #0
 81071c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81071c4:	687b      	ldr	r3, [r7, #4]
 81071c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81071ca:	b2db      	uxtb	r3, r3
 81071cc:	2b01      	cmp	r3, #1
 81071ce:	d001      	beq.n	81071d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81071d0:	2301      	movs	r3, #1
 81071d2:	e054      	b.n	810727e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81071d4:	687b      	ldr	r3, [r7, #4]
 81071d6:	2202      	movs	r2, #2
 81071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81071dc:	687b      	ldr	r3, [r7, #4]
 81071de:	681b      	ldr	r3, [r3, #0]
 81071e0:	68da      	ldr	r2, [r3, #12]
 81071e2:	687b      	ldr	r3, [r7, #4]
 81071e4:	681b      	ldr	r3, [r3, #0]
 81071e6:	f042 0201 	orr.w	r2, r2, #1
 81071ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81071ec:	687b      	ldr	r3, [r7, #4]
 81071ee:	681b      	ldr	r3, [r3, #0]
 81071f0:	4a26      	ldr	r2, [pc, #152]	; (810728c <HAL_TIM_Base_Start_IT+0xd0>)
 81071f2:	4293      	cmp	r3, r2
 81071f4:	d022      	beq.n	810723c <HAL_TIM_Base_Start_IT+0x80>
 81071f6:	687b      	ldr	r3, [r7, #4]
 81071f8:	681b      	ldr	r3, [r3, #0]
 81071fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81071fe:	d01d      	beq.n	810723c <HAL_TIM_Base_Start_IT+0x80>
 8107200:	687b      	ldr	r3, [r7, #4]
 8107202:	681b      	ldr	r3, [r3, #0]
 8107204:	4a22      	ldr	r2, [pc, #136]	; (8107290 <HAL_TIM_Base_Start_IT+0xd4>)
 8107206:	4293      	cmp	r3, r2
 8107208:	d018      	beq.n	810723c <HAL_TIM_Base_Start_IT+0x80>
 810720a:	687b      	ldr	r3, [r7, #4]
 810720c:	681b      	ldr	r3, [r3, #0]
 810720e:	4a21      	ldr	r2, [pc, #132]	; (8107294 <HAL_TIM_Base_Start_IT+0xd8>)
 8107210:	4293      	cmp	r3, r2
 8107212:	d013      	beq.n	810723c <HAL_TIM_Base_Start_IT+0x80>
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	681b      	ldr	r3, [r3, #0]
 8107218:	4a1f      	ldr	r2, [pc, #124]	; (8107298 <HAL_TIM_Base_Start_IT+0xdc>)
 810721a:	4293      	cmp	r3, r2
 810721c:	d00e      	beq.n	810723c <HAL_TIM_Base_Start_IT+0x80>
 810721e:	687b      	ldr	r3, [r7, #4]
 8107220:	681b      	ldr	r3, [r3, #0]
 8107222:	4a1e      	ldr	r2, [pc, #120]	; (810729c <HAL_TIM_Base_Start_IT+0xe0>)
 8107224:	4293      	cmp	r3, r2
 8107226:	d009      	beq.n	810723c <HAL_TIM_Base_Start_IT+0x80>
 8107228:	687b      	ldr	r3, [r7, #4]
 810722a:	681b      	ldr	r3, [r3, #0]
 810722c:	4a1c      	ldr	r2, [pc, #112]	; (81072a0 <HAL_TIM_Base_Start_IT+0xe4>)
 810722e:	4293      	cmp	r3, r2
 8107230:	d004      	beq.n	810723c <HAL_TIM_Base_Start_IT+0x80>
 8107232:	687b      	ldr	r3, [r7, #4]
 8107234:	681b      	ldr	r3, [r3, #0]
 8107236:	4a1b      	ldr	r2, [pc, #108]	; (81072a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8107238:	4293      	cmp	r3, r2
 810723a:	d115      	bne.n	8107268 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810723c:	687b      	ldr	r3, [r7, #4]
 810723e:	681b      	ldr	r3, [r3, #0]
 8107240:	689a      	ldr	r2, [r3, #8]
 8107242:	4b19      	ldr	r3, [pc, #100]	; (81072a8 <HAL_TIM_Base_Start_IT+0xec>)
 8107244:	4013      	ands	r3, r2
 8107246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107248:	68fb      	ldr	r3, [r7, #12]
 810724a:	2b06      	cmp	r3, #6
 810724c:	d015      	beq.n	810727a <HAL_TIM_Base_Start_IT+0xbe>
 810724e:	68fb      	ldr	r3, [r7, #12]
 8107250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107254:	d011      	beq.n	810727a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8107256:	687b      	ldr	r3, [r7, #4]
 8107258:	681b      	ldr	r3, [r3, #0]
 810725a:	681a      	ldr	r2, [r3, #0]
 810725c:	687b      	ldr	r3, [r7, #4]
 810725e:	681b      	ldr	r3, [r3, #0]
 8107260:	f042 0201 	orr.w	r2, r2, #1
 8107264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107266:	e008      	b.n	810727a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8107268:	687b      	ldr	r3, [r7, #4]
 810726a:	681b      	ldr	r3, [r3, #0]
 810726c:	681a      	ldr	r2, [r3, #0]
 810726e:	687b      	ldr	r3, [r7, #4]
 8107270:	681b      	ldr	r3, [r3, #0]
 8107272:	f042 0201 	orr.w	r2, r2, #1
 8107276:	601a      	str	r2, [r3, #0]
 8107278:	e000      	b.n	810727c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810727a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810727c:	2300      	movs	r3, #0
}
 810727e:	4618      	mov	r0, r3
 8107280:	3714      	adds	r7, #20
 8107282:	46bd      	mov	sp, r7
 8107284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107288:	4770      	bx	lr
 810728a:	bf00      	nop
 810728c:	40010000 	.word	0x40010000
 8107290:	40000400 	.word	0x40000400
 8107294:	40000800 	.word	0x40000800
 8107298:	40000c00 	.word	0x40000c00
 810729c:	40010400 	.word	0x40010400
 81072a0:	40001800 	.word	0x40001800
 81072a4:	40014000 	.word	0x40014000
 81072a8:	00010007 	.word	0x00010007

081072ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81072ac:	b580      	push	{r7, lr}
 81072ae:	b082      	sub	sp, #8
 81072b0:	af00      	add	r7, sp, #0
 81072b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81072b4:	687b      	ldr	r3, [r7, #4]
 81072b6:	2b00      	cmp	r3, #0
 81072b8:	d101      	bne.n	81072be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81072ba:	2301      	movs	r3, #1
 81072bc:	e049      	b.n	8107352 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81072be:	687b      	ldr	r3, [r7, #4]
 81072c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81072c4:	b2db      	uxtb	r3, r3
 81072c6:	2b00      	cmp	r3, #0
 81072c8:	d106      	bne.n	81072d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81072ca:	687b      	ldr	r3, [r7, #4]
 81072cc:	2200      	movs	r2, #0
 81072ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81072d2:	6878      	ldr	r0, [r7, #4]
 81072d4:	f7fa fd56 	bl	8101d84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81072d8:	687b      	ldr	r3, [r7, #4]
 81072da:	2202      	movs	r2, #2
 81072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81072e0:	687b      	ldr	r3, [r7, #4]
 81072e2:	681a      	ldr	r2, [r3, #0]
 81072e4:	687b      	ldr	r3, [r7, #4]
 81072e6:	3304      	adds	r3, #4
 81072e8:	4619      	mov	r1, r3
 81072ea:	4610      	mov	r0, r2
 81072ec:	f000 fcf4 	bl	8107cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	2201      	movs	r2, #1
 81072f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81072f8:	687b      	ldr	r3, [r7, #4]
 81072fa:	2201      	movs	r2, #1
 81072fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107300:	687b      	ldr	r3, [r7, #4]
 8107302:	2201      	movs	r2, #1
 8107304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107308:	687b      	ldr	r3, [r7, #4]
 810730a:	2201      	movs	r2, #1
 810730c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107310:	687b      	ldr	r3, [r7, #4]
 8107312:	2201      	movs	r2, #1
 8107314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107318:	687b      	ldr	r3, [r7, #4]
 810731a:	2201      	movs	r2, #1
 810731c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107320:	687b      	ldr	r3, [r7, #4]
 8107322:	2201      	movs	r2, #1
 8107324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107328:	687b      	ldr	r3, [r7, #4]
 810732a:	2201      	movs	r2, #1
 810732c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	2201      	movs	r2, #1
 8107334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107338:	687b      	ldr	r3, [r7, #4]
 810733a:	2201      	movs	r2, #1
 810733c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8107340:	687b      	ldr	r3, [r7, #4]
 8107342:	2201      	movs	r2, #1
 8107344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107348:	687b      	ldr	r3, [r7, #4]
 810734a:	2201      	movs	r2, #1
 810734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107350:	2300      	movs	r3, #0
}
 8107352:	4618      	mov	r0, r3
 8107354:	3708      	adds	r7, #8
 8107356:	46bd      	mov	sp, r7
 8107358:	bd80      	pop	{r7, pc}
	...

0810735c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810735c:	b580      	push	{r7, lr}
 810735e:	b084      	sub	sp, #16
 8107360:	af00      	add	r7, sp, #0
 8107362:	6078      	str	r0, [r7, #4]
 8107364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8107366:	683b      	ldr	r3, [r7, #0]
 8107368:	2b00      	cmp	r3, #0
 810736a:	d109      	bne.n	8107380 <HAL_TIM_PWM_Start+0x24>
 810736c:	687b      	ldr	r3, [r7, #4]
 810736e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8107372:	b2db      	uxtb	r3, r3
 8107374:	2b01      	cmp	r3, #1
 8107376:	bf14      	ite	ne
 8107378:	2301      	movne	r3, #1
 810737a:	2300      	moveq	r3, #0
 810737c:	b2db      	uxtb	r3, r3
 810737e:	e03c      	b.n	81073fa <HAL_TIM_PWM_Start+0x9e>
 8107380:	683b      	ldr	r3, [r7, #0]
 8107382:	2b04      	cmp	r3, #4
 8107384:	d109      	bne.n	810739a <HAL_TIM_PWM_Start+0x3e>
 8107386:	687b      	ldr	r3, [r7, #4]
 8107388:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 810738c:	b2db      	uxtb	r3, r3
 810738e:	2b01      	cmp	r3, #1
 8107390:	bf14      	ite	ne
 8107392:	2301      	movne	r3, #1
 8107394:	2300      	moveq	r3, #0
 8107396:	b2db      	uxtb	r3, r3
 8107398:	e02f      	b.n	81073fa <HAL_TIM_PWM_Start+0x9e>
 810739a:	683b      	ldr	r3, [r7, #0]
 810739c:	2b08      	cmp	r3, #8
 810739e:	d109      	bne.n	81073b4 <HAL_TIM_PWM_Start+0x58>
 81073a0:	687b      	ldr	r3, [r7, #4]
 81073a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81073a6:	b2db      	uxtb	r3, r3
 81073a8:	2b01      	cmp	r3, #1
 81073aa:	bf14      	ite	ne
 81073ac:	2301      	movne	r3, #1
 81073ae:	2300      	moveq	r3, #0
 81073b0:	b2db      	uxtb	r3, r3
 81073b2:	e022      	b.n	81073fa <HAL_TIM_PWM_Start+0x9e>
 81073b4:	683b      	ldr	r3, [r7, #0]
 81073b6:	2b0c      	cmp	r3, #12
 81073b8:	d109      	bne.n	81073ce <HAL_TIM_PWM_Start+0x72>
 81073ba:	687b      	ldr	r3, [r7, #4]
 81073bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81073c0:	b2db      	uxtb	r3, r3
 81073c2:	2b01      	cmp	r3, #1
 81073c4:	bf14      	ite	ne
 81073c6:	2301      	movne	r3, #1
 81073c8:	2300      	moveq	r3, #0
 81073ca:	b2db      	uxtb	r3, r3
 81073cc:	e015      	b.n	81073fa <HAL_TIM_PWM_Start+0x9e>
 81073ce:	683b      	ldr	r3, [r7, #0]
 81073d0:	2b10      	cmp	r3, #16
 81073d2:	d109      	bne.n	81073e8 <HAL_TIM_PWM_Start+0x8c>
 81073d4:	687b      	ldr	r3, [r7, #4]
 81073d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81073da:	b2db      	uxtb	r3, r3
 81073dc:	2b01      	cmp	r3, #1
 81073de:	bf14      	ite	ne
 81073e0:	2301      	movne	r3, #1
 81073e2:	2300      	moveq	r3, #0
 81073e4:	b2db      	uxtb	r3, r3
 81073e6:	e008      	b.n	81073fa <HAL_TIM_PWM_Start+0x9e>
 81073e8:	687b      	ldr	r3, [r7, #4]
 81073ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81073ee:	b2db      	uxtb	r3, r3
 81073f0:	2b01      	cmp	r3, #1
 81073f2:	bf14      	ite	ne
 81073f4:	2301      	movne	r3, #1
 81073f6:	2300      	moveq	r3, #0
 81073f8:	b2db      	uxtb	r3, r3
 81073fa:	2b00      	cmp	r3, #0
 81073fc:	d001      	beq.n	8107402 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81073fe:	2301      	movs	r3, #1
 8107400:	e0a1      	b.n	8107546 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8107402:	683b      	ldr	r3, [r7, #0]
 8107404:	2b00      	cmp	r3, #0
 8107406:	d104      	bne.n	8107412 <HAL_TIM_PWM_Start+0xb6>
 8107408:	687b      	ldr	r3, [r7, #4]
 810740a:	2202      	movs	r2, #2
 810740c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107410:	e023      	b.n	810745a <HAL_TIM_PWM_Start+0xfe>
 8107412:	683b      	ldr	r3, [r7, #0]
 8107414:	2b04      	cmp	r3, #4
 8107416:	d104      	bne.n	8107422 <HAL_TIM_PWM_Start+0xc6>
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	2202      	movs	r2, #2
 810741c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107420:	e01b      	b.n	810745a <HAL_TIM_PWM_Start+0xfe>
 8107422:	683b      	ldr	r3, [r7, #0]
 8107424:	2b08      	cmp	r3, #8
 8107426:	d104      	bne.n	8107432 <HAL_TIM_PWM_Start+0xd6>
 8107428:	687b      	ldr	r3, [r7, #4]
 810742a:	2202      	movs	r2, #2
 810742c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107430:	e013      	b.n	810745a <HAL_TIM_PWM_Start+0xfe>
 8107432:	683b      	ldr	r3, [r7, #0]
 8107434:	2b0c      	cmp	r3, #12
 8107436:	d104      	bne.n	8107442 <HAL_TIM_PWM_Start+0xe6>
 8107438:	687b      	ldr	r3, [r7, #4]
 810743a:	2202      	movs	r2, #2
 810743c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107440:	e00b      	b.n	810745a <HAL_TIM_PWM_Start+0xfe>
 8107442:	683b      	ldr	r3, [r7, #0]
 8107444:	2b10      	cmp	r3, #16
 8107446:	d104      	bne.n	8107452 <HAL_TIM_PWM_Start+0xf6>
 8107448:	687b      	ldr	r3, [r7, #4]
 810744a:	2202      	movs	r2, #2
 810744c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107450:	e003      	b.n	810745a <HAL_TIM_PWM_Start+0xfe>
 8107452:	687b      	ldr	r3, [r7, #4]
 8107454:	2202      	movs	r2, #2
 8107456:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810745a:	687b      	ldr	r3, [r7, #4]
 810745c:	681b      	ldr	r3, [r3, #0]
 810745e:	2201      	movs	r2, #1
 8107460:	6839      	ldr	r1, [r7, #0]
 8107462:	4618      	mov	r0, r3
 8107464:	f000 ffa8 	bl	81083b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8107468:	687b      	ldr	r3, [r7, #4]
 810746a:	681b      	ldr	r3, [r3, #0]
 810746c:	4a38      	ldr	r2, [pc, #224]	; (8107550 <HAL_TIM_PWM_Start+0x1f4>)
 810746e:	4293      	cmp	r3, r2
 8107470:	d013      	beq.n	810749a <HAL_TIM_PWM_Start+0x13e>
 8107472:	687b      	ldr	r3, [r7, #4]
 8107474:	681b      	ldr	r3, [r3, #0]
 8107476:	4a37      	ldr	r2, [pc, #220]	; (8107554 <HAL_TIM_PWM_Start+0x1f8>)
 8107478:	4293      	cmp	r3, r2
 810747a:	d00e      	beq.n	810749a <HAL_TIM_PWM_Start+0x13e>
 810747c:	687b      	ldr	r3, [r7, #4]
 810747e:	681b      	ldr	r3, [r3, #0]
 8107480:	4a35      	ldr	r2, [pc, #212]	; (8107558 <HAL_TIM_PWM_Start+0x1fc>)
 8107482:	4293      	cmp	r3, r2
 8107484:	d009      	beq.n	810749a <HAL_TIM_PWM_Start+0x13e>
 8107486:	687b      	ldr	r3, [r7, #4]
 8107488:	681b      	ldr	r3, [r3, #0]
 810748a:	4a34      	ldr	r2, [pc, #208]	; (810755c <HAL_TIM_PWM_Start+0x200>)
 810748c:	4293      	cmp	r3, r2
 810748e:	d004      	beq.n	810749a <HAL_TIM_PWM_Start+0x13e>
 8107490:	687b      	ldr	r3, [r7, #4]
 8107492:	681b      	ldr	r3, [r3, #0]
 8107494:	4a32      	ldr	r2, [pc, #200]	; (8107560 <HAL_TIM_PWM_Start+0x204>)
 8107496:	4293      	cmp	r3, r2
 8107498:	d101      	bne.n	810749e <HAL_TIM_PWM_Start+0x142>
 810749a:	2301      	movs	r3, #1
 810749c:	e000      	b.n	81074a0 <HAL_TIM_PWM_Start+0x144>
 810749e:	2300      	movs	r3, #0
 81074a0:	2b00      	cmp	r3, #0
 81074a2:	d007      	beq.n	81074b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 81074a4:	687b      	ldr	r3, [r7, #4]
 81074a6:	681b      	ldr	r3, [r3, #0]
 81074a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81074aa:	687b      	ldr	r3, [r7, #4]
 81074ac:	681b      	ldr	r3, [r3, #0]
 81074ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81074b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81074b4:	687b      	ldr	r3, [r7, #4]
 81074b6:	681b      	ldr	r3, [r3, #0]
 81074b8:	4a25      	ldr	r2, [pc, #148]	; (8107550 <HAL_TIM_PWM_Start+0x1f4>)
 81074ba:	4293      	cmp	r3, r2
 81074bc:	d022      	beq.n	8107504 <HAL_TIM_PWM_Start+0x1a8>
 81074be:	687b      	ldr	r3, [r7, #4]
 81074c0:	681b      	ldr	r3, [r3, #0]
 81074c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81074c6:	d01d      	beq.n	8107504 <HAL_TIM_PWM_Start+0x1a8>
 81074c8:	687b      	ldr	r3, [r7, #4]
 81074ca:	681b      	ldr	r3, [r3, #0]
 81074cc:	4a25      	ldr	r2, [pc, #148]	; (8107564 <HAL_TIM_PWM_Start+0x208>)
 81074ce:	4293      	cmp	r3, r2
 81074d0:	d018      	beq.n	8107504 <HAL_TIM_PWM_Start+0x1a8>
 81074d2:	687b      	ldr	r3, [r7, #4]
 81074d4:	681b      	ldr	r3, [r3, #0]
 81074d6:	4a24      	ldr	r2, [pc, #144]	; (8107568 <HAL_TIM_PWM_Start+0x20c>)
 81074d8:	4293      	cmp	r3, r2
 81074da:	d013      	beq.n	8107504 <HAL_TIM_PWM_Start+0x1a8>
 81074dc:	687b      	ldr	r3, [r7, #4]
 81074de:	681b      	ldr	r3, [r3, #0]
 81074e0:	4a22      	ldr	r2, [pc, #136]	; (810756c <HAL_TIM_PWM_Start+0x210>)
 81074e2:	4293      	cmp	r3, r2
 81074e4:	d00e      	beq.n	8107504 <HAL_TIM_PWM_Start+0x1a8>
 81074e6:	687b      	ldr	r3, [r7, #4]
 81074e8:	681b      	ldr	r3, [r3, #0]
 81074ea:	4a1a      	ldr	r2, [pc, #104]	; (8107554 <HAL_TIM_PWM_Start+0x1f8>)
 81074ec:	4293      	cmp	r3, r2
 81074ee:	d009      	beq.n	8107504 <HAL_TIM_PWM_Start+0x1a8>
 81074f0:	687b      	ldr	r3, [r7, #4]
 81074f2:	681b      	ldr	r3, [r3, #0]
 81074f4:	4a1e      	ldr	r2, [pc, #120]	; (8107570 <HAL_TIM_PWM_Start+0x214>)
 81074f6:	4293      	cmp	r3, r2
 81074f8:	d004      	beq.n	8107504 <HAL_TIM_PWM_Start+0x1a8>
 81074fa:	687b      	ldr	r3, [r7, #4]
 81074fc:	681b      	ldr	r3, [r3, #0]
 81074fe:	4a16      	ldr	r2, [pc, #88]	; (8107558 <HAL_TIM_PWM_Start+0x1fc>)
 8107500:	4293      	cmp	r3, r2
 8107502:	d115      	bne.n	8107530 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107504:	687b      	ldr	r3, [r7, #4]
 8107506:	681b      	ldr	r3, [r3, #0]
 8107508:	689a      	ldr	r2, [r3, #8]
 810750a:	4b1a      	ldr	r3, [pc, #104]	; (8107574 <HAL_TIM_PWM_Start+0x218>)
 810750c:	4013      	ands	r3, r2
 810750e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107510:	68fb      	ldr	r3, [r7, #12]
 8107512:	2b06      	cmp	r3, #6
 8107514:	d015      	beq.n	8107542 <HAL_TIM_PWM_Start+0x1e6>
 8107516:	68fb      	ldr	r3, [r7, #12]
 8107518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810751c:	d011      	beq.n	8107542 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810751e:	687b      	ldr	r3, [r7, #4]
 8107520:	681b      	ldr	r3, [r3, #0]
 8107522:	681a      	ldr	r2, [r3, #0]
 8107524:	687b      	ldr	r3, [r7, #4]
 8107526:	681b      	ldr	r3, [r3, #0]
 8107528:	f042 0201 	orr.w	r2, r2, #1
 810752c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810752e:	e008      	b.n	8107542 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8107530:	687b      	ldr	r3, [r7, #4]
 8107532:	681b      	ldr	r3, [r3, #0]
 8107534:	681a      	ldr	r2, [r3, #0]
 8107536:	687b      	ldr	r3, [r7, #4]
 8107538:	681b      	ldr	r3, [r3, #0]
 810753a:	f042 0201 	orr.w	r2, r2, #1
 810753e:	601a      	str	r2, [r3, #0]
 8107540:	e000      	b.n	8107544 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107542:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8107544:	2300      	movs	r3, #0
}
 8107546:	4618      	mov	r0, r3
 8107548:	3710      	adds	r7, #16
 810754a:	46bd      	mov	sp, r7
 810754c:	bd80      	pop	{r7, pc}
 810754e:	bf00      	nop
 8107550:	40010000 	.word	0x40010000
 8107554:	40010400 	.word	0x40010400
 8107558:	40014000 	.word	0x40014000
 810755c:	40014400 	.word	0x40014400
 8107560:	40014800 	.word	0x40014800
 8107564:	40000400 	.word	0x40000400
 8107568:	40000800 	.word	0x40000800
 810756c:	40000c00 	.word	0x40000c00
 8107570:	40001800 	.word	0x40001800
 8107574:	00010007 	.word	0x00010007

08107578 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8107578:	b580      	push	{r7, lr}
 810757a:	b086      	sub	sp, #24
 810757c:	af00      	add	r7, sp, #0
 810757e:	6078      	str	r0, [r7, #4]
 8107580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107582:	687b      	ldr	r3, [r7, #4]
 8107584:	2b00      	cmp	r3, #0
 8107586:	d101      	bne.n	810758c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8107588:	2301      	movs	r3, #1
 810758a:	e097      	b.n	81076bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 810758c:	687b      	ldr	r3, [r7, #4]
 810758e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107592:	b2db      	uxtb	r3, r3
 8107594:	2b00      	cmp	r3, #0
 8107596:	d106      	bne.n	81075a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107598:	687b      	ldr	r3, [r7, #4]
 810759a:	2200      	movs	r2, #0
 810759c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 81075a0:	6878      	ldr	r0, [r7, #4]
 81075a2:	f7fa fc0f 	bl	8101dc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81075a6:	687b      	ldr	r3, [r7, #4]
 81075a8:	2202      	movs	r2, #2
 81075aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 81075ae:	687b      	ldr	r3, [r7, #4]
 81075b0:	681b      	ldr	r3, [r3, #0]
 81075b2:	689b      	ldr	r3, [r3, #8]
 81075b4:	687a      	ldr	r2, [r7, #4]
 81075b6:	6812      	ldr	r2, [r2, #0]
 81075b8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 81075bc:	f023 0307 	bic.w	r3, r3, #7
 81075c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81075c2:	687b      	ldr	r3, [r7, #4]
 81075c4:	681a      	ldr	r2, [r3, #0]
 81075c6:	687b      	ldr	r3, [r7, #4]
 81075c8:	3304      	adds	r3, #4
 81075ca:	4619      	mov	r1, r3
 81075cc:	4610      	mov	r0, r2
 81075ce:	f000 fb83 	bl	8107cd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81075d2:	687b      	ldr	r3, [r7, #4]
 81075d4:	681b      	ldr	r3, [r3, #0]
 81075d6:	689b      	ldr	r3, [r3, #8]
 81075d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 81075da:	687b      	ldr	r3, [r7, #4]
 81075dc:	681b      	ldr	r3, [r3, #0]
 81075de:	699b      	ldr	r3, [r3, #24]
 81075e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 81075e2:	687b      	ldr	r3, [r7, #4]
 81075e4:	681b      	ldr	r3, [r3, #0]
 81075e6:	6a1b      	ldr	r3, [r3, #32]
 81075e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 81075ea:	683b      	ldr	r3, [r7, #0]
 81075ec:	681b      	ldr	r3, [r3, #0]
 81075ee:	697a      	ldr	r2, [r7, #20]
 81075f0:	4313      	orrs	r3, r2
 81075f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 81075f4:	693b      	ldr	r3, [r7, #16]
 81075f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81075fa:	f023 0303 	bic.w	r3, r3, #3
 81075fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8107600:	683b      	ldr	r3, [r7, #0]
 8107602:	689a      	ldr	r2, [r3, #8]
 8107604:	683b      	ldr	r3, [r7, #0]
 8107606:	699b      	ldr	r3, [r3, #24]
 8107608:	021b      	lsls	r3, r3, #8
 810760a:	4313      	orrs	r3, r2
 810760c:	693a      	ldr	r2, [r7, #16]
 810760e:	4313      	orrs	r3, r2
 8107610:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8107612:	693b      	ldr	r3, [r7, #16]
 8107614:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8107618:	f023 030c 	bic.w	r3, r3, #12
 810761c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810761e:	693b      	ldr	r3, [r7, #16]
 8107620:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8107628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 810762a:	683b      	ldr	r3, [r7, #0]
 810762c:	68da      	ldr	r2, [r3, #12]
 810762e:	683b      	ldr	r3, [r7, #0]
 8107630:	69db      	ldr	r3, [r3, #28]
 8107632:	021b      	lsls	r3, r3, #8
 8107634:	4313      	orrs	r3, r2
 8107636:	693a      	ldr	r2, [r7, #16]
 8107638:	4313      	orrs	r3, r2
 810763a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 810763c:	683b      	ldr	r3, [r7, #0]
 810763e:	691b      	ldr	r3, [r3, #16]
 8107640:	011a      	lsls	r2, r3, #4
 8107642:	683b      	ldr	r3, [r7, #0]
 8107644:	6a1b      	ldr	r3, [r3, #32]
 8107646:	031b      	lsls	r3, r3, #12
 8107648:	4313      	orrs	r3, r2
 810764a:	693a      	ldr	r2, [r7, #16]
 810764c:	4313      	orrs	r3, r2
 810764e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8107650:	68fb      	ldr	r3, [r7, #12]
 8107652:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8107656:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8107658:	68fb      	ldr	r3, [r7, #12]
 810765a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 810765e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8107660:	683b      	ldr	r3, [r7, #0]
 8107662:	685a      	ldr	r2, [r3, #4]
 8107664:	683b      	ldr	r3, [r7, #0]
 8107666:	695b      	ldr	r3, [r3, #20]
 8107668:	011b      	lsls	r3, r3, #4
 810766a:	4313      	orrs	r3, r2
 810766c:	68fa      	ldr	r2, [r7, #12]
 810766e:	4313      	orrs	r3, r2
 8107670:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8107672:	687b      	ldr	r3, [r7, #4]
 8107674:	681b      	ldr	r3, [r3, #0]
 8107676:	697a      	ldr	r2, [r7, #20]
 8107678:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 810767a:	687b      	ldr	r3, [r7, #4]
 810767c:	681b      	ldr	r3, [r3, #0]
 810767e:	693a      	ldr	r2, [r7, #16]
 8107680:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8107682:	687b      	ldr	r3, [r7, #4]
 8107684:	681b      	ldr	r3, [r3, #0]
 8107686:	68fa      	ldr	r2, [r7, #12]
 8107688:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810768a:	687b      	ldr	r3, [r7, #4]
 810768c:	2201      	movs	r2, #1
 810768e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8107692:	687b      	ldr	r3, [r7, #4]
 8107694:	2201      	movs	r2, #1
 8107696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810769a:	687b      	ldr	r3, [r7, #4]
 810769c:	2201      	movs	r2, #1
 810769e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81076a2:	687b      	ldr	r3, [r7, #4]
 81076a4:	2201      	movs	r2, #1
 81076a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81076aa:	687b      	ldr	r3, [r7, #4]
 81076ac:	2201      	movs	r2, #1
 81076ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81076b2:	687b      	ldr	r3, [r7, #4]
 81076b4:	2201      	movs	r2, #1
 81076b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81076ba:	2300      	movs	r3, #0
}
 81076bc:	4618      	mov	r0, r3
 81076be:	3718      	adds	r7, #24
 81076c0:	46bd      	mov	sp, r7
 81076c2:	bd80      	pop	{r7, pc}

081076c4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81076c4:	b580      	push	{r7, lr}
 81076c6:	b084      	sub	sp, #16
 81076c8:	af00      	add	r7, sp, #0
 81076ca:	6078      	str	r0, [r7, #4]
 81076cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 81076ce:	687b      	ldr	r3, [r7, #4]
 81076d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 81076d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 81076d6:	687b      	ldr	r3, [r7, #4]
 81076d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 81076dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81076e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 81076e6:	687b      	ldr	r3, [r7, #4]
 81076e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81076ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 81076ee:	683b      	ldr	r3, [r7, #0]
 81076f0:	2b00      	cmp	r3, #0
 81076f2:	d110      	bne.n	8107716 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 81076f4:	7bfb      	ldrb	r3, [r7, #15]
 81076f6:	2b01      	cmp	r3, #1
 81076f8:	d102      	bne.n	8107700 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 81076fa:	7b7b      	ldrb	r3, [r7, #13]
 81076fc:	2b01      	cmp	r3, #1
 81076fe:	d001      	beq.n	8107704 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8107700:	2301      	movs	r3, #1
 8107702:	e089      	b.n	8107818 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8107704:	687b      	ldr	r3, [r7, #4]
 8107706:	2202      	movs	r2, #2
 8107708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 810770c:	687b      	ldr	r3, [r7, #4]
 810770e:	2202      	movs	r2, #2
 8107710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107714:	e031      	b.n	810777a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8107716:	683b      	ldr	r3, [r7, #0]
 8107718:	2b04      	cmp	r3, #4
 810771a:	d110      	bne.n	810773e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 810771c:	7bbb      	ldrb	r3, [r7, #14]
 810771e:	2b01      	cmp	r3, #1
 8107720:	d102      	bne.n	8107728 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8107722:	7b3b      	ldrb	r3, [r7, #12]
 8107724:	2b01      	cmp	r3, #1
 8107726:	d001      	beq.n	810772c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8107728:	2301      	movs	r3, #1
 810772a:	e075      	b.n	8107818 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 810772c:	687b      	ldr	r3, [r7, #4]
 810772e:	2202      	movs	r2, #2
 8107730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8107734:	687b      	ldr	r3, [r7, #4]
 8107736:	2202      	movs	r2, #2
 8107738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810773c:	e01d      	b.n	810777a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 810773e:	7bfb      	ldrb	r3, [r7, #15]
 8107740:	2b01      	cmp	r3, #1
 8107742:	d108      	bne.n	8107756 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8107744:	7bbb      	ldrb	r3, [r7, #14]
 8107746:	2b01      	cmp	r3, #1
 8107748:	d105      	bne.n	8107756 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 810774a:	7b7b      	ldrb	r3, [r7, #13]
 810774c:	2b01      	cmp	r3, #1
 810774e:	d102      	bne.n	8107756 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8107750:	7b3b      	ldrb	r3, [r7, #12]
 8107752:	2b01      	cmp	r3, #1
 8107754:	d001      	beq.n	810775a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8107756:	2301      	movs	r3, #1
 8107758:	e05e      	b.n	8107818 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 810775a:	687b      	ldr	r3, [r7, #4]
 810775c:	2202      	movs	r2, #2
 810775e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8107762:	687b      	ldr	r3, [r7, #4]
 8107764:	2202      	movs	r2, #2
 8107766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 810776a:	687b      	ldr	r3, [r7, #4]
 810776c:	2202      	movs	r2, #2
 810776e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8107772:	687b      	ldr	r3, [r7, #4]
 8107774:	2202      	movs	r2, #2
 8107776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 810777a:	683b      	ldr	r3, [r7, #0]
 810777c:	2b00      	cmp	r3, #0
 810777e:	d003      	beq.n	8107788 <HAL_TIM_Encoder_Start_IT+0xc4>
 8107780:	683b      	ldr	r3, [r7, #0]
 8107782:	2b04      	cmp	r3, #4
 8107784:	d010      	beq.n	81077a8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8107786:	e01f      	b.n	81077c8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8107788:	687b      	ldr	r3, [r7, #4]
 810778a:	681b      	ldr	r3, [r3, #0]
 810778c:	2201      	movs	r2, #1
 810778e:	2100      	movs	r1, #0
 8107790:	4618      	mov	r0, r3
 8107792:	f000 fe11 	bl	81083b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8107796:	687b      	ldr	r3, [r7, #4]
 8107798:	681b      	ldr	r3, [r3, #0]
 810779a:	68da      	ldr	r2, [r3, #12]
 810779c:	687b      	ldr	r3, [r7, #4]
 810779e:	681b      	ldr	r3, [r3, #0]
 81077a0:	f042 0202 	orr.w	r2, r2, #2
 81077a4:	60da      	str	r2, [r3, #12]
      break;
 81077a6:	e02e      	b.n	8107806 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 81077a8:	687b      	ldr	r3, [r7, #4]
 81077aa:	681b      	ldr	r3, [r3, #0]
 81077ac:	2201      	movs	r2, #1
 81077ae:	2104      	movs	r1, #4
 81077b0:	4618      	mov	r0, r3
 81077b2:	f000 fe01 	bl	81083b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 81077b6:	687b      	ldr	r3, [r7, #4]
 81077b8:	681b      	ldr	r3, [r3, #0]
 81077ba:	68da      	ldr	r2, [r3, #12]
 81077bc:	687b      	ldr	r3, [r7, #4]
 81077be:	681b      	ldr	r3, [r3, #0]
 81077c0:	f042 0204 	orr.w	r2, r2, #4
 81077c4:	60da      	str	r2, [r3, #12]
      break;
 81077c6:	e01e      	b.n	8107806 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 81077c8:	687b      	ldr	r3, [r7, #4]
 81077ca:	681b      	ldr	r3, [r3, #0]
 81077cc:	2201      	movs	r2, #1
 81077ce:	2100      	movs	r1, #0
 81077d0:	4618      	mov	r0, r3
 81077d2:	f000 fdf1 	bl	81083b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 81077d6:	687b      	ldr	r3, [r7, #4]
 81077d8:	681b      	ldr	r3, [r3, #0]
 81077da:	2201      	movs	r2, #1
 81077dc:	2104      	movs	r1, #4
 81077de:	4618      	mov	r0, r3
 81077e0:	f000 fdea 	bl	81083b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 81077e4:	687b      	ldr	r3, [r7, #4]
 81077e6:	681b      	ldr	r3, [r3, #0]
 81077e8:	68da      	ldr	r2, [r3, #12]
 81077ea:	687b      	ldr	r3, [r7, #4]
 81077ec:	681b      	ldr	r3, [r3, #0]
 81077ee:	f042 0202 	orr.w	r2, r2, #2
 81077f2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 81077f4:	687b      	ldr	r3, [r7, #4]
 81077f6:	681b      	ldr	r3, [r3, #0]
 81077f8:	68da      	ldr	r2, [r3, #12]
 81077fa:	687b      	ldr	r3, [r7, #4]
 81077fc:	681b      	ldr	r3, [r3, #0]
 81077fe:	f042 0204 	orr.w	r2, r2, #4
 8107802:	60da      	str	r2, [r3, #12]
      break;
 8107804:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8107806:	687b      	ldr	r3, [r7, #4]
 8107808:	681b      	ldr	r3, [r3, #0]
 810780a:	681a      	ldr	r2, [r3, #0]
 810780c:	687b      	ldr	r3, [r7, #4]
 810780e:	681b      	ldr	r3, [r3, #0]
 8107810:	f042 0201 	orr.w	r2, r2, #1
 8107814:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8107816:	2300      	movs	r3, #0
}
 8107818:	4618      	mov	r0, r3
 810781a:	3710      	adds	r7, #16
 810781c:	46bd      	mov	sp, r7
 810781e:	bd80      	pop	{r7, pc}

08107820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8107820:	b580      	push	{r7, lr}
 8107822:	b082      	sub	sp, #8
 8107824:	af00      	add	r7, sp, #0
 8107826:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8107828:	687b      	ldr	r3, [r7, #4]
 810782a:	681b      	ldr	r3, [r3, #0]
 810782c:	691b      	ldr	r3, [r3, #16]
 810782e:	f003 0302 	and.w	r3, r3, #2
 8107832:	2b02      	cmp	r3, #2
 8107834:	d122      	bne.n	810787c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8107836:	687b      	ldr	r3, [r7, #4]
 8107838:	681b      	ldr	r3, [r3, #0]
 810783a:	68db      	ldr	r3, [r3, #12]
 810783c:	f003 0302 	and.w	r3, r3, #2
 8107840:	2b02      	cmp	r3, #2
 8107842:	d11b      	bne.n	810787c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8107844:	687b      	ldr	r3, [r7, #4]
 8107846:	681b      	ldr	r3, [r3, #0]
 8107848:	f06f 0202 	mvn.w	r2, #2
 810784c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810784e:	687b      	ldr	r3, [r7, #4]
 8107850:	2201      	movs	r2, #1
 8107852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8107854:	687b      	ldr	r3, [r7, #4]
 8107856:	681b      	ldr	r3, [r3, #0]
 8107858:	699b      	ldr	r3, [r3, #24]
 810785a:	f003 0303 	and.w	r3, r3, #3
 810785e:	2b00      	cmp	r3, #0
 8107860:	d003      	beq.n	810786a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8107862:	6878      	ldr	r0, [r7, #4]
 8107864:	f000 fa1a 	bl	8107c9c <HAL_TIM_IC_CaptureCallback>
 8107868:	e005      	b.n	8107876 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810786a:	6878      	ldr	r0, [r7, #4]
 810786c:	f000 fa0c 	bl	8107c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107870:	6878      	ldr	r0, [r7, #4]
 8107872:	f000 fa1d 	bl	8107cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107876:	687b      	ldr	r3, [r7, #4]
 8107878:	2200      	movs	r2, #0
 810787a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810787c:	687b      	ldr	r3, [r7, #4]
 810787e:	681b      	ldr	r3, [r3, #0]
 8107880:	691b      	ldr	r3, [r3, #16]
 8107882:	f003 0304 	and.w	r3, r3, #4
 8107886:	2b04      	cmp	r3, #4
 8107888:	d122      	bne.n	81078d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810788a:	687b      	ldr	r3, [r7, #4]
 810788c:	681b      	ldr	r3, [r3, #0]
 810788e:	68db      	ldr	r3, [r3, #12]
 8107890:	f003 0304 	and.w	r3, r3, #4
 8107894:	2b04      	cmp	r3, #4
 8107896:	d11b      	bne.n	81078d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8107898:	687b      	ldr	r3, [r7, #4]
 810789a:	681b      	ldr	r3, [r3, #0]
 810789c:	f06f 0204 	mvn.w	r2, #4
 81078a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81078a2:	687b      	ldr	r3, [r7, #4]
 81078a4:	2202      	movs	r2, #2
 81078a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81078a8:	687b      	ldr	r3, [r7, #4]
 81078aa:	681b      	ldr	r3, [r3, #0]
 81078ac:	699b      	ldr	r3, [r3, #24]
 81078ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81078b2:	2b00      	cmp	r3, #0
 81078b4:	d003      	beq.n	81078be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81078b6:	6878      	ldr	r0, [r7, #4]
 81078b8:	f000 f9f0 	bl	8107c9c <HAL_TIM_IC_CaptureCallback>
 81078bc:	e005      	b.n	81078ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81078be:	6878      	ldr	r0, [r7, #4]
 81078c0:	f000 f9e2 	bl	8107c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81078c4:	6878      	ldr	r0, [r7, #4]
 81078c6:	f000 f9f3 	bl	8107cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81078ca:	687b      	ldr	r3, [r7, #4]
 81078cc:	2200      	movs	r2, #0
 81078ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81078d0:	687b      	ldr	r3, [r7, #4]
 81078d2:	681b      	ldr	r3, [r3, #0]
 81078d4:	691b      	ldr	r3, [r3, #16]
 81078d6:	f003 0308 	and.w	r3, r3, #8
 81078da:	2b08      	cmp	r3, #8
 81078dc:	d122      	bne.n	8107924 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81078de:	687b      	ldr	r3, [r7, #4]
 81078e0:	681b      	ldr	r3, [r3, #0]
 81078e2:	68db      	ldr	r3, [r3, #12]
 81078e4:	f003 0308 	and.w	r3, r3, #8
 81078e8:	2b08      	cmp	r3, #8
 81078ea:	d11b      	bne.n	8107924 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81078ec:	687b      	ldr	r3, [r7, #4]
 81078ee:	681b      	ldr	r3, [r3, #0]
 81078f0:	f06f 0208 	mvn.w	r2, #8
 81078f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81078f6:	687b      	ldr	r3, [r7, #4]
 81078f8:	2204      	movs	r2, #4
 81078fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81078fc:	687b      	ldr	r3, [r7, #4]
 81078fe:	681b      	ldr	r3, [r3, #0]
 8107900:	69db      	ldr	r3, [r3, #28]
 8107902:	f003 0303 	and.w	r3, r3, #3
 8107906:	2b00      	cmp	r3, #0
 8107908:	d003      	beq.n	8107912 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810790a:	6878      	ldr	r0, [r7, #4]
 810790c:	f000 f9c6 	bl	8107c9c <HAL_TIM_IC_CaptureCallback>
 8107910:	e005      	b.n	810791e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107912:	6878      	ldr	r0, [r7, #4]
 8107914:	f000 f9b8 	bl	8107c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107918:	6878      	ldr	r0, [r7, #4]
 810791a:	f000 f9c9 	bl	8107cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	2200      	movs	r2, #0
 8107922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8107924:	687b      	ldr	r3, [r7, #4]
 8107926:	681b      	ldr	r3, [r3, #0]
 8107928:	691b      	ldr	r3, [r3, #16]
 810792a:	f003 0310 	and.w	r3, r3, #16
 810792e:	2b10      	cmp	r3, #16
 8107930:	d122      	bne.n	8107978 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8107932:	687b      	ldr	r3, [r7, #4]
 8107934:	681b      	ldr	r3, [r3, #0]
 8107936:	68db      	ldr	r3, [r3, #12]
 8107938:	f003 0310 	and.w	r3, r3, #16
 810793c:	2b10      	cmp	r3, #16
 810793e:	d11b      	bne.n	8107978 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8107940:	687b      	ldr	r3, [r7, #4]
 8107942:	681b      	ldr	r3, [r3, #0]
 8107944:	f06f 0210 	mvn.w	r2, #16
 8107948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810794a:	687b      	ldr	r3, [r7, #4]
 810794c:	2208      	movs	r2, #8
 810794e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8107950:	687b      	ldr	r3, [r7, #4]
 8107952:	681b      	ldr	r3, [r3, #0]
 8107954:	69db      	ldr	r3, [r3, #28]
 8107956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810795a:	2b00      	cmp	r3, #0
 810795c:	d003      	beq.n	8107966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810795e:	6878      	ldr	r0, [r7, #4]
 8107960:	f000 f99c 	bl	8107c9c <HAL_TIM_IC_CaptureCallback>
 8107964:	e005      	b.n	8107972 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107966:	6878      	ldr	r0, [r7, #4]
 8107968:	f000 f98e 	bl	8107c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810796c:	6878      	ldr	r0, [r7, #4]
 810796e:	f000 f99f 	bl	8107cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107972:	687b      	ldr	r3, [r7, #4]
 8107974:	2200      	movs	r2, #0
 8107976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	681b      	ldr	r3, [r3, #0]
 810797c:	691b      	ldr	r3, [r3, #16]
 810797e:	f003 0301 	and.w	r3, r3, #1
 8107982:	2b01      	cmp	r3, #1
 8107984:	d10e      	bne.n	81079a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8107986:	687b      	ldr	r3, [r7, #4]
 8107988:	681b      	ldr	r3, [r3, #0]
 810798a:	68db      	ldr	r3, [r3, #12]
 810798c:	f003 0301 	and.w	r3, r3, #1
 8107990:	2b01      	cmp	r3, #1
 8107992:	d107      	bne.n	81079a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8107994:	687b      	ldr	r3, [r7, #4]
 8107996:	681b      	ldr	r3, [r3, #0]
 8107998:	f06f 0201 	mvn.w	r2, #1
 810799c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810799e:	6878      	ldr	r0, [r7, #4]
 81079a0:	f7fa fb96 	bl	81020d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81079a4:	687b      	ldr	r3, [r7, #4]
 81079a6:	681b      	ldr	r3, [r3, #0]
 81079a8:	691b      	ldr	r3, [r3, #16]
 81079aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81079ae:	2b80      	cmp	r3, #128	; 0x80
 81079b0:	d10e      	bne.n	81079d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81079b2:	687b      	ldr	r3, [r7, #4]
 81079b4:	681b      	ldr	r3, [r3, #0]
 81079b6:	68db      	ldr	r3, [r3, #12]
 81079b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81079bc:	2b80      	cmp	r3, #128	; 0x80
 81079be:	d107      	bne.n	81079d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81079c0:	687b      	ldr	r3, [r7, #4]
 81079c2:	681b      	ldr	r3, [r3, #0]
 81079c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81079c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81079ca:	6878      	ldr	r0, [r7, #4]
 81079cc:	f000 fdb2 	bl	8108534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81079d0:	687b      	ldr	r3, [r7, #4]
 81079d2:	681b      	ldr	r3, [r3, #0]
 81079d4:	691b      	ldr	r3, [r3, #16]
 81079d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81079da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81079de:	d10e      	bne.n	81079fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81079e0:	687b      	ldr	r3, [r7, #4]
 81079e2:	681b      	ldr	r3, [r3, #0]
 81079e4:	68db      	ldr	r3, [r3, #12]
 81079e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81079ea:	2b80      	cmp	r3, #128	; 0x80
 81079ec:	d107      	bne.n	81079fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81079ee:	687b      	ldr	r3, [r7, #4]
 81079f0:	681b      	ldr	r3, [r3, #0]
 81079f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81079f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81079f8:	6878      	ldr	r0, [r7, #4]
 81079fa:	f000 fda5 	bl	8108548 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81079fe:	687b      	ldr	r3, [r7, #4]
 8107a00:	681b      	ldr	r3, [r3, #0]
 8107a02:	691b      	ldr	r3, [r3, #16]
 8107a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107a08:	2b40      	cmp	r3, #64	; 0x40
 8107a0a:	d10e      	bne.n	8107a2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8107a0c:	687b      	ldr	r3, [r7, #4]
 8107a0e:	681b      	ldr	r3, [r3, #0]
 8107a10:	68db      	ldr	r3, [r3, #12]
 8107a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107a16:	2b40      	cmp	r3, #64	; 0x40
 8107a18:	d107      	bne.n	8107a2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8107a1a:	687b      	ldr	r3, [r7, #4]
 8107a1c:	681b      	ldr	r3, [r3, #0]
 8107a1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8107a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8107a24:	6878      	ldr	r0, [r7, #4]
 8107a26:	f000 f94d 	bl	8107cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8107a2a:	687b      	ldr	r3, [r7, #4]
 8107a2c:	681b      	ldr	r3, [r3, #0]
 8107a2e:	691b      	ldr	r3, [r3, #16]
 8107a30:	f003 0320 	and.w	r3, r3, #32
 8107a34:	2b20      	cmp	r3, #32
 8107a36:	d10e      	bne.n	8107a56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	681b      	ldr	r3, [r3, #0]
 8107a3c:	68db      	ldr	r3, [r3, #12]
 8107a3e:	f003 0320 	and.w	r3, r3, #32
 8107a42:	2b20      	cmp	r3, #32
 8107a44:	d107      	bne.n	8107a56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8107a46:	687b      	ldr	r3, [r7, #4]
 8107a48:	681b      	ldr	r3, [r3, #0]
 8107a4a:	f06f 0220 	mvn.w	r2, #32
 8107a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8107a50:	6878      	ldr	r0, [r7, #4]
 8107a52:	f000 fd65 	bl	8108520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8107a56:	bf00      	nop
 8107a58:	3708      	adds	r7, #8
 8107a5a:	46bd      	mov	sp, r7
 8107a5c:	bd80      	pop	{r7, pc}
	...

08107a60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8107a60:	b580      	push	{r7, lr}
 8107a62:	b086      	sub	sp, #24
 8107a64:	af00      	add	r7, sp, #0
 8107a66:	60f8      	str	r0, [r7, #12]
 8107a68:	60b9      	str	r1, [r7, #8]
 8107a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107a6c:	2300      	movs	r3, #0
 8107a6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107a70:	68fb      	ldr	r3, [r7, #12]
 8107a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107a76:	2b01      	cmp	r3, #1
 8107a78:	d101      	bne.n	8107a7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8107a7a:	2302      	movs	r3, #2
 8107a7c:	e0ff      	b.n	8107c7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8107a7e:	68fb      	ldr	r3, [r7, #12]
 8107a80:	2201      	movs	r2, #1
 8107a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8107a86:	687b      	ldr	r3, [r7, #4]
 8107a88:	2b14      	cmp	r3, #20
 8107a8a:	f200 80f0 	bhi.w	8107c6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8107a8e:	a201      	add	r2, pc, #4	; (adr r2, 8107a94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8107a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107a94:	08107ae9 	.word	0x08107ae9
 8107a98:	08107c6f 	.word	0x08107c6f
 8107a9c:	08107c6f 	.word	0x08107c6f
 8107aa0:	08107c6f 	.word	0x08107c6f
 8107aa4:	08107b29 	.word	0x08107b29
 8107aa8:	08107c6f 	.word	0x08107c6f
 8107aac:	08107c6f 	.word	0x08107c6f
 8107ab0:	08107c6f 	.word	0x08107c6f
 8107ab4:	08107b6b 	.word	0x08107b6b
 8107ab8:	08107c6f 	.word	0x08107c6f
 8107abc:	08107c6f 	.word	0x08107c6f
 8107ac0:	08107c6f 	.word	0x08107c6f
 8107ac4:	08107bab 	.word	0x08107bab
 8107ac8:	08107c6f 	.word	0x08107c6f
 8107acc:	08107c6f 	.word	0x08107c6f
 8107ad0:	08107c6f 	.word	0x08107c6f
 8107ad4:	08107bed 	.word	0x08107bed
 8107ad8:	08107c6f 	.word	0x08107c6f
 8107adc:	08107c6f 	.word	0x08107c6f
 8107ae0:	08107c6f 	.word	0x08107c6f
 8107ae4:	08107c2d 	.word	0x08107c2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8107ae8:	68fb      	ldr	r3, [r7, #12]
 8107aea:	681b      	ldr	r3, [r3, #0]
 8107aec:	68b9      	ldr	r1, [r7, #8]
 8107aee:	4618      	mov	r0, r3
 8107af0:	f000 f98c 	bl	8107e0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8107af4:	68fb      	ldr	r3, [r7, #12]
 8107af6:	681b      	ldr	r3, [r3, #0]
 8107af8:	699a      	ldr	r2, [r3, #24]
 8107afa:	68fb      	ldr	r3, [r7, #12]
 8107afc:	681b      	ldr	r3, [r3, #0]
 8107afe:	f042 0208 	orr.w	r2, r2, #8
 8107b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8107b04:	68fb      	ldr	r3, [r7, #12]
 8107b06:	681b      	ldr	r3, [r3, #0]
 8107b08:	699a      	ldr	r2, [r3, #24]
 8107b0a:	68fb      	ldr	r3, [r7, #12]
 8107b0c:	681b      	ldr	r3, [r3, #0]
 8107b0e:	f022 0204 	bic.w	r2, r2, #4
 8107b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8107b14:	68fb      	ldr	r3, [r7, #12]
 8107b16:	681b      	ldr	r3, [r3, #0]
 8107b18:	6999      	ldr	r1, [r3, #24]
 8107b1a:	68bb      	ldr	r3, [r7, #8]
 8107b1c:	691a      	ldr	r2, [r3, #16]
 8107b1e:	68fb      	ldr	r3, [r7, #12]
 8107b20:	681b      	ldr	r3, [r3, #0]
 8107b22:	430a      	orrs	r2, r1
 8107b24:	619a      	str	r2, [r3, #24]
      break;
 8107b26:	e0a5      	b.n	8107c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8107b28:	68fb      	ldr	r3, [r7, #12]
 8107b2a:	681b      	ldr	r3, [r3, #0]
 8107b2c:	68b9      	ldr	r1, [r7, #8]
 8107b2e:	4618      	mov	r0, r3
 8107b30:	f000 f9fc 	bl	8107f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8107b34:	68fb      	ldr	r3, [r7, #12]
 8107b36:	681b      	ldr	r3, [r3, #0]
 8107b38:	699a      	ldr	r2, [r3, #24]
 8107b3a:	68fb      	ldr	r3, [r7, #12]
 8107b3c:	681b      	ldr	r3, [r3, #0]
 8107b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8107b44:	68fb      	ldr	r3, [r7, #12]
 8107b46:	681b      	ldr	r3, [r3, #0]
 8107b48:	699a      	ldr	r2, [r3, #24]
 8107b4a:	68fb      	ldr	r3, [r7, #12]
 8107b4c:	681b      	ldr	r3, [r3, #0]
 8107b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8107b54:	68fb      	ldr	r3, [r7, #12]
 8107b56:	681b      	ldr	r3, [r3, #0]
 8107b58:	6999      	ldr	r1, [r3, #24]
 8107b5a:	68bb      	ldr	r3, [r7, #8]
 8107b5c:	691b      	ldr	r3, [r3, #16]
 8107b5e:	021a      	lsls	r2, r3, #8
 8107b60:	68fb      	ldr	r3, [r7, #12]
 8107b62:	681b      	ldr	r3, [r3, #0]
 8107b64:	430a      	orrs	r2, r1
 8107b66:	619a      	str	r2, [r3, #24]
      break;
 8107b68:	e084      	b.n	8107c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8107b6a:	68fb      	ldr	r3, [r7, #12]
 8107b6c:	681b      	ldr	r3, [r3, #0]
 8107b6e:	68b9      	ldr	r1, [r7, #8]
 8107b70:	4618      	mov	r0, r3
 8107b72:	f000 fa65 	bl	8108040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8107b76:	68fb      	ldr	r3, [r7, #12]
 8107b78:	681b      	ldr	r3, [r3, #0]
 8107b7a:	69da      	ldr	r2, [r3, #28]
 8107b7c:	68fb      	ldr	r3, [r7, #12]
 8107b7e:	681b      	ldr	r3, [r3, #0]
 8107b80:	f042 0208 	orr.w	r2, r2, #8
 8107b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8107b86:	68fb      	ldr	r3, [r7, #12]
 8107b88:	681b      	ldr	r3, [r3, #0]
 8107b8a:	69da      	ldr	r2, [r3, #28]
 8107b8c:	68fb      	ldr	r3, [r7, #12]
 8107b8e:	681b      	ldr	r3, [r3, #0]
 8107b90:	f022 0204 	bic.w	r2, r2, #4
 8107b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8107b96:	68fb      	ldr	r3, [r7, #12]
 8107b98:	681b      	ldr	r3, [r3, #0]
 8107b9a:	69d9      	ldr	r1, [r3, #28]
 8107b9c:	68bb      	ldr	r3, [r7, #8]
 8107b9e:	691a      	ldr	r2, [r3, #16]
 8107ba0:	68fb      	ldr	r3, [r7, #12]
 8107ba2:	681b      	ldr	r3, [r3, #0]
 8107ba4:	430a      	orrs	r2, r1
 8107ba6:	61da      	str	r2, [r3, #28]
      break;
 8107ba8:	e064      	b.n	8107c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8107baa:	68fb      	ldr	r3, [r7, #12]
 8107bac:	681b      	ldr	r3, [r3, #0]
 8107bae:	68b9      	ldr	r1, [r7, #8]
 8107bb0:	4618      	mov	r0, r3
 8107bb2:	f000 facd 	bl	8108150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8107bb6:	68fb      	ldr	r3, [r7, #12]
 8107bb8:	681b      	ldr	r3, [r3, #0]
 8107bba:	69da      	ldr	r2, [r3, #28]
 8107bbc:	68fb      	ldr	r3, [r7, #12]
 8107bbe:	681b      	ldr	r3, [r3, #0]
 8107bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8107bc6:	68fb      	ldr	r3, [r7, #12]
 8107bc8:	681b      	ldr	r3, [r3, #0]
 8107bca:	69da      	ldr	r2, [r3, #28]
 8107bcc:	68fb      	ldr	r3, [r7, #12]
 8107bce:	681b      	ldr	r3, [r3, #0]
 8107bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8107bd6:	68fb      	ldr	r3, [r7, #12]
 8107bd8:	681b      	ldr	r3, [r3, #0]
 8107bda:	69d9      	ldr	r1, [r3, #28]
 8107bdc:	68bb      	ldr	r3, [r7, #8]
 8107bde:	691b      	ldr	r3, [r3, #16]
 8107be0:	021a      	lsls	r2, r3, #8
 8107be2:	68fb      	ldr	r3, [r7, #12]
 8107be4:	681b      	ldr	r3, [r3, #0]
 8107be6:	430a      	orrs	r2, r1
 8107be8:	61da      	str	r2, [r3, #28]
      break;
 8107bea:	e043      	b.n	8107c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8107bec:	68fb      	ldr	r3, [r7, #12]
 8107bee:	681b      	ldr	r3, [r3, #0]
 8107bf0:	68b9      	ldr	r1, [r7, #8]
 8107bf2:	4618      	mov	r0, r3
 8107bf4:	f000 fb16 	bl	8108224 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8107bf8:	68fb      	ldr	r3, [r7, #12]
 8107bfa:	681b      	ldr	r3, [r3, #0]
 8107bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107bfe:	68fb      	ldr	r3, [r7, #12]
 8107c00:	681b      	ldr	r3, [r3, #0]
 8107c02:	f042 0208 	orr.w	r2, r2, #8
 8107c06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8107c08:	68fb      	ldr	r3, [r7, #12]
 8107c0a:	681b      	ldr	r3, [r3, #0]
 8107c0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107c0e:	68fb      	ldr	r3, [r7, #12]
 8107c10:	681b      	ldr	r3, [r3, #0]
 8107c12:	f022 0204 	bic.w	r2, r2, #4
 8107c16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107c18:	68fb      	ldr	r3, [r7, #12]
 8107c1a:	681b      	ldr	r3, [r3, #0]
 8107c1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8107c1e:	68bb      	ldr	r3, [r7, #8]
 8107c20:	691a      	ldr	r2, [r3, #16]
 8107c22:	68fb      	ldr	r3, [r7, #12]
 8107c24:	681b      	ldr	r3, [r3, #0]
 8107c26:	430a      	orrs	r2, r1
 8107c28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8107c2a:	e023      	b.n	8107c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8107c2c:	68fb      	ldr	r3, [r7, #12]
 8107c2e:	681b      	ldr	r3, [r3, #0]
 8107c30:	68b9      	ldr	r1, [r7, #8]
 8107c32:	4618      	mov	r0, r3
 8107c34:	f000 fb5a 	bl	81082ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8107c38:	68fb      	ldr	r3, [r7, #12]
 8107c3a:	681b      	ldr	r3, [r3, #0]
 8107c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107c3e:	68fb      	ldr	r3, [r7, #12]
 8107c40:	681b      	ldr	r3, [r3, #0]
 8107c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107c46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8107c48:	68fb      	ldr	r3, [r7, #12]
 8107c4a:	681b      	ldr	r3, [r3, #0]
 8107c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107c4e:	68fb      	ldr	r3, [r7, #12]
 8107c50:	681b      	ldr	r3, [r3, #0]
 8107c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107c56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8107c58:	68fb      	ldr	r3, [r7, #12]
 8107c5a:	681b      	ldr	r3, [r3, #0]
 8107c5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8107c5e:	68bb      	ldr	r3, [r7, #8]
 8107c60:	691b      	ldr	r3, [r3, #16]
 8107c62:	021a      	lsls	r2, r3, #8
 8107c64:	68fb      	ldr	r3, [r7, #12]
 8107c66:	681b      	ldr	r3, [r3, #0]
 8107c68:	430a      	orrs	r2, r1
 8107c6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8107c6c:	e002      	b.n	8107c74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8107c6e:	2301      	movs	r3, #1
 8107c70:	75fb      	strb	r3, [r7, #23]
      break;
 8107c72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8107c74:	68fb      	ldr	r3, [r7, #12]
 8107c76:	2200      	movs	r2, #0
 8107c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8107c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8107c7e:	4618      	mov	r0, r3
 8107c80:	3718      	adds	r7, #24
 8107c82:	46bd      	mov	sp, r7
 8107c84:	bd80      	pop	{r7, pc}
 8107c86:	bf00      	nop

08107c88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107c88:	b480      	push	{r7}
 8107c8a:	b083      	sub	sp, #12
 8107c8c:	af00      	add	r7, sp, #0
 8107c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107c90:	bf00      	nop
 8107c92:	370c      	adds	r7, #12
 8107c94:	46bd      	mov	sp, r7
 8107c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c9a:	4770      	bx	lr

08107c9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8107c9c:	b480      	push	{r7}
 8107c9e:	b083      	sub	sp, #12
 8107ca0:	af00      	add	r7, sp, #0
 8107ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8107ca4:	bf00      	nop
 8107ca6:	370c      	adds	r7, #12
 8107ca8:	46bd      	mov	sp, r7
 8107caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cae:	4770      	bx	lr

08107cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107cb0:	b480      	push	{r7}
 8107cb2:	b083      	sub	sp, #12
 8107cb4:	af00      	add	r7, sp, #0
 8107cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8107cb8:	bf00      	nop
 8107cba:	370c      	adds	r7, #12
 8107cbc:	46bd      	mov	sp, r7
 8107cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cc2:	4770      	bx	lr

08107cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8107cc4:	b480      	push	{r7}
 8107cc6:	b083      	sub	sp, #12
 8107cc8:	af00      	add	r7, sp, #0
 8107cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107ccc:	bf00      	nop
 8107cce:	370c      	adds	r7, #12
 8107cd0:	46bd      	mov	sp, r7
 8107cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cd6:	4770      	bx	lr

08107cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8107cd8:	b480      	push	{r7}
 8107cda:	b085      	sub	sp, #20
 8107cdc:	af00      	add	r7, sp, #0
 8107cde:	6078      	str	r0, [r7, #4]
 8107ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107ce2:	687b      	ldr	r3, [r7, #4]
 8107ce4:	681b      	ldr	r3, [r3, #0]
 8107ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107ce8:	687b      	ldr	r3, [r7, #4]
 8107cea:	4a40      	ldr	r2, [pc, #256]	; (8107dec <TIM_Base_SetConfig+0x114>)
 8107cec:	4293      	cmp	r3, r2
 8107cee:	d013      	beq.n	8107d18 <TIM_Base_SetConfig+0x40>
 8107cf0:	687b      	ldr	r3, [r7, #4]
 8107cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107cf6:	d00f      	beq.n	8107d18 <TIM_Base_SetConfig+0x40>
 8107cf8:	687b      	ldr	r3, [r7, #4]
 8107cfa:	4a3d      	ldr	r2, [pc, #244]	; (8107df0 <TIM_Base_SetConfig+0x118>)
 8107cfc:	4293      	cmp	r3, r2
 8107cfe:	d00b      	beq.n	8107d18 <TIM_Base_SetConfig+0x40>
 8107d00:	687b      	ldr	r3, [r7, #4]
 8107d02:	4a3c      	ldr	r2, [pc, #240]	; (8107df4 <TIM_Base_SetConfig+0x11c>)
 8107d04:	4293      	cmp	r3, r2
 8107d06:	d007      	beq.n	8107d18 <TIM_Base_SetConfig+0x40>
 8107d08:	687b      	ldr	r3, [r7, #4]
 8107d0a:	4a3b      	ldr	r2, [pc, #236]	; (8107df8 <TIM_Base_SetConfig+0x120>)
 8107d0c:	4293      	cmp	r3, r2
 8107d0e:	d003      	beq.n	8107d18 <TIM_Base_SetConfig+0x40>
 8107d10:	687b      	ldr	r3, [r7, #4]
 8107d12:	4a3a      	ldr	r2, [pc, #232]	; (8107dfc <TIM_Base_SetConfig+0x124>)
 8107d14:	4293      	cmp	r3, r2
 8107d16:	d108      	bne.n	8107d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107d18:	68fb      	ldr	r3, [r7, #12]
 8107d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107d20:	683b      	ldr	r3, [r7, #0]
 8107d22:	685b      	ldr	r3, [r3, #4]
 8107d24:	68fa      	ldr	r2, [r7, #12]
 8107d26:	4313      	orrs	r3, r2
 8107d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107d2a:	687b      	ldr	r3, [r7, #4]
 8107d2c:	4a2f      	ldr	r2, [pc, #188]	; (8107dec <TIM_Base_SetConfig+0x114>)
 8107d2e:	4293      	cmp	r3, r2
 8107d30:	d01f      	beq.n	8107d72 <TIM_Base_SetConfig+0x9a>
 8107d32:	687b      	ldr	r3, [r7, #4]
 8107d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107d38:	d01b      	beq.n	8107d72 <TIM_Base_SetConfig+0x9a>
 8107d3a:	687b      	ldr	r3, [r7, #4]
 8107d3c:	4a2c      	ldr	r2, [pc, #176]	; (8107df0 <TIM_Base_SetConfig+0x118>)
 8107d3e:	4293      	cmp	r3, r2
 8107d40:	d017      	beq.n	8107d72 <TIM_Base_SetConfig+0x9a>
 8107d42:	687b      	ldr	r3, [r7, #4]
 8107d44:	4a2b      	ldr	r2, [pc, #172]	; (8107df4 <TIM_Base_SetConfig+0x11c>)
 8107d46:	4293      	cmp	r3, r2
 8107d48:	d013      	beq.n	8107d72 <TIM_Base_SetConfig+0x9a>
 8107d4a:	687b      	ldr	r3, [r7, #4]
 8107d4c:	4a2a      	ldr	r2, [pc, #168]	; (8107df8 <TIM_Base_SetConfig+0x120>)
 8107d4e:	4293      	cmp	r3, r2
 8107d50:	d00f      	beq.n	8107d72 <TIM_Base_SetConfig+0x9a>
 8107d52:	687b      	ldr	r3, [r7, #4]
 8107d54:	4a29      	ldr	r2, [pc, #164]	; (8107dfc <TIM_Base_SetConfig+0x124>)
 8107d56:	4293      	cmp	r3, r2
 8107d58:	d00b      	beq.n	8107d72 <TIM_Base_SetConfig+0x9a>
 8107d5a:	687b      	ldr	r3, [r7, #4]
 8107d5c:	4a28      	ldr	r2, [pc, #160]	; (8107e00 <TIM_Base_SetConfig+0x128>)
 8107d5e:	4293      	cmp	r3, r2
 8107d60:	d007      	beq.n	8107d72 <TIM_Base_SetConfig+0x9a>
 8107d62:	687b      	ldr	r3, [r7, #4]
 8107d64:	4a27      	ldr	r2, [pc, #156]	; (8107e04 <TIM_Base_SetConfig+0x12c>)
 8107d66:	4293      	cmp	r3, r2
 8107d68:	d003      	beq.n	8107d72 <TIM_Base_SetConfig+0x9a>
 8107d6a:	687b      	ldr	r3, [r7, #4]
 8107d6c:	4a26      	ldr	r2, [pc, #152]	; (8107e08 <TIM_Base_SetConfig+0x130>)
 8107d6e:	4293      	cmp	r3, r2
 8107d70:	d108      	bne.n	8107d84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107d72:	68fb      	ldr	r3, [r7, #12]
 8107d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107d7a:	683b      	ldr	r3, [r7, #0]
 8107d7c:	68db      	ldr	r3, [r3, #12]
 8107d7e:	68fa      	ldr	r2, [r7, #12]
 8107d80:	4313      	orrs	r3, r2
 8107d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107d84:	68fb      	ldr	r3, [r7, #12]
 8107d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107d8a:	683b      	ldr	r3, [r7, #0]
 8107d8c:	695b      	ldr	r3, [r3, #20]
 8107d8e:	4313      	orrs	r3, r2
 8107d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107d92:	687b      	ldr	r3, [r7, #4]
 8107d94:	68fa      	ldr	r2, [r7, #12]
 8107d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107d98:	683b      	ldr	r3, [r7, #0]
 8107d9a:	689a      	ldr	r2, [r3, #8]
 8107d9c:	687b      	ldr	r3, [r7, #4]
 8107d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107da0:	683b      	ldr	r3, [r7, #0]
 8107da2:	681a      	ldr	r2, [r3, #0]
 8107da4:	687b      	ldr	r3, [r7, #4]
 8107da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107da8:	687b      	ldr	r3, [r7, #4]
 8107daa:	4a10      	ldr	r2, [pc, #64]	; (8107dec <TIM_Base_SetConfig+0x114>)
 8107dac:	4293      	cmp	r3, r2
 8107dae:	d00f      	beq.n	8107dd0 <TIM_Base_SetConfig+0xf8>
 8107db0:	687b      	ldr	r3, [r7, #4]
 8107db2:	4a12      	ldr	r2, [pc, #72]	; (8107dfc <TIM_Base_SetConfig+0x124>)
 8107db4:	4293      	cmp	r3, r2
 8107db6:	d00b      	beq.n	8107dd0 <TIM_Base_SetConfig+0xf8>
 8107db8:	687b      	ldr	r3, [r7, #4]
 8107dba:	4a11      	ldr	r2, [pc, #68]	; (8107e00 <TIM_Base_SetConfig+0x128>)
 8107dbc:	4293      	cmp	r3, r2
 8107dbe:	d007      	beq.n	8107dd0 <TIM_Base_SetConfig+0xf8>
 8107dc0:	687b      	ldr	r3, [r7, #4]
 8107dc2:	4a10      	ldr	r2, [pc, #64]	; (8107e04 <TIM_Base_SetConfig+0x12c>)
 8107dc4:	4293      	cmp	r3, r2
 8107dc6:	d003      	beq.n	8107dd0 <TIM_Base_SetConfig+0xf8>
 8107dc8:	687b      	ldr	r3, [r7, #4]
 8107dca:	4a0f      	ldr	r2, [pc, #60]	; (8107e08 <TIM_Base_SetConfig+0x130>)
 8107dcc:	4293      	cmp	r3, r2
 8107dce:	d103      	bne.n	8107dd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107dd0:	683b      	ldr	r3, [r7, #0]
 8107dd2:	691a      	ldr	r2, [r3, #16]
 8107dd4:	687b      	ldr	r3, [r7, #4]
 8107dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107dd8:	687b      	ldr	r3, [r7, #4]
 8107dda:	2201      	movs	r2, #1
 8107ddc:	615a      	str	r2, [r3, #20]
}
 8107dde:	bf00      	nop
 8107de0:	3714      	adds	r7, #20
 8107de2:	46bd      	mov	sp, r7
 8107de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107de8:	4770      	bx	lr
 8107dea:	bf00      	nop
 8107dec:	40010000 	.word	0x40010000
 8107df0:	40000400 	.word	0x40000400
 8107df4:	40000800 	.word	0x40000800
 8107df8:	40000c00 	.word	0x40000c00
 8107dfc:	40010400 	.word	0x40010400
 8107e00:	40014000 	.word	0x40014000
 8107e04:	40014400 	.word	0x40014400
 8107e08:	40014800 	.word	0x40014800

08107e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107e0c:	b480      	push	{r7}
 8107e0e:	b087      	sub	sp, #28
 8107e10:	af00      	add	r7, sp, #0
 8107e12:	6078      	str	r0, [r7, #4]
 8107e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107e16:	687b      	ldr	r3, [r7, #4]
 8107e18:	6a1b      	ldr	r3, [r3, #32]
 8107e1a:	f023 0201 	bic.w	r2, r3, #1
 8107e1e:	687b      	ldr	r3, [r7, #4]
 8107e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107e22:	687b      	ldr	r3, [r7, #4]
 8107e24:	6a1b      	ldr	r3, [r3, #32]
 8107e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107e28:	687b      	ldr	r3, [r7, #4]
 8107e2a:	685b      	ldr	r3, [r3, #4]
 8107e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107e2e:	687b      	ldr	r3, [r7, #4]
 8107e30:	699b      	ldr	r3, [r3, #24]
 8107e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8107e34:	68fb      	ldr	r3, [r7, #12]
 8107e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107e40:	68fb      	ldr	r3, [r7, #12]
 8107e42:	f023 0303 	bic.w	r3, r3, #3
 8107e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107e48:	683b      	ldr	r3, [r7, #0]
 8107e4a:	681b      	ldr	r3, [r3, #0]
 8107e4c:	68fa      	ldr	r2, [r7, #12]
 8107e4e:	4313      	orrs	r3, r2
 8107e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8107e52:	697b      	ldr	r3, [r7, #20]
 8107e54:	f023 0302 	bic.w	r3, r3, #2
 8107e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8107e5a:	683b      	ldr	r3, [r7, #0]
 8107e5c:	689b      	ldr	r3, [r3, #8]
 8107e5e:	697a      	ldr	r2, [r7, #20]
 8107e60:	4313      	orrs	r3, r2
 8107e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107e64:	687b      	ldr	r3, [r7, #4]
 8107e66:	4a2c      	ldr	r2, [pc, #176]	; (8107f18 <TIM_OC1_SetConfig+0x10c>)
 8107e68:	4293      	cmp	r3, r2
 8107e6a:	d00f      	beq.n	8107e8c <TIM_OC1_SetConfig+0x80>
 8107e6c:	687b      	ldr	r3, [r7, #4]
 8107e6e:	4a2b      	ldr	r2, [pc, #172]	; (8107f1c <TIM_OC1_SetConfig+0x110>)
 8107e70:	4293      	cmp	r3, r2
 8107e72:	d00b      	beq.n	8107e8c <TIM_OC1_SetConfig+0x80>
 8107e74:	687b      	ldr	r3, [r7, #4]
 8107e76:	4a2a      	ldr	r2, [pc, #168]	; (8107f20 <TIM_OC1_SetConfig+0x114>)
 8107e78:	4293      	cmp	r3, r2
 8107e7a:	d007      	beq.n	8107e8c <TIM_OC1_SetConfig+0x80>
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	4a29      	ldr	r2, [pc, #164]	; (8107f24 <TIM_OC1_SetConfig+0x118>)
 8107e80:	4293      	cmp	r3, r2
 8107e82:	d003      	beq.n	8107e8c <TIM_OC1_SetConfig+0x80>
 8107e84:	687b      	ldr	r3, [r7, #4]
 8107e86:	4a28      	ldr	r2, [pc, #160]	; (8107f28 <TIM_OC1_SetConfig+0x11c>)
 8107e88:	4293      	cmp	r3, r2
 8107e8a:	d10c      	bne.n	8107ea6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107e8c:	697b      	ldr	r3, [r7, #20]
 8107e8e:	f023 0308 	bic.w	r3, r3, #8
 8107e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107e94:	683b      	ldr	r3, [r7, #0]
 8107e96:	68db      	ldr	r3, [r3, #12]
 8107e98:	697a      	ldr	r2, [r7, #20]
 8107e9a:	4313      	orrs	r3, r2
 8107e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8107e9e:	697b      	ldr	r3, [r7, #20]
 8107ea0:	f023 0304 	bic.w	r3, r3, #4
 8107ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107ea6:	687b      	ldr	r3, [r7, #4]
 8107ea8:	4a1b      	ldr	r2, [pc, #108]	; (8107f18 <TIM_OC1_SetConfig+0x10c>)
 8107eaa:	4293      	cmp	r3, r2
 8107eac:	d00f      	beq.n	8107ece <TIM_OC1_SetConfig+0xc2>
 8107eae:	687b      	ldr	r3, [r7, #4]
 8107eb0:	4a1a      	ldr	r2, [pc, #104]	; (8107f1c <TIM_OC1_SetConfig+0x110>)
 8107eb2:	4293      	cmp	r3, r2
 8107eb4:	d00b      	beq.n	8107ece <TIM_OC1_SetConfig+0xc2>
 8107eb6:	687b      	ldr	r3, [r7, #4]
 8107eb8:	4a19      	ldr	r2, [pc, #100]	; (8107f20 <TIM_OC1_SetConfig+0x114>)
 8107eba:	4293      	cmp	r3, r2
 8107ebc:	d007      	beq.n	8107ece <TIM_OC1_SetConfig+0xc2>
 8107ebe:	687b      	ldr	r3, [r7, #4]
 8107ec0:	4a18      	ldr	r2, [pc, #96]	; (8107f24 <TIM_OC1_SetConfig+0x118>)
 8107ec2:	4293      	cmp	r3, r2
 8107ec4:	d003      	beq.n	8107ece <TIM_OC1_SetConfig+0xc2>
 8107ec6:	687b      	ldr	r3, [r7, #4]
 8107ec8:	4a17      	ldr	r2, [pc, #92]	; (8107f28 <TIM_OC1_SetConfig+0x11c>)
 8107eca:	4293      	cmp	r3, r2
 8107ecc:	d111      	bne.n	8107ef2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8107ece:	693b      	ldr	r3, [r7, #16]
 8107ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107ed6:	693b      	ldr	r3, [r7, #16]
 8107ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8107ede:	683b      	ldr	r3, [r7, #0]
 8107ee0:	695b      	ldr	r3, [r3, #20]
 8107ee2:	693a      	ldr	r2, [r7, #16]
 8107ee4:	4313      	orrs	r3, r2
 8107ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107ee8:	683b      	ldr	r3, [r7, #0]
 8107eea:	699b      	ldr	r3, [r3, #24]
 8107eec:	693a      	ldr	r2, [r7, #16]
 8107eee:	4313      	orrs	r3, r2
 8107ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107ef2:	687b      	ldr	r3, [r7, #4]
 8107ef4:	693a      	ldr	r2, [r7, #16]
 8107ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107ef8:	687b      	ldr	r3, [r7, #4]
 8107efa:	68fa      	ldr	r2, [r7, #12]
 8107efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8107efe:	683b      	ldr	r3, [r7, #0]
 8107f00:	685a      	ldr	r2, [r3, #4]
 8107f02:	687b      	ldr	r3, [r7, #4]
 8107f04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107f06:	687b      	ldr	r3, [r7, #4]
 8107f08:	697a      	ldr	r2, [r7, #20]
 8107f0a:	621a      	str	r2, [r3, #32]
}
 8107f0c:	bf00      	nop
 8107f0e:	371c      	adds	r7, #28
 8107f10:	46bd      	mov	sp, r7
 8107f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f16:	4770      	bx	lr
 8107f18:	40010000 	.word	0x40010000
 8107f1c:	40010400 	.word	0x40010400
 8107f20:	40014000 	.word	0x40014000
 8107f24:	40014400 	.word	0x40014400
 8107f28:	40014800 	.word	0x40014800

08107f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107f2c:	b480      	push	{r7}
 8107f2e:	b087      	sub	sp, #28
 8107f30:	af00      	add	r7, sp, #0
 8107f32:	6078      	str	r0, [r7, #4]
 8107f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107f36:	687b      	ldr	r3, [r7, #4]
 8107f38:	6a1b      	ldr	r3, [r3, #32]
 8107f3a:	f023 0210 	bic.w	r2, r3, #16
 8107f3e:	687b      	ldr	r3, [r7, #4]
 8107f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107f42:	687b      	ldr	r3, [r7, #4]
 8107f44:	6a1b      	ldr	r3, [r3, #32]
 8107f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107f48:	687b      	ldr	r3, [r7, #4]
 8107f4a:	685b      	ldr	r3, [r3, #4]
 8107f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107f4e:	687b      	ldr	r3, [r7, #4]
 8107f50:	699b      	ldr	r3, [r3, #24]
 8107f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107f54:	68fb      	ldr	r3, [r7, #12]
 8107f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107f60:	68fb      	ldr	r3, [r7, #12]
 8107f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107f68:	683b      	ldr	r3, [r7, #0]
 8107f6a:	681b      	ldr	r3, [r3, #0]
 8107f6c:	021b      	lsls	r3, r3, #8
 8107f6e:	68fa      	ldr	r2, [r7, #12]
 8107f70:	4313      	orrs	r3, r2
 8107f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107f74:	697b      	ldr	r3, [r7, #20]
 8107f76:	f023 0320 	bic.w	r3, r3, #32
 8107f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107f7c:	683b      	ldr	r3, [r7, #0]
 8107f7e:	689b      	ldr	r3, [r3, #8]
 8107f80:	011b      	lsls	r3, r3, #4
 8107f82:	697a      	ldr	r2, [r7, #20]
 8107f84:	4313      	orrs	r3, r2
 8107f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107f88:	687b      	ldr	r3, [r7, #4]
 8107f8a:	4a28      	ldr	r2, [pc, #160]	; (810802c <TIM_OC2_SetConfig+0x100>)
 8107f8c:	4293      	cmp	r3, r2
 8107f8e:	d003      	beq.n	8107f98 <TIM_OC2_SetConfig+0x6c>
 8107f90:	687b      	ldr	r3, [r7, #4]
 8107f92:	4a27      	ldr	r2, [pc, #156]	; (8108030 <TIM_OC2_SetConfig+0x104>)
 8107f94:	4293      	cmp	r3, r2
 8107f96:	d10d      	bne.n	8107fb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107f98:	697b      	ldr	r3, [r7, #20]
 8107f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107fa0:	683b      	ldr	r3, [r7, #0]
 8107fa2:	68db      	ldr	r3, [r3, #12]
 8107fa4:	011b      	lsls	r3, r3, #4
 8107fa6:	697a      	ldr	r2, [r7, #20]
 8107fa8:	4313      	orrs	r3, r2
 8107faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107fac:	697b      	ldr	r3, [r7, #20]
 8107fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107fb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107fb4:	687b      	ldr	r3, [r7, #4]
 8107fb6:	4a1d      	ldr	r2, [pc, #116]	; (810802c <TIM_OC2_SetConfig+0x100>)
 8107fb8:	4293      	cmp	r3, r2
 8107fba:	d00f      	beq.n	8107fdc <TIM_OC2_SetConfig+0xb0>
 8107fbc:	687b      	ldr	r3, [r7, #4]
 8107fbe:	4a1c      	ldr	r2, [pc, #112]	; (8108030 <TIM_OC2_SetConfig+0x104>)
 8107fc0:	4293      	cmp	r3, r2
 8107fc2:	d00b      	beq.n	8107fdc <TIM_OC2_SetConfig+0xb0>
 8107fc4:	687b      	ldr	r3, [r7, #4]
 8107fc6:	4a1b      	ldr	r2, [pc, #108]	; (8108034 <TIM_OC2_SetConfig+0x108>)
 8107fc8:	4293      	cmp	r3, r2
 8107fca:	d007      	beq.n	8107fdc <TIM_OC2_SetConfig+0xb0>
 8107fcc:	687b      	ldr	r3, [r7, #4]
 8107fce:	4a1a      	ldr	r2, [pc, #104]	; (8108038 <TIM_OC2_SetConfig+0x10c>)
 8107fd0:	4293      	cmp	r3, r2
 8107fd2:	d003      	beq.n	8107fdc <TIM_OC2_SetConfig+0xb0>
 8107fd4:	687b      	ldr	r3, [r7, #4]
 8107fd6:	4a19      	ldr	r2, [pc, #100]	; (810803c <TIM_OC2_SetConfig+0x110>)
 8107fd8:	4293      	cmp	r3, r2
 8107fda:	d113      	bne.n	8108004 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107fdc:	693b      	ldr	r3, [r7, #16]
 8107fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107fe4:	693b      	ldr	r3, [r7, #16]
 8107fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107fec:	683b      	ldr	r3, [r7, #0]
 8107fee:	695b      	ldr	r3, [r3, #20]
 8107ff0:	009b      	lsls	r3, r3, #2
 8107ff2:	693a      	ldr	r2, [r7, #16]
 8107ff4:	4313      	orrs	r3, r2
 8107ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107ff8:	683b      	ldr	r3, [r7, #0]
 8107ffa:	699b      	ldr	r3, [r3, #24]
 8107ffc:	009b      	lsls	r3, r3, #2
 8107ffe:	693a      	ldr	r2, [r7, #16]
 8108000:	4313      	orrs	r3, r2
 8108002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108004:	687b      	ldr	r3, [r7, #4]
 8108006:	693a      	ldr	r2, [r7, #16]
 8108008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810800a:	687b      	ldr	r3, [r7, #4]
 810800c:	68fa      	ldr	r2, [r7, #12]
 810800e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8108010:	683b      	ldr	r3, [r7, #0]
 8108012:	685a      	ldr	r2, [r3, #4]
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108018:	687b      	ldr	r3, [r7, #4]
 810801a:	697a      	ldr	r2, [r7, #20]
 810801c:	621a      	str	r2, [r3, #32]
}
 810801e:	bf00      	nop
 8108020:	371c      	adds	r7, #28
 8108022:	46bd      	mov	sp, r7
 8108024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108028:	4770      	bx	lr
 810802a:	bf00      	nop
 810802c:	40010000 	.word	0x40010000
 8108030:	40010400 	.word	0x40010400
 8108034:	40014000 	.word	0x40014000
 8108038:	40014400 	.word	0x40014400
 810803c:	40014800 	.word	0x40014800

08108040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108040:	b480      	push	{r7}
 8108042:	b087      	sub	sp, #28
 8108044:	af00      	add	r7, sp, #0
 8108046:	6078      	str	r0, [r7, #4]
 8108048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810804a:	687b      	ldr	r3, [r7, #4]
 810804c:	6a1b      	ldr	r3, [r3, #32]
 810804e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8108052:	687b      	ldr	r3, [r7, #4]
 8108054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108056:	687b      	ldr	r3, [r7, #4]
 8108058:	6a1b      	ldr	r3, [r3, #32]
 810805a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810805c:	687b      	ldr	r3, [r7, #4]
 810805e:	685b      	ldr	r3, [r3, #4]
 8108060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8108062:	687b      	ldr	r3, [r7, #4]
 8108064:	69db      	ldr	r3, [r3, #28]
 8108066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8108068:	68fb      	ldr	r3, [r7, #12]
 810806a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810806e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8108074:	68fb      	ldr	r3, [r7, #12]
 8108076:	f023 0303 	bic.w	r3, r3, #3
 810807a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810807c:	683b      	ldr	r3, [r7, #0]
 810807e:	681b      	ldr	r3, [r3, #0]
 8108080:	68fa      	ldr	r2, [r7, #12]
 8108082:	4313      	orrs	r3, r2
 8108084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8108086:	697b      	ldr	r3, [r7, #20]
 8108088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810808c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810808e:	683b      	ldr	r3, [r7, #0]
 8108090:	689b      	ldr	r3, [r3, #8]
 8108092:	021b      	lsls	r3, r3, #8
 8108094:	697a      	ldr	r2, [r7, #20]
 8108096:	4313      	orrs	r3, r2
 8108098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810809a:	687b      	ldr	r3, [r7, #4]
 810809c:	4a27      	ldr	r2, [pc, #156]	; (810813c <TIM_OC3_SetConfig+0xfc>)
 810809e:	4293      	cmp	r3, r2
 81080a0:	d003      	beq.n	81080aa <TIM_OC3_SetConfig+0x6a>
 81080a2:	687b      	ldr	r3, [r7, #4]
 81080a4:	4a26      	ldr	r2, [pc, #152]	; (8108140 <TIM_OC3_SetConfig+0x100>)
 81080a6:	4293      	cmp	r3, r2
 81080a8:	d10d      	bne.n	81080c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 81080aa:	697b      	ldr	r3, [r7, #20]
 81080ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81080b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81080b2:	683b      	ldr	r3, [r7, #0]
 81080b4:	68db      	ldr	r3, [r3, #12]
 81080b6:	021b      	lsls	r3, r3, #8
 81080b8:	697a      	ldr	r2, [r7, #20]
 81080ba:	4313      	orrs	r3, r2
 81080bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81080be:	697b      	ldr	r3, [r7, #20]
 81080c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81080c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81080c6:	687b      	ldr	r3, [r7, #4]
 81080c8:	4a1c      	ldr	r2, [pc, #112]	; (810813c <TIM_OC3_SetConfig+0xfc>)
 81080ca:	4293      	cmp	r3, r2
 81080cc:	d00f      	beq.n	81080ee <TIM_OC3_SetConfig+0xae>
 81080ce:	687b      	ldr	r3, [r7, #4]
 81080d0:	4a1b      	ldr	r2, [pc, #108]	; (8108140 <TIM_OC3_SetConfig+0x100>)
 81080d2:	4293      	cmp	r3, r2
 81080d4:	d00b      	beq.n	81080ee <TIM_OC3_SetConfig+0xae>
 81080d6:	687b      	ldr	r3, [r7, #4]
 81080d8:	4a1a      	ldr	r2, [pc, #104]	; (8108144 <TIM_OC3_SetConfig+0x104>)
 81080da:	4293      	cmp	r3, r2
 81080dc:	d007      	beq.n	81080ee <TIM_OC3_SetConfig+0xae>
 81080de:	687b      	ldr	r3, [r7, #4]
 81080e0:	4a19      	ldr	r2, [pc, #100]	; (8108148 <TIM_OC3_SetConfig+0x108>)
 81080e2:	4293      	cmp	r3, r2
 81080e4:	d003      	beq.n	81080ee <TIM_OC3_SetConfig+0xae>
 81080e6:	687b      	ldr	r3, [r7, #4]
 81080e8:	4a18      	ldr	r2, [pc, #96]	; (810814c <TIM_OC3_SetConfig+0x10c>)
 81080ea:	4293      	cmp	r3, r2
 81080ec:	d113      	bne.n	8108116 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81080ee:	693b      	ldr	r3, [r7, #16]
 81080f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81080f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81080f6:	693b      	ldr	r3, [r7, #16]
 81080f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81080fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81080fe:	683b      	ldr	r3, [r7, #0]
 8108100:	695b      	ldr	r3, [r3, #20]
 8108102:	011b      	lsls	r3, r3, #4
 8108104:	693a      	ldr	r2, [r7, #16]
 8108106:	4313      	orrs	r3, r2
 8108108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810810a:	683b      	ldr	r3, [r7, #0]
 810810c:	699b      	ldr	r3, [r3, #24]
 810810e:	011b      	lsls	r3, r3, #4
 8108110:	693a      	ldr	r2, [r7, #16]
 8108112:	4313      	orrs	r3, r2
 8108114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108116:	687b      	ldr	r3, [r7, #4]
 8108118:	693a      	ldr	r2, [r7, #16]
 810811a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810811c:	687b      	ldr	r3, [r7, #4]
 810811e:	68fa      	ldr	r2, [r7, #12]
 8108120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8108122:	683b      	ldr	r3, [r7, #0]
 8108124:	685a      	ldr	r2, [r3, #4]
 8108126:	687b      	ldr	r3, [r7, #4]
 8108128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810812a:	687b      	ldr	r3, [r7, #4]
 810812c:	697a      	ldr	r2, [r7, #20]
 810812e:	621a      	str	r2, [r3, #32]
}
 8108130:	bf00      	nop
 8108132:	371c      	adds	r7, #28
 8108134:	46bd      	mov	sp, r7
 8108136:	f85d 7b04 	ldr.w	r7, [sp], #4
 810813a:	4770      	bx	lr
 810813c:	40010000 	.word	0x40010000
 8108140:	40010400 	.word	0x40010400
 8108144:	40014000 	.word	0x40014000
 8108148:	40014400 	.word	0x40014400
 810814c:	40014800 	.word	0x40014800

08108150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108150:	b480      	push	{r7}
 8108152:	b087      	sub	sp, #28
 8108154:	af00      	add	r7, sp, #0
 8108156:	6078      	str	r0, [r7, #4]
 8108158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810815a:	687b      	ldr	r3, [r7, #4]
 810815c:	6a1b      	ldr	r3, [r3, #32]
 810815e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8108162:	687b      	ldr	r3, [r7, #4]
 8108164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108166:	687b      	ldr	r3, [r7, #4]
 8108168:	6a1b      	ldr	r3, [r3, #32]
 810816a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810816c:	687b      	ldr	r3, [r7, #4]
 810816e:	685b      	ldr	r3, [r3, #4]
 8108170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8108172:	687b      	ldr	r3, [r7, #4]
 8108174:	69db      	ldr	r3, [r3, #28]
 8108176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8108178:	68fb      	ldr	r3, [r7, #12]
 810817a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810817e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8108182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8108184:	68fb      	ldr	r3, [r7, #12]
 8108186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810818a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810818c:	683b      	ldr	r3, [r7, #0]
 810818e:	681b      	ldr	r3, [r3, #0]
 8108190:	021b      	lsls	r3, r3, #8
 8108192:	68fa      	ldr	r2, [r7, #12]
 8108194:	4313      	orrs	r3, r2
 8108196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8108198:	693b      	ldr	r3, [r7, #16]
 810819a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810819e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81081a0:	683b      	ldr	r3, [r7, #0]
 81081a2:	689b      	ldr	r3, [r3, #8]
 81081a4:	031b      	lsls	r3, r3, #12
 81081a6:	693a      	ldr	r2, [r7, #16]
 81081a8:	4313      	orrs	r3, r2
 81081aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81081ac:	687b      	ldr	r3, [r7, #4]
 81081ae:	4a18      	ldr	r2, [pc, #96]	; (8108210 <TIM_OC4_SetConfig+0xc0>)
 81081b0:	4293      	cmp	r3, r2
 81081b2:	d00f      	beq.n	81081d4 <TIM_OC4_SetConfig+0x84>
 81081b4:	687b      	ldr	r3, [r7, #4]
 81081b6:	4a17      	ldr	r2, [pc, #92]	; (8108214 <TIM_OC4_SetConfig+0xc4>)
 81081b8:	4293      	cmp	r3, r2
 81081ba:	d00b      	beq.n	81081d4 <TIM_OC4_SetConfig+0x84>
 81081bc:	687b      	ldr	r3, [r7, #4]
 81081be:	4a16      	ldr	r2, [pc, #88]	; (8108218 <TIM_OC4_SetConfig+0xc8>)
 81081c0:	4293      	cmp	r3, r2
 81081c2:	d007      	beq.n	81081d4 <TIM_OC4_SetConfig+0x84>
 81081c4:	687b      	ldr	r3, [r7, #4]
 81081c6:	4a15      	ldr	r2, [pc, #84]	; (810821c <TIM_OC4_SetConfig+0xcc>)
 81081c8:	4293      	cmp	r3, r2
 81081ca:	d003      	beq.n	81081d4 <TIM_OC4_SetConfig+0x84>
 81081cc:	687b      	ldr	r3, [r7, #4]
 81081ce:	4a14      	ldr	r2, [pc, #80]	; (8108220 <TIM_OC4_SetConfig+0xd0>)
 81081d0:	4293      	cmp	r3, r2
 81081d2:	d109      	bne.n	81081e8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81081d4:	697b      	ldr	r3, [r7, #20]
 81081d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81081da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81081dc:	683b      	ldr	r3, [r7, #0]
 81081de:	695b      	ldr	r3, [r3, #20]
 81081e0:	019b      	lsls	r3, r3, #6
 81081e2:	697a      	ldr	r2, [r7, #20]
 81081e4:	4313      	orrs	r3, r2
 81081e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81081e8:	687b      	ldr	r3, [r7, #4]
 81081ea:	697a      	ldr	r2, [r7, #20]
 81081ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81081ee:	687b      	ldr	r3, [r7, #4]
 81081f0:	68fa      	ldr	r2, [r7, #12]
 81081f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81081f4:	683b      	ldr	r3, [r7, #0]
 81081f6:	685a      	ldr	r2, [r3, #4]
 81081f8:	687b      	ldr	r3, [r7, #4]
 81081fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81081fc:	687b      	ldr	r3, [r7, #4]
 81081fe:	693a      	ldr	r2, [r7, #16]
 8108200:	621a      	str	r2, [r3, #32]
}
 8108202:	bf00      	nop
 8108204:	371c      	adds	r7, #28
 8108206:	46bd      	mov	sp, r7
 8108208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810820c:	4770      	bx	lr
 810820e:	bf00      	nop
 8108210:	40010000 	.word	0x40010000
 8108214:	40010400 	.word	0x40010400
 8108218:	40014000 	.word	0x40014000
 810821c:	40014400 	.word	0x40014400
 8108220:	40014800 	.word	0x40014800

08108224 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8108224:	b480      	push	{r7}
 8108226:	b087      	sub	sp, #28
 8108228:	af00      	add	r7, sp, #0
 810822a:	6078      	str	r0, [r7, #4]
 810822c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810822e:	687b      	ldr	r3, [r7, #4]
 8108230:	6a1b      	ldr	r3, [r3, #32]
 8108232:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8108236:	687b      	ldr	r3, [r7, #4]
 8108238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810823a:	687b      	ldr	r3, [r7, #4]
 810823c:	6a1b      	ldr	r3, [r3, #32]
 810823e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108240:	687b      	ldr	r3, [r7, #4]
 8108242:	685b      	ldr	r3, [r3, #4]
 8108244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108246:	687b      	ldr	r3, [r7, #4]
 8108248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810824a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810824c:	68fb      	ldr	r3, [r7, #12]
 810824e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108258:	683b      	ldr	r3, [r7, #0]
 810825a:	681b      	ldr	r3, [r3, #0]
 810825c:	68fa      	ldr	r2, [r7, #12]
 810825e:	4313      	orrs	r3, r2
 8108260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8108262:	693b      	ldr	r3, [r7, #16]
 8108264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8108268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810826a:	683b      	ldr	r3, [r7, #0]
 810826c:	689b      	ldr	r3, [r3, #8]
 810826e:	041b      	lsls	r3, r3, #16
 8108270:	693a      	ldr	r2, [r7, #16]
 8108272:	4313      	orrs	r3, r2
 8108274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108276:	687b      	ldr	r3, [r7, #4]
 8108278:	4a17      	ldr	r2, [pc, #92]	; (81082d8 <TIM_OC5_SetConfig+0xb4>)
 810827a:	4293      	cmp	r3, r2
 810827c:	d00f      	beq.n	810829e <TIM_OC5_SetConfig+0x7a>
 810827e:	687b      	ldr	r3, [r7, #4]
 8108280:	4a16      	ldr	r2, [pc, #88]	; (81082dc <TIM_OC5_SetConfig+0xb8>)
 8108282:	4293      	cmp	r3, r2
 8108284:	d00b      	beq.n	810829e <TIM_OC5_SetConfig+0x7a>
 8108286:	687b      	ldr	r3, [r7, #4]
 8108288:	4a15      	ldr	r2, [pc, #84]	; (81082e0 <TIM_OC5_SetConfig+0xbc>)
 810828a:	4293      	cmp	r3, r2
 810828c:	d007      	beq.n	810829e <TIM_OC5_SetConfig+0x7a>
 810828e:	687b      	ldr	r3, [r7, #4]
 8108290:	4a14      	ldr	r2, [pc, #80]	; (81082e4 <TIM_OC5_SetConfig+0xc0>)
 8108292:	4293      	cmp	r3, r2
 8108294:	d003      	beq.n	810829e <TIM_OC5_SetConfig+0x7a>
 8108296:	687b      	ldr	r3, [r7, #4]
 8108298:	4a13      	ldr	r2, [pc, #76]	; (81082e8 <TIM_OC5_SetConfig+0xc4>)
 810829a:	4293      	cmp	r3, r2
 810829c:	d109      	bne.n	81082b2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810829e:	697b      	ldr	r3, [r7, #20]
 81082a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81082a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81082a6:	683b      	ldr	r3, [r7, #0]
 81082a8:	695b      	ldr	r3, [r3, #20]
 81082aa:	021b      	lsls	r3, r3, #8
 81082ac:	697a      	ldr	r2, [r7, #20]
 81082ae:	4313      	orrs	r3, r2
 81082b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81082b2:	687b      	ldr	r3, [r7, #4]
 81082b4:	697a      	ldr	r2, [r7, #20]
 81082b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81082b8:	687b      	ldr	r3, [r7, #4]
 81082ba:	68fa      	ldr	r2, [r7, #12]
 81082bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81082be:	683b      	ldr	r3, [r7, #0]
 81082c0:	685a      	ldr	r2, [r3, #4]
 81082c2:	687b      	ldr	r3, [r7, #4]
 81082c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81082c6:	687b      	ldr	r3, [r7, #4]
 81082c8:	693a      	ldr	r2, [r7, #16]
 81082ca:	621a      	str	r2, [r3, #32]
}
 81082cc:	bf00      	nop
 81082ce:	371c      	adds	r7, #28
 81082d0:	46bd      	mov	sp, r7
 81082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082d6:	4770      	bx	lr
 81082d8:	40010000 	.word	0x40010000
 81082dc:	40010400 	.word	0x40010400
 81082e0:	40014000 	.word	0x40014000
 81082e4:	40014400 	.word	0x40014400
 81082e8:	40014800 	.word	0x40014800

081082ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81082ec:	b480      	push	{r7}
 81082ee:	b087      	sub	sp, #28
 81082f0:	af00      	add	r7, sp, #0
 81082f2:	6078      	str	r0, [r7, #4]
 81082f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81082f6:	687b      	ldr	r3, [r7, #4]
 81082f8:	6a1b      	ldr	r3, [r3, #32]
 81082fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81082fe:	687b      	ldr	r3, [r7, #4]
 8108300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108302:	687b      	ldr	r3, [r7, #4]
 8108304:	6a1b      	ldr	r3, [r3, #32]
 8108306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108308:	687b      	ldr	r3, [r7, #4]
 810830a:	685b      	ldr	r3, [r3, #4]
 810830c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810830e:	687b      	ldr	r3, [r7, #4]
 8108310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8108314:	68fb      	ldr	r3, [r7, #12]
 8108316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810831a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810831e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108320:	683b      	ldr	r3, [r7, #0]
 8108322:	681b      	ldr	r3, [r3, #0]
 8108324:	021b      	lsls	r3, r3, #8
 8108326:	68fa      	ldr	r2, [r7, #12]
 8108328:	4313      	orrs	r3, r2
 810832a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810832c:	693b      	ldr	r3, [r7, #16]
 810832e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8108332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8108334:	683b      	ldr	r3, [r7, #0]
 8108336:	689b      	ldr	r3, [r3, #8]
 8108338:	051b      	lsls	r3, r3, #20
 810833a:	693a      	ldr	r2, [r7, #16]
 810833c:	4313      	orrs	r3, r2
 810833e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108340:	687b      	ldr	r3, [r7, #4]
 8108342:	4a18      	ldr	r2, [pc, #96]	; (81083a4 <TIM_OC6_SetConfig+0xb8>)
 8108344:	4293      	cmp	r3, r2
 8108346:	d00f      	beq.n	8108368 <TIM_OC6_SetConfig+0x7c>
 8108348:	687b      	ldr	r3, [r7, #4]
 810834a:	4a17      	ldr	r2, [pc, #92]	; (81083a8 <TIM_OC6_SetConfig+0xbc>)
 810834c:	4293      	cmp	r3, r2
 810834e:	d00b      	beq.n	8108368 <TIM_OC6_SetConfig+0x7c>
 8108350:	687b      	ldr	r3, [r7, #4]
 8108352:	4a16      	ldr	r2, [pc, #88]	; (81083ac <TIM_OC6_SetConfig+0xc0>)
 8108354:	4293      	cmp	r3, r2
 8108356:	d007      	beq.n	8108368 <TIM_OC6_SetConfig+0x7c>
 8108358:	687b      	ldr	r3, [r7, #4]
 810835a:	4a15      	ldr	r2, [pc, #84]	; (81083b0 <TIM_OC6_SetConfig+0xc4>)
 810835c:	4293      	cmp	r3, r2
 810835e:	d003      	beq.n	8108368 <TIM_OC6_SetConfig+0x7c>
 8108360:	687b      	ldr	r3, [r7, #4]
 8108362:	4a14      	ldr	r2, [pc, #80]	; (81083b4 <TIM_OC6_SetConfig+0xc8>)
 8108364:	4293      	cmp	r3, r2
 8108366:	d109      	bne.n	810837c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8108368:	697b      	ldr	r3, [r7, #20]
 810836a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810836e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8108370:	683b      	ldr	r3, [r7, #0]
 8108372:	695b      	ldr	r3, [r3, #20]
 8108374:	029b      	lsls	r3, r3, #10
 8108376:	697a      	ldr	r2, [r7, #20]
 8108378:	4313      	orrs	r3, r2
 810837a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810837c:	687b      	ldr	r3, [r7, #4]
 810837e:	697a      	ldr	r2, [r7, #20]
 8108380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8108382:	687b      	ldr	r3, [r7, #4]
 8108384:	68fa      	ldr	r2, [r7, #12]
 8108386:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8108388:	683b      	ldr	r3, [r7, #0]
 810838a:	685a      	ldr	r2, [r3, #4]
 810838c:	687b      	ldr	r3, [r7, #4]
 810838e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108390:	687b      	ldr	r3, [r7, #4]
 8108392:	693a      	ldr	r2, [r7, #16]
 8108394:	621a      	str	r2, [r3, #32]
}
 8108396:	bf00      	nop
 8108398:	371c      	adds	r7, #28
 810839a:	46bd      	mov	sp, r7
 810839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083a0:	4770      	bx	lr
 81083a2:	bf00      	nop
 81083a4:	40010000 	.word	0x40010000
 81083a8:	40010400 	.word	0x40010400
 81083ac:	40014000 	.word	0x40014000
 81083b0:	40014400 	.word	0x40014400
 81083b4:	40014800 	.word	0x40014800

081083b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81083b8:	b480      	push	{r7}
 81083ba:	b087      	sub	sp, #28
 81083bc:	af00      	add	r7, sp, #0
 81083be:	60f8      	str	r0, [r7, #12]
 81083c0:	60b9      	str	r1, [r7, #8]
 81083c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81083c4:	68bb      	ldr	r3, [r7, #8]
 81083c6:	f003 031f 	and.w	r3, r3, #31
 81083ca:	2201      	movs	r2, #1
 81083cc:	fa02 f303 	lsl.w	r3, r2, r3
 81083d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81083d2:	68fb      	ldr	r3, [r7, #12]
 81083d4:	6a1a      	ldr	r2, [r3, #32]
 81083d6:	697b      	ldr	r3, [r7, #20]
 81083d8:	43db      	mvns	r3, r3
 81083da:	401a      	ands	r2, r3
 81083dc:	68fb      	ldr	r3, [r7, #12]
 81083de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 81083e0:	68fb      	ldr	r3, [r7, #12]
 81083e2:	6a1a      	ldr	r2, [r3, #32]
 81083e4:	68bb      	ldr	r3, [r7, #8]
 81083e6:	f003 031f 	and.w	r3, r3, #31
 81083ea:	6879      	ldr	r1, [r7, #4]
 81083ec:	fa01 f303 	lsl.w	r3, r1, r3
 81083f0:	431a      	orrs	r2, r3
 81083f2:	68fb      	ldr	r3, [r7, #12]
 81083f4:	621a      	str	r2, [r3, #32]
}
 81083f6:	bf00      	nop
 81083f8:	371c      	adds	r7, #28
 81083fa:	46bd      	mov	sp, r7
 81083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108400:	4770      	bx	lr
	...

08108404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8108404:	b480      	push	{r7}
 8108406:	b085      	sub	sp, #20
 8108408:	af00      	add	r7, sp, #0
 810840a:	6078      	str	r0, [r7, #4]
 810840c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810840e:	687b      	ldr	r3, [r7, #4]
 8108410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8108414:	2b01      	cmp	r3, #1
 8108416:	d101      	bne.n	810841c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8108418:	2302      	movs	r3, #2
 810841a:	e06d      	b.n	81084f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810841c:	687b      	ldr	r3, [r7, #4]
 810841e:	2201      	movs	r2, #1
 8108420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108424:	687b      	ldr	r3, [r7, #4]
 8108426:	2202      	movs	r2, #2
 8108428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810842c:	687b      	ldr	r3, [r7, #4]
 810842e:	681b      	ldr	r3, [r3, #0]
 8108430:	685b      	ldr	r3, [r3, #4]
 8108432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	681b      	ldr	r3, [r3, #0]
 8108438:	689b      	ldr	r3, [r3, #8]
 810843a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810843c:	687b      	ldr	r3, [r7, #4]
 810843e:	681b      	ldr	r3, [r3, #0]
 8108440:	4a30      	ldr	r2, [pc, #192]	; (8108504 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8108442:	4293      	cmp	r3, r2
 8108444:	d004      	beq.n	8108450 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8108446:	687b      	ldr	r3, [r7, #4]
 8108448:	681b      	ldr	r3, [r3, #0]
 810844a:	4a2f      	ldr	r2, [pc, #188]	; (8108508 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810844c:	4293      	cmp	r3, r2
 810844e:	d108      	bne.n	8108462 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8108450:	68fb      	ldr	r3, [r7, #12]
 8108452:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8108456:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8108458:	683b      	ldr	r3, [r7, #0]
 810845a:	685b      	ldr	r3, [r3, #4]
 810845c:	68fa      	ldr	r2, [r7, #12]
 810845e:	4313      	orrs	r3, r2
 8108460:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8108462:	68fb      	ldr	r3, [r7, #12]
 8108464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108468:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810846a:	683b      	ldr	r3, [r7, #0]
 810846c:	681b      	ldr	r3, [r3, #0]
 810846e:	68fa      	ldr	r2, [r7, #12]
 8108470:	4313      	orrs	r3, r2
 8108472:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	681b      	ldr	r3, [r3, #0]
 8108478:	68fa      	ldr	r2, [r7, #12]
 810847a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810847c:	687b      	ldr	r3, [r7, #4]
 810847e:	681b      	ldr	r3, [r3, #0]
 8108480:	4a20      	ldr	r2, [pc, #128]	; (8108504 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8108482:	4293      	cmp	r3, r2
 8108484:	d022      	beq.n	81084cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108486:	687b      	ldr	r3, [r7, #4]
 8108488:	681b      	ldr	r3, [r3, #0]
 810848a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810848e:	d01d      	beq.n	81084cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108490:	687b      	ldr	r3, [r7, #4]
 8108492:	681b      	ldr	r3, [r3, #0]
 8108494:	4a1d      	ldr	r2, [pc, #116]	; (810850c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8108496:	4293      	cmp	r3, r2
 8108498:	d018      	beq.n	81084cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810849a:	687b      	ldr	r3, [r7, #4]
 810849c:	681b      	ldr	r3, [r3, #0]
 810849e:	4a1c      	ldr	r2, [pc, #112]	; (8108510 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81084a0:	4293      	cmp	r3, r2
 81084a2:	d013      	beq.n	81084cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084a4:	687b      	ldr	r3, [r7, #4]
 81084a6:	681b      	ldr	r3, [r3, #0]
 81084a8:	4a1a      	ldr	r2, [pc, #104]	; (8108514 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81084aa:	4293      	cmp	r3, r2
 81084ac:	d00e      	beq.n	81084cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084ae:	687b      	ldr	r3, [r7, #4]
 81084b0:	681b      	ldr	r3, [r3, #0]
 81084b2:	4a15      	ldr	r2, [pc, #84]	; (8108508 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81084b4:	4293      	cmp	r3, r2
 81084b6:	d009      	beq.n	81084cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084b8:	687b      	ldr	r3, [r7, #4]
 81084ba:	681b      	ldr	r3, [r3, #0]
 81084bc:	4a16      	ldr	r2, [pc, #88]	; (8108518 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81084be:	4293      	cmp	r3, r2
 81084c0:	d004      	beq.n	81084cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084c2:	687b      	ldr	r3, [r7, #4]
 81084c4:	681b      	ldr	r3, [r3, #0]
 81084c6:	4a15      	ldr	r2, [pc, #84]	; (810851c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 81084c8:	4293      	cmp	r3, r2
 81084ca:	d10c      	bne.n	81084e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81084cc:	68bb      	ldr	r3, [r7, #8]
 81084ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81084d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81084d4:	683b      	ldr	r3, [r7, #0]
 81084d6:	689b      	ldr	r3, [r3, #8]
 81084d8:	68ba      	ldr	r2, [r7, #8]
 81084da:	4313      	orrs	r3, r2
 81084dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81084de:	687b      	ldr	r3, [r7, #4]
 81084e0:	681b      	ldr	r3, [r3, #0]
 81084e2:	68ba      	ldr	r2, [r7, #8]
 81084e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81084e6:	687b      	ldr	r3, [r7, #4]
 81084e8:	2201      	movs	r2, #1
 81084ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81084ee:	687b      	ldr	r3, [r7, #4]
 81084f0:	2200      	movs	r2, #0
 81084f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81084f6:	2300      	movs	r3, #0
}
 81084f8:	4618      	mov	r0, r3
 81084fa:	3714      	adds	r7, #20
 81084fc:	46bd      	mov	sp, r7
 81084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108502:	4770      	bx	lr
 8108504:	40010000 	.word	0x40010000
 8108508:	40010400 	.word	0x40010400
 810850c:	40000400 	.word	0x40000400
 8108510:	40000800 	.word	0x40000800
 8108514:	40000c00 	.word	0x40000c00
 8108518:	40001800 	.word	0x40001800
 810851c:	40014000 	.word	0x40014000

08108520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8108520:	b480      	push	{r7}
 8108522:	b083      	sub	sp, #12
 8108524:	af00      	add	r7, sp, #0
 8108526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8108528:	bf00      	nop
 810852a:	370c      	adds	r7, #12
 810852c:	46bd      	mov	sp, r7
 810852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108532:	4770      	bx	lr

08108534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8108534:	b480      	push	{r7}
 8108536:	b083      	sub	sp, #12
 8108538:	af00      	add	r7, sp, #0
 810853a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810853c:	bf00      	nop
 810853e:	370c      	adds	r7, #12
 8108540:	46bd      	mov	sp, r7
 8108542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108546:	4770      	bx	lr

08108548 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8108548:	b480      	push	{r7}
 810854a:	b083      	sub	sp, #12
 810854c:	af00      	add	r7, sp, #0
 810854e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8108550:	bf00      	nop
 8108552:	370c      	adds	r7, #12
 8108554:	46bd      	mov	sp, r7
 8108556:	f85d 7b04 	ldr.w	r7, [sp], #4
 810855a:	4770      	bx	lr

0810855c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810855c:	b580      	push	{r7, lr}
 810855e:	b082      	sub	sp, #8
 8108560:	af00      	add	r7, sp, #0
 8108562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8108564:	687b      	ldr	r3, [r7, #4]
 8108566:	2b00      	cmp	r3, #0
 8108568:	d101      	bne.n	810856e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810856a:	2301      	movs	r3, #1
 810856c:	e042      	b.n	81085f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810856e:	687b      	ldr	r3, [r7, #4]
 8108570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108574:	2b00      	cmp	r3, #0
 8108576:	d106      	bne.n	8108586 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8108578:	687b      	ldr	r3, [r7, #4]
 810857a:	2200      	movs	r2, #0
 810857c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8108580:	6878      	ldr	r0, [r7, #4]
 8108582:	f7f9 fdfb 	bl	810217c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8108586:	687b      	ldr	r3, [r7, #4]
 8108588:	2224      	movs	r2, #36	; 0x24
 810858a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810858e:	687b      	ldr	r3, [r7, #4]
 8108590:	681b      	ldr	r3, [r3, #0]
 8108592:	681a      	ldr	r2, [r3, #0]
 8108594:	687b      	ldr	r3, [r7, #4]
 8108596:	681b      	ldr	r3, [r3, #0]
 8108598:	f022 0201 	bic.w	r2, r2, #1
 810859c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810859e:	6878      	ldr	r0, [r7, #4]
 81085a0:	f000 f8c2 	bl	8108728 <UART_SetConfig>
 81085a4:	4603      	mov	r3, r0
 81085a6:	2b01      	cmp	r3, #1
 81085a8:	d101      	bne.n	81085ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81085aa:	2301      	movs	r3, #1
 81085ac:	e022      	b.n	81085f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81085ae:	687b      	ldr	r3, [r7, #4]
 81085b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81085b2:	2b00      	cmp	r3, #0
 81085b4:	d002      	beq.n	81085bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81085b6:	6878      	ldr	r0, [r7, #4]
 81085b8:	f000 fe1e 	bl	81091f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81085bc:	687b      	ldr	r3, [r7, #4]
 81085be:	681b      	ldr	r3, [r3, #0]
 81085c0:	685a      	ldr	r2, [r3, #4]
 81085c2:	687b      	ldr	r3, [r7, #4]
 81085c4:	681b      	ldr	r3, [r3, #0]
 81085c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81085ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81085cc:	687b      	ldr	r3, [r7, #4]
 81085ce:	681b      	ldr	r3, [r3, #0]
 81085d0:	689a      	ldr	r2, [r3, #8]
 81085d2:	687b      	ldr	r3, [r7, #4]
 81085d4:	681b      	ldr	r3, [r3, #0]
 81085d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81085da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81085dc:	687b      	ldr	r3, [r7, #4]
 81085de:	681b      	ldr	r3, [r3, #0]
 81085e0:	681a      	ldr	r2, [r3, #0]
 81085e2:	687b      	ldr	r3, [r7, #4]
 81085e4:	681b      	ldr	r3, [r3, #0]
 81085e6:	f042 0201 	orr.w	r2, r2, #1
 81085ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81085ec:	6878      	ldr	r0, [r7, #4]
 81085ee:	f000 fea5 	bl	810933c <UART_CheckIdleState>
 81085f2:	4603      	mov	r3, r0
}
 81085f4:	4618      	mov	r0, r3
 81085f6:	3708      	adds	r7, #8
 81085f8:	46bd      	mov	sp, r7
 81085fa:	bd80      	pop	{r7, pc}

081085fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81085fc:	b580      	push	{r7, lr}
 81085fe:	b08a      	sub	sp, #40	; 0x28
 8108600:	af02      	add	r7, sp, #8
 8108602:	60f8      	str	r0, [r7, #12]
 8108604:	60b9      	str	r1, [r7, #8]
 8108606:	603b      	str	r3, [r7, #0]
 8108608:	4613      	mov	r3, r2
 810860a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810860c:	68fb      	ldr	r3, [r7, #12]
 810860e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108612:	2b20      	cmp	r3, #32
 8108614:	f040 8083 	bne.w	810871e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8108618:	68bb      	ldr	r3, [r7, #8]
 810861a:	2b00      	cmp	r3, #0
 810861c:	d002      	beq.n	8108624 <HAL_UART_Transmit+0x28>
 810861e:	88fb      	ldrh	r3, [r7, #6]
 8108620:	2b00      	cmp	r3, #0
 8108622:	d101      	bne.n	8108628 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8108624:	2301      	movs	r3, #1
 8108626:	e07b      	b.n	8108720 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8108628:	68fb      	ldr	r3, [r7, #12]
 810862a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810862e:	2b01      	cmp	r3, #1
 8108630:	d101      	bne.n	8108636 <HAL_UART_Transmit+0x3a>
 8108632:	2302      	movs	r3, #2
 8108634:	e074      	b.n	8108720 <HAL_UART_Transmit+0x124>
 8108636:	68fb      	ldr	r3, [r7, #12]
 8108638:	2201      	movs	r2, #1
 810863a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810863e:	68fb      	ldr	r3, [r7, #12]
 8108640:	2200      	movs	r2, #0
 8108642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108646:	68fb      	ldr	r3, [r7, #12]
 8108648:	2221      	movs	r2, #33	; 0x21
 810864a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810864e:	f7f9 ff6d 	bl	810252c <HAL_GetTick>
 8108652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8108654:	68fb      	ldr	r3, [r7, #12]
 8108656:	88fa      	ldrh	r2, [r7, #6]
 8108658:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810865c:	68fb      	ldr	r3, [r7, #12]
 810865e:	88fa      	ldrh	r2, [r7, #6]
 8108660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8108664:	68fb      	ldr	r3, [r7, #12]
 8108666:	689b      	ldr	r3, [r3, #8]
 8108668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810866c:	d108      	bne.n	8108680 <HAL_UART_Transmit+0x84>
 810866e:	68fb      	ldr	r3, [r7, #12]
 8108670:	691b      	ldr	r3, [r3, #16]
 8108672:	2b00      	cmp	r3, #0
 8108674:	d104      	bne.n	8108680 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8108676:	2300      	movs	r3, #0
 8108678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810867a:	68bb      	ldr	r3, [r7, #8]
 810867c:	61bb      	str	r3, [r7, #24]
 810867e:	e003      	b.n	8108688 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8108680:	68bb      	ldr	r3, [r7, #8]
 8108682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8108684:	2300      	movs	r3, #0
 8108686:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8108688:	68fb      	ldr	r3, [r7, #12]
 810868a:	2200      	movs	r2, #0
 810868c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8108690:	e02c      	b.n	81086ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8108692:	683b      	ldr	r3, [r7, #0]
 8108694:	9300      	str	r3, [sp, #0]
 8108696:	697b      	ldr	r3, [r7, #20]
 8108698:	2200      	movs	r2, #0
 810869a:	2180      	movs	r1, #128	; 0x80
 810869c:	68f8      	ldr	r0, [r7, #12]
 810869e:	f000 fe98 	bl	81093d2 <UART_WaitOnFlagUntilTimeout>
 81086a2:	4603      	mov	r3, r0
 81086a4:	2b00      	cmp	r3, #0
 81086a6:	d001      	beq.n	81086ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 81086a8:	2303      	movs	r3, #3
 81086aa:	e039      	b.n	8108720 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 81086ac:	69fb      	ldr	r3, [r7, #28]
 81086ae:	2b00      	cmp	r3, #0
 81086b0:	d10b      	bne.n	81086ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81086b2:	69bb      	ldr	r3, [r7, #24]
 81086b4:	881b      	ldrh	r3, [r3, #0]
 81086b6:	461a      	mov	r2, r3
 81086b8:	68fb      	ldr	r3, [r7, #12]
 81086ba:	681b      	ldr	r3, [r3, #0]
 81086bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81086c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 81086c2:	69bb      	ldr	r3, [r7, #24]
 81086c4:	3302      	adds	r3, #2
 81086c6:	61bb      	str	r3, [r7, #24]
 81086c8:	e007      	b.n	81086da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81086ca:	69fb      	ldr	r3, [r7, #28]
 81086cc:	781a      	ldrb	r2, [r3, #0]
 81086ce:	68fb      	ldr	r3, [r7, #12]
 81086d0:	681b      	ldr	r3, [r3, #0]
 81086d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 81086d4:	69fb      	ldr	r3, [r7, #28]
 81086d6:	3301      	adds	r3, #1
 81086d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81086da:	68fb      	ldr	r3, [r7, #12]
 81086dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81086e0:	b29b      	uxth	r3, r3
 81086e2:	3b01      	subs	r3, #1
 81086e4:	b29a      	uxth	r2, r3
 81086e6:	68fb      	ldr	r3, [r7, #12]
 81086e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81086ec:	68fb      	ldr	r3, [r7, #12]
 81086ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81086f2:	b29b      	uxth	r3, r3
 81086f4:	2b00      	cmp	r3, #0
 81086f6:	d1cc      	bne.n	8108692 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81086f8:	683b      	ldr	r3, [r7, #0]
 81086fa:	9300      	str	r3, [sp, #0]
 81086fc:	697b      	ldr	r3, [r7, #20]
 81086fe:	2200      	movs	r2, #0
 8108700:	2140      	movs	r1, #64	; 0x40
 8108702:	68f8      	ldr	r0, [r7, #12]
 8108704:	f000 fe65 	bl	81093d2 <UART_WaitOnFlagUntilTimeout>
 8108708:	4603      	mov	r3, r0
 810870a:	2b00      	cmp	r3, #0
 810870c:	d001      	beq.n	8108712 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 810870e:	2303      	movs	r3, #3
 8108710:	e006      	b.n	8108720 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108712:	68fb      	ldr	r3, [r7, #12]
 8108714:	2220      	movs	r2, #32
 8108716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 810871a:	2300      	movs	r3, #0
 810871c:	e000      	b.n	8108720 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 810871e:	2302      	movs	r3, #2
  }
}
 8108720:	4618      	mov	r0, r3
 8108722:	3720      	adds	r7, #32
 8108724:	46bd      	mov	sp, r7
 8108726:	bd80      	pop	{r7, pc}

08108728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810872c:	b092      	sub	sp, #72	; 0x48
 810872e:	af00      	add	r7, sp, #0
 8108730:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8108732:	2300      	movs	r3, #0
 8108734:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108738:	697b      	ldr	r3, [r7, #20]
 810873a:	689a      	ldr	r2, [r3, #8]
 810873c:	697b      	ldr	r3, [r7, #20]
 810873e:	691b      	ldr	r3, [r3, #16]
 8108740:	431a      	orrs	r2, r3
 8108742:	697b      	ldr	r3, [r7, #20]
 8108744:	695b      	ldr	r3, [r3, #20]
 8108746:	431a      	orrs	r2, r3
 8108748:	697b      	ldr	r3, [r7, #20]
 810874a:	69db      	ldr	r3, [r3, #28]
 810874c:	4313      	orrs	r3, r2
 810874e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108750:	697b      	ldr	r3, [r7, #20]
 8108752:	681b      	ldr	r3, [r3, #0]
 8108754:	681a      	ldr	r2, [r3, #0]
 8108756:	4bbd      	ldr	r3, [pc, #756]	; (8108a4c <UART_SetConfig+0x324>)
 8108758:	4013      	ands	r3, r2
 810875a:	697a      	ldr	r2, [r7, #20]
 810875c:	6812      	ldr	r2, [r2, #0]
 810875e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108760:	430b      	orrs	r3, r1
 8108762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8108764:	697b      	ldr	r3, [r7, #20]
 8108766:	681b      	ldr	r3, [r3, #0]
 8108768:	685b      	ldr	r3, [r3, #4]
 810876a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810876e:	697b      	ldr	r3, [r7, #20]
 8108770:	68da      	ldr	r2, [r3, #12]
 8108772:	697b      	ldr	r3, [r7, #20]
 8108774:	681b      	ldr	r3, [r3, #0]
 8108776:	430a      	orrs	r2, r1
 8108778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810877a:	697b      	ldr	r3, [r7, #20]
 810877c:	699b      	ldr	r3, [r3, #24]
 810877e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108780:	697b      	ldr	r3, [r7, #20]
 8108782:	681b      	ldr	r3, [r3, #0]
 8108784:	4ab2      	ldr	r2, [pc, #712]	; (8108a50 <UART_SetConfig+0x328>)
 8108786:	4293      	cmp	r3, r2
 8108788:	d004      	beq.n	8108794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810878a:	697b      	ldr	r3, [r7, #20]
 810878c:	6a1b      	ldr	r3, [r3, #32]
 810878e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108790:	4313      	orrs	r3, r2
 8108792:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108794:	697b      	ldr	r3, [r7, #20]
 8108796:	681b      	ldr	r3, [r3, #0]
 8108798:	689b      	ldr	r3, [r3, #8]
 810879a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810879e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81087a2:	697a      	ldr	r2, [r7, #20]
 81087a4:	6812      	ldr	r2, [r2, #0]
 81087a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81087a8:	430b      	orrs	r3, r1
 81087aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81087ac:	697b      	ldr	r3, [r7, #20]
 81087ae:	681b      	ldr	r3, [r3, #0]
 81087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81087b2:	f023 010f 	bic.w	r1, r3, #15
 81087b6:	697b      	ldr	r3, [r7, #20]
 81087b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81087ba:	697b      	ldr	r3, [r7, #20]
 81087bc:	681b      	ldr	r3, [r3, #0]
 81087be:	430a      	orrs	r2, r1
 81087c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81087c2:	697b      	ldr	r3, [r7, #20]
 81087c4:	681b      	ldr	r3, [r3, #0]
 81087c6:	4aa3      	ldr	r2, [pc, #652]	; (8108a54 <UART_SetConfig+0x32c>)
 81087c8:	4293      	cmp	r3, r2
 81087ca:	d177      	bne.n	81088bc <UART_SetConfig+0x194>
 81087cc:	4ba2      	ldr	r3, [pc, #648]	; (8108a58 <UART_SetConfig+0x330>)
 81087ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81087d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81087d4:	2b28      	cmp	r3, #40	; 0x28
 81087d6:	d86d      	bhi.n	81088b4 <UART_SetConfig+0x18c>
 81087d8:	a201      	add	r2, pc, #4	; (adr r2, 81087e0 <UART_SetConfig+0xb8>)
 81087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81087de:	bf00      	nop
 81087e0:	08108885 	.word	0x08108885
 81087e4:	081088b5 	.word	0x081088b5
 81087e8:	081088b5 	.word	0x081088b5
 81087ec:	081088b5 	.word	0x081088b5
 81087f0:	081088b5 	.word	0x081088b5
 81087f4:	081088b5 	.word	0x081088b5
 81087f8:	081088b5 	.word	0x081088b5
 81087fc:	081088b5 	.word	0x081088b5
 8108800:	0810888d 	.word	0x0810888d
 8108804:	081088b5 	.word	0x081088b5
 8108808:	081088b5 	.word	0x081088b5
 810880c:	081088b5 	.word	0x081088b5
 8108810:	081088b5 	.word	0x081088b5
 8108814:	081088b5 	.word	0x081088b5
 8108818:	081088b5 	.word	0x081088b5
 810881c:	081088b5 	.word	0x081088b5
 8108820:	08108895 	.word	0x08108895
 8108824:	081088b5 	.word	0x081088b5
 8108828:	081088b5 	.word	0x081088b5
 810882c:	081088b5 	.word	0x081088b5
 8108830:	081088b5 	.word	0x081088b5
 8108834:	081088b5 	.word	0x081088b5
 8108838:	081088b5 	.word	0x081088b5
 810883c:	081088b5 	.word	0x081088b5
 8108840:	0810889d 	.word	0x0810889d
 8108844:	081088b5 	.word	0x081088b5
 8108848:	081088b5 	.word	0x081088b5
 810884c:	081088b5 	.word	0x081088b5
 8108850:	081088b5 	.word	0x081088b5
 8108854:	081088b5 	.word	0x081088b5
 8108858:	081088b5 	.word	0x081088b5
 810885c:	081088b5 	.word	0x081088b5
 8108860:	081088a5 	.word	0x081088a5
 8108864:	081088b5 	.word	0x081088b5
 8108868:	081088b5 	.word	0x081088b5
 810886c:	081088b5 	.word	0x081088b5
 8108870:	081088b5 	.word	0x081088b5
 8108874:	081088b5 	.word	0x081088b5
 8108878:	081088b5 	.word	0x081088b5
 810887c:	081088b5 	.word	0x081088b5
 8108880:	081088ad 	.word	0x081088ad
 8108884:	2301      	movs	r3, #1
 8108886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810888a:	e220      	b.n	8108cce <UART_SetConfig+0x5a6>
 810888c:	2304      	movs	r3, #4
 810888e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108892:	e21c      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108894:	2308      	movs	r3, #8
 8108896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810889a:	e218      	b.n	8108cce <UART_SetConfig+0x5a6>
 810889c:	2310      	movs	r3, #16
 810889e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088a2:	e214      	b.n	8108cce <UART_SetConfig+0x5a6>
 81088a4:	2320      	movs	r3, #32
 81088a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088aa:	e210      	b.n	8108cce <UART_SetConfig+0x5a6>
 81088ac:	2340      	movs	r3, #64	; 0x40
 81088ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088b2:	e20c      	b.n	8108cce <UART_SetConfig+0x5a6>
 81088b4:	2380      	movs	r3, #128	; 0x80
 81088b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088ba:	e208      	b.n	8108cce <UART_SetConfig+0x5a6>
 81088bc:	697b      	ldr	r3, [r7, #20]
 81088be:	681b      	ldr	r3, [r3, #0]
 81088c0:	4a66      	ldr	r2, [pc, #408]	; (8108a5c <UART_SetConfig+0x334>)
 81088c2:	4293      	cmp	r3, r2
 81088c4:	d130      	bne.n	8108928 <UART_SetConfig+0x200>
 81088c6:	4b64      	ldr	r3, [pc, #400]	; (8108a58 <UART_SetConfig+0x330>)
 81088c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81088ca:	f003 0307 	and.w	r3, r3, #7
 81088ce:	2b05      	cmp	r3, #5
 81088d0:	d826      	bhi.n	8108920 <UART_SetConfig+0x1f8>
 81088d2:	a201      	add	r2, pc, #4	; (adr r2, 81088d8 <UART_SetConfig+0x1b0>)
 81088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81088d8:	081088f1 	.word	0x081088f1
 81088dc:	081088f9 	.word	0x081088f9
 81088e0:	08108901 	.word	0x08108901
 81088e4:	08108909 	.word	0x08108909
 81088e8:	08108911 	.word	0x08108911
 81088ec:	08108919 	.word	0x08108919
 81088f0:	2300      	movs	r3, #0
 81088f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088f6:	e1ea      	b.n	8108cce <UART_SetConfig+0x5a6>
 81088f8:	2304      	movs	r3, #4
 81088fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81088fe:	e1e6      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108900:	2308      	movs	r3, #8
 8108902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108906:	e1e2      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108908:	2310      	movs	r3, #16
 810890a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810890e:	e1de      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108910:	2320      	movs	r3, #32
 8108912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108916:	e1da      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108918:	2340      	movs	r3, #64	; 0x40
 810891a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810891e:	e1d6      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108920:	2380      	movs	r3, #128	; 0x80
 8108922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108926:	e1d2      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108928:	697b      	ldr	r3, [r7, #20]
 810892a:	681b      	ldr	r3, [r3, #0]
 810892c:	4a4c      	ldr	r2, [pc, #304]	; (8108a60 <UART_SetConfig+0x338>)
 810892e:	4293      	cmp	r3, r2
 8108930:	d130      	bne.n	8108994 <UART_SetConfig+0x26c>
 8108932:	4b49      	ldr	r3, [pc, #292]	; (8108a58 <UART_SetConfig+0x330>)
 8108934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108936:	f003 0307 	and.w	r3, r3, #7
 810893a:	2b05      	cmp	r3, #5
 810893c:	d826      	bhi.n	810898c <UART_SetConfig+0x264>
 810893e:	a201      	add	r2, pc, #4	; (adr r2, 8108944 <UART_SetConfig+0x21c>)
 8108940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108944:	0810895d 	.word	0x0810895d
 8108948:	08108965 	.word	0x08108965
 810894c:	0810896d 	.word	0x0810896d
 8108950:	08108975 	.word	0x08108975
 8108954:	0810897d 	.word	0x0810897d
 8108958:	08108985 	.word	0x08108985
 810895c:	2300      	movs	r3, #0
 810895e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108962:	e1b4      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108964:	2304      	movs	r3, #4
 8108966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810896a:	e1b0      	b.n	8108cce <UART_SetConfig+0x5a6>
 810896c:	2308      	movs	r3, #8
 810896e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108972:	e1ac      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108974:	2310      	movs	r3, #16
 8108976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810897a:	e1a8      	b.n	8108cce <UART_SetConfig+0x5a6>
 810897c:	2320      	movs	r3, #32
 810897e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108982:	e1a4      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108984:	2340      	movs	r3, #64	; 0x40
 8108986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810898a:	e1a0      	b.n	8108cce <UART_SetConfig+0x5a6>
 810898c:	2380      	movs	r3, #128	; 0x80
 810898e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108992:	e19c      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108994:	697b      	ldr	r3, [r7, #20]
 8108996:	681b      	ldr	r3, [r3, #0]
 8108998:	4a32      	ldr	r2, [pc, #200]	; (8108a64 <UART_SetConfig+0x33c>)
 810899a:	4293      	cmp	r3, r2
 810899c:	d130      	bne.n	8108a00 <UART_SetConfig+0x2d8>
 810899e:	4b2e      	ldr	r3, [pc, #184]	; (8108a58 <UART_SetConfig+0x330>)
 81089a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81089a2:	f003 0307 	and.w	r3, r3, #7
 81089a6:	2b05      	cmp	r3, #5
 81089a8:	d826      	bhi.n	81089f8 <UART_SetConfig+0x2d0>
 81089aa:	a201      	add	r2, pc, #4	; (adr r2, 81089b0 <UART_SetConfig+0x288>)
 81089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81089b0:	081089c9 	.word	0x081089c9
 81089b4:	081089d1 	.word	0x081089d1
 81089b8:	081089d9 	.word	0x081089d9
 81089bc:	081089e1 	.word	0x081089e1
 81089c0:	081089e9 	.word	0x081089e9
 81089c4:	081089f1 	.word	0x081089f1
 81089c8:	2300      	movs	r3, #0
 81089ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089ce:	e17e      	b.n	8108cce <UART_SetConfig+0x5a6>
 81089d0:	2304      	movs	r3, #4
 81089d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089d6:	e17a      	b.n	8108cce <UART_SetConfig+0x5a6>
 81089d8:	2308      	movs	r3, #8
 81089da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089de:	e176      	b.n	8108cce <UART_SetConfig+0x5a6>
 81089e0:	2310      	movs	r3, #16
 81089e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089e6:	e172      	b.n	8108cce <UART_SetConfig+0x5a6>
 81089e8:	2320      	movs	r3, #32
 81089ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089ee:	e16e      	b.n	8108cce <UART_SetConfig+0x5a6>
 81089f0:	2340      	movs	r3, #64	; 0x40
 81089f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089f6:	e16a      	b.n	8108cce <UART_SetConfig+0x5a6>
 81089f8:	2380      	movs	r3, #128	; 0x80
 81089fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81089fe:	e166      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a00:	697b      	ldr	r3, [r7, #20]
 8108a02:	681b      	ldr	r3, [r3, #0]
 8108a04:	4a18      	ldr	r2, [pc, #96]	; (8108a68 <UART_SetConfig+0x340>)
 8108a06:	4293      	cmp	r3, r2
 8108a08:	d140      	bne.n	8108a8c <UART_SetConfig+0x364>
 8108a0a:	4b13      	ldr	r3, [pc, #76]	; (8108a58 <UART_SetConfig+0x330>)
 8108a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108a0e:	f003 0307 	and.w	r3, r3, #7
 8108a12:	2b05      	cmp	r3, #5
 8108a14:	d836      	bhi.n	8108a84 <UART_SetConfig+0x35c>
 8108a16:	a201      	add	r2, pc, #4	; (adr r2, 8108a1c <UART_SetConfig+0x2f4>)
 8108a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a1c:	08108a35 	.word	0x08108a35
 8108a20:	08108a3d 	.word	0x08108a3d
 8108a24:	08108a45 	.word	0x08108a45
 8108a28:	08108a6d 	.word	0x08108a6d
 8108a2c:	08108a75 	.word	0x08108a75
 8108a30:	08108a7d 	.word	0x08108a7d
 8108a34:	2300      	movs	r3, #0
 8108a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a3a:	e148      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a3c:	2304      	movs	r3, #4
 8108a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a42:	e144      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a44:	2308      	movs	r3, #8
 8108a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a4a:	e140      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a4c:	cfff69f3 	.word	0xcfff69f3
 8108a50:	58000c00 	.word	0x58000c00
 8108a54:	40011000 	.word	0x40011000
 8108a58:	58024400 	.word	0x58024400
 8108a5c:	40004400 	.word	0x40004400
 8108a60:	40004800 	.word	0x40004800
 8108a64:	40004c00 	.word	0x40004c00
 8108a68:	40005000 	.word	0x40005000
 8108a6c:	2310      	movs	r3, #16
 8108a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a72:	e12c      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a74:	2320      	movs	r3, #32
 8108a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a7a:	e128      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a7c:	2340      	movs	r3, #64	; 0x40
 8108a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a82:	e124      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a84:	2380      	movs	r3, #128	; 0x80
 8108a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108a8a:	e120      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a8c:	697b      	ldr	r3, [r7, #20]
 8108a8e:	681b      	ldr	r3, [r3, #0]
 8108a90:	4acb      	ldr	r2, [pc, #812]	; (8108dc0 <UART_SetConfig+0x698>)
 8108a92:	4293      	cmp	r3, r2
 8108a94:	d176      	bne.n	8108b84 <UART_SetConfig+0x45c>
 8108a96:	4bcb      	ldr	r3, [pc, #812]	; (8108dc4 <UART_SetConfig+0x69c>)
 8108a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108a9e:	2b28      	cmp	r3, #40	; 0x28
 8108aa0:	d86c      	bhi.n	8108b7c <UART_SetConfig+0x454>
 8108aa2:	a201      	add	r2, pc, #4	; (adr r2, 8108aa8 <UART_SetConfig+0x380>)
 8108aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108aa8:	08108b4d 	.word	0x08108b4d
 8108aac:	08108b7d 	.word	0x08108b7d
 8108ab0:	08108b7d 	.word	0x08108b7d
 8108ab4:	08108b7d 	.word	0x08108b7d
 8108ab8:	08108b7d 	.word	0x08108b7d
 8108abc:	08108b7d 	.word	0x08108b7d
 8108ac0:	08108b7d 	.word	0x08108b7d
 8108ac4:	08108b7d 	.word	0x08108b7d
 8108ac8:	08108b55 	.word	0x08108b55
 8108acc:	08108b7d 	.word	0x08108b7d
 8108ad0:	08108b7d 	.word	0x08108b7d
 8108ad4:	08108b7d 	.word	0x08108b7d
 8108ad8:	08108b7d 	.word	0x08108b7d
 8108adc:	08108b7d 	.word	0x08108b7d
 8108ae0:	08108b7d 	.word	0x08108b7d
 8108ae4:	08108b7d 	.word	0x08108b7d
 8108ae8:	08108b5d 	.word	0x08108b5d
 8108aec:	08108b7d 	.word	0x08108b7d
 8108af0:	08108b7d 	.word	0x08108b7d
 8108af4:	08108b7d 	.word	0x08108b7d
 8108af8:	08108b7d 	.word	0x08108b7d
 8108afc:	08108b7d 	.word	0x08108b7d
 8108b00:	08108b7d 	.word	0x08108b7d
 8108b04:	08108b7d 	.word	0x08108b7d
 8108b08:	08108b65 	.word	0x08108b65
 8108b0c:	08108b7d 	.word	0x08108b7d
 8108b10:	08108b7d 	.word	0x08108b7d
 8108b14:	08108b7d 	.word	0x08108b7d
 8108b18:	08108b7d 	.word	0x08108b7d
 8108b1c:	08108b7d 	.word	0x08108b7d
 8108b20:	08108b7d 	.word	0x08108b7d
 8108b24:	08108b7d 	.word	0x08108b7d
 8108b28:	08108b6d 	.word	0x08108b6d
 8108b2c:	08108b7d 	.word	0x08108b7d
 8108b30:	08108b7d 	.word	0x08108b7d
 8108b34:	08108b7d 	.word	0x08108b7d
 8108b38:	08108b7d 	.word	0x08108b7d
 8108b3c:	08108b7d 	.word	0x08108b7d
 8108b40:	08108b7d 	.word	0x08108b7d
 8108b44:	08108b7d 	.word	0x08108b7d
 8108b48:	08108b75 	.word	0x08108b75
 8108b4c:	2301      	movs	r3, #1
 8108b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b52:	e0bc      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b54:	2304      	movs	r3, #4
 8108b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b5a:	e0b8      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b5c:	2308      	movs	r3, #8
 8108b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b62:	e0b4      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b64:	2310      	movs	r3, #16
 8108b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b6a:	e0b0      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b6c:	2320      	movs	r3, #32
 8108b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b72:	e0ac      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b74:	2340      	movs	r3, #64	; 0x40
 8108b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b7a:	e0a8      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b7c:	2380      	movs	r3, #128	; 0x80
 8108b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108b82:	e0a4      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b84:	697b      	ldr	r3, [r7, #20]
 8108b86:	681b      	ldr	r3, [r3, #0]
 8108b88:	4a8f      	ldr	r2, [pc, #572]	; (8108dc8 <UART_SetConfig+0x6a0>)
 8108b8a:	4293      	cmp	r3, r2
 8108b8c:	d130      	bne.n	8108bf0 <UART_SetConfig+0x4c8>
 8108b8e:	4b8d      	ldr	r3, [pc, #564]	; (8108dc4 <UART_SetConfig+0x69c>)
 8108b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108b92:	f003 0307 	and.w	r3, r3, #7
 8108b96:	2b05      	cmp	r3, #5
 8108b98:	d826      	bhi.n	8108be8 <UART_SetConfig+0x4c0>
 8108b9a:	a201      	add	r2, pc, #4	; (adr r2, 8108ba0 <UART_SetConfig+0x478>)
 8108b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108ba0:	08108bb9 	.word	0x08108bb9
 8108ba4:	08108bc1 	.word	0x08108bc1
 8108ba8:	08108bc9 	.word	0x08108bc9
 8108bac:	08108bd1 	.word	0x08108bd1
 8108bb0:	08108bd9 	.word	0x08108bd9
 8108bb4:	08108be1 	.word	0x08108be1
 8108bb8:	2300      	movs	r3, #0
 8108bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bbe:	e086      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108bc0:	2304      	movs	r3, #4
 8108bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bc6:	e082      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108bc8:	2308      	movs	r3, #8
 8108bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bce:	e07e      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108bd0:	2310      	movs	r3, #16
 8108bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bd6:	e07a      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108bd8:	2320      	movs	r3, #32
 8108bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bde:	e076      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108be0:	2340      	movs	r3, #64	; 0x40
 8108be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108be6:	e072      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108be8:	2380      	movs	r3, #128	; 0x80
 8108bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108bee:	e06e      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108bf0:	697b      	ldr	r3, [r7, #20]
 8108bf2:	681b      	ldr	r3, [r3, #0]
 8108bf4:	4a75      	ldr	r2, [pc, #468]	; (8108dcc <UART_SetConfig+0x6a4>)
 8108bf6:	4293      	cmp	r3, r2
 8108bf8:	d130      	bne.n	8108c5c <UART_SetConfig+0x534>
 8108bfa:	4b72      	ldr	r3, [pc, #456]	; (8108dc4 <UART_SetConfig+0x69c>)
 8108bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108bfe:	f003 0307 	and.w	r3, r3, #7
 8108c02:	2b05      	cmp	r3, #5
 8108c04:	d826      	bhi.n	8108c54 <UART_SetConfig+0x52c>
 8108c06:	a201      	add	r2, pc, #4	; (adr r2, 8108c0c <UART_SetConfig+0x4e4>)
 8108c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c0c:	08108c25 	.word	0x08108c25
 8108c10:	08108c2d 	.word	0x08108c2d
 8108c14:	08108c35 	.word	0x08108c35
 8108c18:	08108c3d 	.word	0x08108c3d
 8108c1c:	08108c45 	.word	0x08108c45
 8108c20:	08108c4d 	.word	0x08108c4d
 8108c24:	2300      	movs	r3, #0
 8108c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c2a:	e050      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c2c:	2304      	movs	r3, #4
 8108c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c32:	e04c      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c34:	2308      	movs	r3, #8
 8108c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c3a:	e048      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c3c:	2310      	movs	r3, #16
 8108c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c42:	e044      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c44:	2320      	movs	r3, #32
 8108c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c4a:	e040      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c4c:	2340      	movs	r3, #64	; 0x40
 8108c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c52:	e03c      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c54:	2380      	movs	r3, #128	; 0x80
 8108c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c5a:	e038      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c5c:	697b      	ldr	r3, [r7, #20]
 8108c5e:	681b      	ldr	r3, [r3, #0]
 8108c60:	4a5b      	ldr	r2, [pc, #364]	; (8108dd0 <UART_SetConfig+0x6a8>)
 8108c62:	4293      	cmp	r3, r2
 8108c64:	d130      	bne.n	8108cc8 <UART_SetConfig+0x5a0>
 8108c66:	4b57      	ldr	r3, [pc, #348]	; (8108dc4 <UART_SetConfig+0x69c>)
 8108c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108c6a:	f003 0307 	and.w	r3, r3, #7
 8108c6e:	2b05      	cmp	r3, #5
 8108c70:	d826      	bhi.n	8108cc0 <UART_SetConfig+0x598>
 8108c72:	a201      	add	r2, pc, #4	; (adr r2, 8108c78 <UART_SetConfig+0x550>)
 8108c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c78:	08108c91 	.word	0x08108c91
 8108c7c:	08108c99 	.word	0x08108c99
 8108c80:	08108ca1 	.word	0x08108ca1
 8108c84:	08108ca9 	.word	0x08108ca9
 8108c88:	08108cb1 	.word	0x08108cb1
 8108c8c:	08108cb9 	.word	0x08108cb9
 8108c90:	2302      	movs	r3, #2
 8108c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c96:	e01a      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c98:	2304      	movs	r3, #4
 8108c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108c9e:	e016      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108ca0:	2308      	movs	r3, #8
 8108ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ca6:	e012      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108ca8:	2310      	movs	r3, #16
 8108caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108cae:	e00e      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108cb0:	2320      	movs	r3, #32
 8108cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108cb6:	e00a      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108cb8:	2340      	movs	r3, #64	; 0x40
 8108cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108cbe:	e006      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108cc0:	2380      	movs	r3, #128	; 0x80
 8108cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108cc6:	e002      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108cc8:	2380      	movs	r3, #128	; 0x80
 8108cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108cce:	697b      	ldr	r3, [r7, #20]
 8108cd0:	681b      	ldr	r3, [r3, #0]
 8108cd2:	4a3f      	ldr	r2, [pc, #252]	; (8108dd0 <UART_SetConfig+0x6a8>)
 8108cd4:	4293      	cmp	r3, r2
 8108cd6:	f040 80f8 	bne.w	8108eca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108cda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108cde:	2b20      	cmp	r3, #32
 8108ce0:	dc46      	bgt.n	8108d70 <UART_SetConfig+0x648>
 8108ce2:	2b02      	cmp	r3, #2
 8108ce4:	f2c0 8082 	blt.w	8108dec <UART_SetConfig+0x6c4>
 8108ce8:	3b02      	subs	r3, #2
 8108cea:	2b1e      	cmp	r3, #30
 8108cec:	d87e      	bhi.n	8108dec <UART_SetConfig+0x6c4>
 8108cee:	a201      	add	r2, pc, #4	; (adr r2, 8108cf4 <UART_SetConfig+0x5cc>)
 8108cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108cf4:	08108d77 	.word	0x08108d77
 8108cf8:	08108ded 	.word	0x08108ded
 8108cfc:	08108d7f 	.word	0x08108d7f
 8108d00:	08108ded 	.word	0x08108ded
 8108d04:	08108ded 	.word	0x08108ded
 8108d08:	08108ded 	.word	0x08108ded
 8108d0c:	08108d8f 	.word	0x08108d8f
 8108d10:	08108ded 	.word	0x08108ded
 8108d14:	08108ded 	.word	0x08108ded
 8108d18:	08108ded 	.word	0x08108ded
 8108d1c:	08108ded 	.word	0x08108ded
 8108d20:	08108ded 	.word	0x08108ded
 8108d24:	08108ded 	.word	0x08108ded
 8108d28:	08108ded 	.word	0x08108ded
 8108d2c:	08108d9f 	.word	0x08108d9f
 8108d30:	08108ded 	.word	0x08108ded
 8108d34:	08108ded 	.word	0x08108ded
 8108d38:	08108ded 	.word	0x08108ded
 8108d3c:	08108ded 	.word	0x08108ded
 8108d40:	08108ded 	.word	0x08108ded
 8108d44:	08108ded 	.word	0x08108ded
 8108d48:	08108ded 	.word	0x08108ded
 8108d4c:	08108ded 	.word	0x08108ded
 8108d50:	08108ded 	.word	0x08108ded
 8108d54:	08108ded 	.word	0x08108ded
 8108d58:	08108ded 	.word	0x08108ded
 8108d5c:	08108ded 	.word	0x08108ded
 8108d60:	08108ded 	.word	0x08108ded
 8108d64:	08108ded 	.word	0x08108ded
 8108d68:	08108ded 	.word	0x08108ded
 8108d6c:	08108ddf 	.word	0x08108ddf
 8108d70:	2b40      	cmp	r3, #64	; 0x40
 8108d72:	d037      	beq.n	8108de4 <UART_SetConfig+0x6bc>
 8108d74:	e03a      	b.n	8108dec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108d76:	f7fd fc55 	bl	8106624 <HAL_RCCEx_GetD3PCLK1Freq>
 8108d7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108d7c:	e03c      	b.n	8108df8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108d82:	4618      	mov	r0, r3
 8108d84:	f7fd fc64 	bl	8106650 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108d8c:	e034      	b.n	8108df8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108d8e:	f107 0318 	add.w	r3, r7, #24
 8108d92:	4618      	mov	r0, r3
 8108d94:	f7fd fdb0 	bl	81068f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108d98:	69fb      	ldr	r3, [r7, #28]
 8108d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108d9c:	e02c      	b.n	8108df8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108d9e:	4b09      	ldr	r3, [pc, #36]	; (8108dc4 <UART_SetConfig+0x69c>)
 8108da0:	681b      	ldr	r3, [r3, #0]
 8108da2:	f003 0320 	and.w	r3, r3, #32
 8108da6:	2b00      	cmp	r3, #0
 8108da8:	d016      	beq.n	8108dd8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108daa:	4b06      	ldr	r3, [pc, #24]	; (8108dc4 <UART_SetConfig+0x69c>)
 8108dac:	681b      	ldr	r3, [r3, #0]
 8108dae:	08db      	lsrs	r3, r3, #3
 8108db0:	f003 0303 	and.w	r3, r3, #3
 8108db4:	4a07      	ldr	r2, [pc, #28]	; (8108dd4 <UART_SetConfig+0x6ac>)
 8108db6:	fa22 f303 	lsr.w	r3, r2, r3
 8108dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108dbc:	e01c      	b.n	8108df8 <UART_SetConfig+0x6d0>
 8108dbe:	bf00      	nop
 8108dc0:	40011400 	.word	0x40011400
 8108dc4:	58024400 	.word	0x58024400
 8108dc8:	40007800 	.word	0x40007800
 8108dcc:	40007c00 	.word	0x40007c00
 8108dd0:	58000c00 	.word	0x58000c00
 8108dd4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8108dd8:	4b9d      	ldr	r3, [pc, #628]	; (8109050 <UART_SetConfig+0x928>)
 8108dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108ddc:	e00c      	b.n	8108df8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108dde:	4b9d      	ldr	r3, [pc, #628]	; (8109054 <UART_SetConfig+0x92c>)
 8108de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108de2:	e009      	b.n	8108df8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108dea:	e005      	b.n	8108df8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8108dec:	2300      	movs	r3, #0
 8108dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108df0:	2301      	movs	r3, #1
 8108df2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108df6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108dfa:	2b00      	cmp	r3, #0
 8108dfc:	f000 81de 	beq.w	81091bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108e00:	697b      	ldr	r3, [r7, #20]
 8108e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e04:	4a94      	ldr	r2, [pc, #592]	; (8109058 <UART_SetConfig+0x930>)
 8108e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108e0a:	461a      	mov	r2, r3
 8108e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8108e12:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108e14:	697b      	ldr	r3, [r7, #20]
 8108e16:	685a      	ldr	r2, [r3, #4]
 8108e18:	4613      	mov	r3, r2
 8108e1a:	005b      	lsls	r3, r3, #1
 8108e1c:	4413      	add	r3, r2
 8108e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108e20:	429a      	cmp	r2, r3
 8108e22:	d305      	bcc.n	8108e30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108e24:	697b      	ldr	r3, [r7, #20]
 8108e26:	685b      	ldr	r3, [r3, #4]
 8108e28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108e2c:	429a      	cmp	r2, r3
 8108e2e:	d903      	bls.n	8108e38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8108e30:	2301      	movs	r3, #1
 8108e32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108e36:	e1c1      	b.n	81091bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108e3a:	2200      	movs	r2, #0
 8108e3c:	60bb      	str	r3, [r7, #8]
 8108e3e:	60fa      	str	r2, [r7, #12]
 8108e40:	697b      	ldr	r3, [r7, #20]
 8108e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108e44:	4a84      	ldr	r2, [pc, #528]	; (8109058 <UART_SetConfig+0x930>)
 8108e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108e4a:	b29b      	uxth	r3, r3
 8108e4c:	2200      	movs	r2, #0
 8108e4e:	603b      	str	r3, [r7, #0]
 8108e50:	607a      	str	r2, [r7, #4]
 8108e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8108e5a:	f7f7 fa91 	bl	8100380 <__aeabi_uldivmod>
 8108e5e:	4602      	mov	r2, r0
 8108e60:	460b      	mov	r3, r1
 8108e62:	4610      	mov	r0, r2
 8108e64:	4619      	mov	r1, r3
 8108e66:	f04f 0200 	mov.w	r2, #0
 8108e6a:	f04f 0300 	mov.w	r3, #0
 8108e6e:	020b      	lsls	r3, r1, #8
 8108e70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108e74:	0202      	lsls	r2, r0, #8
 8108e76:	6979      	ldr	r1, [r7, #20]
 8108e78:	6849      	ldr	r1, [r1, #4]
 8108e7a:	0849      	lsrs	r1, r1, #1
 8108e7c:	2000      	movs	r0, #0
 8108e7e:	460c      	mov	r4, r1
 8108e80:	4605      	mov	r5, r0
 8108e82:	eb12 0804 	adds.w	r8, r2, r4
 8108e86:	eb43 0905 	adc.w	r9, r3, r5
 8108e8a:	697b      	ldr	r3, [r7, #20]
 8108e8c:	685b      	ldr	r3, [r3, #4]
 8108e8e:	2200      	movs	r2, #0
 8108e90:	469a      	mov	sl, r3
 8108e92:	4693      	mov	fp, r2
 8108e94:	4652      	mov	r2, sl
 8108e96:	465b      	mov	r3, fp
 8108e98:	4640      	mov	r0, r8
 8108e9a:	4649      	mov	r1, r9
 8108e9c:	f7f7 fa70 	bl	8100380 <__aeabi_uldivmod>
 8108ea0:	4602      	mov	r2, r0
 8108ea2:	460b      	mov	r3, r1
 8108ea4:	4613      	mov	r3, r2
 8108ea6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108eae:	d308      	bcc.n	8108ec2 <UART_SetConfig+0x79a>
 8108eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108eb6:	d204      	bcs.n	8108ec2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8108eb8:	697b      	ldr	r3, [r7, #20]
 8108eba:	681b      	ldr	r3, [r3, #0]
 8108ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8108ebe:	60da      	str	r2, [r3, #12]
 8108ec0:	e17c      	b.n	81091bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8108ec2:	2301      	movs	r3, #1
 8108ec4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108ec8:	e178      	b.n	81091bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108eca:	697b      	ldr	r3, [r7, #20]
 8108ecc:	69db      	ldr	r3, [r3, #28]
 8108ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108ed2:	f040 80c5 	bne.w	8109060 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8108ed6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108eda:	2b20      	cmp	r3, #32
 8108edc:	dc48      	bgt.n	8108f70 <UART_SetConfig+0x848>
 8108ede:	2b00      	cmp	r3, #0
 8108ee0:	db7b      	blt.n	8108fda <UART_SetConfig+0x8b2>
 8108ee2:	2b20      	cmp	r3, #32
 8108ee4:	d879      	bhi.n	8108fda <UART_SetConfig+0x8b2>
 8108ee6:	a201      	add	r2, pc, #4	; (adr r2, 8108eec <UART_SetConfig+0x7c4>)
 8108ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108eec:	08108f77 	.word	0x08108f77
 8108ef0:	08108f7f 	.word	0x08108f7f
 8108ef4:	08108fdb 	.word	0x08108fdb
 8108ef8:	08108fdb 	.word	0x08108fdb
 8108efc:	08108f87 	.word	0x08108f87
 8108f00:	08108fdb 	.word	0x08108fdb
 8108f04:	08108fdb 	.word	0x08108fdb
 8108f08:	08108fdb 	.word	0x08108fdb
 8108f0c:	08108f97 	.word	0x08108f97
 8108f10:	08108fdb 	.word	0x08108fdb
 8108f14:	08108fdb 	.word	0x08108fdb
 8108f18:	08108fdb 	.word	0x08108fdb
 8108f1c:	08108fdb 	.word	0x08108fdb
 8108f20:	08108fdb 	.word	0x08108fdb
 8108f24:	08108fdb 	.word	0x08108fdb
 8108f28:	08108fdb 	.word	0x08108fdb
 8108f2c:	08108fa7 	.word	0x08108fa7
 8108f30:	08108fdb 	.word	0x08108fdb
 8108f34:	08108fdb 	.word	0x08108fdb
 8108f38:	08108fdb 	.word	0x08108fdb
 8108f3c:	08108fdb 	.word	0x08108fdb
 8108f40:	08108fdb 	.word	0x08108fdb
 8108f44:	08108fdb 	.word	0x08108fdb
 8108f48:	08108fdb 	.word	0x08108fdb
 8108f4c:	08108fdb 	.word	0x08108fdb
 8108f50:	08108fdb 	.word	0x08108fdb
 8108f54:	08108fdb 	.word	0x08108fdb
 8108f58:	08108fdb 	.word	0x08108fdb
 8108f5c:	08108fdb 	.word	0x08108fdb
 8108f60:	08108fdb 	.word	0x08108fdb
 8108f64:	08108fdb 	.word	0x08108fdb
 8108f68:	08108fdb 	.word	0x08108fdb
 8108f6c:	08108fcd 	.word	0x08108fcd
 8108f70:	2b40      	cmp	r3, #64	; 0x40
 8108f72:	d02e      	beq.n	8108fd2 <UART_SetConfig+0x8aa>
 8108f74:	e031      	b.n	8108fda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108f76:	f7fb ff11 	bl	8104d9c <HAL_RCC_GetPCLK1Freq>
 8108f7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108f7c:	e033      	b.n	8108fe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108f7e:	f7fb ff23 	bl	8104dc8 <HAL_RCC_GetPCLK2Freq>
 8108f82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108f84:	e02f      	b.n	8108fe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108f8a:	4618      	mov	r0, r3
 8108f8c:	f7fd fb60 	bl	8106650 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108f94:	e027      	b.n	8108fe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108f96:	f107 0318 	add.w	r3, r7, #24
 8108f9a:	4618      	mov	r0, r3
 8108f9c:	f7fd fcac 	bl	81068f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108fa0:	69fb      	ldr	r3, [r7, #28]
 8108fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108fa4:	e01f      	b.n	8108fe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108fa6:	4b2d      	ldr	r3, [pc, #180]	; (810905c <UART_SetConfig+0x934>)
 8108fa8:	681b      	ldr	r3, [r3, #0]
 8108faa:	f003 0320 	and.w	r3, r3, #32
 8108fae:	2b00      	cmp	r3, #0
 8108fb0:	d009      	beq.n	8108fc6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108fb2:	4b2a      	ldr	r3, [pc, #168]	; (810905c <UART_SetConfig+0x934>)
 8108fb4:	681b      	ldr	r3, [r3, #0]
 8108fb6:	08db      	lsrs	r3, r3, #3
 8108fb8:	f003 0303 	and.w	r3, r3, #3
 8108fbc:	4a24      	ldr	r2, [pc, #144]	; (8109050 <UART_SetConfig+0x928>)
 8108fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8108fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108fc4:	e00f      	b.n	8108fe6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8108fc6:	4b22      	ldr	r3, [pc, #136]	; (8109050 <UART_SetConfig+0x928>)
 8108fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108fca:	e00c      	b.n	8108fe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108fcc:	4b21      	ldr	r3, [pc, #132]	; (8109054 <UART_SetConfig+0x92c>)
 8108fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108fd0:	e009      	b.n	8108fe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108fd8:	e005      	b.n	8108fe6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8108fda:	2300      	movs	r3, #0
 8108fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108fde:	2301      	movs	r3, #1
 8108fe0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108fe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108fe8:	2b00      	cmp	r3, #0
 8108fea:	f000 80e7 	beq.w	81091bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108fee:	697b      	ldr	r3, [r7, #20]
 8108ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108ff2:	4a19      	ldr	r2, [pc, #100]	; (8109058 <UART_SetConfig+0x930>)
 8108ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108ff8:	461a      	mov	r2, r3
 8108ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 8109000:	005a      	lsls	r2, r3, #1
 8109002:	697b      	ldr	r3, [r7, #20]
 8109004:	685b      	ldr	r3, [r3, #4]
 8109006:	085b      	lsrs	r3, r3, #1
 8109008:	441a      	add	r2, r3
 810900a:	697b      	ldr	r3, [r7, #20]
 810900c:	685b      	ldr	r3, [r3, #4]
 810900e:	fbb2 f3f3 	udiv	r3, r2, r3
 8109012:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109016:	2b0f      	cmp	r3, #15
 8109018:	d916      	bls.n	8109048 <UART_SetConfig+0x920>
 810901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810901c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109020:	d212      	bcs.n	8109048 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8109022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109024:	b29b      	uxth	r3, r3
 8109026:	f023 030f 	bic.w	r3, r3, #15
 810902a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810902e:	085b      	lsrs	r3, r3, #1
 8109030:	b29b      	uxth	r3, r3
 8109032:	f003 0307 	and.w	r3, r3, #7
 8109036:	b29a      	uxth	r2, r3
 8109038:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810903a:	4313      	orrs	r3, r2
 810903c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810903e:	697b      	ldr	r3, [r7, #20]
 8109040:	681b      	ldr	r3, [r3, #0]
 8109042:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8109044:	60da      	str	r2, [r3, #12]
 8109046:	e0b9      	b.n	81091bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109048:	2301      	movs	r3, #1
 810904a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810904e:	e0b5      	b.n	81091bc <UART_SetConfig+0xa94>
 8109050:	03d09000 	.word	0x03d09000
 8109054:	003d0900 	.word	0x003d0900
 8109058:	0810a3c8 	.word	0x0810a3c8
 810905c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8109060:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109064:	2b20      	cmp	r3, #32
 8109066:	dc49      	bgt.n	81090fc <UART_SetConfig+0x9d4>
 8109068:	2b00      	cmp	r3, #0
 810906a:	db7c      	blt.n	8109166 <UART_SetConfig+0xa3e>
 810906c:	2b20      	cmp	r3, #32
 810906e:	d87a      	bhi.n	8109166 <UART_SetConfig+0xa3e>
 8109070:	a201      	add	r2, pc, #4	; (adr r2, 8109078 <UART_SetConfig+0x950>)
 8109072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109076:	bf00      	nop
 8109078:	08109103 	.word	0x08109103
 810907c:	0810910b 	.word	0x0810910b
 8109080:	08109167 	.word	0x08109167
 8109084:	08109167 	.word	0x08109167
 8109088:	08109113 	.word	0x08109113
 810908c:	08109167 	.word	0x08109167
 8109090:	08109167 	.word	0x08109167
 8109094:	08109167 	.word	0x08109167
 8109098:	08109123 	.word	0x08109123
 810909c:	08109167 	.word	0x08109167
 81090a0:	08109167 	.word	0x08109167
 81090a4:	08109167 	.word	0x08109167
 81090a8:	08109167 	.word	0x08109167
 81090ac:	08109167 	.word	0x08109167
 81090b0:	08109167 	.word	0x08109167
 81090b4:	08109167 	.word	0x08109167
 81090b8:	08109133 	.word	0x08109133
 81090bc:	08109167 	.word	0x08109167
 81090c0:	08109167 	.word	0x08109167
 81090c4:	08109167 	.word	0x08109167
 81090c8:	08109167 	.word	0x08109167
 81090cc:	08109167 	.word	0x08109167
 81090d0:	08109167 	.word	0x08109167
 81090d4:	08109167 	.word	0x08109167
 81090d8:	08109167 	.word	0x08109167
 81090dc:	08109167 	.word	0x08109167
 81090e0:	08109167 	.word	0x08109167
 81090e4:	08109167 	.word	0x08109167
 81090e8:	08109167 	.word	0x08109167
 81090ec:	08109167 	.word	0x08109167
 81090f0:	08109167 	.word	0x08109167
 81090f4:	08109167 	.word	0x08109167
 81090f8:	08109159 	.word	0x08109159
 81090fc:	2b40      	cmp	r3, #64	; 0x40
 81090fe:	d02e      	beq.n	810915e <UART_SetConfig+0xa36>
 8109100:	e031      	b.n	8109166 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109102:	f7fb fe4b 	bl	8104d9c <HAL_RCC_GetPCLK1Freq>
 8109106:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109108:	e033      	b.n	8109172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810910a:	f7fb fe5d 	bl	8104dc8 <HAL_RCC_GetPCLK2Freq>
 810910e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109110:	e02f      	b.n	8109172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109116:	4618      	mov	r0, r3
 8109118:	f7fd fa9a 	bl	8106650 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810911e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109120:	e027      	b.n	8109172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109122:	f107 0318 	add.w	r3, r7, #24
 8109126:	4618      	mov	r0, r3
 8109128:	f7fd fbe6 	bl	81068f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810912c:	69fb      	ldr	r3, [r7, #28]
 810912e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109130:	e01f      	b.n	8109172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109132:	4b2d      	ldr	r3, [pc, #180]	; (81091e8 <UART_SetConfig+0xac0>)
 8109134:	681b      	ldr	r3, [r3, #0]
 8109136:	f003 0320 	and.w	r3, r3, #32
 810913a:	2b00      	cmp	r3, #0
 810913c:	d009      	beq.n	8109152 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810913e:	4b2a      	ldr	r3, [pc, #168]	; (81091e8 <UART_SetConfig+0xac0>)
 8109140:	681b      	ldr	r3, [r3, #0]
 8109142:	08db      	lsrs	r3, r3, #3
 8109144:	f003 0303 	and.w	r3, r3, #3
 8109148:	4a28      	ldr	r2, [pc, #160]	; (81091ec <UART_SetConfig+0xac4>)
 810914a:	fa22 f303 	lsr.w	r3, r2, r3
 810914e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109150:	e00f      	b.n	8109172 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8109152:	4b26      	ldr	r3, [pc, #152]	; (81091ec <UART_SetConfig+0xac4>)
 8109154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109156:	e00c      	b.n	8109172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109158:	4b25      	ldr	r3, [pc, #148]	; (81091f0 <UART_SetConfig+0xac8>)
 810915a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810915c:	e009      	b.n	8109172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810915e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109164:	e005      	b.n	8109172 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8109166:	2300      	movs	r3, #0
 8109168:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810916a:	2301      	movs	r3, #1
 810916c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109170:	bf00      	nop
    }

    if (pclk != 0U)
 8109172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109174:	2b00      	cmp	r3, #0
 8109176:	d021      	beq.n	81091bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109178:	697b      	ldr	r3, [r7, #20]
 810917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810917c:	4a1d      	ldr	r2, [pc, #116]	; (81091f4 <UART_SetConfig+0xacc>)
 810917e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109182:	461a      	mov	r2, r3
 8109184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109186:	fbb3 f2f2 	udiv	r2, r3, r2
 810918a:	697b      	ldr	r3, [r7, #20]
 810918c:	685b      	ldr	r3, [r3, #4]
 810918e:	085b      	lsrs	r3, r3, #1
 8109190:	441a      	add	r2, r3
 8109192:	697b      	ldr	r3, [r7, #20]
 8109194:	685b      	ldr	r3, [r3, #4]
 8109196:	fbb2 f3f3 	udiv	r3, r2, r3
 810919a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810919e:	2b0f      	cmp	r3, #15
 81091a0:	d909      	bls.n	81091b6 <UART_SetConfig+0xa8e>
 81091a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81091a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81091a8:	d205      	bcs.n	81091b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81091ac:	b29a      	uxth	r2, r3
 81091ae:	697b      	ldr	r3, [r7, #20]
 81091b0:	681b      	ldr	r3, [r3, #0]
 81091b2:	60da      	str	r2, [r3, #12]
 81091b4:	e002      	b.n	81091bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81091b6:	2301      	movs	r3, #1
 81091b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81091bc:	697b      	ldr	r3, [r7, #20]
 81091be:	2201      	movs	r2, #1
 81091c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81091c4:	697b      	ldr	r3, [r7, #20]
 81091c6:	2201      	movs	r2, #1
 81091c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81091cc:	697b      	ldr	r3, [r7, #20]
 81091ce:	2200      	movs	r2, #0
 81091d0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81091d2:	697b      	ldr	r3, [r7, #20]
 81091d4:	2200      	movs	r2, #0
 81091d6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81091d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 81091dc:	4618      	mov	r0, r3
 81091de:	3748      	adds	r7, #72	; 0x48
 81091e0:	46bd      	mov	sp, r7
 81091e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81091e6:	bf00      	nop
 81091e8:	58024400 	.word	0x58024400
 81091ec:	03d09000 	.word	0x03d09000
 81091f0:	003d0900 	.word	0x003d0900
 81091f4:	0810a3c8 	.word	0x0810a3c8

081091f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81091f8:	b480      	push	{r7}
 81091fa:	b083      	sub	sp, #12
 81091fc:	af00      	add	r7, sp, #0
 81091fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109200:	687b      	ldr	r3, [r7, #4]
 8109202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109204:	f003 0301 	and.w	r3, r3, #1
 8109208:	2b00      	cmp	r3, #0
 810920a:	d00a      	beq.n	8109222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810920c:	687b      	ldr	r3, [r7, #4]
 810920e:	681b      	ldr	r3, [r3, #0]
 8109210:	685b      	ldr	r3, [r3, #4]
 8109212:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8109216:	687b      	ldr	r3, [r7, #4]
 8109218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810921a:	687b      	ldr	r3, [r7, #4]
 810921c:	681b      	ldr	r3, [r3, #0]
 810921e:	430a      	orrs	r2, r1
 8109220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8109222:	687b      	ldr	r3, [r7, #4]
 8109224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109226:	f003 0302 	and.w	r3, r3, #2
 810922a:	2b00      	cmp	r3, #0
 810922c:	d00a      	beq.n	8109244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810922e:	687b      	ldr	r3, [r7, #4]
 8109230:	681b      	ldr	r3, [r3, #0]
 8109232:	685b      	ldr	r3, [r3, #4]
 8109234:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8109238:	687b      	ldr	r3, [r7, #4]
 810923a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810923c:	687b      	ldr	r3, [r7, #4]
 810923e:	681b      	ldr	r3, [r3, #0]
 8109240:	430a      	orrs	r2, r1
 8109242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8109244:	687b      	ldr	r3, [r7, #4]
 8109246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109248:	f003 0304 	and.w	r3, r3, #4
 810924c:	2b00      	cmp	r3, #0
 810924e:	d00a      	beq.n	8109266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8109250:	687b      	ldr	r3, [r7, #4]
 8109252:	681b      	ldr	r3, [r3, #0]
 8109254:	685b      	ldr	r3, [r3, #4]
 8109256:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810925a:	687b      	ldr	r3, [r7, #4]
 810925c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810925e:	687b      	ldr	r3, [r7, #4]
 8109260:	681b      	ldr	r3, [r3, #0]
 8109262:	430a      	orrs	r2, r1
 8109264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8109266:	687b      	ldr	r3, [r7, #4]
 8109268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810926a:	f003 0308 	and.w	r3, r3, #8
 810926e:	2b00      	cmp	r3, #0
 8109270:	d00a      	beq.n	8109288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8109272:	687b      	ldr	r3, [r7, #4]
 8109274:	681b      	ldr	r3, [r3, #0]
 8109276:	685b      	ldr	r3, [r3, #4]
 8109278:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810927c:	687b      	ldr	r3, [r7, #4]
 810927e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109280:	687b      	ldr	r3, [r7, #4]
 8109282:	681b      	ldr	r3, [r3, #0]
 8109284:	430a      	orrs	r2, r1
 8109286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8109288:	687b      	ldr	r3, [r7, #4]
 810928a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810928c:	f003 0310 	and.w	r3, r3, #16
 8109290:	2b00      	cmp	r3, #0
 8109292:	d00a      	beq.n	81092aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8109294:	687b      	ldr	r3, [r7, #4]
 8109296:	681b      	ldr	r3, [r3, #0]
 8109298:	689b      	ldr	r3, [r3, #8]
 810929a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810929e:	687b      	ldr	r3, [r7, #4]
 81092a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81092a2:	687b      	ldr	r3, [r7, #4]
 81092a4:	681b      	ldr	r3, [r3, #0]
 81092a6:	430a      	orrs	r2, r1
 81092a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81092aa:	687b      	ldr	r3, [r7, #4]
 81092ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81092ae:	f003 0320 	and.w	r3, r3, #32
 81092b2:	2b00      	cmp	r3, #0
 81092b4:	d00a      	beq.n	81092cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81092b6:	687b      	ldr	r3, [r7, #4]
 81092b8:	681b      	ldr	r3, [r3, #0]
 81092ba:	689b      	ldr	r3, [r3, #8]
 81092bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81092c0:	687b      	ldr	r3, [r7, #4]
 81092c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81092c4:	687b      	ldr	r3, [r7, #4]
 81092c6:	681b      	ldr	r3, [r3, #0]
 81092c8:	430a      	orrs	r2, r1
 81092ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81092cc:	687b      	ldr	r3, [r7, #4]
 81092ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81092d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81092d4:	2b00      	cmp	r3, #0
 81092d6:	d01a      	beq.n	810930e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81092d8:	687b      	ldr	r3, [r7, #4]
 81092da:	681b      	ldr	r3, [r3, #0]
 81092dc:	685b      	ldr	r3, [r3, #4]
 81092de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81092e2:	687b      	ldr	r3, [r7, #4]
 81092e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81092e6:	687b      	ldr	r3, [r7, #4]
 81092e8:	681b      	ldr	r3, [r3, #0]
 81092ea:	430a      	orrs	r2, r1
 81092ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81092ee:	687b      	ldr	r3, [r7, #4]
 81092f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81092f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81092f6:	d10a      	bne.n	810930e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81092f8:	687b      	ldr	r3, [r7, #4]
 81092fa:	681b      	ldr	r3, [r3, #0]
 81092fc:	685b      	ldr	r3, [r3, #4]
 81092fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8109302:	687b      	ldr	r3, [r7, #4]
 8109304:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8109306:	687b      	ldr	r3, [r7, #4]
 8109308:	681b      	ldr	r3, [r3, #0]
 810930a:	430a      	orrs	r2, r1
 810930c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810930e:	687b      	ldr	r3, [r7, #4]
 8109310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109316:	2b00      	cmp	r3, #0
 8109318:	d00a      	beq.n	8109330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810931a:	687b      	ldr	r3, [r7, #4]
 810931c:	681b      	ldr	r3, [r3, #0]
 810931e:	685b      	ldr	r3, [r3, #4]
 8109320:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8109324:	687b      	ldr	r3, [r7, #4]
 8109326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8109328:	687b      	ldr	r3, [r7, #4]
 810932a:	681b      	ldr	r3, [r3, #0]
 810932c:	430a      	orrs	r2, r1
 810932e:	605a      	str	r2, [r3, #4]
  }
}
 8109330:	bf00      	nop
 8109332:	370c      	adds	r7, #12
 8109334:	46bd      	mov	sp, r7
 8109336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810933a:	4770      	bx	lr

0810933c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810933c:	b580      	push	{r7, lr}
 810933e:	b086      	sub	sp, #24
 8109340:	af02      	add	r7, sp, #8
 8109342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109344:	687b      	ldr	r3, [r7, #4]
 8109346:	2200      	movs	r2, #0
 8109348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810934c:	f7f9 f8ee 	bl	810252c <HAL_GetTick>
 8109350:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8109352:	687b      	ldr	r3, [r7, #4]
 8109354:	681b      	ldr	r3, [r3, #0]
 8109356:	681b      	ldr	r3, [r3, #0]
 8109358:	f003 0308 	and.w	r3, r3, #8
 810935c:	2b08      	cmp	r3, #8
 810935e:	d10e      	bne.n	810937e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8109360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8109364:	9300      	str	r3, [sp, #0]
 8109366:	68fb      	ldr	r3, [r7, #12]
 8109368:	2200      	movs	r2, #0
 810936a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810936e:	6878      	ldr	r0, [r7, #4]
 8109370:	f000 f82f 	bl	81093d2 <UART_WaitOnFlagUntilTimeout>
 8109374:	4603      	mov	r3, r0
 8109376:	2b00      	cmp	r3, #0
 8109378:	d001      	beq.n	810937e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810937a:	2303      	movs	r3, #3
 810937c:	e025      	b.n	81093ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810937e:	687b      	ldr	r3, [r7, #4]
 8109380:	681b      	ldr	r3, [r3, #0]
 8109382:	681b      	ldr	r3, [r3, #0]
 8109384:	f003 0304 	and.w	r3, r3, #4
 8109388:	2b04      	cmp	r3, #4
 810938a:	d10e      	bne.n	81093aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810938c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8109390:	9300      	str	r3, [sp, #0]
 8109392:	68fb      	ldr	r3, [r7, #12]
 8109394:	2200      	movs	r2, #0
 8109396:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810939a:	6878      	ldr	r0, [r7, #4]
 810939c:	f000 f819 	bl	81093d2 <UART_WaitOnFlagUntilTimeout>
 81093a0:	4603      	mov	r3, r0
 81093a2:	2b00      	cmp	r3, #0
 81093a4:	d001      	beq.n	81093aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81093a6:	2303      	movs	r3, #3
 81093a8:	e00f      	b.n	81093ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81093aa:	687b      	ldr	r3, [r7, #4]
 81093ac:	2220      	movs	r2, #32
 81093ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81093b2:	687b      	ldr	r3, [r7, #4]
 81093b4:	2220      	movs	r2, #32
 81093b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81093ba:	687b      	ldr	r3, [r7, #4]
 81093bc:	2200      	movs	r2, #0
 81093be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	2200      	movs	r2, #0
 81093c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81093c8:	2300      	movs	r3, #0
}
 81093ca:	4618      	mov	r0, r3
 81093cc:	3710      	adds	r7, #16
 81093ce:	46bd      	mov	sp, r7
 81093d0:	bd80      	pop	{r7, pc}

081093d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81093d2:	b580      	push	{r7, lr}
 81093d4:	b09c      	sub	sp, #112	; 0x70
 81093d6:	af00      	add	r7, sp, #0
 81093d8:	60f8      	str	r0, [r7, #12]
 81093da:	60b9      	str	r1, [r7, #8]
 81093dc:	603b      	str	r3, [r7, #0]
 81093de:	4613      	mov	r3, r2
 81093e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81093e2:	e0a9      	b.n	8109538 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81093e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81093e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81093ea:	f000 80a5 	beq.w	8109538 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81093ee:	f7f9 f89d 	bl	810252c <HAL_GetTick>
 81093f2:	4602      	mov	r2, r0
 81093f4:	683b      	ldr	r3, [r7, #0]
 81093f6:	1ad3      	subs	r3, r2, r3
 81093f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 81093fa:	429a      	cmp	r2, r3
 81093fc:	d302      	bcc.n	8109404 <UART_WaitOnFlagUntilTimeout+0x32>
 81093fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8109400:	2b00      	cmp	r3, #0
 8109402:	d140      	bne.n	8109486 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8109404:	68fb      	ldr	r3, [r7, #12]
 8109406:	681b      	ldr	r3, [r3, #0]
 8109408:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810940a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810940c:	e853 3f00 	ldrex	r3, [r3]
 8109410:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8109412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8109414:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8109418:	667b      	str	r3, [r7, #100]	; 0x64
 810941a:	68fb      	ldr	r3, [r7, #12]
 810941c:	681b      	ldr	r3, [r3, #0]
 810941e:	461a      	mov	r2, r3
 8109420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8109422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8109424:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109426:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8109428:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810942a:	e841 2300 	strex	r3, r2, [r1]
 810942e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8109430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8109432:	2b00      	cmp	r3, #0
 8109434:	d1e6      	bne.n	8109404 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109436:	68fb      	ldr	r3, [r7, #12]
 8109438:	681b      	ldr	r3, [r3, #0]
 810943a:	3308      	adds	r3, #8
 810943c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810943e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109440:	e853 3f00 	ldrex	r3, [r3]
 8109444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8109446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109448:	f023 0301 	bic.w	r3, r3, #1
 810944c:	663b      	str	r3, [r7, #96]	; 0x60
 810944e:	68fb      	ldr	r3, [r7, #12]
 8109450:	681b      	ldr	r3, [r3, #0]
 8109452:	3308      	adds	r3, #8
 8109454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8109456:	64ba      	str	r2, [r7, #72]	; 0x48
 8109458:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810945a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810945c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810945e:	e841 2300 	strex	r3, r2, [r1]
 8109462:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8109464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8109466:	2b00      	cmp	r3, #0
 8109468:	d1e5      	bne.n	8109436 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810946a:	68fb      	ldr	r3, [r7, #12]
 810946c:	2220      	movs	r2, #32
 810946e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8109472:	68fb      	ldr	r3, [r7, #12]
 8109474:	2220      	movs	r2, #32
 8109476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810947a:	68fb      	ldr	r3, [r7, #12]
 810947c:	2200      	movs	r2, #0
 810947e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8109482:	2303      	movs	r3, #3
 8109484:	e069      	b.n	810955a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8109486:	68fb      	ldr	r3, [r7, #12]
 8109488:	681b      	ldr	r3, [r3, #0]
 810948a:	681b      	ldr	r3, [r3, #0]
 810948c:	f003 0304 	and.w	r3, r3, #4
 8109490:	2b00      	cmp	r3, #0
 8109492:	d051      	beq.n	8109538 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8109494:	68fb      	ldr	r3, [r7, #12]
 8109496:	681b      	ldr	r3, [r3, #0]
 8109498:	69db      	ldr	r3, [r3, #28]
 810949a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810949e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81094a2:	d149      	bne.n	8109538 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81094a4:	68fb      	ldr	r3, [r7, #12]
 81094a6:	681b      	ldr	r3, [r3, #0]
 81094a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81094ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81094ae:	68fb      	ldr	r3, [r7, #12]
 81094b0:	681b      	ldr	r3, [r3, #0]
 81094b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81094b6:	e853 3f00 	ldrex	r3, [r3]
 81094ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81094c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 81094c4:	68fb      	ldr	r3, [r7, #12]
 81094c6:	681b      	ldr	r3, [r3, #0]
 81094c8:	461a      	mov	r2, r3
 81094ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81094cc:	637b      	str	r3, [r7, #52]	; 0x34
 81094ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81094d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81094d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81094d4:	e841 2300 	strex	r3, r2, [r1]
 81094d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 81094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81094dc:	2b00      	cmp	r3, #0
 81094de:	d1e6      	bne.n	81094ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81094e0:	68fb      	ldr	r3, [r7, #12]
 81094e2:	681b      	ldr	r3, [r3, #0]
 81094e4:	3308      	adds	r3, #8
 81094e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81094e8:	697b      	ldr	r3, [r7, #20]
 81094ea:	e853 3f00 	ldrex	r3, [r3]
 81094ee:	613b      	str	r3, [r7, #16]
   return(result);
 81094f0:	693b      	ldr	r3, [r7, #16]
 81094f2:	f023 0301 	bic.w	r3, r3, #1
 81094f6:	66bb      	str	r3, [r7, #104]	; 0x68
 81094f8:	68fb      	ldr	r3, [r7, #12]
 81094fa:	681b      	ldr	r3, [r3, #0]
 81094fc:	3308      	adds	r3, #8
 81094fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8109500:	623a      	str	r2, [r7, #32]
 8109502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109504:	69f9      	ldr	r1, [r7, #28]
 8109506:	6a3a      	ldr	r2, [r7, #32]
 8109508:	e841 2300 	strex	r3, r2, [r1]
 810950c:	61bb      	str	r3, [r7, #24]
   return(result);
 810950e:	69bb      	ldr	r3, [r7, #24]
 8109510:	2b00      	cmp	r3, #0
 8109512:	d1e5      	bne.n	81094e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8109514:	68fb      	ldr	r3, [r7, #12]
 8109516:	2220      	movs	r2, #32
 8109518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810951c:	68fb      	ldr	r3, [r7, #12]
 810951e:	2220      	movs	r2, #32
 8109520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8109524:	68fb      	ldr	r3, [r7, #12]
 8109526:	2220      	movs	r2, #32
 8109528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810952c:	68fb      	ldr	r3, [r7, #12]
 810952e:	2200      	movs	r2, #0
 8109530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8109534:	2303      	movs	r3, #3
 8109536:	e010      	b.n	810955a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109538:	68fb      	ldr	r3, [r7, #12]
 810953a:	681b      	ldr	r3, [r3, #0]
 810953c:	69da      	ldr	r2, [r3, #28]
 810953e:	68bb      	ldr	r3, [r7, #8]
 8109540:	4013      	ands	r3, r2
 8109542:	68ba      	ldr	r2, [r7, #8]
 8109544:	429a      	cmp	r2, r3
 8109546:	bf0c      	ite	eq
 8109548:	2301      	moveq	r3, #1
 810954a:	2300      	movne	r3, #0
 810954c:	b2db      	uxtb	r3, r3
 810954e:	461a      	mov	r2, r3
 8109550:	79fb      	ldrb	r3, [r7, #7]
 8109552:	429a      	cmp	r2, r3
 8109554:	f43f af46 	beq.w	81093e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8109558:	2300      	movs	r3, #0
}
 810955a:	4618      	mov	r0, r3
 810955c:	3770      	adds	r7, #112	; 0x70
 810955e:	46bd      	mov	sp, r7
 8109560:	bd80      	pop	{r7, pc}

08109562 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8109562:	b480      	push	{r7}
 8109564:	b085      	sub	sp, #20
 8109566:	af00      	add	r7, sp, #0
 8109568:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810956a:	687b      	ldr	r3, [r7, #4]
 810956c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109570:	2b01      	cmp	r3, #1
 8109572:	d101      	bne.n	8109578 <HAL_UARTEx_DisableFifoMode+0x16>
 8109574:	2302      	movs	r3, #2
 8109576:	e027      	b.n	81095c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8109578:	687b      	ldr	r3, [r7, #4]
 810957a:	2201      	movs	r2, #1
 810957c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109580:	687b      	ldr	r3, [r7, #4]
 8109582:	2224      	movs	r2, #36	; 0x24
 8109584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109588:	687b      	ldr	r3, [r7, #4]
 810958a:	681b      	ldr	r3, [r3, #0]
 810958c:	681b      	ldr	r3, [r3, #0]
 810958e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109590:	687b      	ldr	r3, [r7, #4]
 8109592:	681b      	ldr	r3, [r3, #0]
 8109594:	681a      	ldr	r2, [r3, #0]
 8109596:	687b      	ldr	r3, [r7, #4]
 8109598:	681b      	ldr	r3, [r3, #0]
 810959a:	f022 0201 	bic.w	r2, r2, #1
 810959e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81095a0:	68fb      	ldr	r3, [r7, #12]
 81095a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81095a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81095a8:	687b      	ldr	r3, [r7, #4]
 81095aa:	2200      	movs	r2, #0
 81095ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81095ae:	687b      	ldr	r3, [r7, #4]
 81095b0:	681b      	ldr	r3, [r3, #0]
 81095b2:	68fa      	ldr	r2, [r7, #12]
 81095b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81095b6:	687b      	ldr	r3, [r7, #4]
 81095b8:	2220      	movs	r2, #32
 81095ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81095be:	687b      	ldr	r3, [r7, #4]
 81095c0:	2200      	movs	r2, #0
 81095c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81095c6:	2300      	movs	r3, #0
}
 81095c8:	4618      	mov	r0, r3
 81095ca:	3714      	adds	r7, #20
 81095cc:	46bd      	mov	sp, r7
 81095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81095d2:	4770      	bx	lr

081095d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81095d4:	b580      	push	{r7, lr}
 81095d6:	b084      	sub	sp, #16
 81095d8:	af00      	add	r7, sp, #0
 81095da:	6078      	str	r0, [r7, #4]
 81095dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81095de:	687b      	ldr	r3, [r7, #4]
 81095e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81095e4:	2b01      	cmp	r3, #1
 81095e6:	d101      	bne.n	81095ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81095e8:	2302      	movs	r3, #2
 81095ea:	e02d      	b.n	8109648 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81095ec:	687b      	ldr	r3, [r7, #4]
 81095ee:	2201      	movs	r2, #1
 81095f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81095f4:	687b      	ldr	r3, [r7, #4]
 81095f6:	2224      	movs	r2, #36	; 0x24
 81095f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81095fc:	687b      	ldr	r3, [r7, #4]
 81095fe:	681b      	ldr	r3, [r3, #0]
 8109600:	681b      	ldr	r3, [r3, #0]
 8109602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109604:	687b      	ldr	r3, [r7, #4]
 8109606:	681b      	ldr	r3, [r3, #0]
 8109608:	681a      	ldr	r2, [r3, #0]
 810960a:	687b      	ldr	r3, [r7, #4]
 810960c:	681b      	ldr	r3, [r3, #0]
 810960e:	f022 0201 	bic.w	r2, r2, #1
 8109612:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109614:	687b      	ldr	r3, [r7, #4]
 8109616:	681b      	ldr	r3, [r3, #0]
 8109618:	689b      	ldr	r3, [r3, #8]
 810961a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810961e:	687b      	ldr	r3, [r7, #4]
 8109620:	681b      	ldr	r3, [r3, #0]
 8109622:	683a      	ldr	r2, [r7, #0]
 8109624:	430a      	orrs	r2, r1
 8109626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109628:	6878      	ldr	r0, [r7, #4]
 810962a:	f000 f84f 	bl	81096cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810962e:	687b      	ldr	r3, [r7, #4]
 8109630:	681b      	ldr	r3, [r3, #0]
 8109632:	68fa      	ldr	r2, [r7, #12]
 8109634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109636:	687b      	ldr	r3, [r7, #4]
 8109638:	2220      	movs	r2, #32
 810963a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810963e:	687b      	ldr	r3, [r7, #4]
 8109640:	2200      	movs	r2, #0
 8109642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109646:	2300      	movs	r3, #0
}
 8109648:	4618      	mov	r0, r3
 810964a:	3710      	adds	r7, #16
 810964c:	46bd      	mov	sp, r7
 810964e:	bd80      	pop	{r7, pc}

08109650 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109650:	b580      	push	{r7, lr}
 8109652:	b084      	sub	sp, #16
 8109654:	af00      	add	r7, sp, #0
 8109656:	6078      	str	r0, [r7, #4]
 8109658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810965a:	687b      	ldr	r3, [r7, #4]
 810965c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109660:	2b01      	cmp	r3, #1
 8109662:	d101      	bne.n	8109668 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8109664:	2302      	movs	r3, #2
 8109666:	e02d      	b.n	81096c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8109668:	687b      	ldr	r3, [r7, #4]
 810966a:	2201      	movs	r2, #1
 810966c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109670:	687b      	ldr	r3, [r7, #4]
 8109672:	2224      	movs	r2, #36	; 0x24
 8109674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109678:	687b      	ldr	r3, [r7, #4]
 810967a:	681b      	ldr	r3, [r3, #0]
 810967c:	681b      	ldr	r3, [r3, #0]
 810967e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109680:	687b      	ldr	r3, [r7, #4]
 8109682:	681b      	ldr	r3, [r3, #0]
 8109684:	681a      	ldr	r2, [r3, #0]
 8109686:	687b      	ldr	r3, [r7, #4]
 8109688:	681b      	ldr	r3, [r3, #0]
 810968a:	f022 0201 	bic.w	r2, r2, #1
 810968e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8109690:	687b      	ldr	r3, [r7, #4]
 8109692:	681b      	ldr	r3, [r3, #0]
 8109694:	689b      	ldr	r3, [r3, #8]
 8109696:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810969a:	687b      	ldr	r3, [r7, #4]
 810969c:	681b      	ldr	r3, [r3, #0]
 810969e:	683a      	ldr	r2, [r7, #0]
 81096a0:	430a      	orrs	r2, r1
 81096a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81096a4:	6878      	ldr	r0, [r7, #4]
 81096a6:	f000 f811 	bl	81096cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81096aa:	687b      	ldr	r3, [r7, #4]
 81096ac:	681b      	ldr	r3, [r3, #0]
 81096ae:	68fa      	ldr	r2, [r7, #12]
 81096b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81096b2:	687b      	ldr	r3, [r7, #4]
 81096b4:	2220      	movs	r2, #32
 81096b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81096ba:	687b      	ldr	r3, [r7, #4]
 81096bc:	2200      	movs	r2, #0
 81096be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81096c2:	2300      	movs	r3, #0
}
 81096c4:	4618      	mov	r0, r3
 81096c6:	3710      	adds	r7, #16
 81096c8:	46bd      	mov	sp, r7
 81096ca:	bd80      	pop	{r7, pc}

081096cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81096cc:	b480      	push	{r7}
 81096ce:	b085      	sub	sp, #20
 81096d0:	af00      	add	r7, sp, #0
 81096d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81096d4:	687b      	ldr	r3, [r7, #4]
 81096d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81096d8:	2b00      	cmp	r3, #0
 81096da:	d108      	bne.n	81096ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81096dc:	687b      	ldr	r3, [r7, #4]
 81096de:	2201      	movs	r2, #1
 81096e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 81096e4:	687b      	ldr	r3, [r7, #4]
 81096e6:	2201      	movs	r2, #1
 81096e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81096ec:	e031      	b.n	8109752 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81096ee:	2310      	movs	r3, #16
 81096f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81096f2:	2310      	movs	r3, #16
 81096f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81096f6:	687b      	ldr	r3, [r7, #4]
 81096f8:	681b      	ldr	r3, [r3, #0]
 81096fa:	689b      	ldr	r3, [r3, #8]
 81096fc:	0e5b      	lsrs	r3, r3, #25
 81096fe:	b2db      	uxtb	r3, r3
 8109700:	f003 0307 	and.w	r3, r3, #7
 8109704:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8109706:	687b      	ldr	r3, [r7, #4]
 8109708:	681b      	ldr	r3, [r3, #0]
 810970a:	689b      	ldr	r3, [r3, #8]
 810970c:	0f5b      	lsrs	r3, r3, #29
 810970e:	b2db      	uxtb	r3, r3
 8109710:	f003 0307 	and.w	r3, r3, #7
 8109714:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109716:	7bbb      	ldrb	r3, [r7, #14]
 8109718:	7b3a      	ldrb	r2, [r7, #12]
 810971a:	4911      	ldr	r1, [pc, #68]	; (8109760 <UARTEx_SetNbDataToProcess+0x94>)
 810971c:	5c8a      	ldrb	r2, [r1, r2]
 810971e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8109722:	7b3a      	ldrb	r2, [r7, #12]
 8109724:	490f      	ldr	r1, [pc, #60]	; (8109764 <UARTEx_SetNbDataToProcess+0x98>)
 8109726:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109728:	fb93 f3f2 	sdiv	r3, r3, r2
 810972c:	b29a      	uxth	r2, r3
 810972e:	687b      	ldr	r3, [r7, #4]
 8109730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109734:	7bfb      	ldrb	r3, [r7, #15]
 8109736:	7b7a      	ldrb	r2, [r7, #13]
 8109738:	4909      	ldr	r1, [pc, #36]	; (8109760 <UARTEx_SetNbDataToProcess+0x94>)
 810973a:	5c8a      	ldrb	r2, [r1, r2]
 810973c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109740:	7b7a      	ldrb	r2, [r7, #13]
 8109742:	4908      	ldr	r1, [pc, #32]	; (8109764 <UARTEx_SetNbDataToProcess+0x98>)
 8109744:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109746:	fb93 f3f2 	sdiv	r3, r3, r2
 810974a:	b29a      	uxth	r2, r3
 810974c:	687b      	ldr	r3, [r7, #4]
 810974e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8109752:	bf00      	nop
 8109754:	3714      	adds	r7, #20
 8109756:	46bd      	mov	sp, r7
 8109758:	f85d 7b04 	ldr.w	r7, [sp], #4
 810975c:	4770      	bx	lr
 810975e:	bf00      	nop
 8109760:	0810a3e0 	.word	0x0810a3e0
 8109764:	0810a3e8 	.word	0x0810a3e8

08109768 <__libc_init_array>:
 8109768:	b570      	push	{r4, r5, r6, lr}
 810976a:	4d0d      	ldr	r5, [pc, #52]	; (81097a0 <__libc_init_array+0x38>)
 810976c:	4c0d      	ldr	r4, [pc, #52]	; (81097a4 <__libc_init_array+0x3c>)
 810976e:	1b64      	subs	r4, r4, r5
 8109770:	10a4      	asrs	r4, r4, #2
 8109772:	2600      	movs	r6, #0
 8109774:	42a6      	cmp	r6, r4
 8109776:	d109      	bne.n	810978c <__libc_init_array+0x24>
 8109778:	4d0b      	ldr	r5, [pc, #44]	; (81097a8 <__libc_init_array+0x40>)
 810977a:	4c0c      	ldr	r4, [pc, #48]	; (81097ac <__libc_init_array+0x44>)
 810977c:	f000 fcc0 	bl	810a100 <_init>
 8109780:	1b64      	subs	r4, r4, r5
 8109782:	10a4      	asrs	r4, r4, #2
 8109784:	2600      	movs	r6, #0
 8109786:	42a6      	cmp	r6, r4
 8109788:	d105      	bne.n	8109796 <__libc_init_array+0x2e>
 810978a:	bd70      	pop	{r4, r5, r6, pc}
 810978c:	f855 3b04 	ldr.w	r3, [r5], #4
 8109790:	4798      	blx	r3
 8109792:	3601      	adds	r6, #1
 8109794:	e7ee      	b.n	8109774 <__libc_init_array+0xc>
 8109796:	f855 3b04 	ldr.w	r3, [r5], #4
 810979a:	4798      	blx	r3
 810979c:	3601      	adds	r6, #1
 810979e:	e7f2      	b.n	8109786 <__libc_init_array+0x1e>
 81097a0:	0810a42c 	.word	0x0810a42c
 81097a4:	0810a42c 	.word	0x0810a42c
 81097a8:	0810a42c 	.word	0x0810a42c
 81097ac:	0810a430 	.word	0x0810a430

081097b0 <memset>:
 81097b0:	4402      	add	r2, r0
 81097b2:	4603      	mov	r3, r0
 81097b4:	4293      	cmp	r3, r2
 81097b6:	d100      	bne.n	81097ba <memset+0xa>
 81097b8:	4770      	bx	lr
 81097ba:	f803 1b01 	strb.w	r1, [r3], #1
 81097be:	e7f9      	b.n	81097b4 <memset+0x4>

081097c0 <siprintf>:
 81097c0:	b40e      	push	{r1, r2, r3}
 81097c2:	b500      	push	{lr}
 81097c4:	b09c      	sub	sp, #112	; 0x70
 81097c6:	ab1d      	add	r3, sp, #116	; 0x74
 81097c8:	9002      	str	r0, [sp, #8]
 81097ca:	9006      	str	r0, [sp, #24]
 81097cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 81097d0:	4809      	ldr	r0, [pc, #36]	; (81097f8 <siprintf+0x38>)
 81097d2:	9107      	str	r1, [sp, #28]
 81097d4:	9104      	str	r1, [sp, #16]
 81097d6:	4909      	ldr	r1, [pc, #36]	; (81097fc <siprintf+0x3c>)
 81097d8:	f853 2b04 	ldr.w	r2, [r3], #4
 81097dc:	9105      	str	r1, [sp, #20]
 81097de:	6800      	ldr	r0, [r0, #0]
 81097e0:	9301      	str	r3, [sp, #4]
 81097e2:	a902      	add	r1, sp, #8
 81097e4:	f000 f868 	bl	81098b8 <_svfiprintf_r>
 81097e8:	9b02      	ldr	r3, [sp, #8]
 81097ea:	2200      	movs	r2, #0
 81097ec:	701a      	strb	r2, [r3, #0]
 81097ee:	b01c      	add	sp, #112	; 0x70
 81097f0:	f85d eb04 	ldr.w	lr, [sp], #4
 81097f4:	b003      	add	sp, #12
 81097f6:	4770      	bx	lr
 81097f8:	10000014 	.word	0x10000014
 81097fc:	ffff0208 	.word	0xffff0208

08109800 <__ssputs_r>:
 8109800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109804:	688e      	ldr	r6, [r1, #8]
 8109806:	429e      	cmp	r6, r3
 8109808:	4682      	mov	sl, r0
 810980a:	460c      	mov	r4, r1
 810980c:	4690      	mov	r8, r2
 810980e:	461f      	mov	r7, r3
 8109810:	d838      	bhi.n	8109884 <__ssputs_r+0x84>
 8109812:	898a      	ldrh	r2, [r1, #12]
 8109814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8109818:	d032      	beq.n	8109880 <__ssputs_r+0x80>
 810981a:	6825      	ldr	r5, [r4, #0]
 810981c:	6909      	ldr	r1, [r1, #16]
 810981e:	eba5 0901 	sub.w	r9, r5, r1
 8109822:	6965      	ldr	r5, [r4, #20]
 8109824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8109828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810982c:	3301      	adds	r3, #1
 810982e:	444b      	add	r3, r9
 8109830:	106d      	asrs	r5, r5, #1
 8109832:	429d      	cmp	r5, r3
 8109834:	bf38      	it	cc
 8109836:	461d      	movcc	r5, r3
 8109838:	0553      	lsls	r3, r2, #21
 810983a:	d531      	bpl.n	81098a0 <__ssputs_r+0xa0>
 810983c:	4629      	mov	r1, r5
 810983e:	f000 fb63 	bl	8109f08 <_malloc_r>
 8109842:	4606      	mov	r6, r0
 8109844:	b950      	cbnz	r0, 810985c <__ssputs_r+0x5c>
 8109846:	230c      	movs	r3, #12
 8109848:	f8ca 3000 	str.w	r3, [sl]
 810984c:	89a3      	ldrh	r3, [r4, #12]
 810984e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8109852:	81a3      	strh	r3, [r4, #12]
 8109854:	f04f 30ff 	mov.w	r0, #4294967295
 8109858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810985c:	6921      	ldr	r1, [r4, #16]
 810985e:	464a      	mov	r2, r9
 8109860:	f000 fabe 	bl	8109de0 <memcpy>
 8109864:	89a3      	ldrh	r3, [r4, #12]
 8109866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810986a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810986e:	81a3      	strh	r3, [r4, #12]
 8109870:	6126      	str	r6, [r4, #16]
 8109872:	6165      	str	r5, [r4, #20]
 8109874:	444e      	add	r6, r9
 8109876:	eba5 0509 	sub.w	r5, r5, r9
 810987a:	6026      	str	r6, [r4, #0]
 810987c:	60a5      	str	r5, [r4, #8]
 810987e:	463e      	mov	r6, r7
 8109880:	42be      	cmp	r6, r7
 8109882:	d900      	bls.n	8109886 <__ssputs_r+0x86>
 8109884:	463e      	mov	r6, r7
 8109886:	6820      	ldr	r0, [r4, #0]
 8109888:	4632      	mov	r2, r6
 810988a:	4641      	mov	r1, r8
 810988c:	f000 fab6 	bl	8109dfc <memmove>
 8109890:	68a3      	ldr	r3, [r4, #8]
 8109892:	1b9b      	subs	r3, r3, r6
 8109894:	60a3      	str	r3, [r4, #8]
 8109896:	6823      	ldr	r3, [r4, #0]
 8109898:	4433      	add	r3, r6
 810989a:	6023      	str	r3, [r4, #0]
 810989c:	2000      	movs	r0, #0
 810989e:	e7db      	b.n	8109858 <__ssputs_r+0x58>
 81098a0:	462a      	mov	r2, r5
 81098a2:	f000 fba5 	bl	8109ff0 <_realloc_r>
 81098a6:	4606      	mov	r6, r0
 81098a8:	2800      	cmp	r0, #0
 81098aa:	d1e1      	bne.n	8109870 <__ssputs_r+0x70>
 81098ac:	6921      	ldr	r1, [r4, #16]
 81098ae:	4650      	mov	r0, sl
 81098b0:	f000 fabe 	bl	8109e30 <_free_r>
 81098b4:	e7c7      	b.n	8109846 <__ssputs_r+0x46>
	...

081098b8 <_svfiprintf_r>:
 81098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81098bc:	4698      	mov	r8, r3
 81098be:	898b      	ldrh	r3, [r1, #12]
 81098c0:	061b      	lsls	r3, r3, #24
 81098c2:	b09d      	sub	sp, #116	; 0x74
 81098c4:	4607      	mov	r7, r0
 81098c6:	460d      	mov	r5, r1
 81098c8:	4614      	mov	r4, r2
 81098ca:	d50e      	bpl.n	81098ea <_svfiprintf_r+0x32>
 81098cc:	690b      	ldr	r3, [r1, #16]
 81098ce:	b963      	cbnz	r3, 81098ea <_svfiprintf_r+0x32>
 81098d0:	2140      	movs	r1, #64	; 0x40
 81098d2:	f000 fb19 	bl	8109f08 <_malloc_r>
 81098d6:	6028      	str	r0, [r5, #0]
 81098d8:	6128      	str	r0, [r5, #16]
 81098da:	b920      	cbnz	r0, 81098e6 <_svfiprintf_r+0x2e>
 81098dc:	230c      	movs	r3, #12
 81098de:	603b      	str	r3, [r7, #0]
 81098e0:	f04f 30ff 	mov.w	r0, #4294967295
 81098e4:	e0d1      	b.n	8109a8a <_svfiprintf_r+0x1d2>
 81098e6:	2340      	movs	r3, #64	; 0x40
 81098e8:	616b      	str	r3, [r5, #20]
 81098ea:	2300      	movs	r3, #0
 81098ec:	9309      	str	r3, [sp, #36]	; 0x24
 81098ee:	2320      	movs	r3, #32
 81098f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81098f4:	f8cd 800c 	str.w	r8, [sp, #12]
 81098f8:	2330      	movs	r3, #48	; 0x30
 81098fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8109aa4 <_svfiprintf_r+0x1ec>
 81098fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8109902:	f04f 0901 	mov.w	r9, #1
 8109906:	4623      	mov	r3, r4
 8109908:	469a      	mov	sl, r3
 810990a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810990e:	b10a      	cbz	r2, 8109914 <_svfiprintf_r+0x5c>
 8109910:	2a25      	cmp	r2, #37	; 0x25
 8109912:	d1f9      	bne.n	8109908 <_svfiprintf_r+0x50>
 8109914:	ebba 0b04 	subs.w	fp, sl, r4
 8109918:	d00b      	beq.n	8109932 <_svfiprintf_r+0x7a>
 810991a:	465b      	mov	r3, fp
 810991c:	4622      	mov	r2, r4
 810991e:	4629      	mov	r1, r5
 8109920:	4638      	mov	r0, r7
 8109922:	f7ff ff6d 	bl	8109800 <__ssputs_r>
 8109926:	3001      	adds	r0, #1
 8109928:	f000 80aa 	beq.w	8109a80 <_svfiprintf_r+0x1c8>
 810992c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810992e:	445a      	add	r2, fp
 8109930:	9209      	str	r2, [sp, #36]	; 0x24
 8109932:	f89a 3000 	ldrb.w	r3, [sl]
 8109936:	2b00      	cmp	r3, #0
 8109938:	f000 80a2 	beq.w	8109a80 <_svfiprintf_r+0x1c8>
 810993c:	2300      	movs	r3, #0
 810993e:	f04f 32ff 	mov.w	r2, #4294967295
 8109942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8109946:	f10a 0a01 	add.w	sl, sl, #1
 810994a:	9304      	str	r3, [sp, #16]
 810994c:	9307      	str	r3, [sp, #28]
 810994e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8109952:	931a      	str	r3, [sp, #104]	; 0x68
 8109954:	4654      	mov	r4, sl
 8109956:	2205      	movs	r2, #5
 8109958:	f814 1b01 	ldrb.w	r1, [r4], #1
 810995c:	4851      	ldr	r0, [pc, #324]	; (8109aa4 <_svfiprintf_r+0x1ec>)
 810995e:	f7f6 fcbf 	bl	81002e0 <memchr>
 8109962:	9a04      	ldr	r2, [sp, #16]
 8109964:	b9d8      	cbnz	r0, 810999e <_svfiprintf_r+0xe6>
 8109966:	06d0      	lsls	r0, r2, #27
 8109968:	bf44      	itt	mi
 810996a:	2320      	movmi	r3, #32
 810996c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8109970:	0711      	lsls	r1, r2, #28
 8109972:	bf44      	itt	mi
 8109974:	232b      	movmi	r3, #43	; 0x2b
 8109976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810997a:	f89a 3000 	ldrb.w	r3, [sl]
 810997e:	2b2a      	cmp	r3, #42	; 0x2a
 8109980:	d015      	beq.n	81099ae <_svfiprintf_r+0xf6>
 8109982:	9a07      	ldr	r2, [sp, #28]
 8109984:	4654      	mov	r4, sl
 8109986:	2000      	movs	r0, #0
 8109988:	f04f 0c0a 	mov.w	ip, #10
 810998c:	4621      	mov	r1, r4
 810998e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8109992:	3b30      	subs	r3, #48	; 0x30
 8109994:	2b09      	cmp	r3, #9
 8109996:	d94e      	bls.n	8109a36 <_svfiprintf_r+0x17e>
 8109998:	b1b0      	cbz	r0, 81099c8 <_svfiprintf_r+0x110>
 810999a:	9207      	str	r2, [sp, #28]
 810999c:	e014      	b.n	81099c8 <_svfiprintf_r+0x110>
 810999e:	eba0 0308 	sub.w	r3, r0, r8
 81099a2:	fa09 f303 	lsl.w	r3, r9, r3
 81099a6:	4313      	orrs	r3, r2
 81099a8:	9304      	str	r3, [sp, #16]
 81099aa:	46a2      	mov	sl, r4
 81099ac:	e7d2      	b.n	8109954 <_svfiprintf_r+0x9c>
 81099ae:	9b03      	ldr	r3, [sp, #12]
 81099b0:	1d19      	adds	r1, r3, #4
 81099b2:	681b      	ldr	r3, [r3, #0]
 81099b4:	9103      	str	r1, [sp, #12]
 81099b6:	2b00      	cmp	r3, #0
 81099b8:	bfbb      	ittet	lt
 81099ba:	425b      	neglt	r3, r3
 81099bc:	f042 0202 	orrlt.w	r2, r2, #2
 81099c0:	9307      	strge	r3, [sp, #28]
 81099c2:	9307      	strlt	r3, [sp, #28]
 81099c4:	bfb8      	it	lt
 81099c6:	9204      	strlt	r2, [sp, #16]
 81099c8:	7823      	ldrb	r3, [r4, #0]
 81099ca:	2b2e      	cmp	r3, #46	; 0x2e
 81099cc:	d10c      	bne.n	81099e8 <_svfiprintf_r+0x130>
 81099ce:	7863      	ldrb	r3, [r4, #1]
 81099d0:	2b2a      	cmp	r3, #42	; 0x2a
 81099d2:	d135      	bne.n	8109a40 <_svfiprintf_r+0x188>
 81099d4:	9b03      	ldr	r3, [sp, #12]
 81099d6:	1d1a      	adds	r2, r3, #4
 81099d8:	681b      	ldr	r3, [r3, #0]
 81099da:	9203      	str	r2, [sp, #12]
 81099dc:	2b00      	cmp	r3, #0
 81099de:	bfb8      	it	lt
 81099e0:	f04f 33ff 	movlt.w	r3, #4294967295
 81099e4:	3402      	adds	r4, #2
 81099e6:	9305      	str	r3, [sp, #20]
 81099e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8109ab4 <_svfiprintf_r+0x1fc>
 81099ec:	7821      	ldrb	r1, [r4, #0]
 81099ee:	2203      	movs	r2, #3
 81099f0:	4650      	mov	r0, sl
 81099f2:	f7f6 fc75 	bl	81002e0 <memchr>
 81099f6:	b140      	cbz	r0, 8109a0a <_svfiprintf_r+0x152>
 81099f8:	2340      	movs	r3, #64	; 0x40
 81099fa:	eba0 000a 	sub.w	r0, r0, sl
 81099fe:	fa03 f000 	lsl.w	r0, r3, r0
 8109a02:	9b04      	ldr	r3, [sp, #16]
 8109a04:	4303      	orrs	r3, r0
 8109a06:	3401      	adds	r4, #1
 8109a08:	9304      	str	r3, [sp, #16]
 8109a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8109a0e:	4826      	ldr	r0, [pc, #152]	; (8109aa8 <_svfiprintf_r+0x1f0>)
 8109a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8109a14:	2206      	movs	r2, #6
 8109a16:	f7f6 fc63 	bl	81002e0 <memchr>
 8109a1a:	2800      	cmp	r0, #0
 8109a1c:	d038      	beq.n	8109a90 <_svfiprintf_r+0x1d8>
 8109a1e:	4b23      	ldr	r3, [pc, #140]	; (8109aac <_svfiprintf_r+0x1f4>)
 8109a20:	bb1b      	cbnz	r3, 8109a6a <_svfiprintf_r+0x1b2>
 8109a22:	9b03      	ldr	r3, [sp, #12]
 8109a24:	3307      	adds	r3, #7
 8109a26:	f023 0307 	bic.w	r3, r3, #7
 8109a2a:	3308      	adds	r3, #8
 8109a2c:	9303      	str	r3, [sp, #12]
 8109a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109a30:	4433      	add	r3, r6
 8109a32:	9309      	str	r3, [sp, #36]	; 0x24
 8109a34:	e767      	b.n	8109906 <_svfiprintf_r+0x4e>
 8109a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8109a3a:	460c      	mov	r4, r1
 8109a3c:	2001      	movs	r0, #1
 8109a3e:	e7a5      	b.n	810998c <_svfiprintf_r+0xd4>
 8109a40:	2300      	movs	r3, #0
 8109a42:	3401      	adds	r4, #1
 8109a44:	9305      	str	r3, [sp, #20]
 8109a46:	4619      	mov	r1, r3
 8109a48:	f04f 0c0a 	mov.w	ip, #10
 8109a4c:	4620      	mov	r0, r4
 8109a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8109a52:	3a30      	subs	r2, #48	; 0x30
 8109a54:	2a09      	cmp	r2, #9
 8109a56:	d903      	bls.n	8109a60 <_svfiprintf_r+0x1a8>
 8109a58:	2b00      	cmp	r3, #0
 8109a5a:	d0c5      	beq.n	81099e8 <_svfiprintf_r+0x130>
 8109a5c:	9105      	str	r1, [sp, #20]
 8109a5e:	e7c3      	b.n	81099e8 <_svfiprintf_r+0x130>
 8109a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8109a64:	4604      	mov	r4, r0
 8109a66:	2301      	movs	r3, #1
 8109a68:	e7f0      	b.n	8109a4c <_svfiprintf_r+0x194>
 8109a6a:	ab03      	add	r3, sp, #12
 8109a6c:	9300      	str	r3, [sp, #0]
 8109a6e:	462a      	mov	r2, r5
 8109a70:	4b0f      	ldr	r3, [pc, #60]	; (8109ab0 <_svfiprintf_r+0x1f8>)
 8109a72:	a904      	add	r1, sp, #16
 8109a74:	4638      	mov	r0, r7
 8109a76:	f3af 8000 	nop.w
 8109a7a:	1c42      	adds	r2, r0, #1
 8109a7c:	4606      	mov	r6, r0
 8109a7e:	d1d6      	bne.n	8109a2e <_svfiprintf_r+0x176>
 8109a80:	89ab      	ldrh	r3, [r5, #12]
 8109a82:	065b      	lsls	r3, r3, #25
 8109a84:	f53f af2c 	bmi.w	81098e0 <_svfiprintf_r+0x28>
 8109a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8109a8a:	b01d      	add	sp, #116	; 0x74
 8109a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109a90:	ab03      	add	r3, sp, #12
 8109a92:	9300      	str	r3, [sp, #0]
 8109a94:	462a      	mov	r2, r5
 8109a96:	4b06      	ldr	r3, [pc, #24]	; (8109ab0 <_svfiprintf_r+0x1f8>)
 8109a98:	a904      	add	r1, sp, #16
 8109a9a:	4638      	mov	r0, r7
 8109a9c:	f000 f87a 	bl	8109b94 <_printf_i>
 8109aa0:	e7eb      	b.n	8109a7a <_svfiprintf_r+0x1c2>
 8109aa2:	bf00      	nop
 8109aa4:	0810a3f0 	.word	0x0810a3f0
 8109aa8:	0810a3fa 	.word	0x0810a3fa
 8109aac:	00000000 	.word	0x00000000
 8109ab0:	08109801 	.word	0x08109801
 8109ab4:	0810a3f6 	.word	0x0810a3f6

08109ab8 <_printf_common>:
 8109ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109abc:	4616      	mov	r6, r2
 8109abe:	4699      	mov	r9, r3
 8109ac0:	688a      	ldr	r2, [r1, #8]
 8109ac2:	690b      	ldr	r3, [r1, #16]
 8109ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8109ac8:	4293      	cmp	r3, r2
 8109aca:	bfb8      	it	lt
 8109acc:	4613      	movlt	r3, r2
 8109ace:	6033      	str	r3, [r6, #0]
 8109ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8109ad4:	4607      	mov	r7, r0
 8109ad6:	460c      	mov	r4, r1
 8109ad8:	b10a      	cbz	r2, 8109ade <_printf_common+0x26>
 8109ada:	3301      	adds	r3, #1
 8109adc:	6033      	str	r3, [r6, #0]
 8109ade:	6823      	ldr	r3, [r4, #0]
 8109ae0:	0699      	lsls	r1, r3, #26
 8109ae2:	bf42      	ittt	mi
 8109ae4:	6833      	ldrmi	r3, [r6, #0]
 8109ae6:	3302      	addmi	r3, #2
 8109ae8:	6033      	strmi	r3, [r6, #0]
 8109aea:	6825      	ldr	r5, [r4, #0]
 8109aec:	f015 0506 	ands.w	r5, r5, #6
 8109af0:	d106      	bne.n	8109b00 <_printf_common+0x48>
 8109af2:	f104 0a19 	add.w	sl, r4, #25
 8109af6:	68e3      	ldr	r3, [r4, #12]
 8109af8:	6832      	ldr	r2, [r6, #0]
 8109afa:	1a9b      	subs	r3, r3, r2
 8109afc:	42ab      	cmp	r3, r5
 8109afe:	dc26      	bgt.n	8109b4e <_printf_common+0x96>
 8109b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8109b04:	1e13      	subs	r3, r2, #0
 8109b06:	6822      	ldr	r2, [r4, #0]
 8109b08:	bf18      	it	ne
 8109b0a:	2301      	movne	r3, #1
 8109b0c:	0692      	lsls	r2, r2, #26
 8109b0e:	d42b      	bmi.n	8109b68 <_printf_common+0xb0>
 8109b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8109b14:	4649      	mov	r1, r9
 8109b16:	4638      	mov	r0, r7
 8109b18:	47c0      	blx	r8
 8109b1a:	3001      	adds	r0, #1
 8109b1c:	d01e      	beq.n	8109b5c <_printf_common+0xa4>
 8109b1e:	6823      	ldr	r3, [r4, #0]
 8109b20:	68e5      	ldr	r5, [r4, #12]
 8109b22:	6832      	ldr	r2, [r6, #0]
 8109b24:	f003 0306 	and.w	r3, r3, #6
 8109b28:	2b04      	cmp	r3, #4
 8109b2a:	bf08      	it	eq
 8109b2c:	1aad      	subeq	r5, r5, r2
 8109b2e:	68a3      	ldr	r3, [r4, #8]
 8109b30:	6922      	ldr	r2, [r4, #16]
 8109b32:	bf0c      	ite	eq
 8109b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109b38:	2500      	movne	r5, #0
 8109b3a:	4293      	cmp	r3, r2
 8109b3c:	bfc4      	itt	gt
 8109b3e:	1a9b      	subgt	r3, r3, r2
 8109b40:	18ed      	addgt	r5, r5, r3
 8109b42:	2600      	movs	r6, #0
 8109b44:	341a      	adds	r4, #26
 8109b46:	42b5      	cmp	r5, r6
 8109b48:	d11a      	bne.n	8109b80 <_printf_common+0xc8>
 8109b4a:	2000      	movs	r0, #0
 8109b4c:	e008      	b.n	8109b60 <_printf_common+0xa8>
 8109b4e:	2301      	movs	r3, #1
 8109b50:	4652      	mov	r2, sl
 8109b52:	4649      	mov	r1, r9
 8109b54:	4638      	mov	r0, r7
 8109b56:	47c0      	blx	r8
 8109b58:	3001      	adds	r0, #1
 8109b5a:	d103      	bne.n	8109b64 <_printf_common+0xac>
 8109b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8109b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109b64:	3501      	adds	r5, #1
 8109b66:	e7c6      	b.n	8109af6 <_printf_common+0x3e>
 8109b68:	18e1      	adds	r1, r4, r3
 8109b6a:	1c5a      	adds	r2, r3, #1
 8109b6c:	2030      	movs	r0, #48	; 0x30
 8109b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8109b72:	4422      	add	r2, r4
 8109b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8109b7c:	3302      	adds	r3, #2
 8109b7e:	e7c7      	b.n	8109b10 <_printf_common+0x58>
 8109b80:	2301      	movs	r3, #1
 8109b82:	4622      	mov	r2, r4
 8109b84:	4649      	mov	r1, r9
 8109b86:	4638      	mov	r0, r7
 8109b88:	47c0      	blx	r8
 8109b8a:	3001      	adds	r0, #1
 8109b8c:	d0e6      	beq.n	8109b5c <_printf_common+0xa4>
 8109b8e:	3601      	adds	r6, #1
 8109b90:	e7d9      	b.n	8109b46 <_printf_common+0x8e>
	...

08109b94 <_printf_i>:
 8109b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109b98:	7e0f      	ldrb	r7, [r1, #24]
 8109b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109b9c:	2f78      	cmp	r7, #120	; 0x78
 8109b9e:	4691      	mov	r9, r2
 8109ba0:	4680      	mov	r8, r0
 8109ba2:	460c      	mov	r4, r1
 8109ba4:	469a      	mov	sl, r3
 8109ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8109baa:	d807      	bhi.n	8109bbc <_printf_i+0x28>
 8109bac:	2f62      	cmp	r7, #98	; 0x62
 8109bae:	d80a      	bhi.n	8109bc6 <_printf_i+0x32>
 8109bb0:	2f00      	cmp	r7, #0
 8109bb2:	f000 80d8 	beq.w	8109d66 <_printf_i+0x1d2>
 8109bb6:	2f58      	cmp	r7, #88	; 0x58
 8109bb8:	f000 80a3 	beq.w	8109d02 <_printf_i+0x16e>
 8109bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8109bc4:	e03a      	b.n	8109c3c <_printf_i+0xa8>
 8109bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8109bca:	2b15      	cmp	r3, #21
 8109bcc:	d8f6      	bhi.n	8109bbc <_printf_i+0x28>
 8109bce:	a101      	add	r1, pc, #4	; (adr r1, 8109bd4 <_printf_i+0x40>)
 8109bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109bd4:	08109c2d 	.word	0x08109c2d
 8109bd8:	08109c41 	.word	0x08109c41
 8109bdc:	08109bbd 	.word	0x08109bbd
 8109be0:	08109bbd 	.word	0x08109bbd
 8109be4:	08109bbd 	.word	0x08109bbd
 8109be8:	08109bbd 	.word	0x08109bbd
 8109bec:	08109c41 	.word	0x08109c41
 8109bf0:	08109bbd 	.word	0x08109bbd
 8109bf4:	08109bbd 	.word	0x08109bbd
 8109bf8:	08109bbd 	.word	0x08109bbd
 8109bfc:	08109bbd 	.word	0x08109bbd
 8109c00:	08109d4d 	.word	0x08109d4d
 8109c04:	08109c71 	.word	0x08109c71
 8109c08:	08109d2f 	.word	0x08109d2f
 8109c0c:	08109bbd 	.word	0x08109bbd
 8109c10:	08109bbd 	.word	0x08109bbd
 8109c14:	08109d6f 	.word	0x08109d6f
 8109c18:	08109bbd 	.word	0x08109bbd
 8109c1c:	08109c71 	.word	0x08109c71
 8109c20:	08109bbd 	.word	0x08109bbd
 8109c24:	08109bbd 	.word	0x08109bbd
 8109c28:	08109d37 	.word	0x08109d37
 8109c2c:	682b      	ldr	r3, [r5, #0]
 8109c2e:	1d1a      	adds	r2, r3, #4
 8109c30:	681b      	ldr	r3, [r3, #0]
 8109c32:	602a      	str	r2, [r5, #0]
 8109c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8109c3c:	2301      	movs	r3, #1
 8109c3e:	e0a3      	b.n	8109d88 <_printf_i+0x1f4>
 8109c40:	6820      	ldr	r0, [r4, #0]
 8109c42:	6829      	ldr	r1, [r5, #0]
 8109c44:	0606      	lsls	r6, r0, #24
 8109c46:	f101 0304 	add.w	r3, r1, #4
 8109c4a:	d50a      	bpl.n	8109c62 <_printf_i+0xce>
 8109c4c:	680e      	ldr	r6, [r1, #0]
 8109c4e:	602b      	str	r3, [r5, #0]
 8109c50:	2e00      	cmp	r6, #0
 8109c52:	da03      	bge.n	8109c5c <_printf_i+0xc8>
 8109c54:	232d      	movs	r3, #45	; 0x2d
 8109c56:	4276      	negs	r6, r6
 8109c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109c5c:	485e      	ldr	r0, [pc, #376]	; (8109dd8 <_printf_i+0x244>)
 8109c5e:	230a      	movs	r3, #10
 8109c60:	e019      	b.n	8109c96 <_printf_i+0x102>
 8109c62:	680e      	ldr	r6, [r1, #0]
 8109c64:	602b      	str	r3, [r5, #0]
 8109c66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8109c6a:	bf18      	it	ne
 8109c6c:	b236      	sxthne	r6, r6
 8109c6e:	e7ef      	b.n	8109c50 <_printf_i+0xbc>
 8109c70:	682b      	ldr	r3, [r5, #0]
 8109c72:	6820      	ldr	r0, [r4, #0]
 8109c74:	1d19      	adds	r1, r3, #4
 8109c76:	6029      	str	r1, [r5, #0]
 8109c78:	0601      	lsls	r1, r0, #24
 8109c7a:	d501      	bpl.n	8109c80 <_printf_i+0xec>
 8109c7c:	681e      	ldr	r6, [r3, #0]
 8109c7e:	e002      	b.n	8109c86 <_printf_i+0xf2>
 8109c80:	0646      	lsls	r6, r0, #25
 8109c82:	d5fb      	bpl.n	8109c7c <_printf_i+0xe8>
 8109c84:	881e      	ldrh	r6, [r3, #0]
 8109c86:	4854      	ldr	r0, [pc, #336]	; (8109dd8 <_printf_i+0x244>)
 8109c88:	2f6f      	cmp	r7, #111	; 0x6f
 8109c8a:	bf0c      	ite	eq
 8109c8c:	2308      	moveq	r3, #8
 8109c8e:	230a      	movne	r3, #10
 8109c90:	2100      	movs	r1, #0
 8109c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8109c96:	6865      	ldr	r5, [r4, #4]
 8109c98:	60a5      	str	r5, [r4, #8]
 8109c9a:	2d00      	cmp	r5, #0
 8109c9c:	bfa2      	ittt	ge
 8109c9e:	6821      	ldrge	r1, [r4, #0]
 8109ca0:	f021 0104 	bicge.w	r1, r1, #4
 8109ca4:	6021      	strge	r1, [r4, #0]
 8109ca6:	b90e      	cbnz	r6, 8109cac <_printf_i+0x118>
 8109ca8:	2d00      	cmp	r5, #0
 8109caa:	d04d      	beq.n	8109d48 <_printf_i+0x1b4>
 8109cac:	4615      	mov	r5, r2
 8109cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8109cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8109cb6:	5dc7      	ldrb	r7, [r0, r7]
 8109cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8109cbc:	4637      	mov	r7, r6
 8109cbe:	42bb      	cmp	r3, r7
 8109cc0:	460e      	mov	r6, r1
 8109cc2:	d9f4      	bls.n	8109cae <_printf_i+0x11a>
 8109cc4:	2b08      	cmp	r3, #8
 8109cc6:	d10b      	bne.n	8109ce0 <_printf_i+0x14c>
 8109cc8:	6823      	ldr	r3, [r4, #0]
 8109cca:	07de      	lsls	r6, r3, #31
 8109ccc:	d508      	bpl.n	8109ce0 <_printf_i+0x14c>
 8109cce:	6923      	ldr	r3, [r4, #16]
 8109cd0:	6861      	ldr	r1, [r4, #4]
 8109cd2:	4299      	cmp	r1, r3
 8109cd4:	bfde      	ittt	le
 8109cd6:	2330      	movle	r3, #48	; 0x30
 8109cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8109cdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8109ce0:	1b52      	subs	r2, r2, r5
 8109ce2:	6122      	str	r2, [r4, #16]
 8109ce4:	f8cd a000 	str.w	sl, [sp]
 8109ce8:	464b      	mov	r3, r9
 8109cea:	aa03      	add	r2, sp, #12
 8109cec:	4621      	mov	r1, r4
 8109cee:	4640      	mov	r0, r8
 8109cf0:	f7ff fee2 	bl	8109ab8 <_printf_common>
 8109cf4:	3001      	adds	r0, #1
 8109cf6:	d14c      	bne.n	8109d92 <_printf_i+0x1fe>
 8109cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8109cfc:	b004      	add	sp, #16
 8109cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109d02:	4835      	ldr	r0, [pc, #212]	; (8109dd8 <_printf_i+0x244>)
 8109d04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8109d08:	6829      	ldr	r1, [r5, #0]
 8109d0a:	6823      	ldr	r3, [r4, #0]
 8109d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8109d10:	6029      	str	r1, [r5, #0]
 8109d12:	061d      	lsls	r5, r3, #24
 8109d14:	d514      	bpl.n	8109d40 <_printf_i+0x1ac>
 8109d16:	07df      	lsls	r7, r3, #31
 8109d18:	bf44      	itt	mi
 8109d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8109d1e:	6023      	strmi	r3, [r4, #0]
 8109d20:	b91e      	cbnz	r6, 8109d2a <_printf_i+0x196>
 8109d22:	6823      	ldr	r3, [r4, #0]
 8109d24:	f023 0320 	bic.w	r3, r3, #32
 8109d28:	6023      	str	r3, [r4, #0]
 8109d2a:	2310      	movs	r3, #16
 8109d2c:	e7b0      	b.n	8109c90 <_printf_i+0xfc>
 8109d2e:	6823      	ldr	r3, [r4, #0]
 8109d30:	f043 0320 	orr.w	r3, r3, #32
 8109d34:	6023      	str	r3, [r4, #0]
 8109d36:	2378      	movs	r3, #120	; 0x78
 8109d38:	4828      	ldr	r0, [pc, #160]	; (8109ddc <_printf_i+0x248>)
 8109d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8109d3e:	e7e3      	b.n	8109d08 <_printf_i+0x174>
 8109d40:	0659      	lsls	r1, r3, #25
 8109d42:	bf48      	it	mi
 8109d44:	b2b6      	uxthmi	r6, r6
 8109d46:	e7e6      	b.n	8109d16 <_printf_i+0x182>
 8109d48:	4615      	mov	r5, r2
 8109d4a:	e7bb      	b.n	8109cc4 <_printf_i+0x130>
 8109d4c:	682b      	ldr	r3, [r5, #0]
 8109d4e:	6826      	ldr	r6, [r4, #0]
 8109d50:	6961      	ldr	r1, [r4, #20]
 8109d52:	1d18      	adds	r0, r3, #4
 8109d54:	6028      	str	r0, [r5, #0]
 8109d56:	0635      	lsls	r5, r6, #24
 8109d58:	681b      	ldr	r3, [r3, #0]
 8109d5a:	d501      	bpl.n	8109d60 <_printf_i+0x1cc>
 8109d5c:	6019      	str	r1, [r3, #0]
 8109d5e:	e002      	b.n	8109d66 <_printf_i+0x1d2>
 8109d60:	0670      	lsls	r0, r6, #25
 8109d62:	d5fb      	bpl.n	8109d5c <_printf_i+0x1c8>
 8109d64:	8019      	strh	r1, [r3, #0]
 8109d66:	2300      	movs	r3, #0
 8109d68:	6123      	str	r3, [r4, #16]
 8109d6a:	4615      	mov	r5, r2
 8109d6c:	e7ba      	b.n	8109ce4 <_printf_i+0x150>
 8109d6e:	682b      	ldr	r3, [r5, #0]
 8109d70:	1d1a      	adds	r2, r3, #4
 8109d72:	602a      	str	r2, [r5, #0]
 8109d74:	681d      	ldr	r5, [r3, #0]
 8109d76:	6862      	ldr	r2, [r4, #4]
 8109d78:	2100      	movs	r1, #0
 8109d7a:	4628      	mov	r0, r5
 8109d7c:	f7f6 fab0 	bl	81002e0 <memchr>
 8109d80:	b108      	cbz	r0, 8109d86 <_printf_i+0x1f2>
 8109d82:	1b40      	subs	r0, r0, r5
 8109d84:	6060      	str	r0, [r4, #4]
 8109d86:	6863      	ldr	r3, [r4, #4]
 8109d88:	6123      	str	r3, [r4, #16]
 8109d8a:	2300      	movs	r3, #0
 8109d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109d90:	e7a8      	b.n	8109ce4 <_printf_i+0x150>
 8109d92:	6923      	ldr	r3, [r4, #16]
 8109d94:	462a      	mov	r2, r5
 8109d96:	4649      	mov	r1, r9
 8109d98:	4640      	mov	r0, r8
 8109d9a:	47d0      	blx	sl
 8109d9c:	3001      	adds	r0, #1
 8109d9e:	d0ab      	beq.n	8109cf8 <_printf_i+0x164>
 8109da0:	6823      	ldr	r3, [r4, #0]
 8109da2:	079b      	lsls	r3, r3, #30
 8109da4:	d413      	bmi.n	8109dce <_printf_i+0x23a>
 8109da6:	68e0      	ldr	r0, [r4, #12]
 8109da8:	9b03      	ldr	r3, [sp, #12]
 8109daa:	4298      	cmp	r0, r3
 8109dac:	bfb8      	it	lt
 8109dae:	4618      	movlt	r0, r3
 8109db0:	e7a4      	b.n	8109cfc <_printf_i+0x168>
 8109db2:	2301      	movs	r3, #1
 8109db4:	4632      	mov	r2, r6
 8109db6:	4649      	mov	r1, r9
 8109db8:	4640      	mov	r0, r8
 8109dba:	47d0      	blx	sl
 8109dbc:	3001      	adds	r0, #1
 8109dbe:	d09b      	beq.n	8109cf8 <_printf_i+0x164>
 8109dc0:	3501      	adds	r5, #1
 8109dc2:	68e3      	ldr	r3, [r4, #12]
 8109dc4:	9903      	ldr	r1, [sp, #12]
 8109dc6:	1a5b      	subs	r3, r3, r1
 8109dc8:	42ab      	cmp	r3, r5
 8109dca:	dcf2      	bgt.n	8109db2 <_printf_i+0x21e>
 8109dcc:	e7eb      	b.n	8109da6 <_printf_i+0x212>
 8109dce:	2500      	movs	r5, #0
 8109dd0:	f104 0619 	add.w	r6, r4, #25
 8109dd4:	e7f5      	b.n	8109dc2 <_printf_i+0x22e>
 8109dd6:	bf00      	nop
 8109dd8:	0810a401 	.word	0x0810a401
 8109ddc:	0810a412 	.word	0x0810a412

08109de0 <memcpy>:
 8109de0:	440a      	add	r2, r1
 8109de2:	4291      	cmp	r1, r2
 8109de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8109de8:	d100      	bne.n	8109dec <memcpy+0xc>
 8109dea:	4770      	bx	lr
 8109dec:	b510      	push	{r4, lr}
 8109dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8109df2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8109df6:	4291      	cmp	r1, r2
 8109df8:	d1f9      	bne.n	8109dee <memcpy+0xe>
 8109dfa:	bd10      	pop	{r4, pc}

08109dfc <memmove>:
 8109dfc:	4288      	cmp	r0, r1
 8109dfe:	b510      	push	{r4, lr}
 8109e00:	eb01 0402 	add.w	r4, r1, r2
 8109e04:	d902      	bls.n	8109e0c <memmove+0x10>
 8109e06:	4284      	cmp	r4, r0
 8109e08:	4623      	mov	r3, r4
 8109e0a:	d807      	bhi.n	8109e1c <memmove+0x20>
 8109e0c:	1e43      	subs	r3, r0, #1
 8109e0e:	42a1      	cmp	r1, r4
 8109e10:	d008      	beq.n	8109e24 <memmove+0x28>
 8109e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8109e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8109e1a:	e7f8      	b.n	8109e0e <memmove+0x12>
 8109e1c:	4402      	add	r2, r0
 8109e1e:	4601      	mov	r1, r0
 8109e20:	428a      	cmp	r2, r1
 8109e22:	d100      	bne.n	8109e26 <memmove+0x2a>
 8109e24:	bd10      	pop	{r4, pc}
 8109e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8109e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8109e2e:	e7f7      	b.n	8109e20 <memmove+0x24>

08109e30 <_free_r>:
 8109e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8109e32:	2900      	cmp	r1, #0
 8109e34:	d044      	beq.n	8109ec0 <_free_r+0x90>
 8109e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8109e3a:	9001      	str	r0, [sp, #4]
 8109e3c:	2b00      	cmp	r3, #0
 8109e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8109e42:	bfb8      	it	lt
 8109e44:	18e4      	addlt	r4, r4, r3
 8109e46:	f000 f913 	bl	810a070 <__malloc_lock>
 8109e4a:	4a1e      	ldr	r2, [pc, #120]	; (8109ec4 <_free_r+0x94>)
 8109e4c:	9801      	ldr	r0, [sp, #4]
 8109e4e:	6813      	ldr	r3, [r2, #0]
 8109e50:	b933      	cbnz	r3, 8109e60 <_free_r+0x30>
 8109e52:	6063      	str	r3, [r4, #4]
 8109e54:	6014      	str	r4, [r2, #0]
 8109e56:	b003      	add	sp, #12
 8109e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8109e5c:	f000 b90e 	b.w	810a07c <__malloc_unlock>
 8109e60:	42a3      	cmp	r3, r4
 8109e62:	d908      	bls.n	8109e76 <_free_r+0x46>
 8109e64:	6825      	ldr	r5, [r4, #0]
 8109e66:	1961      	adds	r1, r4, r5
 8109e68:	428b      	cmp	r3, r1
 8109e6a:	bf01      	itttt	eq
 8109e6c:	6819      	ldreq	r1, [r3, #0]
 8109e6e:	685b      	ldreq	r3, [r3, #4]
 8109e70:	1949      	addeq	r1, r1, r5
 8109e72:	6021      	streq	r1, [r4, #0]
 8109e74:	e7ed      	b.n	8109e52 <_free_r+0x22>
 8109e76:	461a      	mov	r2, r3
 8109e78:	685b      	ldr	r3, [r3, #4]
 8109e7a:	b10b      	cbz	r3, 8109e80 <_free_r+0x50>
 8109e7c:	42a3      	cmp	r3, r4
 8109e7e:	d9fa      	bls.n	8109e76 <_free_r+0x46>
 8109e80:	6811      	ldr	r1, [r2, #0]
 8109e82:	1855      	adds	r5, r2, r1
 8109e84:	42a5      	cmp	r5, r4
 8109e86:	d10b      	bne.n	8109ea0 <_free_r+0x70>
 8109e88:	6824      	ldr	r4, [r4, #0]
 8109e8a:	4421      	add	r1, r4
 8109e8c:	1854      	adds	r4, r2, r1
 8109e8e:	42a3      	cmp	r3, r4
 8109e90:	6011      	str	r1, [r2, #0]
 8109e92:	d1e0      	bne.n	8109e56 <_free_r+0x26>
 8109e94:	681c      	ldr	r4, [r3, #0]
 8109e96:	685b      	ldr	r3, [r3, #4]
 8109e98:	6053      	str	r3, [r2, #4]
 8109e9a:	4421      	add	r1, r4
 8109e9c:	6011      	str	r1, [r2, #0]
 8109e9e:	e7da      	b.n	8109e56 <_free_r+0x26>
 8109ea0:	d902      	bls.n	8109ea8 <_free_r+0x78>
 8109ea2:	230c      	movs	r3, #12
 8109ea4:	6003      	str	r3, [r0, #0]
 8109ea6:	e7d6      	b.n	8109e56 <_free_r+0x26>
 8109ea8:	6825      	ldr	r5, [r4, #0]
 8109eaa:	1961      	adds	r1, r4, r5
 8109eac:	428b      	cmp	r3, r1
 8109eae:	bf04      	itt	eq
 8109eb0:	6819      	ldreq	r1, [r3, #0]
 8109eb2:	685b      	ldreq	r3, [r3, #4]
 8109eb4:	6063      	str	r3, [r4, #4]
 8109eb6:	bf04      	itt	eq
 8109eb8:	1949      	addeq	r1, r1, r5
 8109eba:	6021      	streq	r1, [r4, #0]
 8109ebc:	6054      	str	r4, [r2, #4]
 8109ebe:	e7ca      	b.n	8109e56 <_free_r+0x26>
 8109ec0:	b003      	add	sp, #12
 8109ec2:	bd30      	pop	{r4, r5, pc}
 8109ec4:	100003f8 	.word	0x100003f8

08109ec8 <sbrk_aligned>:
 8109ec8:	b570      	push	{r4, r5, r6, lr}
 8109eca:	4e0e      	ldr	r6, [pc, #56]	; (8109f04 <sbrk_aligned+0x3c>)
 8109ecc:	460c      	mov	r4, r1
 8109ece:	6831      	ldr	r1, [r6, #0]
 8109ed0:	4605      	mov	r5, r0
 8109ed2:	b911      	cbnz	r1, 8109eda <sbrk_aligned+0x12>
 8109ed4:	f000 f8bc 	bl	810a050 <_sbrk_r>
 8109ed8:	6030      	str	r0, [r6, #0]
 8109eda:	4621      	mov	r1, r4
 8109edc:	4628      	mov	r0, r5
 8109ede:	f000 f8b7 	bl	810a050 <_sbrk_r>
 8109ee2:	1c43      	adds	r3, r0, #1
 8109ee4:	d00a      	beq.n	8109efc <sbrk_aligned+0x34>
 8109ee6:	1cc4      	adds	r4, r0, #3
 8109ee8:	f024 0403 	bic.w	r4, r4, #3
 8109eec:	42a0      	cmp	r0, r4
 8109eee:	d007      	beq.n	8109f00 <sbrk_aligned+0x38>
 8109ef0:	1a21      	subs	r1, r4, r0
 8109ef2:	4628      	mov	r0, r5
 8109ef4:	f000 f8ac 	bl	810a050 <_sbrk_r>
 8109ef8:	3001      	adds	r0, #1
 8109efa:	d101      	bne.n	8109f00 <sbrk_aligned+0x38>
 8109efc:	f04f 34ff 	mov.w	r4, #4294967295
 8109f00:	4620      	mov	r0, r4
 8109f02:	bd70      	pop	{r4, r5, r6, pc}
 8109f04:	100003fc 	.word	0x100003fc

08109f08 <_malloc_r>:
 8109f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109f0c:	1ccd      	adds	r5, r1, #3
 8109f0e:	f025 0503 	bic.w	r5, r5, #3
 8109f12:	3508      	adds	r5, #8
 8109f14:	2d0c      	cmp	r5, #12
 8109f16:	bf38      	it	cc
 8109f18:	250c      	movcc	r5, #12
 8109f1a:	2d00      	cmp	r5, #0
 8109f1c:	4607      	mov	r7, r0
 8109f1e:	db01      	blt.n	8109f24 <_malloc_r+0x1c>
 8109f20:	42a9      	cmp	r1, r5
 8109f22:	d905      	bls.n	8109f30 <_malloc_r+0x28>
 8109f24:	230c      	movs	r3, #12
 8109f26:	603b      	str	r3, [r7, #0]
 8109f28:	2600      	movs	r6, #0
 8109f2a:	4630      	mov	r0, r6
 8109f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109f30:	4e2e      	ldr	r6, [pc, #184]	; (8109fec <_malloc_r+0xe4>)
 8109f32:	f000 f89d 	bl	810a070 <__malloc_lock>
 8109f36:	6833      	ldr	r3, [r6, #0]
 8109f38:	461c      	mov	r4, r3
 8109f3a:	bb34      	cbnz	r4, 8109f8a <_malloc_r+0x82>
 8109f3c:	4629      	mov	r1, r5
 8109f3e:	4638      	mov	r0, r7
 8109f40:	f7ff ffc2 	bl	8109ec8 <sbrk_aligned>
 8109f44:	1c43      	adds	r3, r0, #1
 8109f46:	4604      	mov	r4, r0
 8109f48:	d14d      	bne.n	8109fe6 <_malloc_r+0xde>
 8109f4a:	6834      	ldr	r4, [r6, #0]
 8109f4c:	4626      	mov	r6, r4
 8109f4e:	2e00      	cmp	r6, #0
 8109f50:	d140      	bne.n	8109fd4 <_malloc_r+0xcc>
 8109f52:	6823      	ldr	r3, [r4, #0]
 8109f54:	4631      	mov	r1, r6
 8109f56:	4638      	mov	r0, r7
 8109f58:	eb04 0803 	add.w	r8, r4, r3
 8109f5c:	f000 f878 	bl	810a050 <_sbrk_r>
 8109f60:	4580      	cmp	r8, r0
 8109f62:	d13a      	bne.n	8109fda <_malloc_r+0xd2>
 8109f64:	6821      	ldr	r1, [r4, #0]
 8109f66:	3503      	adds	r5, #3
 8109f68:	1a6d      	subs	r5, r5, r1
 8109f6a:	f025 0503 	bic.w	r5, r5, #3
 8109f6e:	3508      	adds	r5, #8
 8109f70:	2d0c      	cmp	r5, #12
 8109f72:	bf38      	it	cc
 8109f74:	250c      	movcc	r5, #12
 8109f76:	4629      	mov	r1, r5
 8109f78:	4638      	mov	r0, r7
 8109f7a:	f7ff ffa5 	bl	8109ec8 <sbrk_aligned>
 8109f7e:	3001      	adds	r0, #1
 8109f80:	d02b      	beq.n	8109fda <_malloc_r+0xd2>
 8109f82:	6823      	ldr	r3, [r4, #0]
 8109f84:	442b      	add	r3, r5
 8109f86:	6023      	str	r3, [r4, #0]
 8109f88:	e00e      	b.n	8109fa8 <_malloc_r+0xa0>
 8109f8a:	6822      	ldr	r2, [r4, #0]
 8109f8c:	1b52      	subs	r2, r2, r5
 8109f8e:	d41e      	bmi.n	8109fce <_malloc_r+0xc6>
 8109f90:	2a0b      	cmp	r2, #11
 8109f92:	d916      	bls.n	8109fc2 <_malloc_r+0xba>
 8109f94:	1961      	adds	r1, r4, r5
 8109f96:	42a3      	cmp	r3, r4
 8109f98:	6025      	str	r5, [r4, #0]
 8109f9a:	bf18      	it	ne
 8109f9c:	6059      	strne	r1, [r3, #4]
 8109f9e:	6863      	ldr	r3, [r4, #4]
 8109fa0:	bf08      	it	eq
 8109fa2:	6031      	streq	r1, [r6, #0]
 8109fa4:	5162      	str	r2, [r4, r5]
 8109fa6:	604b      	str	r3, [r1, #4]
 8109fa8:	4638      	mov	r0, r7
 8109faa:	f104 060b 	add.w	r6, r4, #11
 8109fae:	f000 f865 	bl	810a07c <__malloc_unlock>
 8109fb2:	f026 0607 	bic.w	r6, r6, #7
 8109fb6:	1d23      	adds	r3, r4, #4
 8109fb8:	1af2      	subs	r2, r6, r3
 8109fba:	d0b6      	beq.n	8109f2a <_malloc_r+0x22>
 8109fbc:	1b9b      	subs	r3, r3, r6
 8109fbe:	50a3      	str	r3, [r4, r2]
 8109fc0:	e7b3      	b.n	8109f2a <_malloc_r+0x22>
 8109fc2:	6862      	ldr	r2, [r4, #4]
 8109fc4:	42a3      	cmp	r3, r4
 8109fc6:	bf0c      	ite	eq
 8109fc8:	6032      	streq	r2, [r6, #0]
 8109fca:	605a      	strne	r2, [r3, #4]
 8109fcc:	e7ec      	b.n	8109fa8 <_malloc_r+0xa0>
 8109fce:	4623      	mov	r3, r4
 8109fd0:	6864      	ldr	r4, [r4, #4]
 8109fd2:	e7b2      	b.n	8109f3a <_malloc_r+0x32>
 8109fd4:	4634      	mov	r4, r6
 8109fd6:	6876      	ldr	r6, [r6, #4]
 8109fd8:	e7b9      	b.n	8109f4e <_malloc_r+0x46>
 8109fda:	230c      	movs	r3, #12
 8109fdc:	603b      	str	r3, [r7, #0]
 8109fde:	4638      	mov	r0, r7
 8109fe0:	f000 f84c 	bl	810a07c <__malloc_unlock>
 8109fe4:	e7a1      	b.n	8109f2a <_malloc_r+0x22>
 8109fe6:	6025      	str	r5, [r4, #0]
 8109fe8:	e7de      	b.n	8109fa8 <_malloc_r+0xa0>
 8109fea:	bf00      	nop
 8109fec:	100003f8 	.word	0x100003f8

08109ff0 <_realloc_r>:
 8109ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109ff4:	4680      	mov	r8, r0
 8109ff6:	4614      	mov	r4, r2
 8109ff8:	460e      	mov	r6, r1
 8109ffa:	b921      	cbnz	r1, 810a006 <_realloc_r+0x16>
 8109ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a000:	4611      	mov	r1, r2
 810a002:	f7ff bf81 	b.w	8109f08 <_malloc_r>
 810a006:	b92a      	cbnz	r2, 810a014 <_realloc_r+0x24>
 810a008:	f7ff ff12 	bl	8109e30 <_free_r>
 810a00c:	4625      	mov	r5, r4
 810a00e:	4628      	mov	r0, r5
 810a010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a014:	f000 f838 	bl	810a088 <_malloc_usable_size_r>
 810a018:	4284      	cmp	r4, r0
 810a01a:	4607      	mov	r7, r0
 810a01c:	d802      	bhi.n	810a024 <_realloc_r+0x34>
 810a01e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810a022:	d812      	bhi.n	810a04a <_realloc_r+0x5a>
 810a024:	4621      	mov	r1, r4
 810a026:	4640      	mov	r0, r8
 810a028:	f7ff ff6e 	bl	8109f08 <_malloc_r>
 810a02c:	4605      	mov	r5, r0
 810a02e:	2800      	cmp	r0, #0
 810a030:	d0ed      	beq.n	810a00e <_realloc_r+0x1e>
 810a032:	42bc      	cmp	r4, r7
 810a034:	4622      	mov	r2, r4
 810a036:	4631      	mov	r1, r6
 810a038:	bf28      	it	cs
 810a03a:	463a      	movcs	r2, r7
 810a03c:	f7ff fed0 	bl	8109de0 <memcpy>
 810a040:	4631      	mov	r1, r6
 810a042:	4640      	mov	r0, r8
 810a044:	f7ff fef4 	bl	8109e30 <_free_r>
 810a048:	e7e1      	b.n	810a00e <_realloc_r+0x1e>
 810a04a:	4635      	mov	r5, r6
 810a04c:	e7df      	b.n	810a00e <_realloc_r+0x1e>
	...

0810a050 <_sbrk_r>:
 810a050:	b538      	push	{r3, r4, r5, lr}
 810a052:	4d06      	ldr	r5, [pc, #24]	; (810a06c <_sbrk_r+0x1c>)
 810a054:	2300      	movs	r3, #0
 810a056:	4604      	mov	r4, r0
 810a058:	4608      	mov	r0, r1
 810a05a:	602b      	str	r3, [r5, #0]
 810a05c:	f000 f842 	bl	810a0e4 <_sbrk>
 810a060:	1c43      	adds	r3, r0, #1
 810a062:	d102      	bne.n	810a06a <_sbrk_r+0x1a>
 810a064:	682b      	ldr	r3, [r5, #0]
 810a066:	b103      	cbz	r3, 810a06a <_sbrk_r+0x1a>
 810a068:	6023      	str	r3, [r4, #0]
 810a06a:	bd38      	pop	{r3, r4, r5, pc}
 810a06c:	10000400 	.word	0x10000400

0810a070 <__malloc_lock>:
 810a070:	4801      	ldr	r0, [pc, #4]	; (810a078 <__malloc_lock+0x8>)
 810a072:	f000 b811 	b.w	810a098 <__retarget_lock_acquire_recursive>
 810a076:	bf00      	nop
 810a078:	10000404 	.word	0x10000404

0810a07c <__malloc_unlock>:
 810a07c:	4801      	ldr	r0, [pc, #4]	; (810a084 <__malloc_unlock+0x8>)
 810a07e:	f000 b80c 	b.w	810a09a <__retarget_lock_release_recursive>
 810a082:	bf00      	nop
 810a084:	10000404 	.word	0x10000404

0810a088 <_malloc_usable_size_r>:
 810a088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810a08c:	1f18      	subs	r0, r3, #4
 810a08e:	2b00      	cmp	r3, #0
 810a090:	bfbc      	itt	lt
 810a092:	580b      	ldrlt	r3, [r1, r0]
 810a094:	18c0      	addlt	r0, r0, r3
 810a096:	4770      	bx	lr

0810a098 <__retarget_lock_acquire_recursive>:
 810a098:	4770      	bx	lr

0810a09a <__retarget_lock_release_recursive>:
 810a09a:	4770      	bx	lr

0810a09c <roundf>:
 810a09c:	ee10 0a10 	vmov	r0, s0
 810a0a0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 810a0a4:	3a7f      	subs	r2, #127	; 0x7f
 810a0a6:	2a16      	cmp	r2, #22
 810a0a8:	dc15      	bgt.n	810a0d6 <roundf+0x3a>
 810a0aa:	2a00      	cmp	r2, #0
 810a0ac:	da08      	bge.n	810a0c0 <roundf+0x24>
 810a0ae:	3201      	adds	r2, #1
 810a0b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 810a0b4:	d101      	bne.n	810a0ba <roundf+0x1e>
 810a0b6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 810a0ba:	ee00 3a10 	vmov	s0, r3
 810a0be:	4770      	bx	lr
 810a0c0:	4907      	ldr	r1, [pc, #28]	; (810a0e0 <roundf+0x44>)
 810a0c2:	4111      	asrs	r1, r2
 810a0c4:	4208      	tst	r0, r1
 810a0c6:	d0fa      	beq.n	810a0be <roundf+0x22>
 810a0c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 810a0cc:	4113      	asrs	r3, r2
 810a0ce:	4403      	add	r3, r0
 810a0d0:	ea23 0301 	bic.w	r3, r3, r1
 810a0d4:	e7f1      	b.n	810a0ba <roundf+0x1e>
 810a0d6:	2a80      	cmp	r2, #128	; 0x80
 810a0d8:	d1f1      	bne.n	810a0be <roundf+0x22>
 810a0da:	ee30 0a00 	vadd.f32	s0, s0, s0
 810a0de:	4770      	bx	lr
 810a0e0:	007fffff 	.word	0x007fffff

0810a0e4 <_sbrk>:
 810a0e4:	4a04      	ldr	r2, [pc, #16]	; (810a0f8 <_sbrk+0x14>)
 810a0e6:	6811      	ldr	r1, [r2, #0]
 810a0e8:	4603      	mov	r3, r0
 810a0ea:	b909      	cbnz	r1, 810a0f0 <_sbrk+0xc>
 810a0ec:	4903      	ldr	r1, [pc, #12]	; (810a0fc <_sbrk+0x18>)
 810a0ee:	6011      	str	r1, [r2, #0]
 810a0f0:	6810      	ldr	r0, [r2, #0]
 810a0f2:	4403      	add	r3, r0
 810a0f4:	6013      	str	r3, [r2, #0]
 810a0f6:	4770      	bx	lr
 810a0f8:	10000408 	.word	0x10000408
 810a0fc:	10000410 	.word	0x10000410

0810a100 <_init>:
 810a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a102:	bf00      	nop
 810a104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a106:	bc08      	pop	{r3}
 810a108:	469e      	mov	lr, r3
 810a10a:	4770      	bx	lr

0810a10c <_fini>:
 810a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a10e:	bf00      	nop
 810a110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a112:	bc08      	pop	{r3}
 810a114:	469e      	mov	lr, r3
 810a116:	4770      	bx	lr
