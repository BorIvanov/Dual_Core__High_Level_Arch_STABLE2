
Dual_Core__High_Level_Arch_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa3c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0810acdc  0810acdc  0001acdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810b068  0810b068  0001b068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810b070  0810b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810b074  0810b074  0001b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  10000000  0810b078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a0  10000080  0810b0f4  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  10000420  0810b0f4  00020420  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002481b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000461f  00000000  00000000  000448c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b88  00000000  00000000  00048ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019b0  00000000  00000000  0004aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041014  00000000  00000000  0004c420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026f5d  00000000  00000000  0008d434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a27d9  00000000  00000000  000b4391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00256b6a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007850  00000000  00000000  00256bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000080 	.word	0x10000080
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810acc4 	.word	0x0810acc4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000084 	.word	0x10000084
 81002dc:	0810acc4 	.word	0x0810acc4

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_drsub>:
 8100380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100384:	e002      	b.n	810038c <__adddf3>
 8100386:	bf00      	nop

08100388 <__aeabi_dsub>:
 8100388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810038c <__adddf3>:
 810038c:	b530      	push	{r4, r5, lr}
 810038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8100392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8100396:	ea94 0f05 	teq	r4, r5
 810039a:	bf08      	it	eq
 810039c:	ea90 0f02 	teqeq	r0, r2
 81003a0:	bf1f      	itttt	ne
 81003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003b2:	f000 80e2 	beq.w	810057a <__adddf3+0x1ee>
 81003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003be:	bfb8      	it	lt
 81003c0:	426d      	neglt	r5, r5
 81003c2:	dd0c      	ble.n	81003de <__adddf3+0x52>
 81003c4:	442c      	add	r4, r5
 81003c6:	ea80 0202 	eor.w	r2, r0, r2
 81003ca:	ea81 0303 	eor.w	r3, r1, r3
 81003ce:	ea82 0000 	eor.w	r0, r2, r0
 81003d2:	ea83 0101 	eor.w	r1, r3, r1
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	2d36      	cmp	r5, #54	; 0x36
 81003e0:	bf88      	it	hi
 81003e2:	bd30      	pophi	{r4, r5, pc}
 81003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 81003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 81003f4:	d002      	beq.n	81003fc <__adddf3+0x70>
 81003f6:	4240      	negs	r0, r0
 81003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100408:	d002      	beq.n	8100410 <__adddf3+0x84>
 810040a:	4252      	negs	r2, r2
 810040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100410:	ea94 0f05 	teq	r4, r5
 8100414:	f000 80a7 	beq.w	8100566 <__adddf3+0x1da>
 8100418:	f1a4 0401 	sub.w	r4, r4, #1
 810041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100420:	db0d      	blt.n	810043e <__adddf3+0xb2>
 8100422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100426:	fa22 f205 	lsr.w	r2, r2, r5
 810042a:	1880      	adds	r0, r0, r2
 810042c:	f141 0100 	adc.w	r1, r1, #0
 8100430:	fa03 f20e 	lsl.w	r2, r3, lr
 8100434:	1880      	adds	r0, r0, r2
 8100436:	fa43 f305 	asr.w	r3, r3, r5
 810043a:	4159      	adcs	r1, r3
 810043c:	e00e      	b.n	810045c <__adddf3+0xd0>
 810043e:	f1a5 0520 	sub.w	r5, r5, #32
 8100442:	f10e 0e20 	add.w	lr, lr, #32
 8100446:	2a01      	cmp	r2, #1
 8100448:	fa03 fc0e 	lsl.w	ip, r3, lr
 810044c:	bf28      	it	cs
 810044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100452:	fa43 f305 	asr.w	r3, r3, r5
 8100456:	18c0      	adds	r0, r0, r3
 8100458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100460:	d507      	bpl.n	8100472 <__adddf3+0xe6>
 8100462:	f04f 0e00 	mov.w	lr, #0
 8100466:	f1dc 0c00 	rsbs	ip, ip, #0
 810046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100476:	d31b      	bcc.n	81004b0 <__adddf3+0x124>
 8100478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810047c:	d30c      	bcc.n	8100498 <__adddf3+0x10c>
 810047e:	0849      	lsrs	r1, r1, #1
 8100480:	ea5f 0030 	movs.w	r0, r0, rrx
 8100484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100488:	f104 0401 	add.w	r4, r4, #1
 810048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8100490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8100494:	f080 809a 	bcs.w	81005cc <__adddf3+0x240>
 8100498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 810049c:	bf08      	it	eq
 810049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004a2:	f150 0000 	adcs.w	r0, r0, #0
 81004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004aa:	ea41 0105 	orr.w	r1, r1, r5
 81004ae:	bd30      	pop	{r4, r5, pc}
 81004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004b4:	4140      	adcs	r0, r0
 81004b6:	eb41 0101 	adc.w	r1, r1, r1
 81004ba:	3c01      	subs	r4, #1
 81004bc:	bf28      	it	cs
 81004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004c2:	d2e9      	bcs.n	8100498 <__adddf3+0x10c>
 81004c4:	f091 0f00 	teq	r1, #0
 81004c8:	bf04      	itt	eq
 81004ca:	4601      	moveq	r1, r0
 81004cc:	2000      	moveq	r0, #0
 81004ce:	fab1 f381 	clz	r3, r1
 81004d2:	bf08      	it	eq
 81004d4:	3320      	addeq	r3, #32
 81004d6:	f1a3 030b 	sub.w	r3, r3, #11
 81004da:	f1b3 0220 	subs.w	r2, r3, #32
 81004de:	da0c      	bge.n	81004fa <__adddf3+0x16e>
 81004e0:	320c      	adds	r2, #12
 81004e2:	dd08      	ble.n	81004f6 <__adddf3+0x16a>
 81004e4:	f102 0c14 	add.w	ip, r2, #20
 81004e8:	f1c2 020c 	rsb	r2, r2, #12
 81004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 81004f0:	fa21 f102 	lsr.w	r1, r1, r2
 81004f4:	e00c      	b.n	8100510 <__adddf3+0x184>
 81004f6:	f102 0214 	add.w	r2, r2, #20
 81004fa:	bfd8      	it	le
 81004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8100500:	fa01 f102 	lsl.w	r1, r1, r2
 8100504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100508:	bfdc      	itt	le
 810050a:	ea41 010c 	orrle.w	r1, r1, ip
 810050e:	4090      	lslle	r0, r2
 8100510:	1ae4      	subs	r4, r4, r3
 8100512:	bfa2      	ittt	ge
 8100514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100518:	4329      	orrge	r1, r5
 810051a:	bd30      	popge	{r4, r5, pc}
 810051c:	ea6f 0404 	mvn.w	r4, r4
 8100520:	3c1f      	subs	r4, #31
 8100522:	da1c      	bge.n	810055e <__adddf3+0x1d2>
 8100524:	340c      	adds	r4, #12
 8100526:	dc0e      	bgt.n	8100546 <__adddf3+0x1ba>
 8100528:	f104 0414 	add.w	r4, r4, #20
 810052c:	f1c4 0220 	rsb	r2, r4, #32
 8100530:	fa20 f004 	lsr.w	r0, r0, r4
 8100534:	fa01 f302 	lsl.w	r3, r1, r2
 8100538:	ea40 0003 	orr.w	r0, r0, r3
 810053c:	fa21 f304 	lsr.w	r3, r1, r4
 8100540:	ea45 0103 	orr.w	r1, r5, r3
 8100544:	bd30      	pop	{r4, r5, pc}
 8100546:	f1c4 040c 	rsb	r4, r4, #12
 810054a:	f1c4 0220 	rsb	r2, r4, #32
 810054e:	fa20 f002 	lsr.w	r0, r0, r2
 8100552:	fa01 f304 	lsl.w	r3, r1, r4
 8100556:	ea40 0003 	orr.w	r0, r0, r3
 810055a:	4629      	mov	r1, r5
 810055c:	bd30      	pop	{r4, r5, pc}
 810055e:	fa21 f004 	lsr.w	r0, r1, r4
 8100562:	4629      	mov	r1, r5
 8100564:	bd30      	pop	{r4, r5, pc}
 8100566:	f094 0f00 	teq	r4, #0
 810056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810056e:	bf06      	itte	eq
 8100570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100574:	3401      	addeq	r4, #1
 8100576:	3d01      	subne	r5, #1
 8100578:	e74e      	b.n	8100418 <__adddf3+0x8c>
 810057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810057e:	bf18      	it	ne
 8100580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100584:	d029      	beq.n	81005da <__adddf3+0x24e>
 8100586:	ea94 0f05 	teq	r4, r5
 810058a:	bf08      	it	eq
 810058c:	ea90 0f02 	teqeq	r0, r2
 8100590:	d005      	beq.n	810059e <__adddf3+0x212>
 8100592:	ea54 0c00 	orrs.w	ip, r4, r0
 8100596:	bf04      	itt	eq
 8100598:	4619      	moveq	r1, r3
 810059a:	4610      	moveq	r0, r2
 810059c:	bd30      	pop	{r4, r5, pc}
 810059e:	ea91 0f03 	teq	r1, r3
 81005a2:	bf1e      	ittt	ne
 81005a4:	2100      	movne	r1, #0
 81005a6:	2000      	movne	r0, #0
 81005a8:	bd30      	popne	{r4, r5, pc}
 81005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005ae:	d105      	bne.n	81005bc <__adddf3+0x230>
 81005b0:	0040      	lsls	r0, r0, #1
 81005b2:	4149      	adcs	r1, r1
 81005b4:	bf28      	it	cs
 81005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ba:	bd30      	pop	{r4, r5, pc}
 81005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005c0:	bf3c      	itt	cc
 81005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005c6:	bd30      	popcc	{r4, r5, pc}
 81005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005d4:	f04f 0000 	mov.w	r0, #0
 81005d8:	bd30      	pop	{r4, r5, pc}
 81005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005de:	bf1a      	itte	ne
 81005e0:	4619      	movne	r1, r3
 81005e2:	4610      	movne	r0, r2
 81005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005e8:	bf1c      	itt	ne
 81005ea:	460b      	movne	r3, r1
 81005ec:	4602      	movne	r2, r0
 81005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 81005f2:	bf06      	itte	eq
 81005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 81005f8:	ea91 0f03 	teqeq	r1, r3
 81005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100600:	bd30      	pop	{r4, r5, pc}
 8100602:	bf00      	nop

08100604 <__aeabi_ui2d>:
 8100604:	f090 0f00 	teq	r0, #0
 8100608:	bf04      	itt	eq
 810060a:	2100      	moveq	r1, #0
 810060c:	4770      	bxeq	lr
 810060e:	b530      	push	{r4, r5, lr}
 8100610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100618:	f04f 0500 	mov.w	r5, #0
 810061c:	f04f 0100 	mov.w	r1, #0
 8100620:	e750      	b.n	81004c4 <__adddf3+0x138>
 8100622:	bf00      	nop

08100624 <__aeabi_i2d>:
 8100624:	f090 0f00 	teq	r0, #0
 8100628:	bf04      	itt	eq
 810062a:	2100      	moveq	r1, #0
 810062c:	4770      	bxeq	lr
 810062e:	b530      	push	{r4, r5, lr}
 8100630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810063c:	bf48      	it	mi
 810063e:	4240      	negmi	r0, r0
 8100640:	f04f 0100 	mov.w	r1, #0
 8100644:	e73e      	b.n	81004c4 <__adddf3+0x138>
 8100646:	bf00      	nop

08100648 <__aeabi_f2d>:
 8100648:	0042      	lsls	r2, r0, #1
 810064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100656:	bf1f      	itttt	ne
 8100658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100664:	4770      	bxne	lr
 8100666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810066a:	bf08      	it	eq
 810066c:	4770      	bxeq	lr
 810066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100672:	bf04      	itt	eq
 8100674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100678:	4770      	bxeq	lr
 810067a:	b530      	push	{r4, r5, lr}
 810067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100688:	e71c      	b.n	81004c4 <__adddf3+0x138>
 810068a:	bf00      	nop

0810068c <__aeabi_ul2d>:
 810068c:	ea50 0201 	orrs.w	r2, r0, r1
 8100690:	bf08      	it	eq
 8100692:	4770      	bxeq	lr
 8100694:	b530      	push	{r4, r5, lr}
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	e00a      	b.n	81006b2 <__aeabi_l2d+0x16>

0810069c <__aeabi_l2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006aa:	d502      	bpl.n	81006b2 <__aeabi_l2d+0x16>
 81006ac:	4240      	negs	r0, r0
 81006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006be:	f43f aed8 	beq.w	8100472 <__adddf3+0xe6>
 81006c2:	f04f 0203 	mov.w	r2, #3
 81006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006ca:	bf18      	it	ne
 81006cc:	3203      	addne	r2, #3
 81006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006d2:	bf18      	it	ne
 81006d4:	3203      	addne	r2, #3
 81006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006da:	f1c2 0320 	rsb	r3, r2, #32
 81006de:	fa00 fc03 	lsl.w	ip, r0, r3
 81006e2:	fa20 f002 	lsr.w	r0, r0, r2
 81006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006ea:	ea40 000e 	orr.w	r0, r0, lr
 81006ee:	fa21 f102 	lsr.w	r1, r1, r2
 81006f2:	4414      	add	r4, r2
 81006f4:	e6bd      	b.n	8100472 <__adddf3+0xe6>
 81006f6:	bf00      	nop

081006f8 <__gedf2>:
 81006f8:	f04f 3cff 	mov.w	ip, #4294967295
 81006fc:	e006      	b.n	810070c <__cmpdf2+0x4>
 81006fe:	bf00      	nop

08100700 <__ledf2>:
 8100700:	f04f 0c01 	mov.w	ip, #1
 8100704:	e002      	b.n	810070c <__cmpdf2+0x4>
 8100706:	bf00      	nop

08100708 <__cmpdf2>:
 8100708:	f04f 0c01 	mov.w	ip, #1
 810070c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100710:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100714:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100718:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 810071c:	bf18      	it	ne
 810071e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100722:	d01b      	beq.n	810075c <__cmpdf2+0x54>
 8100724:	b001      	add	sp, #4
 8100726:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 810072a:	bf0c      	ite	eq
 810072c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100730:	ea91 0f03 	teqne	r1, r3
 8100734:	bf02      	ittt	eq
 8100736:	ea90 0f02 	teqeq	r0, r2
 810073a:	2000      	moveq	r0, #0
 810073c:	4770      	bxeq	lr
 810073e:	f110 0f00 	cmn.w	r0, #0
 8100742:	ea91 0f03 	teq	r1, r3
 8100746:	bf58      	it	pl
 8100748:	4299      	cmppl	r1, r3
 810074a:	bf08      	it	eq
 810074c:	4290      	cmpeq	r0, r2
 810074e:	bf2c      	ite	cs
 8100750:	17d8      	asrcs	r0, r3, #31
 8100752:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100756:	f040 0001 	orr.w	r0, r0, #1
 810075a:	4770      	bx	lr
 810075c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100764:	d102      	bne.n	810076c <__cmpdf2+0x64>
 8100766:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 810076a:	d107      	bne.n	810077c <__cmpdf2+0x74>
 810076c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100770:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100774:	d1d6      	bne.n	8100724 <__cmpdf2+0x1c>
 8100776:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 810077a:	d0d3      	beq.n	8100724 <__cmpdf2+0x1c>
 810077c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100780:	4770      	bx	lr
 8100782:	bf00      	nop

08100784 <__aeabi_cdrcmple>:
 8100784:	4684      	mov	ip, r0
 8100786:	4610      	mov	r0, r2
 8100788:	4662      	mov	r2, ip
 810078a:	468c      	mov	ip, r1
 810078c:	4619      	mov	r1, r3
 810078e:	4663      	mov	r3, ip
 8100790:	e000      	b.n	8100794 <__aeabi_cdcmpeq>
 8100792:	bf00      	nop

08100794 <__aeabi_cdcmpeq>:
 8100794:	b501      	push	{r0, lr}
 8100796:	f7ff ffb7 	bl	8100708 <__cmpdf2>
 810079a:	2800      	cmp	r0, #0
 810079c:	bf48      	it	mi
 810079e:	f110 0f00 	cmnmi.w	r0, #0
 81007a2:	bd01      	pop	{r0, pc}

081007a4 <__aeabi_dcmpeq>:
 81007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007a8:	f7ff fff4 	bl	8100794 <__aeabi_cdcmpeq>
 81007ac:	bf0c      	ite	eq
 81007ae:	2001      	moveq	r0, #1
 81007b0:	2000      	movne	r0, #0
 81007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 81007b6:	bf00      	nop

081007b8 <__aeabi_dcmplt>:
 81007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007bc:	f7ff ffea 	bl	8100794 <__aeabi_cdcmpeq>
 81007c0:	bf34      	ite	cc
 81007c2:	2001      	movcc	r0, #1
 81007c4:	2000      	movcs	r0, #0
 81007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 81007ca:	bf00      	nop

081007cc <__aeabi_dcmple>:
 81007cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007d0:	f7ff ffe0 	bl	8100794 <__aeabi_cdcmpeq>
 81007d4:	bf94      	ite	ls
 81007d6:	2001      	movls	r0, #1
 81007d8:	2000      	movhi	r0, #0
 81007da:	f85d fb08 	ldr.w	pc, [sp], #8
 81007de:	bf00      	nop

081007e0 <__aeabi_dcmpge>:
 81007e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007e4:	f7ff ffce 	bl	8100784 <__aeabi_cdrcmple>
 81007e8:	bf94      	ite	ls
 81007ea:	2001      	movls	r0, #1
 81007ec:	2000      	movhi	r0, #0
 81007ee:	f85d fb08 	ldr.w	pc, [sp], #8
 81007f2:	bf00      	nop

081007f4 <__aeabi_dcmpgt>:
 81007f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007f8:	f7ff ffc4 	bl	8100784 <__aeabi_cdrcmple>
 81007fc:	bf34      	ite	cc
 81007fe:	2001      	movcc	r0, #1
 8100800:	2000      	movcs	r0, #0
 8100802:	f85d fb08 	ldr.w	pc, [sp], #8
 8100806:	bf00      	nop

08100808 <__aeabi_d2iz>:
 8100808:	ea4f 0241 	mov.w	r2, r1, lsl #1
 810080c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100810:	d215      	bcs.n	810083e <__aeabi_d2iz+0x36>
 8100812:	d511      	bpl.n	8100838 <__aeabi_d2iz+0x30>
 8100814:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100818:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 810081c:	d912      	bls.n	8100844 <__aeabi_d2iz+0x3c>
 810081e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100822:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100826:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 810082a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 810082e:	fa23 f002 	lsr.w	r0, r3, r2
 8100832:	bf18      	it	ne
 8100834:	4240      	negne	r0, r0
 8100836:	4770      	bx	lr
 8100838:	f04f 0000 	mov.w	r0, #0
 810083c:	4770      	bx	lr
 810083e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100842:	d105      	bne.n	8100850 <__aeabi_d2iz+0x48>
 8100844:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100848:	bf08      	it	eq
 810084a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 810084e:	4770      	bx	lr
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	4770      	bx	lr
 8100856:	bf00      	nop

08100858 <__aeabi_uldivmod>:
 8100858:	b953      	cbnz	r3, 8100870 <__aeabi_uldivmod+0x18>
 810085a:	b94a      	cbnz	r2, 8100870 <__aeabi_uldivmod+0x18>
 810085c:	2900      	cmp	r1, #0
 810085e:	bf08      	it	eq
 8100860:	2800      	cmpeq	r0, #0
 8100862:	bf1c      	itt	ne
 8100864:	f04f 31ff 	movne.w	r1, #4294967295
 8100868:	f04f 30ff 	movne.w	r0, #4294967295
 810086c:	f000 b974 	b.w	8100b58 <__aeabi_idiv0>
 8100870:	f1ad 0c08 	sub.w	ip, sp, #8
 8100874:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100878:	f000 f806 	bl	8100888 <__udivmoddi4>
 810087c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100884:	b004      	add	sp, #16
 8100886:	4770      	bx	lr

08100888 <__udivmoddi4>:
 8100888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810088c:	9d08      	ldr	r5, [sp, #32]
 810088e:	4604      	mov	r4, r0
 8100890:	468e      	mov	lr, r1
 8100892:	2b00      	cmp	r3, #0
 8100894:	d14d      	bne.n	8100932 <__udivmoddi4+0xaa>
 8100896:	428a      	cmp	r2, r1
 8100898:	4694      	mov	ip, r2
 810089a:	d969      	bls.n	8100970 <__udivmoddi4+0xe8>
 810089c:	fab2 f282 	clz	r2, r2
 81008a0:	b152      	cbz	r2, 81008b8 <__udivmoddi4+0x30>
 81008a2:	fa01 f302 	lsl.w	r3, r1, r2
 81008a6:	f1c2 0120 	rsb	r1, r2, #32
 81008aa:	fa20 f101 	lsr.w	r1, r0, r1
 81008ae:	fa0c fc02 	lsl.w	ip, ip, r2
 81008b2:	ea41 0e03 	orr.w	lr, r1, r3
 81008b6:	4094      	lsls	r4, r2
 81008b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81008bc:	0c21      	lsrs	r1, r4, #16
 81008be:	fbbe f6f8 	udiv	r6, lr, r8
 81008c2:	fa1f f78c 	uxth.w	r7, ip
 81008c6:	fb08 e316 	mls	r3, r8, r6, lr
 81008ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 81008ce:	fb06 f107 	mul.w	r1, r6, r7
 81008d2:	4299      	cmp	r1, r3
 81008d4:	d90a      	bls.n	81008ec <__udivmoddi4+0x64>
 81008d6:	eb1c 0303 	adds.w	r3, ip, r3
 81008da:	f106 30ff 	add.w	r0, r6, #4294967295
 81008de:	f080 811f 	bcs.w	8100b20 <__udivmoddi4+0x298>
 81008e2:	4299      	cmp	r1, r3
 81008e4:	f240 811c 	bls.w	8100b20 <__udivmoddi4+0x298>
 81008e8:	3e02      	subs	r6, #2
 81008ea:	4463      	add	r3, ip
 81008ec:	1a5b      	subs	r3, r3, r1
 81008ee:	b2a4      	uxth	r4, r4
 81008f0:	fbb3 f0f8 	udiv	r0, r3, r8
 81008f4:	fb08 3310 	mls	r3, r8, r0, r3
 81008f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 81008fc:	fb00 f707 	mul.w	r7, r0, r7
 8100900:	42a7      	cmp	r7, r4
 8100902:	d90a      	bls.n	810091a <__udivmoddi4+0x92>
 8100904:	eb1c 0404 	adds.w	r4, ip, r4
 8100908:	f100 33ff 	add.w	r3, r0, #4294967295
 810090c:	f080 810a 	bcs.w	8100b24 <__udivmoddi4+0x29c>
 8100910:	42a7      	cmp	r7, r4
 8100912:	f240 8107 	bls.w	8100b24 <__udivmoddi4+0x29c>
 8100916:	4464      	add	r4, ip
 8100918:	3802      	subs	r0, #2
 810091a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810091e:	1be4      	subs	r4, r4, r7
 8100920:	2600      	movs	r6, #0
 8100922:	b11d      	cbz	r5, 810092c <__udivmoddi4+0xa4>
 8100924:	40d4      	lsrs	r4, r2
 8100926:	2300      	movs	r3, #0
 8100928:	e9c5 4300 	strd	r4, r3, [r5]
 810092c:	4631      	mov	r1, r6
 810092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100932:	428b      	cmp	r3, r1
 8100934:	d909      	bls.n	810094a <__udivmoddi4+0xc2>
 8100936:	2d00      	cmp	r5, #0
 8100938:	f000 80ef 	beq.w	8100b1a <__udivmoddi4+0x292>
 810093c:	2600      	movs	r6, #0
 810093e:	e9c5 0100 	strd	r0, r1, [r5]
 8100942:	4630      	mov	r0, r6
 8100944:	4631      	mov	r1, r6
 8100946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810094a:	fab3 f683 	clz	r6, r3
 810094e:	2e00      	cmp	r6, #0
 8100950:	d14a      	bne.n	81009e8 <__udivmoddi4+0x160>
 8100952:	428b      	cmp	r3, r1
 8100954:	d302      	bcc.n	810095c <__udivmoddi4+0xd4>
 8100956:	4282      	cmp	r2, r0
 8100958:	f200 80f9 	bhi.w	8100b4e <__udivmoddi4+0x2c6>
 810095c:	1a84      	subs	r4, r0, r2
 810095e:	eb61 0303 	sbc.w	r3, r1, r3
 8100962:	2001      	movs	r0, #1
 8100964:	469e      	mov	lr, r3
 8100966:	2d00      	cmp	r5, #0
 8100968:	d0e0      	beq.n	810092c <__udivmoddi4+0xa4>
 810096a:	e9c5 4e00 	strd	r4, lr, [r5]
 810096e:	e7dd      	b.n	810092c <__udivmoddi4+0xa4>
 8100970:	b902      	cbnz	r2, 8100974 <__udivmoddi4+0xec>
 8100972:	deff      	udf	#255	; 0xff
 8100974:	fab2 f282 	clz	r2, r2
 8100978:	2a00      	cmp	r2, #0
 810097a:	f040 8092 	bne.w	8100aa2 <__udivmoddi4+0x21a>
 810097e:	eba1 010c 	sub.w	r1, r1, ip
 8100982:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100986:	fa1f fe8c 	uxth.w	lr, ip
 810098a:	2601      	movs	r6, #1
 810098c:	0c20      	lsrs	r0, r4, #16
 810098e:	fbb1 f3f7 	udiv	r3, r1, r7
 8100992:	fb07 1113 	mls	r1, r7, r3, r1
 8100996:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810099a:	fb0e f003 	mul.w	r0, lr, r3
 810099e:	4288      	cmp	r0, r1
 81009a0:	d908      	bls.n	81009b4 <__udivmoddi4+0x12c>
 81009a2:	eb1c 0101 	adds.w	r1, ip, r1
 81009a6:	f103 38ff 	add.w	r8, r3, #4294967295
 81009aa:	d202      	bcs.n	81009b2 <__udivmoddi4+0x12a>
 81009ac:	4288      	cmp	r0, r1
 81009ae:	f200 80cb 	bhi.w	8100b48 <__udivmoddi4+0x2c0>
 81009b2:	4643      	mov	r3, r8
 81009b4:	1a09      	subs	r1, r1, r0
 81009b6:	b2a4      	uxth	r4, r4
 81009b8:	fbb1 f0f7 	udiv	r0, r1, r7
 81009bc:	fb07 1110 	mls	r1, r7, r0, r1
 81009c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 81009c4:	fb0e fe00 	mul.w	lr, lr, r0
 81009c8:	45a6      	cmp	lr, r4
 81009ca:	d908      	bls.n	81009de <__udivmoddi4+0x156>
 81009cc:	eb1c 0404 	adds.w	r4, ip, r4
 81009d0:	f100 31ff 	add.w	r1, r0, #4294967295
 81009d4:	d202      	bcs.n	81009dc <__udivmoddi4+0x154>
 81009d6:	45a6      	cmp	lr, r4
 81009d8:	f200 80bb 	bhi.w	8100b52 <__udivmoddi4+0x2ca>
 81009dc:	4608      	mov	r0, r1
 81009de:	eba4 040e 	sub.w	r4, r4, lr
 81009e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 81009e6:	e79c      	b.n	8100922 <__udivmoddi4+0x9a>
 81009e8:	f1c6 0720 	rsb	r7, r6, #32
 81009ec:	40b3      	lsls	r3, r6
 81009ee:	fa22 fc07 	lsr.w	ip, r2, r7
 81009f2:	ea4c 0c03 	orr.w	ip, ip, r3
 81009f6:	fa20 f407 	lsr.w	r4, r0, r7
 81009fa:	fa01 f306 	lsl.w	r3, r1, r6
 81009fe:	431c      	orrs	r4, r3
 8100a00:	40f9      	lsrs	r1, r7
 8100a02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100a06:	fa00 f306 	lsl.w	r3, r0, r6
 8100a0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8100a0e:	0c20      	lsrs	r0, r4, #16
 8100a10:	fa1f fe8c 	uxth.w	lr, ip
 8100a14:	fb09 1118 	mls	r1, r9, r8, r1
 8100a18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100a1c:	fb08 f00e 	mul.w	r0, r8, lr
 8100a20:	4288      	cmp	r0, r1
 8100a22:	fa02 f206 	lsl.w	r2, r2, r6
 8100a26:	d90b      	bls.n	8100a40 <__udivmoddi4+0x1b8>
 8100a28:	eb1c 0101 	adds.w	r1, ip, r1
 8100a2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8100a30:	f080 8088 	bcs.w	8100b44 <__udivmoddi4+0x2bc>
 8100a34:	4288      	cmp	r0, r1
 8100a36:	f240 8085 	bls.w	8100b44 <__udivmoddi4+0x2bc>
 8100a3a:	f1a8 0802 	sub.w	r8, r8, #2
 8100a3e:	4461      	add	r1, ip
 8100a40:	1a09      	subs	r1, r1, r0
 8100a42:	b2a4      	uxth	r4, r4
 8100a44:	fbb1 f0f9 	udiv	r0, r1, r9
 8100a48:	fb09 1110 	mls	r1, r9, r0, r1
 8100a4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100a50:	fb00 fe0e 	mul.w	lr, r0, lr
 8100a54:	458e      	cmp	lr, r1
 8100a56:	d908      	bls.n	8100a6a <__udivmoddi4+0x1e2>
 8100a58:	eb1c 0101 	adds.w	r1, ip, r1
 8100a5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8100a60:	d26c      	bcs.n	8100b3c <__udivmoddi4+0x2b4>
 8100a62:	458e      	cmp	lr, r1
 8100a64:	d96a      	bls.n	8100b3c <__udivmoddi4+0x2b4>
 8100a66:	3802      	subs	r0, #2
 8100a68:	4461      	add	r1, ip
 8100a6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8100a6e:	fba0 9402 	umull	r9, r4, r0, r2
 8100a72:	eba1 010e 	sub.w	r1, r1, lr
 8100a76:	42a1      	cmp	r1, r4
 8100a78:	46c8      	mov	r8, r9
 8100a7a:	46a6      	mov	lr, r4
 8100a7c:	d356      	bcc.n	8100b2c <__udivmoddi4+0x2a4>
 8100a7e:	d053      	beq.n	8100b28 <__udivmoddi4+0x2a0>
 8100a80:	b15d      	cbz	r5, 8100a9a <__udivmoddi4+0x212>
 8100a82:	ebb3 0208 	subs.w	r2, r3, r8
 8100a86:	eb61 010e 	sbc.w	r1, r1, lr
 8100a8a:	fa01 f707 	lsl.w	r7, r1, r7
 8100a8e:	fa22 f306 	lsr.w	r3, r2, r6
 8100a92:	40f1      	lsrs	r1, r6
 8100a94:	431f      	orrs	r7, r3
 8100a96:	e9c5 7100 	strd	r7, r1, [r5]
 8100a9a:	2600      	movs	r6, #0
 8100a9c:	4631      	mov	r1, r6
 8100a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100aa2:	f1c2 0320 	rsb	r3, r2, #32
 8100aa6:	40d8      	lsrs	r0, r3
 8100aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8100aac:	fa21 f303 	lsr.w	r3, r1, r3
 8100ab0:	4091      	lsls	r1, r2
 8100ab2:	4301      	orrs	r1, r0
 8100ab4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100ab8:	fa1f fe8c 	uxth.w	lr, ip
 8100abc:	fbb3 f0f7 	udiv	r0, r3, r7
 8100ac0:	fb07 3610 	mls	r6, r7, r0, r3
 8100ac4:	0c0b      	lsrs	r3, r1, #16
 8100ac6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100aca:	fb00 f60e 	mul.w	r6, r0, lr
 8100ace:	429e      	cmp	r6, r3
 8100ad0:	fa04 f402 	lsl.w	r4, r4, r2
 8100ad4:	d908      	bls.n	8100ae8 <__udivmoddi4+0x260>
 8100ad6:	eb1c 0303 	adds.w	r3, ip, r3
 8100ada:	f100 38ff 	add.w	r8, r0, #4294967295
 8100ade:	d22f      	bcs.n	8100b40 <__udivmoddi4+0x2b8>
 8100ae0:	429e      	cmp	r6, r3
 8100ae2:	d92d      	bls.n	8100b40 <__udivmoddi4+0x2b8>
 8100ae4:	3802      	subs	r0, #2
 8100ae6:	4463      	add	r3, ip
 8100ae8:	1b9b      	subs	r3, r3, r6
 8100aea:	b289      	uxth	r1, r1
 8100aec:	fbb3 f6f7 	udiv	r6, r3, r7
 8100af0:	fb07 3316 	mls	r3, r7, r6, r3
 8100af4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100af8:	fb06 f30e 	mul.w	r3, r6, lr
 8100afc:	428b      	cmp	r3, r1
 8100afe:	d908      	bls.n	8100b12 <__udivmoddi4+0x28a>
 8100b00:	eb1c 0101 	adds.w	r1, ip, r1
 8100b04:	f106 38ff 	add.w	r8, r6, #4294967295
 8100b08:	d216      	bcs.n	8100b38 <__udivmoddi4+0x2b0>
 8100b0a:	428b      	cmp	r3, r1
 8100b0c:	d914      	bls.n	8100b38 <__udivmoddi4+0x2b0>
 8100b0e:	3e02      	subs	r6, #2
 8100b10:	4461      	add	r1, ip
 8100b12:	1ac9      	subs	r1, r1, r3
 8100b14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100b18:	e738      	b.n	810098c <__udivmoddi4+0x104>
 8100b1a:	462e      	mov	r6, r5
 8100b1c:	4628      	mov	r0, r5
 8100b1e:	e705      	b.n	810092c <__udivmoddi4+0xa4>
 8100b20:	4606      	mov	r6, r0
 8100b22:	e6e3      	b.n	81008ec <__udivmoddi4+0x64>
 8100b24:	4618      	mov	r0, r3
 8100b26:	e6f8      	b.n	810091a <__udivmoddi4+0x92>
 8100b28:	454b      	cmp	r3, r9
 8100b2a:	d2a9      	bcs.n	8100a80 <__udivmoddi4+0x1f8>
 8100b2c:	ebb9 0802 	subs.w	r8, r9, r2
 8100b30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8100b34:	3801      	subs	r0, #1
 8100b36:	e7a3      	b.n	8100a80 <__udivmoddi4+0x1f8>
 8100b38:	4646      	mov	r6, r8
 8100b3a:	e7ea      	b.n	8100b12 <__udivmoddi4+0x28a>
 8100b3c:	4620      	mov	r0, r4
 8100b3e:	e794      	b.n	8100a6a <__udivmoddi4+0x1e2>
 8100b40:	4640      	mov	r0, r8
 8100b42:	e7d1      	b.n	8100ae8 <__udivmoddi4+0x260>
 8100b44:	46d0      	mov	r8, sl
 8100b46:	e77b      	b.n	8100a40 <__udivmoddi4+0x1b8>
 8100b48:	3b02      	subs	r3, #2
 8100b4a:	4461      	add	r1, ip
 8100b4c:	e732      	b.n	81009b4 <__udivmoddi4+0x12c>
 8100b4e:	4630      	mov	r0, r6
 8100b50:	e709      	b.n	8100966 <__udivmoddi4+0xde>
 8100b52:	4464      	add	r4, ip
 8100b54:	3802      	subs	r0, #2
 8100b56:	e742      	b.n	81009de <__udivmoddi4+0x156>

08100b58 <__aeabi_idiv0>:
 8100b58:	4770      	bx	lr
 8100b5a:	bf00      	nop

08100b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100b5c:	b480      	push	{r7}
 8100b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100b60:	4b09      	ldr	r3, [pc, #36]	; (8100b88 <SystemInit+0x2c>)
 8100b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100b66:	4a08      	ldr	r2, [pc, #32]	; (8100b88 <SystemInit+0x2c>)
 8100b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100b70:	4b05      	ldr	r3, [pc, #20]	; (8100b88 <SystemInit+0x2c>)
 8100b72:	691b      	ldr	r3, [r3, #16]
 8100b74:	4a04      	ldr	r2, [pc, #16]	; (8100b88 <SystemInit+0x2c>)
 8100b76:	f043 0310 	orr.w	r3, r3, #16
 8100b7a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100b7c:	bf00      	nop
 8100b7e:	46bd      	mov	sp, r7
 8100b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b84:	4770      	bx	lr
 8100b86:	bf00      	nop
 8100b88:	e000ed00 	.word	0xe000ed00

08100b8c <start_PWM>:
#include "level_2/init_CM4.h"


void start_PWM(void)
/* start_PWM: Function which initialises the PWM TIMERs 2,13,14. */
{
 8100b8c:	b580      	push	{r7, lr}
 8100b8e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8100b90:	2100      	movs	r1, #0
 8100b92:	4808      	ldr	r0, [pc, #32]	; (8100bb4 <start_PWM+0x28>)
 8100b94:	f007 f9c4 	bl	8107f20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8100b98:	2100      	movs	r1, #0
 8100b9a:	4807      	ldr	r0, [pc, #28]	; (8100bb8 <start_PWM+0x2c>)
 8100b9c:	f007 f9c0 	bl	8107f20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8100ba0:	2108      	movs	r1, #8
 8100ba2:	4806      	ldr	r0, [pc, #24]	; (8100bbc <start_PWM+0x30>)
 8100ba4:	f007 f9bc 	bl	8107f20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8100ba8:	210c      	movs	r1, #12
 8100baa:	4804      	ldr	r0, [pc, #16]	; (8100bbc <start_PWM+0x30>)
 8100bac:	f007 f9b8 	bl	8107f20 <HAL_TIM_PWM_Start>
}
 8100bb0:	bf00      	nop
 8100bb2:	bd80      	pop	{r7, pc}
 8100bb4:	100002e0 	.word	0x100002e0
 8100bb8:	1000032c 	.word	0x1000032c
 8100bbc:	100001b0 	.word	0x100001b0

08100bc0 <init_Movement>:

void init_Movement(void)
/* start_Movement: Function which initialises the motors and servos */
{
 8100bc0:	b580      	push	{r7, lr}
 8100bc2:	af00      	add	r7, sp, #0
	initMotors();
 8100bc4:	f000 fb4e 	bl	8101264 <initMotors>
	set_Enable_Power();
 8100bc8:	f001 fb86 	bl	81022d8 <set_Enable_Power>
	start_PWM();
 8100bcc:	f7ff ffde 	bl	8100b8c <start_PWM>
}
 8100bd0:	bf00      	nop
 8100bd2:	bd80      	pop	{r7, pc}

08100bd4 <init_MX_init>:

void init_MX_init(void)
/* start_MX_init: Function which initialises the STM32H peripherals */
{
 8100bd4:	b580      	push	{r7, lr}
 8100bd6:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8100bd8:	f001 f8ba 	bl	8101d50 <MX_ADC1_Init>
	MX_I2C1_Init();
 8100bdc:	f001 fbb6 	bl	810234c <MX_I2C1_Init>
	MX_TIM2_Init();
 8100be0:	f001 fcb0 	bl	8102544 <MX_TIM2_Init>
	MX_TIM3_Init();
 8100be4:	f001 fd12 	bl	810260c <MX_TIM3_Init>
	MX_TIM4_Init();
 8100be8:	f001 fd66 	bl	81026b8 <MX_TIM4_Init>
	MX_TIM7_Init();
 8100bec:	f001 fdba 	bl	8102764 <MX_TIM7_Init>
	MX_TIM13_Init();
 8100bf0:	f001 fdee 	bl	81027d0 <MX_TIM13_Init>
	MX_TIM14_Init();
 8100bf4:	f001 fe3a 	bl	810286c <MX_TIM14_Init>
}
 8100bf8:	bf00      	nop
 8100bfa:	bd80      	pop	{r7, pc}

08100bfc <init_Start_Up>:
void init_Start_Up(void)
/* init_Start_Up: Function to initialise the whole system and set inital values to PWMs
 *	The microcontroller peripherals. The Motors and Servos.
 *	Homes the servos.
 */
{
 8100bfc:	b580      	push	{r7, lr}
 8100bfe:	af00      	add	r7, sp, #0
	send_msg((uint8_t*)"\r!Initialising Micro-controller Signals!\n\r");
 8100c00:	481c      	ldr	r0, [pc, #112]	; (8100c74 <init_Start_Up+0x78>)
 8100c02:	f002 f975 	bl	8102ef0 <send_msg>
	init_MX_init();
 8100c06:	f7ff ffe5 	bl	8100bd4 <init_MX_init>
	HAL_Delay(50);
 8100c0a:	2032      	movs	r0, #50	; 0x32
 8100c0c:	f002 fa7c 	bl	8103108 <HAL_Delay>

	send_msg((uint8_t*)"\r!Initialising movement signals!\n\r");
 8100c10:	4819      	ldr	r0, [pc, #100]	; (8100c78 <init_Start_Up+0x7c>)
 8100c12:	f002 f96d 	bl	8102ef0 <send_msg>
	init_Movement();
 8100c16:	f7ff ffd3 	bl	8100bc0 <init_Movement>
	HAL_Delay(50);
 8100c1a:	2032      	movs	r0, #50	; 0x32
 8100c1c:	f002 fa74 	bl	8103108 <HAL_Delay>

	send_msg((uint8_t*)"\rHoming Motors\n\r");
 8100c20:	4816      	ldr	r0, [pc, #88]	; (8100c7c <init_Start_Up+0x80>)
 8100c22:	f002 f965 	bl	8102ef0 <send_msg>
	HAL_Delay(50);
 8100c26:	2032      	movs	r0, #50	; 0x32
 8100c28:	f002 fa6e 	bl	8103108 <HAL_Delay>

	HomeMotors(1, 1); // homing motors
 8100c2c:	2101      	movs	r1, #1
 8100c2e:	2001      	movs	r0, #1
 8100c30:	f000 fb4e 	bl	81012d0 <HomeMotors>
	HAL_Delay(50);
 8100c34:	2032      	movs	r0, #50	; 0x32
 8100c36:	f002 fa67 	bl	8103108 <HAL_Delay>

	send_msg((uint8_t*)"\r########Motors Homed########\n\r");
 8100c3a:	4811      	ldr	r0, [pc, #68]	; (8100c80 <init_Start_Up+0x84>)
 8100c3c:	f002 f958 	bl	8102ef0 <send_msg>
	HAL_Delay(50);
 8100c40:	2032      	movs	r0, #50	; 0x32
 8100c42:	f002 fa61 	bl	8103108 <HAL_Delay>

	send_msg((uint8_t*)"\rHoming servos\n\r");
 8100c46:	480f      	ldr	r0, [pc, #60]	; (8100c84 <init_Start_Up+0x88>)
 8100c48:	f002 f952 	bl	8102ef0 <send_msg>
	HAL_Delay(50);
 8100c4c:	2032      	movs	r0, #50	; 0x32
 8100c4e:	f002 fa5b 	bl	8103108 <HAL_Delay>

	set_Slide_Servo(SLIDE_CLOSED);
 8100c52:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8100c56:	f000 fe85 	bl	8101964 <set_Slide_Servo>
	set_Rotate_Servo(ROTATE_NEUTRAL);
 8100c5a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8100c88 <init_Start_Up+0x8c>
 8100c5e:	f000 fe4b 	bl	81018f8 <set_Rotate_Servo>
	send_msg((uint8_t*)"\r########Servos Homed########\n\r");
 8100c62:	480a      	ldr	r0, [pc, #40]	; (8100c8c <init_Start_Up+0x90>)
 8100c64:	f002 f944 	bl	8102ef0 <send_msg>
	HAL_Delay(50);
 8100c68:	2032      	movs	r0, #50	; 0x32
 8100c6a:	f002 fa4d 	bl	8103108 <HAL_Delay>

}
 8100c6e:	bf00      	nop
 8100c70:	bd80      	pop	{r7, pc}
 8100c72:	bf00      	nop
 8100c74:	0810acdc 	.word	0x0810acdc
 8100c78:	0810ad08 	.word	0x0810ad08
 8100c7c:	0810ad2c 	.word	0x0810ad2c
 8100c80:	0810ad40 	.word	0x0810ad40
 8100c84:	0810ad60 	.word	0x0810ad60
 8100c88:	40a9999a 	.word	0x40a9999a
 8100c8c:	0810ad74 	.word	0x0810ad74

08100c90 <separate_tokens>:
/* separate_tokens: Function which separates tokens to robot/user storage
 *
 * Shoots yellow token, or gives signal to move red token
 *
 */
{
 8100c90:	b580      	push	{r7, lr}
 8100c92:	b084      	sub	sp, #16
 8100c94:	af00      	add	r7, sp, #0
 8100c96:	6078      	str	r0, [r7, #4]
	int value_rgb = 0;
 8100c98:	2300      	movs	r3, #0
 8100c9a:	60fb      	str	r3, [r7, #12]

	value_rgb = rgb_read_sensor(self); // store sensor readings
 8100c9c:	6878      	ldr	r0, [r7, #4]
 8100c9e:	f000 f92d 	bl	8100efc <rgb_read_sensor>
 8100ca2:	60f8      	str	r0, [r7, #12]

	switch (value_rgb)
 8100ca4:	68fb      	ldr	r3, [r7, #12]
 8100ca6:	2b03      	cmp	r3, #3
 8100ca8:	d011      	beq.n	8100cce <separate_tokens+0x3e>
 8100caa:	68fb      	ldr	r3, [r7, #12]
 8100cac:	2b03      	cmp	r3, #3
 8100cae:	dc12      	bgt.n	8100cd6 <separate_tokens+0x46>
 8100cb0:	68fb      	ldr	r3, [r7, #12]
 8100cb2:	2b00      	cmp	r3, #0
 8100cb4:	d003      	beq.n	8100cbe <separate_tokens+0x2e>
 8100cb6:	68fb      	ldr	r3, [r7, #12]
 8100cb8:	2b01      	cmp	r3, #1
 8100cba:	d004      	beq.n	8100cc6 <separate_tokens+0x36>
 8100cbc:	e00b      	b.n	8100cd6 <separate_tokens+0x46>
	{
	case 0: 	// yellow token
		send_msg((uint8_t*)"\rThe colour of the token is YELLOW!\n\r");
 8100cbe:	480a      	ldr	r0, [pc, #40]	; (8100ce8 <separate_tokens+0x58>)
 8100cc0:	f002 f916 	bl	8102ef0 <send_msg>
		set_Flipper();
		HAL_Delay(5);
		reset_Flipper();
		break;
		*/
		break;
 8100cc4:	e00b      	b.n	8100cde <separate_tokens+0x4e>

	case 1: 	// red token
		send_msg((uint8_t*)"\rThe colour of the token is RED!\n\r");
 8100cc6:	4809      	ldr	r0, [pc, #36]	; (8100cec <separate_tokens+0x5c>)
 8100cc8:	f002 f912 	bl	8102ef0 <send_msg>
		break;
 8100ccc:	e007      	b.n	8100cde <separate_tokens+0x4e>

	case 3:		// no token present
		send_msg((uint8_t*)"\rNo token is present!\n\r");
 8100cce:	4808      	ldr	r0, [pc, #32]	; (8100cf0 <separate_tokens+0x60>)
 8100cd0:	f002 f90e 	bl	8102ef0 <send_msg>
		break;
 8100cd4:	e003      	b.n	8100cde <separate_tokens+0x4e>

	default:
		send_msg((uint8_t*)"\rDEF:No token is present!\n\r");
 8100cd6:	4807      	ldr	r0, [pc, #28]	; (8100cf4 <separate_tokens+0x64>)
 8100cd8:	f002 f90a 	bl	8102ef0 <send_msg>
		break;
 8100cdc:	bf00      	nop
	}
	return value_rgb;
 8100cde:	68fb      	ldr	r3, [r7, #12]
}
 8100ce0:	4618      	mov	r0, r3
 8100ce2:	3710      	adds	r7, #16
 8100ce4:	46bd      	mov	sp, r7
 8100ce6:	bd80      	pop	{r7, pc}
 8100ce8:	0810ad94 	.word	0x0810ad94
 8100cec:	0810adbc 	.word	0x0810adbc
 8100cf0:	0810ade0 	.word	0x0810ade0
 8100cf4:	0810adf8 	.word	0x0810adf8

08100cf8 <init_coinDetector>:
	}
	return stack;
}

void init_coinDetector(void)
{
 8100cf8:	b580      	push	{r7, lr}
 8100cfa:	b084      	sub	sp, #16
 8100cfc:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef dev_Status;
	uint8_t data = 0xFF; // ensures all ports are INPUT configured
 8100cfe:	23ff      	movs	r3, #255	; 0xff
 8100d00:	71bb      	strb	r3, [r7, #6]

	// Program command byte:
	// configuration register [0x03] sets all ports as inputs (1)
	dev_Status = i2c_Transmit(&hi2c1, CD_ADD, 0x03, 1, &data, 1);
 8100d02:	2301      	movs	r3, #1
 8100d04:	9301      	str	r3, [sp, #4]
 8100d06:	1dbb      	adds	r3, r7, #6
 8100d08:	9300      	str	r3, [sp, #0]
 8100d0a:	2301      	movs	r3, #1
 8100d0c:	2203      	movs	r2, #3
 8100d0e:	2138      	movs	r1, #56	; 0x38
 8100d10:	4808      	ldr	r0, [pc, #32]	; (8100d34 <init_coinDetector+0x3c>)
 8100d12:	f001 fbc1 	bl	8102498 <i2c_Transmit>
 8100d16:	4603      	mov	r3, r0
 8100d18:	71fb      	strb	r3, [r7, #7]

	if (dev_Status != HAL_OK) // if device is not OK
 8100d1a:	79fb      	ldrb	r3, [r7, #7]
 8100d1c:	2b00      	cmp	r3, #0
 8100d1e:	d003      	beq.n	8100d28 <init_coinDetector+0x30>
	{
		send_msg((uint8_t*) "\r¡User-Detector Initialisation FAILED¡\n\r");
 8100d20:	4805      	ldr	r0, [pc, #20]	; (8100d38 <init_coinDetector+0x40>)
 8100d22:	f002 f8e5 	bl	8102ef0 <send_msg>
 8100d26:	e002      	b.n	8100d2e <init_coinDetector+0x36>
		return;
	}
	else
	{
		send_msg((uint8_t*) "\r!User-Detector Initialised!\n\r");
 8100d28:	4804      	ldr	r0, [pc, #16]	; (8100d3c <init_coinDetector+0x44>)
 8100d2a:	f002 f8e1 	bl	8102ef0 <send_msg>
	}
}
 8100d2e:	3708      	adds	r7, #8
 8100d30:	46bd      	mov	sp, r7
 8100d32:	bd80      	pop	{r7, pc}
 8100d34:	10000164 	.word	0x10000164
 8100d38:	0810ae14 	.word	0x0810ae14
 8100d3c:	0810ae40 	.word	0x0810ae40

08100d40 <queryLightGate>:
 * -2: Error from PCA9554
 * -1: All gates are free
 * 1-7: Stack where gate is blocked
 * 9: More than one gate is blocked
 */
{
 8100d40:	b580      	push	{r7, lr}
 8100d42:	b084      	sub	sp, #16
 8100d44:	af02      	add	r7, sp, #8
	 0100 1011 - 0x4B
	 0100 1101 - 0x4D
	 0100 1111 - 0x4F
	 */
	// Program command byte: Reading the input port [0x00] register
	dev_Status = i2c_Receive(&hi2c1, CD_ADD, 0x00, 1, &cd, sizeof(cd));
 8100d46:	2301      	movs	r3, #1
 8100d48:	9301      	str	r3, [sp, #4]
 8100d4a:	1dbb      	adds	r3, r7, #6
 8100d4c:	9300      	str	r3, [sp, #0]
 8100d4e:	2301      	movs	r3, #1
 8100d50:	2200      	movs	r2, #0
 8100d52:	2138      	movs	r1, #56	; 0x38
 8100d54:	484a      	ldr	r0, [pc, #296]	; (8100e80 <queryLightGate+0x140>)
 8100d56:	f001 fbc8 	bl	81024ea <i2c_Receive>
 8100d5a:	4603      	mov	r3, r0
 8100d5c:	71fb      	strb	r3, [r7, #7]

	if (dev_Status != HAL_OK)
 8100d5e:	79fb      	ldrb	r3, [r7, #7]
 8100d60:	2b00      	cmp	r3, #0
 8100d62:	d002      	beq.n	8100d6a <queryLightGate+0x2a>
	{
		return -2;
 8100d64:	f06f 0301 	mvn.w	r3, #1
 8100d68:	e085      	b.n	8100e76 <queryLightGate+0x136>
	}
	else
	{
		/* Remove LSB: is always 1 */
		cd &= ~0x01;
 8100d6a:	79bb      	ldrb	r3, [r7, #6]
 8100d6c:	f023 0301 	bic.w	r3, r3, #1
 8100d70:	b2db      	uxtb	r3, r3
 8100d72:	71bb      	strb	r3, [r7, #6]

		/* Check if empty: */
		if (!cd)
 8100d74:	79bb      	ldrb	r3, [r7, #6]
 8100d76:	2b00      	cmp	r3, #0
 8100d78:	d102      	bne.n	8100d80 <queryLightGate+0x40>
			return -1;
 8100d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8100d7e:	e07a      	b.n	8100e76 <queryLightGate+0x136>

		if (cd == 0x02)
 8100d80:	79bb      	ldrb	r3, [r7, #6]
 8100d82:	2b02      	cmp	r3, #2
 8100d84:	d101      	bne.n	8100d8a <queryLightGate+0x4a>
		{
			return 7;
 8100d86:	2307      	movs	r3, #7
 8100d88:	e075      	b.n	8100e76 <queryLightGate+0x136>
		}
		if (cd == 0x04)
 8100d8a:	79bb      	ldrb	r3, [r7, #6]
 8100d8c:	2b04      	cmp	r3, #4
 8100d8e:	d101      	bne.n	8100d94 <queryLightGate+0x54>
		{
			return 6;
 8100d90:	2306      	movs	r3, #6
 8100d92:	e070      	b.n	8100e76 <queryLightGate+0x136>
		}
		if (cd == 0x08)
 8100d94:	79bb      	ldrb	r3, [r7, #6]
 8100d96:	2b08      	cmp	r3, #8
 8100d98:	d101      	bne.n	8100d9e <queryLightGate+0x5e>
		{
			return 5;
 8100d9a:	2305      	movs	r3, #5
 8100d9c:	e06b      	b.n	8100e76 <queryLightGate+0x136>
		}
		if (cd == 0x10)
 8100d9e:	79bb      	ldrb	r3, [r7, #6]
 8100da0:	2b10      	cmp	r3, #16
 8100da2:	d101      	bne.n	8100da8 <queryLightGate+0x68>
		{
			return 3; 	// flipped in hardware
 8100da4:	2303      	movs	r3, #3
 8100da6:	e066      	b.n	8100e76 <queryLightGate+0x136>
		}
		if (cd == 0x20)
 8100da8:	79bb      	ldrb	r3, [r7, #6]
 8100daa:	2b20      	cmp	r3, #32
 8100dac:	d101      	bne.n	8100db2 <queryLightGate+0x72>
		{
			return 4; 	// flipped in hardware
 8100dae:	2304      	movs	r3, #4
 8100db0:	e061      	b.n	8100e76 <queryLightGate+0x136>
		}
		if (cd == 0x40)
 8100db2:	79bb      	ldrb	r3, [r7, #6]
 8100db4:	2b40      	cmp	r3, #64	; 0x40
 8100db6:	d101      	bne.n	8100dbc <queryLightGate+0x7c>
		{
			return 1; 	// flipped in hardware
 8100db8:	2301      	movs	r3, #1
 8100dba:	e05c      	b.n	8100e76 <queryLightGate+0x136>
		}
		if (cd == 0x80)
 8100dbc:	79bb      	ldrb	r3, [r7, #6]
 8100dbe:	2b80      	cmp	r3, #128	; 0x80
 8100dc0:	d101      	bne.n	8100dc6 <queryLightGate+0x86>
		{
			return 2; 	// flipped in hardware
 8100dc2:	2302      	movs	r3, #2
 8100dc4:	e057      	b.n	8100e76 <queryLightGate+0x136>
		}

		//More than one coin
		if ((cd >> 1) & 1)
 8100dc6:	79bb      	ldrb	r3, [r7, #6]
 8100dc8:	085b      	lsrs	r3, r3, #1
 8100dca:	b2db      	uxtb	r3, r3
 8100dcc:	f003 0301 	and.w	r3, r3, #1
 8100dd0:	2b00      	cmp	r3, #0
 8100dd2:	d004      	beq.n	8100dde <queryLightGate+0x9e>
		{
			mem_Board[7 - 1]++;
 8100dd4:	4b2b      	ldr	r3, [pc, #172]	; (8100e84 <queryLightGate+0x144>)
 8100dd6:	699b      	ldr	r3, [r3, #24]
 8100dd8:	3301      	adds	r3, #1
 8100dda:	4a2a      	ldr	r2, [pc, #168]	; (8100e84 <queryLightGate+0x144>)
 8100ddc:	6193      	str	r3, [r2, #24]
		}
		if ((cd >> 2) & 1)
 8100dde:	79bb      	ldrb	r3, [r7, #6]
 8100de0:	089b      	lsrs	r3, r3, #2
 8100de2:	b2db      	uxtb	r3, r3
 8100de4:	f003 0301 	and.w	r3, r3, #1
 8100de8:	2b00      	cmp	r3, #0
 8100dea:	d004      	beq.n	8100df6 <queryLightGate+0xb6>
		{
			mem_Board[6 - 1]++;
 8100dec:	4b25      	ldr	r3, [pc, #148]	; (8100e84 <queryLightGate+0x144>)
 8100dee:	695b      	ldr	r3, [r3, #20]
 8100df0:	3301      	adds	r3, #1
 8100df2:	4a24      	ldr	r2, [pc, #144]	; (8100e84 <queryLightGate+0x144>)
 8100df4:	6153      	str	r3, [r2, #20]
		}
		if ((cd >> 3) & 1)
 8100df6:	79bb      	ldrb	r3, [r7, #6]
 8100df8:	08db      	lsrs	r3, r3, #3
 8100dfa:	b2db      	uxtb	r3, r3
 8100dfc:	f003 0301 	and.w	r3, r3, #1
 8100e00:	2b00      	cmp	r3, #0
 8100e02:	d004      	beq.n	8100e0e <queryLightGate+0xce>
		{
			mem_Board[5 - 1]++;
 8100e04:	4b1f      	ldr	r3, [pc, #124]	; (8100e84 <queryLightGate+0x144>)
 8100e06:	691b      	ldr	r3, [r3, #16]
 8100e08:	3301      	adds	r3, #1
 8100e0a:	4a1e      	ldr	r2, [pc, #120]	; (8100e84 <queryLightGate+0x144>)
 8100e0c:	6113      	str	r3, [r2, #16]
		}
		if ((cd >> 4) & 1)
 8100e0e:	79bb      	ldrb	r3, [r7, #6]
 8100e10:	091b      	lsrs	r3, r3, #4
 8100e12:	b2db      	uxtb	r3, r3
 8100e14:	f003 0301 	and.w	r3, r3, #1
 8100e18:	2b00      	cmp	r3, #0
 8100e1a:	d004      	beq.n	8100e26 <queryLightGate+0xe6>
		{
			mem_Board[3 - 1]++;
 8100e1c:	4b19      	ldr	r3, [pc, #100]	; (8100e84 <queryLightGate+0x144>)
 8100e1e:	689b      	ldr	r3, [r3, #8]
 8100e20:	3301      	adds	r3, #1
 8100e22:	4a18      	ldr	r2, [pc, #96]	; (8100e84 <queryLightGate+0x144>)
 8100e24:	6093      	str	r3, [r2, #8]
		}
		if ((cd >> 5) & 1)
 8100e26:	79bb      	ldrb	r3, [r7, #6]
 8100e28:	095b      	lsrs	r3, r3, #5
 8100e2a:	b2db      	uxtb	r3, r3
 8100e2c:	f003 0301 	and.w	r3, r3, #1
 8100e30:	2b00      	cmp	r3, #0
 8100e32:	d004      	beq.n	8100e3e <queryLightGate+0xfe>
		{
			mem_Board[4 - 1]++;
 8100e34:	4b13      	ldr	r3, [pc, #76]	; (8100e84 <queryLightGate+0x144>)
 8100e36:	68db      	ldr	r3, [r3, #12]
 8100e38:	3301      	adds	r3, #1
 8100e3a:	4a12      	ldr	r2, [pc, #72]	; (8100e84 <queryLightGate+0x144>)
 8100e3c:	60d3      	str	r3, [r2, #12]
		}
		if ((cd >> 6) & 1)
 8100e3e:	79bb      	ldrb	r3, [r7, #6]
 8100e40:	099b      	lsrs	r3, r3, #6
 8100e42:	b2db      	uxtb	r3, r3
 8100e44:	f003 0301 	and.w	r3, r3, #1
 8100e48:	2b00      	cmp	r3, #0
 8100e4a:	d004      	beq.n	8100e56 <queryLightGate+0x116>
		{
			mem_Board[1 - 1]++;
 8100e4c:	4b0d      	ldr	r3, [pc, #52]	; (8100e84 <queryLightGate+0x144>)
 8100e4e:	681b      	ldr	r3, [r3, #0]
 8100e50:	3301      	adds	r3, #1
 8100e52:	4a0c      	ldr	r2, [pc, #48]	; (8100e84 <queryLightGate+0x144>)
 8100e54:	6013      	str	r3, [r2, #0]
		}
		if ((cd >> 7) & 1)
 8100e56:	79bb      	ldrb	r3, [r7, #6]
 8100e58:	09db      	lsrs	r3, r3, #7
 8100e5a:	b2db      	uxtb	r3, r3
 8100e5c:	f003 0301 	and.w	r3, r3, #1
 8100e60:	2b00      	cmp	r3, #0
 8100e62:	d004      	beq.n	8100e6e <queryLightGate+0x12e>
		{
			mem_Board[2 - 1]++;
 8100e64:	4b07      	ldr	r3, [pc, #28]	; (8100e84 <queryLightGate+0x144>)
 8100e66:	685b      	ldr	r3, [r3, #4]
 8100e68:	3301      	adds	r3, #1
 8100e6a:	4a06      	ldr	r2, [pc, #24]	; (8100e84 <queryLightGate+0x144>)
 8100e6c:	6053      	str	r3, [r2, #4]
		}
		sens = 0;
 8100e6e:	4b06      	ldr	r3, [pc, #24]	; (8100e88 <queryLightGate+0x148>)
 8100e70:	2200      	movs	r2, #0
 8100e72:	601a      	str	r2, [r3, #0]
		return 9;
 8100e74:	2309      	movs	r3, #9
	}
}
 8100e76:	4618      	mov	r0, r3
 8100e78:	3708      	adds	r7, #8
 8100e7a:	46bd      	mov	sp, r7
 8100e7c:	bd80      	pop	{r7, pc}
 8100e7e:	bf00      	nop
 8100e80:	10000164 	.word	0x10000164
 8100e84:	1000009c 	.word	0x1000009c
 8100e88:	10000008 	.word	0x10000008

08100e8c <TCS3472_Create>:
int yellow = 0;
int rgb_error = 0;

TCS3472 TCS3472_Create(uint8_t addr, I2C_HandleTypeDef *handle)
/* Structure with the address and I2C handle of the RGB Sensor */
{
 8100e8c:	b480      	push	{r7}
 8100e8e:	b087      	sub	sp, #28
 8100e90:	af00      	add	r7, sp, #0
 8100e92:	60f8      	str	r0, [r7, #12]
 8100e94:	460b      	mov	r3, r1
 8100e96:	607a      	str	r2, [r7, #4]
 8100e98:	72fb      	strb	r3, [r7, #11]
	//create structure of RBG sensor data
	TCS3472 sensor_data =
 8100e9a:	7afb      	ldrb	r3, [r7, #11]
 8100e9c:	743b      	strb	r3, [r7, #16]
 8100e9e:	687b      	ldr	r3, [r7, #4]
 8100ea0:	617b      	str	r3, [r7, #20]
	{ addr, handle };
	return sensor_data;
 8100ea2:	68fb      	ldr	r3, [r7, #12]
 8100ea4:	461a      	mov	r2, r3
 8100ea6:	f107 0310 	add.w	r3, r7, #16
 8100eaa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8100eae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8100eb2:	68f8      	ldr	r0, [r7, #12]
 8100eb4:	371c      	adds	r7, #28
 8100eb6:	46bd      	mov	sp, r7
 8100eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ebc:	4770      	bx	lr
	...

08100ec0 <rgb_init>:

void rgb_init(const TCS3472 *const self)
{
 8100ec0:	b580      	push	{r7, lr}
 8100ec2:	b082      	sub	sp, #8
 8100ec4:	af00      	add	r7, sp, #0
 8100ec6:	6078      	str	r0, [r7, #4]
	// command to turn on the device [0x03] sent to register [0x80]
	rgb_send(self, RGB_COMMAND_REG | RGB_REG_ENABLE,
 8100ec8:	2203      	movs	r2, #3
 8100eca:	2180      	movs	r1, #128	; 0x80
 8100ecc:	6878      	ldr	r0, [r7, #4]
 8100ece:	f000 f86b 	bl	8100fa8 <rgb_send>
			RGB_ENABLE_PON | RGB_ENABLE_AEN);

	HAL_Delay(2);
 8100ed2:	2002      	movs	r0, #2
 8100ed4:	f002 f918 	bl	8103108 <HAL_Delay>
	// 0xFF = 2.4 ms
	// 0x00 = 700 ms
	// 0xEE = 238; (256 - 238) * 2.4 = 43.2 ms

	//  ATIME = 0xEE; sent to TIMING register [0x81]
	rgb_send(self, RGB_COMMAND_REG | RGB_REG_TIMING, 0xEE);
 8100ed8:	22ee      	movs	r2, #238	; 0xee
 8100eda:	2181      	movs	r1, #129	; 0x81
 8100edc:	6878      	ldr	r0, [r7, #4]
 8100ede:	f000 f863 	bl	8100fa8 <rgb_send>
	HAL_Delay(10);
 8100ee2:	200a      	movs	r0, #10
 8100ee4:	f002 f910 	bl	8103108 <HAL_Delay>
	send_msg((uint8_t*) "\r!RGB-Sensor Initialised!\n\r");
 8100ee8:	4803      	ldr	r0, [pc, #12]	; (8100ef8 <rgb_init+0x38>)
 8100eea:	f002 f801 	bl	8102ef0 <send_msg>

}
 8100eee:	bf00      	nop
 8100ef0:	3708      	adds	r7, #8
 8100ef2:	46bd      	mov	sp, r7
 8100ef4:	bd80      	pop	{r7, pc}
 8100ef6:	bf00      	nop
 8100ef8:	0810ae60 	.word	0x0810ae60

08100efc <rgb_read_sensor>:
 * RETURNS:
 * robotCoin = 0 --> The token is yellow
 * robotCoin = 1 --> The token is red
 * robotCoin = 3 --> The token is not present
 */
{
 8100efc:	b580      	push	{r7, lr}
 8100efe:	b086      	sub	sp, #24
 8100f00:	af00      	add	r7, sp, #0
 8100f02:	6078      	str	r0, [r7, #4]
	struct Color sens_RGBOut;
	int robotCoin = -2; 		// arbitrary value to enter while loop
 8100f04:	f06f 0301 	mvn.w	r3, #1
 8100f08:	617b      	str	r3, [r7, #20]
	int t_it_RGB = 0;			// integration time ? interrupt time ? Can't figure out name
 8100f0a:	2300      	movs	r3, #0
 8100f0c:	613b      	str	r3, [r7, #16]
	uint16_t hue = 0;
 8100f0e:	2300      	movs	r3, #0
 8100f10:	81fb      	strh	r3, [r7, #14]

	while (robotCoin == -2) // loop until any return is reached
 8100f12:	e039      	b.n	8100f88 <rgb_read_sensor+0x8c>
	{
		sens_RGBOut = queryRGBSensor(self); // store the structure of colours values from sens
 8100f14:	f107 0308 	add.w	r3, r7, #8
 8100f18:	6879      	ldr	r1, [r7, #4]
 8100f1a:	4618      	mov	r0, r3
 8100f1c:	f000 f85c 	bl	8100fd8 <queryRGBSensor>

		// get hue value (dominant wavelength) out of RGB sensor readings
		hue = getHue(sens_RGBOut.r, sens_RGBOut.g, sens_RGBOut.b);
 8100f20:	893b      	ldrh	r3, [r7, #8]
 8100f22:	8979      	ldrh	r1, [r7, #10]
 8100f24:	89ba      	ldrh	r2, [r7, #12]
 8100f26:	4618      	mov	r0, r3
 8100f28:	f000 f8f2 	bl	8101110 <getHue>
 8100f2c:	4603      	mov	r3, r0
 8100f2e:	81fb      	strh	r3, [r7, #14]

		if (hue >= 35 && hue <= 75)
 8100f30:	89fb      	ldrh	r3, [r7, #14]
 8100f32:	2b22      	cmp	r3, #34	; 0x22
 8100f34:	d909      	bls.n	8100f4a <rgb_read_sensor+0x4e>
 8100f36:	89fb      	ldrh	r3, [r7, #14]
 8100f38:	2b4b      	cmp	r3, #75	; 0x4b
 8100f3a:	d806      	bhi.n	8100f4a <rgb_read_sensor+0x4e>
		{
			robotCoin = 0;
 8100f3c:	2300      	movs	r3, #0
 8100f3e:	617b      	str	r3, [r7, #20]
			yellow++;
 8100f40:	4b16      	ldr	r3, [pc, #88]	; (8100f9c <rgb_read_sensor+0xa0>)
 8100f42:	681b      	ldr	r3, [r3, #0]
 8100f44:	3301      	adds	r3, #1
 8100f46:	4a15      	ldr	r2, [pc, #84]	; (8100f9c <rgb_read_sensor+0xa0>)
 8100f48:	6013      	str	r3, [r2, #0]
		}
		if (hue >= 340 && hue <= 360)
 8100f4a:	89fb      	ldrh	r3, [r7, #14]
 8100f4c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8100f50:	d30a      	bcc.n	8100f68 <rgb_read_sensor+0x6c>
 8100f52:	89fb      	ldrh	r3, [r7, #14]
 8100f54:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8100f58:	d806      	bhi.n	8100f68 <rgb_read_sensor+0x6c>
		{
			robotCoin = 1;
 8100f5a:	2301      	movs	r3, #1
 8100f5c:	617b      	str	r3, [r7, #20]
			red++;
 8100f5e:	4b10      	ldr	r3, [pc, #64]	; (8100fa0 <rgb_read_sensor+0xa4>)
 8100f60:	681b      	ldr	r3, [r3, #0]
 8100f62:	3301      	adds	r3, #1
 8100f64:	4a0e      	ldr	r2, [pc, #56]	; (8100fa0 <rgb_read_sensor+0xa4>)
 8100f66:	6013      	str	r3, [r2, #0]
		}

		t_it_RGB++;
 8100f68:	693b      	ldr	r3, [r7, #16]
 8100f6a:	3301      	adds	r3, #1
 8100f6c:	613b      	str	r3, [r7, #16]
		HAL_Delay(2);
 8100f6e:	2002      	movs	r0, #2
 8100f70:	f002 f8ca 	bl	8103108 <HAL_Delay>
		if (t_it_RGB > 24)
 8100f74:	693b      	ldr	r3, [r7, #16]
 8100f76:	2b18      	cmp	r3, #24
 8100f78:	dd06      	ble.n	8100f88 <rgb_read_sensor+0x8c>
		{
			// no token present
			robotCoin = 3;
 8100f7a:	2303      	movs	r3, #3
 8100f7c:	617b      	str	r3, [r7, #20]
			rgb_error++;
 8100f7e:	4b09      	ldr	r3, [pc, #36]	; (8100fa4 <rgb_read_sensor+0xa8>)
 8100f80:	681b      	ldr	r3, [r3, #0]
 8100f82:	3301      	adds	r3, #1
 8100f84:	4a07      	ldr	r2, [pc, #28]	; (8100fa4 <rgb_read_sensor+0xa8>)
 8100f86:	6013      	str	r3, [r2, #0]
	while (robotCoin == -2) // loop until any return is reached
 8100f88:	697b      	ldr	r3, [r7, #20]
 8100f8a:	f113 0f02 	cmn.w	r3, #2
 8100f8e:	d0c1      	beq.n	8100f14 <rgb_read_sensor+0x18>
		}
	}
	return robotCoin;
 8100f90:	697b      	ldr	r3, [r7, #20]
}
 8100f92:	4618      	mov	r0, r3
 8100f94:	3718      	adds	r7, #24
 8100f96:	46bd      	mov	sp, r7
 8100f98:	bd80      	pop	{r7, pc}
 8100f9a:	bf00      	nop
 8100f9c:	100000bc 	.word	0x100000bc
 8100fa0:	100000b8 	.word	0x100000b8
 8100fa4:	100000c0 	.word	0x100000c0

08100fa8 <rgb_send>:
 *
 * @param1 self: the structure which holds information about the RGB sensor
 * @param2 regAddress: the register to which the data will be written to
 * @param3 data: the data to be written in the register
 */
{
 8100fa8:	b580      	push	{r7, lr}
 8100faa:	b084      	sub	sp, #16
 8100fac:	af02      	add	r7, sp, #8
 8100fae:	6078      	str	r0, [r7, #4]
 8100fb0:	460b      	mov	r3, r1
 8100fb2:	70fb      	strb	r3, [r7, #3]
 8100fb4:	4613      	mov	r3, r2
 8100fb6:	70bb      	strb	r3, [r7, #2]
	i2c_Transmit(self->handle, self->dev_addr, regAddress, 1, &data, 1);
 8100fb8:	687b      	ldr	r3, [r7, #4]
 8100fba:	6858      	ldr	r0, [r3, #4]
 8100fbc:	687b      	ldr	r3, [r7, #4]
 8100fbe:	7819      	ldrb	r1, [r3, #0]
 8100fc0:	78fa      	ldrb	r2, [r7, #3]
 8100fc2:	2301      	movs	r3, #1
 8100fc4:	9301      	str	r3, [sp, #4]
 8100fc6:	1cbb      	adds	r3, r7, #2
 8100fc8:	9300      	str	r3, [sp, #0]
 8100fca:	2301      	movs	r3, #1
 8100fcc:	f001 fa64 	bl	8102498 <i2c_Transmit>
}
 8100fd0:	bf00      	nop
 8100fd2:	3708      	adds	r7, #8
 8100fd4:	46bd      	mov	sp, r7
 8100fd6:	bd80      	pop	{r7, pc}

08100fd8 <queryRGBSensor>:
 * @param1 self: An address to the structure of the device
 *
 * Returns:
 * 	Colour struct containing r, g and b
 */
{
 8100fd8:	b580      	push	{r7, lr}
 8100fda:	b088      	sub	sp, #32
 8100fdc:	af02      	add	r7, sp, #8
 8100fde:	6078      	str	r0, [r7, #4]
 8100fe0:	6039      	str	r1, [r7, #0]

	/* Read RGB values */
	uint8_t low = 0; // temporary
 8100fe2:	2300      	movs	r3, #0
 8100fe4:	75bb      	strb	r3, [r7, #22]
	uint8_t high = 0; // temporary
 8100fe6:	2300      	movs	r3, #0
 8100fe8:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef dev_Status;
	struct Color color;

	// Read red value; LOW and HIGH channels
	dev_Status = i2c_Receive(self->handle, self->dev_addr,
 8100fea:	683b      	ldr	r3, [r7, #0]
 8100fec:	6858      	ldr	r0, [r3, #4]
 8100fee:	683b      	ldr	r3, [r7, #0]
 8100ff0:	7819      	ldrb	r1, [r3, #0]
 8100ff2:	2301      	movs	r3, #1
 8100ff4:	9301      	str	r3, [sp, #4]
 8100ff6:	f107 0316 	add.w	r3, r7, #22
 8100ffa:	9300      	str	r3, [sp, #0]
 8100ffc:	2301      	movs	r3, #1
 8100ffe:	2296      	movs	r2, #150	; 0x96
 8101000:	f001 fa73 	bl	81024ea <i2c_Receive>
 8101004:	4603      	mov	r3, r0
 8101006:	75fb      	strb	r3, [r7, #23]
			RGB_COMMAND_REG | RGB_RED_LOW, 1, &low, sizeof(low));
	dev_Status = i2c_Receive(self->handle, self->dev_addr,
 8101008:	683b      	ldr	r3, [r7, #0]
 810100a:	6858      	ldr	r0, [r3, #4]
 810100c:	683b      	ldr	r3, [r7, #0]
 810100e:	7819      	ldrb	r1, [r3, #0]
 8101010:	2301      	movs	r3, #1
 8101012:	9301      	str	r3, [sp, #4]
 8101014:	f107 0315 	add.w	r3, r7, #21
 8101018:	9300      	str	r3, [sp, #0]
 810101a:	2301      	movs	r3, #1
 810101c:	2297      	movs	r2, #151	; 0x97
 810101e:	f001 fa64 	bl	81024ea <i2c_Receive>
 8101022:	4603      	mov	r3, r0
 8101024:	75fb      	strb	r3, [r7, #23]
			RGB_COMMAND_REG | RGB_RED_HIGH, 1, &high, sizeof(high));
	if (dev_Status != HAL_OK) // if device is not OK
 8101026:	7dfb      	ldrb	r3, [r7, #23]
 8101028:	2b00      	cmp	r3, #0
 810102a:	d002      	beq.n	8101032 <queryRGBSensor+0x5a>
	{
		color.r = 0; //output 0
 810102c:	2300      	movs	r3, #0
 810102e:	81bb      	strh	r3, [r7, #12]
 8101030:	e008      	b.n	8101044 <queryRGBSensor+0x6c>
	}
	else
	{
		color.r = (high << 8) | low; // combine both local values into the output struct
 8101032:	7d7b      	ldrb	r3, [r7, #21]
 8101034:	021b      	lsls	r3, r3, #8
 8101036:	b21a      	sxth	r2, r3
 8101038:	7dbb      	ldrb	r3, [r7, #22]
 810103a:	b21b      	sxth	r3, r3
 810103c:	4313      	orrs	r3, r2
 810103e:	b21b      	sxth	r3, r3
 8101040:	b29b      	uxth	r3, r3
 8101042:	81bb      	strh	r3, [r7, #12]
	}

	// Read green value; LOW and HIGH channels
	dev_Status = i2c_Receive(self->handle, self->dev_addr,
 8101044:	683b      	ldr	r3, [r7, #0]
 8101046:	6858      	ldr	r0, [r3, #4]
 8101048:	683b      	ldr	r3, [r7, #0]
 810104a:	7819      	ldrb	r1, [r3, #0]
 810104c:	2301      	movs	r3, #1
 810104e:	9301      	str	r3, [sp, #4]
 8101050:	f107 0316 	add.w	r3, r7, #22
 8101054:	9300      	str	r3, [sp, #0]
 8101056:	2301      	movs	r3, #1
 8101058:	2298      	movs	r2, #152	; 0x98
 810105a:	f001 fa46 	bl	81024ea <i2c_Receive>
 810105e:	4603      	mov	r3, r0
 8101060:	75fb      	strb	r3, [r7, #23]
			RGB_COMMAND_REG | RGB_GREEN_LOW, 1, &low, sizeof(low));
	dev_Status = i2c_Receive(self->handle, self->dev_addr,
 8101062:	683b      	ldr	r3, [r7, #0]
 8101064:	6858      	ldr	r0, [r3, #4]
 8101066:	683b      	ldr	r3, [r7, #0]
 8101068:	7819      	ldrb	r1, [r3, #0]
 810106a:	2301      	movs	r3, #1
 810106c:	9301      	str	r3, [sp, #4]
 810106e:	f107 0315 	add.w	r3, r7, #21
 8101072:	9300      	str	r3, [sp, #0]
 8101074:	2301      	movs	r3, #1
 8101076:	2299      	movs	r2, #153	; 0x99
 8101078:	f001 fa37 	bl	81024ea <i2c_Receive>
 810107c:	4603      	mov	r3, r0
 810107e:	75fb      	strb	r3, [r7, #23]
			RGB_COMMAND_REG | RGB_GREEN_HIGH, 1, &high, sizeof(high));
	if (dev_Status != HAL_OK) // if device is not OK
 8101080:	7dfb      	ldrb	r3, [r7, #23]
 8101082:	2b00      	cmp	r3, #0
 8101084:	d002      	beq.n	810108c <queryRGBSensor+0xb4>
	{
		color.g = 0; //output 0
 8101086:	2300      	movs	r3, #0
 8101088:	81fb      	strh	r3, [r7, #14]
 810108a:	e008      	b.n	810109e <queryRGBSensor+0xc6>
	}
	else
	{
		color.g = (high << 8) | low; // combine both local values into the output struct
 810108c:	7d7b      	ldrb	r3, [r7, #21]
 810108e:	021b      	lsls	r3, r3, #8
 8101090:	b21a      	sxth	r2, r3
 8101092:	7dbb      	ldrb	r3, [r7, #22]
 8101094:	b21b      	sxth	r3, r3
 8101096:	4313      	orrs	r3, r2
 8101098:	b21b      	sxth	r3, r3
 810109a:	b29b      	uxth	r3, r3
 810109c:	81fb      	strh	r3, [r7, #14]
	}

	// Read blue value; LOW and HIGH channels
	dev_Status = i2c_Receive(self->handle, self->dev_addr,
 810109e:	683b      	ldr	r3, [r7, #0]
 81010a0:	6858      	ldr	r0, [r3, #4]
 81010a2:	683b      	ldr	r3, [r7, #0]
 81010a4:	7819      	ldrb	r1, [r3, #0]
 81010a6:	2301      	movs	r3, #1
 81010a8:	9301      	str	r3, [sp, #4]
 81010aa:	f107 0316 	add.w	r3, r7, #22
 81010ae:	9300      	str	r3, [sp, #0]
 81010b0:	2301      	movs	r3, #1
 81010b2:	229a      	movs	r2, #154	; 0x9a
 81010b4:	f001 fa19 	bl	81024ea <i2c_Receive>
 81010b8:	4603      	mov	r3, r0
 81010ba:	75fb      	strb	r3, [r7, #23]
			RGB_COMMAND_REG | RGB_BLUE_LOW, 1, &low, sizeof(low));
	dev_Status = i2c_Receive(self->handle, self->dev_addr,
 81010bc:	683b      	ldr	r3, [r7, #0]
 81010be:	6858      	ldr	r0, [r3, #4]
 81010c0:	683b      	ldr	r3, [r7, #0]
 81010c2:	7819      	ldrb	r1, [r3, #0]
 81010c4:	2301      	movs	r3, #1
 81010c6:	9301      	str	r3, [sp, #4]
 81010c8:	f107 0315 	add.w	r3, r7, #21
 81010cc:	9300      	str	r3, [sp, #0]
 81010ce:	2301      	movs	r3, #1
 81010d0:	229b      	movs	r2, #155	; 0x9b
 81010d2:	f001 fa0a 	bl	81024ea <i2c_Receive>
 81010d6:	4603      	mov	r3, r0
 81010d8:	75fb      	strb	r3, [r7, #23]
			RGB_COMMAND_REG | RGB_BLUE_HIGH, 1, &high, sizeof(high));
	if (dev_Status != HAL_OK) // if device is not OK
 81010da:	7dfb      	ldrb	r3, [r7, #23]
 81010dc:	2b00      	cmp	r3, #0
 81010de:	d002      	beq.n	81010e6 <queryRGBSensor+0x10e>
	{
		color.b = 0; //output 0
 81010e0:	2300      	movs	r3, #0
 81010e2:	823b      	strh	r3, [r7, #16]
 81010e4:	e008      	b.n	81010f8 <queryRGBSensor+0x120>
	}
	else
	{
		color.b = (high << 8) | low; // combine both local values into the output struct
 81010e6:	7d7b      	ldrb	r3, [r7, #21]
 81010e8:	021b      	lsls	r3, r3, #8
 81010ea:	b21a      	sxth	r2, r3
 81010ec:	7dbb      	ldrb	r3, [r7, #22]
 81010ee:	b21b      	sxth	r3, r3
 81010f0:	4313      	orrs	r3, r2
 81010f2:	b21b      	sxth	r3, r3
 81010f4:	b29b      	uxth	r3, r3
 81010f6:	823b      	strh	r3, [r7, #16]
	}
	return color;
 81010f8:	687b      	ldr	r3, [r7, #4]
 81010fa:	461a      	mov	r2, r3
 81010fc:	f107 030c 	add.w	r3, r7, #12
 8101100:	6818      	ldr	r0, [r3, #0]
 8101102:	6010      	str	r0, [r2, #0]
 8101104:	889b      	ldrh	r3, [r3, #4]
 8101106:	8093      	strh	r3, [r2, #4]
}
 8101108:	6878      	ldr	r0, [r7, #4]
 810110a:	3718      	adds	r7, #24
 810110c:	46bd      	mov	sp, r7
 810110e:	bd80      	pop	{r7, pc}

08101110 <getHue>:
 *
 * Returns:
 * 	hue value in the range of 0 to 360
 */
uint16_t getHue(uint16_t red, uint16_t green, uint16_t blue)
{
 8101110:	b580      	push	{r7, lr}
 8101112:	b08a      	sub	sp, #40	; 0x28
 8101114:	af00      	add	r7, sp, #0
 8101116:	4603      	mov	r3, r0
 8101118:	80fb      	strh	r3, [r7, #6]
 810111a:	460b      	mov	r3, r1
 810111c:	80bb      	strh	r3, [r7, #4]
 810111e:	4613      	mov	r3, r2
 8101120:	807b      	strh	r3, [r7, #2]
	uint16_t max = max(max(red, green), blue);
 8101122:	88fb      	ldrh	r3, [r7, #6]
 8101124:	847b      	strh	r3, [r7, #34]	; 0x22
 8101126:	88bb      	ldrh	r3, [r7, #4]
 8101128:	843b      	strh	r3, [r7, #32]
 810112a:	8c3a      	ldrh	r2, [r7, #32]
 810112c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810112e:	4293      	cmp	r3, r2
 8101130:	bf38      	it	cc
 8101132:	4613      	movcc	r3, r2
 8101134:	b29b      	uxth	r3, r3
 8101136:	61fb      	str	r3, [r7, #28]
 8101138:	887b      	ldrh	r3, [r7, #2]
 810113a:	837b      	strh	r3, [r7, #26]
 810113c:	8b7a      	ldrh	r2, [r7, #26]
 810113e:	69fb      	ldr	r3, [r7, #28]
 8101140:	4293      	cmp	r3, r2
 8101142:	bfb8      	it	lt
 8101144:	4613      	movlt	r3, r2
 8101146:	833b      	strh	r3, [r7, #24]
	uint16_t min = min(min(red, green), blue);
 8101148:	88fb      	ldrh	r3, [r7, #6]
 810114a:	82fb      	strh	r3, [r7, #22]
 810114c:	88bb      	ldrh	r3, [r7, #4]
 810114e:	82bb      	strh	r3, [r7, #20]
 8101150:	8aba      	ldrh	r2, [r7, #20]
 8101152:	8afb      	ldrh	r3, [r7, #22]
 8101154:	4293      	cmp	r3, r2
 8101156:	bf28      	it	cs
 8101158:	4613      	movcs	r3, r2
 810115a:	b29b      	uxth	r3, r3
 810115c:	613b      	str	r3, [r7, #16]
 810115e:	887b      	ldrh	r3, [r7, #2]
 8101160:	81fb      	strh	r3, [r7, #14]
 8101162:	89fa      	ldrh	r2, [r7, #14]
 8101164:	693b      	ldr	r3, [r7, #16]
 8101166:	4293      	cmp	r3, r2
 8101168:	bfa8      	it	ge
 810116a:	4613      	movge	r3, r2
 810116c:	81bb      	strh	r3, [r7, #12]
	float hue = 0;
 810116e:	f04f 0300 	mov.w	r3, #0
 8101172:	627b      	str	r3, [r7, #36]	; 0x24

	// grey:
	if (min == max)
 8101174:	89ba      	ldrh	r2, [r7, #12]
 8101176:	8b3b      	ldrh	r3, [r7, #24]
 8101178:	429a      	cmp	r2, r3
 810117a:	d101      	bne.n	8101180 <getHue+0x70>
	{
		return 0;
 810117c:	2300      	movs	r3, #0
 810117e:	e069      	b.n	8101254 <getHue+0x144>
	}

	if (max == red)
 8101180:	8b3a      	ldrh	r2, [r7, #24]
 8101182:	88fb      	ldrh	r3, [r7, #6]
 8101184:	429a      	cmp	r2, r3
 8101186:	d112      	bne.n	81011ae <getHue+0x9e>
	{
		hue = (green - blue) / (float) (max - min);
 8101188:	88ba      	ldrh	r2, [r7, #4]
 810118a:	887b      	ldrh	r3, [r7, #2]
 810118c:	1ad3      	subs	r3, r2, r3
 810118e:	ee07 3a90 	vmov	s15, r3
 8101192:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101196:	8b3a      	ldrh	r2, [r7, #24]
 8101198:	89bb      	ldrh	r3, [r7, #12]
 810119a:	1ad3      	subs	r3, r2, r3
 810119c:	ee07 3a90 	vmov	s15, r3
 81011a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81011a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81011a8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 81011ac:	e030      	b.n	8101210 <getHue+0x100>
	}
	else if (max == green)
 81011ae:	8b3a      	ldrh	r2, [r7, #24]
 81011b0:	88bb      	ldrh	r3, [r7, #4]
 81011b2:	429a      	cmp	r2, r3
 81011b4:	d116      	bne.n	81011e4 <getHue+0xd4>
	{
		hue = 2.0f + (blue - red) / (float) (max - min);
 81011b6:	887a      	ldrh	r2, [r7, #2]
 81011b8:	88fb      	ldrh	r3, [r7, #6]
 81011ba:	1ad3      	subs	r3, r2, r3
 81011bc:	ee07 3a90 	vmov	s15, r3
 81011c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81011c4:	8b3a      	ldrh	r2, [r7, #24]
 81011c6:	89bb      	ldrh	r3, [r7, #12]
 81011c8:	1ad3      	subs	r3, r2, r3
 81011ca:	ee07 3a90 	vmov	s15, r3
 81011ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81011d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81011d6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 81011da:	ee77 7a87 	vadd.f32	s15, s15, s14
 81011de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 81011e2:	e015      	b.n	8101210 <getHue+0x100>
	}
	else
	{
		hue = 4.0f + (red - green) / (float) (max - min);
 81011e4:	88fa      	ldrh	r2, [r7, #6]
 81011e6:	88bb      	ldrh	r3, [r7, #4]
 81011e8:	1ad3      	subs	r3, r2, r3
 81011ea:	ee07 3a90 	vmov	s15, r3
 81011ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81011f2:	8b3a      	ldrh	r2, [r7, #24]
 81011f4:	89bb      	ldrh	r3, [r7, #12]
 81011f6:	1ad3      	subs	r3, r2, r3
 81011f8:	ee07 3a90 	vmov	s15, r3
 81011fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8101200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101204:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8101208:	ee77 7a87 	vadd.f32	s15, s15, s14
 810120c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	hue *= 60;
 8101210:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8101214:	ed9f 7a11 	vldr	s14, [pc, #68]	; 810125c <getHue+0x14c>
 8101218:	ee67 7a87 	vmul.f32	s15, s15, s14
 810121c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	// if hue is negative, add 360
	if (hue < 0)
 8101220:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8101224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810122c:	d507      	bpl.n	810123e <getHue+0x12e>
		hue += 360;
 810122e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8101232:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8101260 <getHue+0x150>
 8101236:	ee77 7a87 	vadd.f32	s15, s15, s14
 810123a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	// round hue value and return
	return roundf(hue);
 810123e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8101242:	f009 fd0d 	bl	810ac60 <roundf>
 8101246:	eef0 7a40 	vmov.f32	s15, s0
 810124a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810124e:	ee17 3a90 	vmov	r3, s15
 8101252:	b29b      	uxth	r3, r3
}
 8101254:	4618      	mov	r0, r3
 8101256:	3728      	adds	r7, #40	; 0x28
 8101258:	46bd      	mov	sp, r7
 810125a:	bd80      	pop	{r7, pc}
 810125c:	42700000 	.word	0x42700000
 8101260:	43b40000 	.word	0x43b40000

08101264 <initMotors>:
 *      Author: Pascal
 */
#include "level_3/motor_master.h"

void initMotors()
{
 8101264:	b580      	push	{r7, lr}
 8101266:	af00      	add	r7, sp, #0
	initMotorX();
 8101268:	f000 f860 	bl	810132c <initMotorX>
	initMotorZ();
 810126c:	f000 f9ce 	bl	810160c <initMotorZ>
}
 8101270:	bf00      	nop
 8101272:	bd80      	pop	{r7, pc}

08101274 <move_to_X_and_Z>:

uint8_t move_to_X_and_Z(int16_t posX, int16_t posZ)
{
 8101274:	b580      	push	{r7, lr}
 8101276:	b082      	sub	sp, #8
 8101278:	af00      	add	r7, sp, #0
 810127a:	4603      	mov	r3, r0
 810127c:	460a      	mov	r2, r1
 810127e:	80fb      	strh	r3, [r7, #6]
 8101280:	4613      	mov	r3, r2
 8101282:	80bb      	strh	r3, [r7, #4]
	move_to_posX(posX);
 8101284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101288:	4618      	mov	r0, r3
 810128a:	f7ff f9cb 	bl	8100624 <__aeabi_i2d>
 810128e:	4602      	mov	r2, r0
 8101290:	460b      	mov	r3, r1
 8101292:	ec43 2b10 	vmov	d0, r2, r3
 8101296:	f000 f891 	bl	81013bc <move_to_posX>
	send_msg((uint8_t*)"\r**** Motor X is at the final position! ****\n\r");
 810129a:	480b      	ldr	r0, [pc, #44]	; (81012c8 <move_to_X_and_Z+0x54>)
 810129c:	f001 fe28 	bl	8102ef0 <send_msg>

	move_to_posZ(posZ);
 81012a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 81012a4:	4618      	mov	r0, r3
 81012a6:	f7ff f9bd 	bl	8100624 <__aeabi_i2d>
 81012aa:	4602      	mov	r2, r0
 81012ac:	460b      	mov	r3, r1
 81012ae:	ec43 2b10 	vmov	d0, r2, r3
 81012b2:	f000 f9f3 	bl	810169c <move_to_posZ>
	send_msg((uint8_t*)"\r**** Motor Z is at the final position! ****\n\r");
 81012b6:	4805      	ldr	r0, [pc, #20]	; (81012cc <move_to_X_and_Z+0x58>)
 81012b8:	f001 fe1a 	bl	8102ef0 <send_msg>

	return 1;
 81012bc:	2301      	movs	r3, #1
}
 81012be:	4618      	mov	r0, r3
 81012c0:	3708      	adds	r7, #8
 81012c2:	46bd      	mov	sp, r7
 81012c4:	bd80      	pop	{r7, pc}
 81012c6:	bf00      	nop
 81012c8:	0810ae7c 	.word	0x0810ae7c
 81012cc:	0810aeac 	.word	0x0810aeac

081012d0 <HomeMotors>:

uint8_t HomeMotors(uint8_t homeX, uint8_t homeZ)
{
 81012d0:	b580      	push	{r7, lr}
 81012d2:	b082      	sub	sp, #8
 81012d4:	af00      	add	r7, sp, #0
 81012d6:	4603      	mov	r3, r0
 81012d8:	460a      	mov	r2, r1
 81012da:	71fb      	strb	r3, [r7, #7]
 81012dc:	4613      	mov	r3, r2
 81012de:	71bb      	strb	r3, [r7, #6]
	send_msg((uint8_t*)"\r#### HOMING Motor X №###\n\r");
 81012e0:	480e      	ldr	r0, [pc, #56]	; (810131c <HomeMotors+0x4c>)
 81012e2:	f001 fe05 	bl	8102ef0 <send_msg>
	if (homeX)
 81012e6:	79fb      	ldrb	r3, [r7, #7]
 81012e8:	2b00      	cmp	r3, #0
 81012ea:	d001      	beq.n	81012f0 <HomeMotors+0x20>
	{
		homeMotorX();
 81012ec:	f000 f82e 	bl	810134c <homeMotorX>
	}
	send_msg((uint8_t*)"\r######## Motor X is at HOME ########\n\r");
 81012f0:	480b      	ldr	r0, [pc, #44]	; (8101320 <HomeMotors+0x50>)
 81012f2:	f001 fdfd 	bl	8102ef0 <send_msg>

	HAL_Delay(250);
 81012f6:	20fa      	movs	r0, #250	; 0xfa
 81012f8:	f001 ff06 	bl	8103108 <HAL_Delay>
	send_msg((uint8_t*)"\r#### HOMING Motor Z ####\n\r");
 81012fc:	4809      	ldr	r0, [pc, #36]	; (8101324 <HomeMotors+0x54>)
 81012fe:	f001 fdf7 	bl	8102ef0 <send_msg>
	if (homeZ)
 8101302:	79bb      	ldrb	r3, [r7, #6]
 8101304:	2b00      	cmp	r3, #0
 8101306:	d001      	beq.n	810130c <HomeMotors+0x3c>
	{
		homeMotorZ();
 8101308:	f000 f990 	bl	810162c <homeMotorZ>
	}
	send_msg((uint8_t*)"\r######## Motor Z is at HOME ########\n\r");
 810130c:	4806      	ldr	r0, [pc, #24]	; (8101328 <HomeMotors+0x58>)
 810130e:	f001 fdef 	bl	8102ef0 <send_msg>
	return 1;
 8101312:	2301      	movs	r3, #1
}
 8101314:	4618      	mov	r0, r3
 8101316:	3708      	adds	r7, #8
 8101318:	46bd      	mov	sp, r7
 810131a:	bd80      	pop	{r7, pc}
 810131c:	0810aedc 	.word	0x0810aedc
 8101320:	0810aefc 	.word	0x0810aefc
 8101324:	0810af24 	.word	0x0810af24
 8101328:	0810af40 	.word	0x0810af40

0810132c <initMotorX>:
uint8_t i_X = 0;
uint8_t once_X = 1;

void initMotorX()
/* Initialises the necessary timers for motor X */
{
 810132c:	b580      	push	{r7, lr}
 810132e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8101330:	2108      	movs	r1, #8
 8101332:	4804      	ldr	r0, [pc, #16]	; (8101344 <initMotorX+0x18>)
 8101334:	f006 fdf4 	bl	8107f20 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8101338:	213c      	movs	r1, #60	; 0x3c
 810133a:	4803      	ldr	r0, [pc, #12]	; (8101348 <initMotorX+0x1c>)
 810133c:	f006 ffa4 	bl	8108288 <HAL_TIM_Encoder_Start_IT>
}
 8101340:	bf00      	nop
 8101342:	bd80      	pop	{r7, pc}
 8101344:	100001b0 	.word	0x100001b0
 8101348:	100001fc 	.word	0x100001fc

0810134c <homeMotorX>:

uint8_t homeMotorX()
/* homeMotorX: Moves the motor to the home position */
{
 810134c:	b580      	push	{r7, lr}
 810134e:	af00      	add	r7, sp, #0

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 130); 	// set PWM of motor
 8101350:	4b15      	ldr	r3, [pc, #84]	; (81013a8 <homeMotorX+0x5c>)
 8101352:	681b      	ldr	r3, [r3, #0]
 8101354:	2282      	movs	r2, #130	; 0x82
 8101356:	63da      	str	r2, [r3, #60]	; 0x3c

	set_Direction_X(); 									// counter-clockwise  | towards HOME TODO:Change name
 8101358:	f000 ff5e 	bl	8102218 <set_Direction_X>
	set_Ready_X(); 										// enables motor X TODO:Change name
 810135c:	f000 ff74 	bl	8102248 <set_Ready_X>

	while (!get_Homing_X())
 8101360:	bf00      	nop
 8101362:	f000 ffd1 	bl	8102308 <get_Homing_X>
 8101366:	4603      	mov	r3, r0
 8101368:	2b00      	cmp	r3, #0
 810136a:	d0fa      	beq.n	8101362 <homeMotorX+0x16>
	{

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0); 	// set PWM of motor
 810136c:	4b0e      	ldr	r3, [pc, #56]	; (81013a8 <homeMotorX+0x5c>)
 810136e:	681b      	ldr	r3, [r3, #0]
 8101370:	2200      	movs	r2, #0
 8101372:	63da      	str	r2, [r3, #60]	; 0x3c
	reset_Ready_X(); 									// disables motor
 8101374:	f000 ff74 	bl	8102260 <reset_Ready_X>
	HAL_Delay(1000);
 8101378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 810137c:	f001 fec4 	bl	8103108 <HAL_Delay>
	/* Initialise variables */
	position_mm_X = 0.0;
 8101380:	490a      	ldr	r1, [pc, #40]	; (81013ac <homeMotorX+0x60>)
 8101382:	f04f 0200 	mov.w	r2, #0
 8101386:	f04f 0300 	mov.w	r3, #0
 810138a:	e9c1 2300 	strd	r2, r3, [r1]
	counterX = 0;
 810138e:	4b08      	ldr	r3, [pc, #32]	; (81013b0 <homeMotorX+0x64>)
 8101390:	2200      	movs	r2, #0
 8101392:	601a      	str	r2, [r3, #0]
	i_X = 0;
 8101394:	4b07      	ldr	r3, [pc, #28]	; (81013b4 <homeMotorX+0x68>)
 8101396:	2200      	movs	r2, #0
 8101398:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0); 					// reset timer
 810139a:	4b07      	ldr	r3, [pc, #28]	; (81013b8 <homeMotorX+0x6c>)
 810139c:	681b      	ldr	r3, [r3, #0]
 810139e:	2200      	movs	r2, #0
 81013a0:	625a      	str	r2, [r3, #36]	; 0x24
	return 1;
 81013a2:	2301      	movs	r3, #1
}
 81013a4:	4618      	mov	r0, r3
 81013a6:	bd80      	pop	{r7, pc}
 81013a8:	100001b0 	.word	0x100001b0
 81013ac:	100000c8 	.word	0x100000c8
 81013b0:	100000c4 	.word	0x100000c4
 81013b4:	100000d4 	.word	0x100000d4
 81013b8:	100001fc 	.word	0x100001fc

081013bc <move_to_posX>:
/* move_to_posX: Moves the motor to a position X cm away from the home position
 *
 * @param posX: Centimetres away from the home position
 *  RANGE posX:  TODO: Determine it
 */
{
 81013bc:	b580      	push	{r7, lr}
 81013be:	b084      	sub	sp, #16
 81013c0:	af00      	add	r7, sp, #0
 81013c2:	ed87 0b00 	vstr	d0, [r7]
	counterX = __HAL_TIM_GET_COUNTER(&htim3);					// get timer value
 81013c6:	4b86      	ldr	r3, [pc, #536]	; (81015e0 <move_to_posX+0x224>)
 81013c8:	681b      	ldr	r3, [r3, #0]
 81013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81013cc:	4a85      	ldr	r2, [pc, #532]	; (81015e4 <move_to_posX+0x228>)
 81013ce:	6013      	str	r3, [r2, #0]
	position_mm_X = (double) ((counterX / 3855) + (i_X * 17)); 	// get position
 81013d0:	4b84      	ldr	r3, [pc, #528]	; (81015e4 <move_to_posX+0x228>)
 81013d2:	681b      	ldr	r3, [r3, #0]
 81013d4:	4a84      	ldr	r2, [pc, #528]	; (81015e8 <move_to_posX+0x22c>)
 81013d6:	fba2 2303 	umull	r2, r3, r2, r3
 81013da:	0ada      	lsrs	r2, r3, #11
 81013dc:	4b83      	ldr	r3, [pc, #524]	; (81015ec <move_to_posX+0x230>)
 81013de:	781b      	ldrb	r3, [r3, #0]
 81013e0:	4619      	mov	r1, r3
 81013e2:	460b      	mov	r3, r1
 81013e4:	011b      	lsls	r3, r3, #4
 81013e6:	440b      	add	r3, r1
 81013e8:	4413      	add	r3, r2
 81013ea:	4618      	mov	r0, r3
 81013ec:	f7ff f90a 	bl	8100604 <__aeabi_ui2d>
 81013f0:	4602      	mov	r2, r0
 81013f2:	460b      	mov	r3, r1
 81013f4:	497e      	ldr	r1, [pc, #504]	; (81015f0 <move_to_posX+0x234>)
 81013f6:	e9c1 2300 	strd	r2, r3, [r1]
	double delta = posX - position_mm_X;						// calculate delta
 81013fa:	4b7d      	ldr	r3, [pc, #500]	; (81015f0 <move_to_posX+0x234>)
 81013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101404:	f7fe ffc0 	bl	8100388 <__aeabi_dsub>
 8101408:	4602      	mov	r2, r0
 810140a:	460b      	mov	r3, r1
 810140c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 130); 			// adjust speed (prev val 140) 120 is a bit slow, but safe speed for not crashing during testing
 8101410:	4b78      	ldr	r3, [pc, #480]	; (81015f4 <move_to_posX+0x238>)
 8101412:	681b      	ldr	r3, [r3, #0]
 8101414:	2282      	movs	r2, #130	; 0x82
 8101416:	63da      	str	r2, [r3, #60]	; 0x3c

	set_Ready_X(); 												// enable motor
 8101418:	f000 ff16 	bl	8102248 <set_Ready_X>
	while (abs(delta) > 1.5) 										// accuracy of movement TODO: prove it
 810141c:	e0ca      	b.n	81015b4 <move_to_posX+0x1f8>
	{
		if (delta > 0){
 810141e:	f04f 0200 	mov.w	r2, #0
 8101422:	f04f 0300 	mov.w	r3, #0
 8101426:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810142a:	f7ff f9e3 	bl	81007f4 <__aeabi_dcmpgt>
 810142e:	4603      	mov	r3, r0
 8101430:	2b00      	cmp	r3, #0
 8101432:	d002      	beq.n	810143a <move_to_posX+0x7e>
			reset_Direction_X();} 								// clockwise | towards END
 8101434:	f000 fefc 	bl	8102230 <reset_Direction_X>
 8101438:	e00d      	b.n	8101456 <move_to_posX+0x9a>
		else if (delta < 0){
 810143a:	f04f 0200 	mov.w	r2, #0
 810143e:	f04f 0300 	mov.w	r3, #0
 8101442:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101446:	f7ff f9b7 	bl	81007b8 <__aeabi_dcmplt>
 810144a:	4603      	mov	r3, r0
 810144c:	2b00      	cmp	r3, #0
 810144e:	d100      	bne.n	8101452 <move_to_posX+0x96>
			set_Direction_X();}  								// counter-clockwise | towards HOME
		else{
			break;}
 8101450:	e0bb      	b.n	81015ca <move_to_posX+0x20e>
			set_Direction_X();}  								// counter-clockwise | towards HOME
 8101452:	f000 fee1 	bl	8102218 <set_Direction_X>

		counterX = __HAL_TIM_GET_COUNTER(&htim3);				// update counter
 8101456:	4b62      	ldr	r3, [pc, #392]	; (81015e0 <move_to_posX+0x224>)
 8101458:	681b      	ldr	r3, [r3, #0]
 810145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810145c:	4a61      	ldr	r2, [pc, #388]	; (81015e4 <move_to_posX+0x228>)
 810145e:	6013      	str	r3, [r2, #0]
		/* Some Magic */
		if (counterX > 61680 && delta > 0 && once_X){
 8101460:	4b60      	ldr	r3, [pc, #384]	; (81015e4 <move_to_posX+0x228>)
 8101462:	681b      	ldr	r3, [r3, #0]
 8101464:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8101468:	4293      	cmp	r3, r2
 810146a:	d912      	bls.n	8101492 <move_to_posX+0xd6>
 810146c:	f04f 0200 	mov.w	r2, #0
 8101470:	f04f 0300 	mov.w	r3, #0
 8101474:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101478:	f7ff f9bc 	bl	81007f4 <__aeabi_dcmpgt>
 810147c:	4603      	mov	r3, r0
 810147e:	2b00      	cmp	r3, #0
 8101480:	d007      	beq.n	8101492 <move_to_posX+0xd6>
 8101482:	4b5d      	ldr	r3, [pc, #372]	; (81015f8 <move_to_posX+0x23c>)
 8101484:	781b      	ldrb	r3, [r3, #0]
 8101486:	2b00      	cmp	r3, #0
 8101488:	d003      	beq.n	8101492 <move_to_posX+0xd6>
			once_X = 0;}
 810148a:	4b5b      	ldr	r3, [pc, #364]	; (81015f8 <move_to_posX+0x23c>)
 810148c:	2200      	movs	r2, #0
 810148e:	701a      	strb	r2, [r3, #0]
 8101490:	e051      	b.n	8101536 <move_to_posX+0x17a>
		else if (counterX < 3855 && delta > 0 && !once_X){
 8101492:	4b54      	ldr	r3, [pc, #336]	; (81015e4 <move_to_posX+0x228>)
 8101494:	681b      	ldr	r3, [r3, #0]
 8101496:	f640 720e 	movw	r2, #3854	; 0xf0e
 810149a:	4293      	cmp	r3, r2
 810149c:	d818      	bhi.n	81014d0 <move_to_posX+0x114>
 810149e:	f04f 0200 	mov.w	r2, #0
 81014a2:	f04f 0300 	mov.w	r3, #0
 81014a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81014aa:	f7ff f9a3 	bl	81007f4 <__aeabi_dcmpgt>
 81014ae:	4603      	mov	r3, r0
 81014b0:	2b00      	cmp	r3, #0
 81014b2:	d00d      	beq.n	81014d0 <move_to_posX+0x114>
 81014b4:	4b50      	ldr	r3, [pc, #320]	; (81015f8 <move_to_posX+0x23c>)
 81014b6:	781b      	ldrb	r3, [r3, #0]
 81014b8:	2b00      	cmp	r3, #0
 81014ba:	d109      	bne.n	81014d0 <move_to_posX+0x114>
			once_X = 1, i_X += 1;}
 81014bc:	4b4e      	ldr	r3, [pc, #312]	; (81015f8 <move_to_posX+0x23c>)
 81014be:	2201      	movs	r2, #1
 81014c0:	701a      	strb	r2, [r3, #0]
 81014c2:	4b4a      	ldr	r3, [pc, #296]	; (81015ec <move_to_posX+0x230>)
 81014c4:	781b      	ldrb	r3, [r3, #0]
 81014c6:	3301      	adds	r3, #1
 81014c8:	b2da      	uxtb	r2, r3
 81014ca:	4b48      	ldr	r3, [pc, #288]	; (81015ec <move_to_posX+0x230>)
 81014cc:	701a      	strb	r2, [r3, #0]
 81014ce:	e032      	b.n	8101536 <move_to_posX+0x17a>
		else if (counterX < 3855 && delta < 0){
 81014d0:	4b44      	ldr	r3, [pc, #272]	; (81015e4 <move_to_posX+0x228>)
 81014d2:	681b      	ldr	r3, [r3, #0]
 81014d4:	f640 720e 	movw	r2, #3854	; 0xf0e
 81014d8:	4293      	cmp	r3, r2
 81014da:	d80e      	bhi.n	81014fa <move_to_posX+0x13e>
 81014dc:	f04f 0200 	mov.w	r2, #0
 81014e0:	f04f 0300 	mov.w	r3, #0
 81014e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81014e8:	f7ff f966 	bl	81007b8 <__aeabi_dcmplt>
 81014ec:	4603      	mov	r3, r0
 81014ee:	2b00      	cmp	r3, #0
 81014f0:	d003      	beq.n	81014fa <move_to_posX+0x13e>
			once_X = 0;}
 81014f2:	4b41      	ldr	r3, [pc, #260]	; (81015f8 <move_to_posX+0x23c>)
 81014f4:	2200      	movs	r2, #0
 81014f6:	701a      	strb	r2, [r3, #0]
 81014f8:	e01d      	b.n	8101536 <move_to_posX+0x17a>
		else if (counterX > 61680 && delta < 0 && !once_X){
 81014fa:	4b3a      	ldr	r3, [pc, #232]	; (81015e4 <move_to_posX+0x228>)
 81014fc:	681b      	ldr	r3, [r3, #0]
 81014fe:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8101502:	4293      	cmp	r3, r2
 8101504:	d917      	bls.n	8101536 <move_to_posX+0x17a>
 8101506:	f04f 0200 	mov.w	r2, #0
 810150a:	f04f 0300 	mov.w	r3, #0
 810150e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101512:	f7ff f951 	bl	81007b8 <__aeabi_dcmplt>
 8101516:	4603      	mov	r3, r0
 8101518:	2b00      	cmp	r3, #0
 810151a:	d00c      	beq.n	8101536 <move_to_posX+0x17a>
 810151c:	4b36      	ldr	r3, [pc, #216]	; (81015f8 <move_to_posX+0x23c>)
 810151e:	781b      	ldrb	r3, [r3, #0]
 8101520:	2b00      	cmp	r3, #0
 8101522:	d108      	bne.n	8101536 <move_to_posX+0x17a>
			once_X = 1, i_X -= 1;}
 8101524:	4b34      	ldr	r3, [pc, #208]	; (81015f8 <move_to_posX+0x23c>)
 8101526:	2201      	movs	r2, #1
 8101528:	701a      	strb	r2, [r3, #0]
 810152a:	4b30      	ldr	r3, [pc, #192]	; (81015ec <move_to_posX+0x230>)
 810152c:	781b      	ldrb	r3, [r3, #0]
 810152e:	3b01      	subs	r3, #1
 8101530:	b2da      	uxtb	r2, r3
 8101532:	4b2e      	ldr	r3, [pc, #184]	; (81015ec <move_to_posX+0x230>)
 8101534:	701a      	strb	r2, [r3, #0]
		/* End of Magic */

		position_mm_X = (double) ((counterX / 3855) + (i_X * 17));	// update position
 8101536:	4b2b      	ldr	r3, [pc, #172]	; (81015e4 <move_to_posX+0x228>)
 8101538:	681b      	ldr	r3, [r3, #0]
 810153a:	4a2b      	ldr	r2, [pc, #172]	; (81015e8 <move_to_posX+0x22c>)
 810153c:	fba2 2303 	umull	r2, r3, r2, r3
 8101540:	0ada      	lsrs	r2, r3, #11
 8101542:	4b2a      	ldr	r3, [pc, #168]	; (81015ec <move_to_posX+0x230>)
 8101544:	781b      	ldrb	r3, [r3, #0]
 8101546:	4619      	mov	r1, r3
 8101548:	460b      	mov	r3, r1
 810154a:	011b      	lsls	r3, r3, #4
 810154c:	440b      	add	r3, r1
 810154e:	4413      	add	r3, r2
 8101550:	4618      	mov	r0, r3
 8101552:	f7ff f857 	bl	8100604 <__aeabi_ui2d>
 8101556:	4602      	mov	r2, r0
 8101558:	460b      	mov	r3, r1
 810155a:	4925      	ldr	r1, [pc, #148]	; (81015f0 <move_to_posX+0x234>)
 810155c:	e9c1 2300 	strd	r2, r3, [r1]
		delta = posX - position_mm_X;								// update delta
 8101560:	4b23      	ldr	r3, [pc, #140]	; (81015f0 <move_to_posX+0x234>)
 8101562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101566:	e9d7 0100 	ldrd	r0, r1, [r7]
 810156a:	f7fe ff0d 	bl	8100388 <__aeabi_dsub>
 810156e:	4602      	mov	r2, r0
 8101570:	460b      	mov	r3, r1
 8101572:	e9c7 2302 	strd	r2, r3, [r7, #8]

		// limit msg sending every Nth operation
		if (msg_counter_x % 200000 == 0)							// TODO: move 10 to a define freq of msging
 8101576:	4b21      	ldr	r3, [pc, #132]	; (81015fc <move_to_posX+0x240>)
 8101578:	681a      	ldr	r2, [r3, #0]
 810157a:	4b21      	ldr	r3, [pc, #132]	; (8101600 <move_to_posX+0x244>)
 810157c:	fb83 1302 	smull	r1, r3, r3, r2
 8101580:	1399      	asrs	r1, r3, #14
 8101582:	17d3      	asrs	r3, r2, #31
 8101584:	1acb      	subs	r3, r1, r3
 8101586:	491f      	ldr	r1, [pc, #124]	; (8101604 <move_to_posX+0x248>)
 8101588:	fb01 f303 	mul.w	r3, r1, r3
 810158c:	1ad3      	subs	r3, r2, r3
 810158e:	2b00      	cmp	r3, #0
 8101590:	d10b      	bne.n	81015aa <move_to_posX+0x1ee>
		{
			send_msg_data((uint8_t*)"\rCurrently @ Pos X: %d\n\r", (int)position_mm_X);
 8101592:	4b17      	ldr	r3, [pc, #92]	; (81015f0 <move_to_posX+0x234>)
 8101594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101598:	4610      	mov	r0, r2
 810159a:	4619      	mov	r1, r3
 810159c:	f7ff f934 	bl	8100808 <__aeabi_d2iz>
 81015a0:	4603      	mov	r3, r0
 81015a2:	4619      	mov	r1, r3
 81015a4:	4818      	ldr	r0, [pc, #96]	; (8101608 <move_to_posX+0x24c>)
 81015a6:	f001 fcba 	bl	8102f1e <send_msg_data>
		}
		msg_counter_x++;
 81015aa:	4b14      	ldr	r3, [pc, #80]	; (81015fc <move_to_posX+0x240>)
 81015ac:	681b      	ldr	r3, [r3, #0]
 81015ae:	3301      	adds	r3, #1
 81015b0:	4a12      	ldr	r2, [pc, #72]	; (81015fc <move_to_posX+0x240>)
 81015b2:	6013      	str	r3, [r2, #0]
	while (abs(delta) > 1.5) 										// accuracy of movement TODO: prove it
 81015b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81015b8:	f7ff f926 	bl	8100808 <__aeabi_d2iz>
 81015bc:	4603      	mov	r3, r0
 81015be:	2b00      	cmp	r3, #0
 81015c0:	bfb8      	it	lt
 81015c2:	425b      	neglt	r3, r3
 81015c4:	2b01      	cmp	r3, #1
 81015c6:	f73f af2a 	bgt.w	810141e <move_to_posX+0x62>

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0);					// set PWM to 0
 81015ca:	4b0a      	ldr	r3, [pc, #40]	; (81015f4 <move_to_posX+0x238>)
 81015cc:	681b      	ldr	r3, [r3, #0]
 81015ce:	2200      	movs	r2, #0
 81015d0:	63da      	str	r2, [r3, #60]	; 0x3c
	reset_Ready_X();
 81015d2:	f000 fe45 	bl	8102260 <reset_Ready_X>
	return 1;
 81015d6:	2301      	movs	r3, #1
}
 81015d8:	4618      	mov	r0, r3
 81015da:	3710      	adds	r7, #16
 81015dc:	46bd      	mov	sp, r7
 81015de:	bd80      	pop	{r7, pc}
 81015e0:	100001fc 	.word	0x100001fc
 81015e4:	100000c4 	.word	0x100000c4
 81015e8:	88008801 	.word	0x88008801
 81015ec:	100000d4 	.word	0x100000d4
 81015f0:	100000c8 	.word	0x100000c8
 81015f4:	100001b0 	.word	0x100001b0
 81015f8:	1000000c 	.word	0x1000000c
 81015fc:	100000d0 	.word	0x100000d0
 8101600:	14f8b589 	.word	0x14f8b589
 8101604:	00030d40 	.word	0x00030d40
 8101608:	0810af68 	.word	0x0810af68

0810160c <initMotorZ>:
uint8_t i_Z = 0;
uint8_t once_Z = 1;

void initMotorZ()
/* Initialises the necessary timers for motor Z */
{
 810160c:	b580      	push	{r7, lr}
 810160e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8101610:	210c      	movs	r1, #12
 8101612:	4804      	ldr	r0, [pc, #16]	; (8101624 <initMotorZ+0x18>)
 8101614:	f006 fc84 	bl	8107f20 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8101618:	213c      	movs	r1, #60	; 0x3c
 810161a:	4803      	ldr	r0, [pc, #12]	; (8101628 <initMotorZ+0x1c>)
 810161c:	f006 fe34 	bl	8108288 <HAL_TIM_Encoder_Start_IT>
}
 8101620:	bf00      	nop
 8101622:	bd80      	pop	{r7, pc}
 8101624:	100001b0 	.word	0x100001b0
 8101628:	10000248 	.word	0x10000248

0810162c <homeMotorZ>:

uint8_t homeMotorZ()
/* homeMotorZ: Moves the motor to the home position */
{
 810162c:	b580      	push	{r7, lr}
 810162e:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 115); 	// set PWM of motor
 8101630:	4b15      	ldr	r3, [pc, #84]	; (8101688 <homeMotorZ+0x5c>)
 8101632:	681b      	ldr	r3, [r3, #0]
 8101634:	2273      	movs	r2, #115	; 0x73
 8101636:	641a      	str	r2, [r3, #64]	; 0x40

	set_Direction_Z(); 									// counter-clockwise | towards HOME TODO:Change name
 8101638:	f000 fe1e 	bl	8102278 <set_Direction_Z>
	set_Ready_Z(); 										// enable motor TODO:Change name
 810163c:	f000 fe34 	bl	81022a8 <set_Ready_Z>


	while (!get_Homing_Z()) 							// wait until home-switch is hit
 8101640:	bf00      	nop
 8101642:	f000 fe73 	bl	810232c <get_Homing_Z>
 8101646:	4603      	mov	r3, r0
 8101648:	2b00      	cmp	r3, #0
 810164a:	d0fa      	beq.n	8101642 <homeMotorZ+0x16>
	{

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 0); 	// set PWM of motor
 810164c:	4b0e      	ldr	r3, [pc, #56]	; (8101688 <homeMotorZ+0x5c>)
 810164e:	681b      	ldr	r3, [r3, #0]
 8101650:	2200      	movs	r2, #0
 8101652:	641a      	str	r2, [r3, #64]	; 0x40
	reset_Ready_Z(); 									//disable motor
 8101654:	f000 fe34 	bl	81022c0 <reset_Ready_Z>
	HAL_Delay(1000);
 8101658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 810165c:	f001 fd54 	bl	8103108 <HAL_Delay>
	/* Initialise variables */
	position_mm_Z = 0.0;
 8101660:	490a      	ldr	r1, [pc, #40]	; (810168c <homeMotorZ+0x60>)
 8101662:	f04f 0200 	mov.w	r2, #0
 8101666:	f04f 0300 	mov.w	r3, #0
 810166a:	e9c1 2300 	strd	r2, r3, [r1]
	counterZ = 0;
 810166e:	4b08      	ldr	r3, [pc, #32]	; (8101690 <homeMotorZ+0x64>)
 8101670:	2200      	movs	r2, #0
 8101672:	601a      	str	r2, [r3, #0]
	i_Z = 0;
 8101674:	4b07      	ldr	r3, [pc, #28]	; (8101694 <homeMotorZ+0x68>)
 8101676:	2200      	movs	r2, #0
 8101678:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim4, 0); 					// reset timer
 810167a:	4b07      	ldr	r3, [pc, #28]	; (8101698 <homeMotorZ+0x6c>)
 810167c:	681b      	ldr	r3, [r3, #0]
 810167e:	2200      	movs	r2, #0
 8101680:	625a      	str	r2, [r3, #36]	; 0x24
	return 1;
 8101682:	2301      	movs	r3, #1
}
 8101684:	4618      	mov	r0, r3
 8101686:	bd80      	pop	{r7, pc}
 8101688:	100001b0 	.word	0x100001b0
 810168c:	100000e0 	.word	0x100000e0
 8101690:	100000d8 	.word	0x100000d8
 8101694:	100000ec 	.word	0x100000ec
 8101698:	10000248 	.word	0x10000248

0810169c <move_to_posZ>:
/* move_to_posZ: Moves the motor to a position Z cm away from the home position
 *
 * @param posZ: Centimetres away from the home position
 *  RANGE posZ:  1 - 53 cm
 */
{
 810169c:	b580      	push	{r7, lr}
 810169e:	b084      	sub	sp, #16
 81016a0:	af00      	add	r7, sp, #0
 81016a2:	ed87 0b00 	vstr	d0, [r7]
	counterZ = __HAL_TIM_GET_COUNTER(&htim4);					// get timer value
 81016a6:	4b89      	ldr	r3, [pc, #548]	; (81018cc <move_to_posZ+0x230>)
 81016a8:	681b      	ldr	r3, [r3, #0]
 81016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81016ac:	4a88      	ldr	r2, [pc, #544]	; (81018d0 <move_to_posZ+0x234>)
 81016ae:	6013      	str	r3, [r2, #0]
	position_mm_Z = (double) ((counterZ / 3855) + (i_Z * 17));	// get position
 81016b0:	4b87      	ldr	r3, [pc, #540]	; (81018d0 <move_to_posZ+0x234>)
 81016b2:	681b      	ldr	r3, [r3, #0]
 81016b4:	4a87      	ldr	r2, [pc, #540]	; (81018d4 <move_to_posZ+0x238>)
 81016b6:	fba2 2303 	umull	r2, r3, r2, r3
 81016ba:	0ada      	lsrs	r2, r3, #11
 81016bc:	4b86      	ldr	r3, [pc, #536]	; (81018d8 <move_to_posZ+0x23c>)
 81016be:	781b      	ldrb	r3, [r3, #0]
 81016c0:	4619      	mov	r1, r3
 81016c2:	460b      	mov	r3, r1
 81016c4:	011b      	lsls	r3, r3, #4
 81016c6:	440b      	add	r3, r1
 81016c8:	4413      	add	r3, r2
 81016ca:	4618      	mov	r0, r3
 81016cc:	f7fe ff9a 	bl	8100604 <__aeabi_ui2d>
 81016d0:	4602      	mov	r2, r0
 81016d2:	460b      	mov	r3, r1
 81016d4:	4981      	ldr	r1, [pc, #516]	; (81018dc <move_to_posZ+0x240>)
 81016d6:	e9c1 2300 	strd	r2, r3, [r1]
	double delta = posZ - position_mm_Z;						// calculate delta
 81016da:	4b80      	ldr	r3, [pc, #512]	; (81018dc <move_to_posZ+0x240>)
 81016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 81016e4:	f7fe fe50 	bl	8100388 <__aeabi_dsub>
 81016e8:	4602      	mov	r2, r0
 81016ea:	460b      	mov	r3, r1
 81016ec:	e9c7 2302 	strd	r2, r3, [r7, #8]

	set_Ready_Z(); 												// enable motor
 81016f0:	f000 fdda 	bl	81022a8 <set_Ready_Z>
	while (abs(delta) > 1.5)										// desired accuracy in cm? TODO:prove it
 81016f4:	e0d3      	b.n	810189e <move_to_posZ+0x202>
	{
		if (delta > 0)
 81016f6:	f04f 0200 	mov.w	r2, #0
 81016fa:	f04f 0300 	mov.w	r3, #0
 81016fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101702:	f7ff f877 	bl	81007f4 <__aeabi_dcmpgt>
 8101706:	4603      	mov	r3, r0
 8101708:	2b00      	cmp	r3, #0
 810170a:	d007      	beq.n	810171c <move_to_posZ+0x80>
		{
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 380);	// adjust speed (prev val 340)
 810170c:	4b74      	ldr	r3, [pc, #464]	; (81018e0 <move_to_posZ+0x244>)
 810170e:	681b      	ldr	r3, [r3, #0]
 8101710:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8101714:	641a      	str	r2, [r3, #64]	; 0x40
			reset_Direction_Z(); 								// clockwise | towards END/up
 8101716:	f000 fdbb 	bl	8102290 <reset_Direction_Z>
 810171a:	e011      	b.n	8101740 <move_to_posZ+0xa4>
		}
		else if (delta < 0)
 810171c:	f04f 0200 	mov.w	r2, #0
 8101720:	f04f 0300 	mov.w	r3, #0
 8101724:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101728:	f7ff f846 	bl	81007b8 <__aeabi_dcmplt>
 810172c:	4603      	mov	r3, r0
 810172e:	2b00      	cmp	r3, #0
 8101730:	d100      	bne.n	8101734 <move_to_posZ+0x98>
		{
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 100); 	// adjust speed (prev val 120)
			set_Direction_Z(); 									// counter-clockwise | towards HOME/down
		}
		else
			break;
 8101732:	e0bf      	b.n	81018b4 <move_to_posZ+0x218>
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 100); 	// adjust speed (prev val 120)
 8101734:	4b6a      	ldr	r3, [pc, #424]	; (81018e0 <move_to_posZ+0x244>)
 8101736:	681b      	ldr	r3, [r3, #0]
 8101738:	2264      	movs	r2, #100	; 0x64
 810173a:	641a      	str	r2, [r3, #64]	; 0x40
			set_Direction_Z(); 									// counter-clockwise | towards HOME/down
 810173c:	f000 fd9c 	bl	8102278 <set_Direction_Z>

		counterZ = __HAL_TIM_GET_COUNTER(&htim4);				// update counter
 8101740:	4b62      	ldr	r3, [pc, #392]	; (81018cc <move_to_posZ+0x230>)
 8101742:	681b      	ldr	r3, [r3, #0]
 8101744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101746:	4a62      	ldr	r2, [pc, #392]	; (81018d0 <move_to_posZ+0x234>)
 8101748:	6013      	str	r3, [r2, #0]
		/* Some Magic */
		if (counterZ > 61680 && delta > 0 && once_Z){
 810174a:	4b61      	ldr	r3, [pc, #388]	; (81018d0 <move_to_posZ+0x234>)
 810174c:	681b      	ldr	r3, [r3, #0]
 810174e:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8101752:	4293      	cmp	r3, r2
 8101754:	d912      	bls.n	810177c <move_to_posZ+0xe0>
 8101756:	f04f 0200 	mov.w	r2, #0
 810175a:	f04f 0300 	mov.w	r3, #0
 810175e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101762:	f7ff f847 	bl	81007f4 <__aeabi_dcmpgt>
 8101766:	4603      	mov	r3, r0
 8101768:	2b00      	cmp	r3, #0
 810176a:	d007      	beq.n	810177c <move_to_posZ+0xe0>
 810176c:	4b5d      	ldr	r3, [pc, #372]	; (81018e4 <move_to_posZ+0x248>)
 810176e:	781b      	ldrb	r3, [r3, #0]
 8101770:	2b00      	cmp	r3, #0
 8101772:	d003      	beq.n	810177c <move_to_posZ+0xe0>
			once_Z = 0;}
 8101774:	4b5b      	ldr	r3, [pc, #364]	; (81018e4 <move_to_posZ+0x248>)
 8101776:	2200      	movs	r2, #0
 8101778:	701a      	strb	r2, [r3, #0]
 810177a:	e051      	b.n	8101820 <move_to_posZ+0x184>
		else if (counterZ < 3855 && delta > 0 && !once_Z){
 810177c:	4b54      	ldr	r3, [pc, #336]	; (81018d0 <move_to_posZ+0x234>)
 810177e:	681b      	ldr	r3, [r3, #0]
 8101780:	f640 720e 	movw	r2, #3854	; 0xf0e
 8101784:	4293      	cmp	r3, r2
 8101786:	d818      	bhi.n	81017ba <move_to_posZ+0x11e>
 8101788:	f04f 0200 	mov.w	r2, #0
 810178c:	f04f 0300 	mov.w	r3, #0
 8101790:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101794:	f7ff f82e 	bl	81007f4 <__aeabi_dcmpgt>
 8101798:	4603      	mov	r3, r0
 810179a:	2b00      	cmp	r3, #0
 810179c:	d00d      	beq.n	81017ba <move_to_posZ+0x11e>
 810179e:	4b51      	ldr	r3, [pc, #324]	; (81018e4 <move_to_posZ+0x248>)
 81017a0:	781b      	ldrb	r3, [r3, #0]
 81017a2:	2b00      	cmp	r3, #0
 81017a4:	d109      	bne.n	81017ba <move_to_posZ+0x11e>
			once_Z = 1, i_Z += 1;}
 81017a6:	4b4f      	ldr	r3, [pc, #316]	; (81018e4 <move_to_posZ+0x248>)
 81017a8:	2201      	movs	r2, #1
 81017aa:	701a      	strb	r2, [r3, #0]
 81017ac:	4b4a      	ldr	r3, [pc, #296]	; (81018d8 <move_to_posZ+0x23c>)
 81017ae:	781b      	ldrb	r3, [r3, #0]
 81017b0:	3301      	adds	r3, #1
 81017b2:	b2da      	uxtb	r2, r3
 81017b4:	4b48      	ldr	r3, [pc, #288]	; (81018d8 <move_to_posZ+0x23c>)
 81017b6:	701a      	strb	r2, [r3, #0]
 81017b8:	e032      	b.n	8101820 <move_to_posZ+0x184>
		else if (counterZ < 3855 && delta < 0){
 81017ba:	4b45      	ldr	r3, [pc, #276]	; (81018d0 <move_to_posZ+0x234>)
 81017bc:	681b      	ldr	r3, [r3, #0]
 81017be:	f640 720e 	movw	r2, #3854	; 0xf0e
 81017c2:	4293      	cmp	r3, r2
 81017c4:	d80e      	bhi.n	81017e4 <move_to_posZ+0x148>
 81017c6:	f04f 0200 	mov.w	r2, #0
 81017ca:	f04f 0300 	mov.w	r3, #0
 81017ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81017d2:	f7fe fff1 	bl	81007b8 <__aeabi_dcmplt>
 81017d6:	4603      	mov	r3, r0
 81017d8:	2b00      	cmp	r3, #0
 81017da:	d003      	beq.n	81017e4 <move_to_posZ+0x148>
			once_Z = 0;}
 81017dc:	4b41      	ldr	r3, [pc, #260]	; (81018e4 <move_to_posZ+0x248>)
 81017de:	2200      	movs	r2, #0
 81017e0:	701a      	strb	r2, [r3, #0]
 81017e2:	e01d      	b.n	8101820 <move_to_posZ+0x184>
		else if (counterZ > 61680 && delta < 0 && !once_Z){
 81017e4:	4b3a      	ldr	r3, [pc, #232]	; (81018d0 <move_to_posZ+0x234>)
 81017e6:	681b      	ldr	r3, [r3, #0]
 81017e8:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 81017ec:	4293      	cmp	r3, r2
 81017ee:	d917      	bls.n	8101820 <move_to_posZ+0x184>
 81017f0:	f04f 0200 	mov.w	r2, #0
 81017f4:	f04f 0300 	mov.w	r3, #0
 81017f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81017fc:	f7fe ffdc 	bl	81007b8 <__aeabi_dcmplt>
 8101800:	4603      	mov	r3, r0
 8101802:	2b00      	cmp	r3, #0
 8101804:	d00c      	beq.n	8101820 <move_to_posZ+0x184>
 8101806:	4b37      	ldr	r3, [pc, #220]	; (81018e4 <move_to_posZ+0x248>)
 8101808:	781b      	ldrb	r3, [r3, #0]
 810180a:	2b00      	cmp	r3, #0
 810180c:	d108      	bne.n	8101820 <move_to_posZ+0x184>
			once_Z = 1, i_Z -= 1;}
 810180e:	4b35      	ldr	r3, [pc, #212]	; (81018e4 <move_to_posZ+0x248>)
 8101810:	2201      	movs	r2, #1
 8101812:	701a      	strb	r2, [r3, #0]
 8101814:	4b30      	ldr	r3, [pc, #192]	; (81018d8 <move_to_posZ+0x23c>)
 8101816:	781b      	ldrb	r3, [r3, #0]
 8101818:	3b01      	subs	r3, #1
 810181a:	b2da      	uxtb	r2, r3
 810181c:	4b2e      	ldr	r3, [pc, #184]	; (81018d8 <move_to_posZ+0x23c>)
 810181e:	701a      	strb	r2, [r3, #0]
		/* End of Magic */

		position_mm_Z = (double) ((counterZ / 3855) + (i_Z * 17));  // update position
 8101820:	4b2b      	ldr	r3, [pc, #172]	; (81018d0 <move_to_posZ+0x234>)
 8101822:	681b      	ldr	r3, [r3, #0]
 8101824:	4a2b      	ldr	r2, [pc, #172]	; (81018d4 <move_to_posZ+0x238>)
 8101826:	fba2 2303 	umull	r2, r3, r2, r3
 810182a:	0ada      	lsrs	r2, r3, #11
 810182c:	4b2a      	ldr	r3, [pc, #168]	; (81018d8 <move_to_posZ+0x23c>)
 810182e:	781b      	ldrb	r3, [r3, #0]
 8101830:	4619      	mov	r1, r3
 8101832:	460b      	mov	r3, r1
 8101834:	011b      	lsls	r3, r3, #4
 8101836:	440b      	add	r3, r1
 8101838:	4413      	add	r3, r2
 810183a:	4618      	mov	r0, r3
 810183c:	f7fe fee2 	bl	8100604 <__aeabi_ui2d>
 8101840:	4602      	mov	r2, r0
 8101842:	460b      	mov	r3, r1
 8101844:	4925      	ldr	r1, [pc, #148]	; (81018dc <move_to_posZ+0x240>)
 8101846:	e9c1 2300 	strd	r2, r3, [r1]
		delta = posZ - position_mm_Z;								// update delta
 810184a:	4b24      	ldr	r3, [pc, #144]	; (81018dc <move_to_posZ+0x240>)
 810184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101850:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101854:	f7fe fd98 	bl	8100388 <__aeabi_dsub>
 8101858:	4602      	mov	r2, r0
 810185a:	460b      	mov	r3, r1
 810185c:	e9c7 2302 	strd	r2, r3, [r7, #8]

		// limit msg sending every Nth itteration
		if (msg_counter_z % 200000 == 0)							// TODO: move 200000 to a define freq of msging
 8101860:	4b21      	ldr	r3, [pc, #132]	; (81018e8 <move_to_posZ+0x24c>)
 8101862:	681a      	ldr	r2, [r3, #0]
 8101864:	4b21      	ldr	r3, [pc, #132]	; (81018ec <move_to_posZ+0x250>)
 8101866:	fb83 1302 	smull	r1, r3, r3, r2
 810186a:	1399      	asrs	r1, r3, #14
 810186c:	17d3      	asrs	r3, r2, #31
 810186e:	1acb      	subs	r3, r1, r3
 8101870:	491f      	ldr	r1, [pc, #124]	; (81018f0 <move_to_posZ+0x254>)
 8101872:	fb01 f303 	mul.w	r3, r1, r3
 8101876:	1ad3      	subs	r3, r2, r3
 8101878:	2b00      	cmp	r3, #0
 810187a:	d10b      	bne.n	8101894 <move_to_posZ+0x1f8>
		{
			send_msg_data((uint8_t*)"\rCurrently @ Pos Z: %d\n\r", (int)position_mm_Z);
 810187c:	4b17      	ldr	r3, [pc, #92]	; (81018dc <move_to_posZ+0x240>)
 810187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101882:	4610      	mov	r0, r2
 8101884:	4619      	mov	r1, r3
 8101886:	f7fe ffbf 	bl	8100808 <__aeabi_d2iz>
 810188a:	4603      	mov	r3, r0
 810188c:	4619      	mov	r1, r3
 810188e:	4819      	ldr	r0, [pc, #100]	; (81018f4 <move_to_posZ+0x258>)
 8101890:	f001 fb45 	bl	8102f1e <send_msg_data>
		}
		msg_counter_z++;
 8101894:	4b14      	ldr	r3, [pc, #80]	; (81018e8 <move_to_posZ+0x24c>)
 8101896:	681b      	ldr	r3, [r3, #0]
 8101898:	3301      	adds	r3, #1
 810189a:	4a13      	ldr	r2, [pc, #76]	; (81018e8 <move_to_posZ+0x24c>)
 810189c:	6013      	str	r3, [r2, #0]
	while (abs(delta) > 1.5)										// desired accuracy in cm? TODO:prove it
 810189e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81018a2:	f7fe ffb1 	bl	8100808 <__aeabi_d2iz>
 81018a6:	4603      	mov	r3, r0
 81018a8:	2b00      	cmp	r3, #0
 81018aa:	bfb8      	it	lt
 81018ac:	425b      	neglt	r3, r3
 81018ae:	2b01      	cmp	r3, #1
 81018b0:	f73f af21 	bgt.w	81016f6 <move_to_posZ+0x5a>

	}
	reset_Direction_Z(); 					// reverses the direction to stop it from dropping due gravity
 81018b4:	f000 fcec 	bl	8102290 <reset_Direction_Z>
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 200); //  PWM to lower value to improve power consumption
 81018b8:	4b09      	ldr	r3, [pc, #36]	; (81018e0 <move_to_posZ+0x244>)
 81018ba:	681b      	ldr	r3, [r3, #0]
 81018bc:	22c8      	movs	r2, #200	; 0xc8
 81018be:	641a      	str	r2, [r3, #64]	; 0x40
	return 1;
 81018c0:	2301      	movs	r3, #1
}
 81018c2:	4618      	mov	r0, r3
 81018c4:	3710      	adds	r7, #16
 81018c6:	46bd      	mov	sp, r7
 81018c8:	bd80      	pop	{r7, pc}
 81018ca:	bf00      	nop
 81018cc:	10000248 	.word	0x10000248
 81018d0:	100000d8 	.word	0x100000d8
 81018d4:	88008801 	.word	0x88008801
 81018d8:	100000ec 	.word	0x100000ec
 81018dc:	100000e0 	.word	0x100000e0
 81018e0:	100001b0 	.word	0x100001b0
 81018e4:	1000000d 	.word	0x1000000d
 81018e8:	100000e8 	.word	0x100000e8
 81018ec:	14f8b589 	.word	0x14f8b589
 81018f0:	00030d40 	.word	0x00030d40
 81018f4:	0810af84 	.word	0x0810af84

081018f8 <set_Rotate_Servo>:
/* set_Rotate_Servo: Sets the angle of the servo controlling the end-effector rotator
 *
 * @param angle: Angle of rotation in degrees
 * Acceptable values between 1 - 23 degrees
 */
{
 81018f8:	b480      	push	{r7}
 81018fa:	b083      	sub	sp, #12
 81018fc:	af00      	add	r7, sp, #0
 81018fe:	ed87 0a01 	vstr	s0, [r7, #4]
	t_pulse_rotate = 10 * ((uint32_t) angle) + CONTROL_PULSE_MIN; 	// from data sheet of Parallax Standard Servo
 8101902:	edd7 7a01 	vldr	s15, [r7, #4]
 8101906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810190a:	ee17 2a90 	vmov	r2, s15
 810190e:	4613      	mov	r3, r2
 8101910:	009b      	lsls	r3, r3, #2
 8101912:	4413      	add	r3, r2
 8101914:	005b      	lsls	r3, r3, #1
 8101916:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 810191a:	4a0d      	ldr	r2, [pc, #52]	; (8101950 <set_Rotate_Servo+0x58>)
 810191c:	6013      	str	r3, [r2, #0]
	CCR_value_rotate = (t_pulse_rotate - CONTROL_PULSE_MIN)
			* (TIMER_COUNTER_PERIOD) / (CONTROL_PULSE_RANGE); 		// mapping the values of us to the range of Timer Counter
 810191e:	4b0c      	ldr	r3, [pc, #48]	; (8101950 <set_Rotate_Servo+0x58>)
 8101920:	681b      	ldr	r3, [r3, #0]
 8101922:	f64e 2260 	movw	r2, #60000	; 0xea60
 8101926:	fb03 f202 	mul.w	r2, r3, r2
 810192a:	4b0a      	ldr	r3, [pc, #40]	; (8101954 <set_Rotate_Servo+0x5c>)
 810192c:	4413      	add	r3, r2
 810192e:	4a0a      	ldr	r2, [pc, #40]	; (8101958 <set_Rotate_Servo+0x60>)
 8101930:	fba2 2303 	umull	r2, r3, r2, r3
 8101934:	0a9b      	lsrs	r3, r3, #10
	CCR_value_rotate = (t_pulse_rotate - CONTROL_PULSE_MIN)
 8101936:	4a09      	ldr	r2, [pc, #36]	; (810195c <set_Rotate_Servo+0x64>)
 8101938:	6013      	str	r3, [r2, #0]
	TIM13->CCR1 = CCR_value_rotate; 								// applying value to TIM
 810193a:	4a09      	ldr	r2, [pc, #36]	; (8101960 <set_Rotate_Servo+0x68>)
 810193c:	4b07      	ldr	r3, [pc, #28]	; (810195c <set_Rotate_Servo+0x64>)
 810193e:	681b      	ldr	r3, [r3, #0]
 8101940:	6353      	str	r3, [r2, #52]	; 0x34
}
 8101942:	bf00      	nop
 8101944:	370c      	adds	r7, #12
 8101946:	46bd      	mov	sp, r7
 8101948:	f85d 7b04 	ldr.w	r7, [sp], #4
 810194c:	4770      	bx	lr
 810194e:	bf00      	nop
 8101950:	100000f0 	.word	0x100000f0
 8101954:	fdc85f80 	.word	0xfdc85f80
 8101958:	91a2b3c5 	.word	0x91a2b3c5
 810195c:	100000f8 	.word	0x100000f8
 8101960:	40001c00 	.word	0x40001c00

08101964 <set_Slide_Servo>:
/* set_Slide_Servo: Sets the angle of the servo controlling the board opening slider
 *
 * @param angle: Angle of rotation in degrees
 * Acceptable values between 1 - 25 degrees
 */
{
 8101964:	b480      	push	{r7}
 8101966:	b083      	sub	sp, #12
 8101968:	af00      	add	r7, sp, #0
 810196a:	ed87 0a01 	vstr	s0, [r7, #4]
	t_pulse_slide = 10 * ((uint32_t) angle) + CONTROL_PULSE_MIN; 	// from data sheet of Parallax Standard Servo
 810196e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101976:	ee17 2a90 	vmov	r2, s15
 810197a:	4613      	mov	r3, r2
 810197c:	009b      	lsls	r3, r3, #2
 810197e:	4413      	add	r3, r2
 8101980:	005b      	lsls	r3, r3, #1
 8101982:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8101986:	4a0d      	ldr	r2, [pc, #52]	; (81019bc <set_Slide_Servo+0x58>)
 8101988:	6013      	str	r3, [r2, #0]
	CCR_value_slide = (t_pulse_slide - CONTROL_PULSE_MIN)
			* (TIMER_COUNTER_PERIOD) / (CONTROL_PULSE_RANGE); 		// mapping the values of us to the range of Timer Counter
 810198a:	4b0c      	ldr	r3, [pc, #48]	; (81019bc <set_Slide_Servo+0x58>)
 810198c:	681b      	ldr	r3, [r3, #0]
 810198e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8101992:	fb03 f202 	mul.w	r2, r3, r2
 8101996:	4b0a      	ldr	r3, [pc, #40]	; (81019c0 <set_Slide_Servo+0x5c>)
 8101998:	4413      	add	r3, r2
 810199a:	4a0a      	ldr	r2, [pc, #40]	; (81019c4 <set_Slide_Servo+0x60>)
 810199c:	fba2 2303 	umull	r2, r3, r2, r3
 81019a0:	0a9b      	lsrs	r3, r3, #10
	CCR_value_slide = (t_pulse_slide - CONTROL_PULSE_MIN)
 81019a2:	4a09      	ldr	r2, [pc, #36]	; (81019c8 <set_Slide_Servo+0x64>)
 81019a4:	6013      	str	r3, [r2, #0]
	TIM14->CCR1 = CCR_value_slide; 									// applying value to TIM
 81019a6:	4a09      	ldr	r2, [pc, #36]	; (81019cc <set_Slide_Servo+0x68>)
 81019a8:	4b07      	ldr	r3, [pc, #28]	; (81019c8 <set_Slide_Servo+0x64>)
 81019aa:	681b      	ldr	r3, [r3, #0]
 81019ac:	6353      	str	r3, [r2, #52]	; 0x34
}
 81019ae:	bf00      	nop
 81019b0:	370c      	adds	r7, #12
 81019b2:	46bd      	mov	sp, r7
 81019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019b8:	4770      	bx	lr
 81019ba:	bf00      	nop
 81019bc:	100000f4 	.word	0x100000f4
 81019c0:	fdc85f80 	.word	0xfdc85f80
 81019c4:	91a2b3c5 	.word	0x91a2b3c5
 81019c8:	100000fc 	.word	0x100000fc
 81019cc:	40002000 	.word	0x40002000

081019d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 81019d0:	b480      	push	{r7}
 81019d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81019d4:	f3bf 8f4f 	dsb	sy
}
 81019d8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 81019da:	4b06      	ldr	r3, [pc, #24]	; (81019f4 <__NVIC_SystemReset+0x24>)
 81019dc:	68db      	ldr	r3, [r3, #12]
 81019de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 81019e2:	4904      	ldr	r1, [pc, #16]	; (81019f4 <__NVIC_SystemReset+0x24>)
 81019e4:	4b04      	ldr	r3, [pc, #16]	; (81019f8 <__NVIC_SystemReset+0x28>)
 81019e6:	4313      	orrs	r3, r2
 81019e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 81019ea:	f3bf 8f4f 	dsb	sy
}
 81019ee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 81019f0:	bf00      	nop
 81019f2:	e7fd      	b.n	81019f0 <__NVIC_SystemReset+0x20>
 81019f4:	e000ed00 	.word	0xe000ed00
 81019f8:	05fa0004 	.word	0x05fa0004

081019fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81019fc:	b580      	push	{r7, lr}
 81019fe:	b08a      	sub	sp, #40	; 0x28
 8101a00:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8101a02:	4b96      	ldr	r3, [pc, #600]	; (8101c5c <main+0x260>)
 8101a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a08:	4a94      	ldr	r2, [pc, #592]	; (8101c5c <main+0x260>)
 8101a0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a12:	4b92      	ldr	r3, [pc, #584]	; (8101c5c <main+0x260>)
 8101a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101a1c:	60fb      	str	r3, [r7, #12]
 8101a1e:	68fb      	ldr	r3, [r7, #12]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101a20:	2001      	movs	r0, #1
 8101a22:	f002 ff37 	bl	8104894 <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8101a26:	f003 fde1 	bl	81055ec <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101a2a:	2201      	movs	r2, #1
 8101a2c:	2102      	movs	r1, #2
 8101a2e:	2000      	movs	r0, #0
 8101a30:	f003 fd62 	bl	81054f8 <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101a34:	4b8a      	ldr	r3, [pc, #552]	; (8101c60 <main+0x264>)
 8101a36:	681b      	ldr	r3, [r3, #0]
 8101a38:	091b      	lsrs	r3, r3, #4
 8101a3a:	f003 030f 	and.w	r3, r3, #15
 8101a3e:	2b07      	cmp	r3, #7
 8101a40:	d108      	bne.n	8101a54 <main+0x58>
 8101a42:	4b88      	ldr	r3, [pc, #544]	; (8101c64 <main+0x268>)
 8101a44:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101a48:	4a86      	ldr	r2, [pc, #536]	; (8101c64 <main+0x268>)
 8101a4a:	f043 0301 	orr.w	r3, r3, #1
 8101a4e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101a52:	e007      	b.n	8101a64 <main+0x68>
 8101a54:	4b83      	ldr	r3, [pc, #524]	; (8101c64 <main+0x268>)
 8101a56:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101a5a:	4a82      	ldr	r2, [pc, #520]	; (8101c64 <main+0x268>)
 8101a5c:	f043 0301 	orr.w	r3, r3, #1
 8101a60:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101a64:	f001 fa9c 	bl	8102fa0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101a68:	f000 fa5a 	bl	8101f20 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8101a6c:	f001 f906 	bl	8102c7c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	init_Start_Up();
 8101a70:	f7ff f8c4 	bl	8100bfc <init_Start_Up>
	HAL_TIM_Base_Start_IT(&htim7);
 8101a74:	487c      	ldr	r0, [pc, #496]	; (8101c68 <main+0x26c>)
 8101a76:	f006 f983 	bl	8107d80 <HAL_TIM_Base_Start_IT>

	uint16_t value_proxy = 0;
 8101a7a:	2300      	movs	r3, #0
 8101a7c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int columnDetected = 0;
 8101a7e:	2300      	movs	r3, #0
 8101a80:	623b      	str	r3, [r7, #32]

	VCNL4010 struct_proxy;
	TCS3472 struct_rgb;

	struct_rgb = TCS3472_Create(RGB_ADD, &hi2c1);
 8101a82:	463b      	mov	r3, r7
 8101a84:	4a79      	ldr	r2, [pc, #484]	; (8101c6c <main+0x270>)
 8101a86:	2129      	movs	r1, #41	; 0x29
 8101a88:	4618      	mov	r0, r3
 8101a8a:	f7ff f9ff 	bl	8100e8c <TCS3472_Create>
 8101a8e:	f107 0310 	add.w	r3, r7, #16
 8101a92:	463a      	mov	r2, r7
 8101a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101a98:	e883 0003 	stmia.w	r3, {r0, r1}
	rgb_init(&struct_rgb);
 8101a9c:	f107 0310 	add.w	r3, r7, #16
 8101aa0:	4618      	mov	r0, r3
 8101aa2:	f7ff fa0d 	bl	8100ec0 <rgb_init>
	init_coinDetector();
 8101aa6:	f7ff f927 	bl	8100cf8 <init_coinDetector>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		set_Rotate_Servo(ROTATE_NEUTRAL);
 8101aaa:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8101c70 <main+0x274>
 8101aae:	f7ff ff23 	bl	81018f8 <set_Rotate_Servo>


		send_msg_data((uint8_t*)"\r##### Moving to pos X: %d #####\n\r", X_POS_STACK_3);
 8101ab2:	210c      	movs	r1, #12
 8101ab4:	486f      	ldr	r0, [pc, #444]	; (8101c74 <main+0x278>)
 8101ab6:	f001 fa32 	bl	8102f1e <send_msg_data>
		send_msg_data((uint8_t*)"\r##### Moving to pos Z: %d #####\n\r", Z_POS_STORE_TOP);
 8101aba:	210f      	movs	r1, #15
 8101abc:	486e      	ldr	r0, [pc, #440]	; (8101c78 <main+0x27c>)
 8101abe:	f001 fa2e 	bl	8102f1e <send_msg_data>
		move_to_X_and_Z(X_POS_STACK_3, Z_POS_STORE_TOP);
 8101ac2:	210f      	movs	r1, #15
 8101ac4:	200c      	movs	r0, #12
 8101ac6:	f7ff fbd5 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(1500);
 8101aca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8101ace:	f001 fb1b 	bl	8103108 <HAL_Delay>
		set_Rotate_Servo(ROTATE_TO_STORE);
 8101ad2:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8101c7c <main+0x280>
 8101ad6:	f7ff ff0f 	bl	81018f8 <set_Rotate_Servo>
		HAL_Delay(500);
 8101ada:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101ade:	f001 fb13 	bl	8103108 <HAL_Delay>

		move_to_X_and_Z(X_POS_STACK_3, Z_POS_STORE_6);
 8101ae2:	2107      	movs	r1, #7
 8101ae4:	200c      	movs	r0, #12
 8101ae6:	f7ff fbc5 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(1500);
 8101aea:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8101aee:	f001 fb0b 	bl	8103108 <HAL_Delay>

		move_to_X_and_Z(X_POS_STACK_3, Z_POS_STORE_TOP);
 8101af2:	210f      	movs	r1, #15
 8101af4:	200c      	movs	r0, #12
 8101af6:	f7ff fbbd 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(500);
 8101afa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101afe:	f001 fb03 	bl	8103108 <HAL_Delay>

		// Moving above col 1 and going down to drop token
		send_msg_data((uint8_t*)"\r##### Moving to pos X: %d #####\n\r", X_POS_COL_1);
 8101b02:	2102      	movs	r1, #2
 8101b04:	485b      	ldr	r0, [pc, #364]	; (8101c74 <main+0x278>)
 8101b06:	f001 fa0a 	bl	8102f1e <send_msg_data>
		send_msg_data((uint8_t*)"\r##### Moving to pos Z: %d #####\n\r", Z_POS_TOP);
 8101b0a:	2137      	movs	r1, #55	; 0x37
 8101b0c:	485a      	ldr	r0, [pc, #360]	; (8101c78 <main+0x27c>)
 8101b0e:	f001 fa06 	bl	8102f1e <send_msg_data>
		move_to_X_and_Z(X_POS_COL_1, Z_POS_TOP);
 8101b12:	2137      	movs	r1, #55	; 0x37
 8101b14:	2002      	movs	r0, #2
 8101b16:	f7ff fbad 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(1000);
 8101b1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101b1e:	f001 faf3 	bl	8103108 <HAL_Delay>
		set_Rotate_Servo(ROTATE_TO_DROP);
 8101b22:	eeb3 0a07 	vmov.f32	s0, #55	; 0x41b80000  23.0
 8101b26:	f7ff fee7 	bl	81018f8 <set_Rotate_Servo>
		HAL_Delay(500);
 8101b2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101b2e:	f001 faeb 	bl	8103108 <HAL_Delay>
		move_to_X_and_Z(X_POS_COL_1, Z_POS_DROP);
 8101b32:	212b      	movs	r1, #43	; 0x2b
 8101b34:	2002      	movs	r0, #2
 8101b36:	f7ff fb9d 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(500);
 8101b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101b3e:	f001 fae3 	bl	8103108 <HAL_Delay>
		move_to_X_and_Z(X_POS_COL_1, Z_POS_TOP);
 8101b42:	2137      	movs	r1, #55	; 0x37
 8101b44:	2002      	movs	r0, #2
 8101b46:	f7ff fb95 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(500);
 8101b4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101b4e:	f001 fadb 	bl	8103108 <HAL_Delay>
		move_to_X_and_Z(X_POS_COL_2, Z_POS_TOP);
 8101b52:	2137      	movs	r1, #55	; 0x37
 8101b54:	2008      	movs	r0, #8
 8101b56:	f7ff fb8d 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(500);
 8101b5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101b5e:	f001 fad3 	bl	8103108 <HAL_Delay>
		move_to_X_and_Z(X_POS_COL_2, Z_POS_DROP);
 8101b62:	212b      	movs	r1, #43	; 0x2b
 8101b64:	2008      	movs	r0, #8
 8101b66:	f7ff fb85 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(500);
 8101b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101b6e:	f001 facb 	bl	8103108 <HAL_Delay>
		move_to_X_and_Z(X_POS_COL_2, Z_POS_TOP);
 8101b72:	2137      	movs	r1, #55	; 0x37
 8101b74:	2008      	movs	r0, #8
 8101b76:	f7ff fb7d 	bl	8101274 <move_to_X_and_Z>
		set_Rotate_Servo(ROTATE_NEUTRAL);
 8101b7a:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8101c70 <main+0x274>
 8101b7e:	f7ff febb 	bl	81018f8 <set_Rotate_Servo>


		set_Rotate_Servo(ROTATE_NEUTRAL);
 8101b82:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8101c70 <main+0x274>
 8101b86:	f7ff feb7 	bl	81018f8 <set_Rotate_Servo>
		HAL_Delay(500);
 8101b8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101b8e:	f001 fabb 	bl	8103108 <HAL_Delay>

		send_msg_data((uint8_t*)"\r##### Moving to pos X: %d #####\n\r", X_POS_DUMP_BASE);
 8101b92:	2130      	movs	r1, #48	; 0x30
 8101b94:	4837      	ldr	r0, [pc, #220]	; (8101c74 <main+0x278>)
 8101b96:	f001 f9c2 	bl	8102f1e <send_msg_data>
		send_msg_data((uint8_t*)"\r##### Moving to pos Z: %d #####\n\r", Z_POS_DUMP_BASE);
 8101b9a:	210f      	movs	r1, #15
 8101b9c:	4836      	ldr	r0, [pc, #216]	; (8101c78 <main+0x27c>)
 8101b9e:	f001 f9be 	bl	8102f1e <send_msg_data>
		move_to_X_and_Z(X_POS_DUMP_BASE, Z_POS_DUMP_BASE);
 8101ba2:	210f      	movs	r1, #15
 8101ba4:	2030      	movs	r0, #48	; 0x30
 8101ba6:	f7ff fb65 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(1500);
 8101baa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8101bae:	f001 faab 	bl	8103108 <HAL_Delay>

		set_Rotate_Servo(ROTATE_TO_STACK);
 8101bb2:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 8101bb6:	f7ff fe9f 	bl	81018f8 <set_Rotate_Servo>
		send_msg_data((uint8_t*)"\r##### Moving to pos X: %d #####\n\r", X_POS_DUMP_BASE);
 8101bba:	2130      	movs	r1, #48	; 0x30
 8101bbc:	482d      	ldr	r0, [pc, #180]	; (8101c74 <main+0x278>)
 8101bbe:	f001 f9ae 	bl	8102f1e <send_msg_data>
		send_msg_data((uint8_t*)"\r##### Moving to pos Z: %d #####\n\r", Z_POS_DUMP_2);
 8101bc2:	2102      	movs	r1, #2
 8101bc4:	482c      	ldr	r0, [pc, #176]	; (8101c78 <main+0x27c>)
 8101bc6:	f001 f9aa 	bl	8102f1e <send_msg_data>
		move_to_X_and_Z(X_POS_DUMP_BASE, Z_POS_DUMP_2);
 8101bca:	2102      	movs	r1, #2
 8101bcc:	2030      	movs	r0, #48	; 0x30
 8101bce:	f7ff fb51 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(1500);
 8101bd2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8101bd6:	f001 fa97 	bl	8103108 <HAL_Delay>

		send_msg_data((uint8_t*)"\r##### Moving to pos X: %d #####\n\r", X_POS_DUMP_BASE);
 8101bda:	2130      	movs	r1, #48	; 0x30
 8101bdc:	4825      	ldr	r0, [pc, #148]	; (8101c74 <main+0x278>)
 8101bde:	f001 f99e 	bl	8102f1e <send_msg_data>
		send_msg_data((uint8_t*)"\r##### Moving to pos Z: %d #####\n\r", Z_POS_DUMP_BASE);
 8101be2:	210f      	movs	r1, #15
 8101be4:	4824      	ldr	r0, [pc, #144]	; (8101c78 <main+0x27c>)
 8101be6:	f001 f99a 	bl	8102f1e <send_msg_data>
		move_to_X_and_Z(X_POS_DUMP_BASE, Z_POS_DUMP_BASE);
 8101bea:	210f      	movs	r1, #15
 8101bec:	2030      	movs	r0, #48	; 0x30
 8101bee:	f7ff fb41 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(1500);
 8101bf2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8101bf6:	f001 fa87 	bl	8103108 <HAL_Delay>

		send_msg_data((uint8_t*)"\r##### Moving to pos X: %d #####\n\r", X_POS_FLIPPER);
 8101bfa:	2118      	movs	r1, #24
 8101bfc:	481d      	ldr	r0, [pc, #116]	; (8101c74 <main+0x278>)
 8101bfe:	f001 f98e 	bl	8102f1e <send_msg_data>
		send_msg_data((uint8_t*)"\r##### Moving to pos Z: %d #####\n\r", Z_POS_FLIPPER_BASE);
 8101c02:	210a      	movs	r1, #10
 8101c04:	481c      	ldr	r0, [pc, #112]	; (8101c78 <main+0x27c>)
 8101c06:	f001 f98a 	bl	8102f1e <send_msg_data>
		move_to_X_and_Z(X_POS_FLIPPER, Z_POS_FLIPPER_BASE);
 8101c0a:	210a      	movs	r1, #10
 8101c0c:	2018      	movs	r0, #24
 8101c0e:	f7ff fb31 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(1500);
 8101c12:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8101c16:	f001 fa77 	bl	8103108 <HAL_Delay>
		set_Rotate_Servo(ROTATE_TO_STACK);
 8101c1a:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 8101c1e:	f7ff fe6b 	bl	81018f8 <set_Rotate_Servo>
		HAL_Delay(500);
 8101c22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101c26:	f001 fa6f 	bl	8103108 <HAL_Delay>

		move_to_X_and_Z(X_POS_FLIPPER, Z_POS_FLIPPER);
 8101c2a:	2103      	movs	r1, #3
 8101c2c:	2018      	movs	r0, #24
 8101c2e:	f7ff fb21 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(1500);
 8101c32:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8101c36:	f001 fa67 	bl	8103108 <HAL_Delay>

		move_to_X_and_Z(X_POS_FLIPPER, Z_POS_FLIPPER_BASE);
 8101c3a:	210a      	movs	r1, #10
 8101c3c:	2018      	movs	r0, #24
 8101c3e:	f7ff fb19 	bl	8101274 <move_to_X_and_Z>
		HAL_Delay(500);
 8101c42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101c46:	f001 fa5f 	bl	8103108 <HAL_Delay>


		separate_tokens(&struct_rgb);
 8101c4a:	f107 0310 	add.w	r3, r7, #16
 8101c4e:	4618      	mov	r0, r3
 8101c50:	f7ff f81e 	bl	8100c90 <separate_tokens>
		columnDetected = queryLightGate();
 8101c54:	f7ff f874 	bl	8100d40 <queryLightGate>
 8101c58:	6238      	str	r0, [r7, #32]
	{
 8101c5a:	e726      	b.n	8101aaa <main+0xae>
 8101c5c:	58024400 	.word	0x58024400
 8101c60:	e000ed00 	.word	0xe000ed00
 8101c64:	58026400 	.word	0x58026400
 8101c68:	10000294 	.word	0x10000294
 8101c6c:	10000164 	.word	0x10000164
 8101c70:	40a9999a 	.word	0x40a9999a
 8101c74:	0810afa0 	.word	0x0810afa0
 8101c78:	0810afc4 	.word	0x0810afc4
 8101c7c:	41533333 	.word	0x41533333

08101c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101c80:	b580      	push	{r7, lr}
 8101c82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8101c84:	b672      	cpsid	i
}
 8101c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	reset_Enable_Power();
 8101c88:	f000 fb32 	bl	81022f0 <reset_Enable_Power>

	send_msg("\rERROR, resetting\n\r");
 8101c8c:	4802      	ldr	r0, [pc, #8]	; (8101c98 <Error_Handler+0x18>)
 8101c8e:	f001 f92f 	bl	8102ef0 <send_msg>

	NVIC_SystemReset();
 8101c92:	f7ff fe9d 	bl	81019d0 <__NVIC_SystemReset>
 8101c96:	bf00      	nop
 8101c98:	0810afe8 	.word	0x0810afe8

08101c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101c9c:	b580      	push	{r7, lr}
 8101c9e:	b082      	sub	sp, #8
 8101ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101ca2:	4b0d      	ldr	r3, [pc, #52]	; (8101cd8 <HAL_MspInit+0x3c>)
 8101ca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101ca8:	4a0b      	ldr	r2, [pc, #44]	; (8101cd8 <HAL_MspInit+0x3c>)
 8101caa:	f043 0302 	orr.w	r3, r3, #2
 8101cae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101cb2:	4b09      	ldr	r3, [pc, #36]	; (8101cd8 <HAL_MspInit+0x3c>)
 8101cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101cb8:	f003 0302 	and.w	r3, r3, #2
 8101cbc:	607b      	str	r3, [r7, #4]
 8101cbe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8101cc0:	2200      	movs	r2, #0
 8101cc2:	2100      	movs	r1, #0
 8101cc4:	207e      	movs	r0, #126	; 0x7e
 8101cc6:	f002 fbba 	bl	810443e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101cca:	207e      	movs	r0, #126	; 0x7e
 8101ccc:	f002 fbd1 	bl	8104472 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101cd0:	bf00      	nop
 8101cd2:	3708      	adds	r7, #8
 8101cd4:	46bd      	mov	sp, r7
 8101cd6:	bd80      	pop	{r7, pc}
 8101cd8:	58024400 	.word	0x58024400

08101cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101cdc:	b480      	push	{r7}
 8101cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101ce0:	e7fe      	b.n	8101ce0 <NMI_Handler+0x4>

08101ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101ce2:	b480      	push	{r7}
 8101ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101ce6:	e7fe      	b.n	8101ce6 <HardFault_Handler+0x4>

08101ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101ce8:	b480      	push	{r7}
 8101cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101cec:	e7fe      	b.n	8101cec <MemManage_Handler+0x4>

08101cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101cee:	b480      	push	{r7}
 8101cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101cf2:	e7fe      	b.n	8101cf2 <BusFault_Handler+0x4>

08101cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101cf4:	b480      	push	{r7}
 8101cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101cf8:	e7fe      	b.n	8101cf8 <UsageFault_Handler+0x4>

08101cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101cfa:	b480      	push	{r7}
 8101cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101cfe:	bf00      	nop
 8101d00:	46bd      	mov	sp, r7
 8101d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d06:	4770      	bx	lr

08101d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101d08:	b480      	push	{r7}
 8101d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101d0c:	bf00      	nop
 8101d0e:	46bd      	mov	sp, r7
 8101d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d14:	4770      	bx	lr

08101d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101d16:	b480      	push	{r7}
 8101d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101d1a:	bf00      	nop
 8101d1c:	46bd      	mov	sp, r7
 8101d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d22:	4770      	bx	lr

08101d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101d24:	b580      	push	{r7, lr}
 8101d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101d28:	f001 f9ce 	bl	81030c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101d2c:	bf00      	nop
 8101d2e:	bd80      	pop	{r7, pc}

08101d30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8101d30:	b580      	push	{r7, lr}
 8101d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8101d34:	4802      	ldr	r0, [pc, #8]	; (8101d40 <TIM7_IRQHandler+0x10>)
 8101d36:	f006 fb55 	bl	81083e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8101d3a:	bf00      	nop
 8101d3c:	bd80      	pop	{r7, pc}
 8101d3e:	bf00      	nop
 8101d40:	10000294 	.word	0x10000294

08101d44 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8101d44:	b580      	push	{r7, lr}
 8101d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8101d48:	f002 fdb6 	bl	81048b8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8101d4c:	bf00      	nop
 8101d4e:	bd80      	pop	{r7, pc}

08101d50 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8101d50:	b580      	push	{r7, lr}
 8101d52:	b08a      	sub	sp, #40	; 0x28
 8101d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8101d56:	f107 031c 	add.w	r3, r7, #28
 8101d5a:	2200      	movs	r2, #0
 8101d5c:	601a      	str	r2, [r3, #0]
 8101d5e:	605a      	str	r2, [r3, #4]
 8101d60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8101d62:	463b      	mov	r3, r7
 8101d64:	2200      	movs	r2, #0
 8101d66:	601a      	str	r2, [r3, #0]
 8101d68:	605a      	str	r2, [r3, #4]
 8101d6a:	609a      	str	r2, [r3, #8]
 8101d6c:	60da      	str	r2, [r3, #12]
 8101d6e:	611a      	str	r2, [r3, #16]
 8101d70:	615a      	str	r2, [r3, #20]
 8101d72:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8101d74:	4b2f      	ldr	r3, [pc, #188]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101d76:	4a30      	ldr	r2, [pc, #192]	; (8101e38 <MX_ADC1_Init+0xe8>)
 8101d78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8101d7a:	4b2e      	ldr	r3, [pc, #184]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101d7c:	2200      	movs	r2, #0
 8101d7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8101d80:	4b2c      	ldr	r3, [pc, #176]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101d82:	2208      	movs	r2, #8
 8101d84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8101d86:	4b2b      	ldr	r3, [pc, #172]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101d88:	2200      	movs	r2, #0
 8101d8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101d8c:	4b29      	ldr	r3, [pc, #164]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101d8e:	2204      	movs	r2, #4
 8101d90:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8101d92:	4b28      	ldr	r3, [pc, #160]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101d94:	2200      	movs	r2, #0
 8101d96:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8101d98:	4b26      	ldr	r3, [pc, #152]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101d9a:	2200      	movs	r2, #0
 8101d9c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8101d9e:	4b25      	ldr	r3, [pc, #148]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101da0:	2201      	movs	r2, #1
 8101da2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8101da4:	4b23      	ldr	r3, [pc, #140]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101da6:	2200      	movs	r2, #0
 8101da8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101daa:	4b22      	ldr	r3, [pc, #136]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101dac:	2200      	movs	r2, #0
 8101dae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8101db0:	4b20      	ldr	r3, [pc, #128]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101db2:	2200      	movs	r2, #0
 8101db4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8101db6:	4b1f      	ldr	r3, [pc, #124]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101db8:	2200      	movs	r2, #0
 8101dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8101dbc:	4b1d      	ldr	r3, [pc, #116]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101dbe:	2200      	movs	r2, #0
 8101dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101dc2:	4b1c      	ldr	r3, [pc, #112]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101dc4:	2200      	movs	r2, #0
 8101dc6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8101dc8:	4b1a      	ldr	r3, [pc, #104]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101dca:	2200      	movs	r2, #0
 8101dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101dd0:	4818      	ldr	r0, [pc, #96]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101dd2:	f001 fb55 	bl	8103480 <HAL_ADC_Init>
 8101dd6:	4603      	mov	r3, r0
 8101dd8:	2b00      	cmp	r3, #0
 8101dda:	d001      	beq.n	8101de0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8101ddc:	f7ff ff50 	bl	8101c80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101de0:	2300      	movs	r3, #0
 8101de2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101de4:	f107 031c 	add.w	r3, r7, #28
 8101de8:	4619      	mov	r1, r3
 8101dea:	4812      	ldr	r0, [pc, #72]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101dec:	f002 f96a 	bl	81040c4 <HAL_ADCEx_MultiModeConfigChannel>
 8101df0:	4603      	mov	r3, r0
 8101df2:	2b00      	cmp	r3, #0
 8101df4:	d001      	beq.n	8101dfa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8101df6:	f7ff ff43 	bl	8101c80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8101dfa:	4b10      	ldr	r3, [pc, #64]	; (8101e3c <MX_ADC1_Init+0xec>)
 8101dfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101dfe:	2306      	movs	r3, #6
 8101e00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8101e02:	2300      	movs	r3, #0
 8101e04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101e06:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8101e0a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8101e0c:	2304      	movs	r3, #4
 8101e0e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8101e10:	2300      	movs	r3, #0
 8101e12:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8101e14:	2300      	movs	r3, #0
 8101e16:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8101e18:	463b      	mov	r3, r7
 8101e1a:	4619      	mov	r1, r3
 8101e1c:	4805      	ldr	r0, [pc, #20]	; (8101e34 <MX_ADC1_Init+0xe4>)
 8101e1e:	f001 fcd1 	bl	81037c4 <HAL_ADC_ConfigChannel>
 8101e22:	4603      	mov	r3, r0
 8101e24:	2b00      	cmp	r3, #0
 8101e26:	d001      	beq.n	8101e2c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8101e28:	f7ff ff2a 	bl	8101c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8101e2c:	bf00      	nop
 8101e2e:	3728      	adds	r7, #40	; 0x28
 8101e30:	46bd      	mov	sp, r7
 8101e32:	bd80      	pop	{r7, pc}
 8101e34:	10000100 	.word	0x10000100
 8101e38:	40022000 	.word	0x40022000
 8101e3c:	4b840000 	.word	0x4b840000

08101e40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8101e40:	b580      	push	{r7, lr}
 8101e42:	b0b8      	sub	sp, #224	; 0xe0
 8101e44:	af00      	add	r7, sp, #0
 8101e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101e4c:	2200      	movs	r2, #0
 8101e4e:	601a      	str	r2, [r3, #0]
 8101e50:	605a      	str	r2, [r3, #4]
 8101e52:	609a      	str	r2, [r3, #8]
 8101e54:	60da      	str	r2, [r3, #12]
 8101e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101e58:	f107 0310 	add.w	r3, r7, #16
 8101e5c:	22bc      	movs	r2, #188	; 0xbc
 8101e5e:	2100      	movs	r1, #0
 8101e60:	4618      	mov	r0, r3
 8101e62:	f008 fa87 	bl	810a374 <memset>
  if(adcHandle->Instance==ADC1)
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	681b      	ldr	r3, [r3, #0]
 8101e6a:	4a2a      	ldr	r2, [pc, #168]	; (8101f14 <HAL_ADC_MspInit+0xd4>)
 8101e6c:	4293      	cmp	r3, r2
 8101e6e:	d14c      	bne.n	8101f0a <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8101e70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8101e74:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8101e76:	2301      	movs	r3, #1
 8101e78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8101e7a:	2313      	movs	r3, #19
 8101e7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 128;
 8101e7e:	2380      	movs	r3, #128	; 0x80
 8101e80:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8101e82:	2302      	movs	r3, #2
 8101e84:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8101e86:	2302      	movs	r3, #2
 8101e88:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8101e8a:	23c0      	movs	r3, #192	; 0xc0
 8101e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8101e8e:	2320      	movs	r3, #32
 8101e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8101e92:	2300      	movs	r3, #0
 8101e94:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8101e96:	2300      	movs	r3, #0
 8101e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101e9c:	f107 0310 	add.w	r3, r7, #16
 8101ea0:	4618      	mov	r0, r3
 8101ea2:	f003 fd89 	bl	81059b8 <HAL_RCCEx_PeriphCLKConfig>
 8101ea6:	4603      	mov	r3, r0
 8101ea8:	2b00      	cmp	r3, #0
 8101eaa:	d001      	beq.n	8101eb0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8101eac:	f7ff fee8 	bl	8101c80 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101eb0:	4b19      	ldr	r3, [pc, #100]	; (8101f18 <HAL_ADC_MspInit+0xd8>)
 8101eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101eb6:	4a18      	ldr	r2, [pc, #96]	; (8101f18 <HAL_ADC_MspInit+0xd8>)
 8101eb8:	f043 0320 	orr.w	r3, r3, #32
 8101ebc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101ec0:	4b15      	ldr	r3, [pc, #84]	; (8101f18 <HAL_ADC_MspInit+0xd8>)
 8101ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101ec6:	f003 0320 	and.w	r3, r3, #32
 8101eca:	60fb      	str	r3, [r7, #12]
 8101ecc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101ece:	4b12      	ldr	r3, [pc, #72]	; (8101f18 <HAL_ADC_MspInit+0xd8>)
 8101ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ed4:	4a10      	ldr	r2, [pc, #64]	; (8101f18 <HAL_ADC_MspInit+0xd8>)
 8101ed6:	f043 0301 	orr.w	r3, r3, #1
 8101eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ede:	4b0e      	ldr	r3, [pc, #56]	; (8101f18 <HAL_ADC_MspInit+0xd8>)
 8101ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ee4:	f003 0301 	and.w	r3, r3, #1
 8101ee8:	60bb      	str	r3, [r7, #8]
 8101eea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = Vaccuum_Sensor_Pin;
 8101eec:	2310      	movs	r3, #16
 8101eee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101ef2:	2303      	movs	r3, #3
 8101ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ef8:	2300      	movs	r3, #0
 8101efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(Vaccuum_Sensor_GPIO_Port, &GPIO_InitStruct);
 8101efe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101f02:	4619      	mov	r1, r3
 8101f04:	4805      	ldr	r0, [pc, #20]	; (8101f1c <HAL_ADC_MspInit+0xdc>)
 8101f06:	f002 fae3 	bl	81044d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8101f0a:	bf00      	nop
 8101f0c:	37e0      	adds	r7, #224	; 0xe0
 8101f0e:	46bd      	mov	sp, r7
 8101f10:	bd80      	pop	{r7, pc}
 8101f12:	bf00      	nop
 8101f14:	40022000 	.word	0x40022000
 8101f18:	58024400 	.word	0x58024400
 8101f1c:	58020000 	.word	0x58020000

08101f20 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
 */
void MX_GPIO_Init(void)
{
 8101f20:	b580      	push	{r7, lr}
 8101f22:	b08c      	sub	sp, #48	; 0x30
 8101f24:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct =
 8101f26:	f107 031c 	add.w	r3, r7, #28
 8101f2a:	2200      	movs	r2, #0
 8101f2c:	601a      	str	r2, [r3, #0]
 8101f2e:	605a      	str	r2, [r3, #4]
 8101f30:	609a      	str	r2, [r3, #8]
 8101f32:	60da      	str	r2, [r3, #12]
 8101f34:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8101f36:	4bb0      	ldr	r3, [pc, #704]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f3c:	4aae      	ldr	r2, [pc, #696]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101f3e:	f043 0310 	orr.w	r3, r3, #16
 8101f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f46:	4bac      	ldr	r3, [pc, #688]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f4c:	f003 0310 	and.w	r3, r3, #16
 8101f50:	61bb      	str	r3, [r7, #24]
 8101f52:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8101f54:	4ba8      	ldr	r3, [pc, #672]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f5a:	4aa7      	ldr	r2, [pc, #668]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101f5c:	f043 0304 	orr.w	r3, r3, #4
 8101f60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f64:	4ba4      	ldr	r3, [pc, #656]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f6a:	f003 0304 	and.w	r3, r3, #4
 8101f6e:	617b      	str	r3, [r7, #20]
 8101f70:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8101f72:	4ba1      	ldr	r3, [pc, #644]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f78:	4a9f      	ldr	r2, [pc, #636]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101f7a:	f043 0320 	orr.w	r3, r3, #32
 8101f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f82:	4b9d      	ldr	r3, [pc, #628]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f88:	f003 0320 	and.w	r3, r3, #32
 8101f8c:	613b      	str	r3, [r7, #16]
 8101f8e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8101f90:	4b99      	ldr	r3, [pc, #612]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f96:	4a98      	ldr	r2, [pc, #608]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101f98:	f043 0301 	orr.w	r3, r3, #1
 8101f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101fa0:	4b95      	ldr	r3, [pc, #596]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fa6:	f003 0301 	and.w	r3, r3, #1
 8101faa:	60fb      	str	r3, [r7, #12]
 8101fac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8101fae:	4b92      	ldr	r3, [pc, #584]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fb4:	4a90      	ldr	r2, [pc, #576]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101fb6:	f043 0302 	orr.w	r3, r3, #2
 8101fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101fbe:	4b8e      	ldr	r3, [pc, #568]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fc4:	f003 0302 	and.w	r3, r3, #2
 8101fc8:	60bb      	str	r3, [r7, #8]
 8101fca:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8101fcc:	4b8a      	ldr	r3, [pc, #552]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fd2:	4a89      	ldr	r2, [pc, #548]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101fd4:	f043 0308 	orr.w	r3, r3, #8
 8101fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101fdc:	4b86      	ldr	r3, [pc, #536]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fe2:	f003 0308 	and.w	r3, r3, #8
 8101fe6:	607b      	str	r3, [r7, #4]
 8101fe8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8101fea:	4b83      	ldr	r3, [pc, #524]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ff0:	4a81      	ldr	r2, [pc, #516]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ffa:	4b7f      	ldr	r3, [pc, #508]	; (81021f8 <MX_GPIO_Init+0x2d8>)
 8101ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102004:	603b      	str	r3, [r7, #0]
 8102006:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, DigiIN_OUT_Z_Pin | Direction_Z_Pin | LD2_Pin,
 8102008:	2200      	movs	r2, #0
 810200a:	2107      	movs	r1, #7
 810200c:	487b      	ldr	r0, [pc, #492]	; (81021fc <MX_GPIO_Init+0x2dc>)
 810200e:	f002 fc27 	bl	8104860 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_RESET);
 8102012:	2200      	movs	r2, #0
 8102014:	2101      	movs	r1, #1
 8102016:	487a      	ldr	r0, [pc, #488]	; (8102200 <MX_GPIO_Init+0x2e0>)
 8102018:	f002 fc22 	bl	8104860 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 810201c:	2200      	movs	r2, #0
 810201e:	f244 0101 	movw	r1, #16385	; 0x4001
 8102022:	4878      	ldr	r0, [pc, #480]	; (8102204 <MX_GPIO_Init+0x2e4>)
 8102024:	f002 fc1c 	bl	8104860 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8102028:	2200      	movs	r2, #0
 810202a:	f24c 4178 	movw	r1, #50296	; 0xc478
 810202e:	4876      	ldr	r0, [pc, #472]	; (8102208 <MX_GPIO_Init+0x2e8>)
 8102030:	f002 fc16 	bl	8104860 <HAL_GPIO_WritePin>
			USB_OTG_FS_PWR_EN_Pin | DigiIN_OUT_X_Pin | Ready_X_Pin | Debug_1_Pin
					| Debug_2_Pin | Debug_3_Pin | Debug_4_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8102034:	2201      	movs	r2, #1
 8102036:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 810203a:	4874      	ldr	r0, [pc, #464]	; (810220c <MX_GPIO_Init+0x2ec>)
 810203c:	f002 fc10 	bl	8104860 <HAL_GPIO_WritePin>
			Vaccuum_Valve_Pin | Vaccuum_Pump_Pin | Solenoid_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_SET);
 8102040:	2201      	movs	r2, #1
 8102042:	2101      	movs	r1, #1
 8102044:	4870      	ldr	r0, [pc, #448]	; (8102208 <MX_GPIO_Init+0x2e8>)
 8102046:	f002 fc0b 	bl	8104860 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 810204a:	2200      	movs	r2, #0
 810204c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8102050:	486f      	ldr	r0, [pc, #444]	; (8102210 <MX_GPIO_Init+0x2f0>)
 8102052:	f002 fc05 	bl	8104860 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = DigiIN_OUT_Z_Pin | Direction_Z_Pin | LD2_Pin;
 8102056:	2307      	movs	r3, #7
 8102058:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810205a:	2301      	movs	r3, #1
 810205c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810205e:	2300      	movs	r3, #0
 8102060:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102062:	2300      	movs	r3, #0
 8102064:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102066:	f107 031c 	add.w	r3, r7, #28
 810206a:	4619      	mov	r1, r3
 810206c:	4863      	ldr	r0, [pc, #396]	; (81021fc <MX_GPIO_Init+0x2dc>)
 810206e:	f002 fa2f 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin */
	GPIO_InitStruct.Pin = B1_Pin | Rotary_Switch_C2_Pin;
 8102072:	f242 0301 	movw	r3, #8193	; 0x2001
 8102076:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8102078:	2300      	movs	r3, #0
 810207a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810207c:	2300      	movs	r3, #0
 810207e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102080:	f107 031c 	add.w	r3, r7, #28
 8102084:	4619      	mov	r1, r3
 8102086:	4861      	ldr	r0, [pc, #388]	; (810220c <MX_GPIO_Init+0x2ec>)
 8102088:	f002 fa22 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = Rotary_Switch_C8_Pin;
 810208c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8102090:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8102092:	2300      	movs	r3, #0
 8102094:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102096:	2300      	movs	r3, #0
 8102098:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Rotary_Switch_C8_GPIO_Port, &GPIO_InitStruct);
 810209a:	f107 031c 	add.w	r3, r7, #28
 810209e:	4619      	mov	r1, r3
 81020a0:	485c      	ldr	r0, [pc, #368]	; (8102214 <MX_GPIO_Init+0x2f4>)
 81020a2:	f002 fa15 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = Ready_Z_Pin;
 81020a6:	2301      	movs	r3, #1
 81020a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81020aa:	2301      	movs	r3, #1
 81020ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020ae:	2300      	movs	r3, #0
 81020b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020b2:	2300      	movs	r3, #0
 81020b4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(Ready_Z_GPIO_Port, &GPIO_InitStruct);
 81020b6:	f107 031c 	add.w	r3, r7, #28
 81020ba:	4619      	mov	r1, r3
 81020bc:	4850      	ldr	r0, [pc, #320]	; (8102200 <MX_GPIO_Init+0x2e0>)
 81020be:	f002 fa07 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = Rotary_Switch_C1_Pin;
 81020c2:	2308      	movs	r3, #8
 81020c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81020c6:	2300      	movs	r3, #0
 81020c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020ca:	2300      	movs	r3, #0
 81020cc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Rotary_Switch_C1_GPIO_Port, &GPIO_InitStruct);
 81020ce:	f107 031c 	add.w	r3, r7, #28
 81020d2:	4619      	mov	r1, r3
 81020d4:	484a      	ldr	r0, [pc, #296]	; (8102200 <MX_GPIO_Init+0x2e0>)
 81020d6:	f002 f9fb 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 81020da:	f244 0301 	movw	r3, #16385	; 0x4001
 81020de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81020e0:	2301      	movs	r3, #1
 81020e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020e4:	2300      	movs	r3, #0
 81020e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020e8:	2300      	movs	r3, #0
 81020ea:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81020ec:	f107 031c 	add.w	r3, r7, #28
 81020f0:	4619      	mov	r1, r3
 81020f2:	4844      	ldr	r0, [pc, #272]	; (8102204 <MX_GPIO_Init+0x2e4>)
 81020f4:	f002 f9ec 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = Rotary_Switch_C4_Pin;
 81020f8:	2302      	movs	r3, #2
 81020fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81020fc:	2300      	movs	r3, #0
 81020fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102100:	2300      	movs	r3, #0
 8102102:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Rotary_Switch_C4_GPIO_Port, &GPIO_InitStruct);
 8102104:	f107 031c 	add.w	r3, r7, #28
 8102108:	4619      	mov	r1, r3
 810210a:	483e      	ldr	r0, [pc, #248]	; (8102204 <MX_GPIO_Init+0x2e4>)
 810210c:	f002 f9e0 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = Homing_Z_Pin;
 8102110:	2304      	movs	r3, #4
 8102112:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8102114:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8102118:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810211a:	2300      	movs	r3, #0
 810211c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Homing_Z_GPIO_Port, &GPIO_InitStruct);
 810211e:	f107 031c 	add.w	r3, r7, #28
 8102122:	4619      	mov	r1, r3
 8102124:	4837      	ldr	r0, [pc, #220]	; (8102204 <MX_GPIO_Init+0x2e4>)
 8102126:	f002 f9d3 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = Pushbutton_Rotary_Switch_Pin;
 810212a:	f44f 7300 	mov.w	r3, #512	; 0x200
 810212e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8102130:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8102134:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102136:	2300      	movs	r3, #0
 8102138:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Pushbutton_Rotary_Switch_GPIO_Port, &GPIO_InitStruct);
 810213a:	f107 031c 	add.w	r3, r7, #28
 810213e:	4619      	mov	r1, r3
 8102140:	482e      	ldr	r0, [pc, #184]	; (81021fc <MX_GPIO_Init+0x2dc>)
 8102142:	f002 f9c5 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = Homing_X_Pin | Endstop_X_Pin | Endstop_Z_Pin;
 8102146:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 810214a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810214c:	2300      	movs	r3, #0
 810214e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102150:	2300      	movs	r3, #0
 8102152:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102154:	f107 031c 	add.w	r3, r7, #28
 8102158:	4619      	mov	r1, r3
 810215a:	4828      	ldr	r0, [pc, #160]	; (81021fc <MX_GPIO_Init+0x2dc>)
 810215c:	f002 f9b8 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PDPin PDPin PDPin PDPin
	 PDPin PDPin PDPin PDPin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | DigiIN_OUT_X_Pin | Ready_X_Pin
 8102160:	f24c 4379 	movw	r3, #50297	; 0xc479
 8102164:	61fb      	str	r3, [r7, #28]
			| Enable_PWR_Pin | Debug_1_Pin | Debug_2_Pin | Debug_3_Pin
			| Debug_4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102166:	2301      	movs	r3, #1
 8102168:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810216a:	2300      	movs	r3, #0
 810216c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810216e:	2300      	movs	r3, #0
 8102170:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102172:	f107 031c 	add.w	r3, r7, #28
 8102176:	4619      	mov	r1, r3
 8102178:	4823      	ldr	r0, [pc, #140]	; (8102208 <MX_GPIO_Init+0x2e8>)
 810217a:	f002 f9a9 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = Vaccuum_Valve_Pin | Vaccuum_Pump_Pin | Solenoid_Pin;
 810217e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8102182:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102184:	2301      	movs	r3, #1
 8102186:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102188:	2300      	movs	r3, #0
 810218a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810218c:	2300      	movs	r3, #0
 810218e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102190:	f107 031c 	add.w	r3, r7, #28
 8102194:	4619      	mov	r1, r3
 8102196:	481d      	ldr	r0, [pc, #116]	; (810220c <MX_GPIO_Init+0x2ec>)
 8102198:	f002 f99a 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin */
	GPIO_InitStruct.Pin = Coin_INT_Pin | Prox_INT_Pin;
 810219c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81021a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81021a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81021a6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021a8:	2300      	movs	r3, #0
 81021aa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81021ac:	f107 031c 	add.w	r3, r7, #28
 81021b0:	4619      	mov	r1, r3
 81021b2:	4816      	ldr	r0, [pc, #88]	; (810220c <MX_GPIO_Init+0x2ec>)
 81021b4:	f002 f98c 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = Read_EMO_Pin;
 81021b8:	2302      	movs	r3, #2
 81021ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81021bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81021c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021c2:	2300      	movs	r3, #0
 81021c4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Read_EMO_GPIO_Port, &GPIO_InitStruct);
 81021c6:	f107 031c 	add.w	r3, r7, #28
 81021ca:	4619      	mov	r1, r3
 81021cc:	480e      	ldr	r0, [pc, #56]	; (8102208 <MX_GPIO_Init+0x2e8>)
 81021ce:	f002 f97f 	bl	81044d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = Direction_X_Pin;
 81021d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81021d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81021d8:	2301      	movs	r3, #1
 81021da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021dc:	2300      	movs	r3, #0
 81021de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021e0:	2300      	movs	r3, #0
 81021e2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(Direction_X_GPIO_Port, &GPIO_InitStruct);
 81021e4:	f107 031c 	add.w	r3, r7, #28
 81021e8:	4619      	mov	r1, r3
 81021ea:	4809      	ldr	r0, [pc, #36]	; (8102210 <MX_GPIO_Init+0x2f0>)
 81021ec:	f002 f970 	bl	81044d0 <HAL_GPIO_Init>

}
 81021f0:	bf00      	nop
 81021f2:	3730      	adds	r7, #48	; 0x30
 81021f4:	46bd      	mov	sp, r7
 81021f6:	bd80      	pop	{r7, pc}
 81021f8:	58024400 	.word	0x58024400
 81021fc:	58021000 	.word	0x58021000
 8102200:	58020000 	.word	0x58020000
 8102204:	58020400 	.word	0x58020400
 8102208:	58020c00 	.word	0x58020c00
 810220c:	58020800 	.word	0x58020800
 8102210:	58021800 	.word	0x58021800
 8102214:	58021400 	.word	0x58021400

08102218 <set_Direction_X>:
{
	HAL_GPIO_WritePin(Solenoid_GPIO_Port, Solenoid_Pin, GPIO_PIN_RESET);
}

void set_Direction_X(void)
{
 8102218:	b580      	push	{r7, lr}
 810221a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_SET);
 810221c:	2201      	movs	r2, #1
 810221e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8102222:	4802      	ldr	r0, [pc, #8]	; (810222c <set_Direction_X+0x14>)
 8102224:	f002 fb1c 	bl	8104860 <HAL_GPIO_WritePin>
}
 8102228:	bf00      	nop
 810222a:	bd80      	pop	{r7, pc}
 810222c:	58021800 	.word	0x58021800

08102230 <reset_Direction_X>:
void reset_Direction_X(void)
{
 8102230:	b580      	push	{r7, lr}
 8102232:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 8102234:	2200      	movs	r2, #0
 8102236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 810223a:	4802      	ldr	r0, [pc, #8]	; (8102244 <reset_Direction_X+0x14>)
 810223c:	f002 fb10 	bl	8104860 <HAL_GPIO_WritePin>
}
 8102240:	bf00      	nop
 8102242:	bd80      	pop	{r7, pc}
 8102244:	58021800 	.word	0x58021800

08102248 <set_Ready_X>:

void set_Ready_X(void)
{
 8102248:	b580      	push	{r7, lr}
 810224a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_SET);
 810224c:	2201      	movs	r2, #1
 810224e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102252:	4802      	ldr	r0, [pc, #8]	; (810225c <set_Ready_X+0x14>)
 8102254:	f002 fb04 	bl	8104860 <HAL_GPIO_WritePin>
}
 8102258:	bf00      	nop
 810225a:	bd80      	pop	{r7, pc}
 810225c:	58020c00 	.word	0x58020c00

08102260 <reset_Ready_X>:
void reset_Ready_X(void)
{
 8102260:	b580      	push	{r7, lr}
 8102262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_RESET);
 8102264:	2200      	movs	r2, #0
 8102266:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810226a:	4802      	ldr	r0, [pc, #8]	; (8102274 <reset_Ready_X+0x14>)
 810226c:	f002 faf8 	bl	8104860 <HAL_GPIO_WritePin>
}
 8102270:	bf00      	nop
 8102272:	bd80      	pop	{r7, pc}
 8102274:	58020c00 	.word	0x58020c00

08102278 <set_Direction_Z>:
{
	HAL_GPIO_WritePin(DigiIN_OUT_X_GPIO_Port, DigiIN_OUT_X_Pin, GPIO_PIN_RESET);
}

void set_Direction_Z(void)
{
 8102278:	b580      	push	{r7, lr}
 810227a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_SET);
 810227c:	2201      	movs	r2, #1
 810227e:	2101      	movs	r1, #1
 8102280:	4802      	ldr	r0, [pc, #8]	; (810228c <set_Direction_Z+0x14>)
 8102282:	f002 faed 	bl	8104860 <HAL_GPIO_WritePin>
}
 8102286:	bf00      	nop
 8102288:	bd80      	pop	{r7, pc}
 810228a:	bf00      	nop
 810228c:	58021000 	.word	0x58021000

08102290 <reset_Direction_Z>:
void reset_Direction_Z(void)
{
 8102290:	b580      	push	{r7, lr}
 8102292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_RESET);
 8102294:	2200      	movs	r2, #0
 8102296:	2101      	movs	r1, #1
 8102298:	4802      	ldr	r0, [pc, #8]	; (81022a4 <reset_Direction_Z+0x14>)
 810229a:	f002 fae1 	bl	8104860 <HAL_GPIO_WritePin>
}
 810229e:	bf00      	nop
 81022a0:	bd80      	pop	{r7, pc}
 81022a2:	bf00      	nop
 81022a4:	58021000 	.word	0x58021000

081022a8 <set_Ready_Z>:

void set_Ready_Z(void)
{
 81022a8:	b580      	push	{r7, lr}
 81022aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_SET);
 81022ac:	2201      	movs	r2, #1
 81022ae:	2101      	movs	r1, #1
 81022b0:	4802      	ldr	r0, [pc, #8]	; (81022bc <set_Ready_Z+0x14>)
 81022b2:	f002 fad5 	bl	8104860 <HAL_GPIO_WritePin>
}
 81022b6:	bf00      	nop
 81022b8:	bd80      	pop	{r7, pc}
 81022ba:	bf00      	nop
 81022bc:	58020000 	.word	0x58020000

081022c0 <reset_Ready_Z>:
void reset_Ready_Z(void)
{
 81022c0:	b580      	push	{r7, lr}
 81022c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_RESET);
 81022c4:	2200      	movs	r2, #0
 81022c6:	2101      	movs	r1, #1
 81022c8:	4802      	ldr	r0, [pc, #8]	; (81022d4 <reset_Ready_Z+0x14>)
 81022ca:	f002 fac9 	bl	8104860 <HAL_GPIO_WritePin>
}
 81022ce:	bf00      	nop
 81022d0:	bd80      	pop	{r7, pc}
 81022d2:	bf00      	nop
 81022d4:	58020000 	.word	0x58020000

081022d8 <set_Enable_Power>:
{
	HAL_GPIO_WritePin(DigiIN_OUT_Z_GPIO_Port, DigiIN_OUT_Z_Pin, GPIO_PIN_RESET);
}

void set_Enable_Power(void)
{
 81022d8:	b580      	push	{r7, lr}
 81022da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_RESET);
 81022dc:	2200      	movs	r2, #0
 81022de:	2101      	movs	r1, #1
 81022e0:	4802      	ldr	r0, [pc, #8]	; (81022ec <set_Enable_Power+0x14>)
 81022e2:	f002 fabd 	bl	8104860 <HAL_GPIO_WritePin>
}
 81022e6:	bf00      	nop
 81022e8:	bd80      	pop	{r7, pc}
 81022ea:	bf00      	nop
 81022ec:	58020c00 	.word	0x58020c00

081022f0 <reset_Enable_Power>:
void reset_Enable_Power(void)
{
 81022f0:	b580      	push	{r7, lr}
 81022f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_SET);
 81022f4:	2201      	movs	r2, #1
 81022f6:	2101      	movs	r1, #1
 81022f8:	4802      	ldr	r0, [pc, #8]	; (8102304 <reset_Enable_Power+0x14>)
 81022fa:	f002 fab1 	bl	8104860 <HAL_GPIO_WritePin>
}
 81022fe:	bf00      	nop
 8102300:	bd80      	pop	{r7, pc}
 8102302:	bf00      	nop
 8102304:	58020c00 	.word	0x58020c00

08102308 <get_Homing_X>:

int get_Homing_X(void)
{
 8102308:	b580      	push	{r7, lr}
 810230a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Homing_X_GPIO_Port, Homing_X_Pin) == GPIO_PIN_RESET;
 810230c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8102310:	4805      	ldr	r0, [pc, #20]	; (8102328 <get_Homing_X+0x20>)
 8102312:	f002 fa8d 	bl	8104830 <HAL_GPIO_ReadPin>
 8102316:	4603      	mov	r3, r0
 8102318:	2b00      	cmp	r3, #0
 810231a:	bf0c      	ite	eq
 810231c:	2301      	moveq	r3, #1
 810231e:	2300      	movne	r3, #0
 8102320:	b2db      	uxtb	r3, r3
}
 8102322:	4618      	mov	r0, r3
 8102324:	bd80      	pop	{r7, pc}
 8102326:	bf00      	nop
 8102328:	58021000 	.word	0x58021000

0810232c <get_Homing_Z>:
int get_Homing_Z(void)
{
 810232c:	b580      	push	{r7, lr}
 810232e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Homing_Z_GPIO_Port, Homing_Z_Pin) == GPIO_PIN_RESET;
 8102330:	2104      	movs	r1, #4
 8102332:	4805      	ldr	r0, [pc, #20]	; (8102348 <get_Homing_Z+0x1c>)
 8102334:	f002 fa7c 	bl	8104830 <HAL_GPIO_ReadPin>
 8102338:	4603      	mov	r3, r0
 810233a:	2b00      	cmp	r3, #0
 810233c:	bf0c      	ite	eq
 810233e:	2301      	moveq	r3, #1
 8102340:	2300      	movne	r3, #0
 8102342:	b2db      	uxtb	r3, r3
}
 8102344:	4618      	mov	r0, r3
 8102346:	bd80      	pop	{r7, pc}
 8102348:	58020400 	.word	0x58020400

0810234c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 810234c:	b580      	push	{r7, lr}
 810234e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8102350:	4b1b      	ldr	r3, [pc, #108]	; (81023c0 <MX_I2C1_Init+0x74>)
 8102352:	4a1c      	ldr	r2, [pc, #112]	; (81023c4 <MX_I2C1_Init+0x78>)
 8102354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8102356:	4b1a      	ldr	r3, [pc, #104]	; (81023c0 <MX_I2C1_Init+0x74>)
 8102358:	4a1b      	ldr	r2, [pc, #108]	; (81023c8 <MX_I2C1_Init+0x7c>)
 810235a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 810235c:	4b18      	ldr	r3, [pc, #96]	; (81023c0 <MX_I2C1_Init+0x74>)
 810235e:	2200      	movs	r2, #0
 8102360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8102362:	4b17      	ldr	r3, [pc, #92]	; (81023c0 <MX_I2C1_Init+0x74>)
 8102364:	2201      	movs	r2, #1
 8102366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102368:	4b15      	ldr	r3, [pc, #84]	; (81023c0 <MX_I2C1_Init+0x74>)
 810236a:	2200      	movs	r2, #0
 810236c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810236e:	4b14      	ldr	r3, [pc, #80]	; (81023c0 <MX_I2C1_Init+0x74>)
 8102370:	2200      	movs	r2, #0
 8102372:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102374:	4b12      	ldr	r3, [pc, #72]	; (81023c0 <MX_I2C1_Init+0x74>)
 8102376:	2200      	movs	r2, #0
 8102378:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810237a:	4b11      	ldr	r3, [pc, #68]	; (81023c0 <MX_I2C1_Init+0x74>)
 810237c:	2200      	movs	r2, #0
 810237e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102380:	4b0f      	ldr	r3, [pc, #60]	; (81023c0 <MX_I2C1_Init+0x74>)
 8102382:	2200      	movs	r2, #0
 8102384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8102386:	480e      	ldr	r0, [pc, #56]	; (81023c0 <MX_I2C1_Init+0x74>)
 8102388:	f002 faba 	bl	8104900 <HAL_I2C_Init>
 810238c:	4603      	mov	r3, r0
 810238e:	2b00      	cmp	r3, #0
 8102390:	d001      	beq.n	8102396 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8102392:	f7ff fc75 	bl	8101c80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8102396:	2100      	movs	r1, #0
 8102398:	4809      	ldr	r0, [pc, #36]	; (81023c0 <MX_I2C1_Init+0x74>)
 810239a:	f003 f815 	bl	81053c8 <HAL_I2CEx_ConfigAnalogFilter>
 810239e:	4603      	mov	r3, r0
 81023a0:	2b00      	cmp	r3, #0
 81023a2:	d001      	beq.n	81023a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81023a4:	f7ff fc6c 	bl	8101c80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81023a8:	2100      	movs	r1, #0
 81023aa:	4805      	ldr	r0, [pc, #20]	; (81023c0 <MX_I2C1_Init+0x74>)
 81023ac:	f003 f857 	bl	810545e <HAL_I2CEx_ConfigDigitalFilter>
 81023b0:	4603      	mov	r3, r0
 81023b2:	2b00      	cmp	r3, #0
 81023b4:	d001      	beq.n	81023ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81023b6:	f7ff fc63 	bl	8101c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 81023ba:	bf00      	nop
 81023bc:	bd80      	pop	{r7, pc}
 81023be:	bf00      	nop
 81023c0:	10000164 	.word	0x10000164
 81023c4:	40005400 	.word	0x40005400
 81023c8:	307075b1 	.word	0x307075b1

081023cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 81023cc:	b580      	push	{r7, lr}
 81023ce:	b0b8      	sub	sp, #224	; 0xe0
 81023d0:	af00      	add	r7, sp, #0
 81023d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81023d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81023d8:	2200      	movs	r2, #0
 81023da:	601a      	str	r2, [r3, #0]
 81023dc:	605a      	str	r2, [r3, #4]
 81023de:	609a      	str	r2, [r3, #8]
 81023e0:	60da      	str	r2, [r3, #12]
 81023e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81023e4:	f107 0310 	add.w	r3, r7, #16
 81023e8:	22bc      	movs	r2, #188	; 0xbc
 81023ea:	2100      	movs	r1, #0
 81023ec:	4618      	mov	r0, r3
 81023ee:	f007 ffc1 	bl	810a374 <memset>
  if(i2cHandle->Instance==I2C1)
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	681b      	ldr	r3, [r3, #0]
 81023f6:	4a25      	ldr	r2, [pc, #148]	; (810248c <HAL_I2C_MspInit+0xc0>)
 81023f8:	4293      	cmp	r3, r2
 81023fa:	d142      	bne.n	8102482 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81023fc:	2308      	movs	r3, #8
 81023fe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102400:	2300      	movs	r3, #0
 8102402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102406:	f107 0310 	add.w	r3, r7, #16
 810240a:	4618      	mov	r0, r3
 810240c:	f003 fad4 	bl	81059b8 <HAL_RCCEx_PeriphCLKConfig>
 8102410:	4603      	mov	r3, r0
 8102412:	2b00      	cmp	r3, #0
 8102414:	d001      	beq.n	810241a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8102416:	f7ff fc33 	bl	8101c80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810241a:	4b1d      	ldr	r3, [pc, #116]	; (8102490 <HAL_I2C_MspInit+0xc4>)
 810241c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102420:	4a1b      	ldr	r2, [pc, #108]	; (8102490 <HAL_I2C_MspInit+0xc4>)
 8102422:	f043 0302 	orr.w	r3, r3, #2
 8102426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810242a:	4b19      	ldr	r3, [pc, #100]	; (8102490 <HAL_I2C_MspInit+0xc4>)
 810242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102430:	f003 0302 	and.w	r3, r3, #2
 8102434:	60fb      	str	r3, [r7, #12]
 8102436:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8102438:	f44f 7340 	mov.w	r3, #768	; 0x300
 810243c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102440:	2312      	movs	r3, #18
 8102442:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102446:	2300      	movs	r3, #0
 8102448:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810244c:	2300      	movs	r3, #0
 810244e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102452:	2304      	movs	r3, #4
 8102454:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102458:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810245c:	4619      	mov	r1, r3
 810245e:	480d      	ldr	r0, [pc, #52]	; (8102494 <HAL_I2C_MspInit+0xc8>)
 8102460:	f002 f836 	bl	81044d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102464:	4b0a      	ldr	r3, [pc, #40]	; (8102490 <HAL_I2C_MspInit+0xc4>)
 8102466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810246a:	4a09      	ldr	r2, [pc, #36]	; (8102490 <HAL_I2C_MspInit+0xc4>)
 810246c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102470:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102474:	4b06      	ldr	r3, [pc, #24]	; (8102490 <HAL_I2C_MspInit+0xc4>)
 8102476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810247a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810247e:	60bb      	str	r3, [r7, #8]
 8102480:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8102482:	bf00      	nop
 8102484:	37e0      	adds	r7, #224	; 0xe0
 8102486:	46bd      	mov	sp, r7
 8102488:	bd80      	pop	{r7, pc}
 810248a:	bf00      	nop
 810248c:	40005400 	.word	0x40005400
 8102490:	58024400 	.word	0x58024400
 8102494:	58020400 	.word	0x58020400

08102498 <i2c_Transmit>:
@param[5] pData: Pointer to the data buffer containing the data to be transmitted.
@param[6] pData_size: Size of the data buffer in bytes.

@retval HAL_StatusTypeDef: HAL status enumeration value.
 */
{
 8102498:	b590      	push	{r4, r7, lr}
 810249a:	b089      	sub	sp, #36	; 0x24
 810249c:	af04      	add	r7, sp, #16
 810249e:	6078      	str	r0, [r7, #4]
 81024a0:	4608      	mov	r0, r1
 81024a2:	4611      	mov	r1, r2
 81024a4:	461a      	mov	r2, r3
 81024a6:	4603      	mov	r3, r0
 81024a8:	70fb      	strb	r3, [r7, #3]
 81024aa:	460b      	mov	r3, r1
 81024ac:	70bb      	strb	r3, [r7, #2]
 81024ae:	4613      	mov	r3, r2
 81024b0:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef retFunc;
	uint8_t write_addr = DevAddress << 1;
 81024b2:	78fb      	ldrb	r3, [r7, #3]
 81024b4:	005b      	lsls	r3, r3, #1
 81024b6:	73fb      	strb	r3, [r7, #15]
	retFunc = HAL_I2C_Mem_Write(bus, write_addr, MemAddress, MemAddSize, pData,
 81024b8:	7bfb      	ldrb	r3, [r7, #15]
 81024ba:	b299      	uxth	r1, r3
 81024bc:	78bb      	ldrb	r3, [r7, #2]
 81024be:	b29a      	uxth	r2, r3
 81024c0:	787b      	ldrb	r3, [r7, #1]
 81024c2:	b298      	uxth	r0, r3
 81024c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 81024c8:	b29b      	uxth	r3, r3
 81024ca:	2432      	movs	r4, #50	; 0x32
 81024cc:	9402      	str	r4, [sp, #8]
 81024ce:	9301      	str	r3, [sp, #4]
 81024d0:	6a3b      	ldr	r3, [r7, #32]
 81024d2:	9300      	str	r3, [sp, #0]
 81024d4:	4603      	mov	r3, r0
 81024d6:	6878      	ldr	r0, [r7, #4]
 81024d8:	f002 faa2 	bl	8104a20 <HAL_I2C_Mem_Write>
 81024dc:	4603      	mov	r3, r0
 81024de:	73bb      	strb	r3, [r7, #14]
			pData_size, TIME_OUT);
	return retFunc;
 81024e0:	7bbb      	ldrb	r3, [r7, #14]
}
 81024e2:	4618      	mov	r0, r3
 81024e4:	3714      	adds	r7, #20
 81024e6:	46bd      	mov	sp, r7
 81024e8:	bd90      	pop	{r4, r7, pc}

081024ea <i2c_Receive>:
@param[5] pData: Pointer to the data buffer to store the received data.
@param[6] pData_size: Size of the data buffer in bytes.

@retval HAL_StatusTypeDef: HAL status enumeration value.
 */
{
 81024ea:	b590      	push	{r4, r7, lr}
 81024ec:	b089      	sub	sp, #36	; 0x24
 81024ee:	af04      	add	r7, sp, #16
 81024f0:	6078      	str	r0, [r7, #4]
 81024f2:	4608      	mov	r0, r1
 81024f4:	4611      	mov	r1, r2
 81024f6:	461a      	mov	r2, r3
 81024f8:	4603      	mov	r3, r0
 81024fa:	70fb      	strb	r3, [r7, #3]
 81024fc:	460b      	mov	r3, r1
 81024fe:	70bb      	strb	r3, [r7, #2]
 8102500:	4613      	mov	r3, r2
 8102502:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef retFunc;
	uint8_t read_addr = (DevAddress << 1) | 0x01;
 8102504:	78fb      	ldrb	r3, [r7, #3]
 8102506:	005b      	lsls	r3, r3, #1
 8102508:	b25b      	sxtb	r3, r3
 810250a:	f043 0301 	orr.w	r3, r3, #1
 810250e:	b25b      	sxtb	r3, r3
 8102510:	73fb      	strb	r3, [r7, #15]
	retFunc = HAL_I2C_Mem_Read(bus, read_addr, MemAddress, MemAddSize, pData,
 8102512:	7bfb      	ldrb	r3, [r7, #15]
 8102514:	b299      	uxth	r1, r3
 8102516:	78bb      	ldrb	r3, [r7, #2]
 8102518:	b29a      	uxth	r2, r3
 810251a:	787b      	ldrb	r3, [r7, #1]
 810251c:	b298      	uxth	r0, r3
 810251e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8102522:	b29b      	uxth	r3, r3
 8102524:	2432      	movs	r4, #50	; 0x32
 8102526:	9402      	str	r4, [sp, #8]
 8102528:	9301      	str	r3, [sp, #4]
 810252a:	6a3b      	ldr	r3, [r7, #32]
 810252c:	9300      	str	r3, [sp, #0]
 810252e:	4603      	mov	r3, r0
 8102530:	6878      	ldr	r0, [r7, #4]
 8102532:	f002 fb89 	bl	8104c48 <HAL_I2C_Mem_Read>
 8102536:	4603      	mov	r3, r0
 8102538:	73bb      	strb	r3, [r7, #14]
			pData_size, TIME_OUT);
	return retFunc;
 810253a:	7bbb      	ldrb	r3, [r7, #14]
}
 810253c:	4618      	mov	r0, r3
 810253e:	3714      	adds	r7, #20
 8102540:	46bd      	mov	sp, r7
 8102542:	bd90      	pop	{r4, r7, pc}

08102544 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8102544:	b580      	push	{r7, lr}
 8102546:	b08a      	sub	sp, #40	; 0x28
 8102548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810254a:	f107 031c 	add.w	r3, r7, #28
 810254e:	2200      	movs	r2, #0
 8102550:	601a      	str	r2, [r3, #0]
 8102552:	605a      	str	r2, [r3, #4]
 8102554:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102556:	463b      	mov	r3, r7
 8102558:	2200      	movs	r2, #0
 810255a:	601a      	str	r2, [r3, #0]
 810255c:	605a      	str	r2, [r3, #4]
 810255e:	609a      	str	r2, [r3, #8]
 8102560:	60da      	str	r2, [r3, #12]
 8102562:	611a      	str	r2, [r3, #16]
 8102564:	615a      	str	r2, [r3, #20]
 8102566:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8102568:	4b27      	ldr	r3, [pc, #156]	; (8102608 <MX_TIM2_Init+0xc4>)
 810256a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810256e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8102570:	4b25      	ldr	r3, [pc, #148]	; (8102608 <MX_TIM2_Init+0xc4>)
 8102572:	222f      	movs	r2, #47	; 0x2f
 8102574:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102576:	4b24      	ldr	r3, [pc, #144]	; (8102608 <MX_TIM2_Init+0xc4>)
 8102578:	2200      	movs	r2, #0
 810257a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 810257c:	4b22      	ldr	r3, [pc, #136]	; (8102608 <MX_TIM2_Init+0xc4>)
 810257e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8102582:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102584:	4b20      	ldr	r3, [pc, #128]	; (8102608 <MX_TIM2_Init+0xc4>)
 8102586:	2200      	movs	r2, #0
 8102588:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810258a:	4b1f      	ldr	r3, [pc, #124]	; (8102608 <MX_TIM2_Init+0xc4>)
 810258c:	2200      	movs	r2, #0
 810258e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8102590:	481d      	ldr	r0, [pc, #116]	; (8102608 <MX_TIM2_Init+0xc4>)
 8102592:	f005 fc6d 	bl	8107e70 <HAL_TIM_PWM_Init>
 8102596:	4603      	mov	r3, r0
 8102598:	2b00      	cmp	r3, #0
 810259a:	d001      	beq.n	81025a0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 810259c:	f7ff fb70 	bl	8101c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81025a0:	2300      	movs	r3, #0
 81025a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81025a4:	2300      	movs	r3, #0
 81025a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 81025a8:	f107 031c 	add.w	r3, r7, #28
 81025ac:	4619      	mov	r1, r3
 81025ae:	4816      	ldr	r0, [pc, #88]	; (8102608 <MX_TIM2_Init+0xc4>)
 81025b0:	f006 fd0a 	bl	8108fc8 <HAL_TIMEx_MasterConfigSynchronization>
 81025b4:	4603      	mov	r3, r0
 81025b6:	2b00      	cmp	r3, #0
 81025b8:	d001      	beq.n	81025be <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 81025ba:	f7ff fb61 	bl	8101c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81025be:	2360      	movs	r3, #96	; 0x60
 81025c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 81025c2:	2300      	movs	r3, #0
 81025c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81025c6:	2300      	movs	r3, #0
 81025c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81025ca:	2300      	movs	r3, #0
 81025cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 81025ce:	463b      	mov	r3, r7
 81025d0:	2208      	movs	r2, #8
 81025d2:	4619      	mov	r1, r3
 81025d4:	480c      	ldr	r0, [pc, #48]	; (8102608 <MX_TIM2_Init+0xc4>)
 81025d6:	f006 f825 	bl	8108624 <HAL_TIM_PWM_ConfigChannel>
 81025da:	4603      	mov	r3, r0
 81025dc:	2b00      	cmp	r3, #0
 81025de:	d001      	beq.n	81025e4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 81025e0:	f7ff fb4e 	bl	8101c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 81025e4:	463b      	mov	r3, r7
 81025e6:	220c      	movs	r2, #12
 81025e8:	4619      	mov	r1, r3
 81025ea:	4807      	ldr	r0, [pc, #28]	; (8102608 <MX_TIM2_Init+0xc4>)
 81025ec:	f006 f81a 	bl	8108624 <HAL_TIM_PWM_ConfigChannel>
 81025f0:	4603      	mov	r3, r0
 81025f2:	2b00      	cmp	r3, #0
 81025f4:	d001      	beq.n	81025fa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 81025f6:	f7ff fb43 	bl	8101c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 81025fa:	4803      	ldr	r0, [pc, #12]	; (8102608 <MX_TIM2_Init+0xc4>)
 81025fc:	f000 fa9e 	bl	8102b3c <HAL_TIM_MspPostInit>

}
 8102600:	bf00      	nop
 8102602:	3728      	adds	r7, #40	; 0x28
 8102604:	46bd      	mov	sp, r7
 8102606:	bd80      	pop	{r7, pc}
 8102608:	100001b0 	.word	0x100001b0

0810260c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 810260c:	b580      	push	{r7, lr}
 810260e:	b08c      	sub	sp, #48	; 0x30
 8102610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8102612:	f107 030c 	add.w	r3, r7, #12
 8102616:	2224      	movs	r2, #36	; 0x24
 8102618:	2100      	movs	r1, #0
 810261a:	4618      	mov	r0, r3
 810261c:	f007 feaa 	bl	810a374 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102620:	463b      	mov	r3, r7
 8102622:	2200      	movs	r2, #0
 8102624:	601a      	str	r2, [r3, #0]
 8102626:	605a      	str	r2, [r3, #4]
 8102628:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 810262a:	4b21      	ldr	r3, [pc, #132]	; (81026b0 <MX_TIM3_Init+0xa4>)
 810262c:	4a21      	ldr	r2, [pc, #132]	; (81026b4 <MX_TIM3_Init+0xa8>)
 810262e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8102630:	4b1f      	ldr	r3, [pc, #124]	; (81026b0 <MX_TIM3_Init+0xa4>)
 8102632:	2200      	movs	r2, #0
 8102634:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102636:	4b1e      	ldr	r3, [pc, #120]	; (81026b0 <MX_TIM3_Init+0xa4>)
 8102638:	2200      	movs	r2, #0
 810263a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 810263c:	4b1c      	ldr	r3, [pc, #112]	; (81026b0 <MX_TIM3_Init+0xa4>)
 810263e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8102642:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102644:	4b1a      	ldr	r3, [pc, #104]	; (81026b0 <MX_TIM3_Init+0xa4>)
 8102646:	2200      	movs	r2, #0
 8102648:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810264a:	4b19      	ldr	r3, [pc, #100]	; (81026b0 <MX_TIM3_Init+0xa4>)
 810264c:	2200      	movs	r2, #0
 810264e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8102650:	2301      	movs	r3, #1
 8102652:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8102654:	2300      	movs	r3, #0
 8102656:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8102658:	2301      	movs	r3, #1
 810265a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 810265c:	2300      	movs	r3, #0
 810265e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8102660:	2300      	movs	r3, #0
 8102662:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8102664:	2302      	movs	r3, #2
 8102666:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8102668:	2301      	movs	r3, #1
 810266a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 810266c:	2300      	movs	r3, #0
 810266e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8102670:	2300      	movs	r3, #0
 8102672:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8102674:	f107 030c 	add.w	r3, r7, #12
 8102678:	4619      	mov	r1, r3
 810267a:	480d      	ldr	r0, [pc, #52]	; (81026b0 <MX_TIM3_Init+0xa4>)
 810267c:	f005 fd5e 	bl	810813c <HAL_TIM_Encoder_Init>
 8102680:	4603      	mov	r3, r0
 8102682:	2b00      	cmp	r3, #0
 8102684:	d001      	beq.n	810268a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8102686:	f7ff fafb 	bl	8101c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810268a:	2300      	movs	r3, #0
 810268c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810268e:	2300      	movs	r3, #0
 8102690:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102692:	463b      	mov	r3, r7
 8102694:	4619      	mov	r1, r3
 8102696:	4806      	ldr	r0, [pc, #24]	; (81026b0 <MX_TIM3_Init+0xa4>)
 8102698:	f006 fc96 	bl	8108fc8 <HAL_TIMEx_MasterConfigSynchronization>
 810269c:	4603      	mov	r3, r0
 810269e:	2b00      	cmp	r3, #0
 81026a0:	d001      	beq.n	81026a6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 81026a2:	f7ff faed 	bl	8101c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 81026a6:	bf00      	nop
 81026a8:	3730      	adds	r7, #48	; 0x30
 81026aa:	46bd      	mov	sp, r7
 81026ac:	bd80      	pop	{r7, pc}
 81026ae:	bf00      	nop
 81026b0:	100001fc 	.word	0x100001fc
 81026b4:	40000400 	.word	0x40000400

081026b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 81026b8:	b580      	push	{r7, lr}
 81026ba:	b08c      	sub	sp, #48	; 0x30
 81026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81026be:	f107 030c 	add.w	r3, r7, #12
 81026c2:	2224      	movs	r2, #36	; 0x24
 81026c4:	2100      	movs	r1, #0
 81026c6:	4618      	mov	r0, r3
 81026c8:	f007 fe54 	bl	810a374 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81026cc:	463b      	mov	r3, r7
 81026ce:	2200      	movs	r2, #0
 81026d0:	601a      	str	r2, [r3, #0]
 81026d2:	605a      	str	r2, [r3, #4]
 81026d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 81026d6:	4b21      	ldr	r3, [pc, #132]	; (810275c <MX_TIM4_Init+0xa4>)
 81026d8:	4a21      	ldr	r2, [pc, #132]	; (8102760 <MX_TIM4_Init+0xa8>)
 81026da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 81026dc:	4b1f      	ldr	r3, [pc, #124]	; (810275c <MX_TIM4_Init+0xa4>)
 81026de:	2200      	movs	r2, #0
 81026e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 81026e2:	4b1e      	ldr	r3, [pc, #120]	; (810275c <MX_TIM4_Init+0xa4>)
 81026e4:	2200      	movs	r2, #0
 81026e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 81026e8:	4b1c      	ldr	r3, [pc, #112]	; (810275c <MX_TIM4_Init+0xa4>)
 81026ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81026ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81026f0:	4b1a      	ldr	r3, [pc, #104]	; (810275c <MX_TIM4_Init+0xa4>)
 81026f2:	2200      	movs	r2, #0
 81026f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81026f6:	4b19      	ldr	r3, [pc, #100]	; (810275c <MX_TIM4_Init+0xa4>)
 81026f8:	2200      	movs	r2, #0
 81026fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 81026fc:	2301      	movs	r3, #1
 81026fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8102700:	2300      	movs	r3, #0
 8102702:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8102704:	2301      	movs	r3, #1
 8102706:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8102708:	2300      	movs	r3, #0
 810270a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 810270c:	2300      	movs	r3, #0
 810270e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8102710:	2302      	movs	r3, #2
 8102712:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8102714:	2301      	movs	r3, #1
 8102716:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8102718:	2300      	movs	r3, #0
 810271a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 810271c:	2300      	movs	r3, #0
 810271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8102720:	f107 030c 	add.w	r3, r7, #12
 8102724:	4619      	mov	r1, r3
 8102726:	480d      	ldr	r0, [pc, #52]	; (810275c <MX_TIM4_Init+0xa4>)
 8102728:	f005 fd08 	bl	810813c <HAL_TIM_Encoder_Init>
 810272c:	4603      	mov	r3, r0
 810272e:	2b00      	cmp	r3, #0
 8102730:	d001      	beq.n	8102736 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8102732:	f7ff faa5 	bl	8101c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102736:	2300      	movs	r3, #0
 8102738:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810273a:	2300      	movs	r3, #0
 810273c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 810273e:	463b      	mov	r3, r7
 8102740:	4619      	mov	r1, r3
 8102742:	4806      	ldr	r0, [pc, #24]	; (810275c <MX_TIM4_Init+0xa4>)
 8102744:	f006 fc40 	bl	8108fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8102748:	4603      	mov	r3, r0
 810274a:	2b00      	cmp	r3, #0
 810274c:	d001      	beq.n	8102752 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 810274e:	f7ff fa97 	bl	8101c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8102752:	bf00      	nop
 8102754:	3730      	adds	r7, #48	; 0x30
 8102756:	46bd      	mov	sp, r7
 8102758:	bd80      	pop	{r7, pc}
 810275a:	bf00      	nop
 810275c:	10000248 	.word	0x10000248
 8102760:	40000800 	.word	0x40000800

08102764 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8102764:	b580      	push	{r7, lr}
 8102766:	b084      	sub	sp, #16
 8102768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810276a:	1d3b      	adds	r3, r7, #4
 810276c:	2200      	movs	r2, #0
 810276e:	601a      	str	r2, [r3, #0]
 8102770:	605a      	str	r2, [r3, #4]
 8102772:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8102774:	4b14      	ldr	r3, [pc, #80]	; (81027c8 <MX_TIM7_Init+0x64>)
 8102776:	4a15      	ldr	r2, [pc, #84]	; (81027cc <MX_TIM7_Init+0x68>)
 8102778:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 810277a:	4b13      	ldr	r3, [pc, #76]	; (81027c8 <MX_TIM7_Init+0x64>)
 810277c:	224f      	movs	r2, #79	; 0x4f
 810277e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102780:	4b11      	ldr	r3, [pc, #68]	; (81027c8 <MX_TIM7_Init+0x64>)
 8102782:	2200      	movs	r2, #0
 8102784:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 60000-1;
 8102786:	4b10      	ldr	r3, [pc, #64]	; (81027c8 <MX_TIM7_Init+0x64>)
 8102788:	f64e 225f 	movw	r2, #59999	; 0xea5f
 810278c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810278e:	4b0e      	ldr	r3, [pc, #56]	; (81027c8 <MX_TIM7_Init+0x64>)
 8102790:	2200      	movs	r2, #0
 8102792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8102794:	480c      	ldr	r0, [pc, #48]	; (81027c8 <MX_TIM7_Init+0x64>)
 8102796:	f005 fa9b 	bl	8107cd0 <HAL_TIM_Base_Init>
 810279a:	4603      	mov	r3, r0
 810279c:	2b00      	cmp	r3, #0
 810279e:	d001      	beq.n	81027a4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 81027a0:	f7ff fa6e 	bl	8101c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81027a4:	2300      	movs	r3, #0
 81027a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81027a8:	2300      	movs	r3, #0
 81027aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 81027ac:	1d3b      	adds	r3, r7, #4
 81027ae:	4619      	mov	r1, r3
 81027b0:	4805      	ldr	r0, [pc, #20]	; (81027c8 <MX_TIM7_Init+0x64>)
 81027b2:	f006 fc09 	bl	8108fc8 <HAL_TIMEx_MasterConfigSynchronization>
 81027b6:	4603      	mov	r3, r0
 81027b8:	2b00      	cmp	r3, #0
 81027ba:	d001      	beq.n	81027c0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 81027bc:	f7ff fa60 	bl	8101c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 81027c0:	bf00      	nop
 81027c2:	3710      	adds	r7, #16
 81027c4:	46bd      	mov	sp, r7
 81027c6:	bd80      	pop	{r7, pc}
 81027c8:	10000294 	.word	0x10000294
 81027cc:	40001400 	.word	0x40001400

081027d0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 81027d0:	b580      	push	{r7, lr}
 81027d2:	b088      	sub	sp, #32
 81027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 81027d6:	1d3b      	adds	r3, r7, #4
 81027d8:	2200      	movs	r2, #0
 81027da:	601a      	str	r2, [r3, #0]
 81027dc:	605a      	str	r2, [r3, #4]
 81027de:	609a      	str	r2, [r3, #8]
 81027e0:	60da      	str	r2, [r3, #12]
 81027e2:	611a      	str	r2, [r3, #16]
 81027e4:	615a      	str	r2, [r3, #20]
 81027e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 81027e8:	4b1e      	ldr	r3, [pc, #120]	; (8102864 <MX_TIM13_Init+0x94>)
 81027ea:	4a1f      	ldr	r2, [pc, #124]	; (8102868 <MX_TIM13_Init+0x98>)
 81027ec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 80-1;
 81027ee:	4b1d      	ldr	r3, [pc, #116]	; (8102864 <MX_TIM13_Init+0x94>)
 81027f0:	224f      	movs	r2, #79	; 0x4f
 81027f2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 81027f4:	4b1b      	ldr	r3, [pc, #108]	; (8102864 <MX_TIM13_Init+0x94>)
 81027f6:	2200      	movs	r2, #0
 81027f8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 60000-1;
 81027fa:	4b1a      	ldr	r3, [pc, #104]	; (8102864 <MX_TIM13_Init+0x94>)
 81027fc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8102800:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102802:	4b18      	ldr	r3, [pc, #96]	; (8102864 <MX_TIM13_Init+0x94>)
 8102804:	2200      	movs	r2, #0
 8102806:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102808:	4b16      	ldr	r3, [pc, #88]	; (8102864 <MX_TIM13_Init+0x94>)
 810280a:	2200      	movs	r2, #0
 810280c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 810280e:	4815      	ldr	r0, [pc, #84]	; (8102864 <MX_TIM13_Init+0x94>)
 8102810:	f005 fa5e 	bl	8107cd0 <HAL_TIM_Base_Init>
 8102814:	4603      	mov	r3, r0
 8102816:	2b00      	cmp	r3, #0
 8102818:	d001      	beq.n	810281e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 810281a:	f7ff fa31 	bl	8101c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 810281e:	4811      	ldr	r0, [pc, #68]	; (8102864 <MX_TIM13_Init+0x94>)
 8102820:	f005 fb26 	bl	8107e70 <HAL_TIM_PWM_Init>
 8102824:	4603      	mov	r3, r0
 8102826:	2b00      	cmp	r3, #0
 8102828:	d001      	beq.n	810282e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 810282a:	f7ff fa29 	bl	8101c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810282e:	2360      	movs	r3, #96	; 0x60
 8102830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8102832:	2300      	movs	r3, #0
 8102834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102836:	2300      	movs	r3, #0
 8102838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810283a:	2300      	movs	r3, #0
 810283c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810283e:	1d3b      	adds	r3, r7, #4
 8102840:	2200      	movs	r2, #0
 8102842:	4619      	mov	r1, r3
 8102844:	4807      	ldr	r0, [pc, #28]	; (8102864 <MX_TIM13_Init+0x94>)
 8102846:	f005 feed 	bl	8108624 <HAL_TIM_PWM_ConfigChannel>
 810284a:	4603      	mov	r3, r0
 810284c:	2b00      	cmp	r3, #0
 810284e:	d001      	beq.n	8102854 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8102850:	f7ff fa16 	bl	8101c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8102854:	4803      	ldr	r0, [pc, #12]	; (8102864 <MX_TIM13_Init+0x94>)
 8102856:	f000 f971 	bl	8102b3c <HAL_TIM_MspPostInit>

}
 810285a:	bf00      	nop
 810285c:	3720      	adds	r7, #32
 810285e:	46bd      	mov	sp, r7
 8102860:	bd80      	pop	{r7, pc}
 8102862:	bf00      	nop
 8102864:	100002e0 	.word	0x100002e0
 8102868:	40001c00 	.word	0x40001c00

0810286c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 810286c:	b580      	push	{r7, lr}
 810286e:	b088      	sub	sp, #32
 8102870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8102872:	1d3b      	adds	r3, r7, #4
 8102874:	2200      	movs	r2, #0
 8102876:	601a      	str	r2, [r3, #0]
 8102878:	605a      	str	r2, [r3, #4]
 810287a:	609a      	str	r2, [r3, #8]
 810287c:	60da      	str	r2, [r3, #12]
 810287e:	611a      	str	r2, [r3, #16]
 8102880:	615a      	str	r2, [r3, #20]
 8102882:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8102884:	4b1e      	ldr	r3, [pc, #120]	; (8102900 <MX_TIM14_Init+0x94>)
 8102886:	4a1f      	ldr	r2, [pc, #124]	; (8102904 <MX_TIM14_Init+0x98>)
 8102888:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80-1;
 810288a:	4b1d      	ldr	r3, [pc, #116]	; (8102900 <MX_TIM14_Init+0x94>)
 810288c:	224f      	movs	r2, #79	; 0x4f
 810288e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102890:	4b1b      	ldr	r3, [pc, #108]	; (8102900 <MX_TIM14_Init+0x94>)
 8102892:	2200      	movs	r2, #0
 8102894:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 60000-1;
 8102896:	4b1a      	ldr	r3, [pc, #104]	; (8102900 <MX_TIM14_Init+0x94>)
 8102898:	f64e 225f 	movw	r2, #59999	; 0xea5f
 810289c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810289e:	4b18      	ldr	r3, [pc, #96]	; (8102900 <MX_TIM14_Init+0x94>)
 81028a0:	2200      	movs	r2, #0
 81028a2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81028a4:	4b16      	ldr	r3, [pc, #88]	; (8102900 <MX_TIM14_Init+0x94>)
 81028a6:	2200      	movs	r2, #0
 81028a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 81028aa:	4815      	ldr	r0, [pc, #84]	; (8102900 <MX_TIM14_Init+0x94>)
 81028ac:	f005 fa10 	bl	8107cd0 <HAL_TIM_Base_Init>
 81028b0:	4603      	mov	r3, r0
 81028b2:	2b00      	cmp	r3, #0
 81028b4:	d001      	beq.n	81028ba <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 81028b6:	f7ff f9e3 	bl	8101c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 81028ba:	4811      	ldr	r0, [pc, #68]	; (8102900 <MX_TIM14_Init+0x94>)
 81028bc:	f005 fad8 	bl	8107e70 <HAL_TIM_PWM_Init>
 81028c0:	4603      	mov	r3, r0
 81028c2:	2b00      	cmp	r3, #0
 81028c4:	d001      	beq.n	81028ca <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 81028c6:	f7ff f9db 	bl	8101c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81028ca:	2360      	movs	r3, #96	; 0x60
 81028cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 81028ce:	2300      	movs	r3, #0
 81028d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81028d2:	2300      	movs	r3, #0
 81028d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81028d6:	2300      	movs	r3, #0
 81028d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81028da:	1d3b      	adds	r3, r7, #4
 81028dc:	2200      	movs	r2, #0
 81028de:	4619      	mov	r1, r3
 81028e0:	4807      	ldr	r0, [pc, #28]	; (8102900 <MX_TIM14_Init+0x94>)
 81028e2:	f005 fe9f 	bl	8108624 <HAL_TIM_PWM_ConfigChannel>
 81028e6:	4603      	mov	r3, r0
 81028e8:	2b00      	cmp	r3, #0
 81028ea:	d001      	beq.n	81028f0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 81028ec:	f7ff f9c8 	bl	8101c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 81028f0:	4803      	ldr	r0, [pc, #12]	; (8102900 <MX_TIM14_Init+0x94>)
 81028f2:	f000 f923 	bl	8102b3c <HAL_TIM_MspPostInit>

}
 81028f6:	bf00      	nop
 81028f8:	3720      	adds	r7, #32
 81028fa:	46bd      	mov	sp, r7
 81028fc:	bd80      	pop	{r7, pc}
 81028fe:	bf00      	nop
 8102900:	1000032c 	.word	0x1000032c
 8102904:	40002000 	.word	0x40002000

08102908 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8102908:	b480      	push	{r7}
 810290a:	b085      	sub	sp, #20
 810290c:	af00      	add	r7, sp, #0
 810290e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8102910:	687b      	ldr	r3, [r7, #4]
 8102912:	681b      	ldr	r3, [r3, #0]
 8102914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102918:	d10e      	bne.n	8102938 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 810291a:	4b0a      	ldr	r3, [pc, #40]	; (8102944 <HAL_TIM_PWM_MspInit+0x3c>)
 810291c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102920:	4a08      	ldr	r2, [pc, #32]	; (8102944 <HAL_TIM_PWM_MspInit+0x3c>)
 8102922:	f043 0301 	orr.w	r3, r3, #1
 8102926:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810292a:	4b06      	ldr	r3, [pc, #24]	; (8102944 <HAL_TIM_PWM_MspInit+0x3c>)
 810292c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102930:	f003 0301 	and.w	r3, r3, #1
 8102934:	60fb      	str	r3, [r7, #12]
 8102936:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8102938:	bf00      	nop
 810293a:	3714      	adds	r7, #20
 810293c:	46bd      	mov	sp, r7
 810293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102942:	4770      	bx	lr
 8102944:	58024400 	.word	0x58024400

08102948 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8102948:	b580      	push	{r7, lr}
 810294a:	b08c      	sub	sp, #48	; 0x30
 810294c:	af00      	add	r7, sp, #0
 810294e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102950:	f107 031c 	add.w	r3, r7, #28
 8102954:	2200      	movs	r2, #0
 8102956:	601a      	str	r2, [r3, #0]
 8102958:	605a      	str	r2, [r3, #4]
 810295a:	609a      	str	r2, [r3, #8]
 810295c:	60da      	str	r2, [r3, #12]
 810295e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8102960:	687b      	ldr	r3, [r7, #4]
 8102962:	681b      	ldr	r3, [r3, #0]
 8102964:	4a44      	ldr	r2, [pc, #272]	; (8102a78 <HAL_TIM_Encoder_MspInit+0x130>)
 8102966:	4293      	cmp	r3, r2
 8102968:	d14d      	bne.n	8102a06 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 810296a:	4b44      	ldr	r3, [pc, #272]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 810296c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102970:	4a42      	ldr	r2, [pc, #264]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 8102972:	f043 0302 	orr.w	r3, r3, #2
 8102976:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810297a:	4b40      	ldr	r3, [pc, #256]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 810297c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102980:	f003 0302 	and.w	r3, r3, #2
 8102984:	61bb      	str	r3, [r7, #24]
 8102986:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102988:	4b3c      	ldr	r3, [pc, #240]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 810298a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810298e:	4a3b      	ldr	r2, [pc, #236]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 8102990:	f043 0301 	orr.w	r3, r3, #1
 8102994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102998:	4b38      	ldr	r3, [pc, #224]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 810299a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810299e:	f003 0301 	and.w	r3, r3, #1
 81029a2:	617b      	str	r3, [r7, #20]
 81029a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81029a6:	4b35      	ldr	r3, [pc, #212]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 81029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81029ac:	4a33      	ldr	r2, [pc, #204]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 81029ae:	f043 0302 	orr.w	r3, r3, #2
 81029b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81029b6:	4b31      	ldr	r3, [pc, #196]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 81029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81029bc:	f003 0302 	and.w	r3, r3, #2
 81029c0:	613b      	str	r3, [r7, #16]
 81029c2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_X_A_Pin;
 81029c4:	2340      	movs	r3, #64	; 0x40
 81029c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81029c8:	2302      	movs	r3, #2
 81029ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81029cc:	2300      	movs	r3, #0
 81029ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81029d0:	2300      	movs	r3, #0
 81029d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 81029d4:	2302      	movs	r3, #2
 81029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Encoder_X_A_GPIO_Port, &GPIO_InitStruct);
 81029d8:	f107 031c 	add.w	r3, r7, #28
 81029dc:	4619      	mov	r1, r3
 81029de:	4828      	ldr	r0, [pc, #160]	; (8102a80 <HAL_TIM_Encoder_MspInit+0x138>)
 81029e0:	f001 fd76 	bl	81044d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_X_B_Pin;
 81029e4:	2320      	movs	r3, #32
 81029e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81029e8:	2302      	movs	r3, #2
 81029ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81029ec:	2300      	movs	r3, #0
 81029ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81029f0:	2300      	movs	r3, #0
 81029f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 81029f4:	2302      	movs	r3, #2
 81029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Encoder_X_B_GPIO_Port, &GPIO_InitStruct);
 81029f8:	f107 031c 	add.w	r3, r7, #28
 81029fc:	4619      	mov	r1, r3
 81029fe:	4821      	ldr	r0, [pc, #132]	; (8102a84 <HAL_TIM_Encoder_MspInit+0x13c>)
 8102a00:	f001 fd66 	bl	81044d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8102a04:	e033      	b.n	8102a6e <HAL_TIM_Encoder_MspInit+0x126>
  else if(tim_encoderHandle->Instance==TIM4)
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	4a1f      	ldr	r2, [pc, #124]	; (8102a88 <HAL_TIM_Encoder_MspInit+0x140>)
 8102a0c:	4293      	cmp	r3, r2
 8102a0e:	d12e      	bne.n	8102a6e <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8102a10:	4b1a      	ldr	r3, [pc, #104]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 8102a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a16:	4a19      	ldr	r2, [pc, #100]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 8102a18:	f043 0304 	orr.w	r3, r3, #4
 8102a1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102a20:	4b16      	ldr	r3, [pc, #88]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 8102a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a26:	f003 0304 	and.w	r3, r3, #4
 8102a2a:	60fb      	str	r3, [r7, #12]
 8102a2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102a2e:	4b13      	ldr	r3, [pc, #76]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 8102a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102a34:	4a11      	ldr	r2, [pc, #68]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 8102a36:	f043 0308 	orr.w	r3, r3, #8
 8102a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102a3e:	4b0f      	ldr	r3, [pc, #60]	; (8102a7c <HAL_TIM_Encoder_MspInit+0x134>)
 8102a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102a44:	f003 0308 	and.w	r3, r3, #8
 8102a48:	60bb      	str	r3, [r7, #8]
 8102a4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Z_A_Pin|Encoder_Z_B_Pin;
 8102a4c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8102a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102a52:	2302      	movs	r3, #2
 8102a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102a56:	2300      	movs	r3, #0
 8102a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102a5a:	2300      	movs	r3, #0
 8102a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8102a5e:	2302      	movs	r3, #2
 8102a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102a62:	f107 031c 	add.w	r3, r7, #28
 8102a66:	4619      	mov	r1, r3
 8102a68:	4808      	ldr	r0, [pc, #32]	; (8102a8c <HAL_TIM_Encoder_MspInit+0x144>)
 8102a6a:	f001 fd31 	bl	81044d0 <HAL_GPIO_Init>
}
 8102a6e:	bf00      	nop
 8102a70:	3730      	adds	r7, #48	; 0x30
 8102a72:	46bd      	mov	sp, r7
 8102a74:	bd80      	pop	{r7, pc}
 8102a76:	bf00      	nop
 8102a78:	40000400 	.word	0x40000400
 8102a7c:	58024400 	.word	0x58024400
 8102a80:	58020000 	.word	0x58020000
 8102a84:	58020400 	.word	0x58020400
 8102a88:	40000800 	.word	0x40000800
 8102a8c:	58020c00 	.word	0x58020c00

08102a90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8102a90:	b580      	push	{r7, lr}
 8102a92:	b086      	sub	sp, #24
 8102a94:	af00      	add	r7, sp, #0
 8102a96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	681b      	ldr	r3, [r3, #0]
 8102a9c:	4a23      	ldr	r2, [pc, #140]	; (8102b2c <HAL_TIM_Base_MspInit+0x9c>)
 8102a9e:	4293      	cmp	r3, r2
 8102aa0:	d117      	bne.n	8102ad2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8102aa2:	4b23      	ldr	r3, [pc, #140]	; (8102b30 <HAL_TIM_Base_MspInit+0xa0>)
 8102aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102aa8:	4a21      	ldr	r2, [pc, #132]	; (8102b30 <HAL_TIM_Base_MspInit+0xa0>)
 8102aaa:	f043 0320 	orr.w	r3, r3, #32
 8102aae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102ab2:	4b1f      	ldr	r3, [pc, #124]	; (8102b30 <HAL_TIM_Base_MspInit+0xa0>)
 8102ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102ab8:	f003 0320 	and.w	r3, r3, #32
 8102abc:	617b      	str	r3, [r7, #20]
 8102abe:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8102ac0:	2200      	movs	r2, #0
 8102ac2:	2100      	movs	r1, #0
 8102ac4:	2037      	movs	r0, #55	; 0x37
 8102ac6:	f001 fcba 	bl	810443e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8102aca:	2037      	movs	r0, #55	; 0x37
 8102acc:	f001 fcd1 	bl	8104472 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8102ad0:	e028      	b.n	8102b24 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM13)
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	4a17      	ldr	r2, [pc, #92]	; (8102b34 <HAL_TIM_Base_MspInit+0xa4>)
 8102ad8:	4293      	cmp	r3, r2
 8102ada:	d10f      	bne.n	8102afc <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8102adc:	4b14      	ldr	r3, [pc, #80]	; (8102b30 <HAL_TIM_Base_MspInit+0xa0>)
 8102ade:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102ae2:	4a13      	ldr	r2, [pc, #76]	; (8102b30 <HAL_TIM_Base_MspInit+0xa0>)
 8102ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8102ae8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102aec:	4b10      	ldr	r3, [pc, #64]	; (8102b30 <HAL_TIM_Base_MspInit+0xa0>)
 8102aee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102af6:	613b      	str	r3, [r7, #16]
 8102af8:	693b      	ldr	r3, [r7, #16]
}
 8102afa:	e013      	b.n	8102b24 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM14)
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	681b      	ldr	r3, [r3, #0]
 8102b00:	4a0d      	ldr	r2, [pc, #52]	; (8102b38 <HAL_TIM_Base_MspInit+0xa8>)
 8102b02:	4293      	cmp	r3, r2
 8102b04:	d10e      	bne.n	8102b24 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8102b06:	4b0a      	ldr	r3, [pc, #40]	; (8102b30 <HAL_TIM_Base_MspInit+0xa0>)
 8102b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b0c:	4a08      	ldr	r2, [pc, #32]	; (8102b30 <HAL_TIM_Base_MspInit+0xa0>)
 8102b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102b12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102b16:	4b06      	ldr	r3, [pc, #24]	; (8102b30 <HAL_TIM_Base_MspInit+0xa0>)
 8102b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102b20:	60fb      	str	r3, [r7, #12]
 8102b22:	68fb      	ldr	r3, [r7, #12]
}
 8102b24:	bf00      	nop
 8102b26:	3718      	adds	r7, #24
 8102b28:	46bd      	mov	sp, r7
 8102b2a:	bd80      	pop	{r7, pc}
 8102b2c:	40001400 	.word	0x40001400
 8102b30:	58024400 	.word	0x58024400
 8102b34:	40001c00 	.word	0x40001c00
 8102b38:	40002000 	.word	0x40002000

08102b3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8102b3c:	b580      	push	{r7, lr}
 8102b3e:	b08a      	sub	sp, #40	; 0x28
 8102b40:	af00      	add	r7, sp, #0
 8102b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102b44:	f107 0314 	add.w	r3, r7, #20
 8102b48:	2200      	movs	r2, #0
 8102b4a:	601a      	str	r2, [r3, #0]
 8102b4c:	605a      	str	r2, [r3, #4]
 8102b4e:	609a      	str	r2, [r3, #8]
 8102b50:	60da      	str	r2, [r3, #12]
 8102b52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102b5c:	d120      	bne.n	8102ba0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102b5e:	4b38      	ldr	r3, [pc, #224]	; (8102c40 <HAL_TIM_MspPostInit+0x104>)
 8102b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b64:	4a36      	ldr	r2, [pc, #216]	; (8102c40 <HAL_TIM_MspPostInit+0x104>)
 8102b66:	f043 0302 	orr.w	r3, r3, #2
 8102b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b6e:	4b34      	ldr	r3, [pc, #208]	; (8102c40 <HAL_TIM_MspPostInit+0x104>)
 8102b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b74:	f003 0302 	and.w	r3, r3, #2
 8102b78:	613b      	str	r3, [r7, #16]
 8102b7a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_X_Pin|PWM_Z_Pin;
 8102b7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8102b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102b82:	2302      	movs	r3, #2
 8102b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102b86:	2300      	movs	r3, #0
 8102b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102b8a:	2300      	movs	r3, #0
 8102b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8102b8e:	2301      	movs	r3, #1
 8102b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102b92:	f107 0314 	add.w	r3, r7, #20
 8102b96:	4619      	mov	r1, r3
 8102b98:	482a      	ldr	r0, [pc, #168]	; (8102c44 <HAL_TIM_MspPostInit+0x108>)
 8102b9a:	f001 fc99 	bl	81044d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8102b9e:	e04a      	b.n	8102c36 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8102ba0:	687b      	ldr	r3, [r7, #4]
 8102ba2:	681b      	ldr	r3, [r3, #0]
 8102ba4:	4a28      	ldr	r2, [pc, #160]	; (8102c48 <HAL_TIM_MspPostInit+0x10c>)
 8102ba6:	4293      	cmp	r3, r2
 8102ba8:	d120      	bne.n	8102bec <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102baa:	4b25      	ldr	r3, [pc, #148]	; (8102c40 <HAL_TIM_MspPostInit+0x104>)
 8102bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102bb0:	4a23      	ldr	r2, [pc, #140]	; (8102c40 <HAL_TIM_MspPostInit+0x104>)
 8102bb2:	f043 0320 	orr.w	r3, r3, #32
 8102bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102bba:	4b21      	ldr	r3, [pc, #132]	; (8102c40 <HAL_TIM_MspPostInit+0x104>)
 8102bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102bc0:	f003 0320 	and.w	r3, r3, #32
 8102bc4:	60fb      	str	r3, [r7, #12]
 8102bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Servo_Rotate_Pin;
 8102bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8102bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102bce:	2302      	movs	r3, #2
 8102bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102bd2:	2300      	movs	r3, #0
 8102bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102bd6:	2300      	movs	r3, #0
 8102bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8102bda:	2309      	movs	r3, #9
 8102bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Servo_Rotate_GPIO_Port, &GPIO_InitStruct);
 8102bde:	f107 0314 	add.w	r3, r7, #20
 8102be2:	4619      	mov	r1, r3
 8102be4:	4819      	ldr	r0, [pc, #100]	; (8102c4c <HAL_TIM_MspPostInit+0x110>)
 8102be6:	f001 fc73 	bl	81044d0 <HAL_GPIO_Init>
}
 8102bea:	e024      	b.n	8102c36 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8102bec:	687b      	ldr	r3, [r7, #4]
 8102bee:	681b      	ldr	r3, [r3, #0]
 8102bf0:	4a17      	ldr	r2, [pc, #92]	; (8102c50 <HAL_TIM_MspPostInit+0x114>)
 8102bf2:	4293      	cmp	r3, r2
 8102bf4:	d11f      	bne.n	8102c36 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102bf6:	4b12      	ldr	r3, [pc, #72]	; (8102c40 <HAL_TIM_MspPostInit+0x104>)
 8102bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102bfc:	4a10      	ldr	r2, [pc, #64]	; (8102c40 <HAL_TIM_MspPostInit+0x104>)
 8102bfe:	f043 0320 	orr.w	r3, r3, #32
 8102c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102c06:	4b0e      	ldr	r3, [pc, #56]	; (8102c40 <HAL_TIM_MspPostInit+0x104>)
 8102c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102c0c:	f003 0320 	and.w	r3, r3, #32
 8102c10:	60bb      	str	r3, [r7, #8]
 8102c12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_Servo_Slider_Pin;
 8102c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8102c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102c1a:	2302      	movs	r3, #2
 8102c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102c1e:	2300      	movs	r3, #0
 8102c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102c22:	2300      	movs	r3, #0
 8102c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8102c26:	2309      	movs	r3, #9
 8102c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Servo_Slider_GPIO_Port, &GPIO_InitStruct);
 8102c2a:	f107 0314 	add.w	r3, r7, #20
 8102c2e:	4619      	mov	r1, r3
 8102c30:	4806      	ldr	r0, [pc, #24]	; (8102c4c <HAL_TIM_MspPostInit+0x110>)
 8102c32:	f001 fc4d 	bl	81044d0 <HAL_GPIO_Init>
}
 8102c36:	bf00      	nop
 8102c38:	3728      	adds	r7, #40	; 0x28
 8102c3a:	46bd      	mov	sp, r7
 8102c3c:	bd80      	pop	{r7, pc}
 8102c3e:	bf00      	nop
 8102c40:	58024400 	.word	0x58024400
 8102c44:	58020400 	.word	0x58020400
 8102c48:	40001c00 	.word	0x40001c00
 8102c4c:	58021400 	.word	0x58021400
 8102c50:	40002000 	.word	0x40002000

08102c54 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
// Interrupt to check if a coin has been inserted
// Frequency is 50Hz ?
{
 8102c54:	b480      	push	{r7}
 8102c56:	b085      	sub	sp, #20
 8102c58:	af00      	add	r7, sp, #0
 8102c5a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7)
 8102c5c:	687b      	ldr	r3, [r7, #4]
 8102c5e:	681b      	ldr	r3, [r3, #0]
 8102c60:	4a05      	ldr	r2, [pc, #20]	; (8102c78 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8102c62:	4293      	cmp	r3, r2
 8102c64:	d102      	bne.n	8102c6c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		int amIhere = 0;
 8102c66:	2300      	movs	r3, #0
 8102c68:	60fb      	str	r3, [r7, #12]
		return;
 8102c6a:	bf00      	nop
	}
}
 8102c6c:	3714      	adds	r7, #20
 8102c6e:	46bd      	mov	sp, r7
 8102c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c74:	4770      	bx	lr
 8102c76:	bf00      	nop
 8102c78:	40001400 	.word	0x40001400

08102c7c <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8102c7c:	b580      	push	{r7, lr}
 8102c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102c80:	4b22      	ldr	r3, [pc, #136]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102c82:	4a23      	ldr	r2, [pc, #140]	; (8102d10 <MX_USART3_UART_Init+0x94>)
 8102c84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102c86:	4b21      	ldr	r3, [pc, #132]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102c8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102c8e:	4b1f      	ldr	r3, [pc, #124]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102c90:	2200      	movs	r2, #0
 8102c92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102c94:	4b1d      	ldr	r3, [pc, #116]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102c96:	2200      	movs	r2, #0
 8102c98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102c9a:	4b1c      	ldr	r3, [pc, #112]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102c9c:	2200      	movs	r2, #0
 8102c9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102ca0:	4b1a      	ldr	r3, [pc, #104]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102ca2:	220c      	movs	r2, #12
 8102ca4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102ca6:	4b19      	ldr	r3, [pc, #100]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102ca8:	2200      	movs	r2, #0
 8102caa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102cac:	4b17      	ldr	r3, [pc, #92]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102cae:	2200      	movs	r2, #0
 8102cb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8102cb2:	4b16      	ldr	r3, [pc, #88]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102cb4:	2200      	movs	r2, #0
 8102cb6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102cb8:	4b14      	ldr	r3, [pc, #80]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102cba:	2200      	movs	r2, #0
 8102cbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102cbe:	4b13      	ldr	r3, [pc, #76]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102cc0:	2200      	movs	r2, #0
 8102cc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102cc4:	4811      	ldr	r0, [pc, #68]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102cc6:	f006 fa2b 	bl	8109120 <HAL_UART_Init>
 8102cca:	4603      	mov	r3, r0
 8102ccc:	2b00      	cmp	r3, #0
 8102cce:	d001      	beq.n	8102cd4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8102cd0:	f7fe ffd6 	bl	8101c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102cd4:	2100      	movs	r1, #0
 8102cd6:	480d      	ldr	r0, [pc, #52]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102cd8:	f007 fa5e 	bl	810a198 <HAL_UARTEx_SetTxFifoThreshold>
 8102cdc:	4603      	mov	r3, r0
 8102cde:	2b00      	cmp	r3, #0
 8102ce0:	d001      	beq.n	8102ce6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8102ce2:	f7fe ffcd 	bl	8101c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102ce6:	2100      	movs	r1, #0
 8102ce8:	4808      	ldr	r0, [pc, #32]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102cea:	f007 fa93 	bl	810a214 <HAL_UARTEx_SetRxFifoThreshold>
 8102cee:	4603      	mov	r3, r0
 8102cf0:	2b00      	cmp	r3, #0
 8102cf2:	d001      	beq.n	8102cf8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102cf4:	f7fe ffc4 	bl	8101c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102cf8:	4804      	ldr	r0, [pc, #16]	; (8102d0c <MX_USART3_UART_Init+0x90>)
 8102cfa:	f007 fa14 	bl	810a126 <HAL_UARTEx_DisableFifoMode>
 8102cfe:	4603      	mov	r3, r0
 8102d00:	2b00      	cmp	r3, #0
 8102d02:	d001      	beq.n	8102d08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102d04:	f7fe ffbc 	bl	8101c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102d08:	bf00      	nop
 8102d0a:	bd80      	pop	{r7, pc}
 8102d0c:	10000378 	.word	0x10000378
 8102d10:	40004800 	.word	0x40004800

08102d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102d14:	b580      	push	{r7, lr}
 8102d16:	b0bc      	sub	sp, #240	; 0xf0
 8102d18:	af00      	add	r7, sp, #0
 8102d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102d1c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102d20:	2200      	movs	r2, #0
 8102d22:	601a      	str	r2, [r3, #0]
 8102d24:	605a      	str	r2, [r3, #4]
 8102d26:	609a      	str	r2, [r3, #8]
 8102d28:	60da      	str	r2, [r3, #12]
 8102d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102d2c:	f107 0320 	add.w	r3, r7, #32
 8102d30:	22bc      	movs	r2, #188	; 0xbc
 8102d32:	2100      	movs	r1, #0
 8102d34:	4618      	mov	r0, r3
 8102d36:	f007 fb1d 	bl	810a374 <memset>
  if(uartHandle->Instance==UART5)
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	681b      	ldr	r3, [r3, #0]
 8102d3e:	4a5c      	ldr	r2, [pc, #368]	; (8102eb0 <HAL_UART_MspInit+0x19c>)
 8102d40:	4293      	cmp	r3, r2
 8102d42:	d168      	bne.n	8102e16 <HAL_UART_MspInit+0x102>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8102d44:	2302      	movs	r3, #2
 8102d46:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102d48:	2300      	movs	r3, #0
 8102d4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102d4e:	f107 0320 	add.w	r3, r7, #32
 8102d52:	4618      	mov	r0, r3
 8102d54:	f002 fe30 	bl	81059b8 <HAL_RCCEx_PeriphCLKConfig>
 8102d58:	4603      	mov	r3, r0
 8102d5a:	2b00      	cmp	r3, #0
 8102d5c:	d001      	beq.n	8102d62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8102d5e:	f7fe ff8f 	bl	8101c80 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8102d62:	4b54      	ldr	r3, [pc, #336]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102d68:	4a52      	ldr	r2, [pc, #328]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102d6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102d72:	4b50      	ldr	r3, [pc, #320]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102d7c:	61fb      	str	r3, [r7, #28]
 8102d7e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102d80:	4b4c      	ldr	r3, [pc, #304]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d86:	4a4b      	ldr	r2, [pc, #300]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102d88:	f043 0302 	orr.w	r3, r3, #2
 8102d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102d90:	4b48      	ldr	r3, [pc, #288]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d96:	f003 0302 	and.w	r3, r3, #2
 8102d9a:	61bb      	str	r3, [r7, #24]
 8102d9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8102d9e:	4b45      	ldr	r3, [pc, #276]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102da4:	4a43      	ldr	r2, [pc, #268]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102da6:	f043 0304 	orr.w	r3, r3, #4
 8102daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102dae:	4b41      	ldr	r3, [pc, #260]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102db4:	f003 0304 	and.w	r3, r3, #4
 8102db8:	617b      	str	r3, [r7, #20]
 8102dba:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8102dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102dc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102dc4:	2302      	movs	r3, #2
 8102dc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102dca:	2300      	movs	r3, #0
 8102dcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102dd0:	2300      	movs	r3, #0
 8102dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8102dd6:	230e      	movs	r3, #14
 8102dd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102ddc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102de0:	4619      	mov	r1, r3
 8102de2:	4835      	ldr	r0, [pc, #212]	; (8102eb8 <HAL_UART_MspInit+0x1a4>)
 8102de4:	f001 fb74 	bl	81044d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8102de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102dec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102df0:	2302      	movs	r3, #2
 8102df2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102df6:	2300      	movs	r3, #0
 8102df8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102dfc:	2300      	movs	r3, #0
 8102dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8102e02:	2308      	movs	r3, #8
 8102e04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102e08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102e0c:	4619      	mov	r1, r3
 8102e0e:	482b      	ldr	r0, [pc, #172]	; (8102ebc <HAL_UART_MspInit+0x1a8>)
 8102e10:	f001 fb5e 	bl	81044d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102e14:	e047      	b.n	8102ea6 <HAL_UART_MspInit+0x192>
  else if(uartHandle->Instance==USART3)
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	681b      	ldr	r3, [r3, #0]
 8102e1a:	4a29      	ldr	r2, [pc, #164]	; (8102ec0 <HAL_UART_MspInit+0x1ac>)
 8102e1c:	4293      	cmp	r3, r2
 8102e1e:	d142      	bne.n	8102ea6 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102e20:	2302      	movs	r3, #2
 8102e22:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102e24:	2300      	movs	r3, #0
 8102e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102e2a:	f107 0320 	add.w	r3, r7, #32
 8102e2e:	4618      	mov	r0, r3
 8102e30:	f002 fdc2 	bl	81059b8 <HAL_RCCEx_PeriphCLKConfig>
 8102e34:	4603      	mov	r3, r0
 8102e36:	2b00      	cmp	r3, #0
 8102e38:	d001      	beq.n	8102e3e <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8102e3a:	f7fe ff21 	bl	8101c80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8102e3e:	4b1d      	ldr	r3, [pc, #116]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102e44:	4a1b      	ldr	r2, [pc, #108]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102e46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102e4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102e4e:	4b19      	ldr	r3, [pc, #100]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102e58:	613b      	str	r3, [r7, #16]
 8102e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102e5c:	4b15      	ldr	r3, [pc, #84]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102e62:	4a14      	ldr	r2, [pc, #80]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102e64:	f043 0308 	orr.w	r3, r3, #8
 8102e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102e6c:	4b11      	ldr	r3, [pc, #68]	; (8102eb4 <HAL_UART_MspInit+0x1a0>)
 8102e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102e72:	f003 0308 	and.w	r3, r3, #8
 8102e76:	60fb      	str	r3, [r7, #12]
 8102e78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102e7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102e82:	2302      	movs	r3, #2
 8102e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102e88:	2300      	movs	r3, #0
 8102e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102e8e:	2300      	movs	r3, #0
 8102e90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102e94:	2307      	movs	r3, #7
 8102e96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102e9a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102e9e:	4619      	mov	r1, r3
 8102ea0:	4808      	ldr	r0, [pc, #32]	; (8102ec4 <HAL_UART_MspInit+0x1b0>)
 8102ea2:	f001 fb15 	bl	81044d0 <HAL_GPIO_Init>
}
 8102ea6:	bf00      	nop
 8102ea8:	37f0      	adds	r7, #240	; 0xf0
 8102eaa:	46bd      	mov	sp, r7
 8102eac:	bd80      	pop	{r7, pc}
 8102eae:	bf00      	nop
 8102eb0:	40005000 	.word	0x40005000
 8102eb4:	58024400 	.word	0x58024400
 8102eb8:	58020400 	.word	0x58020400
 8102ebc:	58020800 	.word	0x58020800
 8102ec0:	40004800 	.word	0x40004800
 8102ec4:	58020c00 	.word	0x58020c00

08102ec8 <ST_LINK_WRITE>:
  }
}

/* USER CODE BEGIN 1 */
void ST_LINK_WRITE(uint8_t * msg, uint8_t length)
{
 8102ec8:	b580      	push	{r7, lr}
 8102eca:	b082      	sub	sp, #8
 8102ecc:	af00      	add	r7, sp, #0
 8102ece:	6078      	str	r0, [r7, #4]
 8102ed0:	460b      	mov	r3, r1
 8102ed2:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3,msg,length,100);
 8102ed4:	78fb      	ldrb	r3, [r7, #3]
 8102ed6:	b29a      	uxth	r2, r3
 8102ed8:	2364      	movs	r3, #100	; 0x64
 8102eda:	6879      	ldr	r1, [r7, #4]
 8102edc:	4803      	ldr	r0, [pc, #12]	; (8102eec <ST_LINK_WRITE+0x24>)
 8102ede:	f006 f96f 	bl	81091c0 <HAL_UART_Transmit>
}
 8102ee2:	bf00      	nop
 8102ee4:	3708      	adds	r7, #8
 8102ee6:	46bd      	mov	sp, r7
 8102ee8:	bd80      	pop	{r7, pc}
 8102eea:	bf00      	nop
 8102eec:	10000378 	.word	0x10000378

08102ef0 <send_msg>:

void send_msg(uint8_t *msg_array)
/* Sends a message to the user */
{
 8102ef0:	b580      	push	{r7, lr}
 8102ef2:	b090      	sub	sp, #64	; 0x40
 8102ef4:	af00      	add	r7, sp, #0
 8102ef6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[50]; // TODO: I think all buffers could be a global one at
						// a later stage or local for the library
	sprintf(buffer,(uint8_t*) msg_array);
 8102ef8:	f107 030c 	add.w	r3, r7, #12
 8102efc:	6879      	ldr	r1, [r7, #4]
 8102efe:	4618      	mov	r0, r3
 8102f00:	f007 fa40 	bl	810a384 <siprintf>
	ST_LINK_WRITE(buffer, sizeof(buffer));
 8102f04:	f107 030c 	add.w	r3, r7, #12
 8102f08:	2132      	movs	r1, #50	; 0x32
 8102f0a:	4618      	mov	r0, r3
 8102f0c:	f7ff ffdc 	bl	8102ec8 <ST_LINK_WRITE>
	HAL_Delay(10);
 8102f10:	200a      	movs	r0, #10
 8102f12:	f000 f8f9 	bl	8103108 <HAL_Delay>
}
 8102f16:	bf00      	nop
 8102f18:	3740      	adds	r7, #64	; 0x40
 8102f1a:	46bd      	mov	sp, r7
 8102f1c:	bd80      	pop	{r7, pc}

08102f1e <send_msg_data>:

void send_msg_data(uint8_t *msg_array, int data)
/* Sends a message with data to the user */
{
 8102f1e:	b580      	push	{r7, lr}
 8102f20:	b08c      	sub	sp, #48	; 0x30
 8102f22:	af00      	add	r7, sp, #0
 8102f24:	6078      	str	r0, [r7, #4]
 8102f26:	6039      	str	r1, [r7, #0]

	uint8_t buffer[40];
	sprintf(buffer, (uint8_t*)msg_array, data);
 8102f28:	f107 0308 	add.w	r3, r7, #8
 8102f2c:	683a      	ldr	r2, [r7, #0]
 8102f2e:	6879      	ldr	r1, [r7, #4]
 8102f30:	4618      	mov	r0, r3
 8102f32:	f007 fa27 	bl	810a384 <siprintf>
	ST_LINK_WRITE(buffer, sizeof(buffer));
 8102f36:	f107 0308 	add.w	r3, r7, #8
 8102f3a:	2128      	movs	r1, #40	; 0x28
 8102f3c:	4618      	mov	r0, r3
 8102f3e:	f7ff ffc3 	bl	8102ec8 <ST_LINK_WRITE>
}
 8102f42:	bf00      	nop
 8102f44:	3730      	adds	r7, #48	; 0x30
 8102f46:	46bd      	mov	sp, r7
 8102f48:	bd80      	pop	{r7, pc}
	...

08102f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102f84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102f50:	f7fd fe04 	bl	8100b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102f54:	480c      	ldr	r0, [pc, #48]	; (8102f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102f56:	490d      	ldr	r1, [pc, #52]	; (8102f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102f58:	4a0d      	ldr	r2, [pc, #52]	; (8102f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102f5c:	e002      	b.n	8102f64 <LoopCopyDataInit>

08102f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102f62:	3304      	adds	r3, #4

08102f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102f68:	d3f9      	bcc.n	8102f5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102f6a:	4a0a      	ldr	r2, [pc, #40]	; (8102f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102f6c:	4c0a      	ldr	r4, [pc, #40]	; (8102f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102f70:	e001      	b.n	8102f76 <LoopFillZerobss>

08102f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102f74:	3204      	adds	r2, #4

08102f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102f78:	d3fb      	bcc.n	8102f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102f7a:	f007 f9d7 	bl	810a32c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102f7e:	f7fe fd3d 	bl	81019fc <main>
  bx  lr
 8102f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102f84:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102f88:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102f8c:	1000007c 	.word	0x1000007c
  ldr r2, =_sidata
 8102f90:	0810b078 	.word	0x0810b078
  ldr r2, =_sbss
 8102f94:	10000080 	.word	0x10000080
  ldr r4, =_ebss
 8102f98:	10000420 	.word	0x10000420

08102f9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102f9c:	e7fe      	b.n	8102f9c <ADC3_IRQHandler>
	...

08102fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102fa0:	b580      	push	{r7, lr}
 8102fa2:	b082      	sub	sp, #8
 8102fa4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102fa6:	4b28      	ldr	r3, [pc, #160]	; (8103048 <HAL_Init+0xa8>)
 8102fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102fac:	4a26      	ldr	r2, [pc, #152]	; (8103048 <HAL_Init+0xa8>)
 8102fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102fb2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102fb6:	4b24      	ldr	r3, [pc, #144]	; (8103048 <HAL_Init+0xa8>)
 8102fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102fc0:	603b      	str	r3, [r7, #0]
 8102fc2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102fc4:	4b21      	ldr	r3, [pc, #132]	; (810304c <HAL_Init+0xac>)
 8102fc6:	681b      	ldr	r3, [r3, #0]
 8102fc8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102fcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102fd0:	4a1e      	ldr	r2, [pc, #120]	; (810304c <HAL_Init+0xac>)
 8102fd2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102fd6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102fd8:	4b1c      	ldr	r3, [pc, #112]	; (810304c <HAL_Init+0xac>)
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	4a1b      	ldr	r2, [pc, #108]	; (810304c <HAL_Init+0xac>)
 8102fde:	f043 0301 	orr.w	r3, r3, #1
 8102fe2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102fe4:	2003      	movs	r0, #3
 8102fe6:	f001 fa1f 	bl	8104428 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102fea:	f002 fb0d 	bl	8105608 <HAL_RCC_GetSysClockFreq>
 8102fee:	4602      	mov	r2, r0
 8102ff0:	4b15      	ldr	r3, [pc, #84]	; (8103048 <HAL_Init+0xa8>)
 8102ff2:	699b      	ldr	r3, [r3, #24]
 8102ff4:	0a1b      	lsrs	r3, r3, #8
 8102ff6:	f003 030f 	and.w	r3, r3, #15
 8102ffa:	4915      	ldr	r1, [pc, #84]	; (8103050 <HAL_Init+0xb0>)
 8102ffc:	5ccb      	ldrb	r3, [r1, r3]
 8102ffe:	f003 031f 	and.w	r3, r3, #31
 8103002:	fa22 f303 	lsr.w	r3, r2, r3
 8103006:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103008:	4b0f      	ldr	r3, [pc, #60]	; (8103048 <HAL_Init+0xa8>)
 810300a:	699b      	ldr	r3, [r3, #24]
 810300c:	f003 030f 	and.w	r3, r3, #15
 8103010:	4a0f      	ldr	r2, [pc, #60]	; (8103050 <HAL_Init+0xb0>)
 8103012:	5cd3      	ldrb	r3, [r2, r3]
 8103014:	f003 031f 	and.w	r3, r3, #31
 8103018:	687a      	ldr	r2, [r7, #4]
 810301a:	fa22 f303 	lsr.w	r3, r2, r3
 810301e:	4a0d      	ldr	r2, [pc, #52]	; (8103054 <HAL_Init+0xb4>)
 8103020:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103022:	4b0c      	ldr	r3, [pc, #48]	; (8103054 <HAL_Init+0xb4>)
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	4a0c      	ldr	r2, [pc, #48]	; (8103058 <HAL_Init+0xb8>)
 8103028:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810302a:	2000      	movs	r0, #0
 810302c:	f000 f816 	bl	810305c <HAL_InitTick>
 8103030:	4603      	mov	r3, r0
 8103032:	2b00      	cmp	r3, #0
 8103034:	d001      	beq.n	810303a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103036:	2301      	movs	r3, #1
 8103038:	e002      	b.n	8103040 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810303a:	f7fe fe2f 	bl	8101c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810303e:	2300      	movs	r3, #0
}
 8103040:	4618      	mov	r0, r3
 8103042:	3708      	adds	r7, #8
 8103044:	46bd      	mov	sp, r7
 8103046:	bd80      	pop	{r7, pc}
 8103048:	58024400 	.word	0x58024400
 810304c:	40024400 	.word	0x40024400
 8103050:	0810affc 	.word	0x0810affc
 8103054:	10000004 	.word	0x10000004
 8103058:	10000000 	.word	0x10000000

0810305c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810305c:	b580      	push	{r7, lr}
 810305e:	b082      	sub	sp, #8
 8103060:	af00      	add	r7, sp, #0
 8103062:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103064:	4b15      	ldr	r3, [pc, #84]	; (81030bc <HAL_InitTick+0x60>)
 8103066:	781b      	ldrb	r3, [r3, #0]
 8103068:	2b00      	cmp	r3, #0
 810306a:	d101      	bne.n	8103070 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810306c:	2301      	movs	r3, #1
 810306e:	e021      	b.n	81030b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103070:	4b13      	ldr	r3, [pc, #76]	; (81030c0 <HAL_InitTick+0x64>)
 8103072:	681a      	ldr	r2, [r3, #0]
 8103074:	4b11      	ldr	r3, [pc, #68]	; (81030bc <HAL_InitTick+0x60>)
 8103076:	781b      	ldrb	r3, [r3, #0]
 8103078:	4619      	mov	r1, r3
 810307a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810307e:	fbb3 f3f1 	udiv	r3, r3, r1
 8103082:	fbb2 f3f3 	udiv	r3, r2, r3
 8103086:	4618      	mov	r0, r3
 8103088:	f001 fa01 	bl	810448e <HAL_SYSTICK_Config>
 810308c:	4603      	mov	r3, r0
 810308e:	2b00      	cmp	r3, #0
 8103090:	d001      	beq.n	8103096 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103092:	2301      	movs	r3, #1
 8103094:	e00e      	b.n	81030b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	2b0f      	cmp	r3, #15
 810309a:	d80a      	bhi.n	81030b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810309c:	2200      	movs	r2, #0
 810309e:	6879      	ldr	r1, [r7, #4]
 81030a0:	f04f 30ff 	mov.w	r0, #4294967295
 81030a4:	f001 f9cb 	bl	810443e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81030a8:	4a06      	ldr	r2, [pc, #24]	; (81030c4 <HAL_InitTick+0x68>)
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81030ae:	2300      	movs	r3, #0
 81030b0:	e000      	b.n	81030b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81030b2:	2301      	movs	r3, #1
}
 81030b4:	4618      	mov	r0, r3
 81030b6:	3708      	adds	r7, #8
 81030b8:	46bd      	mov	sp, r7
 81030ba:	bd80      	pop	{r7, pc}
 81030bc:	10000014 	.word	0x10000014
 81030c0:	10000000 	.word	0x10000000
 81030c4:	10000010 	.word	0x10000010

081030c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81030c8:	b480      	push	{r7}
 81030ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81030cc:	4b06      	ldr	r3, [pc, #24]	; (81030e8 <HAL_IncTick+0x20>)
 81030ce:	781b      	ldrb	r3, [r3, #0]
 81030d0:	461a      	mov	r2, r3
 81030d2:	4b06      	ldr	r3, [pc, #24]	; (81030ec <HAL_IncTick+0x24>)
 81030d4:	681b      	ldr	r3, [r3, #0]
 81030d6:	4413      	add	r3, r2
 81030d8:	4a04      	ldr	r2, [pc, #16]	; (81030ec <HAL_IncTick+0x24>)
 81030da:	6013      	str	r3, [r2, #0]
}
 81030dc:	bf00      	nop
 81030de:	46bd      	mov	sp, r7
 81030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030e4:	4770      	bx	lr
 81030e6:	bf00      	nop
 81030e8:	10000014 	.word	0x10000014
 81030ec:	10000408 	.word	0x10000408

081030f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81030f0:	b480      	push	{r7}
 81030f2:	af00      	add	r7, sp, #0
  return uwTick;
 81030f4:	4b03      	ldr	r3, [pc, #12]	; (8103104 <HAL_GetTick+0x14>)
 81030f6:	681b      	ldr	r3, [r3, #0]
}
 81030f8:	4618      	mov	r0, r3
 81030fa:	46bd      	mov	sp, r7
 81030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103100:	4770      	bx	lr
 8103102:	bf00      	nop
 8103104:	10000408 	.word	0x10000408

08103108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103108:	b580      	push	{r7, lr}
 810310a:	b084      	sub	sp, #16
 810310c:	af00      	add	r7, sp, #0
 810310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103110:	f7ff ffee 	bl	81030f0 <HAL_GetTick>
 8103114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103116:	687b      	ldr	r3, [r7, #4]
 8103118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810311a:	68fb      	ldr	r3, [r7, #12]
 810311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103120:	d005      	beq.n	810312e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8103122:	4b0a      	ldr	r3, [pc, #40]	; (810314c <HAL_Delay+0x44>)
 8103124:	781b      	ldrb	r3, [r3, #0]
 8103126:	461a      	mov	r2, r3
 8103128:	68fb      	ldr	r3, [r7, #12]
 810312a:	4413      	add	r3, r2
 810312c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810312e:	bf00      	nop
 8103130:	f7ff ffde 	bl	81030f0 <HAL_GetTick>
 8103134:	4602      	mov	r2, r0
 8103136:	68bb      	ldr	r3, [r7, #8]
 8103138:	1ad3      	subs	r3, r2, r3
 810313a:	68fa      	ldr	r2, [r7, #12]
 810313c:	429a      	cmp	r2, r3
 810313e:	d8f7      	bhi.n	8103130 <HAL_Delay+0x28>
  {
  }
}
 8103140:	bf00      	nop
 8103142:	bf00      	nop
 8103144:	3710      	adds	r7, #16
 8103146:	46bd      	mov	sp, r7
 8103148:	bd80      	pop	{r7, pc}
 810314a:	bf00      	nop
 810314c:	10000014 	.word	0x10000014

08103150 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8103150:	b480      	push	{r7}
 8103152:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8103154:	4b03      	ldr	r3, [pc, #12]	; (8103164 <HAL_GetREVID+0x14>)
 8103156:	681b      	ldr	r3, [r3, #0]
 8103158:	0c1b      	lsrs	r3, r3, #16
}
 810315a:	4618      	mov	r0, r3
 810315c:	46bd      	mov	sp, r7
 810315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103162:	4770      	bx	lr
 8103164:	5c001000 	.word	0x5c001000

08103168 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8103168:	b480      	push	{r7}
 810316a:	b083      	sub	sp, #12
 810316c:	af00      	add	r7, sp, #0
 810316e:	6078      	str	r0, [r7, #4]
 8103170:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	689b      	ldr	r3, [r3, #8]
 8103176:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 810317a:	683b      	ldr	r3, [r7, #0]
 810317c:	431a      	orrs	r2, r3
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	609a      	str	r2, [r3, #8]
}
 8103182:	bf00      	nop
 8103184:	370c      	adds	r7, #12
 8103186:	46bd      	mov	sp, r7
 8103188:	f85d 7b04 	ldr.w	r7, [sp], #4
 810318c:	4770      	bx	lr

0810318e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 810318e:	b480      	push	{r7}
 8103190:	b083      	sub	sp, #12
 8103192:	af00      	add	r7, sp, #0
 8103194:	6078      	str	r0, [r7, #4]
 8103196:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	689b      	ldr	r3, [r3, #8]
 810319c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 81031a0:	683b      	ldr	r3, [r7, #0]
 81031a2:	431a      	orrs	r2, r3
 81031a4:	687b      	ldr	r3, [r7, #4]
 81031a6:	609a      	str	r2, [r3, #8]
}
 81031a8:	bf00      	nop
 81031aa:	370c      	adds	r7, #12
 81031ac:	46bd      	mov	sp, r7
 81031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031b2:	4770      	bx	lr

081031b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81031b4:	b480      	push	{r7}
 81031b6:	b083      	sub	sp, #12
 81031b8:	af00      	add	r7, sp, #0
 81031ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81031bc:	687b      	ldr	r3, [r7, #4]
 81031be:	689b      	ldr	r3, [r3, #8]
 81031c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 81031c4:	4618      	mov	r0, r3
 81031c6:	370c      	adds	r7, #12
 81031c8:	46bd      	mov	sp, r7
 81031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031ce:	4770      	bx	lr

081031d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 81031d0:	b480      	push	{r7}
 81031d2:	b087      	sub	sp, #28
 81031d4:	af00      	add	r7, sp, #0
 81031d6:	60f8      	str	r0, [r7, #12]
 81031d8:	60b9      	str	r1, [r7, #8]
 81031da:	607a      	str	r2, [r7, #4]
 81031dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81031de:	68fb      	ldr	r3, [r7, #12]
 81031e0:	3360      	adds	r3, #96	; 0x60
 81031e2:	461a      	mov	r2, r3
 81031e4:	68bb      	ldr	r3, [r7, #8]
 81031e6:	009b      	lsls	r3, r3, #2
 81031e8:	4413      	add	r3, r2
 81031ea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 81031ec:	697b      	ldr	r3, [r7, #20]
 81031ee:	681b      	ldr	r3, [r3, #0]
 81031f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 81031f4:	687b      	ldr	r3, [r7, #4]
 81031f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 81031fa:	683b      	ldr	r3, [r7, #0]
 81031fc:	430b      	orrs	r3, r1
 81031fe:	431a      	orrs	r2, r3
 8103200:	697b      	ldr	r3, [r7, #20]
 8103202:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8103204:	bf00      	nop
 8103206:	371c      	adds	r7, #28
 8103208:	46bd      	mov	sp, r7
 810320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810320e:	4770      	bx	lr

08103210 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8103210:	b480      	push	{r7}
 8103212:	b085      	sub	sp, #20
 8103214:	af00      	add	r7, sp, #0
 8103216:	60f8      	str	r0, [r7, #12]
 8103218:	60b9      	str	r1, [r7, #8]
 810321a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 810321c:	68fb      	ldr	r3, [r7, #12]
 810321e:	691b      	ldr	r3, [r3, #16]
 8103220:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8103224:	68bb      	ldr	r3, [r7, #8]
 8103226:	f003 031f 	and.w	r3, r3, #31
 810322a:	6879      	ldr	r1, [r7, #4]
 810322c:	fa01 f303 	lsl.w	r3, r1, r3
 8103230:	431a      	orrs	r2, r3
 8103232:	68fb      	ldr	r3, [r7, #12]
 8103234:	611a      	str	r2, [r3, #16]
}
 8103236:	bf00      	nop
 8103238:	3714      	adds	r7, #20
 810323a:	46bd      	mov	sp, r7
 810323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103240:	4770      	bx	lr

08103242 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8103242:	b480      	push	{r7}
 8103244:	b087      	sub	sp, #28
 8103246:	af00      	add	r7, sp, #0
 8103248:	60f8      	str	r0, [r7, #12]
 810324a:	60b9      	str	r1, [r7, #8]
 810324c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810324e:	68fb      	ldr	r3, [r7, #12]
 8103250:	3360      	adds	r3, #96	; 0x60
 8103252:	461a      	mov	r2, r3
 8103254:	68bb      	ldr	r3, [r7, #8]
 8103256:	009b      	lsls	r3, r3, #2
 8103258:	4413      	add	r3, r2
 810325a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 810325c:	697b      	ldr	r3, [r7, #20]
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103264:	687b      	ldr	r3, [r7, #4]
 8103266:	431a      	orrs	r2, r3
 8103268:	697b      	ldr	r3, [r7, #20]
 810326a:	601a      	str	r2, [r3, #0]
  }
}
 810326c:	bf00      	nop
 810326e:	371c      	adds	r7, #28
 8103270:	46bd      	mov	sp, r7
 8103272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103276:	4770      	bx	lr

08103278 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8103278:	b480      	push	{r7}
 810327a:	b087      	sub	sp, #28
 810327c:	af00      	add	r7, sp, #0
 810327e:	60f8      	str	r0, [r7, #12]
 8103280:	60b9      	str	r1, [r7, #8]
 8103282:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8103284:	68fb      	ldr	r3, [r7, #12]
 8103286:	3330      	adds	r3, #48	; 0x30
 8103288:	461a      	mov	r2, r3
 810328a:	68bb      	ldr	r3, [r7, #8]
 810328c:	0a1b      	lsrs	r3, r3, #8
 810328e:	009b      	lsls	r3, r3, #2
 8103290:	f003 030c 	and.w	r3, r3, #12
 8103294:	4413      	add	r3, r2
 8103296:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103298:	697b      	ldr	r3, [r7, #20]
 810329a:	681a      	ldr	r2, [r3, #0]
 810329c:	68bb      	ldr	r3, [r7, #8]
 810329e:	f003 031f 	and.w	r3, r3, #31
 81032a2:	211f      	movs	r1, #31
 81032a4:	fa01 f303 	lsl.w	r3, r1, r3
 81032a8:	43db      	mvns	r3, r3
 81032aa:	401a      	ands	r2, r3
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	0e9b      	lsrs	r3, r3, #26
 81032b0:	f003 011f 	and.w	r1, r3, #31
 81032b4:	68bb      	ldr	r3, [r7, #8]
 81032b6:	f003 031f 	and.w	r3, r3, #31
 81032ba:	fa01 f303 	lsl.w	r3, r1, r3
 81032be:	431a      	orrs	r2, r3
 81032c0:	697b      	ldr	r3, [r7, #20]
 81032c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 81032c4:	bf00      	nop
 81032c6:	371c      	adds	r7, #28
 81032c8:	46bd      	mov	sp, r7
 81032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032ce:	4770      	bx	lr

081032d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 81032d0:	b480      	push	{r7}
 81032d2:	b087      	sub	sp, #28
 81032d4:	af00      	add	r7, sp, #0
 81032d6:	60f8      	str	r0, [r7, #12]
 81032d8:	60b9      	str	r1, [r7, #8]
 81032da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 81032dc:	68fb      	ldr	r3, [r7, #12]
 81032de:	3314      	adds	r3, #20
 81032e0:	461a      	mov	r2, r3
 81032e2:	68bb      	ldr	r3, [r7, #8]
 81032e4:	0e5b      	lsrs	r3, r3, #25
 81032e6:	009b      	lsls	r3, r3, #2
 81032e8:	f003 0304 	and.w	r3, r3, #4
 81032ec:	4413      	add	r3, r2
 81032ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81032f0:	697b      	ldr	r3, [r7, #20]
 81032f2:	681a      	ldr	r2, [r3, #0]
 81032f4:	68bb      	ldr	r3, [r7, #8]
 81032f6:	0d1b      	lsrs	r3, r3, #20
 81032f8:	f003 031f 	and.w	r3, r3, #31
 81032fc:	2107      	movs	r1, #7
 81032fe:	fa01 f303 	lsl.w	r3, r1, r3
 8103302:	43db      	mvns	r3, r3
 8103304:	401a      	ands	r2, r3
 8103306:	68bb      	ldr	r3, [r7, #8]
 8103308:	0d1b      	lsrs	r3, r3, #20
 810330a:	f003 031f 	and.w	r3, r3, #31
 810330e:	6879      	ldr	r1, [r7, #4]
 8103310:	fa01 f303 	lsl.w	r3, r1, r3
 8103314:	431a      	orrs	r2, r3
 8103316:	697b      	ldr	r3, [r7, #20]
 8103318:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810331a:	bf00      	nop
 810331c:	371c      	adds	r7, #28
 810331e:	46bd      	mov	sp, r7
 8103320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103324:	4770      	bx	lr
	...

08103328 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8103328:	b480      	push	{r7}
 810332a:	b085      	sub	sp, #20
 810332c:	af00      	add	r7, sp, #0
 810332e:	60f8      	str	r0, [r7, #12]
 8103330:	60b9      	str	r1, [r7, #8]
 8103332:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8103334:	68fb      	ldr	r3, [r7, #12]
 8103336:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 810333a:	68bb      	ldr	r3, [r7, #8]
 810333c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103340:	43db      	mvns	r3, r3
 8103342:	401a      	ands	r2, r3
 8103344:	687b      	ldr	r3, [r7, #4]
 8103346:	f003 0318 	and.w	r3, r3, #24
 810334a:	4908      	ldr	r1, [pc, #32]	; (810336c <LL_ADC_SetChannelSingleDiff+0x44>)
 810334c:	40d9      	lsrs	r1, r3
 810334e:	68bb      	ldr	r3, [r7, #8]
 8103350:	400b      	ands	r3, r1
 8103352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103356:	431a      	orrs	r2, r3
 8103358:	68fb      	ldr	r3, [r7, #12]
 810335a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 810335e:	bf00      	nop
 8103360:	3714      	adds	r7, #20
 8103362:	46bd      	mov	sp, r7
 8103364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103368:	4770      	bx	lr
 810336a:	bf00      	nop
 810336c:	000fffff 	.word	0x000fffff

08103370 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8103370:	b480      	push	{r7}
 8103372:	b083      	sub	sp, #12
 8103374:	af00      	add	r7, sp, #0
 8103376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8103378:	687b      	ldr	r3, [r7, #4]
 810337a:	689b      	ldr	r3, [r3, #8]
 810337c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8103380:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8103384:	687a      	ldr	r2, [r7, #4]
 8103386:	6093      	str	r3, [r2, #8]
}
 8103388:	bf00      	nop
 810338a:	370c      	adds	r7, #12
 810338c:	46bd      	mov	sp, r7
 810338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103392:	4770      	bx	lr

08103394 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8103394:	b480      	push	{r7}
 8103396:	b083      	sub	sp, #12
 8103398:	af00      	add	r7, sp, #0
 810339a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 810339c:	687b      	ldr	r3, [r7, #4]
 810339e:	689b      	ldr	r3, [r3, #8]
 81033a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81033a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81033a8:	d101      	bne.n	81033ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 81033aa:	2301      	movs	r3, #1
 81033ac:	e000      	b.n	81033b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 81033ae:	2300      	movs	r3, #0
}
 81033b0:	4618      	mov	r0, r3
 81033b2:	370c      	adds	r7, #12
 81033b4:	46bd      	mov	sp, r7
 81033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033ba:	4770      	bx	lr

081033bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 81033bc:	b480      	push	{r7}
 81033be:	b083      	sub	sp, #12
 81033c0:	af00      	add	r7, sp, #0
 81033c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81033c4:	687b      	ldr	r3, [r7, #4]
 81033c6:	689b      	ldr	r3, [r3, #8]
 81033c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 81033cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81033d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 81033d8:	bf00      	nop
 81033da:	370c      	adds	r7, #12
 81033dc:	46bd      	mov	sp, r7
 81033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033e2:	4770      	bx	lr

081033e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 81033e4:	b480      	push	{r7}
 81033e6:	b083      	sub	sp, #12
 81033e8:	af00      	add	r7, sp, #0
 81033ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	689b      	ldr	r3, [r3, #8]
 81033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81033f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81033f8:	d101      	bne.n	81033fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 81033fa:	2301      	movs	r3, #1
 81033fc:	e000      	b.n	8103400 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 81033fe:	2300      	movs	r3, #0
}
 8103400:	4618      	mov	r0, r3
 8103402:	370c      	adds	r7, #12
 8103404:	46bd      	mov	sp, r7
 8103406:	f85d 7b04 	ldr.w	r7, [sp], #4
 810340a:	4770      	bx	lr

0810340c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 810340c:	b480      	push	{r7}
 810340e:	b083      	sub	sp, #12
 8103410:	af00      	add	r7, sp, #0
 8103412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	689b      	ldr	r3, [r3, #8]
 8103418:	f003 0301 	and.w	r3, r3, #1
 810341c:	2b01      	cmp	r3, #1
 810341e:	d101      	bne.n	8103424 <LL_ADC_IsEnabled+0x18>
 8103420:	2301      	movs	r3, #1
 8103422:	e000      	b.n	8103426 <LL_ADC_IsEnabled+0x1a>
 8103424:	2300      	movs	r3, #0
}
 8103426:	4618      	mov	r0, r3
 8103428:	370c      	adds	r7, #12
 810342a:	46bd      	mov	sp, r7
 810342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103430:	4770      	bx	lr

08103432 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103432:	b480      	push	{r7}
 8103434:	b083      	sub	sp, #12
 8103436:	af00      	add	r7, sp, #0
 8103438:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	689b      	ldr	r3, [r3, #8]
 810343e:	f003 0304 	and.w	r3, r3, #4
 8103442:	2b04      	cmp	r3, #4
 8103444:	d101      	bne.n	810344a <LL_ADC_REG_IsConversionOngoing+0x18>
 8103446:	2301      	movs	r3, #1
 8103448:	e000      	b.n	810344c <LL_ADC_REG_IsConversionOngoing+0x1a>
 810344a:	2300      	movs	r3, #0
}
 810344c:	4618      	mov	r0, r3
 810344e:	370c      	adds	r7, #12
 8103450:	46bd      	mov	sp, r7
 8103452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103456:	4770      	bx	lr

08103458 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103458:	b480      	push	{r7}
 810345a:	b083      	sub	sp, #12
 810345c:	af00      	add	r7, sp, #0
 810345e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	689b      	ldr	r3, [r3, #8]
 8103464:	f003 0308 	and.w	r3, r3, #8
 8103468:	2b08      	cmp	r3, #8
 810346a:	d101      	bne.n	8103470 <LL_ADC_INJ_IsConversionOngoing+0x18>
 810346c:	2301      	movs	r3, #1
 810346e:	e000      	b.n	8103472 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8103470:	2300      	movs	r3, #0
}
 8103472:	4618      	mov	r0, r3
 8103474:	370c      	adds	r7, #12
 8103476:	46bd      	mov	sp, r7
 8103478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810347c:	4770      	bx	lr
	...

08103480 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8103480:	b590      	push	{r4, r7, lr}
 8103482:	b089      	sub	sp, #36	; 0x24
 8103484:	af00      	add	r7, sp, #0
 8103486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103488:	2300      	movs	r3, #0
 810348a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 810348c:	2300      	movs	r3, #0
 810348e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	2b00      	cmp	r3, #0
 8103494:	d101      	bne.n	810349a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8103496:	2301      	movs	r3, #1
 8103498:	e18f      	b.n	81037ba <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	68db      	ldr	r3, [r3, #12]
 810349e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81034a0:	687b      	ldr	r3, [r7, #4]
 81034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034a4:	2b00      	cmp	r3, #0
 81034a6:	d109      	bne.n	81034bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81034a8:	6878      	ldr	r0, [r7, #4]
 81034aa:	f7fe fcc9 	bl	8101e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	2200      	movs	r2, #0
 81034b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	2200      	movs	r2, #0
 81034b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	681b      	ldr	r3, [r3, #0]
 81034c0:	4618      	mov	r0, r3
 81034c2:	f7ff ff67 	bl	8103394 <LL_ADC_IsDeepPowerDownEnabled>
 81034c6:	4603      	mov	r3, r0
 81034c8:	2b00      	cmp	r3, #0
 81034ca:	d004      	beq.n	81034d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 81034cc:	687b      	ldr	r3, [r7, #4]
 81034ce:	681b      	ldr	r3, [r3, #0]
 81034d0:	4618      	mov	r0, r3
 81034d2:	f7ff ff4d 	bl	8103370 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81034d6:	687b      	ldr	r3, [r7, #4]
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	4618      	mov	r0, r3
 81034dc:	f7ff ff82 	bl	81033e4 <LL_ADC_IsInternalRegulatorEnabled>
 81034e0:	4603      	mov	r3, r0
 81034e2:	2b00      	cmp	r3, #0
 81034e4:	d114      	bne.n	8103510 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	681b      	ldr	r3, [r3, #0]
 81034ea:	4618      	mov	r0, r3
 81034ec:	f7ff ff66 	bl	81033bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81034f0:	4b88      	ldr	r3, [pc, #544]	; (8103714 <HAL_ADC_Init+0x294>)
 81034f2:	681b      	ldr	r3, [r3, #0]
 81034f4:	099b      	lsrs	r3, r3, #6
 81034f6:	4a88      	ldr	r2, [pc, #544]	; (8103718 <HAL_ADC_Init+0x298>)
 81034f8:	fba2 2303 	umull	r2, r3, r2, r3
 81034fc:	099b      	lsrs	r3, r3, #6
 81034fe:	3301      	adds	r3, #1
 8103500:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103502:	e002      	b.n	810350a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8103504:	68bb      	ldr	r3, [r7, #8]
 8103506:	3b01      	subs	r3, #1
 8103508:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810350a:	68bb      	ldr	r3, [r7, #8]
 810350c:	2b00      	cmp	r3, #0
 810350e:	d1f9      	bne.n	8103504 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	681b      	ldr	r3, [r3, #0]
 8103514:	4618      	mov	r0, r3
 8103516:	f7ff ff65 	bl	81033e4 <LL_ADC_IsInternalRegulatorEnabled>
 810351a:	4603      	mov	r3, r0
 810351c:	2b00      	cmp	r3, #0
 810351e:	d10d      	bne.n	810353c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103524:	f043 0210 	orr.w	r2, r3, #16
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103530:	f043 0201 	orr.w	r2, r3, #1
 8103534:	687b      	ldr	r3, [r7, #4]
 8103536:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8103538:	2301      	movs	r3, #1
 810353a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810353c:	687b      	ldr	r3, [r7, #4]
 810353e:	681b      	ldr	r3, [r3, #0]
 8103540:	4618      	mov	r0, r3
 8103542:	f7ff ff76 	bl	8103432 <LL_ADC_REG_IsConversionOngoing>
 8103546:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810354c:	f003 0310 	and.w	r3, r3, #16
 8103550:	2b00      	cmp	r3, #0
 8103552:	f040 8129 	bne.w	81037a8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8103556:	697b      	ldr	r3, [r7, #20]
 8103558:	2b00      	cmp	r3, #0
 810355a:	f040 8125 	bne.w	81037a8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103562:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8103566:	f043 0202 	orr.w	r2, r3, #2
 810356a:	687b      	ldr	r3, [r7, #4]
 810356c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	681b      	ldr	r3, [r3, #0]
 8103572:	4618      	mov	r0, r3
 8103574:	f7ff ff4a 	bl	810340c <LL_ADC_IsEnabled>
 8103578:	4603      	mov	r3, r0
 810357a:	2b00      	cmp	r3, #0
 810357c:	d136      	bne.n	81035ec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	681b      	ldr	r3, [r3, #0]
 8103582:	4a66      	ldr	r2, [pc, #408]	; (810371c <HAL_ADC_Init+0x29c>)
 8103584:	4293      	cmp	r3, r2
 8103586:	d004      	beq.n	8103592 <HAL_ADC_Init+0x112>
 8103588:	687b      	ldr	r3, [r7, #4]
 810358a:	681b      	ldr	r3, [r3, #0]
 810358c:	4a64      	ldr	r2, [pc, #400]	; (8103720 <HAL_ADC_Init+0x2a0>)
 810358e:	4293      	cmp	r3, r2
 8103590:	d10e      	bne.n	81035b0 <HAL_ADC_Init+0x130>
 8103592:	4862      	ldr	r0, [pc, #392]	; (810371c <HAL_ADC_Init+0x29c>)
 8103594:	f7ff ff3a 	bl	810340c <LL_ADC_IsEnabled>
 8103598:	4604      	mov	r4, r0
 810359a:	4861      	ldr	r0, [pc, #388]	; (8103720 <HAL_ADC_Init+0x2a0>)
 810359c:	f7ff ff36 	bl	810340c <LL_ADC_IsEnabled>
 81035a0:	4603      	mov	r3, r0
 81035a2:	4323      	orrs	r3, r4
 81035a4:	2b00      	cmp	r3, #0
 81035a6:	bf0c      	ite	eq
 81035a8:	2301      	moveq	r3, #1
 81035aa:	2300      	movne	r3, #0
 81035ac:	b2db      	uxtb	r3, r3
 81035ae:	e008      	b.n	81035c2 <HAL_ADC_Init+0x142>
 81035b0:	485c      	ldr	r0, [pc, #368]	; (8103724 <HAL_ADC_Init+0x2a4>)
 81035b2:	f7ff ff2b 	bl	810340c <LL_ADC_IsEnabled>
 81035b6:	4603      	mov	r3, r0
 81035b8:	2b00      	cmp	r3, #0
 81035ba:	bf0c      	ite	eq
 81035bc:	2301      	moveq	r3, #1
 81035be:	2300      	movne	r3, #0
 81035c0:	b2db      	uxtb	r3, r3
 81035c2:	2b00      	cmp	r3, #0
 81035c4:	d012      	beq.n	81035ec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	681b      	ldr	r3, [r3, #0]
 81035ca:	4a54      	ldr	r2, [pc, #336]	; (810371c <HAL_ADC_Init+0x29c>)
 81035cc:	4293      	cmp	r3, r2
 81035ce:	d004      	beq.n	81035da <HAL_ADC_Init+0x15a>
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	681b      	ldr	r3, [r3, #0]
 81035d4:	4a52      	ldr	r2, [pc, #328]	; (8103720 <HAL_ADC_Init+0x2a0>)
 81035d6:	4293      	cmp	r3, r2
 81035d8:	d101      	bne.n	81035de <HAL_ADC_Init+0x15e>
 81035da:	4a53      	ldr	r2, [pc, #332]	; (8103728 <HAL_ADC_Init+0x2a8>)
 81035dc:	e000      	b.n	81035e0 <HAL_ADC_Init+0x160>
 81035de:	4a53      	ldr	r2, [pc, #332]	; (810372c <HAL_ADC_Init+0x2ac>)
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	685b      	ldr	r3, [r3, #4]
 81035e4:	4619      	mov	r1, r3
 81035e6:	4610      	mov	r0, r2
 81035e8:	f7ff fdbe 	bl	8103168 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 81035ec:	f7ff fdb0 	bl	8103150 <HAL_GetREVID>
 81035f0:	4603      	mov	r3, r0
 81035f2:	f241 0203 	movw	r2, #4099	; 0x1003
 81035f6:	4293      	cmp	r3, r2
 81035f8:	d914      	bls.n	8103624 <HAL_ADC_Init+0x1a4>
 81035fa:	687b      	ldr	r3, [r7, #4]
 81035fc:	689b      	ldr	r3, [r3, #8]
 81035fe:	2b10      	cmp	r3, #16
 8103600:	d110      	bne.n	8103624 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	7d5b      	ldrb	r3, [r3, #21]
 8103606:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810360c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810360e:	687b      	ldr	r3, [r7, #4]
 8103610:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103612:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	7f1b      	ldrb	r3, [r3, #28]
 8103618:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810361a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810361c:	f043 030c 	orr.w	r3, r3, #12
 8103620:	61bb      	str	r3, [r7, #24]
 8103622:	e00d      	b.n	8103640 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	7d5b      	ldrb	r3, [r3, #21]
 8103628:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810362e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103634:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	7f1b      	ldrb	r3, [r3, #28]
 810363a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810363c:	4313      	orrs	r3, r2
 810363e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8103640:	687b      	ldr	r3, [r7, #4]
 8103642:	7f1b      	ldrb	r3, [r3, #28]
 8103644:	2b01      	cmp	r3, #1
 8103646:	d106      	bne.n	8103656 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	6a1b      	ldr	r3, [r3, #32]
 810364c:	3b01      	subs	r3, #1
 810364e:	045b      	lsls	r3, r3, #17
 8103650:	69ba      	ldr	r2, [r7, #24]
 8103652:	4313      	orrs	r3, r2
 8103654:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8103656:	687b      	ldr	r3, [r7, #4]
 8103658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810365a:	2b00      	cmp	r3, #0
 810365c:	d009      	beq.n	8103672 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103662:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810366a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810366c:	69ba      	ldr	r2, [r7, #24]
 810366e:	4313      	orrs	r3, r2
 8103670:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8103672:	687b      	ldr	r3, [r7, #4]
 8103674:	681b      	ldr	r3, [r3, #0]
 8103676:	68da      	ldr	r2, [r3, #12]
 8103678:	4b2d      	ldr	r3, [pc, #180]	; (8103730 <HAL_ADC_Init+0x2b0>)
 810367a:	4013      	ands	r3, r2
 810367c:	687a      	ldr	r2, [r7, #4]
 810367e:	6812      	ldr	r2, [r2, #0]
 8103680:	69b9      	ldr	r1, [r7, #24]
 8103682:	430b      	orrs	r3, r1
 8103684:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	681b      	ldr	r3, [r3, #0]
 810368a:	4618      	mov	r0, r3
 810368c:	f7ff fed1 	bl	8103432 <LL_ADC_REG_IsConversionOngoing>
 8103690:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103692:	687b      	ldr	r3, [r7, #4]
 8103694:	681b      	ldr	r3, [r3, #0]
 8103696:	4618      	mov	r0, r3
 8103698:	f7ff fede 	bl	8103458 <LL_ADC_INJ_IsConversionOngoing>
 810369c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810369e:	693b      	ldr	r3, [r7, #16]
 81036a0:	2b00      	cmp	r3, #0
 81036a2:	d15f      	bne.n	8103764 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81036a4:	68fb      	ldr	r3, [r7, #12]
 81036a6:	2b00      	cmp	r3, #0
 81036a8:	d15c      	bne.n	8103764 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81036aa:	687b      	ldr	r3, [r7, #4]
 81036ac:	7d1b      	ldrb	r3, [r3, #20]
 81036ae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81036b0:	687b      	ldr	r3, [r7, #4]
 81036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 81036b4:	4313      	orrs	r3, r2
 81036b6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	681b      	ldr	r3, [r3, #0]
 81036bc:	68db      	ldr	r3, [r3, #12]
 81036be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81036c2:	f023 0303 	bic.w	r3, r3, #3
 81036c6:	687a      	ldr	r2, [r7, #4]
 81036c8:	6812      	ldr	r2, [r2, #0]
 81036ca:	69b9      	ldr	r1, [r7, #24]
 81036cc:	430b      	orrs	r3, r1
 81036ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81036d6:	2b01      	cmp	r3, #1
 81036d8:	d12e      	bne.n	8103738 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 81036da:	687b      	ldr	r3, [r7, #4]
 81036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81036de:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 81036e0:	687b      	ldr	r3, [r7, #4]
 81036e2:	681b      	ldr	r3, [r3, #0]
 81036e4:	691a      	ldr	r2, [r3, #16]
 81036e6:	4b13      	ldr	r3, [pc, #76]	; (8103734 <HAL_ADC_Init+0x2b4>)
 81036e8:	4013      	ands	r3, r2
 81036ea:	687a      	ldr	r2, [r7, #4]
 81036ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 81036ee:	3a01      	subs	r2, #1
 81036f0:	0411      	lsls	r1, r2, #16
 81036f2:	687a      	ldr	r2, [r7, #4]
 81036f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 81036f6:	4311      	orrs	r1, r2
 81036f8:	687a      	ldr	r2, [r7, #4]
 81036fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 81036fc:	4311      	orrs	r1, r2
 81036fe:	687a      	ldr	r2, [r7, #4]
 8103700:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8103702:	430a      	orrs	r2, r1
 8103704:	431a      	orrs	r2, r3
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	681b      	ldr	r3, [r3, #0]
 810370a:	f042 0201 	orr.w	r2, r2, #1
 810370e:	611a      	str	r2, [r3, #16]
 8103710:	e01a      	b.n	8103748 <HAL_ADC_Init+0x2c8>
 8103712:	bf00      	nop
 8103714:	10000000 	.word	0x10000000
 8103718:	053e2d63 	.word	0x053e2d63
 810371c:	40022000 	.word	0x40022000
 8103720:	40022100 	.word	0x40022100
 8103724:	58026000 	.word	0x58026000
 8103728:	40022300 	.word	0x40022300
 810372c:	58026300 	.word	0x58026300
 8103730:	fff0c003 	.word	0xfff0c003
 8103734:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103738:	687b      	ldr	r3, [r7, #4]
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	691a      	ldr	r2, [r3, #16]
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	f022 0201 	bic.w	r2, r2, #1
 8103746:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	691b      	ldr	r3, [r3, #16]
 810374e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	681b      	ldr	r3, [r3, #0]
 810375a:	430a      	orrs	r2, r1
 810375c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 810375e:	6878      	ldr	r0, [r7, #4]
 8103760:	f000 fb80 	bl	8103e64 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8103764:	687b      	ldr	r3, [r7, #4]
 8103766:	68db      	ldr	r3, [r3, #12]
 8103768:	2b01      	cmp	r3, #1
 810376a:	d10c      	bne.n	8103786 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 810376c:	687b      	ldr	r3, [r7, #4]
 810376e:	681b      	ldr	r3, [r3, #0]
 8103770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103772:	f023 010f 	bic.w	r1, r3, #15
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	699b      	ldr	r3, [r3, #24]
 810377a:	1e5a      	subs	r2, r3, #1
 810377c:	687b      	ldr	r3, [r7, #4]
 810377e:	681b      	ldr	r3, [r3, #0]
 8103780:	430a      	orrs	r2, r1
 8103782:	631a      	str	r2, [r3, #48]	; 0x30
 8103784:	e007      	b.n	8103796 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8103786:	687b      	ldr	r3, [r7, #4]
 8103788:	681b      	ldr	r3, [r3, #0]
 810378a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810378c:	687b      	ldr	r3, [r7, #4]
 810378e:	681b      	ldr	r3, [r3, #0]
 8103790:	f022 020f 	bic.w	r2, r2, #15
 8103794:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8103796:	687b      	ldr	r3, [r7, #4]
 8103798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810379a:	f023 0303 	bic.w	r3, r3, #3
 810379e:	f043 0201 	orr.w	r2, r3, #1
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	655a      	str	r2, [r3, #84]	; 0x54
 81037a6:	e007      	b.n	81037b8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81037a8:	687b      	ldr	r3, [r7, #4]
 81037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81037ac:	f043 0210 	orr.w	r2, r3, #16
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81037b4:	2301      	movs	r3, #1
 81037b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81037b8:	7ffb      	ldrb	r3, [r7, #31]
}
 81037ba:	4618      	mov	r0, r3
 81037bc:	3724      	adds	r7, #36	; 0x24
 81037be:	46bd      	mov	sp, r7
 81037c0:	bd90      	pop	{r4, r7, pc}
 81037c2:	bf00      	nop

081037c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 81037c4:	b590      	push	{r4, r7, lr}
 81037c6:	b0a1      	sub	sp, #132	; 0x84
 81037c8:	af00      	add	r7, sp, #0
 81037ca:	6078      	str	r0, [r7, #4]
 81037cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81037ce:	2300      	movs	r3, #0
 81037d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 81037d4:	2300      	movs	r3, #0
 81037d6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 81037d8:	683b      	ldr	r3, [r7, #0]
 81037da:	68db      	ldr	r3, [r3, #12]
 81037dc:	4a9d      	ldr	r2, [pc, #628]	; (8103a54 <HAL_ADC_ConfigChannel+0x290>)
 81037de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81037e6:	2b01      	cmp	r3, #1
 81037e8:	d101      	bne.n	81037ee <HAL_ADC_ConfigChannel+0x2a>
 81037ea:	2302      	movs	r3, #2
 81037ec:	e321      	b.n	8103e32 <HAL_ADC_ConfigChannel+0x66e>
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	2201      	movs	r2, #1
 81037f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	681b      	ldr	r3, [r3, #0]
 81037fa:	4618      	mov	r0, r3
 81037fc:	f7ff fe19 	bl	8103432 <LL_ADC_REG_IsConversionOngoing>
 8103800:	4603      	mov	r3, r0
 8103802:	2b00      	cmp	r3, #0
 8103804:	f040 8306 	bne.w	8103e14 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8103808:	683b      	ldr	r3, [r7, #0]
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103810:	2b00      	cmp	r3, #0
 8103812:	d108      	bne.n	8103826 <HAL_ADC_ConfigChannel+0x62>
 8103814:	683b      	ldr	r3, [r7, #0]
 8103816:	681b      	ldr	r3, [r3, #0]
 8103818:	0e9b      	lsrs	r3, r3, #26
 810381a:	f003 031f 	and.w	r3, r3, #31
 810381e:	2201      	movs	r2, #1
 8103820:	fa02 f303 	lsl.w	r3, r2, r3
 8103824:	e016      	b.n	8103854 <HAL_ADC_ConfigChannel+0x90>
 8103826:	683b      	ldr	r3, [r7, #0]
 8103828:	681b      	ldr	r3, [r3, #0]
 810382a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810382c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810382e:	fa93 f3a3 	rbit	r3, r3
 8103832:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8103834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8103836:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8103838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810383a:	2b00      	cmp	r3, #0
 810383c:	d101      	bne.n	8103842 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 810383e:	2320      	movs	r3, #32
 8103840:	e003      	b.n	810384a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8103842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8103844:	fab3 f383 	clz	r3, r3
 8103848:	b2db      	uxtb	r3, r3
 810384a:	f003 031f 	and.w	r3, r3, #31
 810384e:	2201      	movs	r2, #1
 8103850:	fa02 f303 	lsl.w	r3, r2, r3
 8103854:	687a      	ldr	r2, [r7, #4]
 8103856:	6812      	ldr	r2, [r2, #0]
 8103858:	69d1      	ldr	r1, [r2, #28]
 810385a:	687a      	ldr	r2, [r7, #4]
 810385c:	6812      	ldr	r2, [r2, #0]
 810385e:	430b      	orrs	r3, r1
 8103860:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	6818      	ldr	r0, [r3, #0]
 8103866:	683b      	ldr	r3, [r7, #0]
 8103868:	6859      	ldr	r1, [r3, #4]
 810386a:	683b      	ldr	r3, [r7, #0]
 810386c:	681b      	ldr	r3, [r3, #0]
 810386e:	461a      	mov	r2, r3
 8103870:	f7ff fd02 	bl	8103278 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	681b      	ldr	r3, [r3, #0]
 8103878:	4618      	mov	r0, r3
 810387a:	f7ff fdda 	bl	8103432 <LL_ADC_REG_IsConversionOngoing>
 810387e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	681b      	ldr	r3, [r3, #0]
 8103884:	4618      	mov	r0, r3
 8103886:	f7ff fde7 	bl	8103458 <LL_ADC_INJ_IsConversionOngoing>
 810388a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810388c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810388e:	2b00      	cmp	r3, #0
 8103890:	f040 80b3 	bne.w	81039fa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8103896:	2b00      	cmp	r3, #0
 8103898:	f040 80af 	bne.w	81039fa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 810389c:	687b      	ldr	r3, [r7, #4]
 810389e:	6818      	ldr	r0, [r3, #0]
 81038a0:	683b      	ldr	r3, [r7, #0]
 81038a2:	6819      	ldr	r1, [r3, #0]
 81038a4:	683b      	ldr	r3, [r7, #0]
 81038a6:	689b      	ldr	r3, [r3, #8]
 81038a8:	461a      	mov	r2, r3
 81038aa:	f7ff fd11 	bl	81032d0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81038ae:	4b6a      	ldr	r3, [pc, #424]	; (8103a58 <HAL_ADC_ConfigChannel+0x294>)
 81038b0:	681b      	ldr	r3, [r3, #0]
 81038b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 81038b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81038ba:	d10b      	bne.n	81038d4 <HAL_ADC_ConfigChannel+0x110>
 81038bc:	683b      	ldr	r3, [r7, #0]
 81038be:	695a      	ldr	r2, [r3, #20]
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	68db      	ldr	r3, [r3, #12]
 81038c6:	089b      	lsrs	r3, r3, #2
 81038c8:	f003 0307 	and.w	r3, r3, #7
 81038cc:	005b      	lsls	r3, r3, #1
 81038ce:	fa02 f303 	lsl.w	r3, r2, r3
 81038d2:	e01d      	b.n	8103910 <HAL_ADC_ConfigChannel+0x14c>
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	681b      	ldr	r3, [r3, #0]
 81038d8:	68db      	ldr	r3, [r3, #12]
 81038da:	f003 0310 	and.w	r3, r3, #16
 81038de:	2b00      	cmp	r3, #0
 81038e0:	d10b      	bne.n	81038fa <HAL_ADC_ConfigChannel+0x136>
 81038e2:	683b      	ldr	r3, [r7, #0]
 81038e4:	695a      	ldr	r2, [r3, #20]
 81038e6:	687b      	ldr	r3, [r7, #4]
 81038e8:	681b      	ldr	r3, [r3, #0]
 81038ea:	68db      	ldr	r3, [r3, #12]
 81038ec:	089b      	lsrs	r3, r3, #2
 81038ee:	f003 0307 	and.w	r3, r3, #7
 81038f2:	005b      	lsls	r3, r3, #1
 81038f4:	fa02 f303 	lsl.w	r3, r2, r3
 81038f8:	e00a      	b.n	8103910 <HAL_ADC_ConfigChannel+0x14c>
 81038fa:	683b      	ldr	r3, [r7, #0]
 81038fc:	695a      	ldr	r2, [r3, #20]
 81038fe:	687b      	ldr	r3, [r7, #4]
 8103900:	681b      	ldr	r3, [r3, #0]
 8103902:	68db      	ldr	r3, [r3, #12]
 8103904:	089b      	lsrs	r3, r3, #2
 8103906:	f003 0304 	and.w	r3, r3, #4
 810390a:	005b      	lsls	r3, r3, #1
 810390c:	fa02 f303 	lsl.w	r3, r2, r3
 8103910:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8103912:	683b      	ldr	r3, [r7, #0]
 8103914:	691b      	ldr	r3, [r3, #16]
 8103916:	2b04      	cmp	r3, #4
 8103918:	d027      	beq.n	810396a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	6818      	ldr	r0, [r3, #0]
 810391e:	683b      	ldr	r3, [r7, #0]
 8103920:	6919      	ldr	r1, [r3, #16]
 8103922:	683b      	ldr	r3, [r7, #0]
 8103924:	681a      	ldr	r2, [r3, #0]
 8103926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103928:	f7ff fc52 	bl	81031d0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 810392c:	687b      	ldr	r3, [r7, #4]
 810392e:	6818      	ldr	r0, [r3, #0]
 8103930:	683b      	ldr	r3, [r7, #0]
 8103932:	6919      	ldr	r1, [r3, #16]
 8103934:	683b      	ldr	r3, [r7, #0]
 8103936:	7e5b      	ldrb	r3, [r3, #25]
 8103938:	2b01      	cmp	r3, #1
 810393a:	d102      	bne.n	8103942 <HAL_ADC_ConfigChannel+0x17e>
 810393c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8103940:	e000      	b.n	8103944 <HAL_ADC_ConfigChannel+0x180>
 8103942:	2300      	movs	r3, #0
 8103944:	461a      	mov	r2, r3
 8103946:	f7ff fc7c 	bl	8103242 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	6818      	ldr	r0, [r3, #0]
 810394e:	683b      	ldr	r3, [r7, #0]
 8103950:	6919      	ldr	r1, [r3, #16]
 8103952:	683b      	ldr	r3, [r7, #0]
 8103954:	7e1b      	ldrb	r3, [r3, #24]
 8103956:	2b01      	cmp	r3, #1
 8103958:	d102      	bne.n	8103960 <HAL_ADC_ConfigChannel+0x19c>
 810395a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810395e:	e000      	b.n	8103962 <HAL_ADC_ConfigChannel+0x19e>
 8103960:	2300      	movs	r3, #0
 8103962:	461a      	mov	r2, r3
 8103964:	f7ff fc54 	bl	8103210 <LL_ADC_SetDataRightShift>
 8103968:	e047      	b.n	81039fa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103970:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103974:	683b      	ldr	r3, [r7, #0]
 8103976:	681b      	ldr	r3, [r3, #0]
 8103978:	069b      	lsls	r3, r3, #26
 810397a:	429a      	cmp	r2, r3
 810397c:	d107      	bne.n	810398e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	681b      	ldr	r3, [r3, #0]
 8103982:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810398c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103994:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103998:	683b      	ldr	r3, [r7, #0]
 810399a:	681b      	ldr	r3, [r3, #0]
 810399c:	069b      	lsls	r3, r3, #26
 810399e:	429a      	cmp	r2, r3
 81039a0:	d107      	bne.n	81039b2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81039b0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	681b      	ldr	r3, [r3, #0]
 81039b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81039b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81039bc:	683b      	ldr	r3, [r7, #0]
 81039be:	681b      	ldr	r3, [r3, #0]
 81039c0:	069b      	lsls	r3, r3, #26
 81039c2:	429a      	cmp	r2, r3
 81039c4:	d107      	bne.n	81039d6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	681b      	ldr	r3, [r3, #0]
 81039ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81039d4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	681b      	ldr	r3, [r3, #0]
 81039da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81039dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81039e0:	683b      	ldr	r3, [r7, #0]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	069b      	lsls	r3, r3, #26
 81039e6:	429a      	cmp	r2, r3
 81039e8:	d107      	bne.n	81039fa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	681b      	ldr	r3, [r3, #0]
 81039f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81039f8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81039fa:	687b      	ldr	r3, [r7, #4]
 81039fc:	681b      	ldr	r3, [r3, #0]
 81039fe:	4618      	mov	r0, r3
 8103a00:	f7ff fd04 	bl	810340c <LL_ADC_IsEnabled>
 8103a04:	4603      	mov	r3, r0
 8103a06:	2b00      	cmp	r3, #0
 8103a08:	f040 820d 	bne.w	8103e26 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	6818      	ldr	r0, [r3, #0]
 8103a10:	683b      	ldr	r3, [r7, #0]
 8103a12:	6819      	ldr	r1, [r3, #0]
 8103a14:	683b      	ldr	r3, [r7, #0]
 8103a16:	68db      	ldr	r3, [r3, #12]
 8103a18:	461a      	mov	r2, r3
 8103a1a:	f7ff fc85 	bl	8103328 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8103a1e:	683b      	ldr	r3, [r7, #0]
 8103a20:	68db      	ldr	r3, [r3, #12]
 8103a22:	4a0c      	ldr	r2, [pc, #48]	; (8103a54 <HAL_ADC_ConfigChannel+0x290>)
 8103a24:	4293      	cmp	r3, r2
 8103a26:	f040 8133 	bne.w	8103c90 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103a2e:	683b      	ldr	r3, [r7, #0]
 8103a30:	681b      	ldr	r3, [r3, #0]
 8103a32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a36:	2b00      	cmp	r3, #0
 8103a38:	d110      	bne.n	8103a5c <HAL_ADC_ConfigChannel+0x298>
 8103a3a:	683b      	ldr	r3, [r7, #0]
 8103a3c:	681b      	ldr	r3, [r3, #0]
 8103a3e:	0e9b      	lsrs	r3, r3, #26
 8103a40:	3301      	adds	r3, #1
 8103a42:	f003 031f 	and.w	r3, r3, #31
 8103a46:	2b09      	cmp	r3, #9
 8103a48:	bf94      	ite	ls
 8103a4a:	2301      	movls	r3, #1
 8103a4c:	2300      	movhi	r3, #0
 8103a4e:	b2db      	uxtb	r3, r3
 8103a50:	e01e      	b.n	8103a90 <HAL_ADC_ConfigChannel+0x2cc>
 8103a52:	bf00      	nop
 8103a54:	47ff0000 	.word	0x47ff0000
 8103a58:	5c001000 	.word	0x5c001000
 8103a5c:	683b      	ldr	r3, [r7, #0]
 8103a5e:	681b      	ldr	r3, [r3, #0]
 8103a60:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8103a64:	fa93 f3a3 	rbit	r3, r3
 8103a68:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8103a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8103a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103a70:	2b00      	cmp	r3, #0
 8103a72:	d101      	bne.n	8103a78 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8103a74:	2320      	movs	r3, #32
 8103a76:	e003      	b.n	8103a80 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8103a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103a7a:	fab3 f383 	clz	r3, r3
 8103a7e:	b2db      	uxtb	r3, r3
 8103a80:	3301      	adds	r3, #1
 8103a82:	f003 031f 	and.w	r3, r3, #31
 8103a86:	2b09      	cmp	r3, #9
 8103a88:	bf94      	ite	ls
 8103a8a:	2301      	movls	r3, #1
 8103a8c:	2300      	movhi	r3, #0
 8103a8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103a90:	2b00      	cmp	r3, #0
 8103a92:	d079      	beq.n	8103b88 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103a94:	683b      	ldr	r3, [r7, #0]
 8103a96:	681b      	ldr	r3, [r3, #0]
 8103a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a9c:	2b00      	cmp	r3, #0
 8103a9e:	d107      	bne.n	8103ab0 <HAL_ADC_ConfigChannel+0x2ec>
 8103aa0:	683b      	ldr	r3, [r7, #0]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	0e9b      	lsrs	r3, r3, #26
 8103aa6:	3301      	adds	r3, #1
 8103aa8:	069b      	lsls	r3, r3, #26
 8103aaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103aae:	e015      	b.n	8103adc <HAL_ADC_ConfigChannel+0x318>
 8103ab0:	683b      	ldr	r3, [r7, #0]
 8103ab2:	681b      	ldr	r3, [r3, #0]
 8103ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103ab8:	fa93 f3a3 	rbit	r3, r3
 8103abc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8103abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103ac0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8103ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103ac4:	2b00      	cmp	r3, #0
 8103ac6:	d101      	bne.n	8103acc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8103ac8:	2320      	movs	r3, #32
 8103aca:	e003      	b.n	8103ad4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8103acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103ace:	fab3 f383 	clz	r3, r3
 8103ad2:	b2db      	uxtb	r3, r3
 8103ad4:	3301      	adds	r3, #1
 8103ad6:	069b      	lsls	r3, r3, #26
 8103ad8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103adc:	683b      	ldr	r3, [r7, #0]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103ae4:	2b00      	cmp	r3, #0
 8103ae6:	d109      	bne.n	8103afc <HAL_ADC_ConfigChannel+0x338>
 8103ae8:	683b      	ldr	r3, [r7, #0]
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	0e9b      	lsrs	r3, r3, #26
 8103aee:	3301      	adds	r3, #1
 8103af0:	f003 031f 	and.w	r3, r3, #31
 8103af4:	2101      	movs	r1, #1
 8103af6:	fa01 f303 	lsl.w	r3, r1, r3
 8103afa:	e017      	b.n	8103b2c <HAL_ADC_ConfigChannel+0x368>
 8103afc:	683b      	ldr	r3, [r7, #0]
 8103afe:	681b      	ldr	r3, [r3, #0]
 8103b00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103b04:	fa93 f3a3 	rbit	r3, r3
 8103b08:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8103b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103b0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8103b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103b10:	2b00      	cmp	r3, #0
 8103b12:	d101      	bne.n	8103b18 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8103b14:	2320      	movs	r3, #32
 8103b16:	e003      	b.n	8103b20 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8103b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103b1a:	fab3 f383 	clz	r3, r3
 8103b1e:	b2db      	uxtb	r3, r3
 8103b20:	3301      	adds	r3, #1
 8103b22:	f003 031f 	and.w	r3, r3, #31
 8103b26:	2101      	movs	r1, #1
 8103b28:	fa01 f303 	lsl.w	r3, r1, r3
 8103b2c:	ea42 0103 	orr.w	r1, r2, r3
 8103b30:	683b      	ldr	r3, [r7, #0]
 8103b32:	681b      	ldr	r3, [r3, #0]
 8103b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103b38:	2b00      	cmp	r3, #0
 8103b3a:	d10a      	bne.n	8103b52 <HAL_ADC_ConfigChannel+0x38e>
 8103b3c:	683b      	ldr	r3, [r7, #0]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	0e9b      	lsrs	r3, r3, #26
 8103b42:	3301      	adds	r3, #1
 8103b44:	f003 021f 	and.w	r2, r3, #31
 8103b48:	4613      	mov	r3, r2
 8103b4a:	005b      	lsls	r3, r3, #1
 8103b4c:	4413      	add	r3, r2
 8103b4e:	051b      	lsls	r3, r3, #20
 8103b50:	e018      	b.n	8103b84 <HAL_ADC_ConfigChannel+0x3c0>
 8103b52:	683b      	ldr	r3, [r7, #0]
 8103b54:	681b      	ldr	r3, [r3, #0]
 8103b56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103b5a:	fa93 f3a3 	rbit	r3, r3
 8103b5e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8103b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103b62:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8103b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103b66:	2b00      	cmp	r3, #0
 8103b68:	d101      	bne.n	8103b6e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8103b6a:	2320      	movs	r3, #32
 8103b6c:	e003      	b.n	8103b76 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8103b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103b70:	fab3 f383 	clz	r3, r3
 8103b74:	b2db      	uxtb	r3, r3
 8103b76:	3301      	adds	r3, #1
 8103b78:	f003 021f 	and.w	r2, r3, #31
 8103b7c:	4613      	mov	r3, r2
 8103b7e:	005b      	lsls	r3, r3, #1
 8103b80:	4413      	add	r3, r2
 8103b82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103b84:	430b      	orrs	r3, r1
 8103b86:	e07e      	b.n	8103c86 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103b88:	683b      	ldr	r3, [r7, #0]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103b90:	2b00      	cmp	r3, #0
 8103b92:	d107      	bne.n	8103ba4 <HAL_ADC_ConfigChannel+0x3e0>
 8103b94:	683b      	ldr	r3, [r7, #0]
 8103b96:	681b      	ldr	r3, [r3, #0]
 8103b98:	0e9b      	lsrs	r3, r3, #26
 8103b9a:	3301      	adds	r3, #1
 8103b9c:	069b      	lsls	r3, r3, #26
 8103b9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103ba2:	e015      	b.n	8103bd0 <HAL_ADC_ConfigChannel+0x40c>
 8103ba4:	683b      	ldr	r3, [r7, #0]
 8103ba6:	681b      	ldr	r3, [r3, #0]
 8103ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103bac:	fa93 f3a3 	rbit	r3, r3
 8103bb0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8103bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8103bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103bb8:	2b00      	cmp	r3, #0
 8103bba:	d101      	bne.n	8103bc0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8103bbc:	2320      	movs	r3, #32
 8103bbe:	e003      	b.n	8103bc8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8103bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103bc2:	fab3 f383 	clz	r3, r3
 8103bc6:	b2db      	uxtb	r3, r3
 8103bc8:	3301      	adds	r3, #1
 8103bca:	069b      	lsls	r3, r3, #26
 8103bcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103bd0:	683b      	ldr	r3, [r7, #0]
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103bd8:	2b00      	cmp	r3, #0
 8103bda:	d109      	bne.n	8103bf0 <HAL_ADC_ConfigChannel+0x42c>
 8103bdc:	683b      	ldr	r3, [r7, #0]
 8103bde:	681b      	ldr	r3, [r3, #0]
 8103be0:	0e9b      	lsrs	r3, r3, #26
 8103be2:	3301      	adds	r3, #1
 8103be4:	f003 031f 	and.w	r3, r3, #31
 8103be8:	2101      	movs	r1, #1
 8103bea:	fa01 f303 	lsl.w	r3, r1, r3
 8103bee:	e017      	b.n	8103c20 <HAL_ADC_ConfigChannel+0x45c>
 8103bf0:	683b      	ldr	r3, [r7, #0]
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103bf6:	69fb      	ldr	r3, [r7, #28]
 8103bf8:	fa93 f3a3 	rbit	r3, r3
 8103bfc:	61bb      	str	r3, [r7, #24]
  return result;
 8103bfe:	69bb      	ldr	r3, [r7, #24]
 8103c00:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8103c02:	6a3b      	ldr	r3, [r7, #32]
 8103c04:	2b00      	cmp	r3, #0
 8103c06:	d101      	bne.n	8103c0c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8103c08:	2320      	movs	r3, #32
 8103c0a:	e003      	b.n	8103c14 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103c0c:	6a3b      	ldr	r3, [r7, #32]
 8103c0e:	fab3 f383 	clz	r3, r3
 8103c12:	b2db      	uxtb	r3, r3
 8103c14:	3301      	adds	r3, #1
 8103c16:	f003 031f 	and.w	r3, r3, #31
 8103c1a:	2101      	movs	r1, #1
 8103c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8103c20:	ea42 0103 	orr.w	r1, r2, r3
 8103c24:	683b      	ldr	r3, [r7, #0]
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103c2c:	2b00      	cmp	r3, #0
 8103c2e:	d10d      	bne.n	8103c4c <HAL_ADC_ConfigChannel+0x488>
 8103c30:	683b      	ldr	r3, [r7, #0]
 8103c32:	681b      	ldr	r3, [r3, #0]
 8103c34:	0e9b      	lsrs	r3, r3, #26
 8103c36:	3301      	adds	r3, #1
 8103c38:	f003 021f 	and.w	r2, r3, #31
 8103c3c:	4613      	mov	r3, r2
 8103c3e:	005b      	lsls	r3, r3, #1
 8103c40:	4413      	add	r3, r2
 8103c42:	3b1e      	subs	r3, #30
 8103c44:	051b      	lsls	r3, r3, #20
 8103c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103c4a:	e01b      	b.n	8103c84 <HAL_ADC_ConfigChannel+0x4c0>
 8103c4c:	683b      	ldr	r3, [r7, #0]
 8103c4e:	681b      	ldr	r3, [r3, #0]
 8103c50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103c52:	693b      	ldr	r3, [r7, #16]
 8103c54:	fa93 f3a3 	rbit	r3, r3
 8103c58:	60fb      	str	r3, [r7, #12]
  return result;
 8103c5a:	68fb      	ldr	r3, [r7, #12]
 8103c5c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103c5e:	697b      	ldr	r3, [r7, #20]
 8103c60:	2b00      	cmp	r3, #0
 8103c62:	d101      	bne.n	8103c68 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8103c64:	2320      	movs	r3, #32
 8103c66:	e003      	b.n	8103c70 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8103c68:	697b      	ldr	r3, [r7, #20]
 8103c6a:	fab3 f383 	clz	r3, r3
 8103c6e:	b2db      	uxtb	r3, r3
 8103c70:	3301      	adds	r3, #1
 8103c72:	f003 021f 	and.w	r2, r3, #31
 8103c76:	4613      	mov	r3, r2
 8103c78:	005b      	lsls	r3, r3, #1
 8103c7a:	4413      	add	r3, r2
 8103c7c:	3b1e      	subs	r3, #30
 8103c7e:	051b      	lsls	r3, r3, #20
 8103c80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103c84:	430b      	orrs	r3, r1
 8103c86:	683a      	ldr	r2, [r7, #0]
 8103c88:	6892      	ldr	r2, [r2, #8]
 8103c8a:	4619      	mov	r1, r3
 8103c8c:	f7ff fb20 	bl	81032d0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103c90:	683b      	ldr	r3, [r7, #0]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	2b00      	cmp	r3, #0
 8103c96:	f280 80c6 	bge.w	8103e26 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	681b      	ldr	r3, [r3, #0]
 8103c9e:	4a67      	ldr	r2, [pc, #412]	; (8103e3c <HAL_ADC_ConfigChannel+0x678>)
 8103ca0:	4293      	cmp	r3, r2
 8103ca2:	d004      	beq.n	8103cae <HAL_ADC_ConfigChannel+0x4ea>
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	4a65      	ldr	r2, [pc, #404]	; (8103e40 <HAL_ADC_ConfigChannel+0x67c>)
 8103caa:	4293      	cmp	r3, r2
 8103cac:	d101      	bne.n	8103cb2 <HAL_ADC_ConfigChannel+0x4ee>
 8103cae:	4b65      	ldr	r3, [pc, #404]	; (8103e44 <HAL_ADC_ConfigChannel+0x680>)
 8103cb0:	e000      	b.n	8103cb4 <HAL_ADC_ConfigChannel+0x4f0>
 8103cb2:	4b65      	ldr	r3, [pc, #404]	; (8103e48 <HAL_ADC_ConfigChannel+0x684>)
 8103cb4:	4618      	mov	r0, r3
 8103cb6:	f7ff fa7d 	bl	81031b4 <LL_ADC_GetCommonPathInternalCh>
 8103cba:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	681b      	ldr	r3, [r3, #0]
 8103cc0:	4a5e      	ldr	r2, [pc, #376]	; (8103e3c <HAL_ADC_ConfigChannel+0x678>)
 8103cc2:	4293      	cmp	r3, r2
 8103cc4:	d004      	beq.n	8103cd0 <HAL_ADC_ConfigChannel+0x50c>
 8103cc6:	687b      	ldr	r3, [r7, #4]
 8103cc8:	681b      	ldr	r3, [r3, #0]
 8103cca:	4a5d      	ldr	r2, [pc, #372]	; (8103e40 <HAL_ADC_ConfigChannel+0x67c>)
 8103ccc:	4293      	cmp	r3, r2
 8103cce:	d10e      	bne.n	8103cee <HAL_ADC_ConfigChannel+0x52a>
 8103cd0:	485a      	ldr	r0, [pc, #360]	; (8103e3c <HAL_ADC_ConfigChannel+0x678>)
 8103cd2:	f7ff fb9b 	bl	810340c <LL_ADC_IsEnabled>
 8103cd6:	4604      	mov	r4, r0
 8103cd8:	4859      	ldr	r0, [pc, #356]	; (8103e40 <HAL_ADC_ConfigChannel+0x67c>)
 8103cda:	f7ff fb97 	bl	810340c <LL_ADC_IsEnabled>
 8103cde:	4603      	mov	r3, r0
 8103ce0:	4323      	orrs	r3, r4
 8103ce2:	2b00      	cmp	r3, #0
 8103ce4:	bf0c      	ite	eq
 8103ce6:	2301      	moveq	r3, #1
 8103ce8:	2300      	movne	r3, #0
 8103cea:	b2db      	uxtb	r3, r3
 8103cec:	e008      	b.n	8103d00 <HAL_ADC_ConfigChannel+0x53c>
 8103cee:	4857      	ldr	r0, [pc, #348]	; (8103e4c <HAL_ADC_ConfigChannel+0x688>)
 8103cf0:	f7ff fb8c 	bl	810340c <LL_ADC_IsEnabled>
 8103cf4:	4603      	mov	r3, r0
 8103cf6:	2b00      	cmp	r3, #0
 8103cf8:	bf0c      	ite	eq
 8103cfa:	2301      	moveq	r3, #1
 8103cfc:	2300      	movne	r3, #0
 8103cfe:	b2db      	uxtb	r3, r3
 8103d00:	2b00      	cmp	r3, #0
 8103d02:	d07d      	beq.n	8103e00 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103d04:	683b      	ldr	r3, [r7, #0]
 8103d06:	681b      	ldr	r3, [r3, #0]
 8103d08:	4a51      	ldr	r2, [pc, #324]	; (8103e50 <HAL_ADC_ConfigChannel+0x68c>)
 8103d0a:	4293      	cmp	r3, r2
 8103d0c:	d130      	bne.n	8103d70 <HAL_ADC_ConfigChannel+0x5ac>
 8103d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103d14:	2b00      	cmp	r3, #0
 8103d16:	d12b      	bne.n	8103d70 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	4a4b      	ldr	r2, [pc, #300]	; (8103e4c <HAL_ADC_ConfigChannel+0x688>)
 8103d1e:	4293      	cmp	r3, r2
 8103d20:	f040 8081 	bne.w	8103e26 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	681b      	ldr	r3, [r3, #0]
 8103d28:	4a44      	ldr	r2, [pc, #272]	; (8103e3c <HAL_ADC_ConfigChannel+0x678>)
 8103d2a:	4293      	cmp	r3, r2
 8103d2c:	d004      	beq.n	8103d38 <HAL_ADC_ConfigChannel+0x574>
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	681b      	ldr	r3, [r3, #0]
 8103d32:	4a43      	ldr	r2, [pc, #268]	; (8103e40 <HAL_ADC_ConfigChannel+0x67c>)
 8103d34:	4293      	cmp	r3, r2
 8103d36:	d101      	bne.n	8103d3c <HAL_ADC_ConfigChannel+0x578>
 8103d38:	4a42      	ldr	r2, [pc, #264]	; (8103e44 <HAL_ADC_ConfigChannel+0x680>)
 8103d3a:	e000      	b.n	8103d3e <HAL_ADC_ConfigChannel+0x57a>
 8103d3c:	4a42      	ldr	r2, [pc, #264]	; (8103e48 <HAL_ADC_ConfigChannel+0x684>)
 8103d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103d44:	4619      	mov	r1, r3
 8103d46:	4610      	mov	r0, r2
 8103d48:	f7ff fa21 	bl	810318e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103d4c:	4b41      	ldr	r3, [pc, #260]	; (8103e54 <HAL_ADC_ConfigChannel+0x690>)
 8103d4e:	681b      	ldr	r3, [r3, #0]
 8103d50:	099b      	lsrs	r3, r3, #6
 8103d52:	4a41      	ldr	r2, [pc, #260]	; (8103e58 <HAL_ADC_ConfigChannel+0x694>)
 8103d54:	fba2 2303 	umull	r2, r3, r2, r3
 8103d58:	099b      	lsrs	r3, r3, #6
 8103d5a:	3301      	adds	r3, #1
 8103d5c:	005b      	lsls	r3, r3, #1
 8103d5e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103d60:	e002      	b.n	8103d68 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8103d62:	68bb      	ldr	r3, [r7, #8]
 8103d64:	3b01      	subs	r3, #1
 8103d66:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103d68:	68bb      	ldr	r3, [r7, #8]
 8103d6a:	2b00      	cmp	r3, #0
 8103d6c:	d1f9      	bne.n	8103d62 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103d6e:	e05a      	b.n	8103e26 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103d70:	683b      	ldr	r3, [r7, #0]
 8103d72:	681b      	ldr	r3, [r3, #0]
 8103d74:	4a39      	ldr	r2, [pc, #228]	; (8103e5c <HAL_ADC_ConfigChannel+0x698>)
 8103d76:	4293      	cmp	r3, r2
 8103d78:	d11e      	bne.n	8103db8 <HAL_ADC_ConfigChannel+0x5f4>
 8103d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103d80:	2b00      	cmp	r3, #0
 8103d82:	d119      	bne.n	8103db8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	681b      	ldr	r3, [r3, #0]
 8103d88:	4a30      	ldr	r2, [pc, #192]	; (8103e4c <HAL_ADC_ConfigChannel+0x688>)
 8103d8a:	4293      	cmp	r3, r2
 8103d8c:	d14b      	bne.n	8103e26 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	681b      	ldr	r3, [r3, #0]
 8103d92:	4a2a      	ldr	r2, [pc, #168]	; (8103e3c <HAL_ADC_ConfigChannel+0x678>)
 8103d94:	4293      	cmp	r3, r2
 8103d96:	d004      	beq.n	8103da2 <HAL_ADC_ConfigChannel+0x5de>
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	4a28      	ldr	r2, [pc, #160]	; (8103e40 <HAL_ADC_ConfigChannel+0x67c>)
 8103d9e:	4293      	cmp	r3, r2
 8103da0:	d101      	bne.n	8103da6 <HAL_ADC_ConfigChannel+0x5e2>
 8103da2:	4a28      	ldr	r2, [pc, #160]	; (8103e44 <HAL_ADC_ConfigChannel+0x680>)
 8103da4:	e000      	b.n	8103da8 <HAL_ADC_ConfigChannel+0x5e4>
 8103da6:	4a28      	ldr	r2, [pc, #160]	; (8103e48 <HAL_ADC_ConfigChannel+0x684>)
 8103da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103dae:	4619      	mov	r1, r3
 8103db0:	4610      	mov	r0, r2
 8103db2:	f7ff f9ec 	bl	810318e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103db6:	e036      	b.n	8103e26 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103db8:	683b      	ldr	r3, [r7, #0]
 8103dba:	681b      	ldr	r3, [r3, #0]
 8103dbc:	4a28      	ldr	r2, [pc, #160]	; (8103e60 <HAL_ADC_ConfigChannel+0x69c>)
 8103dbe:	4293      	cmp	r3, r2
 8103dc0:	d131      	bne.n	8103e26 <HAL_ADC_ConfigChannel+0x662>
 8103dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103dc8:	2b00      	cmp	r3, #0
 8103dca:	d12c      	bne.n	8103e26 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	681b      	ldr	r3, [r3, #0]
 8103dd0:	4a1e      	ldr	r2, [pc, #120]	; (8103e4c <HAL_ADC_ConfigChannel+0x688>)
 8103dd2:	4293      	cmp	r3, r2
 8103dd4:	d127      	bne.n	8103e26 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	681b      	ldr	r3, [r3, #0]
 8103dda:	4a18      	ldr	r2, [pc, #96]	; (8103e3c <HAL_ADC_ConfigChannel+0x678>)
 8103ddc:	4293      	cmp	r3, r2
 8103dde:	d004      	beq.n	8103dea <HAL_ADC_ConfigChannel+0x626>
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	4a16      	ldr	r2, [pc, #88]	; (8103e40 <HAL_ADC_ConfigChannel+0x67c>)
 8103de6:	4293      	cmp	r3, r2
 8103de8:	d101      	bne.n	8103dee <HAL_ADC_ConfigChannel+0x62a>
 8103dea:	4a16      	ldr	r2, [pc, #88]	; (8103e44 <HAL_ADC_ConfigChannel+0x680>)
 8103dec:	e000      	b.n	8103df0 <HAL_ADC_ConfigChannel+0x62c>
 8103dee:	4a16      	ldr	r2, [pc, #88]	; (8103e48 <HAL_ADC_ConfigChannel+0x684>)
 8103df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103df2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103df6:	4619      	mov	r1, r3
 8103df8:	4610      	mov	r0, r2
 8103dfa:	f7ff f9c8 	bl	810318e <LL_ADC_SetCommonPathInternalCh>
 8103dfe:	e012      	b.n	8103e26 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103e04:	f043 0220 	orr.w	r2, r3, #32
 8103e08:	687b      	ldr	r3, [r7, #4]
 8103e0a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103e0c:	2301      	movs	r3, #1
 8103e0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8103e12:	e008      	b.n	8103e26 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103e18:	f043 0220 	orr.w	r2, r3, #32
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103e20:	2301      	movs	r3, #1
 8103e22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103e26:	687b      	ldr	r3, [r7, #4]
 8103e28:	2200      	movs	r2, #0
 8103e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103e2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103e32:	4618      	mov	r0, r3
 8103e34:	3784      	adds	r7, #132	; 0x84
 8103e36:	46bd      	mov	sp, r7
 8103e38:	bd90      	pop	{r4, r7, pc}
 8103e3a:	bf00      	nop
 8103e3c:	40022000 	.word	0x40022000
 8103e40:	40022100 	.word	0x40022100
 8103e44:	40022300 	.word	0x40022300
 8103e48:	58026300 	.word	0x58026300
 8103e4c:	58026000 	.word	0x58026000
 8103e50:	cb840000 	.word	0xcb840000
 8103e54:	10000000 	.word	0x10000000
 8103e58:	053e2d63 	.word	0x053e2d63
 8103e5c:	c7520000 	.word	0xc7520000
 8103e60:	cfb80000 	.word	0xcfb80000

08103e64 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103e64:	b580      	push	{r7, lr}
 8103e66:	b084      	sub	sp, #16
 8103e68:	af00      	add	r7, sp, #0
 8103e6a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	4a79      	ldr	r2, [pc, #484]	; (8104058 <ADC_ConfigureBoostMode+0x1f4>)
 8103e72:	4293      	cmp	r3, r2
 8103e74:	d004      	beq.n	8103e80 <ADC_ConfigureBoostMode+0x1c>
 8103e76:	687b      	ldr	r3, [r7, #4]
 8103e78:	681b      	ldr	r3, [r3, #0]
 8103e7a:	4a78      	ldr	r2, [pc, #480]	; (810405c <ADC_ConfigureBoostMode+0x1f8>)
 8103e7c:	4293      	cmp	r3, r2
 8103e7e:	d109      	bne.n	8103e94 <ADC_ConfigureBoostMode+0x30>
 8103e80:	4b77      	ldr	r3, [pc, #476]	; (8104060 <ADC_ConfigureBoostMode+0x1fc>)
 8103e82:	689b      	ldr	r3, [r3, #8]
 8103e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103e88:	2b00      	cmp	r3, #0
 8103e8a:	bf14      	ite	ne
 8103e8c:	2301      	movne	r3, #1
 8103e8e:	2300      	moveq	r3, #0
 8103e90:	b2db      	uxtb	r3, r3
 8103e92:	e008      	b.n	8103ea6 <ADC_ConfigureBoostMode+0x42>
 8103e94:	4b73      	ldr	r3, [pc, #460]	; (8104064 <ADC_ConfigureBoostMode+0x200>)
 8103e96:	689b      	ldr	r3, [r3, #8]
 8103e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103e9c:	2b00      	cmp	r3, #0
 8103e9e:	bf14      	ite	ne
 8103ea0:	2301      	movne	r3, #1
 8103ea2:	2300      	moveq	r3, #0
 8103ea4:	b2db      	uxtb	r3, r3
 8103ea6:	2b00      	cmp	r3, #0
 8103ea8:	d01c      	beq.n	8103ee4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103eaa:	f001 fd27 	bl	81058fc <HAL_RCC_GetHCLKFreq>
 8103eae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103eb0:	687b      	ldr	r3, [r7, #4]
 8103eb2:	685b      	ldr	r3, [r3, #4]
 8103eb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103eb8:	d010      	beq.n	8103edc <ADC_ConfigureBoostMode+0x78>
 8103eba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103ebe:	d871      	bhi.n	8103fa4 <ADC_ConfigureBoostMode+0x140>
 8103ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103ec4:	d002      	beq.n	8103ecc <ADC_ConfigureBoostMode+0x68>
 8103ec6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103eca:	d16b      	bne.n	8103fa4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103ecc:	687b      	ldr	r3, [r7, #4]
 8103ece:	685b      	ldr	r3, [r3, #4]
 8103ed0:	0c1b      	lsrs	r3, r3, #16
 8103ed2:	68fa      	ldr	r2, [r7, #12]
 8103ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8103ed8:	60fb      	str	r3, [r7, #12]
        break;
 8103eda:	e066      	b.n	8103faa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103edc:	68fb      	ldr	r3, [r7, #12]
 8103ede:	089b      	lsrs	r3, r3, #2
 8103ee0:	60fb      	str	r3, [r7, #12]
        break;
 8103ee2:	e062      	b.n	8103faa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103ee4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103ee8:	f002 fcac 	bl	8106844 <HAL_RCCEx_GetPeriphCLKFreq>
 8103eec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103eee:	687b      	ldr	r3, [r7, #4]
 8103ef0:	685b      	ldr	r3, [r3, #4]
 8103ef2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103ef6:	d051      	beq.n	8103f9c <ADC_ConfigureBoostMode+0x138>
 8103ef8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103efc:	d854      	bhi.n	8103fa8 <ADC_ConfigureBoostMode+0x144>
 8103efe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103f02:	d047      	beq.n	8103f94 <ADC_ConfigureBoostMode+0x130>
 8103f04:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103f08:	d84e      	bhi.n	8103fa8 <ADC_ConfigureBoostMode+0x144>
 8103f0a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103f0e:	d03d      	beq.n	8103f8c <ADC_ConfigureBoostMode+0x128>
 8103f10:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103f14:	d848      	bhi.n	8103fa8 <ADC_ConfigureBoostMode+0x144>
 8103f16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103f1a:	d033      	beq.n	8103f84 <ADC_ConfigureBoostMode+0x120>
 8103f1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103f20:	d842      	bhi.n	8103fa8 <ADC_ConfigureBoostMode+0x144>
 8103f22:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103f26:	d029      	beq.n	8103f7c <ADC_ConfigureBoostMode+0x118>
 8103f28:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103f2c:	d83c      	bhi.n	8103fa8 <ADC_ConfigureBoostMode+0x144>
 8103f2e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103f32:	d01a      	beq.n	8103f6a <ADC_ConfigureBoostMode+0x106>
 8103f34:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103f38:	d836      	bhi.n	8103fa8 <ADC_ConfigureBoostMode+0x144>
 8103f3a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103f3e:	d014      	beq.n	8103f6a <ADC_ConfigureBoostMode+0x106>
 8103f40:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103f44:	d830      	bhi.n	8103fa8 <ADC_ConfigureBoostMode+0x144>
 8103f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103f4a:	d00e      	beq.n	8103f6a <ADC_ConfigureBoostMode+0x106>
 8103f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103f50:	d82a      	bhi.n	8103fa8 <ADC_ConfigureBoostMode+0x144>
 8103f52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103f56:	d008      	beq.n	8103f6a <ADC_ConfigureBoostMode+0x106>
 8103f58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103f5c:	d824      	bhi.n	8103fa8 <ADC_ConfigureBoostMode+0x144>
 8103f5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103f62:	d002      	beq.n	8103f6a <ADC_ConfigureBoostMode+0x106>
 8103f64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8103f68:	d11e      	bne.n	8103fa8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	685b      	ldr	r3, [r3, #4]
 8103f6e:	0c9b      	lsrs	r3, r3, #18
 8103f70:	005b      	lsls	r3, r3, #1
 8103f72:	68fa      	ldr	r2, [r7, #12]
 8103f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8103f78:	60fb      	str	r3, [r7, #12]
        break;
 8103f7a:	e016      	b.n	8103faa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103f7c:	68fb      	ldr	r3, [r7, #12]
 8103f7e:	091b      	lsrs	r3, r3, #4
 8103f80:	60fb      	str	r3, [r7, #12]
        break;
 8103f82:	e012      	b.n	8103faa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103f84:	68fb      	ldr	r3, [r7, #12]
 8103f86:	095b      	lsrs	r3, r3, #5
 8103f88:	60fb      	str	r3, [r7, #12]
        break;
 8103f8a:	e00e      	b.n	8103faa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103f8c:	68fb      	ldr	r3, [r7, #12]
 8103f8e:	099b      	lsrs	r3, r3, #6
 8103f90:	60fb      	str	r3, [r7, #12]
        break;
 8103f92:	e00a      	b.n	8103faa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103f94:	68fb      	ldr	r3, [r7, #12]
 8103f96:	09db      	lsrs	r3, r3, #7
 8103f98:	60fb      	str	r3, [r7, #12]
        break;
 8103f9a:	e006      	b.n	8103faa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103f9c:	68fb      	ldr	r3, [r7, #12]
 8103f9e:	0a1b      	lsrs	r3, r3, #8
 8103fa0:	60fb      	str	r3, [r7, #12]
        break;
 8103fa2:	e002      	b.n	8103faa <ADC_ConfigureBoostMode+0x146>
        break;
 8103fa4:	bf00      	nop
 8103fa6:	e000      	b.n	8103faa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8103fa8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103faa:	f7ff f8d1 	bl	8103150 <HAL_GetREVID>
 8103fae:	4603      	mov	r3, r0
 8103fb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8103fb4:	4293      	cmp	r3, r2
 8103fb6:	d815      	bhi.n	8103fe4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8103fb8:	68fb      	ldr	r3, [r7, #12]
 8103fba:	4a2b      	ldr	r2, [pc, #172]	; (8104068 <ADC_ConfigureBoostMode+0x204>)
 8103fbc:	4293      	cmp	r3, r2
 8103fbe:	d908      	bls.n	8103fd2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	681b      	ldr	r3, [r3, #0]
 8103fc4:	689a      	ldr	r2, [r3, #8]
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	681b      	ldr	r3, [r3, #0]
 8103fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103fce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103fd0:	e03e      	b.n	8104050 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103fd2:	687b      	ldr	r3, [r7, #4]
 8103fd4:	681b      	ldr	r3, [r3, #0]
 8103fd6:	689a      	ldr	r2, [r3, #8]
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	681b      	ldr	r3, [r3, #0]
 8103fdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103fe0:	609a      	str	r2, [r3, #8]
}
 8103fe2:	e035      	b.n	8104050 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103fe4:	68fb      	ldr	r3, [r7, #12]
 8103fe6:	085b      	lsrs	r3, r3, #1
 8103fe8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103fea:	68fb      	ldr	r3, [r7, #12]
 8103fec:	4a1f      	ldr	r2, [pc, #124]	; (810406c <ADC_ConfigureBoostMode+0x208>)
 8103fee:	4293      	cmp	r3, r2
 8103ff0:	d808      	bhi.n	8104004 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	689a      	ldr	r2, [r3, #8]
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8104000:	609a      	str	r2, [r3, #8]
}
 8104002:	e025      	b.n	8104050 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8104004:	68fb      	ldr	r3, [r7, #12]
 8104006:	4a1a      	ldr	r2, [pc, #104]	; (8104070 <ADC_ConfigureBoostMode+0x20c>)
 8104008:	4293      	cmp	r3, r2
 810400a:	d80a      	bhi.n	8104022 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 810400c:	687b      	ldr	r3, [r7, #4]
 810400e:	681b      	ldr	r3, [r3, #0]
 8104010:	689b      	ldr	r3, [r3, #8]
 8104012:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104016:	687b      	ldr	r3, [r7, #4]
 8104018:	681b      	ldr	r3, [r3, #0]
 810401a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810401e:	609a      	str	r2, [r3, #8]
}
 8104020:	e016      	b.n	8104050 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8104022:	68fb      	ldr	r3, [r7, #12]
 8104024:	4a13      	ldr	r2, [pc, #76]	; (8104074 <ADC_ConfigureBoostMode+0x210>)
 8104026:	4293      	cmp	r3, r2
 8104028:	d80a      	bhi.n	8104040 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	681b      	ldr	r3, [r3, #0]
 810402e:	689b      	ldr	r3, [r3, #8]
 8104030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	681b      	ldr	r3, [r3, #0]
 8104038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810403c:	609a      	str	r2, [r3, #8]
}
 810403e:	e007      	b.n	8104050 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	681b      	ldr	r3, [r3, #0]
 8104044:	689a      	ldr	r2, [r3, #8]
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 810404e:	609a      	str	r2, [r3, #8]
}
 8104050:	bf00      	nop
 8104052:	3710      	adds	r7, #16
 8104054:	46bd      	mov	sp, r7
 8104056:	bd80      	pop	{r7, pc}
 8104058:	40022000 	.word	0x40022000
 810405c:	40022100 	.word	0x40022100
 8104060:	40022300 	.word	0x40022300
 8104064:	58026300 	.word	0x58026300
 8104068:	01312d00 	.word	0x01312d00
 810406c:	005f5e10 	.word	0x005f5e10
 8104070:	00bebc20 	.word	0x00bebc20
 8104074:	017d7840 	.word	0x017d7840

08104078 <LL_ADC_IsEnabled>:
{
 8104078:	b480      	push	{r7}
 810407a:	b083      	sub	sp, #12
 810407c:	af00      	add	r7, sp, #0
 810407e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8104080:	687b      	ldr	r3, [r7, #4]
 8104082:	689b      	ldr	r3, [r3, #8]
 8104084:	f003 0301 	and.w	r3, r3, #1
 8104088:	2b01      	cmp	r3, #1
 810408a:	d101      	bne.n	8104090 <LL_ADC_IsEnabled+0x18>
 810408c:	2301      	movs	r3, #1
 810408e:	e000      	b.n	8104092 <LL_ADC_IsEnabled+0x1a>
 8104090:	2300      	movs	r3, #0
}
 8104092:	4618      	mov	r0, r3
 8104094:	370c      	adds	r7, #12
 8104096:	46bd      	mov	sp, r7
 8104098:	f85d 7b04 	ldr.w	r7, [sp], #4
 810409c:	4770      	bx	lr

0810409e <LL_ADC_REG_IsConversionOngoing>:
{
 810409e:	b480      	push	{r7}
 81040a0:	b083      	sub	sp, #12
 81040a2:	af00      	add	r7, sp, #0
 81040a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	689b      	ldr	r3, [r3, #8]
 81040aa:	f003 0304 	and.w	r3, r3, #4
 81040ae:	2b04      	cmp	r3, #4
 81040b0:	d101      	bne.n	81040b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 81040b2:	2301      	movs	r3, #1
 81040b4:	e000      	b.n	81040b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81040b6:	2300      	movs	r3, #0
}
 81040b8:	4618      	mov	r0, r3
 81040ba:	370c      	adds	r7, #12
 81040bc:	46bd      	mov	sp, r7
 81040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040c2:	4770      	bx	lr

081040c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 81040c4:	b590      	push	{r4, r7, lr}
 81040c6:	b09f      	sub	sp, #124	; 0x7c
 81040c8:	af00      	add	r7, sp, #0
 81040ca:	6078      	str	r0, [r7, #4]
 81040cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81040ce:	2300      	movs	r3, #0
 81040d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81040da:	2b01      	cmp	r3, #1
 81040dc:	d101      	bne.n	81040e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81040de:	2302      	movs	r3, #2
 81040e0:	e0c4      	b.n	810426c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	2201      	movs	r2, #1
 81040e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81040ea:	2300      	movs	r3, #0
 81040ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81040ee:	2300      	movs	r3, #0
 81040f0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	681b      	ldr	r3, [r3, #0]
 81040f6:	4a5f      	ldr	r2, [pc, #380]	; (8104274 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81040f8:	4293      	cmp	r3, r2
 81040fa:	d102      	bne.n	8104102 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81040fc:	4b5e      	ldr	r3, [pc, #376]	; (8104278 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81040fe:	60bb      	str	r3, [r7, #8]
 8104100:	e001      	b.n	8104106 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8104102:	2300      	movs	r3, #0
 8104104:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8104106:	68bb      	ldr	r3, [r7, #8]
 8104108:	2b00      	cmp	r3, #0
 810410a:	d10b      	bne.n	8104124 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104110:	f043 0220 	orr.w	r2, r3, #32
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	2200      	movs	r2, #0
 810411c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8104120:	2301      	movs	r3, #1
 8104122:	e0a3      	b.n	810426c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8104124:	68bb      	ldr	r3, [r7, #8]
 8104126:	4618      	mov	r0, r3
 8104128:	f7ff ffb9 	bl	810409e <LL_ADC_REG_IsConversionOngoing>
 810412c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	681b      	ldr	r3, [r3, #0]
 8104132:	4618      	mov	r0, r3
 8104134:	f7ff ffb3 	bl	810409e <LL_ADC_REG_IsConversionOngoing>
 8104138:	4603      	mov	r3, r0
 810413a:	2b00      	cmp	r3, #0
 810413c:	f040 8085 	bne.w	810424a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8104140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104142:	2b00      	cmp	r3, #0
 8104144:	f040 8081 	bne.w	810424a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	681b      	ldr	r3, [r3, #0]
 810414c:	4a49      	ldr	r2, [pc, #292]	; (8104274 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810414e:	4293      	cmp	r3, r2
 8104150:	d004      	beq.n	810415c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8104152:	687b      	ldr	r3, [r7, #4]
 8104154:	681b      	ldr	r3, [r3, #0]
 8104156:	4a48      	ldr	r2, [pc, #288]	; (8104278 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104158:	4293      	cmp	r3, r2
 810415a:	d101      	bne.n	8104160 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 810415c:	4b47      	ldr	r3, [pc, #284]	; (810427c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 810415e:	e000      	b.n	8104162 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8104160:	4b47      	ldr	r3, [pc, #284]	; (8104280 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8104162:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104164:	683b      	ldr	r3, [r7, #0]
 8104166:	681b      	ldr	r3, [r3, #0]
 8104168:	2b00      	cmp	r3, #0
 810416a:	d03b      	beq.n	81041e4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 810416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810416e:	689b      	ldr	r3, [r3, #8]
 8104170:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8104174:	683b      	ldr	r3, [r7, #0]
 8104176:	685b      	ldr	r3, [r3, #4]
 8104178:	431a      	orrs	r2, r3
 810417a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810417c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810417e:	687b      	ldr	r3, [r7, #4]
 8104180:	681b      	ldr	r3, [r3, #0]
 8104182:	4a3c      	ldr	r2, [pc, #240]	; (8104274 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104184:	4293      	cmp	r3, r2
 8104186:	d004      	beq.n	8104192 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8104188:	687b      	ldr	r3, [r7, #4]
 810418a:	681b      	ldr	r3, [r3, #0]
 810418c:	4a3a      	ldr	r2, [pc, #232]	; (8104278 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810418e:	4293      	cmp	r3, r2
 8104190:	d10e      	bne.n	81041b0 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8104192:	4838      	ldr	r0, [pc, #224]	; (8104274 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104194:	f7ff ff70 	bl	8104078 <LL_ADC_IsEnabled>
 8104198:	4604      	mov	r4, r0
 810419a:	4837      	ldr	r0, [pc, #220]	; (8104278 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810419c:	f7ff ff6c 	bl	8104078 <LL_ADC_IsEnabled>
 81041a0:	4603      	mov	r3, r0
 81041a2:	4323      	orrs	r3, r4
 81041a4:	2b00      	cmp	r3, #0
 81041a6:	bf0c      	ite	eq
 81041a8:	2301      	moveq	r3, #1
 81041aa:	2300      	movne	r3, #0
 81041ac:	b2db      	uxtb	r3, r3
 81041ae:	e008      	b.n	81041c2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 81041b0:	4834      	ldr	r0, [pc, #208]	; (8104284 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81041b2:	f7ff ff61 	bl	8104078 <LL_ADC_IsEnabled>
 81041b6:	4603      	mov	r3, r0
 81041b8:	2b00      	cmp	r3, #0
 81041ba:	bf0c      	ite	eq
 81041bc:	2301      	moveq	r3, #1
 81041be:	2300      	movne	r3, #0
 81041c0:	b2db      	uxtb	r3, r3
 81041c2:	2b00      	cmp	r3, #0
 81041c4:	d04b      	beq.n	810425e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 81041c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81041c8:	689b      	ldr	r3, [r3, #8]
 81041ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81041ce:	f023 030f 	bic.w	r3, r3, #15
 81041d2:	683a      	ldr	r2, [r7, #0]
 81041d4:	6811      	ldr	r1, [r2, #0]
 81041d6:	683a      	ldr	r2, [r7, #0]
 81041d8:	6892      	ldr	r2, [r2, #8]
 81041da:	430a      	orrs	r2, r1
 81041dc:	431a      	orrs	r2, r3
 81041de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81041e0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81041e2:	e03c      	b.n	810425e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81041e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81041e6:	689b      	ldr	r3, [r3, #8]
 81041e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81041ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81041ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	681b      	ldr	r3, [r3, #0]
 81041f4:	4a1f      	ldr	r2, [pc, #124]	; (8104274 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81041f6:	4293      	cmp	r3, r2
 81041f8:	d004      	beq.n	8104204 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	4a1e      	ldr	r2, [pc, #120]	; (8104278 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104200:	4293      	cmp	r3, r2
 8104202:	d10e      	bne.n	8104222 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8104204:	481b      	ldr	r0, [pc, #108]	; (8104274 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104206:	f7ff ff37 	bl	8104078 <LL_ADC_IsEnabled>
 810420a:	4604      	mov	r4, r0
 810420c:	481a      	ldr	r0, [pc, #104]	; (8104278 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810420e:	f7ff ff33 	bl	8104078 <LL_ADC_IsEnabled>
 8104212:	4603      	mov	r3, r0
 8104214:	4323      	orrs	r3, r4
 8104216:	2b00      	cmp	r3, #0
 8104218:	bf0c      	ite	eq
 810421a:	2301      	moveq	r3, #1
 810421c:	2300      	movne	r3, #0
 810421e:	b2db      	uxtb	r3, r3
 8104220:	e008      	b.n	8104234 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8104222:	4818      	ldr	r0, [pc, #96]	; (8104284 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104224:	f7ff ff28 	bl	8104078 <LL_ADC_IsEnabled>
 8104228:	4603      	mov	r3, r0
 810422a:	2b00      	cmp	r3, #0
 810422c:	bf0c      	ite	eq
 810422e:	2301      	moveq	r3, #1
 8104230:	2300      	movne	r3, #0
 8104232:	b2db      	uxtb	r3, r3
 8104234:	2b00      	cmp	r3, #0
 8104236:	d012      	beq.n	810425e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8104238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810423a:	689b      	ldr	r3, [r3, #8]
 810423c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8104240:	f023 030f 	bic.w	r3, r3, #15
 8104244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8104246:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104248:	e009      	b.n	810425e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810424e:	f043 0220 	orr.w	r2, r3, #32
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8104256:	2301      	movs	r3, #1
 8104258:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 810425c:	e000      	b.n	8104260 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810425e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8104260:	687b      	ldr	r3, [r7, #4]
 8104262:	2200      	movs	r2, #0
 8104264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8104268:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 810426c:	4618      	mov	r0, r3
 810426e:	377c      	adds	r7, #124	; 0x7c
 8104270:	46bd      	mov	sp, r7
 8104272:	bd90      	pop	{r4, r7, pc}
 8104274:	40022000 	.word	0x40022000
 8104278:	40022100 	.word	0x40022100
 810427c:	40022300 	.word	0x40022300
 8104280:	58026300 	.word	0x58026300
 8104284:	58026000 	.word	0x58026000

08104288 <__NVIC_SetPriorityGrouping>:
{
 8104288:	b480      	push	{r7}
 810428a:	b085      	sub	sp, #20
 810428c:	af00      	add	r7, sp, #0
 810428e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104290:	687b      	ldr	r3, [r7, #4]
 8104292:	f003 0307 	and.w	r3, r3, #7
 8104296:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8104298:	4b0c      	ldr	r3, [pc, #48]	; (81042cc <__NVIC_SetPriorityGrouping+0x44>)
 810429a:	68db      	ldr	r3, [r3, #12]
 810429c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810429e:	68ba      	ldr	r2, [r7, #8]
 81042a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81042a4:	4013      	ands	r3, r2
 81042a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81042a8:	68fb      	ldr	r3, [r7, #12]
 81042aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81042ac:	68bb      	ldr	r3, [r7, #8]
 81042ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81042b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81042b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81042b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81042ba:	4a04      	ldr	r2, [pc, #16]	; (81042cc <__NVIC_SetPriorityGrouping+0x44>)
 81042bc:	68bb      	ldr	r3, [r7, #8]
 81042be:	60d3      	str	r3, [r2, #12]
}
 81042c0:	bf00      	nop
 81042c2:	3714      	adds	r7, #20
 81042c4:	46bd      	mov	sp, r7
 81042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042ca:	4770      	bx	lr
 81042cc:	e000ed00 	.word	0xe000ed00

081042d0 <__NVIC_GetPriorityGrouping>:
{
 81042d0:	b480      	push	{r7}
 81042d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81042d4:	4b04      	ldr	r3, [pc, #16]	; (81042e8 <__NVIC_GetPriorityGrouping+0x18>)
 81042d6:	68db      	ldr	r3, [r3, #12]
 81042d8:	0a1b      	lsrs	r3, r3, #8
 81042da:	f003 0307 	and.w	r3, r3, #7
}
 81042de:	4618      	mov	r0, r3
 81042e0:	46bd      	mov	sp, r7
 81042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042e6:	4770      	bx	lr
 81042e8:	e000ed00 	.word	0xe000ed00

081042ec <__NVIC_EnableIRQ>:
{
 81042ec:	b480      	push	{r7}
 81042ee:	b083      	sub	sp, #12
 81042f0:	af00      	add	r7, sp, #0
 81042f2:	4603      	mov	r3, r0
 81042f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81042f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81042fa:	2b00      	cmp	r3, #0
 81042fc:	db0b      	blt.n	8104316 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81042fe:	88fb      	ldrh	r3, [r7, #6]
 8104300:	f003 021f 	and.w	r2, r3, #31
 8104304:	4907      	ldr	r1, [pc, #28]	; (8104324 <__NVIC_EnableIRQ+0x38>)
 8104306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810430a:	095b      	lsrs	r3, r3, #5
 810430c:	2001      	movs	r0, #1
 810430e:	fa00 f202 	lsl.w	r2, r0, r2
 8104312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8104316:	bf00      	nop
 8104318:	370c      	adds	r7, #12
 810431a:	46bd      	mov	sp, r7
 810431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104320:	4770      	bx	lr
 8104322:	bf00      	nop
 8104324:	e000e100 	.word	0xe000e100

08104328 <__NVIC_SetPriority>:
{
 8104328:	b480      	push	{r7}
 810432a:	b083      	sub	sp, #12
 810432c:	af00      	add	r7, sp, #0
 810432e:	4603      	mov	r3, r0
 8104330:	6039      	str	r1, [r7, #0]
 8104332:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104338:	2b00      	cmp	r3, #0
 810433a:	db0a      	blt.n	8104352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810433c:	683b      	ldr	r3, [r7, #0]
 810433e:	b2da      	uxtb	r2, r3
 8104340:	490c      	ldr	r1, [pc, #48]	; (8104374 <__NVIC_SetPriority+0x4c>)
 8104342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104346:	0112      	lsls	r2, r2, #4
 8104348:	b2d2      	uxtb	r2, r2
 810434a:	440b      	add	r3, r1
 810434c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8104350:	e00a      	b.n	8104368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104352:	683b      	ldr	r3, [r7, #0]
 8104354:	b2da      	uxtb	r2, r3
 8104356:	4908      	ldr	r1, [pc, #32]	; (8104378 <__NVIC_SetPriority+0x50>)
 8104358:	88fb      	ldrh	r3, [r7, #6]
 810435a:	f003 030f 	and.w	r3, r3, #15
 810435e:	3b04      	subs	r3, #4
 8104360:	0112      	lsls	r2, r2, #4
 8104362:	b2d2      	uxtb	r2, r2
 8104364:	440b      	add	r3, r1
 8104366:	761a      	strb	r2, [r3, #24]
}
 8104368:	bf00      	nop
 810436a:	370c      	adds	r7, #12
 810436c:	46bd      	mov	sp, r7
 810436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104372:	4770      	bx	lr
 8104374:	e000e100 	.word	0xe000e100
 8104378:	e000ed00 	.word	0xe000ed00

0810437c <NVIC_EncodePriority>:
{
 810437c:	b480      	push	{r7}
 810437e:	b089      	sub	sp, #36	; 0x24
 8104380:	af00      	add	r7, sp, #0
 8104382:	60f8      	str	r0, [r7, #12]
 8104384:	60b9      	str	r1, [r7, #8]
 8104386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8104388:	68fb      	ldr	r3, [r7, #12]
 810438a:	f003 0307 	and.w	r3, r3, #7
 810438e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104390:	69fb      	ldr	r3, [r7, #28]
 8104392:	f1c3 0307 	rsb	r3, r3, #7
 8104396:	2b04      	cmp	r3, #4
 8104398:	bf28      	it	cs
 810439a:	2304      	movcs	r3, #4
 810439c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810439e:	69fb      	ldr	r3, [r7, #28]
 81043a0:	3304      	adds	r3, #4
 81043a2:	2b06      	cmp	r3, #6
 81043a4:	d902      	bls.n	81043ac <NVIC_EncodePriority+0x30>
 81043a6:	69fb      	ldr	r3, [r7, #28]
 81043a8:	3b03      	subs	r3, #3
 81043aa:	e000      	b.n	81043ae <NVIC_EncodePriority+0x32>
 81043ac:	2300      	movs	r3, #0
 81043ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81043b0:	f04f 32ff 	mov.w	r2, #4294967295
 81043b4:	69bb      	ldr	r3, [r7, #24]
 81043b6:	fa02 f303 	lsl.w	r3, r2, r3
 81043ba:	43da      	mvns	r2, r3
 81043bc:	68bb      	ldr	r3, [r7, #8]
 81043be:	401a      	ands	r2, r3
 81043c0:	697b      	ldr	r3, [r7, #20]
 81043c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81043c4:	f04f 31ff 	mov.w	r1, #4294967295
 81043c8:	697b      	ldr	r3, [r7, #20]
 81043ca:	fa01 f303 	lsl.w	r3, r1, r3
 81043ce:	43d9      	mvns	r1, r3
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81043d4:	4313      	orrs	r3, r2
}
 81043d6:	4618      	mov	r0, r3
 81043d8:	3724      	adds	r7, #36	; 0x24
 81043da:	46bd      	mov	sp, r7
 81043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043e0:	4770      	bx	lr
	...

081043e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81043e4:	b580      	push	{r7, lr}
 81043e6:	b082      	sub	sp, #8
 81043e8:	af00      	add	r7, sp, #0
 81043ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	3b01      	subs	r3, #1
 81043f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81043f4:	d301      	bcc.n	81043fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81043f6:	2301      	movs	r3, #1
 81043f8:	e00f      	b.n	810441a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81043fa:	4a0a      	ldr	r2, [pc, #40]	; (8104424 <SysTick_Config+0x40>)
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	3b01      	subs	r3, #1
 8104400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8104402:	210f      	movs	r1, #15
 8104404:	f04f 30ff 	mov.w	r0, #4294967295
 8104408:	f7ff ff8e 	bl	8104328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810440c:	4b05      	ldr	r3, [pc, #20]	; (8104424 <SysTick_Config+0x40>)
 810440e:	2200      	movs	r2, #0
 8104410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8104412:	4b04      	ldr	r3, [pc, #16]	; (8104424 <SysTick_Config+0x40>)
 8104414:	2207      	movs	r2, #7
 8104416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8104418:	2300      	movs	r3, #0
}
 810441a:	4618      	mov	r0, r3
 810441c:	3708      	adds	r7, #8
 810441e:	46bd      	mov	sp, r7
 8104420:	bd80      	pop	{r7, pc}
 8104422:	bf00      	nop
 8104424:	e000e010 	.word	0xe000e010

08104428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104428:	b580      	push	{r7, lr}
 810442a:	b082      	sub	sp, #8
 810442c:	af00      	add	r7, sp, #0
 810442e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8104430:	6878      	ldr	r0, [r7, #4]
 8104432:	f7ff ff29 	bl	8104288 <__NVIC_SetPriorityGrouping>
}
 8104436:	bf00      	nop
 8104438:	3708      	adds	r7, #8
 810443a:	46bd      	mov	sp, r7
 810443c:	bd80      	pop	{r7, pc}

0810443e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810443e:	b580      	push	{r7, lr}
 8104440:	b086      	sub	sp, #24
 8104442:	af00      	add	r7, sp, #0
 8104444:	4603      	mov	r3, r0
 8104446:	60b9      	str	r1, [r7, #8]
 8104448:	607a      	str	r2, [r7, #4]
 810444a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810444c:	f7ff ff40 	bl	81042d0 <__NVIC_GetPriorityGrouping>
 8104450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8104452:	687a      	ldr	r2, [r7, #4]
 8104454:	68b9      	ldr	r1, [r7, #8]
 8104456:	6978      	ldr	r0, [r7, #20]
 8104458:	f7ff ff90 	bl	810437c <NVIC_EncodePriority>
 810445c:	4602      	mov	r2, r0
 810445e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8104462:	4611      	mov	r1, r2
 8104464:	4618      	mov	r0, r3
 8104466:	f7ff ff5f 	bl	8104328 <__NVIC_SetPriority>
}
 810446a:	bf00      	nop
 810446c:	3718      	adds	r7, #24
 810446e:	46bd      	mov	sp, r7
 8104470:	bd80      	pop	{r7, pc}

08104472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104472:	b580      	push	{r7, lr}
 8104474:	b082      	sub	sp, #8
 8104476:	af00      	add	r7, sp, #0
 8104478:	4603      	mov	r3, r0
 810447a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810447c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104480:	4618      	mov	r0, r3
 8104482:	f7ff ff33 	bl	81042ec <__NVIC_EnableIRQ>
}
 8104486:	bf00      	nop
 8104488:	3708      	adds	r7, #8
 810448a:	46bd      	mov	sp, r7
 810448c:	bd80      	pop	{r7, pc}

0810448e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810448e:	b580      	push	{r7, lr}
 8104490:	b082      	sub	sp, #8
 8104492:	af00      	add	r7, sp, #0
 8104494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8104496:	6878      	ldr	r0, [r7, #4]
 8104498:	f7ff ffa4 	bl	81043e4 <SysTick_Config>
 810449c:	4603      	mov	r3, r0
}
 810449e:	4618      	mov	r0, r3
 81044a0:	3708      	adds	r7, #8
 81044a2:	46bd      	mov	sp, r7
 81044a4:	bd80      	pop	{r7, pc}
	...

081044a8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81044a8:	b480      	push	{r7}
 81044aa:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81044ac:	4b07      	ldr	r3, [pc, #28]	; (81044cc <HAL_GetCurrentCPUID+0x24>)
 81044ae:	681b      	ldr	r3, [r3, #0]
 81044b0:	091b      	lsrs	r3, r3, #4
 81044b2:	f003 030f 	and.w	r3, r3, #15
 81044b6:	2b07      	cmp	r3, #7
 81044b8:	d101      	bne.n	81044be <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81044ba:	2303      	movs	r3, #3
 81044bc:	e000      	b.n	81044c0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81044be:	2301      	movs	r3, #1
  }
}
 81044c0:	4618      	mov	r0, r3
 81044c2:	46bd      	mov	sp, r7
 81044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044c8:	4770      	bx	lr
 81044ca:	bf00      	nop
 81044cc:	e000ed00 	.word	0xe000ed00

081044d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81044d0:	b480      	push	{r7}
 81044d2:	b089      	sub	sp, #36	; 0x24
 81044d4:	af00      	add	r7, sp, #0
 81044d6:	6078      	str	r0, [r7, #4]
 81044d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81044da:	2300      	movs	r3, #0
 81044dc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81044de:	4b89      	ldr	r3, [pc, #548]	; (8104704 <HAL_GPIO_Init+0x234>)
 81044e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81044e2:	e194      	b.n	810480e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81044e4:	683b      	ldr	r3, [r7, #0]
 81044e6:	681a      	ldr	r2, [r3, #0]
 81044e8:	2101      	movs	r1, #1
 81044ea:	69fb      	ldr	r3, [r7, #28]
 81044ec:	fa01 f303 	lsl.w	r3, r1, r3
 81044f0:	4013      	ands	r3, r2
 81044f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81044f4:	693b      	ldr	r3, [r7, #16]
 81044f6:	2b00      	cmp	r3, #0
 81044f8:	f000 8186 	beq.w	8104808 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81044fc:	683b      	ldr	r3, [r7, #0]
 81044fe:	685b      	ldr	r3, [r3, #4]
 8104500:	f003 0303 	and.w	r3, r3, #3
 8104504:	2b01      	cmp	r3, #1
 8104506:	d005      	beq.n	8104514 <HAL_GPIO_Init+0x44>
 8104508:	683b      	ldr	r3, [r7, #0]
 810450a:	685b      	ldr	r3, [r3, #4]
 810450c:	f003 0303 	and.w	r3, r3, #3
 8104510:	2b02      	cmp	r3, #2
 8104512:	d130      	bne.n	8104576 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	689b      	ldr	r3, [r3, #8]
 8104518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810451a:	69fb      	ldr	r3, [r7, #28]
 810451c:	005b      	lsls	r3, r3, #1
 810451e:	2203      	movs	r2, #3
 8104520:	fa02 f303 	lsl.w	r3, r2, r3
 8104524:	43db      	mvns	r3, r3
 8104526:	69ba      	ldr	r2, [r7, #24]
 8104528:	4013      	ands	r3, r2
 810452a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810452c:	683b      	ldr	r3, [r7, #0]
 810452e:	68da      	ldr	r2, [r3, #12]
 8104530:	69fb      	ldr	r3, [r7, #28]
 8104532:	005b      	lsls	r3, r3, #1
 8104534:	fa02 f303 	lsl.w	r3, r2, r3
 8104538:	69ba      	ldr	r2, [r7, #24]
 810453a:	4313      	orrs	r3, r2
 810453c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	69ba      	ldr	r2, [r7, #24]
 8104542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	685b      	ldr	r3, [r3, #4]
 8104548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810454a:	2201      	movs	r2, #1
 810454c:	69fb      	ldr	r3, [r7, #28]
 810454e:	fa02 f303 	lsl.w	r3, r2, r3
 8104552:	43db      	mvns	r3, r3
 8104554:	69ba      	ldr	r2, [r7, #24]
 8104556:	4013      	ands	r3, r2
 8104558:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810455a:	683b      	ldr	r3, [r7, #0]
 810455c:	685b      	ldr	r3, [r3, #4]
 810455e:	091b      	lsrs	r3, r3, #4
 8104560:	f003 0201 	and.w	r2, r3, #1
 8104564:	69fb      	ldr	r3, [r7, #28]
 8104566:	fa02 f303 	lsl.w	r3, r2, r3
 810456a:	69ba      	ldr	r2, [r7, #24]
 810456c:	4313      	orrs	r3, r2
 810456e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104570:	687b      	ldr	r3, [r7, #4]
 8104572:	69ba      	ldr	r2, [r7, #24]
 8104574:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8104576:	683b      	ldr	r3, [r7, #0]
 8104578:	685b      	ldr	r3, [r3, #4]
 810457a:	f003 0303 	and.w	r3, r3, #3
 810457e:	2b03      	cmp	r3, #3
 8104580:	d017      	beq.n	81045b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	68db      	ldr	r3, [r3, #12]
 8104586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104588:	69fb      	ldr	r3, [r7, #28]
 810458a:	005b      	lsls	r3, r3, #1
 810458c:	2203      	movs	r2, #3
 810458e:	fa02 f303 	lsl.w	r3, r2, r3
 8104592:	43db      	mvns	r3, r3
 8104594:	69ba      	ldr	r2, [r7, #24]
 8104596:	4013      	ands	r3, r2
 8104598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810459a:	683b      	ldr	r3, [r7, #0]
 810459c:	689a      	ldr	r2, [r3, #8]
 810459e:	69fb      	ldr	r3, [r7, #28]
 81045a0:	005b      	lsls	r3, r3, #1
 81045a2:	fa02 f303 	lsl.w	r3, r2, r3
 81045a6:	69ba      	ldr	r2, [r7, #24]
 81045a8:	4313      	orrs	r3, r2
 81045aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81045ac:	687b      	ldr	r3, [r7, #4]
 81045ae:	69ba      	ldr	r2, [r7, #24]
 81045b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81045b2:	683b      	ldr	r3, [r7, #0]
 81045b4:	685b      	ldr	r3, [r3, #4]
 81045b6:	f003 0303 	and.w	r3, r3, #3
 81045ba:	2b02      	cmp	r3, #2
 81045bc:	d123      	bne.n	8104606 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81045be:	69fb      	ldr	r3, [r7, #28]
 81045c0:	08da      	lsrs	r2, r3, #3
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	3208      	adds	r2, #8
 81045c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81045ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81045cc:	69fb      	ldr	r3, [r7, #28]
 81045ce:	f003 0307 	and.w	r3, r3, #7
 81045d2:	009b      	lsls	r3, r3, #2
 81045d4:	220f      	movs	r2, #15
 81045d6:	fa02 f303 	lsl.w	r3, r2, r3
 81045da:	43db      	mvns	r3, r3
 81045dc:	69ba      	ldr	r2, [r7, #24]
 81045de:	4013      	ands	r3, r2
 81045e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81045e2:	683b      	ldr	r3, [r7, #0]
 81045e4:	691a      	ldr	r2, [r3, #16]
 81045e6:	69fb      	ldr	r3, [r7, #28]
 81045e8:	f003 0307 	and.w	r3, r3, #7
 81045ec:	009b      	lsls	r3, r3, #2
 81045ee:	fa02 f303 	lsl.w	r3, r2, r3
 81045f2:	69ba      	ldr	r2, [r7, #24]
 81045f4:	4313      	orrs	r3, r2
 81045f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81045f8:	69fb      	ldr	r3, [r7, #28]
 81045fa:	08da      	lsrs	r2, r3, #3
 81045fc:	687b      	ldr	r3, [r7, #4]
 81045fe:	3208      	adds	r2, #8
 8104600:	69b9      	ldr	r1, [r7, #24]
 8104602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	681b      	ldr	r3, [r3, #0]
 810460a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810460c:	69fb      	ldr	r3, [r7, #28]
 810460e:	005b      	lsls	r3, r3, #1
 8104610:	2203      	movs	r2, #3
 8104612:	fa02 f303 	lsl.w	r3, r2, r3
 8104616:	43db      	mvns	r3, r3
 8104618:	69ba      	ldr	r2, [r7, #24]
 810461a:	4013      	ands	r3, r2
 810461c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810461e:	683b      	ldr	r3, [r7, #0]
 8104620:	685b      	ldr	r3, [r3, #4]
 8104622:	f003 0203 	and.w	r2, r3, #3
 8104626:	69fb      	ldr	r3, [r7, #28]
 8104628:	005b      	lsls	r3, r3, #1
 810462a:	fa02 f303 	lsl.w	r3, r2, r3
 810462e:	69ba      	ldr	r2, [r7, #24]
 8104630:	4313      	orrs	r3, r2
 8104632:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104634:	687b      	ldr	r3, [r7, #4]
 8104636:	69ba      	ldr	r2, [r7, #24]
 8104638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810463a:	683b      	ldr	r3, [r7, #0]
 810463c:	685b      	ldr	r3, [r3, #4]
 810463e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8104642:	2b00      	cmp	r3, #0
 8104644:	f000 80e0 	beq.w	8104808 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104648:	4b2f      	ldr	r3, [pc, #188]	; (8104708 <HAL_GPIO_Init+0x238>)
 810464a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810464e:	4a2e      	ldr	r2, [pc, #184]	; (8104708 <HAL_GPIO_Init+0x238>)
 8104650:	f043 0302 	orr.w	r3, r3, #2
 8104654:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104658:	4b2b      	ldr	r3, [pc, #172]	; (8104708 <HAL_GPIO_Init+0x238>)
 810465a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810465e:	f003 0302 	and.w	r3, r3, #2
 8104662:	60fb      	str	r3, [r7, #12]
 8104664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104666:	4a29      	ldr	r2, [pc, #164]	; (810470c <HAL_GPIO_Init+0x23c>)
 8104668:	69fb      	ldr	r3, [r7, #28]
 810466a:	089b      	lsrs	r3, r3, #2
 810466c:	3302      	adds	r3, #2
 810466e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104674:	69fb      	ldr	r3, [r7, #28]
 8104676:	f003 0303 	and.w	r3, r3, #3
 810467a:	009b      	lsls	r3, r3, #2
 810467c:	220f      	movs	r2, #15
 810467e:	fa02 f303 	lsl.w	r3, r2, r3
 8104682:	43db      	mvns	r3, r3
 8104684:	69ba      	ldr	r2, [r7, #24]
 8104686:	4013      	ands	r3, r2
 8104688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	4a20      	ldr	r2, [pc, #128]	; (8104710 <HAL_GPIO_Init+0x240>)
 810468e:	4293      	cmp	r3, r2
 8104690:	d052      	beq.n	8104738 <HAL_GPIO_Init+0x268>
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	4a1f      	ldr	r2, [pc, #124]	; (8104714 <HAL_GPIO_Init+0x244>)
 8104696:	4293      	cmp	r3, r2
 8104698:	d031      	beq.n	81046fe <HAL_GPIO_Init+0x22e>
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	4a1e      	ldr	r2, [pc, #120]	; (8104718 <HAL_GPIO_Init+0x248>)
 810469e:	4293      	cmp	r3, r2
 81046a0:	d02b      	beq.n	81046fa <HAL_GPIO_Init+0x22a>
 81046a2:	687b      	ldr	r3, [r7, #4]
 81046a4:	4a1d      	ldr	r2, [pc, #116]	; (810471c <HAL_GPIO_Init+0x24c>)
 81046a6:	4293      	cmp	r3, r2
 81046a8:	d025      	beq.n	81046f6 <HAL_GPIO_Init+0x226>
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	4a1c      	ldr	r2, [pc, #112]	; (8104720 <HAL_GPIO_Init+0x250>)
 81046ae:	4293      	cmp	r3, r2
 81046b0:	d01f      	beq.n	81046f2 <HAL_GPIO_Init+0x222>
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	4a1b      	ldr	r2, [pc, #108]	; (8104724 <HAL_GPIO_Init+0x254>)
 81046b6:	4293      	cmp	r3, r2
 81046b8:	d019      	beq.n	81046ee <HAL_GPIO_Init+0x21e>
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	4a1a      	ldr	r2, [pc, #104]	; (8104728 <HAL_GPIO_Init+0x258>)
 81046be:	4293      	cmp	r3, r2
 81046c0:	d013      	beq.n	81046ea <HAL_GPIO_Init+0x21a>
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	4a19      	ldr	r2, [pc, #100]	; (810472c <HAL_GPIO_Init+0x25c>)
 81046c6:	4293      	cmp	r3, r2
 81046c8:	d00d      	beq.n	81046e6 <HAL_GPIO_Init+0x216>
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	4a18      	ldr	r2, [pc, #96]	; (8104730 <HAL_GPIO_Init+0x260>)
 81046ce:	4293      	cmp	r3, r2
 81046d0:	d007      	beq.n	81046e2 <HAL_GPIO_Init+0x212>
 81046d2:	687b      	ldr	r3, [r7, #4]
 81046d4:	4a17      	ldr	r2, [pc, #92]	; (8104734 <HAL_GPIO_Init+0x264>)
 81046d6:	4293      	cmp	r3, r2
 81046d8:	d101      	bne.n	81046de <HAL_GPIO_Init+0x20e>
 81046da:	2309      	movs	r3, #9
 81046dc:	e02d      	b.n	810473a <HAL_GPIO_Init+0x26a>
 81046de:	230a      	movs	r3, #10
 81046e0:	e02b      	b.n	810473a <HAL_GPIO_Init+0x26a>
 81046e2:	2308      	movs	r3, #8
 81046e4:	e029      	b.n	810473a <HAL_GPIO_Init+0x26a>
 81046e6:	2307      	movs	r3, #7
 81046e8:	e027      	b.n	810473a <HAL_GPIO_Init+0x26a>
 81046ea:	2306      	movs	r3, #6
 81046ec:	e025      	b.n	810473a <HAL_GPIO_Init+0x26a>
 81046ee:	2305      	movs	r3, #5
 81046f0:	e023      	b.n	810473a <HAL_GPIO_Init+0x26a>
 81046f2:	2304      	movs	r3, #4
 81046f4:	e021      	b.n	810473a <HAL_GPIO_Init+0x26a>
 81046f6:	2303      	movs	r3, #3
 81046f8:	e01f      	b.n	810473a <HAL_GPIO_Init+0x26a>
 81046fa:	2302      	movs	r3, #2
 81046fc:	e01d      	b.n	810473a <HAL_GPIO_Init+0x26a>
 81046fe:	2301      	movs	r3, #1
 8104700:	e01b      	b.n	810473a <HAL_GPIO_Init+0x26a>
 8104702:	bf00      	nop
 8104704:	580000c0 	.word	0x580000c0
 8104708:	58024400 	.word	0x58024400
 810470c:	58000400 	.word	0x58000400
 8104710:	58020000 	.word	0x58020000
 8104714:	58020400 	.word	0x58020400
 8104718:	58020800 	.word	0x58020800
 810471c:	58020c00 	.word	0x58020c00
 8104720:	58021000 	.word	0x58021000
 8104724:	58021400 	.word	0x58021400
 8104728:	58021800 	.word	0x58021800
 810472c:	58021c00 	.word	0x58021c00
 8104730:	58022000 	.word	0x58022000
 8104734:	58022400 	.word	0x58022400
 8104738:	2300      	movs	r3, #0
 810473a:	69fa      	ldr	r2, [r7, #28]
 810473c:	f002 0203 	and.w	r2, r2, #3
 8104740:	0092      	lsls	r2, r2, #2
 8104742:	4093      	lsls	r3, r2
 8104744:	69ba      	ldr	r2, [r7, #24]
 8104746:	4313      	orrs	r3, r2
 8104748:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810474a:	4938      	ldr	r1, [pc, #224]	; (810482c <HAL_GPIO_Init+0x35c>)
 810474c:	69fb      	ldr	r3, [r7, #28]
 810474e:	089b      	lsrs	r3, r3, #2
 8104750:	3302      	adds	r3, #2
 8104752:	69ba      	ldr	r2, [r7, #24]
 8104754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810475c:	681b      	ldr	r3, [r3, #0]
 810475e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104760:	693b      	ldr	r3, [r7, #16]
 8104762:	43db      	mvns	r3, r3
 8104764:	69ba      	ldr	r2, [r7, #24]
 8104766:	4013      	ands	r3, r2
 8104768:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810476a:	683b      	ldr	r3, [r7, #0]
 810476c:	685b      	ldr	r3, [r3, #4]
 810476e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104772:	2b00      	cmp	r3, #0
 8104774:	d003      	beq.n	810477e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8104776:	69ba      	ldr	r2, [r7, #24]
 8104778:	693b      	ldr	r3, [r7, #16]
 810477a:	4313      	orrs	r3, r2
 810477c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810477e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104782:	69bb      	ldr	r3, [r7, #24]
 8104784:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810478a:	685b      	ldr	r3, [r3, #4]
 810478c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810478e:	693b      	ldr	r3, [r7, #16]
 8104790:	43db      	mvns	r3, r3
 8104792:	69ba      	ldr	r2, [r7, #24]
 8104794:	4013      	ands	r3, r2
 8104796:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104798:	683b      	ldr	r3, [r7, #0]
 810479a:	685b      	ldr	r3, [r3, #4]
 810479c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81047a0:	2b00      	cmp	r3, #0
 81047a2:	d003      	beq.n	81047ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81047a4:	69ba      	ldr	r2, [r7, #24]
 81047a6:	693b      	ldr	r3, [r7, #16]
 81047a8:	4313      	orrs	r3, r2
 81047aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81047ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81047b0:	69bb      	ldr	r3, [r7, #24]
 81047b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81047b4:	697b      	ldr	r3, [r7, #20]
 81047b6:	685b      	ldr	r3, [r3, #4]
 81047b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81047ba:	693b      	ldr	r3, [r7, #16]
 81047bc:	43db      	mvns	r3, r3
 81047be:	69ba      	ldr	r2, [r7, #24]
 81047c0:	4013      	ands	r3, r2
 81047c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81047c4:	683b      	ldr	r3, [r7, #0]
 81047c6:	685b      	ldr	r3, [r3, #4]
 81047c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81047cc:	2b00      	cmp	r3, #0
 81047ce:	d003      	beq.n	81047d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81047d0:	69ba      	ldr	r2, [r7, #24]
 81047d2:	693b      	ldr	r3, [r7, #16]
 81047d4:	4313      	orrs	r3, r2
 81047d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81047d8:	697b      	ldr	r3, [r7, #20]
 81047da:	69ba      	ldr	r2, [r7, #24]
 81047dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81047de:	697b      	ldr	r3, [r7, #20]
 81047e0:	681b      	ldr	r3, [r3, #0]
 81047e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81047e4:	693b      	ldr	r3, [r7, #16]
 81047e6:	43db      	mvns	r3, r3
 81047e8:	69ba      	ldr	r2, [r7, #24]
 81047ea:	4013      	ands	r3, r2
 81047ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81047ee:	683b      	ldr	r3, [r7, #0]
 81047f0:	685b      	ldr	r3, [r3, #4]
 81047f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81047f6:	2b00      	cmp	r3, #0
 81047f8:	d003      	beq.n	8104802 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81047fa:	69ba      	ldr	r2, [r7, #24]
 81047fc:	693b      	ldr	r3, [r7, #16]
 81047fe:	4313      	orrs	r3, r2
 8104800:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104802:	697b      	ldr	r3, [r7, #20]
 8104804:	69ba      	ldr	r2, [r7, #24]
 8104806:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8104808:	69fb      	ldr	r3, [r7, #28]
 810480a:	3301      	adds	r3, #1
 810480c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810480e:	683b      	ldr	r3, [r7, #0]
 8104810:	681a      	ldr	r2, [r3, #0]
 8104812:	69fb      	ldr	r3, [r7, #28]
 8104814:	fa22 f303 	lsr.w	r3, r2, r3
 8104818:	2b00      	cmp	r3, #0
 810481a:	f47f ae63 	bne.w	81044e4 <HAL_GPIO_Init+0x14>
  }
}
 810481e:	bf00      	nop
 8104820:	bf00      	nop
 8104822:	3724      	adds	r7, #36	; 0x24
 8104824:	46bd      	mov	sp, r7
 8104826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810482a:	4770      	bx	lr
 810482c:	58000400 	.word	0x58000400

08104830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8104830:	b480      	push	{r7}
 8104832:	b085      	sub	sp, #20
 8104834:	af00      	add	r7, sp, #0
 8104836:	6078      	str	r0, [r7, #4]
 8104838:	460b      	mov	r3, r1
 810483a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	691a      	ldr	r2, [r3, #16]
 8104840:	887b      	ldrh	r3, [r7, #2]
 8104842:	4013      	ands	r3, r2
 8104844:	2b00      	cmp	r3, #0
 8104846:	d002      	beq.n	810484e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8104848:	2301      	movs	r3, #1
 810484a:	73fb      	strb	r3, [r7, #15]
 810484c:	e001      	b.n	8104852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 810484e:	2300      	movs	r3, #0
 8104850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8104852:	7bfb      	ldrb	r3, [r7, #15]
}
 8104854:	4618      	mov	r0, r3
 8104856:	3714      	adds	r7, #20
 8104858:	46bd      	mov	sp, r7
 810485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810485e:	4770      	bx	lr

08104860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104860:	b480      	push	{r7}
 8104862:	b083      	sub	sp, #12
 8104864:	af00      	add	r7, sp, #0
 8104866:	6078      	str	r0, [r7, #4]
 8104868:	460b      	mov	r3, r1
 810486a:	807b      	strh	r3, [r7, #2]
 810486c:	4613      	mov	r3, r2
 810486e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104870:	787b      	ldrb	r3, [r7, #1]
 8104872:	2b00      	cmp	r3, #0
 8104874:	d003      	beq.n	810487e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8104876:	887a      	ldrh	r2, [r7, #2]
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 810487c:	e003      	b.n	8104886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810487e:	887b      	ldrh	r3, [r7, #2]
 8104880:	041a      	lsls	r2, r3, #16
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	619a      	str	r2, [r3, #24]
}
 8104886:	bf00      	nop
 8104888:	370c      	adds	r7, #12
 810488a:	46bd      	mov	sp, r7
 810488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104890:	4770      	bx	lr
	...

08104894 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104894:	b480      	push	{r7}
 8104896:	b083      	sub	sp, #12
 8104898:	af00      	add	r7, sp, #0
 810489a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810489c:	4b05      	ldr	r3, [pc, #20]	; (81048b4 <HAL_HSEM_ActivateNotification+0x20>)
 810489e:	681a      	ldr	r2, [r3, #0]
 81048a0:	4904      	ldr	r1, [pc, #16]	; (81048b4 <HAL_HSEM_ActivateNotification+0x20>)
 81048a2:	687b      	ldr	r3, [r7, #4]
 81048a4:	4313      	orrs	r3, r2
 81048a6:	600b      	str	r3, [r1, #0]
#endif
}
 81048a8:	bf00      	nop
 81048aa:	370c      	adds	r7, #12
 81048ac:	46bd      	mov	sp, r7
 81048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048b2:	4770      	bx	lr
 81048b4:	58026510 	.word	0x58026510

081048b8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81048b8:	b580      	push	{r7, lr}
 81048ba:	b082      	sub	sp, #8
 81048bc:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81048be:	4b0a      	ldr	r3, [pc, #40]	; (81048e8 <HAL_HSEM_IRQHandler+0x30>)
 81048c0:	68db      	ldr	r3, [r3, #12]
 81048c2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81048c4:	4b08      	ldr	r3, [pc, #32]	; (81048e8 <HAL_HSEM_IRQHandler+0x30>)
 81048c6:	681a      	ldr	r2, [r3, #0]
 81048c8:	687b      	ldr	r3, [r7, #4]
 81048ca:	43db      	mvns	r3, r3
 81048cc:	4906      	ldr	r1, [pc, #24]	; (81048e8 <HAL_HSEM_IRQHandler+0x30>)
 81048ce:	4013      	ands	r3, r2
 81048d0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81048d2:	4a05      	ldr	r2, [pc, #20]	; (81048e8 <HAL_HSEM_IRQHandler+0x30>)
 81048d4:	687b      	ldr	r3, [r7, #4]
 81048d6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81048d8:	6878      	ldr	r0, [r7, #4]
 81048da:	f000 f807 	bl	81048ec <HAL_HSEM_FreeCallback>
}
 81048de:	bf00      	nop
 81048e0:	3708      	adds	r7, #8
 81048e2:	46bd      	mov	sp, r7
 81048e4:	bd80      	pop	{r7, pc}
 81048e6:	bf00      	nop
 81048e8:	58026510 	.word	0x58026510

081048ec <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81048ec:	b480      	push	{r7}
 81048ee:	b083      	sub	sp, #12
 81048f0:	af00      	add	r7, sp, #0
 81048f2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 81048f4:	bf00      	nop
 81048f6:	370c      	adds	r7, #12
 81048f8:	46bd      	mov	sp, r7
 81048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048fe:	4770      	bx	lr

08104900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104900:	b580      	push	{r7, lr}
 8104902:	b082      	sub	sp, #8
 8104904:	af00      	add	r7, sp, #0
 8104906:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	2b00      	cmp	r3, #0
 810490c:	d101      	bne.n	8104912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810490e:	2301      	movs	r3, #1
 8104910:	e081      	b.n	8104a16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104912:	687b      	ldr	r3, [r7, #4]
 8104914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104918:	b2db      	uxtb	r3, r3
 810491a:	2b00      	cmp	r3, #0
 810491c:	d106      	bne.n	810492c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810491e:	687b      	ldr	r3, [r7, #4]
 8104920:	2200      	movs	r2, #0
 8104922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104926:	6878      	ldr	r0, [r7, #4]
 8104928:	f7fd fd50 	bl	81023cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	2224      	movs	r2, #36	; 0x24
 8104930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	681a      	ldr	r2, [r3, #0]
 810493a:	687b      	ldr	r3, [r7, #4]
 810493c:	681b      	ldr	r3, [r3, #0]
 810493e:	f022 0201 	bic.w	r2, r2, #1
 8104942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	685a      	ldr	r2, [r3, #4]
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104950:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104952:	687b      	ldr	r3, [r7, #4]
 8104954:	681b      	ldr	r3, [r3, #0]
 8104956:	689a      	ldr	r2, [r3, #8]
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	681b      	ldr	r3, [r3, #0]
 810495c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104960:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	68db      	ldr	r3, [r3, #12]
 8104966:	2b01      	cmp	r3, #1
 8104968:	d107      	bne.n	810497a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810496a:	687b      	ldr	r3, [r7, #4]
 810496c:	689a      	ldr	r2, [r3, #8]
 810496e:	687b      	ldr	r3, [r7, #4]
 8104970:	681b      	ldr	r3, [r3, #0]
 8104972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104976:	609a      	str	r2, [r3, #8]
 8104978:	e006      	b.n	8104988 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810497a:	687b      	ldr	r3, [r7, #4]
 810497c:	689a      	ldr	r2, [r3, #8]
 810497e:	687b      	ldr	r3, [r7, #4]
 8104980:	681b      	ldr	r3, [r3, #0]
 8104982:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8104986:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104988:	687b      	ldr	r3, [r7, #4]
 810498a:	68db      	ldr	r3, [r3, #12]
 810498c:	2b02      	cmp	r3, #2
 810498e:	d104      	bne.n	810499a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8104990:	687b      	ldr	r3, [r7, #4]
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104998:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810499a:	687b      	ldr	r3, [r7, #4]
 810499c:	681b      	ldr	r3, [r3, #0]
 810499e:	685b      	ldr	r3, [r3, #4]
 81049a0:	687a      	ldr	r2, [r7, #4]
 81049a2:	6812      	ldr	r2, [r2, #0]
 81049a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81049a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81049ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81049ae:	687b      	ldr	r3, [r7, #4]
 81049b0:	681b      	ldr	r3, [r3, #0]
 81049b2:	68da      	ldr	r2, [r3, #12]
 81049b4:	687b      	ldr	r3, [r7, #4]
 81049b6:	681b      	ldr	r3, [r3, #0]
 81049b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81049bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81049be:	687b      	ldr	r3, [r7, #4]
 81049c0:	691a      	ldr	r2, [r3, #16]
 81049c2:	687b      	ldr	r3, [r7, #4]
 81049c4:	695b      	ldr	r3, [r3, #20]
 81049c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81049ca:	687b      	ldr	r3, [r7, #4]
 81049cc:	699b      	ldr	r3, [r3, #24]
 81049ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	681b      	ldr	r3, [r3, #0]
 81049d4:	430a      	orrs	r2, r1
 81049d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81049d8:	687b      	ldr	r3, [r7, #4]
 81049da:	69d9      	ldr	r1, [r3, #28]
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	6a1a      	ldr	r2, [r3, #32]
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	430a      	orrs	r2, r1
 81049e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81049e8:	687b      	ldr	r3, [r7, #4]
 81049ea:	681b      	ldr	r3, [r3, #0]
 81049ec:	681a      	ldr	r2, [r3, #0]
 81049ee:	687b      	ldr	r3, [r7, #4]
 81049f0:	681b      	ldr	r3, [r3, #0]
 81049f2:	f042 0201 	orr.w	r2, r2, #1
 81049f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81049f8:	687b      	ldr	r3, [r7, #4]
 81049fa:	2200      	movs	r2, #0
 81049fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81049fe:	687b      	ldr	r3, [r7, #4]
 8104a00:	2220      	movs	r2, #32
 8104a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104a06:	687b      	ldr	r3, [r7, #4]
 8104a08:	2200      	movs	r2, #0
 8104a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104a0c:	687b      	ldr	r3, [r7, #4]
 8104a0e:	2200      	movs	r2, #0
 8104a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8104a14:	2300      	movs	r3, #0
}
 8104a16:	4618      	mov	r0, r3
 8104a18:	3708      	adds	r7, #8
 8104a1a:	46bd      	mov	sp, r7
 8104a1c:	bd80      	pop	{r7, pc}
	...

08104a20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104a20:	b580      	push	{r7, lr}
 8104a22:	b088      	sub	sp, #32
 8104a24:	af02      	add	r7, sp, #8
 8104a26:	60f8      	str	r0, [r7, #12]
 8104a28:	4608      	mov	r0, r1
 8104a2a:	4611      	mov	r1, r2
 8104a2c:	461a      	mov	r2, r3
 8104a2e:	4603      	mov	r3, r0
 8104a30:	817b      	strh	r3, [r7, #10]
 8104a32:	460b      	mov	r3, r1
 8104a34:	813b      	strh	r3, [r7, #8]
 8104a36:	4613      	mov	r3, r2
 8104a38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104a3a:	68fb      	ldr	r3, [r7, #12]
 8104a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104a40:	b2db      	uxtb	r3, r3
 8104a42:	2b20      	cmp	r3, #32
 8104a44:	f040 80f9 	bne.w	8104c3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8104a48:	6a3b      	ldr	r3, [r7, #32]
 8104a4a:	2b00      	cmp	r3, #0
 8104a4c:	d002      	beq.n	8104a54 <HAL_I2C_Mem_Write+0x34>
 8104a4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8104a50:	2b00      	cmp	r3, #0
 8104a52:	d105      	bne.n	8104a60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104a54:	68fb      	ldr	r3, [r7, #12]
 8104a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104a5a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104a5c:	2301      	movs	r3, #1
 8104a5e:	e0ed      	b.n	8104c3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104a60:	68fb      	ldr	r3, [r7, #12]
 8104a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104a66:	2b01      	cmp	r3, #1
 8104a68:	d101      	bne.n	8104a6e <HAL_I2C_Mem_Write+0x4e>
 8104a6a:	2302      	movs	r3, #2
 8104a6c:	e0e6      	b.n	8104c3c <HAL_I2C_Mem_Write+0x21c>
 8104a6e:	68fb      	ldr	r3, [r7, #12]
 8104a70:	2201      	movs	r2, #1
 8104a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104a76:	f7fe fb3b 	bl	81030f0 <HAL_GetTick>
 8104a7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104a7c:	697b      	ldr	r3, [r7, #20]
 8104a7e:	9300      	str	r3, [sp, #0]
 8104a80:	2319      	movs	r3, #25
 8104a82:	2201      	movs	r2, #1
 8104a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104a88:	68f8      	ldr	r0, [r7, #12]
 8104a8a:	f000 fac3 	bl	8105014 <I2C_WaitOnFlagUntilTimeout>
 8104a8e:	4603      	mov	r3, r0
 8104a90:	2b00      	cmp	r3, #0
 8104a92:	d001      	beq.n	8104a98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8104a94:	2301      	movs	r3, #1
 8104a96:	e0d1      	b.n	8104c3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8104a98:	68fb      	ldr	r3, [r7, #12]
 8104a9a:	2221      	movs	r2, #33	; 0x21
 8104a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104aa0:	68fb      	ldr	r3, [r7, #12]
 8104aa2:	2240      	movs	r2, #64	; 0x40
 8104aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104aa8:	68fb      	ldr	r3, [r7, #12]
 8104aaa:	2200      	movs	r2, #0
 8104aac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104aae:	68fb      	ldr	r3, [r7, #12]
 8104ab0:	6a3a      	ldr	r2, [r7, #32]
 8104ab2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104ab4:	68fb      	ldr	r3, [r7, #12]
 8104ab6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104aba:	68fb      	ldr	r3, [r7, #12]
 8104abc:	2200      	movs	r2, #0
 8104abe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104ac0:	88f8      	ldrh	r0, [r7, #6]
 8104ac2:	893a      	ldrh	r2, [r7, #8]
 8104ac4:	8979      	ldrh	r1, [r7, #10]
 8104ac6:	697b      	ldr	r3, [r7, #20]
 8104ac8:	9301      	str	r3, [sp, #4]
 8104aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104acc:	9300      	str	r3, [sp, #0]
 8104ace:	4603      	mov	r3, r0
 8104ad0:	68f8      	ldr	r0, [r7, #12]
 8104ad2:	f000 f9d3 	bl	8104e7c <I2C_RequestMemoryWrite>
 8104ad6:	4603      	mov	r3, r0
 8104ad8:	2b00      	cmp	r3, #0
 8104ada:	d005      	beq.n	8104ae8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104adc:	68fb      	ldr	r3, [r7, #12]
 8104ade:	2200      	movs	r2, #0
 8104ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104ae4:	2301      	movs	r3, #1
 8104ae6:	e0a9      	b.n	8104c3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104ae8:	68fb      	ldr	r3, [r7, #12]
 8104aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104aec:	b29b      	uxth	r3, r3
 8104aee:	2bff      	cmp	r3, #255	; 0xff
 8104af0:	d90e      	bls.n	8104b10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104af2:	68fb      	ldr	r3, [r7, #12]
 8104af4:	22ff      	movs	r2, #255	; 0xff
 8104af6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8104af8:	68fb      	ldr	r3, [r7, #12]
 8104afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104afc:	b2da      	uxtb	r2, r3
 8104afe:	8979      	ldrh	r1, [r7, #10]
 8104b00:	2300      	movs	r3, #0
 8104b02:	9300      	str	r3, [sp, #0]
 8104b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104b08:	68f8      	ldr	r0, [r7, #12]
 8104b0a:	f000 fc2b 	bl	8105364 <I2C_TransferConfig>
 8104b0e:	e00f      	b.n	8104b30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104b10:	68fb      	ldr	r3, [r7, #12]
 8104b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104b14:	b29a      	uxth	r2, r3
 8104b16:	68fb      	ldr	r3, [r7, #12]
 8104b18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8104b1a:	68fb      	ldr	r3, [r7, #12]
 8104b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104b1e:	b2da      	uxtb	r2, r3
 8104b20:	8979      	ldrh	r1, [r7, #10]
 8104b22:	2300      	movs	r3, #0
 8104b24:	9300      	str	r3, [sp, #0]
 8104b26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104b2a:	68f8      	ldr	r0, [r7, #12]
 8104b2c:	f000 fc1a 	bl	8105364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104b30:	697a      	ldr	r2, [r7, #20]
 8104b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104b34:	68f8      	ldr	r0, [r7, #12]
 8104b36:	f000 faad 	bl	8105094 <I2C_WaitOnTXISFlagUntilTimeout>
 8104b3a:	4603      	mov	r3, r0
 8104b3c:	2b00      	cmp	r3, #0
 8104b3e:	d001      	beq.n	8104b44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8104b40:	2301      	movs	r3, #1
 8104b42:	e07b      	b.n	8104c3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8104b44:	68fb      	ldr	r3, [r7, #12]
 8104b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b48:	781a      	ldrb	r2, [r3, #0]
 8104b4a:	68fb      	ldr	r3, [r7, #12]
 8104b4c:	681b      	ldr	r3, [r3, #0]
 8104b4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104b50:	68fb      	ldr	r3, [r7, #12]
 8104b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b54:	1c5a      	adds	r2, r3, #1
 8104b56:	68fb      	ldr	r3, [r7, #12]
 8104b58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8104b5a:	68fb      	ldr	r3, [r7, #12]
 8104b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104b5e:	b29b      	uxth	r3, r3
 8104b60:	3b01      	subs	r3, #1
 8104b62:	b29a      	uxth	r2, r3
 8104b64:	68fb      	ldr	r3, [r7, #12]
 8104b66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8104b68:	68fb      	ldr	r3, [r7, #12]
 8104b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104b6c:	3b01      	subs	r3, #1
 8104b6e:	b29a      	uxth	r2, r3
 8104b70:	68fb      	ldr	r3, [r7, #12]
 8104b72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104b74:	68fb      	ldr	r3, [r7, #12]
 8104b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104b78:	b29b      	uxth	r3, r3
 8104b7a:	2b00      	cmp	r3, #0
 8104b7c:	d034      	beq.n	8104be8 <HAL_I2C_Mem_Write+0x1c8>
 8104b7e:	68fb      	ldr	r3, [r7, #12]
 8104b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104b82:	2b00      	cmp	r3, #0
 8104b84:	d130      	bne.n	8104be8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104b86:	697b      	ldr	r3, [r7, #20]
 8104b88:	9300      	str	r3, [sp, #0]
 8104b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104b8c:	2200      	movs	r2, #0
 8104b8e:	2180      	movs	r1, #128	; 0x80
 8104b90:	68f8      	ldr	r0, [r7, #12]
 8104b92:	f000 fa3f 	bl	8105014 <I2C_WaitOnFlagUntilTimeout>
 8104b96:	4603      	mov	r3, r0
 8104b98:	2b00      	cmp	r3, #0
 8104b9a:	d001      	beq.n	8104ba0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8104b9c:	2301      	movs	r3, #1
 8104b9e:	e04d      	b.n	8104c3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104ba0:	68fb      	ldr	r3, [r7, #12]
 8104ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ba4:	b29b      	uxth	r3, r3
 8104ba6:	2bff      	cmp	r3, #255	; 0xff
 8104ba8:	d90e      	bls.n	8104bc8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104baa:	68fb      	ldr	r3, [r7, #12]
 8104bac:	22ff      	movs	r2, #255	; 0xff
 8104bae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104bb0:	68fb      	ldr	r3, [r7, #12]
 8104bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104bb4:	b2da      	uxtb	r2, r3
 8104bb6:	8979      	ldrh	r1, [r7, #10]
 8104bb8:	2300      	movs	r3, #0
 8104bba:	9300      	str	r3, [sp, #0]
 8104bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104bc0:	68f8      	ldr	r0, [r7, #12]
 8104bc2:	f000 fbcf 	bl	8105364 <I2C_TransferConfig>
 8104bc6:	e00f      	b.n	8104be8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104bc8:	68fb      	ldr	r3, [r7, #12]
 8104bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104bcc:	b29a      	uxth	r2, r3
 8104bce:	68fb      	ldr	r3, [r7, #12]
 8104bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104bd2:	68fb      	ldr	r3, [r7, #12]
 8104bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104bd6:	b2da      	uxtb	r2, r3
 8104bd8:	8979      	ldrh	r1, [r7, #10]
 8104bda:	2300      	movs	r3, #0
 8104bdc:	9300      	str	r3, [sp, #0]
 8104bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104be2:	68f8      	ldr	r0, [r7, #12]
 8104be4:	f000 fbbe 	bl	8105364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8104be8:	68fb      	ldr	r3, [r7, #12]
 8104bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104bec:	b29b      	uxth	r3, r3
 8104bee:	2b00      	cmp	r3, #0
 8104bf0:	d19e      	bne.n	8104b30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104bf2:	697a      	ldr	r2, [r7, #20]
 8104bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104bf6:	68f8      	ldr	r0, [r7, #12]
 8104bf8:	f000 fa8c 	bl	8105114 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104bfc:	4603      	mov	r3, r0
 8104bfe:	2b00      	cmp	r3, #0
 8104c00:	d001      	beq.n	8104c06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8104c02:	2301      	movs	r3, #1
 8104c04:	e01a      	b.n	8104c3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104c06:	68fb      	ldr	r3, [r7, #12]
 8104c08:	681b      	ldr	r3, [r3, #0]
 8104c0a:	2220      	movs	r2, #32
 8104c0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104c0e:	68fb      	ldr	r3, [r7, #12]
 8104c10:	681b      	ldr	r3, [r3, #0]
 8104c12:	6859      	ldr	r1, [r3, #4]
 8104c14:	68fb      	ldr	r3, [r7, #12]
 8104c16:	681a      	ldr	r2, [r3, #0]
 8104c18:	4b0a      	ldr	r3, [pc, #40]	; (8104c44 <HAL_I2C_Mem_Write+0x224>)
 8104c1a:	400b      	ands	r3, r1
 8104c1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104c1e:	68fb      	ldr	r3, [r7, #12]
 8104c20:	2220      	movs	r2, #32
 8104c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104c26:	68fb      	ldr	r3, [r7, #12]
 8104c28:	2200      	movs	r2, #0
 8104c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104c2e:	68fb      	ldr	r3, [r7, #12]
 8104c30:	2200      	movs	r2, #0
 8104c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104c36:	2300      	movs	r3, #0
 8104c38:	e000      	b.n	8104c3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8104c3a:	2302      	movs	r3, #2
  }
}
 8104c3c:	4618      	mov	r0, r3
 8104c3e:	3718      	adds	r7, #24
 8104c40:	46bd      	mov	sp, r7
 8104c42:	bd80      	pop	{r7, pc}
 8104c44:	fe00e800 	.word	0xfe00e800

08104c48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104c48:	b580      	push	{r7, lr}
 8104c4a:	b088      	sub	sp, #32
 8104c4c:	af02      	add	r7, sp, #8
 8104c4e:	60f8      	str	r0, [r7, #12]
 8104c50:	4608      	mov	r0, r1
 8104c52:	4611      	mov	r1, r2
 8104c54:	461a      	mov	r2, r3
 8104c56:	4603      	mov	r3, r0
 8104c58:	817b      	strh	r3, [r7, #10]
 8104c5a:	460b      	mov	r3, r1
 8104c5c:	813b      	strh	r3, [r7, #8]
 8104c5e:	4613      	mov	r3, r2
 8104c60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104c62:	68fb      	ldr	r3, [r7, #12]
 8104c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104c68:	b2db      	uxtb	r3, r3
 8104c6a:	2b20      	cmp	r3, #32
 8104c6c:	f040 80fd 	bne.w	8104e6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8104c70:	6a3b      	ldr	r3, [r7, #32]
 8104c72:	2b00      	cmp	r3, #0
 8104c74:	d002      	beq.n	8104c7c <HAL_I2C_Mem_Read+0x34>
 8104c76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8104c78:	2b00      	cmp	r3, #0
 8104c7a:	d105      	bne.n	8104c88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104c7c:	68fb      	ldr	r3, [r7, #12]
 8104c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104c82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104c84:	2301      	movs	r3, #1
 8104c86:	e0f1      	b.n	8104e6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104c88:	68fb      	ldr	r3, [r7, #12]
 8104c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104c8e:	2b01      	cmp	r3, #1
 8104c90:	d101      	bne.n	8104c96 <HAL_I2C_Mem_Read+0x4e>
 8104c92:	2302      	movs	r3, #2
 8104c94:	e0ea      	b.n	8104e6c <HAL_I2C_Mem_Read+0x224>
 8104c96:	68fb      	ldr	r3, [r7, #12]
 8104c98:	2201      	movs	r2, #1
 8104c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104c9e:	f7fe fa27 	bl	81030f0 <HAL_GetTick>
 8104ca2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104ca4:	697b      	ldr	r3, [r7, #20]
 8104ca6:	9300      	str	r3, [sp, #0]
 8104ca8:	2319      	movs	r3, #25
 8104caa:	2201      	movs	r2, #1
 8104cac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104cb0:	68f8      	ldr	r0, [r7, #12]
 8104cb2:	f000 f9af 	bl	8105014 <I2C_WaitOnFlagUntilTimeout>
 8104cb6:	4603      	mov	r3, r0
 8104cb8:	2b00      	cmp	r3, #0
 8104cba:	d001      	beq.n	8104cc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8104cbc:	2301      	movs	r3, #1
 8104cbe:	e0d5      	b.n	8104e6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8104cc0:	68fb      	ldr	r3, [r7, #12]
 8104cc2:	2222      	movs	r2, #34	; 0x22
 8104cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104cc8:	68fb      	ldr	r3, [r7, #12]
 8104cca:	2240      	movs	r2, #64	; 0x40
 8104ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104cd0:	68fb      	ldr	r3, [r7, #12]
 8104cd2:	2200      	movs	r2, #0
 8104cd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104cd6:	68fb      	ldr	r3, [r7, #12]
 8104cd8:	6a3a      	ldr	r2, [r7, #32]
 8104cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104cdc:	68fb      	ldr	r3, [r7, #12]
 8104cde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104ce2:	68fb      	ldr	r3, [r7, #12]
 8104ce4:	2200      	movs	r2, #0
 8104ce6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104ce8:	88f8      	ldrh	r0, [r7, #6]
 8104cea:	893a      	ldrh	r2, [r7, #8]
 8104cec:	8979      	ldrh	r1, [r7, #10]
 8104cee:	697b      	ldr	r3, [r7, #20]
 8104cf0:	9301      	str	r3, [sp, #4]
 8104cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104cf4:	9300      	str	r3, [sp, #0]
 8104cf6:	4603      	mov	r3, r0
 8104cf8:	68f8      	ldr	r0, [r7, #12]
 8104cfa:	f000 f913 	bl	8104f24 <I2C_RequestMemoryRead>
 8104cfe:	4603      	mov	r3, r0
 8104d00:	2b00      	cmp	r3, #0
 8104d02:	d005      	beq.n	8104d10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104d04:	68fb      	ldr	r3, [r7, #12]
 8104d06:	2200      	movs	r2, #0
 8104d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104d0c:	2301      	movs	r3, #1
 8104d0e:	e0ad      	b.n	8104e6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104d10:	68fb      	ldr	r3, [r7, #12]
 8104d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d14:	b29b      	uxth	r3, r3
 8104d16:	2bff      	cmp	r3, #255	; 0xff
 8104d18:	d90e      	bls.n	8104d38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104d1a:	68fb      	ldr	r3, [r7, #12]
 8104d1c:	22ff      	movs	r2, #255	; 0xff
 8104d1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104d20:	68fb      	ldr	r3, [r7, #12]
 8104d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104d24:	b2da      	uxtb	r2, r3
 8104d26:	8979      	ldrh	r1, [r7, #10]
 8104d28:	4b52      	ldr	r3, [pc, #328]	; (8104e74 <HAL_I2C_Mem_Read+0x22c>)
 8104d2a:	9300      	str	r3, [sp, #0]
 8104d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104d30:	68f8      	ldr	r0, [r7, #12]
 8104d32:	f000 fb17 	bl	8105364 <I2C_TransferConfig>
 8104d36:	e00f      	b.n	8104d58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104d38:	68fb      	ldr	r3, [r7, #12]
 8104d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d3c:	b29a      	uxth	r2, r3
 8104d3e:	68fb      	ldr	r3, [r7, #12]
 8104d40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104d42:	68fb      	ldr	r3, [r7, #12]
 8104d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104d46:	b2da      	uxtb	r2, r3
 8104d48:	8979      	ldrh	r1, [r7, #10]
 8104d4a:	4b4a      	ldr	r3, [pc, #296]	; (8104e74 <HAL_I2C_Mem_Read+0x22c>)
 8104d4c:	9300      	str	r3, [sp, #0]
 8104d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104d52:	68f8      	ldr	r0, [r7, #12]
 8104d54:	f000 fb06 	bl	8105364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8104d58:	697b      	ldr	r3, [r7, #20]
 8104d5a:	9300      	str	r3, [sp, #0]
 8104d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104d5e:	2200      	movs	r2, #0
 8104d60:	2104      	movs	r1, #4
 8104d62:	68f8      	ldr	r0, [r7, #12]
 8104d64:	f000 f956 	bl	8105014 <I2C_WaitOnFlagUntilTimeout>
 8104d68:	4603      	mov	r3, r0
 8104d6a:	2b00      	cmp	r3, #0
 8104d6c:	d001      	beq.n	8104d72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8104d6e:	2301      	movs	r3, #1
 8104d70:	e07c      	b.n	8104e6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104d72:	68fb      	ldr	r3, [r7, #12]
 8104d74:	681b      	ldr	r3, [r3, #0]
 8104d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104d78:	68fb      	ldr	r3, [r7, #12]
 8104d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104d7c:	b2d2      	uxtb	r2, r2
 8104d7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104d80:	68fb      	ldr	r3, [r7, #12]
 8104d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104d84:	1c5a      	adds	r2, r3, #1
 8104d86:	68fb      	ldr	r3, [r7, #12]
 8104d88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8104d8a:	68fb      	ldr	r3, [r7, #12]
 8104d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104d8e:	3b01      	subs	r3, #1
 8104d90:	b29a      	uxth	r2, r3
 8104d92:	68fb      	ldr	r3, [r7, #12]
 8104d94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104d96:	68fb      	ldr	r3, [r7, #12]
 8104d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d9a:	b29b      	uxth	r3, r3
 8104d9c:	3b01      	subs	r3, #1
 8104d9e:	b29a      	uxth	r2, r3
 8104da0:	68fb      	ldr	r3, [r7, #12]
 8104da2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104da4:	68fb      	ldr	r3, [r7, #12]
 8104da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104da8:	b29b      	uxth	r3, r3
 8104daa:	2b00      	cmp	r3, #0
 8104dac:	d034      	beq.n	8104e18 <HAL_I2C_Mem_Read+0x1d0>
 8104dae:	68fb      	ldr	r3, [r7, #12]
 8104db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104db2:	2b00      	cmp	r3, #0
 8104db4:	d130      	bne.n	8104e18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104db6:	697b      	ldr	r3, [r7, #20]
 8104db8:	9300      	str	r3, [sp, #0]
 8104dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104dbc:	2200      	movs	r2, #0
 8104dbe:	2180      	movs	r1, #128	; 0x80
 8104dc0:	68f8      	ldr	r0, [r7, #12]
 8104dc2:	f000 f927 	bl	8105014 <I2C_WaitOnFlagUntilTimeout>
 8104dc6:	4603      	mov	r3, r0
 8104dc8:	2b00      	cmp	r3, #0
 8104dca:	d001      	beq.n	8104dd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8104dcc:	2301      	movs	r3, #1
 8104dce:	e04d      	b.n	8104e6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104dd0:	68fb      	ldr	r3, [r7, #12]
 8104dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104dd4:	b29b      	uxth	r3, r3
 8104dd6:	2bff      	cmp	r3, #255	; 0xff
 8104dd8:	d90e      	bls.n	8104df8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104dda:	68fb      	ldr	r3, [r7, #12]
 8104ddc:	22ff      	movs	r2, #255	; 0xff
 8104dde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8104de0:	68fb      	ldr	r3, [r7, #12]
 8104de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104de4:	b2da      	uxtb	r2, r3
 8104de6:	8979      	ldrh	r1, [r7, #10]
 8104de8:	2300      	movs	r3, #0
 8104dea:	9300      	str	r3, [sp, #0]
 8104dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104df0:	68f8      	ldr	r0, [r7, #12]
 8104df2:	f000 fab7 	bl	8105364 <I2C_TransferConfig>
 8104df6:	e00f      	b.n	8104e18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104df8:	68fb      	ldr	r3, [r7, #12]
 8104dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104dfc:	b29a      	uxth	r2, r3
 8104dfe:	68fb      	ldr	r3, [r7, #12]
 8104e00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104e02:	68fb      	ldr	r3, [r7, #12]
 8104e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104e06:	b2da      	uxtb	r2, r3
 8104e08:	8979      	ldrh	r1, [r7, #10]
 8104e0a:	2300      	movs	r3, #0
 8104e0c:	9300      	str	r3, [sp, #0]
 8104e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104e12:	68f8      	ldr	r0, [r7, #12]
 8104e14:	f000 faa6 	bl	8105364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8104e18:	68fb      	ldr	r3, [r7, #12]
 8104e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104e1c:	b29b      	uxth	r3, r3
 8104e1e:	2b00      	cmp	r3, #0
 8104e20:	d19a      	bne.n	8104d58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104e22:	697a      	ldr	r2, [r7, #20]
 8104e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104e26:	68f8      	ldr	r0, [r7, #12]
 8104e28:	f000 f974 	bl	8105114 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104e2c:	4603      	mov	r3, r0
 8104e2e:	2b00      	cmp	r3, #0
 8104e30:	d001      	beq.n	8104e36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8104e32:	2301      	movs	r3, #1
 8104e34:	e01a      	b.n	8104e6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104e36:	68fb      	ldr	r3, [r7, #12]
 8104e38:	681b      	ldr	r3, [r3, #0]
 8104e3a:	2220      	movs	r2, #32
 8104e3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104e3e:	68fb      	ldr	r3, [r7, #12]
 8104e40:	681b      	ldr	r3, [r3, #0]
 8104e42:	6859      	ldr	r1, [r3, #4]
 8104e44:	68fb      	ldr	r3, [r7, #12]
 8104e46:	681a      	ldr	r2, [r3, #0]
 8104e48:	4b0b      	ldr	r3, [pc, #44]	; (8104e78 <HAL_I2C_Mem_Read+0x230>)
 8104e4a:	400b      	ands	r3, r1
 8104e4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104e4e:	68fb      	ldr	r3, [r7, #12]
 8104e50:	2220      	movs	r2, #32
 8104e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104e56:	68fb      	ldr	r3, [r7, #12]
 8104e58:	2200      	movs	r2, #0
 8104e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104e5e:	68fb      	ldr	r3, [r7, #12]
 8104e60:	2200      	movs	r2, #0
 8104e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104e66:	2300      	movs	r3, #0
 8104e68:	e000      	b.n	8104e6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8104e6a:	2302      	movs	r3, #2
  }
}
 8104e6c:	4618      	mov	r0, r3
 8104e6e:	3718      	adds	r7, #24
 8104e70:	46bd      	mov	sp, r7
 8104e72:	bd80      	pop	{r7, pc}
 8104e74:	80002400 	.word	0x80002400
 8104e78:	fe00e800 	.word	0xfe00e800

08104e7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8104e7c:	b580      	push	{r7, lr}
 8104e7e:	b086      	sub	sp, #24
 8104e80:	af02      	add	r7, sp, #8
 8104e82:	60f8      	str	r0, [r7, #12]
 8104e84:	4608      	mov	r0, r1
 8104e86:	4611      	mov	r1, r2
 8104e88:	461a      	mov	r2, r3
 8104e8a:	4603      	mov	r3, r0
 8104e8c:	817b      	strh	r3, [r7, #10]
 8104e8e:	460b      	mov	r3, r1
 8104e90:	813b      	strh	r3, [r7, #8]
 8104e92:	4613      	mov	r3, r2
 8104e94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8104e96:	88fb      	ldrh	r3, [r7, #6]
 8104e98:	b2da      	uxtb	r2, r3
 8104e9a:	8979      	ldrh	r1, [r7, #10]
 8104e9c:	4b20      	ldr	r3, [pc, #128]	; (8104f20 <I2C_RequestMemoryWrite+0xa4>)
 8104e9e:	9300      	str	r3, [sp, #0]
 8104ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104ea4:	68f8      	ldr	r0, [r7, #12]
 8104ea6:	f000 fa5d 	bl	8105364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104eaa:	69fa      	ldr	r2, [r7, #28]
 8104eac:	69b9      	ldr	r1, [r7, #24]
 8104eae:	68f8      	ldr	r0, [r7, #12]
 8104eb0:	f000 f8f0 	bl	8105094 <I2C_WaitOnTXISFlagUntilTimeout>
 8104eb4:	4603      	mov	r3, r0
 8104eb6:	2b00      	cmp	r3, #0
 8104eb8:	d001      	beq.n	8104ebe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8104eba:	2301      	movs	r3, #1
 8104ebc:	e02c      	b.n	8104f18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104ebe:	88fb      	ldrh	r3, [r7, #6]
 8104ec0:	2b01      	cmp	r3, #1
 8104ec2:	d105      	bne.n	8104ed0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104ec4:	893b      	ldrh	r3, [r7, #8]
 8104ec6:	b2da      	uxtb	r2, r3
 8104ec8:	68fb      	ldr	r3, [r7, #12]
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	629a      	str	r2, [r3, #40]	; 0x28
 8104ece:	e015      	b.n	8104efc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104ed0:	893b      	ldrh	r3, [r7, #8]
 8104ed2:	0a1b      	lsrs	r3, r3, #8
 8104ed4:	b29b      	uxth	r3, r3
 8104ed6:	b2da      	uxtb	r2, r3
 8104ed8:	68fb      	ldr	r3, [r7, #12]
 8104eda:	681b      	ldr	r3, [r3, #0]
 8104edc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104ede:	69fa      	ldr	r2, [r7, #28]
 8104ee0:	69b9      	ldr	r1, [r7, #24]
 8104ee2:	68f8      	ldr	r0, [r7, #12]
 8104ee4:	f000 f8d6 	bl	8105094 <I2C_WaitOnTXISFlagUntilTimeout>
 8104ee8:	4603      	mov	r3, r0
 8104eea:	2b00      	cmp	r3, #0
 8104eec:	d001      	beq.n	8104ef2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8104eee:	2301      	movs	r3, #1
 8104ef0:	e012      	b.n	8104f18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104ef2:	893b      	ldrh	r3, [r7, #8]
 8104ef4:	b2da      	uxtb	r2, r3
 8104ef6:	68fb      	ldr	r3, [r7, #12]
 8104ef8:	681b      	ldr	r3, [r3, #0]
 8104efa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8104efc:	69fb      	ldr	r3, [r7, #28]
 8104efe:	9300      	str	r3, [sp, #0]
 8104f00:	69bb      	ldr	r3, [r7, #24]
 8104f02:	2200      	movs	r2, #0
 8104f04:	2180      	movs	r1, #128	; 0x80
 8104f06:	68f8      	ldr	r0, [r7, #12]
 8104f08:	f000 f884 	bl	8105014 <I2C_WaitOnFlagUntilTimeout>
 8104f0c:	4603      	mov	r3, r0
 8104f0e:	2b00      	cmp	r3, #0
 8104f10:	d001      	beq.n	8104f16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8104f12:	2301      	movs	r3, #1
 8104f14:	e000      	b.n	8104f18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8104f16:	2300      	movs	r3, #0
}
 8104f18:	4618      	mov	r0, r3
 8104f1a:	3710      	adds	r7, #16
 8104f1c:	46bd      	mov	sp, r7
 8104f1e:	bd80      	pop	{r7, pc}
 8104f20:	80002000 	.word	0x80002000

08104f24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8104f24:	b580      	push	{r7, lr}
 8104f26:	b086      	sub	sp, #24
 8104f28:	af02      	add	r7, sp, #8
 8104f2a:	60f8      	str	r0, [r7, #12]
 8104f2c:	4608      	mov	r0, r1
 8104f2e:	4611      	mov	r1, r2
 8104f30:	461a      	mov	r2, r3
 8104f32:	4603      	mov	r3, r0
 8104f34:	817b      	strh	r3, [r7, #10]
 8104f36:	460b      	mov	r3, r1
 8104f38:	813b      	strh	r3, [r7, #8]
 8104f3a:	4613      	mov	r3, r2
 8104f3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8104f3e:	88fb      	ldrh	r3, [r7, #6]
 8104f40:	b2da      	uxtb	r2, r3
 8104f42:	8979      	ldrh	r1, [r7, #10]
 8104f44:	4b20      	ldr	r3, [pc, #128]	; (8104fc8 <I2C_RequestMemoryRead+0xa4>)
 8104f46:	9300      	str	r3, [sp, #0]
 8104f48:	2300      	movs	r3, #0
 8104f4a:	68f8      	ldr	r0, [r7, #12]
 8104f4c:	f000 fa0a 	bl	8105364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104f50:	69fa      	ldr	r2, [r7, #28]
 8104f52:	69b9      	ldr	r1, [r7, #24]
 8104f54:	68f8      	ldr	r0, [r7, #12]
 8104f56:	f000 f89d 	bl	8105094 <I2C_WaitOnTXISFlagUntilTimeout>
 8104f5a:	4603      	mov	r3, r0
 8104f5c:	2b00      	cmp	r3, #0
 8104f5e:	d001      	beq.n	8104f64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8104f60:	2301      	movs	r3, #1
 8104f62:	e02c      	b.n	8104fbe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104f64:	88fb      	ldrh	r3, [r7, #6]
 8104f66:	2b01      	cmp	r3, #1
 8104f68:	d105      	bne.n	8104f76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104f6a:	893b      	ldrh	r3, [r7, #8]
 8104f6c:	b2da      	uxtb	r2, r3
 8104f6e:	68fb      	ldr	r3, [r7, #12]
 8104f70:	681b      	ldr	r3, [r3, #0]
 8104f72:	629a      	str	r2, [r3, #40]	; 0x28
 8104f74:	e015      	b.n	8104fa2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104f76:	893b      	ldrh	r3, [r7, #8]
 8104f78:	0a1b      	lsrs	r3, r3, #8
 8104f7a:	b29b      	uxth	r3, r3
 8104f7c:	b2da      	uxtb	r2, r3
 8104f7e:	68fb      	ldr	r3, [r7, #12]
 8104f80:	681b      	ldr	r3, [r3, #0]
 8104f82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104f84:	69fa      	ldr	r2, [r7, #28]
 8104f86:	69b9      	ldr	r1, [r7, #24]
 8104f88:	68f8      	ldr	r0, [r7, #12]
 8104f8a:	f000 f883 	bl	8105094 <I2C_WaitOnTXISFlagUntilTimeout>
 8104f8e:	4603      	mov	r3, r0
 8104f90:	2b00      	cmp	r3, #0
 8104f92:	d001      	beq.n	8104f98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8104f94:	2301      	movs	r3, #1
 8104f96:	e012      	b.n	8104fbe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104f98:	893b      	ldrh	r3, [r7, #8]
 8104f9a:	b2da      	uxtb	r2, r3
 8104f9c:	68fb      	ldr	r3, [r7, #12]
 8104f9e:	681b      	ldr	r3, [r3, #0]
 8104fa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8104fa2:	69fb      	ldr	r3, [r7, #28]
 8104fa4:	9300      	str	r3, [sp, #0]
 8104fa6:	69bb      	ldr	r3, [r7, #24]
 8104fa8:	2200      	movs	r2, #0
 8104faa:	2140      	movs	r1, #64	; 0x40
 8104fac:	68f8      	ldr	r0, [r7, #12]
 8104fae:	f000 f831 	bl	8105014 <I2C_WaitOnFlagUntilTimeout>
 8104fb2:	4603      	mov	r3, r0
 8104fb4:	2b00      	cmp	r3, #0
 8104fb6:	d001      	beq.n	8104fbc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8104fb8:	2301      	movs	r3, #1
 8104fba:	e000      	b.n	8104fbe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8104fbc:	2300      	movs	r3, #0
}
 8104fbe:	4618      	mov	r0, r3
 8104fc0:	3710      	adds	r7, #16
 8104fc2:	46bd      	mov	sp, r7
 8104fc4:	bd80      	pop	{r7, pc}
 8104fc6:	bf00      	nop
 8104fc8:	80002000 	.word	0x80002000

08104fcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8104fcc:	b480      	push	{r7}
 8104fce:	b083      	sub	sp, #12
 8104fd0:	af00      	add	r7, sp, #0
 8104fd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	681b      	ldr	r3, [r3, #0]
 8104fd8:	699b      	ldr	r3, [r3, #24]
 8104fda:	f003 0302 	and.w	r3, r3, #2
 8104fde:	2b02      	cmp	r3, #2
 8104fe0:	d103      	bne.n	8104fea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8104fe2:	687b      	ldr	r3, [r7, #4]
 8104fe4:	681b      	ldr	r3, [r3, #0]
 8104fe6:	2200      	movs	r2, #0
 8104fe8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	681b      	ldr	r3, [r3, #0]
 8104fee:	699b      	ldr	r3, [r3, #24]
 8104ff0:	f003 0301 	and.w	r3, r3, #1
 8104ff4:	2b01      	cmp	r3, #1
 8104ff6:	d007      	beq.n	8105008 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8104ff8:	687b      	ldr	r3, [r7, #4]
 8104ffa:	681b      	ldr	r3, [r3, #0]
 8104ffc:	699a      	ldr	r2, [r3, #24]
 8104ffe:	687b      	ldr	r3, [r7, #4]
 8105000:	681b      	ldr	r3, [r3, #0]
 8105002:	f042 0201 	orr.w	r2, r2, #1
 8105006:	619a      	str	r2, [r3, #24]
  }
}
 8105008:	bf00      	nop
 810500a:	370c      	adds	r7, #12
 810500c:	46bd      	mov	sp, r7
 810500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105012:	4770      	bx	lr

08105014 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8105014:	b580      	push	{r7, lr}
 8105016:	b084      	sub	sp, #16
 8105018:	af00      	add	r7, sp, #0
 810501a:	60f8      	str	r0, [r7, #12]
 810501c:	60b9      	str	r1, [r7, #8]
 810501e:	603b      	str	r3, [r7, #0]
 8105020:	4613      	mov	r3, r2
 8105022:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105024:	e022      	b.n	810506c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105026:	683b      	ldr	r3, [r7, #0]
 8105028:	f1b3 3fff 	cmp.w	r3, #4294967295
 810502c:	d01e      	beq.n	810506c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810502e:	f7fe f85f 	bl	81030f0 <HAL_GetTick>
 8105032:	4602      	mov	r2, r0
 8105034:	69bb      	ldr	r3, [r7, #24]
 8105036:	1ad3      	subs	r3, r2, r3
 8105038:	683a      	ldr	r2, [r7, #0]
 810503a:	429a      	cmp	r2, r3
 810503c:	d302      	bcc.n	8105044 <I2C_WaitOnFlagUntilTimeout+0x30>
 810503e:	683b      	ldr	r3, [r7, #0]
 8105040:	2b00      	cmp	r3, #0
 8105042:	d113      	bne.n	810506c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105044:	68fb      	ldr	r3, [r7, #12]
 8105046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105048:	f043 0220 	orr.w	r2, r3, #32
 810504c:	68fb      	ldr	r3, [r7, #12]
 810504e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105050:	68fb      	ldr	r3, [r7, #12]
 8105052:	2220      	movs	r2, #32
 8105054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105058:	68fb      	ldr	r3, [r7, #12]
 810505a:	2200      	movs	r2, #0
 810505c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105060:	68fb      	ldr	r3, [r7, #12]
 8105062:	2200      	movs	r2, #0
 8105064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8105068:	2301      	movs	r3, #1
 810506a:	e00f      	b.n	810508c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810506c:	68fb      	ldr	r3, [r7, #12]
 810506e:	681b      	ldr	r3, [r3, #0]
 8105070:	699a      	ldr	r2, [r3, #24]
 8105072:	68bb      	ldr	r3, [r7, #8]
 8105074:	4013      	ands	r3, r2
 8105076:	68ba      	ldr	r2, [r7, #8]
 8105078:	429a      	cmp	r2, r3
 810507a:	bf0c      	ite	eq
 810507c:	2301      	moveq	r3, #1
 810507e:	2300      	movne	r3, #0
 8105080:	b2db      	uxtb	r3, r3
 8105082:	461a      	mov	r2, r3
 8105084:	79fb      	ldrb	r3, [r7, #7]
 8105086:	429a      	cmp	r2, r3
 8105088:	d0cd      	beq.n	8105026 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 810508a:	2300      	movs	r3, #0
}
 810508c:	4618      	mov	r0, r3
 810508e:	3710      	adds	r7, #16
 8105090:	46bd      	mov	sp, r7
 8105092:	bd80      	pop	{r7, pc}

08105094 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105094:	b580      	push	{r7, lr}
 8105096:	b084      	sub	sp, #16
 8105098:	af00      	add	r7, sp, #0
 810509a:	60f8      	str	r0, [r7, #12]
 810509c:	60b9      	str	r1, [r7, #8]
 810509e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81050a0:	e02c      	b.n	81050fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81050a2:	687a      	ldr	r2, [r7, #4]
 81050a4:	68b9      	ldr	r1, [r7, #8]
 81050a6:	68f8      	ldr	r0, [r7, #12]
 81050a8:	f000 f870 	bl	810518c <I2C_IsErrorOccurred>
 81050ac:	4603      	mov	r3, r0
 81050ae:	2b00      	cmp	r3, #0
 81050b0:	d001      	beq.n	81050b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81050b2:	2301      	movs	r3, #1
 81050b4:	e02a      	b.n	810510c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81050b6:	68bb      	ldr	r3, [r7, #8]
 81050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81050bc:	d01e      	beq.n	81050fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81050be:	f7fe f817 	bl	81030f0 <HAL_GetTick>
 81050c2:	4602      	mov	r2, r0
 81050c4:	687b      	ldr	r3, [r7, #4]
 81050c6:	1ad3      	subs	r3, r2, r3
 81050c8:	68ba      	ldr	r2, [r7, #8]
 81050ca:	429a      	cmp	r2, r3
 81050cc:	d302      	bcc.n	81050d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81050ce:	68bb      	ldr	r3, [r7, #8]
 81050d0:	2b00      	cmp	r3, #0
 81050d2:	d113      	bne.n	81050fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81050d4:	68fb      	ldr	r3, [r7, #12]
 81050d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81050d8:	f043 0220 	orr.w	r2, r3, #32
 81050dc:	68fb      	ldr	r3, [r7, #12]
 81050de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81050e0:	68fb      	ldr	r3, [r7, #12]
 81050e2:	2220      	movs	r2, #32
 81050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81050e8:	68fb      	ldr	r3, [r7, #12]
 81050ea:	2200      	movs	r2, #0
 81050ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81050f0:	68fb      	ldr	r3, [r7, #12]
 81050f2:	2200      	movs	r2, #0
 81050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81050f8:	2301      	movs	r3, #1
 81050fa:	e007      	b.n	810510c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81050fc:	68fb      	ldr	r3, [r7, #12]
 81050fe:	681b      	ldr	r3, [r3, #0]
 8105100:	699b      	ldr	r3, [r3, #24]
 8105102:	f003 0302 	and.w	r3, r3, #2
 8105106:	2b02      	cmp	r3, #2
 8105108:	d1cb      	bne.n	81050a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810510a:	2300      	movs	r3, #0
}
 810510c:	4618      	mov	r0, r3
 810510e:	3710      	adds	r7, #16
 8105110:	46bd      	mov	sp, r7
 8105112:	bd80      	pop	{r7, pc}

08105114 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105114:	b580      	push	{r7, lr}
 8105116:	b084      	sub	sp, #16
 8105118:	af00      	add	r7, sp, #0
 810511a:	60f8      	str	r0, [r7, #12]
 810511c:	60b9      	str	r1, [r7, #8]
 810511e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105120:	e028      	b.n	8105174 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105122:	687a      	ldr	r2, [r7, #4]
 8105124:	68b9      	ldr	r1, [r7, #8]
 8105126:	68f8      	ldr	r0, [r7, #12]
 8105128:	f000 f830 	bl	810518c <I2C_IsErrorOccurred>
 810512c:	4603      	mov	r3, r0
 810512e:	2b00      	cmp	r3, #0
 8105130:	d001      	beq.n	8105136 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105132:	2301      	movs	r3, #1
 8105134:	e026      	b.n	8105184 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105136:	f7fd ffdb 	bl	81030f0 <HAL_GetTick>
 810513a:	4602      	mov	r2, r0
 810513c:	687b      	ldr	r3, [r7, #4]
 810513e:	1ad3      	subs	r3, r2, r3
 8105140:	68ba      	ldr	r2, [r7, #8]
 8105142:	429a      	cmp	r2, r3
 8105144:	d302      	bcc.n	810514c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8105146:	68bb      	ldr	r3, [r7, #8]
 8105148:	2b00      	cmp	r3, #0
 810514a:	d113      	bne.n	8105174 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810514c:	68fb      	ldr	r3, [r7, #12]
 810514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105150:	f043 0220 	orr.w	r2, r3, #32
 8105154:	68fb      	ldr	r3, [r7, #12]
 8105156:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8105158:	68fb      	ldr	r3, [r7, #12]
 810515a:	2220      	movs	r2, #32
 810515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8105160:	68fb      	ldr	r3, [r7, #12]
 8105162:	2200      	movs	r2, #0
 8105164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105168:	68fb      	ldr	r3, [r7, #12]
 810516a:	2200      	movs	r2, #0
 810516c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8105170:	2301      	movs	r3, #1
 8105172:	e007      	b.n	8105184 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105174:	68fb      	ldr	r3, [r7, #12]
 8105176:	681b      	ldr	r3, [r3, #0]
 8105178:	699b      	ldr	r3, [r3, #24]
 810517a:	f003 0320 	and.w	r3, r3, #32
 810517e:	2b20      	cmp	r3, #32
 8105180:	d1cf      	bne.n	8105122 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8105182:	2300      	movs	r3, #0
}
 8105184:	4618      	mov	r0, r3
 8105186:	3710      	adds	r7, #16
 8105188:	46bd      	mov	sp, r7
 810518a:	bd80      	pop	{r7, pc}

0810518c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810518c:	b580      	push	{r7, lr}
 810518e:	b08a      	sub	sp, #40	; 0x28
 8105190:	af00      	add	r7, sp, #0
 8105192:	60f8      	str	r0, [r7, #12]
 8105194:	60b9      	str	r1, [r7, #8]
 8105196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105198:	2300      	movs	r3, #0
 810519a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810519e:	68fb      	ldr	r3, [r7, #12]
 81051a0:	681b      	ldr	r3, [r3, #0]
 81051a2:	699b      	ldr	r3, [r3, #24]
 81051a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81051a6:	2300      	movs	r3, #0
 81051a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81051ae:	69bb      	ldr	r3, [r7, #24]
 81051b0:	f003 0310 	and.w	r3, r3, #16
 81051b4:	2b00      	cmp	r3, #0
 81051b6:	d075      	beq.n	81052a4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81051b8:	68fb      	ldr	r3, [r7, #12]
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	2210      	movs	r2, #16
 81051be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81051c0:	e056      	b.n	8105270 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81051c2:	68bb      	ldr	r3, [r7, #8]
 81051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81051c8:	d052      	beq.n	8105270 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81051ca:	f7fd ff91 	bl	81030f0 <HAL_GetTick>
 81051ce:	4602      	mov	r2, r0
 81051d0:	69fb      	ldr	r3, [r7, #28]
 81051d2:	1ad3      	subs	r3, r2, r3
 81051d4:	68ba      	ldr	r2, [r7, #8]
 81051d6:	429a      	cmp	r2, r3
 81051d8:	d302      	bcc.n	81051e0 <I2C_IsErrorOccurred+0x54>
 81051da:	68bb      	ldr	r3, [r7, #8]
 81051dc:	2b00      	cmp	r3, #0
 81051de:	d147      	bne.n	8105270 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 81051e0:	68fb      	ldr	r3, [r7, #12]
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	685b      	ldr	r3, [r3, #4]
 81051e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81051ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81051ec:	68fb      	ldr	r3, [r7, #12]
 81051ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81051f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81051f4:	68fb      	ldr	r3, [r7, #12]
 81051f6:	681b      	ldr	r3, [r3, #0]
 81051f8:	699b      	ldr	r3, [r3, #24]
 81051fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81051fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105202:	d12e      	bne.n	8105262 <I2C_IsErrorOccurred+0xd6>
 8105204:	697b      	ldr	r3, [r7, #20]
 8105206:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810520a:	d02a      	beq.n	8105262 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 810520c:	7cfb      	ldrb	r3, [r7, #19]
 810520e:	2b20      	cmp	r3, #32
 8105210:	d027      	beq.n	8105262 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8105212:	68fb      	ldr	r3, [r7, #12]
 8105214:	681b      	ldr	r3, [r3, #0]
 8105216:	685a      	ldr	r2, [r3, #4]
 8105218:	68fb      	ldr	r3, [r7, #12]
 810521a:	681b      	ldr	r3, [r3, #0]
 810521c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105220:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8105222:	f7fd ff65 	bl	81030f0 <HAL_GetTick>
 8105226:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105228:	e01b      	b.n	8105262 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810522a:	f7fd ff61 	bl	81030f0 <HAL_GetTick>
 810522e:	4602      	mov	r2, r0
 8105230:	69fb      	ldr	r3, [r7, #28]
 8105232:	1ad3      	subs	r3, r2, r3
 8105234:	2b19      	cmp	r3, #25
 8105236:	d914      	bls.n	8105262 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105238:	68fb      	ldr	r3, [r7, #12]
 810523a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810523c:	f043 0220 	orr.w	r2, r3, #32
 8105240:	68fb      	ldr	r3, [r7, #12]
 8105242:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8105244:	68fb      	ldr	r3, [r7, #12]
 8105246:	2220      	movs	r2, #32
 8105248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 810524c:	68fb      	ldr	r3, [r7, #12]
 810524e:	2200      	movs	r2, #0
 8105250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8105254:	68fb      	ldr	r3, [r7, #12]
 8105256:	2200      	movs	r2, #0
 8105258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 810525c:	2301      	movs	r3, #1
 810525e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105262:	68fb      	ldr	r3, [r7, #12]
 8105264:	681b      	ldr	r3, [r3, #0]
 8105266:	699b      	ldr	r3, [r3, #24]
 8105268:	f003 0320 	and.w	r3, r3, #32
 810526c:	2b20      	cmp	r3, #32
 810526e:	d1dc      	bne.n	810522a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8105270:	68fb      	ldr	r3, [r7, #12]
 8105272:	681b      	ldr	r3, [r3, #0]
 8105274:	699b      	ldr	r3, [r3, #24]
 8105276:	f003 0320 	and.w	r3, r3, #32
 810527a:	2b20      	cmp	r3, #32
 810527c:	d003      	beq.n	8105286 <I2C_IsErrorOccurred+0xfa>
 810527e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8105282:	2b00      	cmp	r3, #0
 8105284:	d09d      	beq.n	81051c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8105286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810528a:	2b00      	cmp	r3, #0
 810528c:	d103      	bne.n	8105296 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810528e:	68fb      	ldr	r3, [r7, #12]
 8105290:	681b      	ldr	r3, [r3, #0]
 8105292:	2220      	movs	r2, #32
 8105294:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8105296:	6a3b      	ldr	r3, [r7, #32]
 8105298:	f043 0304 	orr.w	r3, r3, #4
 810529c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810529e:	2301      	movs	r3, #1
 81052a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81052a4:	68fb      	ldr	r3, [r7, #12]
 81052a6:	681b      	ldr	r3, [r3, #0]
 81052a8:	699b      	ldr	r3, [r3, #24]
 81052aa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81052ac:	69bb      	ldr	r3, [r7, #24]
 81052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81052b2:	2b00      	cmp	r3, #0
 81052b4:	d00b      	beq.n	81052ce <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81052b6:	6a3b      	ldr	r3, [r7, #32]
 81052b8:	f043 0301 	orr.w	r3, r3, #1
 81052bc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81052be:	68fb      	ldr	r3, [r7, #12]
 81052c0:	681b      	ldr	r3, [r3, #0]
 81052c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 81052c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81052c8:	2301      	movs	r3, #1
 81052ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81052ce:	69bb      	ldr	r3, [r7, #24]
 81052d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81052d4:	2b00      	cmp	r3, #0
 81052d6:	d00b      	beq.n	81052f0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 81052d8:	6a3b      	ldr	r3, [r7, #32]
 81052da:	f043 0308 	orr.w	r3, r3, #8
 81052de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81052e0:	68fb      	ldr	r3, [r7, #12]
 81052e2:	681b      	ldr	r3, [r3, #0]
 81052e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81052e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81052ea:	2301      	movs	r3, #1
 81052ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81052f0:	69bb      	ldr	r3, [r7, #24]
 81052f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81052f6:	2b00      	cmp	r3, #0
 81052f8:	d00b      	beq.n	8105312 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81052fa:	6a3b      	ldr	r3, [r7, #32]
 81052fc:	f043 0302 	orr.w	r3, r3, #2
 8105300:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8105302:	68fb      	ldr	r3, [r7, #12]
 8105304:	681b      	ldr	r3, [r3, #0]
 8105306:	f44f 7200 	mov.w	r2, #512	; 0x200
 810530a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810530c:	2301      	movs	r3, #1
 810530e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8105312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8105316:	2b00      	cmp	r3, #0
 8105318:	d01c      	beq.n	8105354 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810531a:	68f8      	ldr	r0, [r7, #12]
 810531c:	f7ff fe56 	bl	8104fcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105320:	68fb      	ldr	r3, [r7, #12]
 8105322:	681b      	ldr	r3, [r3, #0]
 8105324:	6859      	ldr	r1, [r3, #4]
 8105326:	68fb      	ldr	r3, [r7, #12]
 8105328:	681a      	ldr	r2, [r3, #0]
 810532a:	4b0d      	ldr	r3, [pc, #52]	; (8105360 <I2C_IsErrorOccurred+0x1d4>)
 810532c:	400b      	ands	r3, r1
 810532e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8105330:	68fb      	ldr	r3, [r7, #12]
 8105332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105334:	6a3b      	ldr	r3, [r7, #32]
 8105336:	431a      	orrs	r2, r3
 8105338:	68fb      	ldr	r3, [r7, #12]
 810533a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810533c:	68fb      	ldr	r3, [r7, #12]
 810533e:	2220      	movs	r2, #32
 8105340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8105344:	68fb      	ldr	r3, [r7, #12]
 8105346:	2200      	movs	r2, #0
 8105348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810534c:	68fb      	ldr	r3, [r7, #12]
 810534e:	2200      	movs	r2, #0
 8105350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8105354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8105358:	4618      	mov	r0, r3
 810535a:	3728      	adds	r7, #40	; 0x28
 810535c:	46bd      	mov	sp, r7
 810535e:	bd80      	pop	{r7, pc}
 8105360:	fe00e800 	.word	0xfe00e800

08105364 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8105364:	b480      	push	{r7}
 8105366:	b087      	sub	sp, #28
 8105368:	af00      	add	r7, sp, #0
 810536a:	60f8      	str	r0, [r7, #12]
 810536c:	607b      	str	r3, [r7, #4]
 810536e:	460b      	mov	r3, r1
 8105370:	817b      	strh	r3, [r7, #10]
 8105372:	4613      	mov	r3, r2
 8105374:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105376:	897b      	ldrh	r3, [r7, #10]
 8105378:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810537c:	7a7b      	ldrb	r3, [r7, #9]
 810537e:	041b      	lsls	r3, r3, #16
 8105380:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105384:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8105386:	687b      	ldr	r3, [r7, #4]
 8105388:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810538a:	6a3b      	ldr	r3, [r7, #32]
 810538c:	4313      	orrs	r3, r2
 810538e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8105392:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8105394:	68fb      	ldr	r3, [r7, #12]
 8105396:	681b      	ldr	r3, [r3, #0]
 8105398:	685a      	ldr	r2, [r3, #4]
 810539a:	6a3b      	ldr	r3, [r7, #32]
 810539c:	0d5b      	lsrs	r3, r3, #21
 810539e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81053a2:	4b08      	ldr	r3, [pc, #32]	; (81053c4 <I2C_TransferConfig+0x60>)
 81053a4:	430b      	orrs	r3, r1
 81053a6:	43db      	mvns	r3, r3
 81053a8:	ea02 0103 	and.w	r1, r2, r3
 81053ac:	68fb      	ldr	r3, [r7, #12]
 81053ae:	681b      	ldr	r3, [r3, #0]
 81053b0:	697a      	ldr	r2, [r7, #20]
 81053b2:	430a      	orrs	r2, r1
 81053b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81053b6:	bf00      	nop
 81053b8:	371c      	adds	r7, #28
 81053ba:	46bd      	mov	sp, r7
 81053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053c0:	4770      	bx	lr
 81053c2:	bf00      	nop
 81053c4:	03ff63ff 	.word	0x03ff63ff

081053c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81053c8:	b480      	push	{r7}
 81053ca:	b083      	sub	sp, #12
 81053cc:	af00      	add	r7, sp, #0
 81053ce:	6078      	str	r0, [r7, #4]
 81053d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81053d8:	b2db      	uxtb	r3, r3
 81053da:	2b20      	cmp	r3, #32
 81053dc:	d138      	bne.n	8105450 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81053de:	687b      	ldr	r3, [r7, #4]
 81053e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81053e4:	2b01      	cmp	r3, #1
 81053e6:	d101      	bne.n	81053ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81053e8:	2302      	movs	r3, #2
 81053ea:	e032      	b.n	8105452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81053ec:	687b      	ldr	r3, [r7, #4]
 81053ee:	2201      	movs	r2, #1
 81053f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81053f4:	687b      	ldr	r3, [r7, #4]
 81053f6:	2224      	movs	r2, #36	; 0x24
 81053f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	681b      	ldr	r3, [r3, #0]
 8105400:	681a      	ldr	r2, [r3, #0]
 8105402:	687b      	ldr	r3, [r7, #4]
 8105404:	681b      	ldr	r3, [r3, #0]
 8105406:	f022 0201 	bic.w	r2, r2, #1
 810540a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810540c:	687b      	ldr	r3, [r7, #4]
 810540e:	681b      	ldr	r3, [r3, #0]
 8105410:	681a      	ldr	r2, [r3, #0]
 8105412:	687b      	ldr	r3, [r7, #4]
 8105414:	681b      	ldr	r3, [r3, #0]
 8105416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810541a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810541c:	687b      	ldr	r3, [r7, #4]
 810541e:	681b      	ldr	r3, [r3, #0]
 8105420:	6819      	ldr	r1, [r3, #0]
 8105422:	687b      	ldr	r3, [r7, #4]
 8105424:	681b      	ldr	r3, [r3, #0]
 8105426:	683a      	ldr	r2, [r7, #0]
 8105428:	430a      	orrs	r2, r1
 810542a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810542c:	687b      	ldr	r3, [r7, #4]
 810542e:	681b      	ldr	r3, [r3, #0]
 8105430:	681a      	ldr	r2, [r3, #0]
 8105432:	687b      	ldr	r3, [r7, #4]
 8105434:	681b      	ldr	r3, [r3, #0]
 8105436:	f042 0201 	orr.w	r2, r2, #1
 810543a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	2220      	movs	r2, #32
 8105440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	2200      	movs	r2, #0
 8105448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810544c:	2300      	movs	r3, #0
 810544e:	e000      	b.n	8105452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8105450:	2302      	movs	r3, #2
  }
}
 8105452:	4618      	mov	r0, r3
 8105454:	370c      	adds	r7, #12
 8105456:	46bd      	mov	sp, r7
 8105458:	f85d 7b04 	ldr.w	r7, [sp], #4
 810545c:	4770      	bx	lr

0810545e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810545e:	b480      	push	{r7}
 8105460:	b085      	sub	sp, #20
 8105462:	af00      	add	r7, sp, #0
 8105464:	6078      	str	r0, [r7, #4]
 8105466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810546e:	b2db      	uxtb	r3, r3
 8105470:	2b20      	cmp	r3, #32
 8105472:	d139      	bne.n	81054e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105474:	687b      	ldr	r3, [r7, #4]
 8105476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810547a:	2b01      	cmp	r3, #1
 810547c:	d101      	bne.n	8105482 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810547e:	2302      	movs	r3, #2
 8105480:	e033      	b.n	81054ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	2201      	movs	r2, #1
 8105486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810548a:	687b      	ldr	r3, [r7, #4]
 810548c:	2224      	movs	r2, #36	; 0x24
 810548e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105492:	687b      	ldr	r3, [r7, #4]
 8105494:	681b      	ldr	r3, [r3, #0]
 8105496:	681a      	ldr	r2, [r3, #0]
 8105498:	687b      	ldr	r3, [r7, #4]
 810549a:	681b      	ldr	r3, [r3, #0]
 810549c:	f022 0201 	bic.w	r2, r2, #1
 81054a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81054a2:	687b      	ldr	r3, [r7, #4]
 81054a4:	681b      	ldr	r3, [r3, #0]
 81054a6:	681b      	ldr	r3, [r3, #0]
 81054a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81054aa:	68fb      	ldr	r3, [r7, #12]
 81054ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81054b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81054b2:	683b      	ldr	r3, [r7, #0]
 81054b4:	021b      	lsls	r3, r3, #8
 81054b6:	68fa      	ldr	r2, [r7, #12]
 81054b8:	4313      	orrs	r3, r2
 81054ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	68fa      	ldr	r2, [r7, #12]
 81054c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81054c4:	687b      	ldr	r3, [r7, #4]
 81054c6:	681b      	ldr	r3, [r3, #0]
 81054c8:	681a      	ldr	r2, [r3, #0]
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	681b      	ldr	r3, [r3, #0]
 81054ce:	f042 0201 	orr.w	r2, r2, #1
 81054d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	2220      	movs	r2, #32
 81054d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	2200      	movs	r2, #0
 81054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81054e4:	2300      	movs	r3, #0
 81054e6:	e000      	b.n	81054ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81054e8:	2302      	movs	r3, #2
  }
}
 81054ea:	4618      	mov	r0, r3
 81054ec:	3714      	adds	r7, #20
 81054ee:	46bd      	mov	sp, r7
 81054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054f4:	4770      	bx	lr
	...

081054f8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81054f8:	b580      	push	{r7, lr}
 81054fa:	b084      	sub	sp, #16
 81054fc:	af00      	add	r7, sp, #0
 81054fe:	60f8      	str	r0, [r7, #12]
 8105500:	460b      	mov	r3, r1
 8105502:	607a      	str	r2, [r7, #4]
 8105504:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105506:	4b37      	ldr	r3, [pc, #220]	; (81055e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105508:	681b      	ldr	r3, [r3, #0]
 810550a:	f023 0201 	bic.w	r2, r3, #1
 810550e:	4935      	ldr	r1, [pc, #212]	; (81055e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105510:	68fb      	ldr	r3, [r7, #12]
 8105512:	4313      	orrs	r3, r2
 8105514:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	2b00      	cmp	r3, #0
 810551a:	d123      	bne.n	8105564 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810551c:	f7fe ffc4 	bl	81044a8 <HAL_GetCurrentCPUID>
 8105520:	4603      	mov	r3, r0
 8105522:	2b03      	cmp	r3, #3
 8105524:	d158      	bne.n	81055d8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105526:	4b2f      	ldr	r3, [pc, #188]	; (81055e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105528:	691b      	ldr	r3, [r3, #16]
 810552a:	4a2e      	ldr	r2, [pc, #184]	; (81055e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810552c:	f023 0301 	bic.w	r3, r3, #1
 8105530:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105532:	4b2d      	ldr	r3, [pc, #180]	; (81055e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105534:	691b      	ldr	r3, [r3, #16]
 8105536:	4a2c      	ldr	r2, [pc, #176]	; (81055e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105538:	f043 0304 	orr.w	r3, r3, #4
 810553c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810553e:	f3bf 8f4f 	dsb	sy
}
 8105542:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105544:	f3bf 8f6f 	isb	sy
}
 8105548:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810554a:	7afb      	ldrb	r3, [r7, #11]
 810554c:	2b01      	cmp	r3, #1
 810554e:	d101      	bne.n	8105554 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105550:	bf30      	wfi
 8105552:	e000      	b.n	8105556 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105554:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105556:	4b24      	ldr	r3, [pc, #144]	; (81055e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105558:	691b      	ldr	r3, [r3, #16]
 810555a:	4a23      	ldr	r2, [pc, #140]	; (81055e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810555c:	f023 0304 	bic.w	r3, r3, #4
 8105560:	6113      	str	r3, [r2, #16]
 8105562:	e03c      	b.n	81055de <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	2b01      	cmp	r3, #1
 8105568:	d123      	bne.n	81055b2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810556a:	f7fe ff9d 	bl	81044a8 <HAL_GetCurrentCPUID>
 810556e:	4603      	mov	r3, r0
 8105570:	2b01      	cmp	r3, #1
 8105572:	d133      	bne.n	81055dc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105574:	4b1b      	ldr	r3, [pc, #108]	; (81055e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105576:	695b      	ldr	r3, [r3, #20]
 8105578:	4a1a      	ldr	r2, [pc, #104]	; (81055e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810557a:	f023 0302 	bic.w	r3, r3, #2
 810557e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105580:	4b19      	ldr	r3, [pc, #100]	; (81055e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105582:	691b      	ldr	r3, [r3, #16]
 8105584:	4a18      	ldr	r2, [pc, #96]	; (81055e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105586:	f043 0304 	orr.w	r3, r3, #4
 810558a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810558c:	f3bf 8f4f 	dsb	sy
}
 8105590:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105592:	f3bf 8f6f 	isb	sy
}
 8105596:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105598:	7afb      	ldrb	r3, [r7, #11]
 810559a:	2b01      	cmp	r3, #1
 810559c:	d101      	bne.n	81055a2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810559e:	bf30      	wfi
 81055a0:	e000      	b.n	81055a4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81055a2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81055a4:	4b10      	ldr	r3, [pc, #64]	; (81055e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055a6:	691b      	ldr	r3, [r3, #16]
 81055a8:	4a0f      	ldr	r2, [pc, #60]	; (81055e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055aa:	f023 0304 	bic.w	r3, r3, #4
 81055ae:	6113      	str	r3, [r2, #16]
 81055b0:	e015      	b.n	81055de <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81055b2:	f7fe ff79 	bl	81044a8 <HAL_GetCurrentCPUID>
 81055b6:	4603      	mov	r3, r0
 81055b8:	2b03      	cmp	r3, #3
 81055ba:	d106      	bne.n	81055ca <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81055bc:	4b09      	ldr	r3, [pc, #36]	; (81055e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055be:	691b      	ldr	r3, [r3, #16]
 81055c0:	4a08      	ldr	r2, [pc, #32]	; (81055e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055c2:	f023 0304 	bic.w	r3, r3, #4
 81055c6:	6113      	str	r3, [r2, #16]
 81055c8:	e009      	b.n	81055de <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81055ca:	4b06      	ldr	r3, [pc, #24]	; (81055e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055cc:	695b      	ldr	r3, [r3, #20]
 81055ce:	4a05      	ldr	r2, [pc, #20]	; (81055e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055d0:	f023 0304 	bic.w	r3, r3, #4
 81055d4:	6153      	str	r3, [r2, #20]
 81055d6:	e002      	b.n	81055de <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81055d8:	bf00      	nop
 81055da:	e000      	b.n	81055de <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81055dc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81055de:	3710      	adds	r7, #16
 81055e0:	46bd      	mov	sp, r7
 81055e2:	bd80      	pop	{r7, pc}
 81055e4:	58024800 	.word	0x58024800
 81055e8:	e000ed00 	.word	0xe000ed00

081055ec <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81055ec:	b580      	push	{r7, lr}
 81055ee:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81055f0:	f7fe ff5a 	bl	81044a8 <HAL_GetCurrentCPUID>
 81055f4:	4603      	mov	r3, r0
 81055f6:	2b03      	cmp	r3, #3
 81055f8:	d101      	bne.n	81055fe <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81055fa:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81055fc:	e001      	b.n	8105602 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81055fe:	bf40      	sev
    __WFE ();
 8105600:	bf20      	wfe
}
 8105602:	bf00      	nop
 8105604:	bd80      	pop	{r7, pc}
	...

08105608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105608:	b480      	push	{r7}
 810560a:	b089      	sub	sp, #36	; 0x24
 810560c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810560e:	4bb3      	ldr	r3, [pc, #716]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105610:	691b      	ldr	r3, [r3, #16]
 8105612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105616:	2b18      	cmp	r3, #24
 8105618:	f200 8155 	bhi.w	81058c6 <HAL_RCC_GetSysClockFreq+0x2be>
 810561c:	a201      	add	r2, pc, #4	; (adr r2, 8105624 <HAL_RCC_GetSysClockFreq+0x1c>)
 810561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105622:	bf00      	nop
 8105624:	08105689 	.word	0x08105689
 8105628:	081058c7 	.word	0x081058c7
 810562c:	081058c7 	.word	0x081058c7
 8105630:	081058c7 	.word	0x081058c7
 8105634:	081058c7 	.word	0x081058c7
 8105638:	081058c7 	.word	0x081058c7
 810563c:	081058c7 	.word	0x081058c7
 8105640:	081058c7 	.word	0x081058c7
 8105644:	081056af 	.word	0x081056af
 8105648:	081058c7 	.word	0x081058c7
 810564c:	081058c7 	.word	0x081058c7
 8105650:	081058c7 	.word	0x081058c7
 8105654:	081058c7 	.word	0x081058c7
 8105658:	081058c7 	.word	0x081058c7
 810565c:	081058c7 	.word	0x081058c7
 8105660:	081058c7 	.word	0x081058c7
 8105664:	081056b5 	.word	0x081056b5
 8105668:	081058c7 	.word	0x081058c7
 810566c:	081058c7 	.word	0x081058c7
 8105670:	081058c7 	.word	0x081058c7
 8105674:	081058c7 	.word	0x081058c7
 8105678:	081058c7 	.word	0x081058c7
 810567c:	081058c7 	.word	0x081058c7
 8105680:	081058c7 	.word	0x081058c7
 8105684:	081056bb 	.word	0x081056bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105688:	4b94      	ldr	r3, [pc, #592]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810568a:	681b      	ldr	r3, [r3, #0]
 810568c:	f003 0320 	and.w	r3, r3, #32
 8105690:	2b00      	cmp	r3, #0
 8105692:	d009      	beq.n	81056a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105694:	4b91      	ldr	r3, [pc, #580]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105696:	681b      	ldr	r3, [r3, #0]
 8105698:	08db      	lsrs	r3, r3, #3
 810569a:	f003 0303 	and.w	r3, r3, #3
 810569e:	4a90      	ldr	r2, [pc, #576]	; (81058e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81056a0:	fa22 f303 	lsr.w	r3, r2, r3
 81056a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81056a6:	e111      	b.n	81058cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81056a8:	4b8d      	ldr	r3, [pc, #564]	; (81058e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81056aa:	61bb      	str	r3, [r7, #24]
    break;
 81056ac:	e10e      	b.n	81058cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81056ae:	4b8d      	ldr	r3, [pc, #564]	; (81058e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81056b0:	61bb      	str	r3, [r7, #24]
    break;
 81056b2:	e10b      	b.n	81058cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81056b4:	4b8c      	ldr	r3, [pc, #560]	; (81058e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81056b6:	61bb      	str	r3, [r7, #24]
    break;
 81056b8:	e108      	b.n	81058cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81056ba:	4b88      	ldr	r3, [pc, #544]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056be:	f003 0303 	and.w	r3, r3, #3
 81056c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81056c4:	4b85      	ldr	r3, [pc, #532]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056c8:	091b      	lsrs	r3, r3, #4
 81056ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81056ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81056d0:	4b82      	ldr	r3, [pc, #520]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81056d4:	f003 0301 	and.w	r3, r3, #1
 81056d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81056da:	4b80      	ldr	r3, [pc, #512]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81056de:	08db      	lsrs	r3, r3, #3
 81056e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81056e4:	68fa      	ldr	r2, [r7, #12]
 81056e6:	fb02 f303 	mul.w	r3, r2, r3
 81056ea:	ee07 3a90 	vmov	s15, r3
 81056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81056f6:	693b      	ldr	r3, [r7, #16]
 81056f8:	2b00      	cmp	r3, #0
 81056fa:	f000 80e1 	beq.w	81058c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 81056fe:	697b      	ldr	r3, [r7, #20]
 8105700:	2b02      	cmp	r3, #2
 8105702:	f000 8083 	beq.w	810580c <HAL_RCC_GetSysClockFreq+0x204>
 8105706:	697b      	ldr	r3, [r7, #20]
 8105708:	2b02      	cmp	r3, #2
 810570a:	f200 80a1 	bhi.w	8105850 <HAL_RCC_GetSysClockFreq+0x248>
 810570e:	697b      	ldr	r3, [r7, #20]
 8105710:	2b00      	cmp	r3, #0
 8105712:	d003      	beq.n	810571c <HAL_RCC_GetSysClockFreq+0x114>
 8105714:	697b      	ldr	r3, [r7, #20]
 8105716:	2b01      	cmp	r3, #1
 8105718:	d056      	beq.n	81057c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810571a:	e099      	b.n	8105850 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810571c:	4b6f      	ldr	r3, [pc, #444]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810571e:	681b      	ldr	r3, [r3, #0]
 8105720:	f003 0320 	and.w	r3, r3, #32
 8105724:	2b00      	cmp	r3, #0
 8105726:	d02d      	beq.n	8105784 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105728:	4b6c      	ldr	r3, [pc, #432]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810572a:	681b      	ldr	r3, [r3, #0]
 810572c:	08db      	lsrs	r3, r3, #3
 810572e:	f003 0303 	and.w	r3, r3, #3
 8105732:	4a6b      	ldr	r2, [pc, #428]	; (81058e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105734:	fa22 f303 	lsr.w	r3, r2, r3
 8105738:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810573a:	687b      	ldr	r3, [r7, #4]
 810573c:	ee07 3a90 	vmov	s15, r3
 8105740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105744:	693b      	ldr	r3, [r7, #16]
 8105746:	ee07 3a90 	vmov	s15, r3
 810574a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810574e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105752:	4b62      	ldr	r3, [pc, #392]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810575a:	ee07 3a90 	vmov	s15, r3
 810575e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105762:	ed97 6a02 	vldr	s12, [r7, #8]
 8105766:	eddf 5a61 	vldr	s11, [pc, #388]	; 81058ec <HAL_RCC_GetSysClockFreq+0x2e4>
 810576a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810576e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810577a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810577e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8105782:	e087      	b.n	8105894 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105784:	693b      	ldr	r3, [r7, #16]
 8105786:	ee07 3a90 	vmov	s15, r3
 810578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810578e:	eddf 6a58 	vldr	s13, [pc, #352]	; 81058f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105796:	4b51      	ldr	r3, [pc, #324]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810579a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810579e:	ee07 3a90 	vmov	s15, r3
 81057a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81057aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 81058ec <HAL_RCC_GetSysClockFreq+0x2e4>
 81057ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81057c6:	e065      	b.n	8105894 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81057c8:	693b      	ldr	r3, [r7, #16]
 81057ca:	ee07 3a90 	vmov	s15, r3
 81057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 81058f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 81057d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057da:	4b40      	ldr	r3, [pc, #256]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81057de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057e2:	ee07 3a90 	vmov	s15, r3
 81057e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81057ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81058ec <HAL_RCC_GetSysClockFreq+0x2e4>
 81057f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810580a:	e043      	b.n	8105894 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810580c:	693b      	ldr	r3, [r7, #16]
 810580e:	ee07 3a90 	vmov	s15, r3
 8105812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105816:	eddf 6a38 	vldr	s13, [pc, #224]	; 81058f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 810581a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810581e:	4b2f      	ldr	r3, [pc, #188]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105826:	ee07 3a90 	vmov	s15, r3
 810582a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810582e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105832:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81058ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8105836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810583a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810583e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105846:	ee67 7a27 	vmul.f32	s15, s14, s15
 810584a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810584e:	e021      	b.n	8105894 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105850:	693b      	ldr	r3, [r7, #16]
 8105852:	ee07 3a90 	vmov	s15, r3
 8105856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810585a:	eddf 6a26 	vldr	s13, [pc, #152]	; 81058f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810585e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105862:	4b1e      	ldr	r3, [pc, #120]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810586a:	ee07 3a90 	vmov	s15, r3
 810586e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105872:	ed97 6a02 	vldr	s12, [r7, #8]
 8105876:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81058ec <HAL_RCC_GetSysClockFreq+0x2e4>
 810587a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810587e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810588a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810588e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105892:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8105894:	4b11      	ldr	r3, [pc, #68]	; (81058dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105898:	0a5b      	lsrs	r3, r3, #9
 810589a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810589e:	3301      	adds	r3, #1
 81058a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81058a2:	683b      	ldr	r3, [r7, #0]
 81058a4:	ee07 3a90 	vmov	s15, r3
 81058a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81058ac:	edd7 6a07 	vldr	s13, [r7, #28]
 81058b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81058b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81058b8:	ee17 3a90 	vmov	r3, s15
 81058bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81058be:	e005      	b.n	81058cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81058c0:	2300      	movs	r3, #0
 81058c2:	61bb      	str	r3, [r7, #24]
    break;
 81058c4:	e002      	b.n	81058cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81058c6:	4b07      	ldr	r3, [pc, #28]	; (81058e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81058c8:	61bb      	str	r3, [r7, #24]
    break;
 81058ca:	bf00      	nop
  }

  return sysclockfreq;
 81058cc:	69bb      	ldr	r3, [r7, #24]
}
 81058ce:	4618      	mov	r0, r3
 81058d0:	3724      	adds	r7, #36	; 0x24
 81058d2:	46bd      	mov	sp, r7
 81058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058d8:	4770      	bx	lr
 81058da:	bf00      	nop
 81058dc:	58024400 	.word	0x58024400
 81058e0:	03d09000 	.word	0x03d09000
 81058e4:	003d0900 	.word	0x003d0900
 81058e8:	007a1200 	.word	0x007a1200
 81058ec:	46000000 	.word	0x46000000
 81058f0:	4c742400 	.word	0x4c742400
 81058f4:	4a742400 	.word	0x4a742400
 81058f8:	4af42400 	.word	0x4af42400

081058fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81058fc:	b580      	push	{r7, lr}
 81058fe:	b082      	sub	sp, #8
 8105900:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105902:	f7ff fe81 	bl	8105608 <HAL_RCC_GetSysClockFreq>
 8105906:	4602      	mov	r2, r0
 8105908:	4b11      	ldr	r3, [pc, #68]	; (8105950 <HAL_RCC_GetHCLKFreq+0x54>)
 810590a:	699b      	ldr	r3, [r3, #24]
 810590c:	0a1b      	lsrs	r3, r3, #8
 810590e:	f003 030f 	and.w	r3, r3, #15
 8105912:	4910      	ldr	r1, [pc, #64]	; (8105954 <HAL_RCC_GetHCLKFreq+0x58>)
 8105914:	5ccb      	ldrb	r3, [r1, r3]
 8105916:	f003 031f 	and.w	r3, r3, #31
 810591a:	fa22 f303 	lsr.w	r3, r2, r3
 810591e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105920:	4b0b      	ldr	r3, [pc, #44]	; (8105950 <HAL_RCC_GetHCLKFreq+0x54>)
 8105922:	699b      	ldr	r3, [r3, #24]
 8105924:	f003 030f 	and.w	r3, r3, #15
 8105928:	4a0a      	ldr	r2, [pc, #40]	; (8105954 <HAL_RCC_GetHCLKFreq+0x58>)
 810592a:	5cd3      	ldrb	r3, [r2, r3]
 810592c:	f003 031f 	and.w	r3, r3, #31
 8105930:	687a      	ldr	r2, [r7, #4]
 8105932:	fa22 f303 	lsr.w	r3, r2, r3
 8105936:	4a08      	ldr	r2, [pc, #32]	; (8105958 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105938:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810593a:	4b07      	ldr	r3, [pc, #28]	; (8105958 <HAL_RCC_GetHCLKFreq+0x5c>)
 810593c:	681b      	ldr	r3, [r3, #0]
 810593e:	4a07      	ldr	r2, [pc, #28]	; (810595c <HAL_RCC_GetHCLKFreq+0x60>)
 8105940:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105942:	4b05      	ldr	r3, [pc, #20]	; (8105958 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105944:	681b      	ldr	r3, [r3, #0]
}
 8105946:	4618      	mov	r0, r3
 8105948:	3708      	adds	r7, #8
 810594a:	46bd      	mov	sp, r7
 810594c:	bd80      	pop	{r7, pc}
 810594e:	bf00      	nop
 8105950:	58024400 	.word	0x58024400
 8105954:	0810affc 	.word	0x0810affc
 8105958:	10000004 	.word	0x10000004
 810595c:	10000000 	.word	0x10000000

08105960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105960:	b580      	push	{r7, lr}
 8105962:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105964:	f7ff ffca 	bl	81058fc <HAL_RCC_GetHCLKFreq>
 8105968:	4602      	mov	r2, r0
 810596a:	4b06      	ldr	r3, [pc, #24]	; (8105984 <HAL_RCC_GetPCLK1Freq+0x24>)
 810596c:	69db      	ldr	r3, [r3, #28]
 810596e:	091b      	lsrs	r3, r3, #4
 8105970:	f003 0307 	and.w	r3, r3, #7
 8105974:	4904      	ldr	r1, [pc, #16]	; (8105988 <HAL_RCC_GetPCLK1Freq+0x28>)
 8105976:	5ccb      	ldrb	r3, [r1, r3]
 8105978:	f003 031f 	and.w	r3, r3, #31
 810597c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105980:	4618      	mov	r0, r3
 8105982:	bd80      	pop	{r7, pc}
 8105984:	58024400 	.word	0x58024400
 8105988:	0810affc 	.word	0x0810affc

0810598c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810598c:	b580      	push	{r7, lr}
 810598e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105990:	f7ff ffb4 	bl	81058fc <HAL_RCC_GetHCLKFreq>
 8105994:	4602      	mov	r2, r0
 8105996:	4b06      	ldr	r3, [pc, #24]	; (81059b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8105998:	69db      	ldr	r3, [r3, #28]
 810599a:	0a1b      	lsrs	r3, r3, #8
 810599c:	f003 0307 	and.w	r3, r3, #7
 81059a0:	4904      	ldr	r1, [pc, #16]	; (81059b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 81059a2:	5ccb      	ldrb	r3, [r1, r3]
 81059a4:	f003 031f 	and.w	r3, r3, #31
 81059a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81059ac:	4618      	mov	r0, r3
 81059ae:	bd80      	pop	{r7, pc}
 81059b0:	58024400 	.word	0x58024400
 81059b4:	0810affc 	.word	0x0810affc

081059b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81059b8:	b580      	push	{r7, lr}
 81059ba:	b086      	sub	sp, #24
 81059bc:	af00      	add	r7, sp, #0
 81059be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81059c0:	2300      	movs	r3, #0
 81059c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81059c4:	2300      	movs	r3, #0
 81059c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	681b      	ldr	r3, [r3, #0]
 81059cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81059d0:	2b00      	cmp	r3, #0
 81059d2:	d03f      	beq.n	8105a54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81059d4:	687b      	ldr	r3, [r7, #4]
 81059d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81059d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81059dc:	d02a      	beq.n	8105a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81059de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81059e2:	d824      	bhi.n	8105a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 81059e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81059e8:	d018      	beq.n	8105a1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 81059ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81059ee:	d81e      	bhi.n	8105a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 81059f0:	2b00      	cmp	r3, #0
 81059f2:	d003      	beq.n	81059fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 81059f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81059f8:	d007      	beq.n	8105a0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 81059fa:	e018      	b.n	8105a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81059fc:	4ba3      	ldr	r3, [pc, #652]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a00:	4aa2      	ldr	r2, [pc, #648]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105a06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105a08:	e015      	b.n	8105a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105a0a:	687b      	ldr	r3, [r7, #4]
 8105a0c:	3304      	adds	r3, #4
 8105a0e:	2102      	movs	r1, #2
 8105a10:	4618      	mov	r0, r3
 8105a12:	f001 fff9 	bl	8107a08 <RCCEx_PLL2_Config>
 8105a16:	4603      	mov	r3, r0
 8105a18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105a1a:	e00c      	b.n	8105a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	3324      	adds	r3, #36	; 0x24
 8105a20:	2102      	movs	r1, #2
 8105a22:	4618      	mov	r0, r3
 8105a24:	f002 f8a2 	bl	8107b6c <RCCEx_PLL3_Config>
 8105a28:	4603      	mov	r3, r0
 8105a2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105a2c:	e003      	b.n	8105a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105a2e:	2301      	movs	r3, #1
 8105a30:	75fb      	strb	r3, [r7, #23]
      break;
 8105a32:	e000      	b.n	8105a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8105a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105a36:	7dfb      	ldrb	r3, [r7, #23]
 8105a38:	2b00      	cmp	r3, #0
 8105a3a:	d109      	bne.n	8105a50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105a3c:	4b93      	ldr	r3, [pc, #588]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105a40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105a48:	4990      	ldr	r1, [pc, #576]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a4a:	4313      	orrs	r3, r2
 8105a4c:	650b      	str	r3, [r1, #80]	; 0x50
 8105a4e:	e001      	b.n	8105a54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a50:	7dfb      	ldrb	r3, [r7, #23]
 8105a52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105a54:	687b      	ldr	r3, [r7, #4]
 8105a56:	681b      	ldr	r3, [r3, #0]
 8105a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105a5c:	2b00      	cmp	r3, #0
 8105a5e:	d03d      	beq.n	8105adc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a64:	2b04      	cmp	r3, #4
 8105a66:	d826      	bhi.n	8105ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8105a68:	a201      	add	r2, pc, #4	; (adr r2, 8105a70 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8105a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a6e:	bf00      	nop
 8105a70:	08105a85 	.word	0x08105a85
 8105a74:	08105a93 	.word	0x08105a93
 8105a78:	08105aa5 	.word	0x08105aa5
 8105a7c:	08105abd 	.word	0x08105abd
 8105a80:	08105abd 	.word	0x08105abd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105a84:	4b81      	ldr	r3, [pc, #516]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a88:	4a80      	ldr	r2, [pc, #512]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105a90:	e015      	b.n	8105abe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	3304      	adds	r3, #4
 8105a96:	2100      	movs	r1, #0
 8105a98:	4618      	mov	r0, r3
 8105a9a:	f001 ffb5 	bl	8107a08 <RCCEx_PLL2_Config>
 8105a9e:	4603      	mov	r3, r0
 8105aa0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105aa2:	e00c      	b.n	8105abe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	3324      	adds	r3, #36	; 0x24
 8105aa8:	2100      	movs	r1, #0
 8105aaa:	4618      	mov	r0, r3
 8105aac:	f002 f85e 	bl	8107b6c <RCCEx_PLL3_Config>
 8105ab0:	4603      	mov	r3, r0
 8105ab2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105ab4:	e003      	b.n	8105abe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105ab6:	2301      	movs	r3, #1
 8105ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8105aba:	e000      	b.n	8105abe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8105abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105abe:	7dfb      	ldrb	r3, [r7, #23]
 8105ac0:	2b00      	cmp	r3, #0
 8105ac2:	d109      	bne.n	8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105ac4:	4b71      	ldr	r3, [pc, #452]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105ac8:	f023 0207 	bic.w	r2, r3, #7
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105ad0:	496e      	ldr	r1, [pc, #440]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105ad2:	4313      	orrs	r3, r2
 8105ad4:	650b      	str	r3, [r1, #80]	; 0x50
 8105ad6:	e001      	b.n	8105adc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ad8:	7dfb      	ldrb	r3, [r7, #23]
 8105ada:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	681b      	ldr	r3, [r3, #0]
 8105ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105ae4:	2b00      	cmp	r3, #0
 8105ae6:	d042      	beq.n	8105b6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8105ae8:	687b      	ldr	r3, [r7, #4]
 8105aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105af0:	d02b      	beq.n	8105b4a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8105af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105af6:	d825      	bhi.n	8105b44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105af8:	2bc0      	cmp	r3, #192	; 0xc0
 8105afa:	d028      	beq.n	8105b4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8105afc:	2bc0      	cmp	r3, #192	; 0xc0
 8105afe:	d821      	bhi.n	8105b44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105b00:	2b80      	cmp	r3, #128	; 0x80
 8105b02:	d016      	beq.n	8105b32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8105b04:	2b80      	cmp	r3, #128	; 0x80
 8105b06:	d81d      	bhi.n	8105b44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105b08:	2b00      	cmp	r3, #0
 8105b0a:	d002      	beq.n	8105b12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8105b0c:	2b40      	cmp	r3, #64	; 0x40
 8105b0e:	d007      	beq.n	8105b20 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8105b10:	e018      	b.n	8105b44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b12:	4b5e      	ldr	r3, [pc, #376]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b16:	4a5d      	ldr	r2, [pc, #372]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105b1e:	e017      	b.n	8105b50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	3304      	adds	r3, #4
 8105b24:	2100      	movs	r1, #0
 8105b26:	4618      	mov	r0, r3
 8105b28:	f001 ff6e 	bl	8107a08 <RCCEx_PLL2_Config>
 8105b2c:	4603      	mov	r3, r0
 8105b2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105b30:	e00e      	b.n	8105b50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105b32:	687b      	ldr	r3, [r7, #4]
 8105b34:	3324      	adds	r3, #36	; 0x24
 8105b36:	2100      	movs	r1, #0
 8105b38:	4618      	mov	r0, r3
 8105b3a:	f002 f817 	bl	8107b6c <RCCEx_PLL3_Config>
 8105b3e:	4603      	mov	r3, r0
 8105b40:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105b42:	e005      	b.n	8105b50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105b44:	2301      	movs	r3, #1
 8105b46:	75fb      	strb	r3, [r7, #23]
      break;
 8105b48:	e002      	b.n	8105b50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8105b4a:	bf00      	nop
 8105b4c:	e000      	b.n	8105b50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8105b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105b50:	7dfb      	ldrb	r3, [r7, #23]
 8105b52:	2b00      	cmp	r3, #0
 8105b54:	d109      	bne.n	8105b6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105b56:	4b4d      	ldr	r3, [pc, #308]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105b5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8105b5e:	687b      	ldr	r3, [r7, #4]
 8105b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b62:	494a      	ldr	r1, [pc, #296]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105b64:	4313      	orrs	r3, r2
 8105b66:	650b      	str	r3, [r1, #80]	; 0x50
 8105b68:	e001      	b.n	8105b6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b6a:	7dfb      	ldrb	r3, [r7, #23]
 8105b6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	681b      	ldr	r3, [r3, #0]
 8105b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8105b76:	2b00      	cmp	r3, #0
 8105b78:	d049      	beq.n	8105c0e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105b80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105b84:	d030      	beq.n	8105be8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8105b86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105b8a:	d82a      	bhi.n	8105be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105b8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105b90:	d02c      	beq.n	8105bec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8105b92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105b96:	d824      	bhi.n	8105be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105b9c:	d018      	beq.n	8105bd0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8105b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105ba2:	d81e      	bhi.n	8105be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105ba4:	2b00      	cmp	r3, #0
 8105ba6:	d003      	beq.n	8105bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8105ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105bac:	d007      	beq.n	8105bbe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8105bae:	e018      	b.n	8105be2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105bb0:	4b36      	ldr	r3, [pc, #216]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bb4:	4a35      	ldr	r2, [pc, #212]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105bbc:	e017      	b.n	8105bee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105bbe:	687b      	ldr	r3, [r7, #4]
 8105bc0:	3304      	adds	r3, #4
 8105bc2:	2100      	movs	r1, #0
 8105bc4:	4618      	mov	r0, r3
 8105bc6:	f001 ff1f 	bl	8107a08 <RCCEx_PLL2_Config>
 8105bca:	4603      	mov	r3, r0
 8105bcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105bce:	e00e      	b.n	8105bee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105bd0:	687b      	ldr	r3, [r7, #4]
 8105bd2:	3324      	adds	r3, #36	; 0x24
 8105bd4:	2100      	movs	r1, #0
 8105bd6:	4618      	mov	r0, r3
 8105bd8:	f001 ffc8 	bl	8107b6c <RCCEx_PLL3_Config>
 8105bdc:	4603      	mov	r3, r0
 8105bde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105be0:	e005      	b.n	8105bee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105be2:	2301      	movs	r3, #1
 8105be4:	75fb      	strb	r3, [r7, #23]
      break;
 8105be6:	e002      	b.n	8105bee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105be8:	bf00      	nop
 8105bea:	e000      	b.n	8105bee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105bee:	7dfb      	ldrb	r3, [r7, #23]
 8105bf0:	2b00      	cmp	r3, #0
 8105bf2:	d10a      	bne.n	8105c0a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105bf4:	4b25      	ldr	r3, [pc, #148]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105bf8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105c02:	4922      	ldr	r1, [pc, #136]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c04:	4313      	orrs	r3, r2
 8105c06:	658b      	str	r3, [r1, #88]	; 0x58
 8105c08:	e001      	b.n	8105c0e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c0a:	7dfb      	ldrb	r3, [r7, #23]
 8105c0c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105c0e:	687b      	ldr	r3, [r7, #4]
 8105c10:	681b      	ldr	r3, [r3, #0]
 8105c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105c16:	2b00      	cmp	r3, #0
 8105c18:	d04b      	beq.n	8105cb2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8105c1a:	687b      	ldr	r3, [r7, #4]
 8105c1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105c24:	d030      	beq.n	8105c88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8105c26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105c2a:	d82a      	bhi.n	8105c82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105c2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105c30:	d02e      	beq.n	8105c90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8105c32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105c36:	d824      	bhi.n	8105c82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105c38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105c3c:	d018      	beq.n	8105c70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8105c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105c42:	d81e      	bhi.n	8105c82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105c44:	2b00      	cmp	r3, #0
 8105c46:	d003      	beq.n	8105c50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8105c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105c4c:	d007      	beq.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8105c4e:	e018      	b.n	8105c82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c50:	4b0e      	ldr	r3, [pc, #56]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c54:	4a0d      	ldr	r2, [pc, #52]	; (8105c8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105c5c:	e019      	b.n	8105c92 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	3304      	adds	r3, #4
 8105c62:	2100      	movs	r1, #0
 8105c64:	4618      	mov	r0, r3
 8105c66:	f001 fecf 	bl	8107a08 <RCCEx_PLL2_Config>
 8105c6a:	4603      	mov	r3, r0
 8105c6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105c6e:	e010      	b.n	8105c92 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	3324      	adds	r3, #36	; 0x24
 8105c74:	2100      	movs	r1, #0
 8105c76:	4618      	mov	r0, r3
 8105c78:	f001 ff78 	bl	8107b6c <RCCEx_PLL3_Config>
 8105c7c:	4603      	mov	r3, r0
 8105c7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105c80:	e007      	b.n	8105c92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105c82:	2301      	movs	r3, #1
 8105c84:	75fb      	strb	r3, [r7, #23]
      break;
 8105c86:	e004      	b.n	8105c92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8105c88:	bf00      	nop
 8105c8a:	e002      	b.n	8105c92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8105c8c:	58024400 	.word	0x58024400
      break;
 8105c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105c92:	7dfb      	ldrb	r3, [r7, #23]
 8105c94:	2b00      	cmp	r3, #0
 8105c96:	d10a      	bne.n	8105cae <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105c98:	4b99      	ldr	r3, [pc, #612]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105c9c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8105ca0:	687b      	ldr	r3, [r7, #4]
 8105ca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105ca6:	4996      	ldr	r1, [pc, #600]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105ca8:	4313      	orrs	r3, r2
 8105caa:	658b      	str	r3, [r1, #88]	; 0x58
 8105cac:	e001      	b.n	8105cb2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cae:	7dfb      	ldrb	r3, [r7, #23]
 8105cb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105cb2:	687b      	ldr	r3, [r7, #4]
 8105cb4:	681b      	ldr	r3, [r3, #0]
 8105cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105cba:	2b00      	cmp	r3, #0
 8105cbc:	d032      	beq.n	8105d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8105cbe:	687b      	ldr	r3, [r7, #4]
 8105cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105cc2:	2b30      	cmp	r3, #48	; 0x30
 8105cc4:	d01c      	beq.n	8105d00 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8105cc6:	2b30      	cmp	r3, #48	; 0x30
 8105cc8:	d817      	bhi.n	8105cfa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105cca:	2b20      	cmp	r3, #32
 8105ccc:	d00c      	beq.n	8105ce8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8105cce:	2b20      	cmp	r3, #32
 8105cd0:	d813      	bhi.n	8105cfa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105cd2:	2b00      	cmp	r3, #0
 8105cd4:	d016      	beq.n	8105d04 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8105cd6:	2b10      	cmp	r3, #16
 8105cd8:	d10f      	bne.n	8105cfa <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105cda:	4b89      	ldr	r3, [pc, #548]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105cde:	4a88      	ldr	r2, [pc, #544]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105ce6:	e00e      	b.n	8105d06 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105ce8:	687b      	ldr	r3, [r7, #4]
 8105cea:	3304      	adds	r3, #4
 8105cec:	2102      	movs	r1, #2
 8105cee:	4618      	mov	r0, r3
 8105cf0:	f001 fe8a 	bl	8107a08 <RCCEx_PLL2_Config>
 8105cf4:	4603      	mov	r3, r0
 8105cf6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105cf8:	e005      	b.n	8105d06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105cfa:	2301      	movs	r3, #1
 8105cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8105cfe:	e002      	b.n	8105d06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105d00:	bf00      	nop
 8105d02:	e000      	b.n	8105d06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105d06:	7dfb      	ldrb	r3, [r7, #23]
 8105d08:	2b00      	cmp	r3, #0
 8105d0a:	d109      	bne.n	8105d20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105d0c:	4b7c      	ldr	r3, [pc, #496]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105d10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105d18:	4979      	ldr	r1, [pc, #484]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105d1a:	4313      	orrs	r3, r2
 8105d1c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105d1e:	e001      	b.n	8105d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d20:	7dfb      	ldrb	r3, [r7, #23]
 8105d22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	681b      	ldr	r3, [r3, #0]
 8105d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8105d2c:	2b00      	cmp	r3, #0
 8105d2e:	d047      	beq.n	8105dc0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105d38:	d030      	beq.n	8105d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8105d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105d3e:	d82a      	bhi.n	8105d96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105d40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105d44:	d02c      	beq.n	8105da0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8105d46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105d4a:	d824      	bhi.n	8105d96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105d50:	d018      	beq.n	8105d84 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8105d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105d56:	d81e      	bhi.n	8105d96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105d58:	2b00      	cmp	r3, #0
 8105d5a:	d003      	beq.n	8105d64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8105d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105d60:	d007      	beq.n	8105d72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8105d62:	e018      	b.n	8105d96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d64:	4b66      	ldr	r3, [pc, #408]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d68:	4a65      	ldr	r2, [pc, #404]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105d70:	e017      	b.n	8105da2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105d72:	687b      	ldr	r3, [r7, #4]
 8105d74:	3304      	adds	r3, #4
 8105d76:	2100      	movs	r1, #0
 8105d78:	4618      	mov	r0, r3
 8105d7a:	f001 fe45 	bl	8107a08 <RCCEx_PLL2_Config>
 8105d7e:	4603      	mov	r3, r0
 8105d80:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105d82:	e00e      	b.n	8105da2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105d84:	687b      	ldr	r3, [r7, #4]
 8105d86:	3324      	adds	r3, #36	; 0x24
 8105d88:	2100      	movs	r1, #0
 8105d8a:	4618      	mov	r0, r3
 8105d8c:	f001 feee 	bl	8107b6c <RCCEx_PLL3_Config>
 8105d90:	4603      	mov	r3, r0
 8105d92:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105d94:	e005      	b.n	8105da2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105d96:	2301      	movs	r3, #1
 8105d98:	75fb      	strb	r3, [r7, #23]
      break;
 8105d9a:	e002      	b.n	8105da2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105d9c:	bf00      	nop
 8105d9e:	e000      	b.n	8105da2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105da2:	7dfb      	ldrb	r3, [r7, #23]
 8105da4:	2b00      	cmp	r3, #0
 8105da6:	d109      	bne.n	8105dbc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105da8:	4b55      	ldr	r3, [pc, #340]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105dac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105db4:	4952      	ldr	r1, [pc, #328]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105db6:	4313      	orrs	r3, r2
 8105db8:	650b      	str	r3, [r1, #80]	; 0x50
 8105dba:	e001      	b.n	8105dc0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105dbc:	7dfb      	ldrb	r3, [r7, #23]
 8105dbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105dc0:	687b      	ldr	r3, [r7, #4]
 8105dc2:	681b      	ldr	r3, [r3, #0]
 8105dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8105dc8:	2b00      	cmp	r3, #0
 8105dca:	d049      	beq.n	8105e60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105dd4:	d02e      	beq.n	8105e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8105dd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105dda:	d828      	bhi.n	8105e2e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105ddc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105de0:	d02a      	beq.n	8105e38 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8105de2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105de6:	d822      	bhi.n	8105e2e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105de8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105dec:	d026      	beq.n	8105e3c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8105dee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105df2:	d81c      	bhi.n	8105e2e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105df8:	d010      	beq.n	8105e1c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8105dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105dfe:	d816      	bhi.n	8105e2e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105e00:	2b00      	cmp	r3, #0
 8105e02:	d01d      	beq.n	8105e40 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8105e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105e08:	d111      	bne.n	8105e2e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105e0a:	687b      	ldr	r3, [r7, #4]
 8105e0c:	3304      	adds	r3, #4
 8105e0e:	2101      	movs	r1, #1
 8105e10:	4618      	mov	r0, r3
 8105e12:	f001 fdf9 	bl	8107a08 <RCCEx_PLL2_Config>
 8105e16:	4603      	mov	r3, r0
 8105e18:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105e1a:	e012      	b.n	8105e42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	3324      	adds	r3, #36	; 0x24
 8105e20:	2101      	movs	r1, #1
 8105e22:	4618      	mov	r0, r3
 8105e24:	f001 fea2 	bl	8107b6c <RCCEx_PLL3_Config>
 8105e28:	4603      	mov	r3, r0
 8105e2a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105e2c:	e009      	b.n	8105e42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105e2e:	2301      	movs	r3, #1
 8105e30:	75fb      	strb	r3, [r7, #23]
      break;
 8105e32:	e006      	b.n	8105e42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105e34:	bf00      	nop
 8105e36:	e004      	b.n	8105e42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105e38:	bf00      	nop
 8105e3a:	e002      	b.n	8105e42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105e3c:	bf00      	nop
 8105e3e:	e000      	b.n	8105e42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105e42:	7dfb      	ldrb	r3, [r7, #23]
 8105e44:	2b00      	cmp	r3, #0
 8105e46:	d109      	bne.n	8105e5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105e48:	4b2d      	ldr	r3, [pc, #180]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105e4c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8105e50:	687b      	ldr	r3, [r7, #4]
 8105e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105e54:	492a      	ldr	r1, [pc, #168]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e56:	4313      	orrs	r3, r2
 8105e58:	650b      	str	r3, [r1, #80]	; 0x50
 8105e5a:	e001      	b.n	8105e60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e5c:	7dfb      	ldrb	r3, [r7, #23]
 8105e5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105e60:	687b      	ldr	r3, [r7, #4]
 8105e62:	681b      	ldr	r3, [r3, #0]
 8105e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8105e68:	2b00      	cmp	r3, #0
 8105e6a:	d04d      	beq.n	8105f08 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8105e6c:	687b      	ldr	r3, [r7, #4]
 8105e6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105e76:	d02e      	beq.n	8105ed6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8105e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105e7c:	d828      	bhi.n	8105ed0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105e82:	d02a      	beq.n	8105eda <HAL_RCCEx_PeriphCLKConfig+0x522>
 8105e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105e88:	d822      	bhi.n	8105ed0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105e8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105e8e:	d026      	beq.n	8105ede <HAL_RCCEx_PeriphCLKConfig+0x526>
 8105e90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105e94:	d81c      	bhi.n	8105ed0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105e9a:	d010      	beq.n	8105ebe <HAL_RCCEx_PeriphCLKConfig+0x506>
 8105e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ea0:	d816      	bhi.n	8105ed0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105ea2:	2b00      	cmp	r3, #0
 8105ea4:	d01d      	beq.n	8105ee2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8105ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105eaa:	d111      	bne.n	8105ed0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105eac:	687b      	ldr	r3, [r7, #4]
 8105eae:	3304      	adds	r3, #4
 8105eb0:	2101      	movs	r1, #1
 8105eb2:	4618      	mov	r0, r3
 8105eb4:	f001 fda8 	bl	8107a08 <RCCEx_PLL2_Config>
 8105eb8:	4603      	mov	r3, r0
 8105eba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105ebc:	e012      	b.n	8105ee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105ebe:	687b      	ldr	r3, [r7, #4]
 8105ec0:	3324      	adds	r3, #36	; 0x24
 8105ec2:	2101      	movs	r1, #1
 8105ec4:	4618      	mov	r0, r3
 8105ec6:	f001 fe51 	bl	8107b6c <RCCEx_PLL3_Config>
 8105eca:	4603      	mov	r3, r0
 8105ecc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105ece:	e009      	b.n	8105ee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8105ed0:	2301      	movs	r3, #1
 8105ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8105ed4:	e006      	b.n	8105ee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105ed6:	bf00      	nop
 8105ed8:	e004      	b.n	8105ee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105eda:	bf00      	nop
 8105edc:	e002      	b.n	8105ee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105ede:	bf00      	nop
 8105ee0:	e000      	b.n	8105ee4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105ee4:	7dfb      	ldrb	r3, [r7, #23]
 8105ee6:	2b00      	cmp	r3, #0
 8105ee8:	d10c      	bne.n	8105f04 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105eea:	4b05      	ldr	r3, [pc, #20]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105eee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8105ef2:	687b      	ldr	r3, [r7, #4]
 8105ef4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105ef8:	4901      	ldr	r1, [pc, #4]	; (8105f00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105efa:	4313      	orrs	r3, r2
 8105efc:	658b      	str	r3, [r1, #88]	; 0x58
 8105efe:	e003      	b.n	8105f08 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8105f00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f04:	7dfb      	ldrb	r3, [r7, #23]
 8105f06:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105f08:	687b      	ldr	r3, [r7, #4]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105f10:	2b00      	cmp	r3, #0
 8105f12:	d02f      	beq.n	8105f74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105f1c:	d00e      	beq.n	8105f3c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8105f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105f22:	d814      	bhi.n	8105f4e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8105f24:	2b00      	cmp	r3, #0
 8105f26:	d015      	beq.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8105f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105f2c:	d10f      	bne.n	8105f4e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105f2e:	4bb0      	ldr	r3, [pc, #704]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f32:	4aaf      	ldr	r2, [pc, #700]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105f38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105f3a:	e00c      	b.n	8105f56 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105f3c:	687b      	ldr	r3, [r7, #4]
 8105f3e:	3304      	adds	r3, #4
 8105f40:	2101      	movs	r1, #1
 8105f42:	4618      	mov	r0, r3
 8105f44:	f001 fd60 	bl	8107a08 <RCCEx_PLL2_Config>
 8105f48:	4603      	mov	r3, r0
 8105f4a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105f4c:	e003      	b.n	8105f56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105f4e:	2301      	movs	r3, #1
 8105f50:	75fb      	strb	r3, [r7, #23]
      break;
 8105f52:	e000      	b.n	8105f56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8105f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105f56:	7dfb      	ldrb	r3, [r7, #23]
 8105f58:	2b00      	cmp	r3, #0
 8105f5a:	d109      	bne.n	8105f70 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105f5c:	4ba4      	ldr	r3, [pc, #656]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105f64:	687b      	ldr	r3, [r7, #4]
 8105f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105f68:	49a1      	ldr	r1, [pc, #644]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105f6a:	4313      	orrs	r3, r2
 8105f6c:	650b      	str	r3, [r1, #80]	; 0x50
 8105f6e:	e001      	b.n	8105f74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f70:	7dfb      	ldrb	r3, [r7, #23]
 8105f72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	681b      	ldr	r3, [r3, #0]
 8105f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8105f7c:	2b00      	cmp	r3, #0
 8105f7e:	d032      	beq.n	8105fe6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105f84:	2b03      	cmp	r3, #3
 8105f86:	d81b      	bhi.n	8105fc0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8105f88:	a201      	add	r2, pc, #4	; (adr r2, 8105f90 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8105f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105f8e:	bf00      	nop
 8105f90:	08105fc7 	.word	0x08105fc7
 8105f94:	08105fa1 	.word	0x08105fa1
 8105f98:	08105faf 	.word	0x08105faf
 8105f9c:	08105fc7 	.word	0x08105fc7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105fa0:	4b93      	ldr	r3, [pc, #588]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105fa4:	4a92      	ldr	r2, [pc, #584]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105faa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8105fac:	e00c      	b.n	8105fc8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105fae:	687b      	ldr	r3, [r7, #4]
 8105fb0:	3304      	adds	r3, #4
 8105fb2:	2102      	movs	r1, #2
 8105fb4:	4618      	mov	r0, r3
 8105fb6:	f001 fd27 	bl	8107a08 <RCCEx_PLL2_Config>
 8105fba:	4603      	mov	r3, r0
 8105fbc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8105fbe:	e003      	b.n	8105fc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105fc0:	2301      	movs	r3, #1
 8105fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8105fc4:	e000      	b.n	8105fc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8105fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105fc8:	7dfb      	ldrb	r3, [r7, #23]
 8105fca:	2b00      	cmp	r3, #0
 8105fcc:	d109      	bne.n	8105fe2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105fce:	4b88      	ldr	r3, [pc, #544]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105fd2:	f023 0203 	bic.w	r2, r3, #3
 8105fd6:	687b      	ldr	r3, [r7, #4]
 8105fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105fda:	4985      	ldr	r1, [pc, #532]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105fdc:	4313      	orrs	r3, r2
 8105fde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105fe0:	e001      	b.n	8105fe6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105fe2:	7dfb      	ldrb	r3, [r7, #23]
 8105fe4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	681b      	ldr	r3, [r3, #0]
 8105fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8105fee:	2b00      	cmp	r3, #0
 8105ff0:	f000 8088 	beq.w	8106104 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105ff4:	4b7f      	ldr	r3, [pc, #508]	; (81061f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8105ff6:	681b      	ldr	r3, [r3, #0]
 8105ff8:	4a7e      	ldr	r2, [pc, #504]	; (81061f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8105ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105ffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106000:	f7fd f876 	bl	81030f0 <HAL_GetTick>
 8106004:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106006:	e009      	b.n	810601c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106008:	f7fd f872 	bl	81030f0 <HAL_GetTick>
 810600c:	4602      	mov	r2, r0
 810600e:	693b      	ldr	r3, [r7, #16]
 8106010:	1ad3      	subs	r3, r2, r3
 8106012:	2b64      	cmp	r3, #100	; 0x64
 8106014:	d902      	bls.n	810601c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8106016:	2303      	movs	r3, #3
 8106018:	75fb      	strb	r3, [r7, #23]
        break;
 810601a:	e005      	b.n	8106028 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810601c:	4b75      	ldr	r3, [pc, #468]	; (81061f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810601e:	681b      	ldr	r3, [r3, #0]
 8106020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106024:	2b00      	cmp	r3, #0
 8106026:	d0ef      	beq.n	8106008 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8106028:	7dfb      	ldrb	r3, [r7, #23]
 810602a:	2b00      	cmp	r3, #0
 810602c:	d168      	bne.n	8106100 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810602e:	4b70      	ldr	r3, [pc, #448]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106030:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8106032:	687b      	ldr	r3, [r7, #4]
 8106034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106038:	4053      	eors	r3, r2
 810603a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810603e:	2b00      	cmp	r3, #0
 8106040:	d013      	beq.n	810606a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106042:	4b6b      	ldr	r3, [pc, #428]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810604a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810604c:	4b68      	ldr	r3, [pc, #416]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810604e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106050:	4a67      	ldr	r2, [pc, #412]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8106056:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106058:	4b65      	ldr	r3, [pc, #404]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810605a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810605c:	4a64      	ldr	r2, [pc, #400]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810605e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106062:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106064:	4a62      	ldr	r2, [pc, #392]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106066:	68fb      	ldr	r3, [r7, #12]
 8106068:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106074:	d115      	bne.n	81060a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106076:	f7fd f83b 	bl	81030f0 <HAL_GetTick>
 810607a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810607c:	e00b      	b.n	8106096 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810607e:	f7fd f837 	bl	81030f0 <HAL_GetTick>
 8106082:	4602      	mov	r2, r0
 8106084:	693b      	ldr	r3, [r7, #16]
 8106086:	1ad3      	subs	r3, r2, r3
 8106088:	f241 3288 	movw	r2, #5000	; 0x1388
 810608c:	4293      	cmp	r3, r2
 810608e:	d902      	bls.n	8106096 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8106090:	2303      	movs	r3, #3
 8106092:	75fb      	strb	r3, [r7, #23]
            break;
 8106094:	e005      	b.n	81060a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106096:	4b56      	ldr	r3, [pc, #344]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810609a:	f003 0302 	and.w	r3, r3, #2
 810609e:	2b00      	cmp	r3, #0
 81060a0:	d0ed      	beq.n	810607e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81060a2:	7dfb      	ldrb	r3, [r7, #23]
 81060a4:	2b00      	cmp	r3, #0
 81060a6:	d128      	bne.n	81060fa <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81060a8:	687b      	ldr	r3, [r7, #4]
 81060aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81060ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81060b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81060b6:	d10f      	bne.n	81060d8 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81060b8:	4b4d      	ldr	r3, [pc, #308]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060ba:	691b      	ldr	r3, [r3, #16]
 81060bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81060c0:	687b      	ldr	r3, [r7, #4]
 81060c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81060c6:	091b      	lsrs	r3, r3, #4
 81060c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81060cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81060d0:	4947      	ldr	r1, [pc, #284]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060d2:	4313      	orrs	r3, r2
 81060d4:	610b      	str	r3, [r1, #16]
 81060d6:	e005      	b.n	81060e4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81060d8:	4b45      	ldr	r3, [pc, #276]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060da:	691b      	ldr	r3, [r3, #16]
 81060dc:	4a44      	ldr	r2, [pc, #272]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81060e2:	6113      	str	r3, [r2, #16]
 81060e4:	4b42      	ldr	r3, [pc, #264]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81060e8:	687b      	ldr	r3, [r7, #4]
 81060ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81060ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81060f2:	493f      	ldr	r1, [pc, #252]	; (81061f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060f4:	4313      	orrs	r3, r2
 81060f6:	670b      	str	r3, [r1, #112]	; 0x70
 81060f8:	e004      	b.n	8106104 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81060fa:	7dfb      	ldrb	r3, [r7, #23]
 81060fc:	75bb      	strb	r3, [r7, #22]
 81060fe:	e001      	b.n	8106104 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106100:	7dfb      	ldrb	r3, [r7, #23]
 8106102:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	681b      	ldr	r3, [r3, #0]
 8106108:	f003 0301 	and.w	r3, r3, #1
 810610c:	2b00      	cmp	r3, #0
 810610e:	f000 8083 	beq.w	8106218 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106116:	2b28      	cmp	r3, #40	; 0x28
 8106118:	d866      	bhi.n	81061e8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 810611a:	a201      	add	r2, pc, #4	; (adr r2, 8106120 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106120:	081061f9 	.word	0x081061f9
 8106124:	081061e9 	.word	0x081061e9
 8106128:	081061e9 	.word	0x081061e9
 810612c:	081061e9 	.word	0x081061e9
 8106130:	081061e9 	.word	0x081061e9
 8106134:	081061e9 	.word	0x081061e9
 8106138:	081061e9 	.word	0x081061e9
 810613c:	081061e9 	.word	0x081061e9
 8106140:	081061c5 	.word	0x081061c5
 8106144:	081061e9 	.word	0x081061e9
 8106148:	081061e9 	.word	0x081061e9
 810614c:	081061e9 	.word	0x081061e9
 8106150:	081061e9 	.word	0x081061e9
 8106154:	081061e9 	.word	0x081061e9
 8106158:	081061e9 	.word	0x081061e9
 810615c:	081061e9 	.word	0x081061e9
 8106160:	081061d7 	.word	0x081061d7
 8106164:	081061e9 	.word	0x081061e9
 8106168:	081061e9 	.word	0x081061e9
 810616c:	081061e9 	.word	0x081061e9
 8106170:	081061e9 	.word	0x081061e9
 8106174:	081061e9 	.word	0x081061e9
 8106178:	081061e9 	.word	0x081061e9
 810617c:	081061e9 	.word	0x081061e9
 8106180:	081061f9 	.word	0x081061f9
 8106184:	081061e9 	.word	0x081061e9
 8106188:	081061e9 	.word	0x081061e9
 810618c:	081061e9 	.word	0x081061e9
 8106190:	081061e9 	.word	0x081061e9
 8106194:	081061e9 	.word	0x081061e9
 8106198:	081061e9 	.word	0x081061e9
 810619c:	081061e9 	.word	0x081061e9
 81061a0:	081061f9 	.word	0x081061f9
 81061a4:	081061e9 	.word	0x081061e9
 81061a8:	081061e9 	.word	0x081061e9
 81061ac:	081061e9 	.word	0x081061e9
 81061b0:	081061e9 	.word	0x081061e9
 81061b4:	081061e9 	.word	0x081061e9
 81061b8:	081061e9 	.word	0x081061e9
 81061bc:	081061e9 	.word	0x081061e9
 81061c0:	081061f9 	.word	0x081061f9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	3304      	adds	r3, #4
 81061c8:	2101      	movs	r1, #1
 81061ca:	4618      	mov	r0, r3
 81061cc:	f001 fc1c 	bl	8107a08 <RCCEx_PLL2_Config>
 81061d0:	4603      	mov	r3, r0
 81061d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81061d4:	e011      	b.n	81061fa <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81061d6:	687b      	ldr	r3, [r7, #4]
 81061d8:	3324      	adds	r3, #36	; 0x24
 81061da:	2101      	movs	r1, #1
 81061dc:	4618      	mov	r0, r3
 81061de:	f001 fcc5 	bl	8107b6c <RCCEx_PLL3_Config>
 81061e2:	4603      	mov	r3, r0
 81061e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81061e6:	e008      	b.n	81061fa <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81061e8:	2301      	movs	r3, #1
 81061ea:	75fb      	strb	r3, [r7, #23]
      break;
 81061ec:	e005      	b.n	81061fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 81061ee:	bf00      	nop
 81061f0:	58024400 	.word	0x58024400
 81061f4:	58024800 	.word	0x58024800
      break;
 81061f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81061fa:	7dfb      	ldrb	r3, [r7, #23]
 81061fc:	2b00      	cmp	r3, #0
 81061fe:	d109      	bne.n	8106214 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106200:	4b96      	ldr	r3, [pc, #600]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106204:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8106208:	687b      	ldr	r3, [r7, #4]
 810620a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810620c:	4993      	ldr	r1, [pc, #588]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810620e:	4313      	orrs	r3, r2
 8106210:	654b      	str	r3, [r1, #84]	; 0x54
 8106212:	e001      	b.n	8106218 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106214:	7dfb      	ldrb	r3, [r7, #23]
 8106216:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106218:	687b      	ldr	r3, [r7, #4]
 810621a:	681b      	ldr	r3, [r3, #0]
 810621c:	f003 0302 	and.w	r3, r3, #2
 8106220:	2b00      	cmp	r3, #0
 8106222:	d038      	beq.n	8106296 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8106224:	687b      	ldr	r3, [r7, #4]
 8106226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106228:	2b05      	cmp	r3, #5
 810622a:	d821      	bhi.n	8106270 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 810622c:	a201      	add	r2, pc, #4	; (adr r2, 8106234 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106232:	bf00      	nop
 8106234:	08106277 	.word	0x08106277
 8106238:	0810624d 	.word	0x0810624d
 810623c:	0810625f 	.word	0x0810625f
 8106240:	08106277 	.word	0x08106277
 8106244:	08106277 	.word	0x08106277
 8106248:	08106277 	.word	0x08106277
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810624c:	687b      	ldr	r3, [r7, #4]
 810624e:	3304      	adds	r3, #4
 8106250:	2101      	movs	r1, #1
 8106252:	4618      	mov	r0, r3
 8106254:	f001 fbd8 	bl	8107a08 <RCCEx_PLL2_Config>
 8106258:	4603      	mov	r3, r0
 810625a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810625c:	e00c      	b.n	8106278 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810625e:	687b      	ldr	r3, [r7, #4]
 8106260:	3324      	adds	r3, #36	; 0x24
 8106262:	2101      	movs	r1, #1
 8106264:	4618      	mov	r0, r3
 8106266:	f001 fc81 	bl	8107b6c <RCCEx_PLL3_Config>
 810626a:	4603      	mov	r3, r0
 810626c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810626e:	e003      	b.n	8106278 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106270:	2301      	movs	r3, #1
 8106272:	75fb      	strb	r3, [r7, #23]
      break;
 8106274:	e000      	b.n	8106278 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8106276:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106278:	7dfb      	ldrb	r3, [r7, #23]
 810627a:	2b00      	cmp	r3, #0
 810627c:	d109      	bne.n	8106292 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810627e:	4b77      	ldr	r3, [pc, #476]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106282:	f023 0207 	bic.w	r2, r3, #7
 8106286:	687b      	ldr	r3, [r7, #4]
 8106288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810628a:	4974      	ldr	r1, [pc, #464]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810628c:	4313      	orrs	r3, r2
 810628e:	654b      	str	r3, [r1, #84]	; 0x54
 8106290:	e001      	b.n	8106296 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106292:	7dfb      	ldrb	r3, [r7, #23]
 8106294:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106296:	687b      	ldr	r3, [r7, #4]
 8106298:	681b      	ldr	r3, [r3, #0]
 810629a:	f003 0304 	and.w	r3, r3, #4
 810629e:	2b00      	cmp	r3, #0
 81062a0:	d03a      	beq.n	8106318 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81062a8:	2b05      	cmp	r3, #5
 81062aa:	d821      	bhi.n	81062f0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 81062ac:	a201      	add	r2, pc, #4	; (adr r2, 81062b4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81062ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062b2:	bf00      	nop
 81062b4:	081062f7 	.word	0x081062f7
 81062b8:	081062cd 	.word	0x081062cd
 81062bc:	081062df 	.word	0x081062df
 81062c0:	081062f7 	.word	0x081062f7
 81062c4:	081062f7 	.word	0x081062f7
 81062c8:	081062f7 	.word	0x081062f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81062cc:	687b      	ldr	r3, [r7, #4]
 81062ce:	3304      	adds	r3, #4
 81062d0:	2101      	movs	r1, #1
 81062d2:	4618      	mov	r0, r3
 81062d4:	f001 fb98 	bl	8107a08 <RCCEx_PLL2_Config>
 81062d8:	4603      	mov	r3, r0
 81062da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81062dc:	e00c      	b.n	81062f8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	3324      	adds	r3, #36	; 0x24
 81062e2:	2101      	movs	r1, #1
 81062e4:	4618      	mov	r0, r3
 81062e6:	f001 fc41 	bl	8107b6c <RCCEx_PLL3_Config>
 81062ea:	4603      	mov	r3, r0
 81062ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81062ee:	e003      	b.n	81062f8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81062f0:	2301      	movs	r3, #1
 81062f2:	75fb      	strb	r3, [r7, #23]
      break;
 81062f4:	e000      	b.n	81062f8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 81062f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81062f8:	7dfb      	ldrb	r3, [r7, #23]
 81062fa:	2b00      	cmp	r3, #0
 81062fc:	d10a      	bne.n	8106314 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81062fe:	4b57      	ldr	r3, [pc, #348]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106302:	f023 0207 	bic.w	r2, r3, #7
 8106306:	687b      	ldr	r3, [r7, #4]
 8106308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810630c:	4953      	ldr	r1, [pc, #332]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810630e:	4313      	orrs	r3, r2
 8106310:	658b      	str	r3, [r1, #88]	; 0x58
 8106312:	e001      	b.n	8106318 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106314:	7dfb      	ldrb	r3, [r7, #23]
 8106316:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106318:	687b      	ldr	r3, [r7, #4]
 810631a:	681b      	ldr	r3, [r3, #0]
 810631c:	f003 0320 	and.w	r3, r3, #32
 8106320:	2b00      	cmp	r3, #0
 8106322:	d04b      	beq.n	81063bc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8106324:	687b      	ldr	r3, [r7, #4]
 8106326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810632a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810632e:	d02e      	beq.n	810638e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8106330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106334:	d828      	bhi.n	8106388 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8106336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810633a:	d02a      	beq.n	8106392 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810633c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106340:	d822      	bhi.n	8106388 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8106342:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106346:	d026      	beq.n	8106396 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8106348:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810634c:	d81c      	bhi.n	8106388 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810634e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106352:	d010      	beq.n	8106376 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8106354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106358:	d816      	bhi.n	8106388 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810635a:	2b00      	cmp	r3, #0
 810635c:	d01d      	beq.n	810639a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810635e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106362:	d111      	bne.n	8106388 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	3304      	adds	r3, #4
 8106368:	2100      	movs	r1, #0
 810636a:	4618      	mov	r0, r3
 810636c:	f001 fb4c 	bl	8107a08 <RCCEx_PLL2_Config>
 8106370:	4603      	mov	r3, r0
 8106372:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8106374:	e012      	b.n	810639c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	3324      	adds	r3, #36	; 0x24
 810637a:	2102      	movs	r1, #2
 810637c:	4618      	mov	r0, r3
 810637e:	f001 fbf5 	bl	8107b6c <RCCEx_PLL3_Config>
 8106382:	4603      	mov	r3, r0
 8106384:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8106386:	e009      	b.n	810639c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106388:	2301      	movs	r3, #1
 810638a:	75fb      	strb	r3, [r7, #23]
      break;
 810638c:	e006      	b.n	810639c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810638e:	bf00      	nop
 8106390:	e004      	b.n	810639c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8106392:	bf00      	nop
 8106394:	e002      	b.n	810639c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8106396:	bf00      	nop
 8106398:	e000      	b.n	810639c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810639a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810639c:	7dfb      	ldrb	r3, [r7, #23]
 810639e:	2b00      	cmp	r3, #0
 81063a0:	d10a      	bne.n	81063b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81063a2:	4b2e      	ldr	r3, [pc, #184]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81063a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81063a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81063b0:	492a      	ldr	r1, [pc, #168]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81063b2:	4313      	orrs	r3, r2
 81063b4:	654b      	str	r3, [r1, #84]	; 0x54
 81063b6:	e001      	b.n	81063bc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063b8:	7dfb      	ldrb	r3, [r7, #23]
 81063ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	681b      	ldr	r3, [r3, #0]
 81063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81063c4:	2b00      	cmp	r3, #0
 81063c6:	d04d      	beq.n	8106464 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81063ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81063d2:	d02e      	beq.n	8106432 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81063d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81063d8:	d828      	bhi.n	810642c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81063da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81063de:	d02a      	beq.n	8106436 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81063e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81063e4:	d822      	bhi.n	810642c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81063e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81063ea:	d026      	beq.n	810643a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81063ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81063f0:	d81c      	bhi.n	810642c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81063f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81063f6:	d010      	beq.n	810641a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 81063f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81063fc:	d816      	bhi.n	810642c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81063fe:	2b00      	cmp	r3, #0
 8106400:	d01d      	beq.n	810643e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8106402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8106406:	d111      	bne.n	810642c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106408:	687b      	ldr	r3, [r7, #4]
 810640a:	3304      	adds	r3, #4
 810640c:	2100      	movs	r1, #0
 810640e:	4618      	mov	r0, r3
 8106410:	f001 fafa 	bl	8107a08 <RCCEx_PLL2_Config>
 8106414:	4603      	mov	r3, r0
 8106416:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8106418:	e012      	b.n	8106440 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	3324      	adds	r3, #36	; 0x24
 810641e:	2102      	movs	r1, #2
 8106420:	4618      	mov	r0, r3
 8106422:	f001 fba3 	bl	8107b6c <RCCEx_PLL3_Config>
 8106426:	4603      	mov	r3, r0
 8106428:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810642a:	e009      	b.n	8106440 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810642c:	2301      	movs	r3, #1
 810642e:	75fb      	strb	r3, [r7, #23]
      break;
 8106430:	e006      	b.n	8106440 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8106432:	bf00      	nop
 8106434:	e004      	b.n	8106440 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8106436:	bf00      	nop
 8106438:	e002      	b.n	8106440 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810643a:	bf00      	nop
 810643c:	e000      	b.n	8106440 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810643e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106440:	7dfb      	ldrb	r3, [r7, #23]
 8106442:	2b00      	cmp	r3, #0
 8106444:	d10c      	bne.n	8106460 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106446:	4b05      	ldr	r3, [pc, #20]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810644a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810644e:	687b      	ldr	r3, [r7, #4]
 8106450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106454:	4901      	ldr	r1, [pc, #4]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106456:	4313      	orrs	r3, r2
 8106458:	658b      	str	r3, [r1, #88]	; 0x58
 810645a:	e003      	b.n	8106464 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 810645c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106460:	7dfb      	ldrb	r3, [r7, #23]
 8106462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	681b      	ldr	r3, [r3, #0]
 8106468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810646c:	2b00      	cmp	r3, #0
 810646e:	d04b      	beq.n	8106508 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8106476:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810647a:	d02e      	beq.n	81064da <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810647c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106480:	d828      	bhi.n	81064d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8106482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106486:	d02a      	beq.n	81064de <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8106488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810648c:	d822      	bhi.n	81064d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810648e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106492:	d026      	beq.n	81064e2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8106494:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106498:	d81c      	bhi.n	81064d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810649a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810649e:	d010      	beq.n	81064c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81064a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81064a4:	d816      	bhi.n	81064d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81064a6:	2b00      	cmp	r3, #0
 81064a8:	d01d      	beq.n	81064e6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81064aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81064ae:	d111      	bne.n	81064d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81064b0:	687b      	ldr	r3, [r7, #4]
 81064b2:	3304      	adds	r3, #4
 81064b4:	2100      	movs	r1, #0
 81064b6:	4618      	mov	r0, r3
 81064b8:	f001 faa6 	bl	8107a08 <RCCEx_PLL2_Config>
 81064bc:	4603      	mov	r3, r0
 81064be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81064c0:	e012      	b.n	81064e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81064c2:	687b      	ldr	r3, [r7, #4]
 81064c4:	3324      	adds	r3, #36	; 0x24
 81064c6:	2102      	movs	r1, #2
 81064c8:	4618      	mov	r0, r3
 81064ca:	f001 fb4f 	bl	8107b6c <RCCEx_PLL3_Config>
 81064ce:	4603      	mov	r3, r0
 81064d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81064d2:	e009      	b.n	81064e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81064d4:	2301      	movs	r3, #1
 81064d6:	75fb      	strb	r3, [r7, #23]
      break;
 81064d8:	e006      	b.n	81064e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81064da:	bf00      	nop
 81064dc:	e004      	b.n	81064e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81064de:	bf00      	nop
 81064e0:	e002      	b.n	81064e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81064e2:	bf00      	nop
 81064e4:	e000      	b.n	81064e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 81064e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81064e8:	7dfb      	ldrb	r3, [r7, #23]
 81064ea:	2b00      	cmp	r3, #0
 81064ec:	d10a      	bne.n	8106504 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81064ee:	4b9d      	ldr	r3, [pc, #628]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81064f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81064f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81064fc:	4999      	ldr	r1, [pc, #612]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81064fe:	4313      	orrs	r3, r2
 8106500:	658b      	str	r3, [r1, #88]	; 0x58
 8106502:	e001      	b.n	8106508 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106504:	7dfb      	ldrb	r3, [r7, #23]
 8106506:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	681b      	ldr	r3, [r3, #0]
 810650c:	f003 0308 	and.w	r3, r3, #8
 8106510:	2b00      	cmp	r3, #0
 8106512:	d01a      	beq.n	810654a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810651a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810651e:	d10a      	bne.n	8106536 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	3324      	adds	r3, #36	; 0x24
 8106524:	2102      	movs	r1, #2
 8106526:	4618      	mov	r0, r3
 8106528:	f001 fb20 	bl	8107b6c <RCCEx_PLL3_Config>
 810652c:	4603      	mov	r3, r0
 810652e:	2b00      	cmp	r3, #0
 8106530:	d001      	beq.n	8106536 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8106532:	2301      	movs	r3, #1
 8106534:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106536:	4b8b      	ldr	r3, [pc, #556]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810653a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810653e:	687b      	ldr	r3, [r7, #4]
 8106540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106544:	4987      	ldr	r1, [pc, #540]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106546:	4313      	orrs	r3, r2
 8106548:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810654a:	687b      	ldr	r3, [r7, #4]
 810654c:	681b      	ldr	r3, [r3, #0]
 810654e:	f003 0310 	and.w	r3, r3, #16
 8106552:	2b00      	cmp	r3, #0
 8106554:	d01a      	beq.n	810658c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8106556:	687b      	ldr	r3, [r7, #4]
 8106558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810655c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106560:	d10a      	bne.n	8106578 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8106562:	687b      	ldr	r3, [r7, #4]
 8106564:	3324      	adds	r3, #36	; 0x24
 8106566:	2102      	movs	r1, #2
 8106568:	4618      	mov	r0, r3
 810656a:	f001 faff 	bl	8107b6c <RCCEx_PLL3_Config>
 810656e:	4603      	mov	r3, r0
 8106570:	2b00      	cmp	r3, #0
 8106572:	d001      	beq.n	8106578 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8106574:	2301      	movs	r3, #1
 8106576:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106578:	4b7a      	ldr	r3, [pc, #488]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810657a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810657c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106586:	4977      	ldr	r1, [pc, #476]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106588:	4313      	orrs	r3, r2
 810658a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810658c:	687b      	ldr	r3, [r7, #4]
 810658e:	681b      	ldr	r3, [r3, #0]
 8106590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8106594:	2b00      	cmp	r3, #0
 8106596:	d034      	beq.n	8106602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8106598:	687b      	ldr	r3, [r7, #4]
 810659a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810659e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81065a2:	d01d      	beq.n	81065e0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81065a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81065a8:	d817      	bhi.n	81065da <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81065aa:	2b00      	cmp	r3, #0
 81065ac:	d003      	beq.n	81065b6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81065ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81065b2:	d009      	beq.n	81065c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81065b4:	e011      	b.n	81065da <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81065b6:	687b      	ldr	r3, [r7, #4]
 81065b8:	3304      	adds	r3, #4
 81065ba:	2100      	movs	r1, #0
 81065bc:	4618      	mov	r0, r3
 81065be:	f001 fa23 	bl	8107a08 <RCCEx_PLL2_Config>
 81065c2:	4603      	mov	r3, r0
 81065c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81065c6:	e00c      	b.n	81065e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81065c8:	687b      	ldr	r3, [r7, #4]
 81065ca:	3324      	adds	r3, #36	; 0x24
 81065cc:	2102      	movs	r1, #2
 81065ce:	4618      	mov	r0, r3
 81065d0:	f001 facc 	bl	8107b6c <RCCEx_PLL3_Config>
 81065d4:	4603      	mov	r3, r0
 81065d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81065d8:	e003      	b.n	81065e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81065da:	2301      	movs	r3, #1
 81065dc:	75fb      	strb	r3, [r7, #23]
      break;
 81065de:	e000      	b.n	81065e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 81065e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81065e2:	7dfb      	ldrb	r3, [r7, #23]
 81065e4:	2b00      	cmp	r3, #0
 81065e6:	d10a      	bne.n	81065fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81065e8:	4b5e      	ldr	r3, [pc, #376]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81065ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81065ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81065f0:	687b      	ldr	r3, [r7, #4]
 81065f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81065f6:	495b      	ldr	r1, [pc, #364]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81065f8:	4313      	orrs	r3, r2
 81065fa:	658b      	str	r3, [r1, #88]	; 0x58
 81065fc:	e001      	b.n	8106602 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81065fe:	7dfb      	ldrb	r3, [r7, #23]
 8106600:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8106602:	687b      	ldr	r3, [r7, #4]
 8106604:	681b      	ldr	r3, [r3, #0]
 8106606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810660a:	2b00      	cmp	r3, #0
 810660c:	d033      	beq.n	8106676 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810660e:	687b      	ldr	r3, [r7, #4]
 8106610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106614:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106618:	d01c      	beq.n	8106654 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810661a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810661e:	d816      	bhi.n	810664e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8106620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106624:	d003      	beq.n	810662e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8106626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810662a:	d007      	beq.n	810663c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 810662c:	e00f      	b.n	810664e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810662e:	4b4d      	ldr	r3, [pc, #308]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106632:	4a4c      	ldr	r2, [pc, #304]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106638:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810663a:	e00c      	b.n	8106656 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	3324      	adds	r3, #36	; 0x24
 8106640:	2101      	movs	r1, #1
 8106642:	4618      	mov	r0, r3
 8106644:	f001 fa92 	bl	8107b6c <RCCEx_PLL3_Config>
 8106648:	4603      	mov	r3, r0
 810664a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810664c:	e003      	b.n	8106656 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810664e:	2301      	movs	r3, #1
 8106650:	75fb      	strb	r3, [r7, #23]
      break;
 8106652:	e000      	b.n	8106656 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8106654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106656:	7dfb      	ldrb	r3, [r7, #23]
 8106658:	2b00      	cmp	r3, #0
 810665a:	d10a      	bne.n	8106672 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810665c:	4b41      	ldr	r3, [pc, #260]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810665e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810666a:	493e      	ldr	r1, [pc, #248]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810666c:	4313      	orrs	r3, r2
 810666e:	654b      	str	r3, [r1, #84]	; 0x54
 8106670:	e001      	b.n	8106676 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106672:	7dfb      	ldrb	r3, [r7, #23]
 8106674:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	681b      	ldr	r3, [r3, #0]
 810667a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810667e:	2b00      	cmp	r3, #0
 8106680:	d029      	beq.n	81066d6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8106682:	687b      	ldr	r3, [r7, #4]
 8106684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106686:	2b00      	cmp	r3, #0
 8106688:	d003      	beq.n	8106692 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 810668a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810668e:	d007      	beq.n	81066a0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8106690:	e00f      	b.n	81066b2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106692:	4b34      	ldr	r3, [pc, #208]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106696:	4a33      	ldr	r2, [pc, #204]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810669c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810669e:	e00b      	b.n	81066b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81066a0:	687b      	ldr	r3, [r7, #4]
 81066a2:	3304      	adds	r3, #4
 81066a4:	2102      	movs	r1, #2
 81066a6:	4618      	mov	r0, r3
 81066a8:	f001 f9ae 	bl	8107a08 <RCCEx_PLL2_Config>
 81066ac:	4603      	mov	r3, r0
 81066ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81066b0:	e002      	b.n	81066b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81066b2:	2301      	movs	r3, #1
 81066b4:	75fb      	strb	r3, [r7, #23]
      break;
 81066b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81066b8:	7dfb      	ldrb	r3, [r7, #23]
 81066ba:	2b00      	cmp	r3, #0
 81066bc:	d109      	bne.n	81066d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81066be:	4b29      	ldr	r3, [pc, #164]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81066c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81066c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81066c6:	687b      	ldr	r3, [r7, #4]
 81066c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81066ca:	4926      	ldr	r1, [pc, #152]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81066cc:	4313      	orrs	r3, r2
 81066ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 81066d0:	e001      	b.n	81066d6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066d2:	7dfb      	ldrb	r3, [r7, #23]
 81066d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	681b      	ldr	r3, [r3, #0]
 81066da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81066de:	2b00      	cmp	r3, #0
 81066e0:	d00a      	beq.n	81066f8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81066e2:	687b      	ldr	r3, [r7, #4]
 81066e4:	3324      	adds	r3, #36	; 0x24
 81066e6:	2102      	movs	r1, #2
 81066e8:	4618      	mov	r0, r3
 81066ea:	f001 fa3f 	bl	8107b6c <RCCEx_PLL3_Config>
 81066ee:	4603      	mov	r3, r0
 81066f0:	2b00      	cmp	r3, #0
 81066f2:	d001      	beq.n	81066f8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 81066f4:	2301      	movs	r3, #1
 81066f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81066f8:	687b      	ldr	r3, [r7, #4]
 81066fa:	681b      	ldr	r3, [r3, #0]
 81066fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106700:	2b00      	cmp	r3, #0
 8106702:	d033      	beq.n	810676c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8106704:	687b      	ldr	r3, [r7, #4]
 8106706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810670c:	d017      	beq.n	810673e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810670e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106712:	d811      	bhi.n	8106738 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8106714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106718:	d013      	beq.n	8106742 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810671a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810671e:	d80b      	bhi.n	8106738 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8106720:	2b00      	cmp	r3, #0
 8106722:	d010      	beq.n	8106746 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8106724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106728:	d106      	bne.n	8106738 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810672a:	4b0e      	ldr	r3, [pc, #56]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810672e:	4a0d      	ldr	r2, [pc, #52]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106734:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8106736:	e007      	b.n	8106748 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106738:	2301      	movs	r3, #1
 810673a:	75fb      	strb	r3, [r7, #23]
      break;
 810673c:	e004      	b.n	8106748 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810673e:	bf00      	nop
 8106740:	e002      	b.n	8106748 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8106742:	bf00      	nop
 8106744:	e000      	b.n	8106748 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8106746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106748:	7dfb      	ldrb	r3, [r7, #23]
 810674a:	2b00      	cmp	r3, #0
 810674c:	d10c      	bne.n	8106768 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810674e:	4b05      	ldr	r3, [pc, #20]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106756:	687b      	ldr	r3, [r7, #4]
 8106758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810675a:	4902      	ldr	r1, [pc, #8]	; (8106764 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810675c:	4313      	orrs	r3, r2
 810675e:	654b      	str	r3, [r1, #84]	; 0x54
 8106760:	e004      	b.n	810676c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8106762:	bf00      	nop
 8106764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106768:	7dfb      	ldrb	r3, [r7, #23]
 810676a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810676c:	687b      	ldr	r3, [r7, #4]
 810676e:	681b      	ldr	r3, [r3, #0]
 8106770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106774:	2b00      	cmp	r3, #0
 8106776:	d008      	beq.n	810678a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106778:	4b31      	ldr	r3, [pc, #196]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810677a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810677c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8106780:	687b      	ldr	r3, [r7, #4]
 8106782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106784:	492e      	ldr	r1, [pc, #184]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106786:	4313      	orrs	r3, r2
 8106788:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810678a:	687b      	ldr	r3, [r7, #4]
 810678c:	681b      	ldr	r3, [r3, #0]
 810678e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8106792:	2b00      	cmp	r3, #0
 8106794:	d009      	beq.n	81067aa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106796:	4b2a      	ldr	r3, [pc, #168]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106798:	691b      	ldr	r3, [r3, #16]
 810679a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81067a4:	4926      	ldr	r1, [pc, #152]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81067a6:	4313      	orrs	r3, r2
 81067a8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	681b      	ldr	r3, [r3, #0]
 81067ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81067b2:	2b00      	cmp	r3, #0
 81067b4:	d008      	beq.n	81067c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81067b6:	4b22      	ldr	r3, [pc, #136]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81067b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81067ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81067be:	687b      	ldr	r3, [r7, #4]
 81067c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81067c2:	491f      	ldr	r1, [pc, #124]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81067c4:	4313      	orrs	r3, r2
 81067c6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81067c8:	687b      	ldr	r3, [r7, #4]
 81067ca:	681b      	ldr	r3, [r3, #0]
 81067cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81067d0:	2b00      	cmp	r3, #0
 81067d2:	d00d      	beq.n	81067f0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81067d4:	4b1a      	ldr	r3, [pc, #104]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81067d6:	691b      	ldr	r3, [r3, #16]
 81067d8:	4a19      	ldr	r2, [pc, #100]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81067da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81067de:	6113      	str	r3, [r2, #16]
 81067e0:	4b17      	ldr	r3, [pc, #92]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81067e2:	691a      	ldr	r2, [r3, #16]
 81067e4:	687b      	ldr	r3, [r7, #4]
 81067e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81067ea:	4915      	ldr	r1, [pc, #84]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81067ec:	4313      	orrs	r3, r2
 81067ee:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81067f0:	687b      	ldr	r3, [r7, #4]
 81067f2:	681b      	ldr	r3, [r3, #0]
 81067f4:	2b00      	cmp	r3, #0
 81067f6:	da08      	bge.n	810680a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81067f8:	4b11      	ldr	r3, [pc, #68]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81067fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81067fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8106800:	687b      	ldr	r3, [r7, #4]
 8106802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106804:	490e      	ldr	r1, [pc, #56]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106806:	4313      	orrs	r3, r2
 8106808:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810680a:	687b      	ldr	r3, [r7, #4]
 810680c:	681b      	ldr	r3, [r3, #0]
 810680e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8106812:	2b00      	cmp	r3, #0
 8106814:	d009      	beq.n	810682a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106816:	4b0a      	ldr	r3, [pc, #40]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810681a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106824:	4906      	ldr	r1, [pc, #24]	; (8106840 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106826:	4313      	orrs	r3, r2
 8106828:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810682a:	7dbb      	ldrb	r3, [r7, #22]
 810682c:	2b00      	cmp	r3, #0
 810682e:	d101      	bne.n	8106834 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8106830:	2300      	movs	r3, #0
 8106832:	e000      	b.n	8106836 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8106834:	2301      	movs	r3, #1
}
 8106836:	4618      	mov	r0, r3
 8106838:	3718      	adds	r7, #24
 810683a:	46bd      	mov	sp, r7
 810683c:	bd80      	pop	{r7, pc}
 810683e:	bf00      	nop
 8106840:	58024400 	.word	0x58024400

08106844 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8106844:	b580      	push	{r7, lr}
 8106846:	b090      	sub	sp, #64	; 0x40
 8106848:	af00      	add	r7, sp, #0
 810684a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106852:	f040 8095 	bne.w	8106980 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8106856:	4b97      	ldr	r3, [pc, #604]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810685a:	f003 0307 	and.w	r3, r3, #7
 810685e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106862:	2b04      	cmp	r3, #4
 8106864:	f200 8088 	bhi.w	8106978 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8106868:	a201      	add	r2, pc, #4	; (adr r2, 8106870 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 810686a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810686e:	bf00      	nop
 8106870:	08106885 	.word	0x08106885
 8106874:	081068ad 	.word	0x081068ad
 8106878:	081068d5 	.word	0x081068d5
 810687c:	08106971 	.word	0x08106971
 8106880:	081068fd 	.word	0x081068fd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106884:	4b8b      	ldr	r3, [pc, #556]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106886:	681b      	ldr	r3, [r3, #0]
 8106888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810688c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106890:	d108      	bne.n	81068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106896:	4618      	mov	r0, r3
 8106898:	f000 ff64 	bl	8107764 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 810689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810689e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81068a0:	f000 bc94 	b.w	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81068a4:	2300      	movs	r3, #0
 81068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81068a8:	f000 bc90 	b.w	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81068ac:	4b81      	ldr	r3, [pc, #516]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81068ae:	681b      	ldr	r3, [r3, #0]
 81068b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81068b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81068b8:	d108      	bne.n	81068cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81068ba:	f107 0318 	add.w	r3, r7, #24
 81068be:	4618      	mov	r0, r3
 81068c0:	f000 fca8 	bl	8107214 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81068c4:	69bb      	ldr	r3, [r7, #24]
 81068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81068c8:	f000 bc80 	b.w	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81068cc:	2300      	movs	r3, #0
 81068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81068d0:	f000 bc7c 	b.w	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81068d4:	4b77      	ldr	r3, [pc, #476]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81068d6:	681b      	ldr	r3, [r3, #0]
 81068d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81068dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81068e0:	d108      	bne.n	81068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81068e2:	f107 030c 	add.w	r3, r7, #12
 81068e6:	4618      	mov	r0, r3
 81068e8:	f000 fde8 	bl	81074bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81068ec:	68fb      	ldr	r3, [r7, #12]
 81068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81068f0:	f000 bc6c 	b.w	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81068f4:	2300      	movs	r3, #0
 81068f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81068f8:	f000 bc68 	b.w	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81068fc:	4b6d      	ldr	r3, [pc, #436]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81068fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106900:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106904:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106906:	4b6b      	ldr	r3, [pc, #428]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106908:	681b      	ldr	r3, [r3, #0]
 810690a:	f003 0304 	and.w	r3, r3, #4
 810690e:	2b04      	cmp	r3, #4
 8106910:	d10c      	bne.n	810692c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8106912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106914:	2b00      	cmp	r3, #0
 8106916:	d109      	bne.n	810692c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106918:	4b66      	ldr	r3, [pc, #408]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810691a:	681b      	ldr	r3, [r3, #0]
 810691c:	08db      	lsrs	r3, r3, #3
 810691e:	f003 0303 	and.w	r3, r3, #3
 8106922:	4a65      	ldr	r2, [pc, #404]	; (8106ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8106924:	fa22 f303 	lsr.w	r3, r2, r3
 8106928:	63fb      	str	r3, [r7, #60]	; 0x3c
 810692a:	e01f      	b.n	810696c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810692c:	4b61      	ldr	r3, [pc, #388]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810692e:	681b      	ldr	r3, [r3, #0]
 8106930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106938:	d106      	bne.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 810693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810693c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106940:	d102      	bne.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106942:	4b5e      	ldr	r3, [pc, #376]	; (8106abc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8106944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106946:	e011      	b.n	810696c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106948:	4b5a      	ldr	r3, [pc, #360]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810694a:	681b      	ldr	r3, [r3, #0]
 810694c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106954:	d106      	bne.n	8106964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8106956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810695c:	d102      	bne.n	8106964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810695e:	4b58      	ldr	r3, [pc, #352]	; (8106ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8106960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106962:	e003      	b.n	810696c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106964:	2300      	movs	r3, #0
 8106966:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106968:	f000 bc30 	b.w	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 810696c:	f000 bc2e 	b.w	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106970:	4b54      	ldr	r3, [pc, #336]	; (8106ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8106972:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106974:	f000 bc2a 	b.w	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8106978:	2300      	movs	r3, #0
 810697a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810697c:	f000 bc26 	b.w	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8106980:	687b      	ldr	r3, [r7, #4]
 8106982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106986:	f040 809f 	bne.w	8106ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 810698a:	4b4a      	ldr	r3, [pc, #296]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810698c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810698e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8106992:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810699a:	d04d      	beq.n	8106a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 810699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810699e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81069a2:	f200 8084 	bhi.w	8106aae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 81069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069a8:	2bc0      	cmp	r3, #192	; 0xc0
 81069aa:	d07d      	beq.n	8106aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 81069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069ae:	2bc0      	cmp	r3, #192	; 0xc0
 81069b0:	d87d      	bhi.n	8106aae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 81069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069b4:	2b80      	cmp	r3, #128	; 0x80
 81069b6:	d02d      	beq.n	8106a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 81069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069ba:	2b80      	cmp	r3, #128	; 0x80
 81069bc:	d877      	bhi.n	8106aae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 81069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069c0:	2b00      	cmp	r3, #0
 81069c2:	d003      	beq.n	81069cc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 81069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069c6:	2b40      	cmp	r3, #64	; 0x40
 81069c8:	d012      	beq.n	81069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 81069ca:	e070      	b.n	8106aae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81069cc:	4b39      	ldr	r3, [pc, #228]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81069ce:	681b      	ldr	r3, [r3, #0]
 81069d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81069d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81069d8:	d107      	bne.n	81069ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81069da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81069de:	4618      	mov	r0, r3
 81069e0:	f000 fec0 	bl	8107764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81069e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81069e8:	e3f0      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81069ea:	2300      	movs	r3, #0
 81069ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81069ee:	e3ed      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81069f0:	4b30      	ldr	r3, [pc, #192]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81069f2:	681b      	ldr	r3, [r3, #0]
 81069f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81069f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81069fc:	d107      	bne.n	8106a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81069fe:	f107 0318 	add.w	r3, r7, #24
 8106a02:	4618      	mov	r0, r3
 8106a04:	f000 fc06 	bl	8107214 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106a08:	69bb      	ldr	r3, [r7, #24]
 8106a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106a0c:	e3de      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106a0e:	2300      	movs	r3, #0
 8106a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a12:	e3db      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106a14:	4b27      	ldr	r3, [pc, #156]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a16:	681b      	ldr	r3, [r3, #0]
 8106a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106a20:	d107      	bne.n	8106a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106a22:	f107 030c 	add.w	r3, r7, #12
 8106a26:	4618      	mov	r0, r3
 8106a28:	f000 fd48 	bl	81074bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106a2c:	68fb      	ldr	r3, [r7, #12]
 8106a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106a30:	e3cc      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106a32:	2300      	movs	r3, #0
 8106a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a36:	e3c9      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106a38:	4b1e      	ldr	r3, [pc, #120]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106a3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106a40:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106a42:	4b1c      	ldr	r3, [pc, #112]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a44:	681b      	ldr	r3, [r3, #0]
 8106a46:	f003 0304 	and.w	r3, r3, #4
 8106a4a:	2b04      	cmp	r3, #4
 8106a4c:	d10c      	bne.n	8106a68 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8106a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a50:	2b00      	cmp	r3, #0
 8106a52:	d109      	bne.n	8106a68 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106a54:	4b17      	ldr	r3, [pc, #92]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a56:	681b      	ldr	r3, [r3, #0]
 8106a58:	08db      	lsrs	r3, r3, #3
 8106a5a:	f003 0303 	and.w	r3, r3, #3
 8106a5e:	4a16      	ldr	r2, [pc, #88]	; (8106ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8106a60:	fa22 f303 	lsr.w	r3, r2, r3
 8106a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106a66:	e01e      	b.n	8106aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106a68:	4b12      	ldr	r3, [pc, #72]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a6a:	681b      	ldr	r3, [r3, #0]
 8106a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106a74:	d106      	bne.n	8106a84 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8106a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106a7c:	d102      	bne.n	8106a84 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106a7e:	4b0f      	ldr	r3, [pc, #60]	; (8106abc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8106a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106a82:	e010      	b.n	8106aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106a84:	4b0b      	ldr	r3, [pc, #44]	; (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a86:	681b      	ldr	r3, [r3, #0]
 8106a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106a90:	d106      	bne.n	8106aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8106a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106a98:	d102      	bne.n	8106aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106a9a:	4b09      	ldr	r3, [pc, #36]	; (8106ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8106a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106a9e:	e002      	b.n	8106aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106aa0:	2300      	movs	r3, #0
 8106aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106aa4:	e392      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106aa6:	e391      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106aa8:	4b06      	ldr	r3, [pc, #24]	; (8106ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8106aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106aac:	e38e      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8106aae:	2300      	movs	r3, #0
 8106ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106ab2:	e38b      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106ab4:	58024400 	.word	0x58024400
 8106ab8:	03d09000 	.word	0x03d09000
 8106abc:	003d0900 	.word	0x003d0900
 8106ac0:	007a1200 	.word	0x007a1200
 8106ac4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8106ac8:	687b      	ldr	r3, [r7, #4]
 8106aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8106ace:	f040 809c 	bne.w	8106c0a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8106ad2:	4b9d      	ldr	r3, [pc, #628]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106ad6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8106ada:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ade:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106ae2:	d054      	beq.n	8106b8e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8106ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106aea:	f200 808b 	bhi.w	8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8106aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106af0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106af4:	f000 8083 	beq.w	8106bfe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8106af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106afa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106afe:	f200 8081 	bhi.w	8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8106b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106b08:	d02f      	beq.n	8106b6a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8106b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106b10:	d878      	bhi.n	8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8106b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b14:	2b00      	cmp	r3, #0
 8106b16:	d004      	beq.n	8106b22 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8106b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106b1e:	d012      	beq.n	8106b46 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8106b20:	e070      	b.n	8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106b22:	4b89      	ldr	r3, [pc, #548]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106b24:	681b      	ldr	r3, [r3, #0]
 8106b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106b2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106b2e:	d107      	bne.n	8106b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106b34:	4618      	mov	r0, r3
 8106b36:	f000 fe15 	bl	8107764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106b3e:	e345      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106b40:	2300      	movs	r3, #0
 8106b42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b44:	e342      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106b46:	4b80      	ldr	r3, [pc, #512]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106b48:	681b      	ldr	r3, [r3, #0]
 8106b4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106b52:	d107      	bne.n	8106b64 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106b54:	f107 0318 	add.w	r3, r7, #24
 8106b58:	4618      	mov	r0, r3
 8106b5a:	f000 fb5b 	bl	8107214 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106b5e:	69bb      	ldr	r3, [r7, #24]
 8106b60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106b62:	e333      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106b64:	2300      	movs	r3, #0
 8106b66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b68:	e330      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106b6a:	4b77      	ldr	r3, [pc, #476]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106b6c:	681b      	ldr	r3, [r3, #0]
 8106b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106b76:	d107      	bne.n	8106b88 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106b78:	f107 030c 	add.w	r3, r7, #12
 8106b7c:	4618      	mov	r0, r3
 8106b7e:	f000 fc9d 	bl	81074bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106b82:	68fb      	ldr	r3, [r7, #12]
 8106b84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106b86:	e321      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106b88:	2300      	movs	r3, #0
 8106b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b8c:	e31e      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106b8e:	4b6e      	ldr	r3, [pc, #440]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106b92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106b96:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106b98:	4b6b      	ldr	r3, [pc, #428]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106b9a:	681b      	ldr	r3, [r3, #0]
 8106b9c:	f003 0304 	and.w	r3, r3, #4
 8106ba0:	2b04      	cmp	r3, #4
 8106ba2:	d10c      	bne.n	8106bbe <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8106ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106ba6:	2b00      	cmp	r3, #0
 8106ba8:	d109      	bne.n	8106bbe <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106baa:	4b67      	ldr	r3, [pc, #412]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106bac:	681b      	ldr	r3, [r3, #0]
 8106bae:	08db      	lsrs	r3, r3, #3
 8106bb0:	f003 0303 	and.w	r3, r3, #3
 8106bb4:	4a65      	ldr	r2, [pc, #404]	; (8106d4c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8106bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8106bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106bbc:	e01e      	b.n	8106bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106bbe:	4b62      	ldr	r3, [pc, #392]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106bc0:	681b      	ldr	r3, [r3, #0]
 8106bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106bca:	d106      	bne.n	8106bda <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8106bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106bd2:	d102      	bne.n	8106bda <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106bd4:	4b5e      	ldr	r3, [pc, #376]	; (8106d50 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8106bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106bd8:	e010      	b.n	8106bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106bda:	4b5b      	ldr	r3, [pc, #364]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106bdc:	681b      	ldr	r3, [r3, #0]
 8106bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106be2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106be6:	d106      	bne.n	8106bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8106be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106bee:	d102      	bne.n	8106bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106bf0:	4b58      	ldr	r3, [pc, #352]	; (8106d54 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8106bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106bf4:	e002      	b.n	8106bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106bf6:	2300      	movs	r3, #0
 8106bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106bfa:	e2e7      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106bfc:	e2e6      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106bfe:	4b56      	ldr	r3, [pc, #344]	; (8106d58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8106c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c02:	e2e3      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8106c04:	2300      	movs	r3, #0
 8106c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c08:	e2e0      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8106c0a:	687b      	ldr	r3, [r7, #4]
 8106c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106c10:	f040 80a7 	bne.w	8106d62 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8106c14:	4b4c      	ldr	r3, [pc, #304]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106c18:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8106c1c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106c24:	d055      	beq.n	8106cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8106c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106c2c:	f200 8096 	bhi.w	8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8106c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106c36:	f000 8084 	beq.w	8106d42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8106c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106c40:	f200 808c 	bhi.w	8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8106c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106c4a:	d030      	beq.n	8106cae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8106c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106c52:	f200 8083 	bhi.w	8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8106c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c58:	2b00      	cmp	r3, #0
 8106c5a:	d004      	beq.n	8106c66 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8106c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8106c62:	d012      	beq.n	8106c8a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8106c64:	e07a      	b.n	8106d5c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106c66:	4b38      	ldr	r3, [pc, #224]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106c68:	681b      	ldr	r3, [r3, #0]
 8106c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106c6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106c72:	d107      	bne.n	8106c84 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106c78:	4618      	mov	r0, r3
 8106c7a:	f000 fd73 	bl	8107764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106c80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106c82:	e2a3      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106c84:	2300      	movs	r3, #0
 8106c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c88:	e2a0      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106c8a:	4b2f      	ldr	r3, [pc, #188]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106c8c:	681b      	ldr	r3, [r3, #0]
 8106c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106c96:	d107      	bne.n	8106ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106c98:	f107 0318 	add.w	r3, r7, #24
 8106c9c:	4618      	mov	r0, r3
 8106c9e:	f000 fab9 	bl	8107214 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106ca2:	69bb      	ldr	r3, [r7, #24]
 8106ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8106ca6:	e291      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106ca8:	2300      	movs	r3, #0
 8106caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106cac:	e28e      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106cae:	4b26      	ldr	r3, [pc, #152]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106cb0:	681b      	ldr	r3, [r3, #0]
 8106cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106cba:	d107      	bne.n	8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106cbc:	f107 030c 	add.w	r3, r7, #12
 8106cc0:	4618      	mov	r0, r3
 8106cc2:	f000 fbfb 	bl	81074bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106cc6:	68fb      	ldr	r3, [r7, #12]
 8106cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106cca:	e27f      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106ccc:	2300      	movs	r3, #0
 8106cce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106cd0:	e27c      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106cd2:	4b1d      	ldr	r3, [pc, #116]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106cd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106cda:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106cdc:	4b1a      	ldr	r3, [pc, #104]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106cde:	681b      	ldr	r3, [r3, #0]
 8106ce0:	f003 0304 	and.w	r3, r3, #4
 8106ce4:	2b04      	cmp	r3, #4
 8106ce6:	d10c      	bne.n	8106d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8106ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106cea:	2b00      	cmp	r3, #0
 8106cec:	d109      	bne.n	8106d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106cee:	4b16      	ldr	r3, [pc, #88]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106cf0:	681b      	ldr	r3, [r3, #0]
 8106cf2:	08db      	lsrs	r3, r3, #3
 8106cf4:	f003 0303 	and.w	r3, r3, #3
 8106cf8:	4a14      	ldr	r2, [pc, #80]	; (8106d4c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8106cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8106cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106d00:	e01e      	b.n	8106d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106d02:	4b11      	ldr	r3, [pc, #68]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d04:	681b      	ldr	r3, [r3, #0]
 8106d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106d0e:	d106      	bne.n	8106d1e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8106d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106d16:	d102      	bne.n	8106d1e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106d18:	4b0d      	ldr	r3, [pc, #52]	; (8106d50 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8106d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106d1c:	e010      	b.n	8106d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106d1e:	4b0a      	ldr	r3, [pc, #40]	; (8106d48 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d20:	681b      	ldr	r3, [r3, #0]
 8106d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106d2a:	d106      	bne.n	8106d3a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8106d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106d32:	d102      	bne.n	8106d3a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106d34:	4b07      	ldr	r3, [pc, #28]	; (8106d54 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8106d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106d38:	e002      	b.n	8106d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106d3a:	2300      	movs	r3, #0
 8106d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106d3e:	e245      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106d40:	e244      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106d42:	4b05      	ldr	r3, [pc, #20]	; (8106d58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8106d44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d46:	e241      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106d48:	58024400 	.word	0x58024400
 8106d4c:	03d09000 	.word	0x03d09000
 8106d50:	003d0900 	.word	0x003d0900
 8106d54:	007a1200 	.word	0x007a1200
 8106d58:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8106d5c:	2300      	movs	r3, #0
 8106d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d60:	e234      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8106d62:	687b      	ldr	r3, [r7, #4]
 8106d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106d68:	f040 809c 	bne.w	8106ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8106d6c:	4b9b      	ldr	r3, [pc, #620]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106d70:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8106d74:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106d7c:	d054      	beq.n	8106e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8106d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106d84:	f200 808b 	bhi.w	8106e9e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106d8e:	f000 8083 	beq.w	8106e98 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8106d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106d98:	f200 8081 	bhi.w	8106e9e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106da2:	d02f      	beq.n	8106e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8106da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106daa:	d878      	bhi.n	8106e9e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106dae:	2b00      	cmp	r3, #0
 8106db0:	d004      	beq.n	8106dbc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8106db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106db8:	d012      	beq.n	8106de0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8106dba:	e070      	b.n	8106e9e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106dbc:	4b87      	ldr	r3, [pc, #540]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106dbe:	681b      	ldr	r3, [r3, #0]
 8106dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106dc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106dc8:	d107      	bne.n	8106dda <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106dce:	4618      	mov	r0, r3
 8106dd0:	f000 fcc8 	bl	8107764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106dd8:	e1f8      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106dda:	2300      	movs	r3, #0
 8106ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106dde:	e1f5      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106de0:	4b7e      	ldr	r3, [pc, #504]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106de2:	681b      	ldr	r3, [r3, #0]
 8106de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106dec:	d107      	bne.n	8106dfe <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106dee:	f107 0318 	add.w	r3, r7, #24
 8106df2:	4618      	mov	r0, r3
 8106df4:	f000 fa0e 	bl	8107214 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106df8:	69bb      	ldr	r3, [r7, #24]
 8106dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106dfc:	e1e6      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106dfe:	2300      	movs	r3, #0
 8106e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e02:	e1e3      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106e04:	4b75      	ldr	r3, [pc, #468]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106e06:	681b      	ldr	r3, [r3, #0]
 8106e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106e10:	d107      	bne.n	8106e22 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106e12:	f107 030c 	add.w	r3, r7, #12
 8106e16:	4618      	mov	r0, r3
 8106e18:	f000 fb50 	bl	81074bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106e1c:	68fb      	ldr	r3, [r7, #12]
 8106e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106e20:	e1d4      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106e22:	2300      	movs	r3, #0
 8106e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e26:	e1d1      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106e28:	4b6c      	ldr	r3, [pc, #432]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106e2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106e30:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106e32:	4b6a      	ldr	r3, [pc, #424]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106e34:	681b      	ldr	r3, [r3, #0]
 8106e36:	f003 0304 	and.w	r3, r3, #4
 8106e3a:	2b04      	cmp	r3, #4
 8106e3c:	d10c      	bne.n	8106e58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8106e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e40:	2b00      	cmp	r3, #0
 8106e42:	d109      	bne.n	8106e58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106e44:	4b65      	ldr	r3, [pc, #404]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106e46:	681b      	ldr	r3, [r3, #0]
 8106e48:	08db      	lsrs	r3, r3, #3
 8106e4a:	f003 0303 	and.w	r3, r3, #3
 8106e4e:	4a64      	ldr	r2, [pc, #400]	; (8106fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8106e50:	fa22 f303 	lsr.w	r3, r2, r3
 8106e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106e56:	e01e      	b.n	8106e96 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106e58:	4b60      	ldr	r3, [pc, #384]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106e5a:	681b      	ldr	r3, [r3, #0]
 8106e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106e64:	d106      	bne.n	8106e74 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8106e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106e6c:	d102      	bne.n	8106e74 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106e6e:	4b5d      	ldr	r3, [pc, #372]	; (8106fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8106e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106e72:	e010      	b.n	8106e96 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106e74:	4b59      	ldr	r3, [pc, #356]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106e76:	681b      	ldr	r3, [r3, #0]
 8106e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106e80:	d106      	bne.n	8106e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8106e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106e88:	d102      	bne.n	8106e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106e8a:	4b57      	ldr	r3, [pc, #348]	; (8106fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8106e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106e8e:	e002      	b.n	8106e96 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106e90:	2300      	movs	r3, #0
 8106e92:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106e94:	e19a      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106e96:	e199      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106e98:	4b54      	ldr	r3, [pc, #336]	; (8106fec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e9c:	e196      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8106e9e:	2300      	movs	r3, #0
 8106ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106ea2:	e193      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8106ea4:	687b      	ldr	r3, [r7, #4]
 8106ea6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8106eaa:	d173      	bne.n	8106f94 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8106eac:	4b4b      	ldr	r3, [pc, #300]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8106eb4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106ebc:	d02f      	beq.n	8106f1e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8106ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106ec4:	d863      	bhi.n	8106f8e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8106ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106ec8:	2b00      	cmp	r3, #0
 8106eca:	d004      	beq.n	8106ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8106ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106ed2:	d012      	beq.n	8106efa <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8106ed4:	e05b      	b.n	8106f8e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106ed6:	4b41      	ldr	r3, [pc, #260]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106ed8:	681b      	ldr	r3, [r3, #0]
 8106eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106ee2:	d107      	bne.n	8106ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106ee4:	f107 0318 	add.w	r3, r7, #24
 8106ee8:	4618      	mov	r0, r3
 8106eea:	f000 f993 	bl	8107214 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106eee:	69bb      	ldr	r3, [r7, #24]
 8106ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106ef2:	e16b      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106ef4:	2300      	movs	r3, #0
 8106ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106ef8:	e168      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106efa:	4b38      	ldr	r3, [pc, #224]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106efc:	681b      	ldr	r3, [r3, #0]
 8106efe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f06:	d107      	bne.n	8106f18 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106f08:	f107 030c 	add.w	r3, r7, #12
 8106f0c:	4618      	mov	r0, r3
 8106f0e:	f000 fad5 	bl	81074bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8106f12:	697b      	ldr	r3, [r7, #20]
 8106f14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106f16:	e159      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106f18:	2300      	movs	r3, #0
 8106f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106f1c:	e156      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106f1e:	4b2f      	ldr	r3, [pc, #188]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106f22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106f26:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106f28:	4b2c      	ldr	r3, [pc, #176]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106f2a:	681b      	ldr	r3, [r3, #0]
 8106f2c:	f003 0304 	and.w	r3, r3, #4
 8106f30:	2b04      	cmp	r3, #4
 8106f32:	d10c      	bne.n	8106f4e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8106f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f36:	2b00      	cmp	r3, #0
 8106f38:	d109      	bne.n	8106f4e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106f3a:	4b28      	ldr	r3, [pc, #160]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106f3c:	681b      	ldr	r3, [r3, #0]
 8106f3e:	08db      	lsrs	r3, r3, #3
 8106f40:	f003 0303 	and.w	r3, r3, #3
 8106f44:	4a26      	ldr	r2, [pc, #152]	; (8106fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8106f46:	fa22 f303 	lsr.w	r3, r2, r3
 8106f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106f4c:	e01e      	b.n	8106f8c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106f4e:	4b23      	ldr	r3, [pc, #140]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106f50:	681b      	ldr	r3, [r3, #0]
 8106f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106f5a:	d106      	bne.n	8106f6a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8106f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106f62:	d102      	bne.n	8106f6a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106f64:	4b1f      	ldr	r3, [pc, #124]	; (8106fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8106f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106f68:	e010      	b.n	8106f8c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106f6a:	4b1c      	ldr	r3, [pc, #112]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106f6c:	681b      	ldr	r3, [r3, #0]
 8106f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106f76:	d106      	bne.n	8106f86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8106f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f7e:	d102      	bne.n	8106f86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106f80:	4b19      	ldr	r3, [pc, #100]	; (8106fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8106f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106f84:	e002      	b.n	8106f8c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106f86:	2300      	movs	r3, #0
 8106f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106f8a:	e11f      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106f8c:	e11e      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8106f8e:	2300      	movs	r3, #0
 8106f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106f92:	e11b      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106f9a:	d13e      	bne.n	810701a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8106f9c:	4b0f      	ldr	r3, [pc, #60]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106fa4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fa8:	2b00      	cmp	r3, #0
 8106faa:	d004      	beq.n	8106fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8106fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106fb2:	d01d      	beq.n	8106ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8106fb4:	e02e      	b.n	8107014 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106fb6:	4b09      	ldr	r3, [pc, #36]	; (8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106fb8:	681b      	ldr	r3, [r3, #0]
 8106fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106fbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106fc2:	d107      	bne.n	8106fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106fc8:	4618      	mov	r0, r3
 8106fca:	f000 fbcb 	bl	8107764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106fd2:	e0fb      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106fd4:	2300      	movs	r3, #0
 8106fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106fd8:	e0f8      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106fda:	bf00      	nop
 8106fdc:	58024400 	.word	0x58024400
 8106fe0:	03d09000 	.word	0x03d09000
 8106fe4:	003d0900 	.word	0x003d0900
 8106fe8:	007a1200 	.word	0x007a1200
 8106fec:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106ff0:	4b79      	ldr	r3, [pc, #484]	; (81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106ff2:	681b      	ldr	r3, [r3, #0]
 8106ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106ffc:	d107      	bne.n	810700e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106ffe:	f107 0318 	add.w	r3, r7, #24
 8107002:	4618      	mov	r0, r3
 8107004:	f000 f906 	bl	8107214 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8107008:	6a3b      	ldr	r3, [r7, #32]
 810700a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810700c:	e0de      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810700e:	2300      	movs	r3, #0
 8107010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107012:	e0db      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8107014:	2300      	movs	r3, #0
 8107016:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107018:	e0d8      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810701a:	687b      	ldr	r3, [r7, #4]
 810701c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107020:	f040 8085 	bne.w	810712e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8107024:	4b6c      	ldr	r3, [pc, #432]	; (81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107028:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810702c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107034:	d06b      	beq.n	810710e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8107036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810703c:	d874      	bhi.n	8107128 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107044:	d056      	beq.n	81070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8107046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810704c:	d86c      	bhi.n	8107128 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107050:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107054:	d03b      	beq.n	81070ce <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8107056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107058:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810705c:	d864      	bhi.n	8107128 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107064:	d021      	beq.n	81070aa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8107066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810706c:	d85c      	bhi.n	8107128 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 810706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107070:	2b00      	cmp	r3, #0
 8107072:	d004      	beq.n	810707e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8107074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810707a:	d004      	beq.n	8107086 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 810707c:	e054      	b.n	8107128 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810707e:	f000 f8b3 	bl	81071e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8107082:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8107084:	e0a2      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107086:	4b54      	ldr	r3, [pc, #336]	; (81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107088:	681b      	ldr	r3, [r3, #0]
 810708a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810708e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107092:	d107      	bne.n	81070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107094:	f107 0318 	add.w	r3, r7, #24
 8107098:	4618      	mov	r0, r3
 810709a:	f000 f8bb 	bl	8107214 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810709e:	69fb      	ldr	r3, [r7, #28]
 81070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81070a2:	e093      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81070a4:	2300      	movs	r3, #0
 81070a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81070a8:	e090      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81070aa:	4b4b      	ldr	r3, [pc, #300]	; (81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81070ac:	681b      	ldr	r3, [r3, #0]
 81070ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81070b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81070b6:	d107      	bne.n	81070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81070b8:	f107 030c 	add.w	r3, r7, #12
 81070bc:	4618      	mov	r0, r3
 81070be:	f000 f9fd 	bl	81074bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81070c2:	693b      	ldr	r3, [r7, #16]
 81070c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81070c6:	e081      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81070c8:	2300      	movs	r3, #0
 81070ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81070cc:	e07e      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81070ce:	4b42      	ldr	r3, [pc, #264]	; (81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	f003 0304 	and.w	r3, r3, #4
 81070d6:	2b04      	cmp	r3, #4
 81070d8:	d109      	bne.n	81070ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81070da:	4b3f      	ldr	r3, [pc, #252]	; (81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81070dc:	681b      	ldr	r3, [r3, #0]
 81070de:	08db      	lsrs	r3, r3, #3
 81070e0:	f003 0303 	and.w	r3, r3, #3
 81070e4:	4a3d      	ldr	r2, [pc, #244]	; (81071dc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 81070e6:	fa22 f303 	lsr.w	r3, r2, r3
 81070ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81070ec:	e06e      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81070ee:	2300      	movs	r3, #0
 81070f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81070f2:	e06b      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81070f4:	4b38      	ldr	r3, [pc, #224]	; (81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81070f6:	681b      	ldr	r3, [r3, #0]
 81070f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81070fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107100:	d102      	bne.n	8107108 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8107102:	4b37      	ldr	r3, [pc, #220]	; (81071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8107104:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107106:	e061      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8107108:	2300      	movs	r3, #0
 810710a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810710c:	e05e      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810710e:	4b32      	ldr	r3, [pc, #200]	; (81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107110:	681b      	ldr	r3, [r3, #0]
 8107112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810711a:	d102      	bne.n	8107122 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 810711c:	4b31      	ldr	r3, [pc, #196]	; (81071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810711e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107120:	e054      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107122:	2300      	movs	r3, #0
 8107124:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107126:	e051      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8107128:	2300      	movs	r3, #0
 810712a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810712c:	e04e      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107134:	d148      	bne.n	81071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8107136:	4b28      	ldr	r3, [pc, #160]	; (81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810713a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810713e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8107140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107146:	d02a      	beq.n	810719e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8107148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810714a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810714e:	d838      	bhi.n	81071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8107150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107152:	2b00      	cmp	r3, #0
 8107154:	d004      	beq.n	8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8107156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810715c:	d00d      	beq.n	810717a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 810715e:	e030      	b.n	81071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107160:	4b1d      	ldr	r3, [pc, #116]	; (81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107162:	681b      	ldr	r3, [r3, #0]
 8107164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810716c:	d102      	bne.n	8107174 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 810716e:	4b1d      	ldr	r3, [pc, #116]	; (81071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8107170:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107172:	e02b      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107174:	2300      	movs	r3, #0
 8107176:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107178:	e028      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810717a:	4b17      	ldr	r3, [pc, #92]	; (81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810717c:	681b      	ldr	r3, [r3, #0]
 810717e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107182:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107186:	d107      	bne.n	8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810718c:	4618      	mov	r0, r3
 810718e:	f000 fae9 	bl	8107764 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107194:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107196:	e019      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107198:	2300      	movs	r3, #0
 810719a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810719c:	e016      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810719e:	4b0e      	ldr	r3, [pc, #56]	; (81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81071a0:	681b      	ldr	r3, [r3, #0]
 81071a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81071a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81071aa:	d107      	bne.n	81071bc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81071ac:	f107 0318 	add.w	r3, r7, #24
 81071b0:	4618      	mov	r0, r3
 81071b2:	f000 f82f 	bl	8107214 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81071b6:	69fb      	ldr	r3, [r7, #28]
 81071b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81071ba:	e007      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81071bc:	2300      	movs	r3, #0
 81071be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81071c0:	e004      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81071c2:	2300      	movs	r3, #0
 81071c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81071c6:	e001      	b.n	81071cc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 81071c8:	2300      	movs	r3, #0
 81071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 81071cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81071ce:	4618      	mov	r0, r3
 81071d0:	3740      	adds	r7, #64	; 0x40
 81071d2:	46bd      	mov	sp, r7
 81071d4:	bd80      	pop	{r7, pc}
 81071d6:	bf00      	nop
 81071d8:	58024400 	.word	0x58024400
 81071dc:	03d09000 	.word	0x03d09000
 81071e0:	003d0900 	.word	0x003d0900
 81071e4:	007a1200 	.word	0x007a1200

081071e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81071e8:	b580      	push	{r7, lr}
 81071ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81071ec:	f7fe fb86 	bl	81058fc <HAL_RCC_GetHCLKFreq>
 81071f0:	4602      	mov	r2, r0
 81071f2:	4b06      	ldr	r3, [pc, #24]	; (810720c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81071f4:	6a1b      	ldr	r3, [r3, #32]
 81071f6:	091b      	lsrs	r3, r3, #4
 81071f8:	f003 0307 	and.w	r3, r3, #7
 81071fc:	4904      	ldr	r1, [pc, #16]	; (8107210 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81071fe:	5ccb      	ldrb	r3, [r1, r3]
 8107200:	f003 031f 	and.w	r3, r3, #31
 8107204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107208:	4618      	mov	r0, r3
 810720a:	bd80      	pop	{r7, pc}
 810720c:	58024400 	.word	0x58024400
 8107210:	0810affc 	.word	0x0810affc

08107214 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8107214:	b480      	push	{r7}
 8107216:	b089      	sub	sp, #36	; 0x24
 8107218:	af00      	add	r7, sp, #0
 810721a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810721c:	4ba1      	ldr	r3, [pc, #644]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107220:	f003 0303 	and.w	r3, r3, #3
 8107224:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8107226:	4b9f      	ldr	r3, [pc, #636]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810722a:	0b1b      	lsrs	r3, r3, #12
 810722c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107230:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8107232:	4b9c      	ldr	r3, [pc, #624]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107236:	091b      	lsrs	r3, r3, #4
 8107238:	f003 0301 	and.w	r3, r3, #1
 810723c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810723e:	4b99      	ldr	r3, [pc, #612]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107242:	08db      	lsrs	r3, r3, #3
 8107244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107248:	693a      	ldr	r2, [r7, #16]
 810724a:	fb02 f303 	mul.w	r3, r2, r3
 810724e:	ee07 3a90 	vmov	s15, r3
 8107252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107256:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810725a:	697b      	ldr	r3, [r7, #20]
 810725c:	2b00      	cmp	r3, #0
 810725e:	f000 8111 	beq.w	8107484 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8107262:	69bb      	ldr	r3, [r7, #24]
 8107264:	2b02      	cmp	r3, #2
 8107266:	f000 8083 	beq.w	8107370 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810726a:	69bb      	ldr	r3, [r7, #24]
 810726c:	2b02      	cmp	r3, #2
 810726e:	f200 80a1 	bhi.w	81073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8107272:	69bb      	ldr	r3, [r7, #24]
 8107274:	2b00      	cmp	r3, #0
 8107276:	d003      	beq.n	8107280 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107278:	69bb      	ldr	r3, [r7, #24]
 810727a:	2b01      	cmp	r3, #1
 810727c:	d056      	beq.n	810732c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810727e:	e099      	b.n	81073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107280:	4b88      	ldr	r3, [pc, #544]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107282:	681b      	ldr	r3, [r3, #0]
 8107284:	f003 0320 	and.w	r3, r3, #32
 8107288:	2b00      	cmp	r3, #0
 810728a:	d02d      	beq.n	81072e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810728c:	4b85      	ldr	r3, [pc, #532]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810728e:	681b      	ldr	r3, [r3, #0]
 8107290:	08db      	lsrs	r3, r3, #3
 8107292:	f003 0303 	and.w	r3, r3, #3
 8107296:	4a84      	ldr	r2, [pc, #528]	; (81074a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107298:	fa22 f303 	lsr.w	r3, r2, r3
 810729c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810729e:	68bb      	ldr	r3, [r7, #8]
 81072a0:	ee07 3a90 	vmov	s15, r3
 81072a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81072a8:	697b      	ldr	r3, [r7, #20]
 81072aa:	ee07 3a90 	vmov	s15, r3
 81072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81072b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81072b6:	4b7b      	ldr	r3, [pc, #492]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81072ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81072be:	ee07 3a90 	vmov	s15, r3
 81072c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81072c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81072ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 81074ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81072ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81072d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81072d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81072da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81072de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81072e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81072e6:	e087      	b.n	81073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81072e8:	697b      	ldr	r3, [r7, #20]
 81072ea:	ee07 3a90 	vmov	s15, r3
 81072ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81072f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81074b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81072f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81072fa:	4b6a      	ldr	r3, [pc, #424]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81072fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107302:	ee07 3a90 	vmov	s15, r3
 8107306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810730a:	ed97 6a03 	vldr	s12, [r7, #12]
 810730e:	eddf 5a67 	vldr	s11, [pc, #412]	; 81074ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810731a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810731e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107326:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810732a:	e065      	b.n	81073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810732c:	697b      	ldr	r3, [r7, #20]
 810732e:	ee07 3a90 	vmov	s15, r3
 8107332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107336:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81074b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810733e:	4b59      	ldr	r3, [pc, #356]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107346:	ee07 3a90 	vmov	s15, r3
 810734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810734e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107352:	eddf 5a56 	vldr	s11, [pc, #344]	; 81074ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810735e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107366:	ee67 7a27 	vmul.f32	s15, s14, s15
 810736a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810736e:	e043      	b.n	81073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107370:	697b      	ldr	r3, [r7, #20]
 8107372:	ee07 3a90 	vmov	s15, r3
 8107376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810737a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810737e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107382:	4b48      	ldr	r3, [pc, #288]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810738a:	ee07 3a90 	vmov	s15, r3
 810738e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107392:	ed97 6a03 	vldr	s12, [r7, #12]
 8107396:	eddf 5a45 	vldr	s11, [pc, #276]	; 81074ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810739a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810739e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81073a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81073a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81073aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81073ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81073b2:	e021      	b.n	81073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81073b4:	697b      	ldr	r3, [r7, #20]
 81073b6:	ee07 3a90 	vmov	s15, r3
 81073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81074b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81073c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81073c6:	4b37      	ldr	r3, [pc, #220]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81073ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81073ce:	ee07 3a90 	vmov	s15, r3
 81073d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81073d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81073da:	eddf 5a34 	vldr	s11, [pc, #208]	; 81074ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81073de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81073e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81073e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81073ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81073ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81073f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81073f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81073f8:	4b2a      	ldr	r3, [pc, #168]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81073fc:	0a5b      	lsrs	r3, r3, #9
 81073fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107402:	ee07 3a90 	vmov	s15, r3
 8107406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810740a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810740e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107412:	edd7 6a07 	vldr	s13, [r7, #28]
 8107416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810741a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810741e:	ee17 2a90 	vmov	r2, s15
 8107422:	687b      	ldr	r3, [r7, #4]
 8107424:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8107426:	4b1f      	ldr	r3, [pc, #124]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810742a:	0c1b      	lsrs	r3, r3, #16
 810742c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107430:	ee07 3a90 	vmov	s15, r3
 8107434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810743c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107440:	edd7 6a07 	vldr	s13, [r7, #28]
 8107444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810744c:	ee17 2a90 	vmov	r2, s15
 8107450:	687b      	ldr	r3, [r7, #4]
 8107452:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8107454:	4b13      	ldr	r3, [pc, #76]	; (81074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107458:	0e1b      	lsrs	r3, r3, #24
 810745a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810745e:	ee07 3a90 	vmov	s15, r3
 8107462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810746a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810746e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810747a:	ee17 2a90 	vmov	r2, s15
 810747e:	687b      	ldr	r3, [r7, #4]
 8107480:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107482:	e008      	b.n	8107496 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107484:	687b      	ldr	r3, [r7, #4]
 8107486:	2200      	movs	r2, #0
 8107488:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810748a:	687b      	ldr	r3, [r7, #4]
 810748c:	2200      	movs	r2, #0
 810748e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107490:	687b      	ldr	r3, [r7, #4]
 8107492:	2200      	movs	r2, #0
 8107494:	609a      	str	r2, [r3, #8]
}
 8107496:	bf00      	nop
 8107498:	3724      	adds	r7, #36	; 0x24
 810749a:	46bd      	mov	sp, r7
 810749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074a0:	4770      	bx	lr
 81074a2:	bf00      	nop
 81074a4:	58024400 	.word	0x58024400
 81074a8:	03d09000 	.word	0x03d09000
 81074ac:	46000000 	.word	0x46000000
 81074b0:	4c742400 	.word	0x4c742400
 81074b4:	4a742400 	.word	0x4a742400
 81074b8:	4af42400 	.word	0x4af42400

081074bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81074bc:	b480      	push	{r7}
 81074be:	b089      	sub	sp, #36	; 0x24
 81074c0:	af00      	add	r7, sp, #0
 81074c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81074c4:	4ba1      	ldr	r3, [pc, #644]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81074c8:	f003 0303 	and.w	r3, r3, #3
 81074cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81074ce:	4b9f      	ldr	r3, [pc, #636]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81074d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81074d2:	0d1b      	lsrs	r3, r3, #20
 81074d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81074d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81074da:	4b9c      	ldr	r3, [pc, #624]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81074de:	0a1b      	lsrs	r3, r3, #8
 81074e0:	f003 0301 	and.w	r3, r3, #1
 81074e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81074e6:	4b99      	ldr	r3, [pc, #612]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81074e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81074ea:	08db      	lsrs	r3, r3, #3
 81074ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81074f0:	693a      	ldr	r2, [r7, #16]
 81074f2:	fb02 f303 	mul.w	r3, r2, r3
 81074f6:	ee07 3a90 	vmov	s15, r3
 81074fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81074fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8107502:	697b      	ldr	r3, [r7, #20]
 8107504:	2b00      	cmp	r3, #0
 8107506:	f000 8111 	beq.w	810772c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810750a:	69bb      	ldr	r3, [r7, #24]
 810750c:	2b02      	cmp	r3, #2
 810750e:	f000 8083 	beq.w	8107618 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8107512:	69bb      	ldr	r3, [r7, #24]
 8107514:	2b02      	cmp	r3, #2
 8107516:	f200 80a1 	bhi.w	810765c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810751a:	69bb      	ldr	r3, [r7, #24]
 810751c:	2b00      	cmp	r3, #0
 810751e:	d003      	beq.n	8107528 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8107520:	69bb      	ldr	r3, [r7, #24]
 8107522:	2b01      	cmp	r3, #1
 8107524:	d056      	beq.n	81075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107526:	e099      	b.n	810765c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107528:	4b88      	ldr	r3, [pc, #544]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810752a:	681b      	ldr	r3, [r3, #0]
 810752c:	f003 0320 	and.w	r3, r3, #32
 8107530:	2b00      	cmp	r3, #0
 8107532:	d02d      	beq.n	8107590 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107534:	4b85      	ldr	r3, [pc, #532]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107536:	681b      	ldr	r3, [r3, #0]
 8107538:	08db      	lsrs	r3, r3, #3
 810753a:	f003 0303 	and.w	r3, r3, #3
 810753e:	4a84      	ldr	r2, [pc, #528]	; (8107750 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107540:	fa22 f303 	lsr.w	r3, r2, r3
 8107544:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107546:	68bb      	ldr	r3, [r7, #8]
 8107548:	ee07 3a90 	vmov	s15, r3
 810754c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107550:	697b      	ldr	r3, [r7, #20]
 8107552:	ee07 3a90 	vmov	s15, r3
 8107556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810755a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810755e:	4b7b      	ldr	r3, [pc, #492]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107566:	ee07 3a90 	vmov	s15, r3
 810756a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810756e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107572:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810757a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810757e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107586:	ee67 7a27 	vmul.f32	s15, s14, s15
 810758a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810758e:	e087      	b.n	81076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107590:	697b      	ldr	r3, [r7, #20]
 8107592:	ee07 3a90 	vmov	s15, r3
 8107596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810759a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107758 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810759e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81075a2:	4b6a      	ldr	r3, [pc, #424]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81075a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81075aa:	ee07 3a90 	vmov	s15, r3
 81075ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81075b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81075b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81075ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81075be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81075c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81075c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81075ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81075ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81075d2:	e065      	b.n	81076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81075d4:	697b      	ldr	r3, [r7, #20]
 81075d6:	ee07 3a90 	vmov	s15, r3
 81075da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810775c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81075e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81075e6:	4b59      	ldr	r3, [pc, #356]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81075ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81075ee:	ee07 3a90 	vmov	s15, r3
 81075f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81075f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81075fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81075fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810760a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810760e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107616:	e043      	b.n	81076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107618:	697b      	ldr	r3, [r7, #20]
 810761a:	ee07 3a90 	vmov	s15, r3
 810761e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107622:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107760 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8107626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810762a:	4b48      	ldr	r3, [pc, #288]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810762e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107632:	ee07 3a90 	vmov	s15, r3
 8107636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810763a:	ed97 6a03 	vldr	s12, [r7, #12]
 810763e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810764a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810764e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810765a:	e021      	b.n	81076a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810765c:	697b      	ldr	r3, [r7, #20]
 810765e:	ee07 3a90 	vmov	s15, r3
 8107662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107666:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810775c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810766a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810766e:	4b37      	ldr	r3, [pc, #220]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107676:	ee07 3a90 	vmov	s15, r3
 810767a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810767e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107682:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810768a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810768e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107696:	ee67 7a27 	vmul.f32	s15, s14, s15
 810769a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810769e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81076a0:	4b2a      	ldr	r3, [pc, #168]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81076a4:	0a5b      	lsrs	r3, r3, #9
 81076a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81076aa:	ee07 3a90 	vmov	s15, r3
 81076ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81076b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81076ba:	edd7 6a07 	vldr	s13, [r7, #28]
 81076be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81076c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81076c6:	ee17 2a90 	vmov	r2, s15
 81076ca:	687b      	ldr	r3, [r7, #4]
 81076cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81076ce:	4b1f      	ldr	r3, [pc, #124]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81076d2:	0c1b      	lsrs	r3, r3, #16
 81076d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81076d8:	ee07 3a90 	vmov	s15, r3
 81076dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81076e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81076e8:	edd7 6a07 	vldr	s13, [r7, #28]
 81076ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81076f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81076f4:	ee17 2a90 	vmov	r2, s15
 81076f8:	687b      	ldr	r3, [r7, #4]
 81076fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81076fc:	4b13      	ldr	r3, [pc, #76]	; (810774c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107700:	0e1b      	lsrs	r3, r3, #24
 8107702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107706:	ee07 3a90 	vmov	s15, r3
 810770a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810770e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107712:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107716:	edd7 6a07 	vldr	s13, [r7, #28]
 810771a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810771e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107722:	ee17 2a90 	vmov	r2, s15
 8107726:	687b      	ldr	r3, [r7, #4]
 8107728:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810772a:	e008      	b.n	810773e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810772c:	687b      	ldr	r3, [r7, #4]
 810772e:	2200      	movs	r2, #0
 8107730:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8107732:	687b      	ldr	r3, [r7, #4]
 8107734:	2200      	movs	r2, #0
 8107736:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107738:	687b      	ldr	r3, [r7, #4]
 810773a:	2200      	movs	r2, #0
 810773c:	609a      	str	r2, [r3, #8]
}
 810773e:	bf00      	nop
 8107740:	3724      	adds	r7, #36	; 0x24
 8107742:	46bd      	mov	sp, r7
 8107744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107748:	4770      	bx	lr
 810774a:	bf00      	nop
 810774c:	58024400 	.word	0x58024400
 8107750:	03d09000 	.word	0x03d09000
 8107754:	46000000 	.word	0x46000000
 8107758:	4c742400 	.word	0x4c742400
 810775c:	4a742400 	.word	0x4a742400
 8107760:	4af42400 	.word	0x4af42400

08107764 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8107764:	b480      	push	{r7}
 8107766:	b089      	sub	sp, #36	; 0x24
 8107768:	af00      	add	r7, sp, #0
 810776a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810776c:	4ba0      	ldr	r3, [pc, #640]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107770:	f003 0303 	and.w	r3, r3, #3
 8107774:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8107776:	4b9e      	ldr	r3, [pc, #632]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810777a:	091b      	lsrs	r3, r3, #4
 810777c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107780:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8107782:	4b9b      	ldr	r3, [pc, #620]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107786:	f003 0301 	and.w	r3, r3, #1
 810778a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810778c:	4b98      	ldr	r3, [pc, #608]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810778e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107790:	08db      	lsrs	r3, r3, #3
 8107792:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107796:	693a      	ldr	r2, [r7, #16]
 8107798:	fb02 f303 	mul.w	r3, r2, r3
 810779c:	ee07 3a90 	vmov	s15, r3
 81077a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81077a8:	697b      	ldr	r3, [r7, #20]
 81077aa:	2b00      	cmp	r3, #0
 81077ac:	f000 8111 	beq.w	81079d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81077b0:	69bb      	ldr	r3, [r7, #24]
 81077b2:	2b02      	cmp	r3, #2
 81077b4:	f000 8083 	beq.w	81078be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81077b8:	69bb      	ldr	r3, [r7, #24]
 81077ba:	2b02      	cmp	r3, #2
 81077bc:	f200 80a1 	bhi.w	8107902 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81077c0:	69bb      	ldr	r3, [r7, #24]
 81077c2:	2b00      	cmp	r3, #0
 81077c4:	d003      	beq.n	81077ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81077c6:	69bb      	ldr	r3, [r7, #24]
 81077c8:	2b01      	cmp	r3, #1
 81077ca:	d056      	beq.n	810787a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81077cc:	e099      	b.n	8107902 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81077ce:	4b88      	ldr	r3, [pc, #544]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81077d0:	681b      	ldr	r3, [r3, #0]
 81077d2:	f003 0320 	and.w	r3, r3, #32
 81077d6:	2b00      	cmp	r3, #0
 81077d8:	d02d      	beq.n	8107836 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81077da:	4b85      	ldr	r3, [pc, #532]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81077dc:	681b      	ldr	r3, [r3, #0]
 81077de:	08db      	lsrs	r3, r3, #3
 81077e0:	f003 0303 	and.w	r3, r3, #3
 81077e4:	4a83      	ldr	r2, [pc, #524]	; (81079f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81077e6:	fa22 f303 	lsr.w	r3, r2, r3
 81077ea:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81077ec:	68bb      	ldr	r3, [r7, #8]
 81077ee:	ee07 3a90 	vmov	s15, r3
 81077f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077f6:	697b      	ldr	r3, [r7, #20]
 81077f8:	ee07 3a90 	vmov	s15, r3
 81077fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107804:	4b7a      	ldr	r3, [pc, #488]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810780c:	ee07 3a90 	vmov	s15, r3
 8107810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107814:	ed97 6a03 	vldr	s12, [r7, #12]
 8107818:	eddf 5a77 	vldr	s11, [pc, #476]	; 81079f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810781c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107824:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810782c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107830:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8107834:	e087      	b.n	8107946 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107836:	697b      	ldr	r3, [r7, #20]
 8107838:	ee07 3a90 	vmov	s15, r3
 810783c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107840:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81079fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107848:	4b69      	ldr	r3, [pc, #420]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810784c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107850:	ee07 3a90 	vmov	s15, r3
 8107854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107858:	ed97 6a03 	vldr	s12, [r7, #12]
 810785c:	eddf 5a66 	vldr	s11, [pc, #408]	; 81079f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107860:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107864:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810786c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107874:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107878:	e065      	b.n	8107946 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810787a:	697b      	ldr	r3, [r7, #20]
 810787c:	ee07 3a90 	vmov	s15, r3
 8107880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107884:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8107a00 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810788c:	4b58      	ldr	r3, [pc, #352]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810788e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107894:	ee07 3a90 	vmov	s15, r3
 8107898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810789c:	ed97 6a03 	vldr	s12, [r7, #12]
 81078a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 81079f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81078a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81078a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81078ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81078b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81078b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81078b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81078bc:	e043      	b.n	8107946 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81078be:	697b      	ldr	r3, [r7, #20]
 81078c0:	ee07 3a90 	vmov	s15, r3
 81078c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8107a04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81078cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81078d0:	4b47      	ldr	r3, [pc, #284]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81078d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81078d8:	ee07 3a90 	vmov	s15, r3
 81078dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81078e0:	ed97 6a03 	vldr	s12, [r7, #12]
 81078e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 81079f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81078e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81078ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81078f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81078f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81078f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81078fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107900:	e021      	b.n	8107946 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107902:	697b      	ldr	r3, [r7, #20]
 8107904:	ee07 3a90 	vmov	s15, r3
 8107908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810790c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 81079fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107914:	4b36      	ldr	r3, [pc, #216]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810791c:	ee07 3a90 	vmov	s15, r3
 8107920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107924:	ed97 6a03 	vldr	s12, [r7, #12]
 8107928:	eddf 5a33 	vldr	s11, [pc, #204]	; 81079f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810792c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810793c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107940:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107944:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8107946:	4b2a      	ldr	r3, [pc, #168]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810794a:	0a5b      	lsrs	r3, r3, #9
 810794c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107950:	ee07 3a90 	vmov	s15, r3
 8107954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810795c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107960:	edd7 6a07 	vldr	s13, [r7, #28]
 8107964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810796c:	ee17 2a90 	vmov	r2, s15
 8107970:	687b      	ldr	r3, [r7, #4]
 8107972:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8107974:	4b1e      	ldr	r3, [pc, #120]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107978:	0c1b      	lsrs	r3, r3, #16
 810797a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810797e:	ee07 3a90 	vmov	s15, r3
 8107982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810798a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810798e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810799a:	ee17 2a90 	vmov	r2, s15
 810799e:	687b      	ldr	r3, [r7, #4]
 81079a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 81079a2:	4b13      	ldr	r3, [pc, #76]	; (81079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81079a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81079a6:	0e1b      	lsrs	r3, r3, #24
 81079a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81079ac:	ee07 3a90 	vmov	s15, r3
 81079b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81079b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81079bc:	edd7 6a07 	vldr	s13, [r7, #28]
 81079c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81079c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81079c8:	ee17 2a90 	vmov	r2, s15
 81079cc:	687b      	ldr	r3, [r7, #4]
 81079ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81079d0:	e008      	b.n	81079e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81079d2:	687b      	ldr	r3, [r7, #4]
 81079d4:	2200      	movs	r2, #0
 81079d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81079d8:	687b      	ldr	r3, [r7, #4]
 81079da:	2200      	movs	r2, #0
 81079dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81079de:	687b      	ldr	r3, [r7, #4]
 81079e0:	2200      	movs	r2, #0
 81079e2:	609a      	str	r2, [r3, #8]
}
 81079e4:	bf00      	nop
 81079e6:	3724      	adds	r7, #36	; 0x24
 81079e8:	46bd      	mov	sp, r7
 81079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079ee:	4770      	bx	lr
 81079f0:	58024400 	.word	0x58024400
 81079f4:	03d09000 	.word	0x03d09000
 81079f8:	46000000 	.word	0x46000000
 81079fc:	4c742400 	.word	0x4c742400
 8107a00:	4a742400 	.word	0x4a742400
 8107a04:	4af42400 	.word	0x4af42400

08107a08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107a08:	b580      	push	{r7, lr}
 8107a0a:	b084      	sub	sp, #16
 8107a0c:	af00      	add	r7, sp, #0
 8107a0e:	6078      	str	r0, [r7, #4]
 8107a10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107a12:	2300      	movs	r3, #0
 8107a14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107a16:	4b54      	ldr	r3, [pc, #336]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a1a:	f003 0303 	and.w	r3, r3, #3
 8107a1e:	2b03      	cmp	r3, #3
 8107a20:	d101      	bne.n	8107a26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8107a22:	2301      	movs	r3, #1
 8107a24:	e09b      	b.n	8107b5e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107a26:	4b50      	ldr	r3, [pc, #320]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107a28:	681b      	ldr	r3, [r3, #0]
 8107a2a:	4a4f      	ldr	r2, [pc, #316]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107a2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8107a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107a32:	f7fb fb5d 	bl	81030f0 <HAL_GetTick>
 8107a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107a38:	e008      	b.n	8107a4c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107a3a:	f7fb fb59 	bl	81030f0 <HAL_GetTick>
 8107a3e:	4602      	mov	r2, r0
 8107a40:	68bb      	ldr	r3, [r7, #8]
 8107a42:	1ad3      	subs	r3, r2, r3
 8107a44:	2b02      	cmp	r3, #2
 8107a46:	d901      	bls.n	8107a4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107a48:	2303      	movs	r3, #3
 8107a4a:	e088      	b.n	8107b5e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107a4c:	4b46      	ldr	r3, [pc, #280]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107a4e:	681b      	ldr	r3, [r3, #0]
 8107a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107a54:	2b00      	cmp	r3, #0
 8107a56:	d1f0      	bne.n	8107a3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107a58:	4b43      	ldr	r3, [pc, #268]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8107a60:	687b      	ldr	r3, [r7, #4]
 8107a62:	681b      	ldr	r3, [r3, #0]
 8107a64:	031b      	lsls	r3, r3, #12
 8107a66:	4940      	ldr	r1, [pc, #256]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107a68:	4313      	orrs	r3, r2
 8107a6a:	628b      	str	r3, [r1, #40]	; 0x28
 8107a6c:	687b      	ldr	r3, [r7, #4]
 8107a6e:	685b      	ldr	r3, [r3, #4]
 8107a70:	3b01      	subs	r3, #1
 8107a72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107a76:	687b      	ldr	r3, [r7, #4]
 8107a78:	689b      	ldr	r3, [r3, #8]
 8107a7a:	3b01      	subs	r3, #1
 8107a7c:	025b      	lsls	r3, r3, #9
 8107a7e:	b29b      	uxth	r3, r3
 8107a80:	431a      	orrs	r2, r3
 8107a82:	687b      	ldr	r3, [r7, #4]
 8107a84:	68db      	ldr	r3, [r3, #12]
 8107a86:	3b01      	subs	r3, #1
 8107a88:	041b      	lsls	r3, r3, #16
 8107a8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107a8e:	431a      	orrs	r2, r3
 8107a90:	687b      	ldr	r3, [r7, #4]
 8107a92:	691b      	ldr	r3, [r3, #16]
 8107a94:	3b01      	subs	r3, #1
 8107a96:	061b      	lsls	r3, r3, #24
 8107a98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107a9c:	4932      	ldr	r1, [pc, #200]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107a9e:	4313      	orrs	r3, r2
 8107aa0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107aa2:	4b31      	ldr	r3, [pc, #196]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107aa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8107aaa:	687b      	ldr	r3, [r7, #4]
 8107aac:	695b      	ldr	r3, [r3, #20]
 8107aae:	492e      	ldr	r1, [pc, #184]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107ab0:	4313      	orrs	r3, r2
 8107ab2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107ab4:	4b2c      	ldr	r3, [pc, #176]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ab8:	f023 0220 	bic.w	r2, r3, #32
 8107abc:	687b      	ldr	r3, [r7, #4]
 8107abe:	699b      	ldr	r3, [r3, #24]
 8107ac0:	4929      	ldr	r1, [pc, #164]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107ac2:	4313      	orrs	r3, r2
 8107ac4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107ac6:	4b28      	ldr	r3, [pc, #160]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107aca:	4a27      	ldr	r2, [pc, #156]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107acc:	f023 0310 	bic.w	r3, r3, #16
 8107ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8107ad2:	4b25      	ldr	r3, [pc, #148]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107ada:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107ade:	687a      	ldr	r2, [r7, #4]
 8107ae0:	69d2      	ldr	r2, [r2, #28]
 8107ae2:	00d2      	lsls	r2, r2, #3
 8107ae4:	4920      	ldr	r1, [pc, #128]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107ae6:	4313      	orrs	r3, r2
 8107ae8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107aea:	4b1f      	ldr	r3, [pc, #124]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107aee:	4a1e      	ldr	r2, [pc, #120]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107af0:	f043 0310 	orr.w	r3, r3, #16
 8107af4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107af6:	683b      	ldr	r3, [r7, #0]
 8107af8:	2b00      	cmp	r3, #0
 8107afa:	d106      	bne.n	8107b0a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107afc:	4b1a      	ldr	r3, [pc, #104]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b00:	4a19      	ldr	r2, [pc, #100]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107b02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8107b06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107b08:	e00f      	b.n	8107b2a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107b0a:	683b      	ldr	r3, [r7, #0]
 8107b0c:	2b01      	cmp	r3, #1
 8107b0e:	d106      	bne.n	8107b1e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107b10:	4b15      	ldr	r3, [pc, #84]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b14:	4a14      	ldr	r2, [pc, #80]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107b1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107b1c:	e005      	b.n	8107b2a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107b1e:	4b12      	ldr	r3, [pc, #72]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b22:	4a11      	ldr	r2, [pc, #68]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107b24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107b28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107b2a:	4b0f      	ldr	r3, [pc, #60]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107b2c:	681b      	ldr	r3, [r3, #0]
 8107b2e:	4a0e      	ldr	r2, [pc, #56]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107b30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8107b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107b36:	f7fb fadb 	bl	81030f0 <HAL_GetTick>
 8107b3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107b3c:	e008      	b.n	8107b50 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107b3e:	f7fb fad7 	bl	81030f0 <HAL_GetTick>
 8107b42:	4602      	mov	r2, r0
 8107b44:	68bb      	ldr	r3, [r7, #8]
 8107b46:	1ad3      	subs	r3, r2, r3
 8107b48:	2b02      	cmp	r3, #2
 8107b4a:	d901      	bls.n	8107b50 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107b4c:	2303      	movs	r3, #3
 8107b4e:	e006      	b.n	8107b5e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107b50:	4b05      	ldr	r3, [pc, #20]	; (8107b68 <RCCEx_PLL2_Config+0x160>)
 8107b52:	681b      	ldr	r3, [r3, #0]
 8107b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107b58:	2b00      	cmp	r3, #0
 8107b5a:	d0f0      	beq.n	8107b3e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8107b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8107b5e:	4618      	mov	r0, r3
 8107b60:	3710      	adds	r7, #16
 8107b62:	46bd      	mov	sp, r7
 8107b64:	bd80      	pop	{r7, pc}
 8107b66:	bf00      	nop
 8107b68:	58024400 	.word	0x58024400

08107b6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107b6c:	b580      	push	{r7, lr}
 8107b6e:	b084      	sub	sp, #16
 8107b70:	af00      	add	r7, sp, #0
 8107b72:	6078      	str	r0, [r7, #4]
 8107b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107b76:	2300      	movs	r3, #0
 8107b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107b7a:	4b54      	ldr	r3, [pc, #336]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b7e:	f003 0303 	and.w	r3, r3, #3
 8107b82:	2b03      	cmp	r3, #3
 8107b84:	d101      	bne.n	8107b8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107b86:	2301      	movs	r3, #1
 8107b88:	e09b      	b.n	8107cc2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107b8a:	4b50      	ldr	r3, [pc, #320]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107b8c:	681b      	ldr	r3, [r3, #0]
 8107b8e:	4a4f      	ldr	r2, [pc, #316]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107b96:	f7fb faab 	bl	81030f0 <HAL_GetTick>
 8107b9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107b9c:	e008      	b.n	8107bb0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107b9e:	f7fb faa7 	bl	81030f0 <HAL_GetTick>
 8107ba2:	4602      	mov	r2, r0
 8107ba4:	68bb      	ldr	r3, [r7, #8]
 8107ba6:	1ad3      	subs	r3, r2, r3
 8107ba8:	2b02      	cmp	r3, #2
 8107baa:	d901      	bls.n	8107bb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107bac:	2303      	movs	r3, #3
 8107bae:	e088      	b.n	8107cc2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107bb0:	4b46      	ldr	r3, [pc, #280]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107bb2:	681b      	ldr	r3, [r3, #0]
 8107bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107bb8:	2b00      	cmp	r3, #0
 8107bba:	d1f0      	bne.n	8107b9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107bbc:	4b43      	ldr	r3, [pc, #268]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107bc0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8107bc4:	687b      	ldr	r3, [r7, #4]
 8107bc6:	681b      	ldr	r3, [r3, #0]
 8107bc8:	051b      	lsls	r3, r3, #20
 8107bca:	4940      	ldr	r1, [pc, #256]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107bcc:	4313      	orrs	r3, r2
 8107bce:	628b      	str	r3, [r1, #40]	; 0x28
 8107bd0:	687b      	ldr	r3, [r7, #4]
 8107bd2:	685b      	ldr	r3, [r3, #4]
 8107bd4:	3b01      	subs	r3, #1
 8107bd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	689b      	ldr	r3, [r3, #8]
 8107bde:	3b01      	subs	r3, #1
 8107be0:	025b      	lsls	r3, r3, #9
 8107be2:	b29b      	uxth	r3, r3
 8107be4:	431a      	orrs	r2, r3
 8107be6:	687b      	ldr	r3, [r7, #4]
 8107be8:	68db      	ldr	r3, [r3, #12]
 8107bea:	3b01      	subs	r3, #1
 8107bec:	041b      	lsls	r3, r3, #16
 8107bee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107bf2:	431a      	orrs	r2, r3
 8107bf4:	687b      	ldr	r3, [r7, #4]
 8107bf6:	691b      	ldr	r3, [r3, #16]
 8107bf8:	3b01      	subs	r3, #1
 8107bfa:	061b      	lsls	r3, r3, #24
 8107bfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107c00:	4932      	ldr	r1, [pc, #200]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c02:	4313      	orrs	r3, r2
 8107c04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107c06:	4b31      	ldr	r3, [pc, #196]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8107c0e:	687b      	ldr	r3, [r7, #4]
 8107c10:	695b      	ldr	r3, [r3, #20]
 8107c12:	492e      	ldr	r1, [pc, #184]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c14:	4313      	orrs	r3, r2
 8107c16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107c18:	4b2c      	ldr	r3, [pc, #176]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107c20:	687b      	ldr	r3, [r7, #4]
 8107c22:	699b      	ldr	r3, [r3, #24]
 8107c24:	4929      	ldr	r1, [pc, #164]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c26:	4313      	orrs	r3, r2
 8107c28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107c2a:	4b28      	ldr	r3, [pc, #160]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c2e:	4a27      	ldr	r2, [pc, #156]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107c34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107c36:	4b25      	ldr	r3, [pc, #148]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107c3e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107c42:	687a      	ldr	r2, [r7, #4]
 8107c44:	69d2      	ldr	r2, [r2, #28]
 8107c46:	00d2      	lsls	r2, r2, #3
 8107c48:	4920      	ldr	r1, [pc, #128]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c4a:	4313      	orrs	r3, r2
 8107c4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107c4e:	4b1f      	ldr	r3, [pc, #124]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c52:	4a1e      	ldr	r2, [pc, #120]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107c58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107c5a:	683b      	ldr	r3, [r7, #0]
 8107c5c:	2b00      	cmp	r3, #0
 8107c5e:	d106      	bne.n	8107c6e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107c60:	4b1a      	ldr	r3, [pc, #104]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c64:	4a19      	ldr	r2, [pc, #100]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8107c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107c6c:	e00f      	b.n	8107c8e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107c6e:	683b      	ldr	r3, [r7, #0]
 8107c70:	2b01      	cmp	r3, #1
 8107c72:	d106      	bne.n	8107c82 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107c74:	4b15      	ldr	r3, [pc, #84]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c78:	4a14      	ldr	r2, [pc, #80]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107c80:	e005      	b.n	8107c8e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107c82:	4b12      	ldr	r3, [pc, #72]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c86:	4a11      	ldr	r2, [pc, #68]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107c8e:	4b0f      	ldr	r3, [pc, #60]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c90:	681b      	ldr	r3, [r3, #0]
 8107c92:	4a0e      	ldr	r2, [pc, #56]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107c9a:	f7fb fa29 	bl	81030f0 <HAL_GetTick>
 8107c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107ca0:	e008      	b.n	8107cb4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107ca2:	f7fb fa25 	bl	81030f0 <HAL_GetTick>
 8107ca6:	4602      	mov	r2, r0
 8107ca8:	68bb      	ldr	r3, [r7, #8]
 8107caa:	1ad3      	subs	r3, r2, r3
 8107cac:	2b02      	cmp	r3, #2
 8107cae:	d901      	bls.n	8107cb4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107cb0:	2303      	movs	r3, #3
 8107cb2:	e006      	b.n	8107cc2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107cb4:	4b05      	ldr	r3, [pc, #20]	; (8107ccc <RCCEx_PLL3_Config+0x160>)
 8107cb6:	681b      	ldr	r3, [r3, #0]
 8107cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107cbc:	2b00      	cmp	r3, #0
 8107cbe:	d0f0      	beq.n	8107ca2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8107cc2:	4618      	mov	r0, r3
 8107cc4:	3710      	adds	r7, #16
 8107cc6:	46bd      	mov	sp, r7
 8107cc8:	bd80      	pop	{r7, pc}
 8107cca:	bf00      	nop
 8107ccc:	58024400 	.word	0x58024400

08107cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8107cd0:	b580      	push	{r7, lr}
 8107cd2:	b082      	sub	sp, #8
 8107cd4:	af00      	add	r7, sp, #0
 8107cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107cd8:	687b      	ldr	r3, [r7, #4]
 8107cda:	2b00      	cmp	r3, #0
 8107cdc:	d101      	bne.n	8107ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8107cde:	2301      	movs	r3, #1
 8107ce0:	e049      	b.n	8107d76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107ce2:	687b      	ldr	r3, [r7, #4]
 8107ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107ce8:	b2db      	uxtb	r3, r3
 8107cea:	2b00      	cmp	r3, #0
 8107cec:	d106      	bne.n	8107cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107cee:	687b      	ldr	r3, [r7, #4]
 8107cf0:	2200      	movs	r2, #0
 8107cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107cf6:	6878      	ldr	r0, [r7, #4]
 8107cf8:	f7fa feca 	bl	8102a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107cfc:	687b      	ldr	r3, [r7, #4]
 8107cfe:	2202      	movs	r2, #2
 8107d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107d04:	687b      	ldr	r3, [r7, #4]
 8107d06:	681a      	ldr	r2, [r3, #0]
 8107d08:	687b      	ldr	r3, [r7, #4]
 8107d0a:	3304      	adds	r3, #4
 8107d0c:	4619      	mov	r1, r3
 8107d0e:	4610      	mov	r0, r2
 8107d10:	f000 fdc4 	bl	810889c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107d14:	687b      	ldr	r3, [r7, #4]
 8107d16:	2201      	movs	r2, #1
 8107d18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107d1c:	687b      	ldr	r3, [r7, #4]
 8107d1e:	2201      	movs	r2, #1
 8107d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107d24:	687b      	ldr	r3, [r7, #4]
 8107d26:	2201      	movs	r2, #1
 8107d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107d2c:	687b      	ldr	r3, [r7, #4]
 8107d2e:	2201      	movs	r2, #1
 8107d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107d34:	687b      	ldr	r3, [r7, #4]
 8107d36:	2201      	movs	r2, #1
 8107d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107d3c:	687b      	ldr	r3, [r7, #4]
 8107d3e:	2201      	movs	r2, #1
 8107d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107d44:	687b      	ldr	r3, [r7, #4]
 8107d46:	2201      	movs	r2, #1
 8107d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107d4c:	687b      	ldr	r3, [r7, #4]
 8107d4e:	2201      	movs	r2, #1
 8107d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107d54:	687b      	ldr	r3, [r7, #4]
 8107d56:	2201      	movs	r2, #1
 8107d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107d5c:	687b      	ldr	r3, [r7, #4]
 8107d5e:	2201      	movs	r2, #1
 8107d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8107d64:	687b      	ldr	r3, [r7, #4]
 8107d66:	2201      	movs	r2, #1
 8107d68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	2201      	movs	r2, #1
 8107d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107d74:	2300      	movs	r3, #0
}
 8107d76:	4618      	mov	r0, r3
 8107d78:	3708      	adds	r7, #8
 8107d7a:	46bd      	mov	sp, r7
 8107d7c:	bd80      	pop	{r7, pc}
	...

08107d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8107d80:	b480      	push	{r7}
 8107d82:	b085      	sub	sp, #20
 8107d84:	af00      	add	r7, sp, #0
 8107d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8107d88:	687b      	ldr	r3, [r7, #4]
 8107d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107d8e:	b2db      	uxtb	r3, r3
 8107d90:	2b01      	cmp	r3, #1
 8107d92:	d001      	beq.n	8107d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8107d94:	2301      	movs	r3, #1
 8107d96:	e054      	b.n	8107e42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107d98:	687b      	ldr	r3, [r7, #4]
 8107d9a:	2202      	movs	r2, #2
 8107d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8107da0:	687b      	ldr	r3, [r7, #4]
 8107da2:	681b      	ldr	r3, [r3, #0]
 8107da4:	68da      	ldr	r2, [r3, #12]
 8107da6:	687b      	ldr	r3, [r7, #4]
 8107da8:	681b      	ldr	r3, [r3, #0]
 8107daa:	f042 0201 	orr.w	r2, r2, #1
 8107dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107db0:	687b      	ldr	r3, [r7, #4]
 8107db2:	681b      	ldr	r3, [r3, #0]
 8107db4:	4a26      	ldr	r2, [pc, #152]	; (8107e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8107db6:	4293      	cmp	r3, r2
 8107db8:	d022      	beq.n	8107e00 <HAL_TIM_Base_Start_IT+0x80>
 8107dba:	687b      	ldr	r3, [r7, #4]
 8107dbc:	681b      	ldr	r3, [r3, #0]
 8107dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107dc2:	d01d      	beq.n	8107e00 <HAL_TIM_Base_Start_IT+0x80>
 8107dc4:	687b      	ldr	r3, [r7, #4]
 8107dc6:	681b      	ldr	r3, [r3, #0]
 8107dc8:	4a22      	ldr	r2, [pc, #136]	; (8107e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8107dca:	4293      	cmp	r3, r2
 8107dcc:	d018      	beq.n	8107e00 <HAL_TIM_Base_Start_IT+0x80>
 8107dce:	687b      	ldr	r3, [r7, #4]
 8107dd0:	681b      	ldr	r3, [r3, #0]
 8107dd2:	4a21      	ldr	r2, [pc, #132]	; (8107e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8107dd4:	4293      	cmp	r3, r2
 8107dd6:	d013      	beq.n	8107e00 <HAL_TIM_Base_Start_IT+0x80>
 8107dd8:	687b      	ldr	r3, [r7, #4]
 8107dda:	681b      	ldr	r3, [r3, #0]
 8107ddc:	4a1f      	ldr	r2, [pc, #124]	; (8107e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8107dde:	4293      	cmp	r3, r2
 8107de0:	d00e      	beq.n	8107e00 <HAL_TIM_Base_Start_IT+0x80>
 8107de2:	687b      	ldr	r3, [r7, #4]
 8107de4:	681b      	ldr	r3, [r3, #0]
 8107de6:	4a1e      	ldr	r2, [pc, #120]	; (8107e60 <HAL_TIM_Base_Start_IT+0xe0>)
 8107de8:	4293      	cmp	r3, r2
 8107dea:	d009      	beq.n	8107e00 <HAL_TIM_Base_Start_IT+0x80>
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	681b      	ldr	r3, [r3, #0]
 8107df0:	4a1c      	ldr	r2, [pc, #112]	; (8107e64 <HAL_TIM_Base_Start_IT+0xe4>)
 8107df2:	4293      	cmp	r3, r2
 8107df4:	d004      	beq.n	8107e00 <HAL_TIM_Base_Start_IT+0x80>
 8107df6:	687b      	ldr	r3, [r7, #4]
 8107df8:	681b      	ldr	r3, [r3, #0]
 8107dfa:	4a1b      	ldr	r2, [pc, #108]	; (8107e68 <HAL_TIM_Base_Start_IT+0xe8>)
 8107dfc:	4293      	cmp	r3, r2
 8107dfe:	d115      	bne.n	8107e2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107e00:	687b      	ldr	r3, [r7, #4]
 8107e02:	681b      	ldr	r3, [r3, #0]
 8107e04:	689a      	ldr	r2, [r3, #8]
 8107e06:	4b19      	ldr	r3, [pc, #100]	; (8107e6c <HAL_TIM_Base_Start_IT+0xec>)
 8107e08:	4013      	ands	r3, r2
 8107e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107e0c:	68fb      	ldr	r3, [r7, #12]
 8107e0e:	2b06      	cmp	r3, #6
 8107e10:	d015      	beq.n	8107e3e <HAL_TIM_Base_Start_IT+0xbe>
 8107e12:	68fb      	ldr	r3, [r7, #12]
 8107e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107e18:	d011      	beq.n	8107e3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8107e1a:	687b      	ldr	r3, [r7, #4]
 8107e1c:	681b      	ldr	r3, [r3, #0]
 8107e1e:	681a      	ldr	r2, [r3, #0]
 8107e20:	687b      	ldr	r3, [r7, #4]
 8107e22:	681b      	ldr	r3, [r3, #0]
 8107e24:	f042 0201 	orr.w	r2, r2, #1
 8107e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107e2a:	e008      	b.n	8107e3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8107e2c:	687b      	ldr	r3, [r7, #4]
 8107e2e:	681b      	ldr	r3, [r3, #0]
 8107e30:	681a      	ldr	r2, [r3, #0]
 8107e32:	687b      	ldr	r3, [r7, #4]
 8107e34:	681b      	ldr	r3, [r3, #0]
 8107e36:	f042 0201 	orr.w	r2, r2, #1
 8107e3a:	601a      	str	r2, [r3, #0]
 8107e3c:	e000      	b.n	8107e40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107e3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8107e40:	2300      	movs	r3, #0
}
 8107e42:	4618      	mov	r0, r3
 8107e44:	3714      	adds	r7, #20
 8107e46:	46bd      	mov	sp, r7
 8107e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e4c:	4770      	bx	lr
 8107e4e:	bf00      	nop
 8107e50:	40010000 	.word	0x40010000
 8107e54:	40000400 	.word	0x40000400
 8107e58:	40000800 	.word	0x40000800
 8107e5c:	40000c00 	.word	0x40000c00
 8107e60:	40010400 	.word	0x40010400
 8107e64:	40001800 	.word	0x40001800
 8107e68:	40014000 	.word	0x40014000
 8107e6c:	00010007 	.word	0x00010007

08107e70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8107e70:	b580      	push	{r7, lr}
 8107e72:	b082      	sub	sp, #8
 8107e74:	af00      	add	r7, sp, #0
 8107e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107e78:	687b      	ldr	r3, [r7, #4]
 8107e7a:	2b00      	cmp	r3, #0
 8107e7c:	d101      	bne.n	8107e82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8107e7e:	2301      	movs	r3, #1
 8107e80:	e049      	b.n	8107f16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107e82:	687b      	ldr	r3, [r7, #4]
 8107e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107e88:	b2db      	uxtb	r3, r3
 8107e8a:	2b00      	cmp	r3, #0
 8107e8c:	d106      	bne.n	8107e9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107e8e:	687b      	ldr	r3, [r7, #4]
 8107e90:	2200      	movs	r2, #0
 8107e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8107e96:	6878      	ldr	r0, [r7, #4]
 8107e98:	f7fa fd36 	bl	8102908 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107e9c:	687b      	ldr	r3, [r7, #4]
 8107e9e:	2202      	movs	r2, #2
 8107ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107ea4:	687b      	ldr	r3, [r7, #4]
 8107ea6:	681a      	ldr	r2, [r3, #0]
 8107ea8:	687b      	ldr	r3, [r7, #4]
 8107eaa:	3304      	adds	r3, #4
 8107eac:	4619      	mov	r1, r3
 8107eae:	4610      	mov	r0, r2
 8107eb0:	f000 fcf4 	bl	810889c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107eb4:	687b      	ldr	r3, [r7, #4]
 8107eb6:	2201      	movs	r2, #1
 8107eb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	2201      	movs	r2, #1
 8107ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107ec4:	687b      	ldr	r3, [r7, #4]
 8107ec6:	2201      	movs	r2, #1
 8107ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107ecc:	687b      	ldr	r3, [r7, #4]
 8107ece:	2201      	movs	r2, #1
 8107ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107ed4:	687b      	ldr	r3, [r7, #4]
 8107ed6:	2201      	movs	r2, #1
 8107ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107edc:	687b      	ldr	r3, [r7, #4]
 8107ede:	2201      	movs	r2, #1
 8107ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107ee4:	687b      	ldr	r3, [r7, #4]
 8107ee6:	2201      	movs	r2, #1
 8107ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107eec:	687b      	ldr	r3, [r7, #4]
 8107eee:	2201      	movs	r2, #1
 8107ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107ef4:	687b      	ldr	r3, [r7, #4]
 8107ef6:	2201      	movs	r2, #1
 8107ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107efc:	687b      	ldr	r3, [r7, #4]
 8107efe:	2201      	movs	r2, #1
 8107f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8107f04:	687b      	ldr	r3, [r7, #4]
 8107f06:	2201      	movs	r2, #1
 8107f08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107f0c:	687b      	ldr	r3, [r7, #4]
 8107f0e:	2201      	movs	r2, #1
 8107f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107f14:	2300      	movs	r3, #0
}
 8107f16:	4618      	mov	r0, r3
 8107f18:	3708      	adds	r7, #8
 8107f1a:	46bd      	mov	sp, r7
 8107f1c:	bd80      	pop	{r7, pc}
	...

08107f20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8107f20:	b580      	push	{r7, lr}
 8107f22:	b084      	sub	sp, #16
 8107f24:	af00      	add	r7, sp, #0
 8107f26:	6078      	str	r0, [r7, #4]
 8107f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8107f2a:	683b      	ldr	r3, [r7, #0]
 8107f2c:	2b00      	cmp	r3, #0
 8107f2e:	d109      	bne.n	8107f44 <HAL_TIM_PWM_Start+0x24>
 8107f30:	687b      	ldr	r3, [r7, #4]
 8107f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8107f36:	b2db      	uxtb	r3, r3
 8107f38:	2b01      	cmp	r3, #1
 8107f3a:	bf14      	ite	ne
 8107f3c:	2301      	movne	r3, #1
 8107f3e:	2300      	moveq	r3, #0
 8107f40:	b2db      	uxtb	r3, r3
 8107f42:	e03c      	b.n	8107fbe <HAL_TIM_PWM_Start+0x9e>
 8107f44:	683b      	ldr	r3, [r7, #0]
 8107f46:	2b04      	cmp	r3, #4
 8107f48:	d109      	bne.n	8107f5e <HAL_TIM_PWM_Start+0x3e>
 8107f4a:	687b      	ldr	r3, [r7, #4]
 8107f4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8107f50:	b2db      	uxtb	r3, r3
 8107f52:	2b01      	cmp	r3, #1
 8107f54:	bf14      	ite	ne
 8107f56:	2301      	movne	r3, #1
 8107f58:	2300      	moveq	r3, #0
 8107f5a:	b2db      	uxtb	r3, r3
 8107f5c:	e02f      	b.n	8107fbe <HAL_TIM_PWM_Start+0x9e>
 8107f5e:	683b      	ldr	r3, [r7, #0]
 8107f60:	2b08      	cmp	r3, #8
 8107f62:	d109      	bne.n	8107f78 <HAL_TIM_PWM_Start+0x58>
 8107f64:	687b      	ldr	r3, [r7, #4]
 8107f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8107f6a:	b2db      	uxtb	r3, r3
 8107f6c:	2b01      	cmp	r3, #1
 8107f6e:	bf14      	ite	ne
 8107f70:	2301      	movne	r3, #1
 8107f72:	2300      	moveq	r3, #0
 8107f74:	b2db      	uxtb	r3, r3
 8107f76:	e022      	b.n	8107fbe <HAL_TIM_PWM_Start+0x9e>
 8107f78:	683b      	ldr	r3, [r7, #0]
 8107f7a:	2b0c      	cmp	r3, #12
 8107f7c:	d109      	bne.n	8107f92 <HAL_TIM_PWM_Start+0x72>
 8107f7e:	687b      	ldr	r3, [r7, #4]
 8107f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107f84:	b2db      	uxtb	r3, r3
 8107f86:	2b01      	cmp	r3, #1
 8107f88:	bf14      	ite	ne
 8107f8a:	2301      	movne	r3, #1
 8107f8c:	2300      	moveq	r3, #0
 8107f8e:	b2db      	uxtb	r3, r3
 8107f90:	e015      	b.n	8107fbe <HAL_TIM_PWM_Start+0x9e>
 8107f92:	683b      	ldr	r3, [r7, #0]
 8107f94:	2b10      	cmp	r3, #16
 8107f96:	d109      	bne.n	8107fac <HAL_TIM_PWM_Start+0x8c>
 8107f98:	687b      	ldr	r3, [r7, #4]
 8107f9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8107f9e:	b2db      	uxtb	r3, r3
 8107fa0:	2b01      	cmp	r3, #1
 8107fa2:	bf14      	ite	ne
 8107fa4:	2301      	movne	r3, #1
 8107fa6:	2300      	moveq	r3, #0
 8107fa8:	b2db      	uxtb	r3, r3
 8107faa:	e008      	b.n	8107fbe <HAL_TIM_PWM_Start+0x9e>
 8107fac:	687b      	ldr	r3, [r7, #4]
 8107fae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8107fb2:	b2db      	uxtb	r3, r3
 8107fb4:	2b01      	cmp	r3, #1
 8107fb6:	bf14      	ite	ne
 8107fb8:	2301      	movne	r3, #1
 8107fba:	2300      	moveq	r3, #0
 8107fbc:	b2db      	uxtb	r3, r3
 8107fbe:	2b00      	cmp	r3, #0
 8107fc0:	d001      	beq.n	8107fc6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8107fc2:	2301      	movs	r3, #1
 8107fc4:	e0a1      	b.n	810810a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8107fc6:	683b      	ldr	r3, [r7, #0]
 8107fc8:	2b00      	cmp	r3, #0
 8107fca:	d104      	bne.n	8107fd6 <HAL_TIM_PWM_Start+0xb6>
 8107fcc:	687b      	ldr	r3, [r7, #4]
 8107fce:	2202      	movs	r2, #2
 8107fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107fd4:	e023      	b.n	810801e <HAL_TIM_PWM_Start+0xfe>
 8107fd6:	683b      	ldr	r3, [r7, #0]
 8107fd8:	2b04      	cmp	r3, #4
 8107fda:	d104      	bne.n	8107fe6 <HAL_TIM_PWM_Start+0xc6>
 8107fdc:	687b      	ldr	r3, [r7, #4]
 8107fde:	2202      	movs	r2, #2
 8107fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107fe4:	e01b      	b.n	810801e <HAL_TIM_PWM_Start+0xfe>
 8107fe6:	683b      	ldr	r3, [r7, #0]
 8107fe8:	2b08      	cmp	r3, #8
 8107fea:	d104      	bne.n	8107ff6 <HAL_TIM_PWM_Start+0xd6>
 8107fec:	687b      	ldr	r3, [r7, #4]
 8107fee:	2202      	movs	r2, #2
 8107ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107ff4:	e013      	b.n	810801e <HAL_TIM_PWM_Start+0xfe>
 8107ff6:	683b      	ldr	r3, [r7, #0]
 8107ff8:	2b0c      	cmp	r3, #12
 8107ffa:	d104      	bne.n	8108006 <HAL_TIM_PWM_Start+0xe6>
 8107ffc:	687b      	ldr	r3, [r7, #4]
 8107ffe:	2202      	movs	r2, #2
 8108000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8108004:	e00b      	b.n	810801e <HAL_TIM_PWM_Start+0xfe>
 8108006:	683b      	ldr	r3, [r7, #0]
 8108008:	2b10      	cmp	r3, #16
 810800a:	d104      	bne.n	8108016 <HAL_TIM_PWM_Start+0xf6>
 810800c:	687b      	ldr	r3, [r7, #4]
 810800e:	2202      	movs	r2, #2
 8108010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8108014:	e003      	b.n	810801e <HAL_TIM_PWM_Start+0xfe>
 8108016:	687b      	ldr	r3, [r7, #4]
 8108018:	2202      	movs	r2, #2
 810801a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810801e:	687b      	ldr	r3, [r7, #4]
 8108020:	681b      	ldr	r3, [r3, #0]
 8108022:	2201      	movs	r2, #1
 8108024:	6839      	ldr	r1, [r7, #0]
 8108026:	4618      	mov	r0, r3
 8108028:	f000 ffa8 	bl	8108f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 810802c:	687b      	ldr	r3, [r7, #4]
 810802e:	681b      	ldr	r3, [r3, #0]
 8108030:	4a38      	ldr	r2, [pc, #224]	; (8108114 <HAL_TIM_PWM_Start+0x1f4>)
 8108032:	4293      	cmp	r3, r2
 8108034:	d013      	beq.n	810805e <HAL_TIM_PWM_Start+0x13e>
 8108036:	687b      	ldr	r3, [r7, #4]
 8108038:	681b      	ldr	r3, [r3, #0]
 810803a:	4a37      	ldr	r2, [pc, #220]	; (8108118 <HAL_TIM_PWM_Start+0x1f8>)
 810803c:	4293      	cmp	r3, r2
 810803e:	d00e      	beq.n	810805e <HAL_TIM_PWM_Start+0x13e>
 8108040:	687b      	ldr	r3, [r7, #4]
 8108042:	681b      	ldr	r3, [r3, #0]
 8108044:	4a35      	ldr	r2, [pc, #212]	; (810811c <HAL_TIM_PWM_Start+0x1fc>)
 8108046:	4293      	cmp	r3, r2
 8108048:	d009      	beq.n	810805e <HAL_TIM_PWM_Start+0x13e>
 810804a:	687b      	ldr	r3, [r7, #4]
 810804c:	681b      	ldr	r3, [r3, #0]
 810804e:	4a34      	ldr	r2, [pc, #208]	; (8108120 <HAL_TIM_PWM_Start+0x200>)
 8108050:	4293      	cmp	r3, r2
 8108052:	d004      	beq.n	810805e <HAL_TIM_PWM_Start+0x13e>
 8108054:	687b      	ldr	r3, [r7, #4]
 8108056:	681b      	ldr	r3, [r3, #0]
 8108058:	4a32      	ldr	r2, [pc, #200]	; (8108124 <HAL_TIM_PWM_Start+0x204>)
 810805a:	4293      	cmp	r3, r2
 810805c:	d101      	bne.n	8108062 <HAL_TIM_PWM_Start+0x142>
 810805e:	2301      	movs	r3, #1
 8108060:	e000      	b.n	8108064 <HAL_TIM_PWM_Start+0x144>
 8108062:	2300      	movs	r3, #0
 8108064:	2b00      	cmp	r3, #0
 8108066:	d007      	beq.n	8108078 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8108068:	687b      	ldr	r3, [r7, #4]
 810806a:	681b      	ldr	r3, [r3, #0]
 810806c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810806e:	687b      	ldr	r3, [r7, #4]
 8108070:	681b      	ldr	r3, [r3, #0]
 8108072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8108076:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108078:	687b      	ldr	r3, [r7, #4]
 810807a:	681b      	ldr	r3, [r3, #0]
 810807c:	4a25      	ldr	r2, [pc, #148]	; (8108114 <HAL_TIM_PWM_Start+0x1f4>)
 810807e:	4293      	cmp	r3, r2
 8108080:	d022      	beq.n	81080c8 <HAL_TIM_PWM_Start+0x1a8>
 8108082:	687b      	ldr	r3, [r7, #4]
 8108084:	681b      	ldr	r3, [r3, #0]
 8108086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810808a:	d01d      	beq.n	81080c8 <HAL_TIM_PWM_Start+0x1a8>
 810808c:	687b      	ldr	r3, [r7, #4]
 810808e:	681b      	ldr	r3, [r3, #0]
 8108090:	4a25      	ldr	r2, [pc, #148]	; (8108128 <HAL_TIM_PWM_Start+0x208>)
 8108092:	4293      	cmp	r3, r2
 8108094:	d018      	beq.n	81080c8 <HAL_TIM_PWM_Start+0x1a8>
 8108096:	687b      	ldr	r3, [r7, #4]
 8108098:	681b      	ldr	r3, [r3, #0]
 810809a:	4a24      	ldr	r2, [pc, #144]	; (810812c <HAL_TIM_PWM_Start+0x20c>)
 810809c:	4293      	cmp	r3, r2
 810809e:	d013      	beq.n	81080c8 <HAL_TIM_PWM_Start+0x1a8>
 81080a0:	687b      	ldr	r3, [r7, #4]
 81080a2:	681b      	ldr	r3, [r3, #0]
 81080a4:	4a22      	ldr	r2, [pc, #136]	; (8108130 <HAL_TIM_PWM_Start+0x210>)
 81080a6:	4293      	cmp	r3, r2
 81080a8:	d00e      	beq.n	81080c8 <HAL_TIM_PWM_Start+0x1a8>
 81080aa:	687b      	ldr	r3, [r7, #4]
 81080ac:	681b      	ldr	r3, [r3, #0]
 81080ae:	4a1a      	ldr	r2, [pc, #104]	; (8108118 <HAL_TIM_PWM_Start+0x1f8>)
 81080b0:	4293      	cmp	r3, r2
 81080b2:	d009      	beq.n	81080c8 <HAL_TIM_PWM_Start+0x1a8>
 81080b4:	687b      	ldr	r3, [r7, #4]
 81080b6:	681b      	ldr	r3, [r3, #0]
 81080b8:	4a1e      	ldr	r2, [pc, #120]	; (8108134 <HAL_TIM_PWM_Start+0x214>)
 81080ba:	4293      	cmp	r3, r2
 81080bc:	d004      	beq.n	81080c8 <HAL_TIM_PWM_Start+0x1a8>
 81080be:	687b      	ldr	r3, [r7, #4]
 81080c0:	681b      	ldr	r3, [r3, #0]
 81080c2:	4a16      	ldr	r2, [pc, #88]	; (810811c <HAL_TIM_PWM_Start+0x1fc>)
 81080c4:	4293      	cmp	r3, r2
 81080c6:	d115      	bne.n	81080f4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81080c8:	687b      	ldr	r3, [r7, #4]
 81080ca:	681b      	ldr	r3, [r3, #0]
 81080cc:	689a      	ldr	r2, [r3, #8]
 81080ce:	4b1a      	ldr	r3, [pc, #104]	; (8108138 <HAL_TIM_PWM_Start+0x218>)
 81080d0:	4013      	ands	r3, r2
 81080d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81080d4:	68fb      	ldr	r3, [r7, #12]
 81080d6:	2b06      	cmp	r3, #6
 81080d8:	d015      	beq.n	8108106 <HAL_TIM_PWM_Start+0x1e6>
 81080da:	68fb      	ldr	r3, [r7, #12]
 81080dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81080e0:	d011      	beq.n	8108106 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 81080e2:	687b      	ldr	r3, [r7, #4]
 81080e4:	681b      	ldr	r3, [r3, #0]
 81080e6:	681a      	ldr	r2, [r3, #0]
 81080e8:	687b      	ldr	r3, [r7, #4]
 81080ea:	681b      	ldr	r3, [r3, #0]
 81080ec:	f042 0201 	orr.w	r2, r2, #1
 81080f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81080f2:	e008      	b.n	8108106 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81080f4:	687b      	ldr	r3, [r7, #4]
 81080f6:	681b      	ldr	r3, [r3, #0]
 81080f8:	681a      	ldr	r2, [r3, #0]
 81080fa:	687b      	ldr	r3, [r7, #4]
 81080fc:	681b      	ldr	r3, [r3, #0]
 81080fe:	f042 0201 	orr.w	r2, r2, #1
 8108102:	601a      	str	r2, [r3, #0]
 8108104:	e000      	b.n	8108108 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108106:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8108108:	2300      	movs	r3, #0
}
 810810a:	4618      	mov	r0, r3
 810810c:	3710      	adds	r7, #16
 810810e:	46bd      	mov	sp, r7
 8108110:	bd80      	pop	{r7, pc}
 8108112:	bf00      	nop
 8108114:	40010000 	.word	0x40010000
 8108118:	40010400 	.word	0x40010400
 810811c:	40014000 	.word	0x40014000
 8108120:	40014400 	.word	0x40014400
 8108124:	40014800 	.word	0x40014800
 8108128:	40000400 	.word	0x40000400
 810812c:	40000800 	.word	0x40000800
 8108130:	40000c00 	.word	0x40000c00
 8108134:	40001800 	.word	0x40001800
 8108138:	00010007 	.word	0x00010007

0810813c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 810813c:	b580      	push	{r7, lr}
 810813e:	b086      	sub	sp, #24
 8108140:	af00      	add	r7, sp, #0
 8108142:	6078      	str	r0, [r7, #4]
 8108144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108146:	687b      	ldr	r3, [r7, #4]
 8108148:	2b00      	cmp	r3, #0
 810814a:	d101      	bne.n	8108150 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 810814c:	2301      	movs	r3, #1
 810814e:	e097      	b.n	8108280 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108150:	687b      	ldr	r3, [r7, #4]
 8108152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8108156:	b2db      	uxtb	r3, r3
 8108158:	2b00      	cmp	r3, #0
 810815a:	d106      	bne.n	810816a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810815c:	687b      	ldr	r3, [r7, #4]
 810815e:	2200      	movs	r2, #0
 8108160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8108164:	6878      	ldr	r0, [r7, #4]
 8108166:	f7fa fbef 	bl	8102948 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810816a:	687b      	ldr	r3, [r7, #4]
 810816c:	2202      	movs	r2, #2
 810816e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8108172:	687b      	ldr	r3, [r7, #4]
 8108174:	681b      	ldr	r3, [r3, #0]
 8108176:	689b      	ldr	r3, [r3, #8]
 8108178:	687a      	ldr	r2, [r7, #4]
 810817a:	6812      	ldr	r2, [r2, #0]
 810817c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8108180:	f023 0307 	bic.w	r3, r3, #7
 8108184:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108186:	687b      	ldr	r3, [r7, #4]
 8108188:	681a      	ldr	r2, [r3, #0]
 810818a:	687b      	ldr	r3, [r7, #4]
 810818c:	3304      	adds	r3, #4
 810818e:	4619      	mov	r1, r3
 8108190:	4610      	mov	r0, r2
 8108192:	f000 fb83 	bl	810889c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8108196:	687b      	ldr	r3, [r7, #4]
 8108198:	681b      	ldr	r3, [r3, #0]
 810819a:	689b      	ldr	r3, [r3, #8]
 810819c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810819e:	687b      	ldr	r3, [r7, #4]
 81081a0:	681b      	ldr	r3, [r3, #0]
 81081a2:	699b      	ldr	r3, [r3, #24]
 81081a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 81081a6:	687b      	ldr	r3, [r7, #4]
 81081a8:	681b      	ldr	r3, [r3, #0]
 81081aa:	6a1b      	ldr	r3, [r3, #32]
 81081ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 81081ae:	683b      	ldr	r3, [r7, #0]
 81081b0:	681b      	ldr	r3, [r3, #0]
 81081b2:	697a      	ldr	r2, [r7, #20]
 81081b4:	4313      	orrs	r3, r2
 81081b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 81081b8:	693b      	ldr	r3, [r7, #16]
 81081ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81081be:	f023 0303 	bic.w	r3, r3, #3
 81081c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 81081c4:	683b      	ldr	r3, [r7, #0]
 81081c6:	689a      	ldr	r2, [r3, #8]
 81081c8:	683b      	ldr	r3, [r7, #0]
 81081ca:	699b      	ldr	r3, [r3, #24]
 81081cc:	021b      	lsls	r3, r3, #8
 81081ce:	4313      	orrs	r3, r2
 81081d0:	693a      	ldr	r2, [r7, #16]
 81081d2:	4313      	orrs	r3, r2
 81081d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 81081d6:	693b      	ldr	r3, [r7, #16]
 81081d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 81081dc:	f023 030c 	bic.w	r3, r3, #12
 81081e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 81081e2:	693b      	ldr	r3, [r7, #16]
 81081e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81081e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81081ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 81081ee:	683b      	ldr	r3, [r7, #0]
 81081f0:	68da      	ldr	r2, [r3, #12]
 81081f2:	683b      	ldr	r3, [r7, #0]
 81081f4:	69db      	ldr	r3, [r3, #28]
 81081f6:	021b      	lsls	r3, r3, #8
 81081f8:	4313      	orrs	r3, r2
 81081fa:	693a      	ldr	r2, [r7, #16]
 81081fc:	4313      	orrs	r3, r2
 81081fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8108200:	683b      	ldr	r3, [r7, #0]
 8108202:	691b      	ldr	r3, [r3, #16]
 8108204:	011a      	lsls	r2, r3, #4
 8108206:	683b      	ldr	r3, [r7, #0]
 8108208:	6a1b      	ldr	r3, [r3, #32]
 810820a:	031b      	lsls	r3, r3, #12
 810820c:	4313      	orrs	r3, r2
 810820e:	693a      	ldr	r2, [r7, #16]
 8108210:	4313      	orrs	r3, r2
 8108212:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8108214:	68fb      	ldr	r3, [r7, #12]
 8108216:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 810821a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 810821c:	68fb      	ldr	r3, [r7, #12]
 810821e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8108222:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8108224:	683b      	ldr	r3, [r7, #0]
 8108226:	685a      	ldr	r2, [r3, #4]
 8108228:	683b      	ldr	r3, [r7, #0]
 810822a:	695b      	ldr	r3, [r3, #20]
 810822c:	011b      	lsls	r3, r3, #4
 810822e:	4313      	orrs	r3, r2
 8108230:	68fa      	ldr	r2, [r7, #12]
 8108232:	4313      	orrs	r3, r2
 8108234:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8108236:	687b      	ldr	r3, [r7, #4]
 8108238:	681b      	ldr	r3, [r3, #0]
 810823a:	697a      	ldr	r2, [r7, #20]
 810823c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 810823e:	687b      	ldr	r3, [r7, #4]
 8108240:	681b      	ldr	r3, [r3, #0]
 8108242:	693a      	ldr	r2, [r7, #16]
 8108244:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8108246:	687b      	ldr	r3, [r7, #4]
 8108248:	681b      	ldr	r3, [r3, #0]
 810824a:	68fa      	ldr	r2, [r7, #12]
 810824c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810824e:	687b      	ldr	r3, [r7, #4]
 8108250:	2201      	movs	r2, #1
 8108252:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8108256:	687b      	ldr	r3, [r7, #4]
 8108258:	2201      	movs	r2, #1
 810825a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810825e:	687b      	ldr	r3, [r7, #4]
 8108260:	2201      	movs	r2, #1
 8108262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8108266:	687b      	ldr	r3, [r7, #4]
 8108268:	2201      	movs	r2, #1
 810826a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810826e:	687b      	ldr	r3, [r7, #4]
 8108270:	2201      	movs	r2, #1
 8108272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8108276:	687b      	ldr	r3, [r7, #4]
 8108278:	2201      	movs	r2, #1
 810827a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810827e:	2300      	movs	r3, #0
}
 8108280:	4618      	mov	r0, r3
 8108282:	3718      	adds	r7, #24
 8108284:	46bd      	mov	sp, r7
 8108286:	bd80      	pop	{r7, pc}

08108288 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8108288:	b580      	push	{r7, lr}
 810828a:	b084      	sub	sp, #16
 810828c:	af00      	add	r7, sp, #0
 810828e:	6078      	str	r0, [r7, #4]
 8108290:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8108292:	687b      	ldr	r3, [r7, #4]
 8108294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8108298:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 810829a:	687b      	ldr	r3, [r7, #4]
 810829c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 81082a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 81082a2:	687b      	ldr	r3, [r7, #4]
 81082a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81082a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 81082aa:	687b      	ldr	r3, [r7, #4]
 81082ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81082b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 81082b2:	683b      	ldr	r3, [r7, #0]
 81082b4:	2b00      	cmp	r3, #0
 81082b6:	d110      	bne.n	81082da <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 81082b8:	7bfb      	ldrb	r3, [r7, #15]
 81082ba:	2b01      	cmp	r3, #1
 81082bc:	d102      	bne.n	81082c4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 81082be:	7b7b      	ldrb	r3, [r7, #13]
 81082c0:	2b01      	cmp	r3, #1
 81082c2:	d001      	beq.n	81082c8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 81082c4:	2301      	movs	r3, #1
 81082c6:	e089      	b.n	81083dc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81082c8:	687b      	ldr	r3, [r7, #4]
 81082ca:	2202      	movs	r2, #2
 81082cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81082d0:	687b      	ldr	r3, [r7, #4]
 81082d2:	2202      	movs	r2, #2
 81082d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81082d8:	e031      	b.n	810833e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 81082da:	683b      	ldr	r3, [r7, #0]
 81082dc:	2b04      	cmp	r3, #4
 81082de:	d110      	bne.n	8108302 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 81082e0:	7bbb      	ldrb	r3, [r7, #14]
 81082e2:	2b01      	cmp	r3, #1
 81082e4:	d102      	bne.n	81082ec <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 81082e6:	7b3b      	ldrb	r3, [r7, #12]
 81082e8:	2b01      	cmp	r3, #1
 81082ea:	d001      	beq.n	81082f0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 81082ec:	2301      	movs	r3, #1
 81082ee:	e075      	b.n	81083dc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81082f0:	687b      	ldr	r3, [r7, #4]
 81082f2:	2202      	movs	r2, #2
 81082f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81082f8:	687b      	ldr	r3, [r7, #4]
 81082fa:	2202      	movs	r2, #2
 81082fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8108300:	e01d      	b.n	810833e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8108302:	7bfb      	ldrb	r3, [r7, #15]
 8108304:	2b01      	cmp	r3, #1
 8108306:	d108      	bne.n	810831a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8108308:	7bbb      	ldrb	r3, [r7, #14]
 810830a:	2b01      	cmp	r3, #1
 810830c:	d105      	bne.n	810831a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 810830e:	7b7b      	ldrb	r3, [r7, #13]
 8108310:	2b01      	cmp	r3, #1
 8108312:	d102      	bne.n	810831a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8108314:	7b3b      	ldrb	r3, [r7, #12]
 8108316:	2b01      	cmp	r3, #1
 8108318:	d001      	beq.n	810831e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 810831a:	2301      	movs	r3, #1
 810831c:	e05e      	b.n	81083dc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 810831e:	687b      	ldr	r3, [r7, #4]
 8108320:	2202      	movs	r2, #2
 8108322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	2202      	movs	r2, #2
 810832a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 810832e:	687b      	ldr	r3, [r7, #4]
 8108330:	2202      	movs	r2, #2
 8108332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8108336:	687b      	ldr	r3, [r7, #4]
 8108338:	2202      	movs	r2, #2
 810833a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 810833e:	683b      	ldr	r3, [r7, #0]
 8108340:	2b00      	cmp	r3, #0
 8108342:	d003      	beq.n	810834c <HAL_TIM_Encoder_Start_IT+0xc4>
 8108344:	683b      	ldr	r3, [r7, #0]
 8108346:	2b04      	cmp	r3, #4
 8108348:	d010      	beq.n	810836c <HAL_TIM_Encoder_Start_IT+0xe4>
 810834a:	e01f      	b.n	810838c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 810834c:	687b      	ldr	r3, [r7, #4]
 810834e:	681b      	ldr	r3, [r3, #0]
 8108350:	2201      	movs	r2, #1
 8108352:	2100      	movs	r1, #0
 8108354:	4618      	mov	r0, r3
 8108356:	f000 fe11 	bl	8108f7c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 810835a:	687b      	ldr	r3, [r7, #4]
 810835c:	681b      	ldr	r3, [r3, #0]
 810835e:	68da      	ldr	r2, [r3, #12]
 8108360:	687b      	ldr	r3, [r7, #4]
 8108362:	681b      	ldr	r3, [r3, #0]
 8108364:	f042 0202 	orr.w	r2, r2, #2
 8108368:	60da      	str	r2, [r3, #12]
      break;
 810836a:	e02e      	b.n	81083ca <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 810836c:	687b      	ldr	r3, [r7, #4]
 810836e:	681b      	ldr	r3, [r3, #0]
 8108370:	2201      	movs	r2, #1
 8108372:	2104      	movs	r1, #4
 8108374:	4618      	mov	r0, r3
 8108376:	f000 fe01 	bl	8108f7c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 810837a:	687b      	ldr	r3, [r7, #4]
 810837c:	681b      	ldr	r3, [r3, #0]
 810837e:	68da      	ldr	r2, [r3, #12]
 8108380:	687b      	ldr	r3, [r7, #4]
 8108382:	681b      	ldr	r3, [r3, #0]
 8108384:	f042 0204 	orr.w	r2, r2, #4
 8108388:	60da      	str	r2, [r3, #12]
      break;
 810838a:	e01e      	b.n	81083ca <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 810838c:	687b      	ldr	r3, [r7, #4]
 810838e:	681b      	ldr	r3, [r3, #0]
 8108390:	2201      	movs	r2, #1
 8108392:	2100      	movs	r1, #0
 8108394:	4618      	mov	r0, r3
 8108396:	f000 fdf1 	bl	8108f7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 810839a:	687b      	ldr	r3, [r7, #4]
 810839c:	681b      	ldr	r3, [r3, #0]
 810839e:	2201      	movs	r2, #1
 81083a0:	2104      	movs	r1, #4
 81083a2:	4618      	mov	r0, r3
 81083a4:	f000 fdea 	bl	8108f7c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 81083a8:	687b      	ldr	r3, [r7, #4]
 81083aa:	681b      	ldr	r3, [r3, #0]
 81083ac:	68da      	ldr	r2, [r3, #12]
 81083ae:	687b      	ldr	r3, [r7, #4]
 81083b0:	681b      	ldr	r3, [r3, #0]
 81083b2:	f042 0202 	orr.w	r2, r2, #2
 81083b6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 81083b8:	687b      	ldr	r3, [r7, #4]
 81083ba:	681b      	ldr	r3, [r3, #0]
 81083bc:	68da      	ldr	r2, [r3, #12]
 81083be:	687b      	ldr	r3, [r7, #4]
 81083c0:	681b      	ldr	r3, [r3, #0]
 81083c2:	f042 0204 	orr.w	r2, r2, #4
 81083c6:	60da      	str	r2, [r3, #12]
      break;
 81083c8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 81083ca:	687b      	ldr	r3, [r7, #4]
 81083cc:	681b      	ldr	r3, [r3, #0]
 81083ce:	681a      	ldr	r2, [r3, #0]
 81083d0:	687b      	ldr	r3, [r7, #4]
 81083d2:	681b      	ldr	r3, [r3, #0]
 81083d4:	f042 0201 	orr.w	r2, r2, #1
 81083d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 81083da:	2300      	movs	r3, #0
}
 81083dc:	4618      	mov	r0, r3
 81083de:	3710      	adds	r7, #16
 81083e0:	46bd      	mov	sp, r7
 81083e2:	bd80      	pop	{r7, pc}

081083e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81083e4:	b580      	push	{r7, lr}
 81083e6:	b082      	sub	sp, #8
 81083e8:	af00      	add	r7, sp, #0
 81083ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 81083ec:	687b      	ldr	r3, [r7, #4]
 81083ee:	681b      	ldr	r3, [r3, #0]
 81083f0:	691b      	ldr	r3, [r3, #16]
 81083f2:	f003 0302 	and.w	r3, r3, #2
 81083f6:	2b02      	cmp	r3, #2
 81083f8:	d122      	bne.n	8108440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81083fa:	687b      	ldr	r3, [r7, #4]
 81083fc:	681b      	ldr	r3, [r3, #0]
 81083fe:	68db      	ldr	r3, [r3, #12]
 8108400:	f003 0302 	and.w	r3, r3, #2
 8108404:	2b02      	cmp	r3, #2
 8108406:	d11b      	bne.n	8108440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8108408:	687b      	ldr	r3, [r7, #4]
 810840a:	681b      	ldr	r3, [r3, #0]
 810840c:	f06f 0202 	mvn.w	r2, #2
 8108410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8108412:	687b      	ldr	r3, [r7, #4]
 8108414:	2201      	movs	r2, #1
 8108416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8108418:	687b      	ldr	r3, [r7, #4]
 810841a:	681b      	ldr	r3, [r3, #0]
 810841c:	699b      	ldr	r3, [r3, #24]
 810841e:	f003 0303 	and.w	r3, r3, #3
 8108422:	2b00      	cmp	r3, #0
 8108424:	d003      	beq.n	810842e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8108426:	6878      	ldr	r0, [r7, #4]
 8108428:	f000 fa1a 	bl	8108860 <HAL_TIM_IC_CaptureCallback>
 810842c:	e005      	b.n	810843a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810842e:	6878      	ldr	r0, [r7, #4]
 8108430:	f000 fa0c 	bl	810884c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108434:	6878      	ldr	r0, [r7, #4]
 8108436:	f000 fa1d 	bl	8108874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810843a:	687b      	ldr	r3, [r7, #4]
 810843c:	2200      	movs	r2, #0
 810843e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8108440:	687b      	ldr	r3, [r7, #4]
 8108442:	681b      	ldr	r3, [r3, #0]
 8108444:	691b      	ldr	r3, [r3, #16]
 8108446:	f003 0304 	and.w	r3, r3, #4
 810844a:	2b04      	cmp	r3, #4
 810844c:	d122      	bne.n	8108494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810844e:	687b      	ldr	r3, [r7, #4]
 8108450:	681b      	ldr	r3, [r3, #0]
 8108452:	68db      	ldr	r3, [r3, #12]
 8108454:	f003 0304 	and.w	r3, r3, #4
 8108458:	2b04      	cmp	r3, #4
 810845a:	d11b      	bne.n	8108494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810845c:	687b      	ldr	r3, [r7, #4]
 810845e:	681b      	ldr	r3, [r3, #0]
 8108460:	f06f 0204 	mvn.w	r2, #4
 8108464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8108466:	687b      	ldr	r3, [r7, #4]
 8108468:	2202      	movs	r2, #2
 810846a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810846c:	687b      	ldr	r3, [r7, #4]
 810846e:	681b      	ldr	r3, [r3, #0]
 8108470:	699b      	ldr	r3, [r3, #24]
 8108472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108476:	2b00      	cmp	r3, #0
 8108478:	d003      	beq.n	8108482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810847a:	6878      	ldr	r0, [r7, #4]
 810847c:	f000 f9f0 	bl	8108860 <HAL_TIM_IC_CaptureCallback>
 8108480:	e005      	b.n	810848e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108482:	6878      	ldr	r0, [r7, #4]
 8108484:	f000 f9e2 	bl	810884c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108488:	6878      	ldr	r0, [r7, #4]
 810848a:	f000 f9f3 	bl	8108874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810848e:	687b      	ldr	r3, [r7, #4]
 8108490:	2200      	movs	r2, #0
 8108492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8108494:	687b      	ldr	r3, [r7, #4]
 8108496:	681b      	ldr	r3, [r3, #0]
 8108498:	691b      	ldr	r3, [r3, #16]
 810849a:	f003 0308 	and.w	r3, r3, #8
 810849e:	2b08      	cmp	r3, #8
 81084a0:	d122      	bne.n	81084e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81084a2:	687b      	ldr	r3, [r7, #4]
 81084a4:	681b      	ldr	r3, [r3, #0]
 81084a6:	68db      	ldr	r3, [r3, #12]
 81084a8:	f003 0308 	and.w	r3, r3, #8
 81084ac:	2b08      	cmp	r3, #8
 81084ae:	d11b      	bne.n	81084e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81084b0:	687b      	ldr	r3, [r7, #4]
 81084b2:	681b      	ldr	r3, [r3, #0]
 81084b4:	f06f 0208 	mvn.w	r2, #8
 81084b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81084ba:	687b      	ldr	r3, [r7, #4]
 81084bc:	2204      	movs	r2, #4
 81084be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81084c0:	687b      	ldr	r3, [r7, #4]
 81084c2:	681b      	ldr	r3, [r3, #0]
 81084c4:	69db      	ldr	r3, [r3, #28]
 81084c6:	f003 0303 	and.w	r3, r3, #3
 81084ca:	2b00      	cmp	r3, #0
 81084cc:	d003      	beq.n	81084d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81084ce:	6878      	ldr	r0, [r7, #4]
 81084d0:	f000 f9c6 	bl	8108860 <HAL_TIM_IC_CaptureCallback>
 81084d4:	e005      	b.n	81084e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81084d6:	6878      	ldr	r0, [r7, #4]
 81084d8:	f000 f9b8 	bl	810884c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81084dc:	6878      	ldr	r0, [r7, #4]
 81084de:	f000 f9c9 	bl	8108874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81084e2:	687b      	ldr	r3, [r7, #4]
 81084e4:	2200      	movs	r2, #0
 81084e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 81084e8:	687b      	ldr	r3, [r7, #4]
 81084ea:	681b      	ldr	r3, [r3, #0]
 81084ec:	691b      	ldr	r3, [r3, #16]
 81084ee:	f003 0310 	and.w	r3, r3, #16
 81084f2:	2b10      	cmp	r3, #16
 81084f4:	d122      	bne.n	810853c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81084f6:	687b      	ldr	r3, [r7, #4]
 81084f8:	681b      	ldr	r3, [r3, #0]
 81084fa:	68db      	ldr	r3, [r3, #12]
 81084fc:	f003 0310 	and.w	r3, r3, #16
 8108500:	2b10      	cmp	r3, #16
 8108502:	d11b      	bne.n	810853c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8108504:	687b      	ldr	r3, [r7, #4]
 8108506:	681b      	ldr	r3, [r3, #0]
 8108508:	f06f 0210 	mvn.w	r2, #16
 810850c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810850e:	687b      	ldr	r3, [r7, #4]
 8108510:	2208      	movs	r2, #8
 8108512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8108514:	687b      	ldr	r3, [r7, #4]
 8108516:	681b      	ldr	r3, [r3, #0]
 8108518:	69db      	ldr	r3, [r3, #28]
 810851a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810851e:	2b00      	cmp	r3, #0
 8108520:	d003      	beq.n	810852a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108522:	6878      	ldr	r0, [r7, #4]
 8108524:	f000 f99c 	bl	8108860 <HAL_TIM_IC_CaptureCallback>
 8108528:	e005      	b.n	8108536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810852a:	6878      	ldr	r0, [r7, #4]
 810852c:	f000 f98e 	bl	810884c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108530:	6878      	ldr	r0, [r7, #4]
 8108532:	f000 f99f 	bl	8108874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108536:	687b      	ldr	r3, [r7, #4]
 8108538:	2200      	movs	r2, #0
 810853a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810853c:	687b      	ldr	r3, [r7, #4]
 810853e:	681b      	ldr	r3, [r3, #0]
 8108540:	691b      	ldr	r3, [r3, #16]
 8108542:	f003 0301 	and.w	r3, r3, #1
 8108546:	2b01      	cmp	r3, #1
 8108548:	d10e      	bne.n	8108568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810854a:	687b      	ldr	r3, [r7, #4]
 810854c:	681b      	ldr	r3, [r3, #0]
 810854e:	68db      	ldr	r3, [r3, #12]
 8108550:	f003 0301 	and.w	r3, r3, #1
 8108554:	2b01      	cmp	r3, #1
 8108556:	d107      	bne.n	8108568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8108558:	687b      	ldr	r3, [r7, #4]
 810855a:	681b      	ldr	r3, [r3, #0]
 810855c:	f06f 0201 	mvn.w	r2, #1
 8108560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8108562:	6878      	ldr	r0, [r7, #4]
 8108564:	f7fa fb76 	bl	8102c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8108568:	687b      	ldr	r3, [r7, #4]
 810856a:	681b      	ldr	r3, [r3, #0]
 810856c:	691b      	ldr	r3, [r3, #16]
 810856e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108572:	2b80      	cmp	r3, #128	; 0x80
 8108574:	d10e      	bne.n	8108594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8108576:	687b      	ldr	r3, [r7, #4]
 8108578:	681b      	ldr	r3, [r3, #0]
 810857a:	68db      	ldr	r3, [r3, #12]
 810857c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108580:	2b80      	cmp	r3, #128	; 0x80
 8108582:	d107      	bne.n	8108594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8108584:	687b      	ldr	r3, [r7, #4]
 8108586:	681b      	ldr	r3, [r3, #0]
 8108588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810858c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810858e:	6878      	ldr	r0, [r7, #4]
 8108590:	f000 fdb2 	bl	81090f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8108594:	687b      	ldr	r3, [r7, #4]
 8108596:	681b      	ldr	r3, [r3, #0]
 8108598:	691b      	ldr	r3, [r3, #16]
 810859a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810859e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81085a2:	d10e      	bne.n	81085c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81085a4:	687b      	ldr	r3, [r7, #4]
 81085a6:	681b      	ldr	r3, [r3, #0]
 81085a8:	68db      	ldr	r3, [r3, #12]
 81085aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81085ae:	2b80      	cmp	r3, #128	; 0x80
 81085b0:	d107      	bne.n	81085c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81085b2:	687b      	ldr	r3, [r7, #4]
 81085b4:	681b      	ldr	r3, [r3, #0]
 81085b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81085ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81085bc:	6878      	ldr	r0, [r7, #4]
 81085be:	f000 fda5 	bl	810910c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81085c2:	687b      	ldr	r3, [r7, #4]
 81085c4:	681b      	ldr	r3, [r3, #0]
 81085c6:	691b      	ldr	r3, [r3, #16]
 81085c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81085cc:	2b40      	cmp	r3, #64	; 0x40
 81085ce:	d10e      	bne.n	81085ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81085d0:	687b      	ldr	r3, [r7, #4]
 81085d2:	681b      	ldr	r3, [r3, #0]
 81085d4:	68db      	ldr	r3, [r3, #12]
 81085d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81085da:	2b40      	cmp	r3, #64	; 0x40
 81085dc:	d107      	bne.n	81085ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 81085de:	687b      	ldr	r3, [r7, #4]
 81085e0:	681b      	ldr	r3, [r3, #0]
 81085e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81085e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81085e8:	6878      	ldr	r0, [r7, #4]
 81085ea:	f000 f94d 	bl	8108888 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81085ee:	687b      	ldr	r3, [r7, #4]
 81085f0:	681b      	ldr	r3, [r3, #0]
 81085f2:	691b      	ldr	r3, [r3, #16]
 81085f4:	f003 0320 	and.w	r3, r3, #32
 81085f8:	2b20      	cmp	r3, #32
 81085fa:	d10e      	bne.n	810861a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81085fc:	687b      	ldr	r3, [r7, #4]
 81085fe:	681b      	ldr	r3, [r3, #0]
 8108600:	68db      	ldr	r3, [r3, #12]
 8108602:	f003 0320 	and.w	r3, r3, #32
 8108606:	2b20      	cmp	r3, #32
 8108608:	d107      	bne.n	810861a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810860a:	687b      	ldr	r3, [r7, #4]
 810860c:	681b      	ldr	r3, [r3, #0]
 810860e:	f06f 0220 	mvn.w	r2, #32
 8108612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8108614:	6878      	ldr	r0, [r7, #4]
 8108616:	f000 fd65 	bl	81090e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810861a:	bf00      	nop
 810861c:	3708      	adds	r7, #8
 810861e:	46bd      	mov	sp, r7
 8108620:	bd80      	pop	{r7, pc}
	...

08108624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8108624:	b580      	push	{r7, lr}
 8108626:	b086      	sub	sp, #24
 8108628:	af00      	add	r7, sp, #0
 810862a:	60f8      	str	r0, [r7, #12]
 810862c:	60b9      	str	r1, [r7, #8]
 810862e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108630:	2300      	movs	r3, #0
 8108632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8108634:	68fb      	ldr	r3, [r7, #12]
 8108636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810863a:	2b01      	cmp	r3, #1
 810863c:	d101      	bne.n	8108642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 810863e:	2302      	movs	r3, #2
 8108640:	e0ff      	b.n	8108842 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8108642:	68fb      	ldr	r3, [r7, #12]
 8108644:	2201      	movs	r2, #1
 8108646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 810864a:	687b      	ldr	r3, [r7, #4]
 810864c:	2b14      	cmp	r3, #20
 810864e:	f200 80f0 	bhi.w	8108832 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8108652:	a201      	add	r2, pc, #4	; (adr r2, 8108658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8108654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108658:	081086ad 	.word	0x081086ad
 810865c:	08108833 	.word	0x08108833
 8108660:	08108833 	.word	0x08108833
 8108664:	08108833 	.word	0x08108833
 8108668:	081086ed 	.word	0x081086ed
 810866c:	08108833 	.word	0x08108833
 8108670:	08108833 	.word	0x08108833
 8108674:	08108833 	.word	0x08108833
 8108678:	0810872f 	.word	0x0810872f
 810867c:	08108833 	.word	0x08108833
 8108680:	08108833 	.word	0x08108833
 8108684:	08108833 	.word	0x08108833
 8108688:	0810876f 	.word	0x0810876f
 810868c:	08108833 	.word	0x08108833
 8108690:	08108833 	.word	0x08108833
 8108694:	08108833 	.word	0x08108833
 8108698:	081087b1 	.word	0x081087b1
 810869c:	08108833 	.word	0x08108833
 81086a0:	08108833 	.word	0x08108833
 81086a4:	08108833 	.word	0x08108833
 81086a8:	081087f1 	.word	0x081087f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81086ac:	68fb      	ldr	r3, [r7, #12]
 81086ae:	681b      	ldr	r3, [r3, #0]
 81086b0:	68b9      	ldr	r1, [r7, #8]
 81086b2:	4618      	mov	r0, r3
 81086b4:	f000 f98c 	bl	81089d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81086b8:	68fb      	ldr	r3, [r7, #12]
 81086ba:	681b      	ldr	r3, [r3, #0]
 81086bc:	699a      	ldr	r2, [r3, #24]
 81086be:	68fb      	ldr	r3, [r7, #12]
 81086c0:	681b      	ldr	r3, [r3, #0]
 81086c2:	f042 0208 	orr.w	r2, r2, #8
 81086c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81086c8:	68fb      	ldr	r3, [r7, #12]
 81086ca:	681b      	ldr	r3, [r3, #0]
 81086cc:	699a      	ldr	r2, [r3, #24]
 81086ce:	68fb      	ldr	r3, [r7, #12]
 81086d0:	681b      	ldr	r3, [r3, #0]
 81086d2:	f022 0204 	bic.w	r2, r2, #4
 81086d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 81086d8:	68fb      	ldr	r3, [r7, #12]
 81086da:	681b      	ldr	r3, [r3, #0]
 81086dc:	6999      	ldr	r1, [r3, #24]
 81086de:	68bb      	ldr	r3, [r7, #8]
 81086e0:	691a      	ldr	r2, [r3, #16]
 81086e2:	68fb      	ldr	r3, [r7, #12]
 81086e4:	681b      	ldr	r3, [r3, #0]
 81086e6:	430a      	orrs	r2, r1
 81086e8:	619a      	str	r2, [r3, #24]
      break;
 81086ea:	e0a5      	b.n	8108838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81086ec:	68fb      	ldr	r3, [r7, #12]
 81086ee:	681b      	ldr	r3, [r3, #0]
 81086f0:	68b9      	ldr	r1, [r7, #8]
 81086f2:	4618      	mov	r0, r3
 81086f4:	f000 f9fc 	bl	8108af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81086f8:	68fb      	ldr	r3, [r7, #12]
 81086fa:	681b      	ldr	r3, [r3, #0]
 81086fc:	699a      	ldr	r2, [r3, #24]
 81086fe:	68fb      	ldr	r3, [r7, #12]
 8108700:	681b      	ldr	r3, [r3, #0]
 8108702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8108708:	68fb      	ldr	r3, [r7, #12]
 810870a:	681b      	ldr	r3, [r3, #0]
 810870c:	699a      	ldr	r2, [r3, #24]
 810870e:	68fb      	ldr	r3, [r7, #12]
 8108710:	681b      	ldr	r3, [r3, #0]
 8108712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8108718:	68fb      	ldr	r3, [r7, #12]
 810871a:	681b      	ldr	r3, [r3, #0]
 810871c:	6999      	ldr	r1, [r3, #24]
 810871e:	68bb      	ldr	r3, [r7, #8]
 8108720:	691b      	ldr	r3, [r3, #16]
 8108722:	021a      	lsls	r2, r3, #8
 8108724:	68fb      	ldr	r3, [r7, #12]
 8108726:	681b      	ldr	r3, [r3, #0]
 8108728:	430a      	orrs	r2, r1
 810872a:	619a      	str	r2, [r3, #24]
      break;
 810872c:	e084      	b.n	8108838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810872e:	68fb      	ldr	r3, [r7, #12]
 8108730:	681b      	ldr	r3, [r3, #0]
 8108732:	68b9      	ldr	r1, [r7, #8]
 8108734:	4618      	mov	r0, r3
 8108736:	f000 fa65 	bl	8108c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810873a:	68fb      	ldr	r3, [r7, #12]
 810873c:	681b      	ldr	r3, [r3, #0]
 810873e:	69da      	ldr	r2, [r3, #28]
 8108740:	68fb      	ldr	r3, [r7, #12]
 8108742:	681b      	ldr	r3, [r3, #0]
 8108744:	f042 0208 	orr.w	r2, r2, #8
 8108748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810874a:	68fb      	ldr	r3, [r7, #12]
 810874c:	681b      	ldr	r3, [r3, #0]
 810874e:	69da      	ldr	r2, [r3, #28]
 8108750:	68fb      	ldr	r3, [r7, #12]
 8108752:	681b      	ldr	r3, [r3, #0]
 8108754:	f022 0204 	bic.w	r2, r2, #4
 8108758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810875a:	68fb      	ldr	r3, [r7, #12]
 810875c:	681b      	ldr	r3, [r3, #0]
 810875e:	69d9      	ldr	r1, [r3, #28]
 8108760:	68bb      	ldr	r3, [r7, #8]
 8108762:	691a      	ldr	r2, [r3, #16]
 8108764:	68fb      	ldr	r3, [r7, #12]
 8108766:	681b      	ldr	r3, [r3, #0]
 8108768:	430a      	orrs	r2, r1
 810876a:	61da      	str	r2, [r3, #28]
      break;
 810876c:	e064      	b.n	8108838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810876e:	68fb      	ldr	r3, [r7, #12]
 8108770:	681b      	ldr	r3, [r3, #0]
 8108772:	68b9      	ldr	r1, [r7, #8]
 8108774:	4618      	mov	r0, r3
 8108776:	f000 facd 	bl	8108d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810877a:	68fb      	ldr	r3, [r7, #12]
 810877c:	681b      	ldr	r3, [r3, #0]
 810877e:	69da      	ldr	r2, [r3, #28]
 8108780:	68fb      	ldr	r3, [r7, #12]
 8108782:	681b      	ldr	r3, [r3, #0]
 8108784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810878a:	68fb      	ldr	r3, [r7, #12]
 810878c:	681b      	ldr	r3, [r3, #0]
 810878e:	69da      	ldr	r2, [r3, #28]
 8108790:	68fb      	ldr	r3, [r7, #12]
 8108792:	681b      	ldr	r3, [r3, #0]
 8108794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810879a:	68fb      	ldr	r3, [r7, #12]
 810879c:	681b      	ldr	r3, [r3, #0]
 810879e:	69d9      	ldr	r1, [r3, #28]
 81087a0:	68bb      	ldr	r3, [r7, #8]
 81087a2:	691b      	ldr	r3, [r3, #16]
 81087a4:	021a      	lsls	r2, r3, #8
 81087a6:	68fb      	ldr	r3, [r7, #12]
 81087a8:	681b      	ldr	r3, [r3, #0]
 81087aa:	430a      	orrs	r2, r1
 81087ac:	61da      	str	r2, [r3, #28]
      break;
 81087ae:	e043      	b.n	8108838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81087b0:	68fb      	ldr	r3, [r7, #12]
 81087b2:	681b      	ldr	r3, [r3, #0]
 81087b4:	68b9      	ldr	r1, [r7, #8]
 81087b6:	4618      	mov	r0, r3
 81087b8:	f000 fb16 	bl	8108de8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81087bc:	68fb      	ldr	r3, [r7, #12]
 81087be:	681b      	ldr	r3, [r3, #0]
 81087c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81087c2:	68fb      	ldr	r3, [r7, #12]
 81087c4:	681b      	ldr	r3, [r3, #0]
 81087c6:	f042 0208 	orr.w	r2, r2, #8
 81087ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81087cc:	68fb      	ldr	r3, [r7, #12]
 81087ce:	681b      	ldr	r3, [r3, #0]
 81087d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81087d2:	68fb      	ldr	r3, [r7, #12]
 81087d4:	681b      	ldr	r3, [r3, #0]
 81087d6:	f022 0204 	bic.w	r2, r2, #4
 81087da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 81087dc:	68fb      	ldr	r3, [r7, #12]
 81087de:	681b      	ldr	r3, [r3, #0]
 81087e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81087e2:	68bb      	ldr	r3, [r7, #8]
 81087e4:	691a      	ldr	r2, [r3, #16]
 81087e6:	68fb      	ldr	r3, [r7, #12]
 81087e8:	681b      	ldr	r3, [r3, #0]
 81087ea:	430a      	orrs	r2, r1
 81087ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81087ee:	e023      	b.n	8108838 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81087f0:	68fb      	ldr	r3, [r7, #12]
 81087f2:	681b      	ldr	r3, [r3, #0]
 81087f4:	68b9      	ldr	r1, [r7, #8]
 81087f6:	4618      	mov	r0, r3
 81087f8:	f000 fb5a 	bl	8108eb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81087fc:	68fb      	ldr	r3, [r7, #12]
 81087fe:	681b      	ldr	r3, [r3, #0]
 8108800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108802:	68fb      	ldr	r3, [r7, #12]
 8108804:	681b      	ldr	r3, [r3, #0]
 8108806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810880a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810880c:	68fb      	ldr	r3, [r7, #12]
 810880e:	681b      	ldr	r3, [r3, #0]
 8108810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108812:	68fb      	ldr	r3, [r7, #12]
 8108814:	681b      	ldr	r3, [r3, #0]
 8108816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810881a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810881c:	68fb      	ldr	r3, [r7, #12]
 810881e:	681b      	ldr	r3, [r3, #0]
 8108820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8108822:	68bb      	ldr	r3, [r7, #8]
 8108824:	691b      	ldr	r3, [r3, #16]
 8108826:	021a      	lsls	r2, r3, #8
 8108828:	68fb      	ldr	r3, [r7, #12]
 810882a:	681b      	ldr	r3, [r3, #0]
 810882c:	430a      	orrs	r2, r1
 810882e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8108830:	e002      	b.n	8108838 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8108832:	2301      	movs	r3, #1
 8108834:	75fb      	strb	r3, [r7, #23]
      break;
 8108836:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8108838:	68fb      	ldr	r3, [r7, #12]
 810883a:	2200      	movs	r2, #0
 810883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8108840:	7dfb      	ldrb	r3, [r7, #23]
}
 8108842:	4618      	mov	r0, r3
 8108844:	3718      	adds	r7, #24
 8108846:	46bd      	mov	sp, r7
 8108848:	bd80      	pop	{r7, pc}
 810884a:	bf00      	nop

0810884c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810884c:	b480      	push	{r7}
 810884e:	b083      	sub	sp, #12
 8108850:	af00      	add	r7, sp, #0
 8108852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8108854:	bf00      	nop
 8108856:	370c      	adds	r7, #12
 8108858:	46bd      	mov	sp, r7
 810885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810885e:	4770      	bx	lr

08108860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8108860:	b480      	push	{r7}
 8108862:	b083      	sub	sp, #12
 8108864:	af00      	add	r7, sp, #0
 8108866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8108868:	bf00      	nop
 810886a:	370c      	adds	r7, #12
 810886c:	46bd      	mov	sp, r7
 810886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108872:	4770      	bx	lr

08108874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8108874:	b480      	push	{r7}
 8108876:	b083      	sub	sp, #12
 8108878:	af00      	add	r7, sp, #0
 810887a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810887c:	bf00      	nop
 810887e:	370c      	adds	r7, #12
 8108880:	46bd      	mov	sp, r7
 8108882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108886:	4770      	bx	lr

08108888 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8108888:	b480      	push	{r7}
 810888a:	b083      	sub	sp, #12
 810888c:	af00      	add	r7, sp, #0
 810888e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8108890:	bf00      	nop
 8108892:	370c      	adds	r7, #12
 8108894:	46bd      	mov	sp, r7
 8108896:	f85d 7b04 	ldr.w	r7, [sp], #4
 810889a:	4770      	bx	lr

0810889c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810889c:	b480      	push	{r7}
 810889e:	b085      	sub	sp, #20
 81088a0:	af00      	add	r7, sp, #0
 81088a2:	6078      	str	r0, [r7, #4]
 81088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81088a6:	687b      	ldr	r3, [r7, #4]
 81088a8:	681b      	ldr	r3, [r3, #0]
 81088aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81088ac:	687b      	ldr	r3, [r7, #4]
 81088ae:	4a40      	ldr	r2, [pc, #256]	; (81089b0 <TIM_Base_SetConfig+0x114>)
 81088b0:	4293      	cmp	r3, r2
 81088b2:	d013      	beq.n	81088dc <TIM_Base_SetConfig+0x40>
 81088b4:	687b      	ldr	r3, [r7, #4]
 81088b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81088ba:	d00f      	beq.n	81088dc <TIM_Base_SetConfig+0x40>
 81088bc:	687b      	ldr	r3, [r7, #4]
 81088be:	4a3d      	ldr	r2, [pc, #244]	; (81089b4 <TIM_Base_SetConfig+0x118>)
 81088c0:	4293      	cmp	r3, r2
 81088c2:	d00b      	beq.n	81088dc <TIM_Base_SetConfig+0x40>
 81088c4:	687b      	ldr	r3, [r7, #4]
 81088c6:	4a3c      	ldr	r2, [pc, #240]	; (81089b8 <TIM_Base_SetConfig+0x11c>)
 81088c8:	4293      	cmp	r3, r2
 81088ca:	d007      	beq.n	81088dc <TIM_Base_SetConfig+0x40>
 81088cc:	687b      	ldr	r3, [r7, #4]
 81088ce:	4a3b      	ldr	r2, [pc, #236]	; (81089bc <TIM_Base_SetConfig+0x120>)
 81088d0:	4293      	cmp	r3, r2
 81088d2:	d003      	beq.n	81088dc <TIM_Base_SetConfig+0x40>
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	4a3a      	ldr	r2, [pc, #232]	; (81089c0 <TIM_Base_SetConfig+0x124>)
 81088d8:	4293      	cmp	r3, r2
 81088da:	d108      	bne.n	81088ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81088dc:	68fb      	ldr	r3, [r7, #12]
 81088de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81088e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81088e4:	683b      	ldr	r3, [r7, #0]
 81088e6:	685b      	ldr	r3, [r3, #4]
 81088e8:	68fa      	ldr	r2, [r7, #12]
 81088ea:	4313      	orrs	r3, r2
 81088ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81088ee:	687b      	ldr	r3, [r7, #4]
 81088f0:	4a2f      	ldr	r2, [pc, #188]	; (81089b0 <TIM_Base_SetConfig+0x114>)
 81088f2:	4293      	cmp	r3, r2
 81088f4:	d01f      	beq.n	8108936 <TIM_Base_SetConfig+0x9a>
 81088f6:	687b      	ldr	r3, [r7, #4]
 81088f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81088fc:	d01b      	beq.n	8108936 <TIM_Base_SetConfig+0x9a>
 81088fe:	687b      	ldr	r3, [r7, #4]
 8108900:	4a2c      	ldr	r2, [pc, #176]	; (81089b4 <TIM_Base_SetConfig+0x118>)
 8108902:	4293      	cmp	r3, r2
 8108904:	d017      	beq.n	8108936 <TIM_Base_SetConfig+0x9a>
 8108906:	687b      	ldr	r3, [r7, #4]
 8108908:	4a2b      	ldr	r2, [pc, #172]	; (81089b8 <TIM_Base_SetConfig+0x11c>)
 810890a:	4293      	cmp	r3, r2
 810890c:	d013      	beq.n	8108936 <TIM_Base_SetConfig+0x9a>
 810890e:	687b      	ldr	r3, [r7, #4]
 8108910:	4a2a      	ldr	r2, [pc, #168]	; (81089bc <TIM_Base_SetConfig+0x120>)
 8108912:	4293      	cmp	r3, r2
 8108914:	d00f      	beq.n	8108936 <TIM_Base_SetConfig+0x9a>
 8108916:	687b      	ldr	r3, [r7, #4]
 8108918:	4a29      	ldr	r2, [pc, #164]	; (81089c0 <TIM_Base_SetConfig+0x124>)
 810891a:	4293      	cmp	r3, r2
 810891c:	d00b      	beq.n	8108936 <TIM_Base_SetConfig+0x9a>
 810891e:	687b      	ldr	r3, [r7, #4]
 8108920:	4a28      	ldr	r2, [pc, #160]	; (81089c4 <TIM_Base_SetConfig+0x128>)
 8108922:	4293      	cmp	r3, r2
 8108924:	d007      	beq.n	8108936 <TIM_Base_SetConfig+0x9a>
 8108926:	687b      	ldr	r3, [r7, #4]
 8108928:	4a27      	ldr	r2, [pc, #156]	; (81089c8 <TIM_Base_SetConfig+0x12c>)
 810892a:	4293      	cmp	r3, r2
 810892c:	d003      	beq.n	8108936 <TIM_Base_SetConfig+0x9a>
 810892e:	687b      	ldr	r3, [r7, #4]
 8108930:	4a26      	ldr	r2, [pc, #152]	; (81089cc <TIM_Base_SetConfig+0x130>)
 8108932:	4293      	cmp	r3, r2
 8108934:	d108      	bne.n	8108948 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8108936:	68fb      	ldr	r3, [r7, #12]
 8108938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810893c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810893e:	683b      	ldr	r3, [r7, #0]
 8108940:	68db      	ldr	r3, [r3, #12]
 8108942:	68fa      	ldr	r2, [r7, #12]
 8108944:	4313      	orrs	r3, r2
 8108946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8108948:	68fb      	ldr	r3, [r7, #12]
 810894a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810894e:	683b      	ldr	r3, [r7, #0]
 8108950:	695b      	ldr	r3, [r3, #20]
 8108952:	4313      	orrs	r3, r2
 8108954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8108956:	687b      	ldr	r3, [r7, #4]
 8108958:	68fa      	ldr	r2, [r7, #12]
 810895a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810895c:	683b      	ldr	r3, [r7, #0]
 810895e:	689a      	ldr	r2, [r3, #8]
 8108960:	687b      	ldr	r3, [r7, #4]
 8108962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8108964:	683b      	ldr	r3, [r7, #0]
 8108966:	681a      	ldr	r2, [r3, #0]
 8108968:	687b      	ldr	r3, [r7, #4]
 810896a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810896c:	687b      	ldr	r3, [r7, #4]
 810896e:	4a10      	ldr	r2, [pc, #64]	; (81089b0 <TIM_Base_SetConfig+0x114>)
 8108970:	4293      	cmp	r3, r2
 8108972:	d00f      	beq.n	8108994 <TIM_Base_SetConfig+0xf8>
 8108974:	687b      	ldr	r3, [r7, #4]
 8108976:	4a12      	ldr	r2, [pc, #72]	; (81089c0 <TIM_Base_SetConfig+0x124>)
 8108978:	4293      	cmp	r3, r2
 810897a:	d00b      	beq.n	8108994 <TIM_Base_SetConfig+0xf8>
 810897c:	687b      	ldr	r3, [r7, #4]
 810897e:	4a11      	ldr	r2, [pc, #68]	; (81089c4 <TIM_Base_SetConfig+0x128>)
 8108980:	4293      	cmp	r3, r2
 8108982:	d007      	beq.n	8108994 <TIM_Base_SetConfig+0xf8>
 8108984:	687b      	ldr	r3, [r7, #4]
 8108986:	4a10      	ldr	r2, [pc, #64]	; (81089c8 <TIM_Base_SetConfig+0x12c>)
 8108988:	4293      	cmp	r3, r2
 810898a:	d003      	beq.n	8108994 <TIM_Base_SetConfig+0xf8>
 810898c:	687b      	ldr	r3, [r7, #4]
 810898e:	4a0f      	ldr	r2, [pc, #60]	; (81089cc <TIM_Base_SetConfig+0x130>)
 8108990:	4293      	cmp	r3, r2
 8108992:	d103      	bne.n	810899c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8108994:	683b      	ldr	r3, [r7, #0]
 8108996:	691a      	ldr	r2, [r3, #16]
 8108998:	687b      	ldr	r3, [r7, #4]
 810899a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810899c:	687b      	ldr	r3, [r7, #4]
 810899e:	2201      	movs	r2, #1
 81089a0:	615a      	str	r2, [r3, #20]
}
 81089a2:	bf00      	nop
 81089a4:	3714      	adds	r7, #20
 81089a6:	46bd      	mov	sp, r7
 81089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089ac:	4770      	bx	lr
 81089ae:	bf00      	nop
 81089b0:	40010000 	.word	0x40010000
 81089b4:	40000400 	.word	0x40000400
 81089b8:	40000800 	.word	0x40000800
 81089bc:	40000c00 	.word	0x40000c00
 81089c0:	40010400 	.word	0x40010400
 81089c4:	40014000 	.word	0x40014000
 81089c8:	40014400 	.word	0x40014400
 81089cc:	40014800 	.word	0x40014800

081089d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81089d0:	b480      	push	{r7}
 81089d2:	b087      	sub	sp, #28
 81089d4:	af00      	add	r7, sp, #0
 81089d6:	6078      	str	r0, [r7, #4]
 81089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81089da:	687b      	ldr	r3, [r7, #4]
 81089dc:	6a1b      	ldr	r3, [r3, #32]
 81089de:	f023 0201 	bic.w	r2, r3, #1
 81089e2:	687b      	ldr	r3, [r7, #4]
 81089e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81089e6:	687b      	ldr	r3, [r7, #4]
 81089e8:	6a1b      	ldr	r3, [r3, #32]
 81089ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81089ec:	687b      	ldr	r3, [r7, #4]
 81089ee:	685b      	ldr	r3, [r3, #4]
 81089f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81089f2:	687b      	ldr	r3, [r7, #4]
 81089f4:	699b      	ldr	r3, [r3, #24]
 81089f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81089f8:	68fb      	ldr	r3, [r7, #12]
 81089fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81089fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8108a04:	68fb      	ldr	r3, [r7, #12]
 8108a06:	f023 0303 	bic.w	r3, r3, #3
 8108a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108a0c:	683b      	ldr	r3, [r7, #0]
 8108a0e:	681b      	ldr	r3, [r3, #0]
 8108a10:	68fa      	ldr	r2, [r7, #12]
 8108a12:	4313      	orrs	r3, r2
 8108a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8108a16:	697b      	ldr	r3, [r7, #20]
 8108a18:	f023 0302 	bic.w	r3, r3, #2
 8108a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8108a1e:	683b      	ldr	r3, [r7, #0]
 8108a20:	689b      	ldr	r3, [r3, #8]
 8108a22:	697a      	ldr	r2, [r7, #20]
 8108a24:	4313      	orrs	r3, r2
 8108a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8108a28:	687b      	ldr	r3, [r7, #4]
 8108a2a:	4a2c      	ldr	r2, [pc, #176]	; (8108adc <TIM_OC1_SetConfig+0x10c>)
 8108a2c:	4293      	cmp	r3, r2
 8108a2e:	d00f      	beq.n	8108a50 <TIM_OC1_SetConfig+0x80>
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	4a2b      	ldr	r2, [pc, #172]	; (8108ae0 <TIM_OC1_SetConfig+0x110>)
 8108a34:	4293      	cmp	r3, r2
 8108a36:	d00b      	beq.n	8108a50 <TIM_OC1_SetConfig+0x80>
 8108a38:	687b      	ldr	r3, [r7, #4]
 8108a3a:	4a2a      	ldr	r2, [pc, #168]	; (8108ae4 <TIM_OC1_SetConfig+0x114>)
 8108a3c:	4293      	cmp	r3, r2
 8108a3e:	d007      	beq.n	8108a50 <TIM_OC1_SetConfig+0x80>
 8108a40:	687b      	ldr	r3, [r7, #4]
 8108a42:	4a29      	ldr	r2, [pc, #164]	; (8108ae8 <TIM_OC1_SetConfig+0x118>)
 8108a44:	4293      	cmp	r3, r2
 8108a46:	d003      	beq.n	8108a50 <TIM_OC1_SetConfig+0x80>
 8108a48:	687b      	ldr	r3, [r7, #4]
 8108a4a:	4a28      	ldr	r2, [pc, #160]	; (8108aec <TIM_OC1_SetConfig+0x11c>)
 8108a4c:	4293      	cmp	r3, r2
 8108a4e:	d10c      	bne.n	8108a6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8108a50:	697b      	ldr	r3, [r7, #20]
 8108a52:	f023 0308 	bic.w	r3, r3, #8
 8108a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8108a58:	683b      	ldr	r3, [r7, #0]
 8108a5a:	68db      	ldr	r3, [r3, #12]
 8108a5c:	697a      	ldr	r2, [r7, #20]
 8108a5e:	4313      	orrs	r3, r2
 8108a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8108a62:	697b      	ldr	r3, [r7, #20]
 8108a64:	f023 0304 	bic.w	r3, r3, #4
 8108a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108a6a:	687b      	ldr	r3, [r7, #4]
 8108a6c:	4a1b      	ldr	r2, [pc, #108]	; (8108adc <TIM_OC1_SetConfig+0x10c>)
 8108a6e:	4293      	cmp	r3, r2
 8108a70:	d00f      	beq.n	8108a92 <TIM_OC1_SetConfig+0xc2>
 8108a72:	687b      	ldr	r3, [r7, #4]
 8108a74:	4a1a      	ldr	r2, [pc, #104]	; (8108ae0 <TIM_OC1_SetConfig+0x110>)
 8108a76:	4293      	cmp	r3, r2
 8108a78:	d00b      	beq.n	8108a92 <TIM_OC1_SetConfig+0xc2>
 8108a7a:	687b      	ldr	r3, [r7, #4]
 8108a7c:	4a19      	ldr	r2, [pc, #100]	; (8108ae4 <TIM_OC1_SetConfig+0x114>)
 8108a7e:	4293      	cmp	r3, r2
 8108a80:	d007      	beq.n	8108a92 <TIM_OC1_SetConfig+0xc2>
 8108a82:	687b      	ldr	r3, [r7, #4]
 8108a84:	4a18      	ldr	r2, [pc, #96]	; (8108ae8 <TIM_OC1_SetConfig+0x118>)
 8108a86:	4293      	cmp	r3, r2
 8108a88:	d003      	beq.n	8108a92 <TIM_OC1_SetConfig+0xc2>
 8108a8a:	687b      	ldr	r3, [r7, #4]
 8108a8c:	4a17      	ldr	r2, [pc, #92]	; (8108aec <TIM_OC1_SetConfig+0x11c>)
 8108a8e:	4293      	cmp	r3, r2
 8108a90:	d111      	bne.n	8108ab6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8108a92:	693b      	ldr	r3, [r7, #16]
 8108a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8108a9a:	693b      	ldr	r3, [r7, #16]
 8108a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8108aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8108aa2:	683b      	ldr	r3, [r7, #0]
 8108aa4:	695b      	ldr	r3, [r3, #20]
 8108aa6:	693a      	ldr	r2, [r7, #16]
 8108aa8:	4313      	orrs	r3, r2
 8108aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8108aac:	683b      	ldr	r3, [r7, #0]
 8108aae:	699b      	ldr	r3, [r3, #24]
 8108ab0:	693a      	ldr	r2, [r7, #16]
 8108ab2:	4313      	orrs	r3, r2
 8108ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108ab6:	687b      	ldr	r3, [r7, #4]
 8108ab8:	693a      	ldr	r2, [r7, #16]
 8108aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8108abc:	687b      	ldr	r3, [r7, #4]
 8108abe:	68fa      	ldr	r2, [r7, #12]
 8108ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8108ac2:	683b      	ldr	r3, [r7, #0]
 8108ac4:	685a      	ldr	r2, [r3, #4]
 8108ac6:	687b      	ldr	r3, [r7, #4]
 8108ac8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108aca:	687b      	ldr	r3, [r7, #4]
 8108acc:	697a      	ldr	r2, [r7, #20]
 8108ace:	621a      	str	r2, [r3, #32]
}
 8108ad0:	bf00      	nop
 8108ad2:	371c      	adds	r7, #28
 8108ad4:	46bd      	mov	sp, r7
 8108ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ada:	4770      	bx	lr
 8108adc:	40010000 	.word	0x40010000
 8108ae0:	40010400 	.word	0x40010400
 8108ae4:	40014000 	.word	0x40014000
 8108ae8:	40014400 	.word	0x40014400
 8108aec:	40014800 	.word	0x40014800

08108af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108af0:	b480      	push	{r7}
 8108af2:	b087      	sub	sp, #28
 8108af4:	af00      	add	r7, sp, #0
 8108af6:	6078      	str	r0, [r7, #4]
 8108af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8108afa:	687b      	ldr	r3, [r7, #4]
 8108afc:	6a1b      	ldr	r3, [r3, #32]
 8108afe:	f023 0210 	bic.w	r2, r3, #16
 8108b02:	687b      	ldr	r3, [r7, #4]
 8108b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108b06:	687b      	ldr	r3, [r7, #4]
 8108b08:	6a1b      	ldr	r3, [r3, #32]
 8108b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108b0c:	687b      	ldr	r3, [r7, #4]
 8108b0e:	685b      	ldr	r3, [r3, #4]
 8108b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8108b12:	687b      	ldr	r3, [r7, #4]
 8108b14:	699b      	ldr	r3, [r3, #24]
 8108b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8108b18:	68fb      	ldr	r3, [r7, #12]
 8108b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8108b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8108b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8108b24:	68fb      	ldr	r3, [r7, #12]
 8108b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108b2c:	683b      	ldr	r3, [r7, #0]
 8108b2e:	681b      	ldr	r3, [r3, #0]
 8108b30:	021b      	lsls	r3, r3, #8
 8108b32:	68fa      	ldr	r2, [r7, #12]
 8108b34:	4313      	orrs	r3, r2
 8108b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8108b38:	697b      	ldr	r3, [r7, #20]
 8108b3a:	f023 0320 	bic.w	r3, r3, #32
 8108b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8108b40:	683b      	ldr	r3, [r7, #0]
 8108b42:	689b      	ldr	r3, [r3, #8]
 8108b44:	011b      	lsls	r3, r3, #4
 8108b46:	697a      	ldr	r2, [r7, #20]
 8108b48:	4313      	orrs	r3, r2
 8108b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8108b4c:	687b      	ldr	r3, [r7, #4]
 8108b4e:	4a28      	ldr	r2, [pc, #160]	; (8108bf0 <TIM_OC2_SetConfig+0x100>)
 8108b50:	4293      	cmp	r3, r2
 8108b52:	d003      	beq.n	8108b5c <TIM_OC2_SetConfig+0x6c>
 8108b54:	687b      	ldr	r3, [r7, #4]
 8108b56:	4a27      	ldr	r2, [pc, #156]	; (8108bf4 <TIM_OC2_SetConfig+0x104>)
 8108b58:	4293      	cmp	r3, r2
 8108b5a:	d10d      	bne.n	8108b78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8108b5c:	697b      	ldr	r3, [r7, #20]
 8108b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8108b64:	683b      	ldr	r3, [r7, #0]
 8108b66:	68db      	ldr	r3, [r3, #12]
 8108b68:	011b      	lsls	r3, r3, #4
 8108b6a:	697a      	ldr	r2, [r7, #20]
 8108b6c:	4313      	orrs	r3, r2
 8108b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8108b70:	697b      	ldr	r3, [r7, #20]
 8108b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8108b76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108b78:	687b      	ldr	r3, [r7, #4]
 8108b7a:	4a1d      	ldr	r2, [pc, #116]	; (8108bf0 <TIM_OC2_SetConfig+0x100>)
 8108b7c:	4293      	cmp	r3, r2
 8108b7e:	d00f      	beq.n	8108ba0 <TIM_OC2_SetConfig+0xb0>
 8108b80:	687b      	ldr	r3, [r7, #4]
 8108b82:	4a1c      	ldr	r2, [pc, #112]	; (8108bf4 <TIM_OC2_SetConfig+0x104>)
 8108b84:	4293      	cmp	r3, r2
 8108b86:	d00b      	beq.n	8108ba0 <TIM_OC2_SetConfig+0xb0>
 8108b88:	687b      	ldr	r3, [r7, #4]
 8108b8a:	4a1b      	ldr	r2, [pc, #108]	; (8108bf8 <TIM_OC2_SetConfig+0x108>)
 8108b8c:	4293      	cmp	r3, r2
 8108b8e:	d007      	beq.n	8108ba0 <TIM_OC2_SetConfig+0xb0>
 8108b90:	687b      	ldr	r3, [r7, #4]
 8108b92:	4a1a      	ldr	r2, [pc, #104]	; (8108bfc <TIM_OC2_SetConfig+0x10c>)
 8108b94:	4293      	cmp	r3, r2
 8108b96:	d003      	beq.n	8108ba0 <TIM_OC2_SetConfig+0xb0>
 8108b98:	687b      	ldr	r3, [r7, #4]
 8108b9a:	4a19      	ldr	r2, [pc, #100]	; (8108c00 <TIM_OC2_SetConfig+0x110>)
 8108b9c:	4293      	cmp	r3, r2
 8108b9e:	d113      	bne.n	8108bc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8108ba0:	693b      	ldr	r3, [r7, #16]
 8108ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8108ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8108ba8:	693b      	ldr	r3, [r7, #16]
 8108baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8108bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8108bb0:	683b      	ldr	r3, [r7, #0]
 8108bb2:	695b      	ldr	r3, [r3, #20]
 8108bb4:	009b      	lsls	r3, r3, #2
 8108bb6:	693a      	ldr	r2, [r7, #16]
 8108bb8:	4313      	orrs	r3, r2
 8108bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8108bbc:	683b      	ldr	r3, [r7, #0]
 8108bbe:	699b      	ldr	r3, [r3, #24]
 8108bc0:	009b      	lsls	r3, r3, #2
 8108bc2:	693a      	ldr	r2, [r7, #16]
 8108bc4:	4313      	orrs	r3, r2
 8108bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108bc8:	687b      	ldr	r3, [r7, #4]
 8108bca:	693a      	ldr	r2, [r7, #16]
 8108bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8108bce:	687b      	ldr	r3, [r7, #4]
 8108bd0:	68fa      	ldr	r2, [r7, #12]
 8108bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8108bd4:	683b      	ldr	r3, [r7, #0]
 8108bd6:	685a      	ldr	r2, [r3, #4]
 8108bd8:	687b      	ldr	r3, [r7, #4]
 8108bda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108bdc:	687b      	ldr	r3, [r7, #4]
 8108bde:	697a      	ldr	r2, [r7, #20]
 8108be0:	621a      	str	r2, [r3, #32]
}
 8108be2:	bf00      	nop
 8108be4:	371c      	adds	r7, #28
 8108be6:	46bd      	mov	sp, r7
 8108be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bec:	4770      	bx	lr
 8108bee:	bf00      	nop
 8108bf0:	40010000 	.word	0x40010000
 8108bf4:	40010400 	.word	0x40010400
 8108bf8:	40014000 	.word	0x40014000
 8108bfc:	40014400 	.word	0x40014400
 8108c00:	40014800 	.word	0x40014800

08108c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108c04:	b480      	push	{r7}
 8108c06:	b087      	sub	sp, #28
 8108c08:	af00      	add	r7, sp, #0
 8108c0a:	6078      	str	r0, [r7, #4]
 8108c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8108c0e:	687b      	ldr	r3, [r7, #4]
 8108c10:	6a1b      	ldr	r3, [r3, #32]
 8108c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8108c16:	687b      	ldr	r3, [r7, #4]
 8108c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	6a1b      	ldr	r3, [r3, #32]
 8108c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108c20:	687b      	ldr	r3, [r7, #4]
 8108c22:	685b      	ldr	r3, [r3, #4]
 8108c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8108c26:	687b      	ldr	r3, [r7, #4]
 8108c28:	69db      	ldr	r3, [r3, #28]
 8108c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8108c2c:	68fb      	ldr	r3, [r7, #12]
 8108c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8108c38:	68fb      	ldr	r3, [r7, #12]
 8108c3a:	f023 0303 	bic.w	r3, r3, #3
 8108c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108c40:	683b      	ldr	r3, [r7, #0]
 8108c42:	681b      	ldr	r3, [r3, #0]
 8108c44:	68fa      	ldr	r2, [r7, #12]
 8108c46:	4313      	orrs	r3, r2
 8108c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8108c4a:	697b      	ldr	r3, [r7, #20]
 8108c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8108c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8108c52:	683b      	ldr	r3, [r7, #0]
 8108c54:	689b      	ldr	r3, [r3, #8]
 8108c56:	021b      	lsls	r3, r3, #8
 8108c58:	697a      	ldr	r2, [r7, #20]
 8108c5a:	4313      	orrs	r3, r2
 8108c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8108c5e:	687b      	ldr	r3, [r7, #4]
 8108c60:	4a27      	ldr	r2, [pc, #156]	; (8108d00 <TIM_OC3_SetConfig+0xfc>)
 8108c62:	4293      	cmp	r3, r2
 8108c64:	d003      	beq.n	8108c6e <TIM_OC3_SetConfig+0x6a>
 8108c66:	687b      	ldr	r3, [r7, #4]
 8108c68:	4a26      	ldr	r2, [pc, #152]	; (8108d04 <TIM_OC3_SetConfig+0x100>)
 8108c6a:	4293      	cmp	r3, r2
 8108c6c:	d10d      	bne.n	8108c8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8108c6e:	697b      	ldr	r3, [r7, #20]
 8108c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8108c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8108c76:	683b      	ldr	r3, [r7, #0]
 8108c78:	68db      	ldr	r3, [r3, #12]
 8108c7a:	021b      	lsls	r3, r3, #8
 8108c7c:	697a      	ldr	r2, [r7, #20]
 8108c7e:	4313      	orrs	r3, r2
 8108c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8108c82:	697b      	ldr	r3, [r7, #20]
 8108c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8108c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108c8a:	687b      	ldr	r3, [r7, #4]
 8108c8c:	4a1c      	ldr	r2, [pc, #112]	; (8108d00 <TIM_OC3_SetConfig+0xfc>)
 8108c8e:	4293      	cmp	r3, r2
 8108c90:	d00f      	beq.n	8108cb2 <TIM_OC3_SetConfig+0xae>
 8108c92:	687b      	ldr	r3, [r7, #4]
 8108c94:	4a1b      	ldr	r2, [pc, #108]	; (8108d04 <TIM_OC3_SetConfig+0x100>)
 8108c96:	4293      	cmp	r3, r2
 8108c98:	d00b      	beq.n	8108cb2 <TIM_OC3_SetConfig+0xae>
 8108c9a:	687b      	ldr	r3, [r7, #4]
 8108c9c:	4a1a      	ldr	r2, [pc, #104]	; (8108d08 <TIM_OC3_SetConfig+0x104>)
 8108c9e:	4293      	cmp	r3, r2
 8108ca0:	d007      	beq.n	8108cb2 <TIM_OC3_SetConfig+0xae>
 8108ca2:	687b      	ldr	r3, [r7, #4]
 8108ca4:	4a19      	ldr	r2, [pc, #100]	; (8108d0c <TIM_OC3_SetConfig+0x108>)
 8108ca6:	4293      	cmp	r3, r2
 8108ca8:	d003      	beq.n	8108cb2 <TIM_OC3_SetConfig+0xae>
 8108caa:	687b      	ldr	r3, [r7, #4]
 8108cac:	4a18      	ldr	r2, [pc, #96]	; (8108d10 <TIM_OC3_SetConfig+0x10c>)
 8108cae:	4293      	cmp	r3, r2
 8108cb0:	d113      	bne.n	8108cda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8108cb2:	693b      	ldr	r3, [r7, #16]
 8108cb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8108cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8108cba:	693b      	ldr	r3, [r7, #16]
 8108cbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8108cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8108cc2:	683b      	ldr	r3, [r7, #0]
 8108cc4:	695b      	ldr	r3, [r3, #20]
 8108cc6:	011b      	lsls	r3, r3, #4
 8108cc8:	693a      	ldr	r2, [r7, #16]
 8108cca:	4313      	orrs	r3, r2
 8108ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8108cce:	683b      	ldr	r3, [r7, #0]
 8108cd0:	699b      	ldr	r3, [r3, #24]
 8108cd2:	011b      	lsls	r3, r3, #4
 8108cd4:	693a      	ldr	r2, [r7, #16]
 8108cd6:	4313      	orrs	r3, r2
 8108cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108cda:	687b      	ldr	r3, [r7, #4]
 8108cdc:	693a      	ldr	r2, [r7, #16]
 8108cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8108ce0:	687b      	ldr	r3, [r7, #4]
 8108ce2:	68fa      	ldr	r2, [r7, #12]
 8108ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8108ce6:	683b      	ldr	r3, [r7, #0]
 8108ce8:	685a      	ldr	r2, [r3, #4]
 8108cea:	687b      	ldr	r3, [r7, #4]
 8108cec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108cee:	687b      	ldr	r3, [r7, #4]
 8108cf0:	697a      	ldr	r2, [r7, #20]
 8108cf2:	621a      	str	r2, [r3, #32]
}
 8108cf4:	bf00      	nop
 8108cf6:	371c      	adds	r7, #28
 8108cf8:	46bd      	mov	sp, r7
 8108cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cfe:	4770      	bx	lr
 8108d00:	40010000 	.word	0x40010000
 8108d04:	40010400 	.word	0x40010400
 8108d08:	40014000 	.word	0x40014000
 8108d0c:	40014400 	.word	0x40014400
 8108d10:	40014800 	.word	0x40014800

08108d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108d14:	b480      	push	{r7}
 8108d16:	b087      	sub	sp, #28
 8108d18:	af00      	add	r7, sp, #0
 8108d1a:	6078      	str	r0, [r7, #4]
 8108d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8108d1e:	687b      	ldr	r3, [r7, #4]
 8108d20:	6a1b      	ldr	r3, [r3, #32]
 8108d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8108d26:	687b      	ldr	r3, [r7, #4]
 8108d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108d2a:	687b      	ldr	r3, [r7, #4]
 8108d2c:	6a1b      	ldr	r3, [r3, #32]
 8108d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108d30:	687b      	ldr	r3, [r7, #4]
 8108d32:	685b      	ldr	r3, [r3, #4]
 8108d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8108d36:	687b      	ldr	r3, [r7, #4]
 8108d38:	69db      	ldr	r3, [r3, #28]
 8108d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8108d3c:	68fb      	ldr	r3, [r7, #12]
 8108d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8108d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8108d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8108d48:	68fb      	ldr	r3, [r7, #12]
 8108d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108d50:	683b      	ldr	r3, [r7, #0]
 8108d52:	681b      	ldr	r3, [r3, #0]
 8108d54:	021b      	lsls	r3, r3, #8
 8108d56:	68fa      	ldr	r2, [r7, #12]
 8108d58:	4313      	orrs	r3, r2
 8108d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8108d5c:	693b      	ldr	r3, [r7, #16]
 8108d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8108d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8108d64:	683b      	ldr	r3, [r7, #0]
 8108d66:	689b      	ldr	r3, [r3, #8]
 8108d68:	031b      	lsls	r3, r3, #12
 8108d6a:	693a      	ldr	r2, [r7, #16]
 8108d6c:	4313      	orrs	r3, r2
 8108d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108d70:	687b      	ldr	r3, [r7, #4]
 8108d72:	4a18      	ldr	r2, [pc, #96]	; (8108dd4 <TIM_OC4_SetConfig+0xc0>)
 8108d74:	4293      	cmp	r3, r2
 8108d76:	d00f      	beq.n	8108d98 <TIM_OC4_SetConfig+0x84>
 8108d78:	687b      	ldr	r3, [r7, #4]
 8108d7a:	4a17      	ldr	r2, [pc, #92]	; (8108dd8 <TIM_OC4_SetConfig+0xc4>)
 8108d7c:	4293      	cmp	r3, r2
 8108d7e:	d00b      	beq.n	8108d98 <TIM_OC4_SetConfig+0x84>
 8108d80:	687b      	ldr	r3, [r7, #4]
 8108d82:	4a16      	ldr	r2, [pc, #88]	; (8108ddc <TIM_OC4_SetConfig+0xc8>)
 8108d84:	4293      	cmp	r3, r2
 8108d86:	d007      	beq.n	8108d98 <TIM_OC4_SetConfig+0x84>
 8108d88:	687b      	ldr	r3, [r7, #4]
 8108d8a:	4a15      	ldr	r2, [pc, #84]	; (8108de0 <TIM_OC4_SetConfig+0xcc>)
 8108d8c:	4293      	cmp	r3, r2
 8108d8e:	d003      	beq.n	8108d98 <TIM_OC4_SetConfig+0x84>
 8108d90:	687b      	ldr	r3, [r7, #4]
 8108d92:	4a14      	ldr	r2, [pc, #80]	; (8108de4 <TIM_OC4_SetConfig+0xd0>)
 8108d94:	4293      	cmp	r3, r2
 8108d96:	d109      	bne.n	8108dac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8108d98:	697b      	ldr	r3, [r7, #20]
 8108d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8108d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8108da0:	683b      	ldr	r3, [r7, #0]
 8108da2:	695b      	ldr	r3, [r3, #20]
 8108da4:	019b      	lsls	r3, r3, #6
 8108da6:	697a      	ldr	r2, [r7, #20]
 8108da8:	4313      	orrs	r3, r2
 8108daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108dac:	687b      	ldr	r3, [r7, #4]
 8108dae:	697a      	ldr	r2, [r7, #20]
 8108db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8108db2:	687b      	ldr	r3, [r7, #4]
 8108db4:	68fa      	ldr	r2, [r7, #12]
 8108db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8108db8:	683b      	ldr	r3, [r7, #0]
 8108dba:	685a      	ldr	r2, [r3, #4]
 8108dbc:	687b      	ldr	r3, [r7, #4]
 8108dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108dc0:	687b      	ldr	r3, [r7, #4]
 8108dc2:	693a      	ldr	r2, [r7, #16]
 8108dc4:	621a      	str	r2, [r3, #32]
}
 8108dc6:	bf00      	nop
 8108dc8:	371c      	adds	r7, #28
 8108dca:	46bd      	mov	sp, r7
 8108dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dd0:	4770      	bx	lr
 8108dd2:	bf00      	nop
 8108dd4:	40010000 	.word	0x40010000
 8108dd8:	40010400 	.word	0x40010400
 8108ddc:	40014000 	.word	0x40014000
 8108de0:	40014400 	.word	0x40014400
 8108de4:	40014800 	.word	0x40014800

08108de8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8108de8:	b480      	push	{r7}
 8108dea:	b087      	sub	sp, #28
 8108dec:	af00      	add	r7, sp, #0
 8108dee:	6078      	str	r0, [r7, #4]
 8108df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8108df2:	687b      	ldr	r3, [r7, #4]
 8108df4:	6a1b      	ldr	r3, [r3, #32]
 8108df6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108dfe:	687b      	ldr	r3, [r7, #4]
 8108e00:	6a1b      	ldr	r3, [r3, #32]
 8108e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108e04:	687b      	ldr	r3, [r7, #4]
 8108e06:	685b      	ldr	r3, [r3, #4]
 8108e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108e0a:	687b      	ldr	r3, [r7, #4]
 8108e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8108e10:	68fb      	ldr	r3, [r7, #12]
 8108e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108e1c:	683b      	ldr	r3, [r7, #0]
 8108e1e:	681b      	ldr	r3, [r3, #0]
 8108e20:	68fa      	ldr	r2, [r7, #12]
 8108e22:	4313      	orrs	r3, r2
 8108e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8108e26:	693b      	ldr	r3, [r7, #16]
 8108e28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8108e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8108e2e:	683b      	ldr	r3, [r7, #0]
 8108e30:	689b      	ldr	r3, [r3, #8]
 8108e32:	041b      	lsls	r3, r3, #16
 8108e34:	693a      	ldr	r2, [r7, #16]
 8108e36:	4313      	orrs	r3, r2
 8108e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108e3a:	687b      	ldr	r3, [r7, #4]
 8108e3c:	4a17      	ldr	r2, [pc, #92]	; (8108e9c <TIM_OC5_SetConfig+0xb4>)
 8108e3e:	4293      	cmp	r3, r2
 8108e40:	d00f      	beq.n	8108e62 <TIM_OC5_SetConfig+0x7a>
 8108e42:	687b      	ldr	r3, [r7, #4]
 8108e44:	4a16      	ldr	r2, [pc, #88]	; (8108ea0 <TIM_OC5_SetConfig+0xb8>)
 8108e46:	4293      	cmp	r3, r2
 8108e48:	d00b      	beq.n	8108e62 <TIM_OC5_SetConfig+0x7a>
 8108e4a:	687b      	ldr	r3, [r7, #4]
 8108e4c:	4a15      	ldr	r2, [pc, #84]	; (8108ea4 <TIM_OC5_SetConfig+0xbc>)
 8108e4e:	4293      	cmp	r3, r2
 8108e50:	d007      	beq.n	8108e62 <TIM_OC5_SetConfig+0x7a>
 8108e52:	687b      	ldr	r3, [r7, #4]
 8108e54:	4a14      	ldr	r2, [pc, #80]	; (8108ea8 <TIM_OC5_SetConfig+0xc0>)
 8108e56:	4293      	cmp	r3, r2
 8108e58:	d003      	beq.n	8108e62 <TIM_OC5_SetConfig+0x7a>
 8108e5a:	687b      	ldr	r3, [r7, #4]
 8108e5c:	4a13      	ldr	r2, [pc, #76]	; (8108eac <TIM_OC5_SetConfig+0xc4>)
 8108e5e:	4293      	cmp	r3, r2
 8108e60:	d109      	bne.n	8108e76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8108e62:	697b      	ldr	r3, [r7, #20]
 8108e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108e68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8108e6a:	683b      	ldr	r3, [r7, #0]
 8108e6c:	695b      	ldr	r3, [r3, #20]
 8108e6e:	021b      	lsls	r3, r3, #8
 8108e70:	697a      	ldr	r2, [r7, #20]
 8108e72:	4313      	orrs	r3, r2
 8108e74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108e76:	687b      	ldr	r3, [r7, #4]
 8108e78:	697a      	ldr	r2, [r7, #20]
 8108e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8108e7c:	687b      	ldr	r3, [r7, #4]
 8108e7e:	68fa      	ldr	r2, [r7, #12]
 8108e80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8108e82:	683b      	ldr	r3, [r7, #0]
 8108e84:	685a      	ldr	r2, [r3, #4]
 8108e86:	687b      	ldr	r3, [r7, #4]
 8108e88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108e8a:	687b      	ldr	r3, [r7, #4]
 8108e8c:	693a      	ldr	r2, [r7, #16]
 8108e8e:	621a      	str	r2, [r3, #32]
}
 8108e90:	bf00      	nop
 8108e92:	371c      	adds	r7, #28
 8108e94:	46bd      	mov	sp, r7
 8108e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e9a:	4770      	bx	lr
 8108e9c:	40010000 	.word	0x40010000
 8108ea0:	40010400 	.word	0x40010400
 8108ea4:	40014000 	.word	0x40014000
 8108ea8:	40014400 	.word	0x40014400
 8108eac:	40014800 	.word	0x40014800

08108eb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8108eb0:	b480      	push	{r7}
 8108eb2:	b087      	sub	sp, #28
 8108eb4:	af00      	add	r7, sp, #0
 8108eb6:	6078      	str	r0, [r7, #4]
 8108eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8108eba:	687b      	ldr	r3, [r7, #4]
 8108ebc:	6a1b      	ldr	r3, [r3, #32]
 8108ebe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8108ec2:	687b      	ldr	r3, [r7, #4]
 8108ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108ec6:	687b      	ldr	r3, [r7, #4]
 8108ec8:	6a1b      	ldr	r3, [r3, #32]
 8108eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108ecc:	687b      	ldr	r3, [r7, #4]
 8108ece:	685b      	ldr	r3, [r3, #4]
 8108ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108ed2:	687b      	ldr	r3, [r7, #4]
 8108ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8108ed8:	68fb      	ldr	r3, [r7, #12]
 8108eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8108ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8108ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108ee4:	683b      	ldr	r3, [r7, #0]
 8108ee6:	681b      	ldr	r3, [r3, #0]
 8108ee8:	021b      	lsls	r3, r3, #8
 8108eea:	68fa      	ldr	r2, [r7, #12]
 8108eec:	4313      	orrs	r3, r2
 8108eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8108ef0:	693b      	ldr	r3, [r7, #16]
 8108ef2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8108ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8108ef8:	683b      	ldr	r3, [r7, #0]
 8108efa:	689b      	ldr	r3, [r3, #8]
 8108efc:	051b      	lsls	r3, r3, #20
 8108efe:	693a      	ldr	r2, [r7, #16]
 8108f00:	4313      	orrs	r3, r2
 8108f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108f04:	687b      	ldr	r3, [r7, #4]
 8108f06:	4a18      	ldr	r2, [pc, #96]	; (8108f68 <TIM_OC6_SetConfig+0xb8>)
 8108f08:	4293      	cmp	r3, r2
 8108f0a:	d00f      	beq.n	8108f2c <TIM_OC6_SetConfig+0x7c>
 8108f0c:	687b      	ldr	r3, [r7, #4]
 8108f0e:	4a17      	ldr	r2, [pc, #92]	; (8108f6c <TIM_OC6_SetConfig+0xbc>)
 8108f10:	4293      	cmp	r3, r2
 8108f12:	d00b      	beq.n	8108f2c <TIM_OC6_SetConfig+0x7c>
 8108f14:	687b      	ldr	r3, [r7, #4]
 8108f16:	4a16      	ldr	r2, [pc, #88]	; (8108f70 <TIM_OC6_SetConfig+0xc0>)
 8108f18:	4293      	cmp	r3, r2
 8108f1a:	d007      	beq.n	8108f2c <TIM_OC6_SetConfig+0x7c>
 8108f1c:	687b      	ldr	r3, [r7, #4]
 8108f1e:	4a15      	ldr	r2, [pc, #84]	; (8108f74 <TIM_OC6_SetConfig+0xc4>)
 8108f20:	4293      	cmp	r3, r2
 8108f22:	d003      	beq.n	8108f2c <TIM_OC6_SetConfig+0x7c>
 8108f24:	687b      	ldr	r3, [r7, #4]
 8108f26:	4a14      	ldr	r2, [pc, #80]	; (8108f78 <TIM_OC6_SetConfig+0xc8>)
 8108f28:	4293      	cmp	r3, r2
 8108f2a:	d109      	bne.n	8108f40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8108f2c:	697b      	ldr	r3, [r7, #20]
 8108f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8108f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8108f34:	683b      	ldr	r3, [r7, #0]
 8108f36:	695b      	ldr	r3, [r3, #20]
 8108f38:	029b      	lsls	r3, r3, #10
 8108f3a:	697a      	ldr	r2, [r7, #20]
 8108f3c:	4313      	orrs	r3, r2
 8108f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108f40:	687b      	ldr	r3, [r7, #4]
 8108f42:	697a      	ldr	r2, [r7, #20]
 8108f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8108f46:	687b      	ldr	r3, [r7, #4]
 8108f48:	68fa      	ldr	r2, [r7, #12]
 8108f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8108f4c:	683b      	ldr	r3, [r7, #0]
 8108f4e:	685a      	ldr	r2, [r3, #4]
 8108f50:	687b      	ldr	r3, [r7, #4]
 8108f52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	693a      	ldr	r2, [r7, #16]
 8108f58:	621a      	str	r2, [r3, #32]
}
 8108f5a:	bf00      	nop
 8108f5c:	371c      	adds	r7, #28
 8108f5e:	46bd      	mov	sp, r7
 8108f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f64:	4770      	bx	lr
 8108f66:	bf00      	nop
 8108f68:	40010000 	.word	0x40010000
 8108f6c:	40010400 	.word	0x40010400
 8108f70:	40014000 	.word	0x40014000
 8108f74:	40014400 	.word	0x40014400
 8108f78:	40014800 	.word	0x40014800

08108f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8108f7c:	b480      	push	{r7}
 8108f7e:	b087      	sub	sp, #28
 8108f80:	af00      	add	r7, sp, #0
 8108f82:	60f8      	str	r0, [r7, #12]
 8108f84:	60b9      	str	r1, [r7, #8]
 8108f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8108f88:	68bb      	ldr	r3, [r7, #8]
 8108f8a:	f003 031f 	and.w	r3, r3, #31
 8108f8e:	2201      	movs	r2, #1
 8108f90:	fa02 f303 	lsl.w	r3, r2, r3
 8108f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8108f96:	68fb      	ldr	r3, [r7, #12]
 8108f98:	6a1a      	ldr	r2, [r3, #32]
 8108f9a:	697b      	ldr	r3, [r7, #20]
 8108f9c:	43db      	mvns	r3, r3
 8108f9e:	401a      	ands	r2, r3
 8108fa0:	68fb      	ldr	r3, [r7, #12]
 8108fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8108fa4:	68fb      	ldr	r3, [r7, #12]
 8108fa6:	6a1a      	ldr	r2, [r3, #32]
 8108fa8:	68bb      	ldr	r3, [r7, #8]
 8108faa:	f003 031f 	and.w	r3, r3, #31
 8108fae:	6879      	ldr	r1, [r7, #4]
 8108fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8108fb4:	431a      	orrs	r2, r3
 8108fb6:	68fb      	ldr	r3, [r7, #12]
 8108fb8:	621a      	str	r2, [r3, #32]
}
 8108fba:	bf00      	nop
 8108fbc:	371c      	adds	r7, #28
 8108fbe:	46bd      	mov	sp, r7
 8108fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fc4:	4770      	bx	lr
	...

08108fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8108fc8:	b480      	push	{r7}
 8108fca:	b085      	sub	sp, #20
 8108fcc:	af00      	add	r7, sp, #0
 8108fce:	6078      	str	r0, [r7, #4]
 8108fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8108fd2:	687b      	ldr	r3, [r7, #4]
 8108fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8108fd8:	2b01      	cmp	r3, #1
 8108fda:	d101      	bne.n	8108fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8108fdc:	2302      	movs	r3, #2
 8108fde:	e06d      	b.n	81090bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8108fe0:	687b      	ldr	r3, [r7, #4]
 8108fe2:	2201      	movs	r2, #1
 8108fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108fe8:	687b      	ldr	r3, [r7, #4]
 8108fea:	2202      	movs	r2, #2
 8108fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8108ff0:	687b      	ldr	r3, [r7, #4]
 8108ff2:	681b      	ldr	r3, [r3, #0]
 8108ff4:	685b      	ldr	r3, [r3, #4]
 8108ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8108ff8:	687b      	ldr	r3, [r7, #4]
 8108ffa:	681b      	ldr	r3, [r3, #0]
 8108ffc:	689b      	ldr	r3, [r3, #8]
 8108ffe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8109000:	687b      	ldr	r3, [r7, #4]
 8109002:	681b      	ldr	r3, [r3, #0]
 8109004:	4a30      	ldr	r2, [pc, #192]	; (81090c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8109006:	4293      	cmp	r3, r2
 8109008:	d004      	beq.n	8109014 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810900a:	687b      	ldr	r3, [r7, #4]
 810900c:	681b      	ldr	r3, [r3, #0]
 810900e:	4a2f      	ldr	r2, [pc, #188]	; (81090cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8109010:	4293      	cmp	r3, r2
 8109012:	d108      	bne.n	8109026 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8109014:	68fb      	ldr	r3, [r7, #12]
 8109016:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810901a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810901c:	683b      	ldr	r3, [r7, #0]
 810901e:	685b      	ldr	r3, [r3, #4]
 8109020:	68fa      	ldr	r2, [r7, #12]
 8109022:	4313      	orrs	r3, r2
 8109024:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8109026:	68fb      	ldr	r3, [r7, #12]
 8109028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810902c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810902e:	683b      	ldr	r3, [r7, #0]
 8109030:	681b      	ldr	r3, [r3, #0]
 8109032:	68fa      	ldr	r2, [r7, #12]
 8109034:	4313      	orrs	r3, r2
 8109036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8109038:	687b      	ldr	r3, [r7, #4]
 810903a:	681b      	ldr	r3, [r3, #0]
 810903c:	68fa      	ldr	r2, [r7, #12]
 810903e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109040:	687b      	ldr	r3, [r7, #4]
 8109042:	681b      	ldr	r3, [r3, #0]
 8109044:	4a20      	ldr	r2, [pc, #128]	; (81090c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8109046:	4293      	cmp	r3, r2
 8109048:	d022      	beq.n	8109090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810904a:	687b      	ldr	r3, [r7, #4]
 810904c:	681b      	ldr	r3, [r3, #0]
 810904e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109052:	d01d      	beq.n	8109090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109054:	687b      	ldr	r3, [r7, #4]
 8109056:	681b      	ldr	r3, [r3, #0]
 8109058:	4a1d      	ldr	r2, [pc, #116]	; (81090d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810905a:	4293      	cmp	r3, r2
 810905c:	d018      	beq.n	8109090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810905e:	687b      	ldr	r3, [r7, #4]
 8109060:	681b      	ldr	r3, [r3, #0]
 8109062:	4a1c      	ldr	r2, [pc, #112]	; (81090d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8109064:	4293      	cmp	r3, r2
 8109066:	d013      	beq.n	8109090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109068:	687b      	ldr	r3, [r7, #4]
 810906a:	681b      	ldr	r3, [r3, #0]
 810906c:	4a1a      	ldr	r2, [pc, #104]	; (81090d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810906e:	4293      	cmp	r3, r2
 8109070:	d00e      	beq.n	8109090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109072:	687b      	ldr	r3, [r7, #4]
 8109074:	681b      	ldr	r3, [r3, #0]
 8109076:	4a15      	ldr	r2, [pc, #84]	; (81090cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8109078:	4293      	cmp	r3, r2
 810907a:	d009      	beq.n	8109090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810907c:	687b      	ldr	r3, [r7, #4]
 810907e:	681b      	ldr	r3, [r3, #0]
 8109080:	4a16      	ldr	r2, [pc, #88]	; (81090dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8109082:	4293      	cmp	r3, r2
 8109084:	d004      	beq.n	8109090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109086:	687b      	ldr	r3, [r7, #4]
 8109088:	681b      	ldr	r3, [r3, #0]
 810908a:	4a15      	ldr	r2, [pc, #84]	; (81090e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810908c:	4293      	cmp	r3, r2
 810908e:	d10c      	bne.n	81090aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8109090:	68bb      	ldr	r3, [r7, #8]
 8109092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8109096:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8109098:	683b      	ldr	r3, [r7, #0]
 810909a:	689b      	ldr	r3, [r3, #8]
 810909c:	68ba      	ldr	r2, [r7, #8]
 810909e:	4313      	orrs	r3, r2
 81090a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81090a2:	687b      	ldr	r3, [r7, #4]
 81090a4:	681b      	ldr	r3, [r3, #0]
 81090a6:	68ba      	ldr	r2, [r7, #8]
 81090a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81090aa:	687b      	ldr	r3, [r7, #4]
 81090ac:	2201      	movs	r2, #1
 81090ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81090b2:	687b      	ldr	r3, [r7, #4]
 81090b4:	2200      	movs	r2, #0
 81090b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81090ba:	2300      	movs	r3, #0
}
 81090bc:	4618      	mov	r0, r3
 81090be:	3714      	adds	r7, #20
 81090c0:	46bd      	mov	sp, r7
 81090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090c6:	4770      	bx	lr
 81090c8:	40010000 	.word	0x40010000
 81090cc:	40010400 	.word	0x40010400
 81090d0:	40000400 	.word	0x40000400
 81090d4:	40000800 	.word	0x40000800
 81090d8:	40000c00 	.word	0x40000c00
 81090dc:	40001800 	.word	0x40001800
 81090e0:	40014000 	.word	0x40014000

081090e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81090e4:	b480      	push	{r7}
 81090e6:	b083      	sub	sp, #12
 81090e8:	af00      	add	r7, sp, #0
 81090ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81090ec:	bf00      	nop
 81090ee:	370c      	adds	r7, #12
 81090f0:	46bd      	mov	sp, r7
 81090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090f6:	4770      	bx	lr

081090f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81090f8:	b480      	push	{r7}
 81090fa:	b083      	sub	sp, #12
 81090fc:	af00      	add	r7, sp, #0
 81090fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8109100:	bf00      	nop
 8109102:	370c      	adds	r7, #12
 8109104:	46bd      	mov	sp, r7
 8109106:	f85d 7b04 	ldr.w	r7, [sp], #4
 810910a:	4770      	bx	lr

0810910c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810910c:	b480      	push	{r7}
 810910e:	b083      	sub	sp, #12
 8109110:	af00      	add	r7, sp, #0
 8109112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109114:	bf00      	nop
 8109116:	370c      	adds	r7, #12
 8109118:	46bd      	mov	sp, r7
 810911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810911e:	4770      	bx	lr

08109120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8109120:	b580      	push	{r7, lr}
 8109122:	b082      	sub	sp, #8
 8109124:	af00      	add	r7, sp, #0
 8109126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8109128:	687b      	ldr	r3, [r7, #4]
 810912a:	2b00      	cmp	r3, #0
 810912c:	d101      	bne.n	8109132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810912e:	2301      	movs	r3, #1
 8109130:	e042      	b.n	81091b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8109132:	687b      	ldr	r3, [r7, #4]
 8109134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109138:	2b00      	cmp	r3, #0
 810913a:	d106      	bne.n	810914a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810913c:	687b      	ldr	r3, [r7, #4]
 810913e:	2200      	movs	r2, #0
 8109140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8109144:	6878      	ldr	r0, [r7, #4]
 8109146:	f7f9 fde5 	bl	8102d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810914a:	687b      	ldr	r3, [r7, #4]
 810914c:	2224      	movs	r2, #36	; 0x24
 810914e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8109152:	687b      	ldr	r3, [r7, #4]
 8109154:	681b      	ldr	r3, [r3, #0]
 8109156:	681a      	ldr	r2, [r3, #0]
 8109158:	687b      	ldr	r3, [r7, #4]
 810915a:	681b      	ldr	r3, [r3, #0]
 810915c:	f022 0201 	bic.w	r2, r2, #1
 8109160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8109162:	6878      	ldr	r0, [r7, #4]
 8109164:	f000 f8c2 	bl	81092ec <UART_SetConfig>
 8109168:	4603      	mov	r3, r0
 810916a:	2b01      	cmp	r3, #1
 810916c:	d101      	bne.n	8109172 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810916e:	2301      	movs	r3, #1
 8109170:	e022      	b.n	81091b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8109172:	687b      	ldr	r3, [r7, #4]
 8109174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109176:	2b00      	cmp	r3, #0
 8109178:	d002      	beq.n	8109180 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810917a:	6878      	ldr	r0, [r7, #4]
 810917c:	f000 fe1e 	bl	8109dbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8109180:	687b      	ldr	r3, [r7, #4]
 8109182:	681b      	ldr	r3, [r3, #0]
 8109184:	685a      	ldr	r2, [r3, #4]
 8109186:	687b      	ldr	r3, [r7, #4]
 8109188:	681b      	ldr	r3, [r3, #0]
 810918a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810918e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8109190:	687b      	ldr	r3, [r7, #4]
 8109192:	681b      	ldr	r3, [r3, #0]
 8109194:	689a      	ldr	r2, [r3, #8]
 8109196:	687b      	ldr	r3, [r7, #4]
 8109198:	681b      	ldr	r3, [r3, #0]
 810919a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810919e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81091a0:	687b      	ldr	r3, [r7, #4]
 81091a2:	681b      	ldr	r3, [r3, #0]
 81091a4:	681a      	ldr	r2, [r3, #0]
 81091a6:	687b      	ldr	r3, [r7, #4]
 81091a8:	681b      	ldr	r3, [r3, #0]
 81091aa:	f042 0201 	orr.w	r2, r2, #1
 81091ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81091b0:	6878      	ldr	r0, [r7, #4]
 81091b2:	f000 fea5 	bl	8109f00 <UART_CheckIdleState>
 81091b6:	4603      	mov	r3, r0
}
 81091b8:	4618      	mov	r0, r3
 81091ba:	3708      	adds	r7, #8
 81091bc:	46bd      	mov	sp, r7
 81091be:	bd80      	pop	{r7, pc}

081091c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81091c0:	b580      	push	{r7, lr}
 81091c2:	b08a      	sub	sp, #40	; 0x28
 81091c4:	af02      	add	r7, sp, #8
 81091c6:	60f8      	str	r0, [r7, #12]
 81091c8:	60b9      	str	r1, [r7, #8]
 81091ca:	603b      	str	r3, [r7, #0]
 81091cc:	4613      	mov	r3, r2
 81091ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81091d0:	68fb      	ldr	r3, [r7, #12]
 81091d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81091d6:	2b20      	cmp	r3, #32
 81091d8:	f040 8083 	bne.w	81092e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 81091dc:	68bb      	ldr	r3, [r7, #8]
 81091de:	2b00      	cmp	r3, #0
 81091e0:	d002      	beq.n	81091e8 <HAL_UART_Transmit+0x28>
 81091e2:	88fb      	ldrh	r3, [r7, #6]
 81091e4:	2b00      	cmp	r3, #0
 81091e6:	d101      	bne.n	81091ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 81091e8:	2301      	movs	r3, #1
 81091ea:	e07b      	b.n	81092e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 81091ec:	68fb      	ldr	r3, [r7, #12]
 81091ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81091f2:	2b01      	cmp	r3, #1
 81091f4:	d101      	bne.n	81091fa <HAL_UART_Transmit+0x3a>
 81091f6:	2302      	movs	r3, #2
 81091f8:	e074      	b.n	81092e4 <HAL_UART_Transmit+0x124>
 81091fa:	68fb      	ldr	r3, [r7, #12]
 81091fc:	2201      	movs	r2, #1
 81091fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109202:	68fb      	ldr	r3, [r7, #12]
 8109204:	2200      	movs	r2, #0
 8109206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810920a:	68fb      	ldr	r3, [r7, #12]
 810920c:	2221      	movs	r2, #33	; 0x21
 810920e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8109212:	f7f9 ff6d 	bl	81030f0 <HAL_GetTick>
 8109216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8109218:	68fb      	ldr	r3, [r7, #12]
 810921a:	88fa      	ldrh	r2, [r7, #6]
 810921c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8109220:	68fb      	ldr	r3, [r7, #12]
 8109222:	88fa      	ldrh	r2, [r7, #6]
 8109224:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8109228:	68fb      	ldr	r3, [r7, #12]
 810922a:	689b      	ldr	r3, [r3, #8]
 810922c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109230:	d108      	bne.n	8109244 <HAL_UART_Transmit+0x84>
 8109232:	68fb      	ldr	r3, [r7, #12]
 8109234:	691b      	ldr	r3, [r3, #16]
 8109236:	2b00      	cmp	r3, #0
 8109238:	d104      	bne.n	8109244 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 810923a:	2300      	movs	r3, #0
 810923c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810923e:	68bb      	ldr	r3, [r7, #8]
 8109240:	61bb      	str	r3, [r7, #24]
 8109242:	e003      	b.n	810924c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8109244:	68bb      	ldr	r3, [r7, #8]
 8109246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8109248:	2300      	movs	r3, #0
 810924a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 810924c:	68fb      	ldr	r3, [r7, #12]
 810924e:	2200      	movs	r2, #0
 8109250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8109254:	e02c      	b.n	81092b0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8109256:	683b      	ldr	r3, [r7, #0]
 8109258:	9300      	str	r3, [sp, #0]
 810925a:	697b      	ldr	r3, [r7, #20]
 810925c:	2200      	movs	r2, #0
 810925e:	2180      	movs	r1, #128	; 0x80
 8109260:	68f8      	ldr	r0, [r7, #12]
 8109262:	f000 fe98 	bl	8109f96 <UART_WaitOnFlagUntilTimeout>
 8109266:	4603      	mov	r3, r0
 8109268:	2b00      	cmp	r3, #0
 810926a:	d001      	beq.n	8109270 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 810926c:	2303      	movs	r3, #3
 810926e:	e039      	b.n	81092e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8109270:	69fb      	ldr	r3, [r7, #28]
 8109272:	2b00      	cmp	r3, #0
 8109274:	d10b      	bne.n	810928e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8109276:	69bb      	ldr	r3, [r7, #24]
 8109278:	881b      	ldrh	r3, [r3, #0]
 810927a:	461a      	mov	r2, r3
 810927c:	68fb      	ldr	r3, [r7, #12]
 810927e:	681b      	ldr	r3, [r3, #0]
 8109280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8109284:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8109286:	69bb      	ldr	r3, [r7, #24]
 8109288:	3302      	adds	r3, #2
 810928a:	61bb      	str	r3, [r7, #24]
 810928c:	e007      	b.n	810929e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810928e:	69fb      	ldr	r3, [r7, #28]
 8109290:	781a      	ldrb	r2, [r3, #0]
 8109292:	68fb      	ldr	r3, [r7, #12]
 8109294:	681b      	ldr	r3, [r3, #0]
 8109296:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8109298:	69fb      	ldr	r3, [r7, #28]
 810929a:	3301      	adds	r3, #1
 810929c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810929e:	68fb      	ldr	r3, [r7, #12]
 81092a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81092a4:	b29b      	uxth	r3, r3
 81092a6:	3b01      	subs	r3, #1
 81092a8:	b29a      	uxth	r2, r3
 81092aa:	68fb      	ldr	r3, [r7, #12]
 81092ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81092b0:	68fb      	ldr	r3, [r7, #12]
 81092b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81092b6:	b29b      	uxth	r3, r3
 81092b8:	2b00      	cmp	r3, #0
 81092ba:	d1cc      	bne.n	8109256 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81092bc:	683b      	ldr	r3, [r7, #0]
 81092be:	9300      	str	r3, [sp, #0]
 81092c0:	697b      	ldr	r3, [r7, #20]
 81092c2:	2200      	movs	r2, #0
 81092c4:	2140      	movs	r1, #64	; 0x40
 81092c6:	68f8      	ldr	r0, [r7, #12]
 81092c8:	f000 fe65 	bl	8109f96 <UART_WaitOnFlagUntilTimeout>
 81092cc:	4603      	mov	r3, r0
 81092ce:	2b00      	cmp	r3, #0
 81092d0:	d001      	beq.n	81092d6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 81092d2:	2303      	movs	r3, #3
 81092d4:	e006      	b.n	81092e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81092d6:	68fb      	ldr	r3, [r7, #12]
 81092d8:	2220      	movs	r2, #32
 81092da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 81092de:	2300      	movs	r3, #0
 81092e0:	e000      	b.n	81092e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 81092e2:	2302      	movs	r3, #2
  }
}
 81092e4:	4618      	mov	r0, r3
 81092e6:	3720      	adds	r7, #32
 81092e8:	46bd      	mov	sp, r7
 81092ea:	bd80      	pop	{r7, pc}

081092ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81092ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81092f0:	b092      	sub	sp, #72	; 0x48
 81092f2:	af00      	add	r7, sp, #0
 81092f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81092f6:	2300      	movs	r3, #0
 81092f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81092fc:	697b      	ldr	r3, [r7, #20]
 81092fe:	689a      	ldr	r2, [r3, #8]
 8109300:	697b      	ldr	r3, [r7, #20]
 8109302:	691b      	ldr	r3, [r3, #16]
 8109304:	431a      	orrs	r2, r3
 8109306:	697b      	ldr	r3, [r7, #20]
 8109308:	695b      	ldr	r3, [r3, #20]
 810930a:	431a      	orrs	r2, r3
 810930c:	697b      	ldr	r3, [r7, #20]
 810930e:	69db      	ldr	r3, [r3, #28]
 8109310:	4313      	orrs	r3, r2
 8109312:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8109314:	697b      	ldr	r3, [r7, #20]
 8109316:	681b      	ldr	r3, [r3, #0]
 8109318:	681a      	ldr	r2, [r3, #0]
 810931a:	4bbd      	ldr	r3, [pc, #756]	; (8109610 <UART_SetConfig+0x324>)
 810931c:	4013      	ands	r3, r2
 810931e:	697a      	ldr	r2, [r7, #20]
 8109320:	6812      	ldr	r2, [r2, #0]
 8109322:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109324:	430b      	orrs	r3, r1
 8109326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8109328:	697b      	ldr	r3, [r7, #20]
 810932a:	681b      	ldr	r3, [r3, #0]
 810932c:	685b      	ldr	r3, [r3, #4]
 810932e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8109332:	697b      	ldr	r3, [r7, #20]
 8109334:	68da      	ldr	r2, [r3, #12]
 8109336:	697b      	ldr	r3, [r7, #20]
 8109338:	681b      	ldr	r3, [r3, #0]
 810933a:	430a      	orrs	r2, r1
 810933c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810933e:	697b      	ldr	r3, [r7, #20]
 8109340:	699b      	ldr	r3, [r3, #24]
 8109342:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8109344:	697b      	ldr	r3, [r7, #20]
 8109346:	681b      	ldr	r3, [r3, #0]
 8109348:	4ab2      	ldr	r2, [pc, #712]	; (8109614 <UART_SetConfig+0x328>)
 810934a:	4293      	cmp	r3, r2
 810934c:	d004      	beq.n	8109358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810934e:	697b      	ldr	r3, [r7, #20]
 8109350:	6a1b      	ldr	r3, [r3, #32]
 8109352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8109354:	4313      	orrs	r3, r2
 8109356:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8109358:	697b      	ldr	r3, [r7, #20]
 810935a:	681b      	ldr	r3, [r3, #0]
 810935c:	689b      	ldr	r3, [r3, #8]
 810935e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8109362:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8109366:	697a      	ldr	r2, [r7, #20]
 8109368:	6812      	ldr	r2, [r2, #0]
 810936a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810936c:	430b      	orrs	r3, r1
 810936e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8109370:	697b      	ldr	r3, [r7, #20]
 8109372:	681b      	ldr	r3, [r3, #0]
 8109374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109376:	f023 010f 	bic.w	r1, r3, #15
 810937a:	697b      	ldr	r3, [r7, #20]
 810937c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810937e:	697b      	ldr	r3, [r7, #20]
 8109380:	681b      	ldr	r3, [r3, #0]
 8109382:	430a      	orrs	r2, r1
 8109384:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8109386:	697b      	ldr	r3, [r7, #20]
 8109388:	681b      	ldr	r3, [r3, #0]
 810938a:	4aa3      	ldr	r2, [pc, #652]	; (8109618 <UART_SetConfig+0x32c>)
 810938c:	4293      	cmp	r3, r2
 810938e:	d177      	bne.n	8109480 <UART_SetConfig+0x194>
 8109390:	4ba2      	ldr	r3, [pc, #648]	; (810961c <UART_SetConfig+0x330>)
 8109392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109394:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109398:	2b28      	cmp	r3, #40	; 0x28
 810939a:	d86d      	bhi.n	8109478 <UART_SetConfig+0x18c>
 810939c:	a201      	add	r2, pc, #4	; (adr r2, 81093a4 <UART_SetConfig+0xb8>)
 810939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81093a2:	bf00      	nop
 81093a4:	08109449 	.word	0x08109449
 81093a8:	08109479 	.word	0x08109479
 81093ac:	08109479 	.word	0x08109479
 81093b0:	08109479 	.word	0x08109479
 81093b4:	08109479 	.word	0x08109479
 81093b8:	08109479 	.word	0x08109479
 81093bc:	08109479 	.word	0x08109479
 81093c0:	08109479 	.word	0x08109479
 81093c4:	08109451 	.word	0x08109451
 81093c8:	08109479 	.word	0x08109479
 81093cc:	08109479 	.word	0x08109479
 81093d0:	08109479 	.word	0x08109479
 81093d4:	08109479 	.word	0x08109479
 81093d8:	08109479 	.word	0x08109479
 81093dc:	08109479 	.word	0x08109479
 81093e0:	08109479 	.word	0x08109479
 81093e4:	08109459 	.word	0x08109459
 81093e8:	08109479 	.word	0x08109479
 81093ec:	08109479 	.word	0x08109479
 81093f0:	08109479 	.word	0x08109479
 81093f4:	08109479 	.word	0x08109479
 81093f8:	08109479 	.word	0x08109479
 81093fc:	08109479 	.word	0x08109479
 8109400:	08109479 	.word	0x08109479
 8109404:	08109461 	.word	0x08109461
 8109408:	08109479 	.word	0x08109479
 810940c:	08109479 	.word	0x08109479
 8109410:	08109479 	.word	0x08109479
 8109414:	08109479 	.word	0x08109479
 8109418:	08109479 	.word	0x08109479
 810941c:	08109479 	.word	0x08109479
 8109420:	08109479 	.word	0x08109479
 8109424:	08109469 	.word	0x08109469
 8109428:	08109479 	.word	0x08109479
 810942c:	08109479 	.word	0x08109479
 8109430:	08109479 	.word	0x08109479
 8109434:	08109479 	.word	0x08109479
 8109438:	08109479 	.word	0x08109479
 810943c:	08109479 	.word	0x08109479
 8109440:	08109479 	.word	0x08109479
 8109444:	08109471 	.word	0x08109471
 8109448:	2301      	movs	r3, #1
 810944a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810944e:	e220      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109450:	2304      	movs	r3, #4
 8109452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109456:	e21c      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109458:	2308      	movs	r3, #8
 810945a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810945e:	e218      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109460:	2310      	movs	r3, #16
 8109462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109466:	e214      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109468:	2320      	movs	r3, #32
 810946a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810946e:	e210      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109470:	2340      	movs	r3, #64	; 0x40
 8109472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109476:	e20c      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109478:	2380      	movs	r3, #128	; 0x80
 810947a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810947e:	e208      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109480:	697b      	ldr	r3, [r7, #20]
 8109482:	681b      	ldr	r3, [r3, #0]
 8109484:	4a66      	ldr	r2, [pc, #408]	; (8109620 <UART_SetConfig+0x334>)
 8109486:	4293      	cmp	r3, r2
 8109488:	d130      	bne.n	81094ec <UART_SetConfig+0x200>
 810948a:	4b64      	ldr	r3, [pc, #400]	; (810961c <UART_SetConfig+0x330>)
 810948c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810948e:	f003 0307 	and.w	r3, r3, #7
 8109492:	2b05      	cmp	r3, #5
 8109494:	d826      	bhi.n	81094e4 <UART_SetConfig+0x1f8>
 8109496:	a201      	add	r2, pc, #4	; (adr r2, 810949c <UART_SetConfig+0x1b0>)
 8109498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810949c:	081094b5 	.word	0x081094b5
 81094a0:	081094bd 	.word	0x081094bd
 81094a4:	081094c5 	.word	0x081094c5
 81094a8:	081094cd 	.word	0x081094cd
 81094ac:	081094d5 	.word	0x081094d5
 81094b0:	081094dd 	.word	0x081094dd
 81094b4:	2300      	movs	r3, #0
 81094b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81094ba:	e1ea      	b.n	8109892 <UART_SetConfig+0x5a6>
 81094bc:	2304      	movs	r3, #4
 81094be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81094c2:	e1e6      	b.n	8109892 <UART_SetConfig+0x5a6>
 81094c4:	2308      	movs	r3, #8
 81094c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81094ca:	e1e2      	b.n	8109892 <UART_SetConfig+0x5a6>
 81094cc:	2310      	movs	r3, #16
 81094ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81094d2:	e1de      	b.n	8109892 <UART_SetConfig+0x5a6>
 81094d4:	2320      	movs	r3, #32
 81094d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81094da:	e1da      	b.n	8109892 <UART_SetConfig+0x5a6>
 81094dc:	2340      	movs	r3, #64	; 0x40
 81094de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81094e2:	e1d6      	b.n	8109892 <UART_SetConfig+0x5a6>
 81094e4:	2380      	movs	r3, #128	; 0x80
 81094e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81094ea:	e1d2      	b.n	8109892 <UART_SetConfig+0x5a6>
 81094ec:	697b      	ldr	r3, [r7, #20]
 81094ee:	681b      	ldr	r3, [r3, #0]
 81094f0:	4a4c      	ldr	r2, [pc, #304]	; (8109624 <UART_SetConfig+0x338>)
 81094f2:	4293      	cmp	r3, r2
 81094f4:	d130      	bne.n	8109558 <UART_SetConfig+0x26c>
 81094f6:	4b49      	ldr	r3, [pc, #292]	; (810961c <UART_SetConfig+0x330>)
 81094f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81094fa:	f003 0307 	and.w	r3, r3, #7
 81094fe:	2b05      	cmp	r3, #5
 8109500:	d826      	bhi.n	8109550 <UART_SetConfig+0x264>
 8109502:	a201      	add	r2, pc, #4	; (adr r2, 8109508 <UART_SetConfig+0x21c>)
 8109504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109508:	08109521 	.word	0x08109521
 810950c:	08109529 	.word	0x08109529
 8109510:	08109531 	.word	0x08109531
 8109514:	08109539 	.word	0x08109539
 8109518:	08109541 	.word	0x08109541
 810951c:	08109549 	.word	0x08109549
 8109520:	2300      	movs	r3, #0
 8109522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109526:	e1b4      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109528:	2304      	movs	r3, #4
 810952a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810952e:	e1b0      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109530:	2308      	movs	r3, #8
 8109532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109536:	e1ac      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109538:	2310      	movs	r3, #16
 810953a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810953e:	e1a8      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109540:	2320      	movs	r3, #32
 8109542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109546:	e1a4      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109548:	2340      	movs	r3, #64	; 0x40
 810954a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810954e:	e1a0      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109550:	2380      	movs	r3, #128	; 0x80
 8109552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109556:	e19c      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109558:	697b      	ldr	r3, [r7, #20]
 810955a:	681b      	ldr	r3, [r3, #0]
 810955c:	4a32      	ldr	r2, [pc, #200]	; (8109628 <UART_SetConfig+0x33c>)
 810955e:	4293      	cmp	r3, r2
 8109560:	d130      	bne.n	81095c4 <UART_SetConfig+0x2d8>
 8109562:	4b2e      	ldr	r3, [pc, #184]	; (810961c <UART_SetConfig+0x330>)
 8109564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109566:	f003 0307 	and.w	r3, r3, #7
 810956a:	2b05      	cmp	r3, #5
 810956c:	d826      	bhi.n	81095bc <UART_SetConfig+0x2d0>
 810956e:	a201      	add	r2, pc, #4	; (adr r2, 8109574 <UART_SetConfig+0x288>)
 8109570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109574:	0810958d 	.word	0x0810958d
 8109578:	08109595 	.word	0x08109595
 810957c:	0810959d 	.word	0x0810959d
 8109580:	081095a5 	.word	0x081095a5
 8109584:	081095ad 	.word	0x081095ad
 8109588:	081095b5 	.word	0x081095b5
 810958c:	2300      	movs	r3, #0
 810958e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109592:	e17e      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109594:	2304      	movs	r3, #4
 8109596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810959a:	e17a      	b.n	8109892 <UART_SetConfig+0x5a6>
 810959c:	2308      	movs	r3, #8
 810959e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81095a2:	e176      	b.n	8109892 <UART_SetConfig+0x5a6>
 81095a4:	2310      	movs	r3, #16
 81095a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81095aa:	e172      	b.n	8109892 <UART_SetConfig+0x5a6>
 81095ac:	2320      	movs	r3, #32
 81095ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81095b2:	e16e      	b.n	8109892 <UART_SetConfig+0x5a6>
 81095b4:	2340      	movs	r3, #64	; 0x40
 81095b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81095ba:	e16a      	b.n	8109892 <UART_SetConfig+0x5a6>
 81095bc:	2380      	movs	r3, #128	; 0x80
 81095be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81095c2:	e166      	b.n	8109892 <UART_SetConfig+0x5a6>
 81095c4:	697b      	ldr	r3, [r7, #20]
 81095c6:	681b      	ldr	r3, [r3, #0]
 81095c8:	4a18      	ldr	r2, [pc, #96]	; (810962c <UART_SetConfig+0x340>)
 81095ca:	4293      	cmp	r3, r2
 81095cc:	d140      	bne.n	8109650 <UART_SetConfig+0x364>
 81095ce:	4b13      	ldr	r3, [pc, #76]	; (810961c <UART_SetConfig+0x330>)
 81095d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81095d2:	f003 0307 	and.w	r3, r3, #7
 81095d6:	2b05      	cmp	r3, #5
 81095d8:	d836      	bhi.n	8109648 <UART_SetConfig+0x35c>
 81095da:	a201      	add	r2, pc, #4	; (adr r2, 81095e0 <UART_SetConfig+0x2f4>)
 81095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81095e0:	081095f9 	.word	0x081095f9
 81095e4:	08109601 	.word	0x08109601
 81095e8:	08109609 	.word	0x08109609
 81095ec:	08109631 	.word	0x08109631
 81095f0:	08109639 	.word	0x08109639
 81095f4:	08109641 	.word	0x08109641
 81095f8:	2300      	movs	r3, #0
 81095fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81095fe:	e148      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109600:	2304      	movs	r3, #4
 8109602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109606:	e144      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109608:	2308      	movs	r3, #8
 810960a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810960e:	e140      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109610:	cfff69f3 	.word	0xcfff69f3
 8109614:	58000c00 	.word	0x58000c00
 8109618:	40011000 	.word	0x40011000
 810961c:	58024400 	.word	0x58024400
 8109620:	40004400 	.word	0x40004400
 8109624:	40004800 	.word	0x40004800
 8109628:	40004c00 	.word	0x40004c00
 810962c:	40005000 	.word	0x40005000
 8109630:	2310      	movs	r3, #16
 8109632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109636:	e12c      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109638:	2320      	movs	r3, #32
 810963a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810963e:	e128      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109640:	2340      	movs	r3, #64	; 0x40
 8109642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109646:	e124      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109648:	2380      	movs	r3, #128	; 0x80
 810964a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810964e:	e120      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109650:	697b      	ldr	r3, [r7, #20]
 8109652:	681b      	ldr	r3, [r3, #0]
 8109654:	4acb      	ldr	r2, [pc, #812]	; (8109984 <UART_SetConfig+0x698>)
 8109656:	4293      	cmp	r3, r2
 8109658:	d176      	bne.n	8109748 <UART_SetConfig+0x45c>
 810965a:	4bcb      	ldr	r3, [pc, #812]	; (8109988 <UART_SetConfig+0x69c>)
 810965c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810965e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109662:	2b28      	cmp	r3, #40	; 0x28
 8109664:	d86c      	bhi.n	8109740 <UART_SetConfig+0x454>
 8109666:	a201      	add	r2, pc, #4	; (adr r2, 810966c <UART_SetConfig+0x380>)
 8109668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810966c:	08109711 	.word	0x08109711
 8109670:	08109741 	.word	0x08109741
 8109674:	08109741 	.word	0x08109741
 8109678:	08109741 	.word	0x08109741
 810967c:	08109741 	.word	0x08109741
 8109680:	08109741 	.word	0x08109741
 8109684:	08109741 	.word	0x08109741
 8109688:	08109741 	.word	0x08109741
 810968c:	08109719 	.word	0x08109719
 8109690:	08109741 	.word	0x08109741
 8109694:	08109741 	.word	0x08109741
 8109698:	08109741 	.word	0x08109741
 810969c:	08109741 	.word	0x08109741
 81096a0:	08109741 	.word	0x08109741
 81096a4:	08109741 	.word	0x08109741
 81096a8:	08109741 	.word	0x08109741
 81096ac:	08109721 	.word	0x08109721
 81096b0:	08109741 	.word	0x08109741
 81096b4:	08109741 	.word	0x08109741
 81096b8:	08109741 	.word	0x08109741
 81096bc:	08109741 	.word	0x08109741
 81096c0:	08109741 	.word	0x08109741
 81096c4:	08109741 	.word	0x08109741
 81096c8:	08109741 	.word	0x08109741
 81096cc:	08109729 	.word	0x08109729
 81096d0:	08109741 	.word	0x08109741
 81096d4:	08109741 	.word	0x08109741
 81096d8:	08109741 	.word	0x08109741
 81096dc:	08109741 	.word	0x08109741
 81096e0:	08109741 	.word	0x08109741
 81096e4:	08109741 	.word	0x08109741
 81096e8:	08109741 	.word	0x08109741
 81096ec:	08109731 	.word	0x08109731
 81096f0:	08109741 	.word	0x08109741
 81096f4:	08109741 	.word	0x08109741
 81096f8:	08109741 	.word	0x08109741
 81096fc:	08109741 	.word	0x08109741
 8109700:	08109741 	.word	0x08109741
 8109704:	08109741 	.word	0x08109741
 8109708:	08109741 	.word	0x08109741
 810970c:	08109739 	.word	0x08109739
 8109710:	2301      	movs	r3, #1
 8109712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109716:	e0bc      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109718:	2304      	movs	r3, #4
 810971a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810971e:	e0b8      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109720:	2308      	movs	r3, #8
 8109722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109726:	e0b4      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109728:	2310      	movs	r3, #16
 810972a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810972e:	e0b0      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109730:	2320      	movs	r3, #32
 8109732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109736:	e0ac      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109738:	2340      	movs	r3, #64	; 0x40
 810973a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810973e:	e0a8      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109740:	2380      	movs	r3, #128	; 0x80
 8109742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109746:	e0a4      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109748:	697b      	ldr	r3, [r7, #20]
 810974a:	681b      	ldr	r3, [r3, #0]
 810974c:	4a8f      	ldr	r2, [pc, #572]	; (810998c <UART_SetConfig+0x6a0>)
 810974e:	4293      	cmp	r3, r2
 8109750:	d130      	bne.n	81097b4 <UART_SetConfig+0x4c8>
 8109752:	4b8d      	ldr	r3, [pc, #564]	; (8109988 <UART_SetConfig+0x69c>)
 8109754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109756:	f003 0307 	and.w	r3, r3, #7
 810975a:	2b05      	cmp	r3, #5
 810975c:	d826      	bhi.n	81097ac <UART_SetConfig+0x4c0>
 810975e:	a201      	add	r2, pc, #4	; (adr r2, 8109764 <UART_SetConfig+0x478>)
 8109760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109764:	0810977d 	.word	0x0810977d
 8109768:	08109785 	.word	0x08109785
 810976c:	0810978d 	.word	0x0810978d
 8109770:	08109795 	.word	0x08109795
 8109774:	0810979d 	.word	0x0810979d
 8109778:	081097a5 	.word	0x081097a5
 810977c:	2300      	movs	r3, #0
 810977e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109782:	e086      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109784:	2304      	movs	r3, #4
 8109786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810978a:	e082      	b.n	8109892 <UART_SetConfig+0x5a6>
 810978c:	2308      	movs	r3, #8
 810978e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109792:	e07e      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109794:	2310      	movs	r3, #16
 8109796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810979a:	e07a      	b.n	8109892 <UART_SetConfig+0x5a6>
 810979c:	2320      	movs	r3, #32
 810979e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097a2:	e076      	b.n	8109892 <UART_SetConfig+0x5a6>
 81097a4:	2340      	movs	r3, #64	; 0x40
 81097a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097aa:	e072      	b.n	8109892 <UART_SetConfig+0x5a6>
 81097ac:	2380      	movs	r3, #128	; 0x80
 81097ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097b2:	e06e      	b.n	8109892 <UART_SetConfig+0x5a6>
 81097b4:	697b      	ldr	r3, [r7, #20]
 81097b6:	681b      	ldr	r3, [r3, #0]
 81097b8:	4a75      	ldr	r2, [pc, #468]	; (8109990 <UART_SetConfig+0x6a4>)
 81097ba:	4293      	cmp	r3, r2
 81097bc:	d130      	bne.n	8109820 <UART_SetConfig+0x534>
 81097be:	4b72      	ldr	r3, [pc, #456]	; (8109988 <UART_SetConfig+0x69c>)
 81097c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81097c2:	f003 0307 	and.w	r3, r3, #7
 81097c6:	2b05      	cmp	r3, #5
 81097c8:	d826      	bhi.n	8109818 <UART_SetConfig+0x52c>
 81097ca:	a201      	add	r2, pc, #4	; (adr r2, 81097d0 <UART_SetConfig+0x4e4>)
 81097cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81097d0:	081097e9 	.word	0x081097e9
 81097d4:	081097f1 	.word	0x081097f1
 81097d8:	081097f9 	.word	0x081097f9
 81097dc:	08109801 	.word	0x08109801
 81097e0:	08109809 	.word	0x08109809
 81097e4:	08109811 	.word	0x08109811
 81097e8:	2300      	movs	r3, #0
 81097ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097ee:	e050      	b.n	8109892 <UART_SetConfig+0x5a6>
 81097f0:	2304      	movs	r3, #4
 81097f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097f6:	e04c      	b.n	8109892 <UART_SetConfig+0x5a6>
 81097f8:	2308      	movs	r3, #8
 81097fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097fe:	e048      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109800:	2310      	movs	r3, #16
 8109802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109806:	e044      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109808:	2320      	movs	r3, #32
 810980a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810980e:	e040      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109810:	2340      	movs	r3, #64	; 0x40
 8109812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109816:	e03c      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109818:	2380      	movs	r3, #128	; 0x80
 810981a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810981e:	e038      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109820:	697b      	ldr	r3, [r7, #20]
 8109822:	681b      	ldr	r3, [r3, #0]
 8109824:	4a5b      	ldr	r2, [pc, #364]	; (8109994 <UART_SetConfig+0x6a8>)
 8109826:	4293      	cmp	r3, r2
 8109828:	d130      	bne.n	810988c <UART_SetConfig+0x5a0>
 810982a:	4b57      	ldr	r3, [pc, #348]	; (8109988 <UART_SetConfig+0x69c>)
 810982c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810982e:	f003 0307 	and.w	r3, r3, #7
 8109832:	2b05      	cmp	r3, #5
 8109834:	d826      	bhi.n	8109884 <UART_SetConfig+0x598>
 8109836:	a201      	add	r2, pc, #4	; (adr r2, 810983c <UART_SetConfig+0x550>)
 8109838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810983c:	08109855 	.word	0x08109855
 8109840:	0810985d 	.word	0x0810985d
 8109844:	08109865 	.word	0x08109865
 8109848:	0810986d 	.word	0x0810986d
 810984c:	08109875 	.word	0x08109875
 8109850:	0810987d 	.word	0x0810987d
 8109854:	2302      	movs	r3, #2
 8109856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810985a:	e01a      	b.n	8109892 <UART_SetConfig+0x5a6>
 810985c:	2304      	movs	r3, #4
 810985e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109862:	e016      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109864:	2308      	movs	r3, #8
 8109866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810986a:	e012      	b.n	8109892 <UART_SetConfig+0x5a6>
 810986c:	2310      	movs	r3, #16
 810986e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109872:	e00e      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109874:	2320      	movs	r3, #32
 8109876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810987a:	e00a      	b.n	8109892 <UART_SetConfig+0x5a6>
 810987c:	2340      	movs	r3, #64	; 0x40
 810987e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109882:	e006      	b.n	8109892 <UART_SetConfig+0x5a6>
 8109884:	2380      	movs	r3, #128	; 0x80
 8109886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810988a:	e002      	b.n	8109892 <UART_SetConfig+0x5a6>
 810988c:	2380      	movs	r3, #128	; 0x80
 810988e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8109892:	697b      	ldr	r3, [r7, #20]
 8109894:	681b      	ldr	r3, [r3, #0]
 8109896:	4a3f      	ldr	r2, [pc, #252]	; (8109994 <UART_SetConfig+0x6a8>)
 8109898:	4293      	cmp	r3, r2
 810989a:	f040 80f8 	bne.w	8109a8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810989e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81098a2:	2b20      	cmp	r3, #32
 81098a4:	dc46      	bgt.n	8109934 <UART_SetConfig+0x648>
 81098a6:	2b02      	cmp	r3, #2
 81098a8:	f2c0 8082 	blt.w	81099b0 <UART_SetConfig+0x6c4>
 81098ac:	3b02      	subs	r3, #2
 81098ae:	2b1e      	cmp	r3, #30
 81098b0:	d87e      	bhi.n	81099b0 <UART_SetConfig+0x6c4>
 81098b2:	a201      	add	r2, pc, #4	; (adr r2, 81098b8 <UART_SetConfig+0x5cc>)
 81098b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81098b8:	0810993b 	.word	0x0810993b
 81098bc:	081099b1 	.word	0x081099b1
 81098c0:	08109943 	.word	0x08109943
 81098c4:	081099b1 	.word	0x081099b1
 81098c8:	081099b1 	.word	0x081099b1
 81098cc:	081099b1 	.word	0x081099b1
 81098d0:	08109953 	.word	0x08109953
 81098d4:	081099b1 	.word	0x081099b1
 81098d8:	081099b1 	.word	0x081099b1
 81098dc:	081099b1 	.word	0x081099b1
 81098e0:	081099b1 	.word	0x081099b1
 81098e4:	081099b1 	.word	0x081099b1
 81098e8:	081099b1 	.word	0x081099b1
 81098ec:	081099b1 	.word	0x081099b1
 81098f0:	08109963 	.word	0x08109963
 81098f4:	081099b1 	.word	0x081099b1
 81098f8:	081099b1 	.word	0x081099b1
 81098fc:	081099b1 	.word	0x081099b1
 8109900:	081099b1 	.word	0x081099b1
 8109904:	081099b1 	.word	0x081099b1
 8109908:	081099b1 	.word	0x081099b1
 810990c:	081099b1 	.word	0x081099b1
 8109910:	081099b1 	.word	0x081099b1
 8109914:	081099b1 	.word	0x081099b1
 8109918:	081099b1 	.word	0x081099b1
 810991c:	081099b1 	.word	0x081099b1
 8109920:	081099b1 	.word	0x081099b1
 8109924:	081099b1 	.word	0x081099b1
 8109928:	081099b1 	.word	0x081099b1
 810992c:	081099b1 	.word	0x081099b1
 8109930:	081099a3 	.word	0x081099a3
 8109934:	2b40      	cmp	r3, #64	; 0x40
 8109936:	d037      	beq.n	81099a8 <UART_SetConfig+0x6bc>
 8109938:	e03a      	b.n	81099b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810993a:	f7fd fc55 	bl	81071e8 <HAL_RCCEx_GetD3PCLK1Freq>
 810993e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109940:	e03c      	b.n	81099bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109946:	4618      	mov	r0, r3
 8109948:	f7fd fc64 	bl	8107214 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810994e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109950:	e034      	b.n	81099bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109952:	f107 0318 	add.w	r3, r7, #24
 8109956:	4618      	mov	r0, r3
 8109958:	f7fd fdb0 	bl	81074bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810995c:	69fb      	ldr	r3, [r7, #28]
 810995e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109960:	e02c      	b.n	81099bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109962:	4b09      	ldr	r3, [pc, #36]	; (8109988 <UART_SetConfig+0x69c>)
 8109964:	681b      	ldr	r3, [r3, #0]
 8109966:	f003 0320 	and.w	r3, r3, #32
 810996a:	2b00      	cmp	r3, #0
 810996c:	d016      	beq.n	810999c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810996e:	4b06      	ldr	r3, [pc, #24]	; (8109988 <UART_SetConfig+0x69c>)
 8109970:	681b      	ldr	r3, [r3, #0]
 8109972:	08db      	lsrs	r3, r3, #3
 8109974:	f003 0303 	and.w	r3, r3, #3
 8109978:	4a07      	ldr	r2, [pc, #28]	; (8109998 <UART_SetConfig+0x6ac>)
 810997a:	fa22 f303 	lsr.w	r3, r2, r3
 810997e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109980:	e01c      	b.n	81099bc <UART_SetConfig+0x6d0>
 8109982:	bf00      	nop
 8109984:	40011400 	.word	0x40011400
 8109988:	58024400 	.word	0x58024400
 810998c:	40007800 	.word	0x40007800
 8109990:	40007c00 	.word	0x40007c00
 8109994:	58000c00 	.word	0x58000c00
 8109998:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810999c:	4b9d      	ldr	r3, [pc, #628]	; (8109c14 <UART_SetConfig+0x928>)
 810999e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81099a0:	e00c      	b.n	81099bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81099a2:	4b9d      	ldr	r3, [pc, #628]	; (8109c18 <UART_SetConfig+0x92c>)
 81099a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81099a6:	e009      	b.n	81099bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81099a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81099ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81099ae:	e005      	b.n	81099bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81099b0:	2300      	movs	r3, #0
 81099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81099b4:	2301      	movs	r3, #1
 81099b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81099ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81099bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81099be:	2b00      	cmp	r3, #0
 81099c0:	f000 81de 	beq.w	8109d80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81099c4:	697b      	ldr	r3, [r7, #20]
 81099c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81099c8:	4a94      	ldr	r2, [pc, #592]	; (8109c1c <UART_SetConfig+0x930>)
 81099ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81099ce:	461a      	mov	r2, r3
 81099d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81099d2:	fbb3 f3f2 	udiv	r3, r3, r2
 81099d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81099d8:	697b      	ldr	r3, [r7, #20]
 81099da:	685a      	ldr	r2, [r3, #4]
 81099dc:	4613      	mov	r3, r2
 81099de:	005b      	lsls	r3, r3, #1
 81099e0:	4413      	add	r3, r2
 81099e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81099e4:	429a      	cmp	r2, r3
 81099e6:	d305      	bcc.n	81099f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81099e8:	697b      	ldr	r3, [r7, #20]
 81099ea:	685b      	ldr	r3, [r3, #4]
 81099ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81099ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81099f0:	429a      	cmp	r2, r3
 81099f2:	d903      	bls.n	81099fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81099f4:	2301      	movs	r3, #1
 81099f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81099fa:	e1c1      	b.n	8109d80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81099fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81099fe:	2200      	movs	r2, #0
 8109a00:	60bb      	str	r3, [r7, #8]
 8109a02:	60fa      	str	r2, [r7, #12]
 8109a04:	697b      	ldr	r3, [r7, #20]
 8109a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109a08:	4a84      	ldr	r2, [pc, #528]	; (8109c1c <UART_SetConfig+0x930>)
 8109a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109a0e:	b29b      	uxth	r3, r3
 8109a10:	2200      	movs	r2, #0
 8109a12:	603b      	str	r3, [r7, #0]
 8109a14:	607a      	str	r2, [r7, #4]
 8109a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109a1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8109a1e:	f7f6 ff1b 	bl	8100858 <__aeabi_uldivmod>
 8109a22:	4602      	mov	r2, r0
 8109a24:	460b      	mov	r3, r1
 8109a26:	4610      	mov	r0, r2
 8109a28:	4619      	mov	r1, r3
 8109a2a:	f04f 0200 	mov.w	r2, #0
 8109a2e:	f04f 0300 	mov.w	r3, #0
 8109a32:	020b      	lsls	r3, r1, #8
 8109a34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8109a38:	0202      	lsls	r2, r0, #8
 8109a3a:	6979      	ldr	r1, [r7, #20]
 8109a3c:	6849      	ldr	r1, [r1, #4]
 8109a3e:	0849      	lsrs	r1, r1, #1
 8109a40:	2000      	movs	r0, #0
 8109a42:	460c      	mov	r4, r1
 8109a44:	4605      	mov	r5, r0
 8109a46:	eb12 0804 	adds.w	r8, r2, r4
 8109a4a:	eb43 0905 	adc.w	r9, r3, r5
 8109a4e:	697b      	ldr	r3, [r7, #20]
 8109a50:	685b      	ldr	r3, [r3, #4]
 8109a52:	2200      	movs	r2, #0
 8109a54:	469a      	mov	sl, r3
 8109a56:	4693      	mov	fp, r2
 8109a58:	4652      	mov	r2, sl
 8109a5a:	465b      	mov	r3, fp
 8109a5c:	4640      	mov	r0, r8
 8109a5e:	4649      	mov	r1, r9
 8109a60:	f7f6 fefa 	bl	8100858 <__aeabi_uldivmod>
 8109a64:	4602      	mov	r2, r0
 8109a66:	460b      	mov	r3, r1
 8109a68:	4613      	mov	r3, r2
 8109a6a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8109a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109a72:	d308      	bcc.n	8109a86 <UART_SetConfig+0x79a>
 8109a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109a7a:	d204      	bcs.n	8109a86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8109a7c:	697b      	ldr	r3, [r7, #20]
 8109a7e:	681b      	ldr	r3, [r3, #0]
 8109a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8109a82:	60da      	str	r2, [r3, #12]
 8109a84:	e17c      	b.n	8109d80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8109a86:	2301      	movs	r3, #1
 8109a88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109a8c:	e178      	b.n	8109d80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8109a8e:	697b      	ldr	r3, [r7, #20]
 8109a90:	69db      	ldr	r3, [r3, #28]
 8109a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109a96:	f040 80c5 	bne.w	8109c24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8109a9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109a9e:	2b20      	cmp	r3, #32
 8109aa0:	dc48      	bgt.n	8109b34 <UART_SetConfig+0x848>
 8109aa2:	2b00      	cmp	r3, #0
 8109aa4:	db7b      	blt.n	8109b9e <UART_SetConfig+0x8b2>
 8109aa6:	2b20      	cmp	r3, #32
 8109aa8:	d879      	bhi.n	8109b9e <UART_SetConfig+0x8b2>
 8109aaa:	a201      	add	r2, pc, #4	; (adr r2, 8109ab0 <UART_SetConfig+0x7c4>)
 8109aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109ab0:	08109b3b 	.word	0x08109b3b
 8109ab4:	08109b43 	.word	0x08109b43
 8109ab8:	08109b9f 	.word	0x08109b9f
 8109abc:	08109b9f 	.word	0x08109b9f
 8109ac0:	08109b4b 	.word	0x08109b4b
 8109ac4:	08109b9f 	.word	0x08109b9f
 8109ac8:	08109b9f 	.word	0x08109b9f
 8109acc:	08109b9f 	.word	0x08109b9f
 8109ad0:	08109b5b 	.word	0x08109b5b
 8109ad4:	08109b9f 	.word	0x08109b9f
 8109ad8:	08109b9f 	.word	0x08109b9f
 8109adc:	08109b9f 	.word	0x08109b9f
 8109ae0:	08109b9f 	.word	0x08109b9f
 8109ae4:	08109b9f 	.word	0x08109b9f
 8109ae8:	08109b9f 	.word	0x08109b9f
 8109aec:	08109b9f 	.word	0x08109b9f
 8109af0:	08109b6b 	.word	0x08109b6b
 8109af4:	08109b9f 	.word	0x08109b9f
 8109af8:	08109b9f 	.word	0x08109b9f
 8109afc:	08109b9f 	.word	0x08109b9f
 8109b00:	08109b9f 	.word	0x08109b9f
 8109b04:	08109b9f 	.word	0x08109b9f
 8109b08:	08109b9f 	.word	0x08109b9f
 8109b0c:	08109b9f 	.word	0x08109b9f
 8109b10:	08109b9f 	.word	0x08109b9f
 8109b14:	08109b9f 	.word	0x08109b9f
 8109b18:	08109b9f 	.word	0x08109b9f
 8109b1c:	08109b9f 	.word	0x08109b9f
 8109b20:	08109b9f 	.word	0x08109b9f
 8109b24:	08109b9f 	.word	0x08109b9f
 8109b28:	08109b9f 	.word	0x08109b9f
 8109b2c:	08109b9f 	.word	0x08109b9f
 8109b30:	08109b91 	.word	0x08109b91
 8109b34:	2b40      	cmp	r3, #64	; 0x40
 8109b36:	d02e      	beq.n	8109b96 <UART_SetConfig+0x8aa>
 8109b38:	e031      	b.n	8109b9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109b3a:	f7fb ff11 	bl	8105960 <HAL_RCC_GetPCLK1Freq>
 8109b3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109b40:	e033      	b.n	8109baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109b42:	f7fb ff23 	bl	810598c <HAL_RCC_GetPCLK2Freq>
 8109b46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109b48:	e02f      	b.n	8109baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109b4e:	4618      	mov	r0, r3
 8109b50:	f7fd fb60 	bl	8107214 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b58:	e027      	b.n	8109baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109b5a:	f107 0318 	add.w	r3, r7, #24
 8109b5e:	4618      	mov	r0, r3
 8109b60:	f7fd fcac 	bl	81074bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109b64:	69fb      	ldr	r3, [r7, #28]
 8109b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b68:	e01f      	b.n	8109baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109b6a:	4b2d      	ldr	r3, [pc, #180]	; (8109c20 <UART_SetConfig+0x934>)
 8109b6c:	681b      	ldr	r3, [r3, #0]
 8109b6e:	f003 0320 	and.w	r3, r3, #32
 8109b72:	2b00      	cmp	r3, #0
 8109b74:	d009      	beq.n	8109b8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109b76:	4b2a      	ldr	r3, [pc, #168]	; (8109c20 <UART_SetConfig+0x934>)
 8109b78:	681b      	ldr	r3, [r3, #0]
 8109b7a:	08db      	lsrs	r3, r3, #3
 8109b7c:	f003 0303 	and.w	r3, r3, #3
 8109b80:	4a24      	ldr	r2, [pc, #144]	; (8109c14 <UART_SetConfig+0x928>)
 8109b82:	fa22 f303 	lsr.w	r3, r2, r3
 8109b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109b88:	e00f      	b.n	8109baa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8109b8a:	4b22      	ldr	r3, [pc, #136]	; (8109c14 <UART_SetConfig+0x928>)
 8109b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b8e:	e00c      	b.n	8109baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109b90:	4b21      	ldr	r3, [pc, #132]	; (8109c18 <UART_SetConfig+0x92c>)
 8109b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b94:	e009      	b.n	8109baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b9c:	e005      	b.n	8109baa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8109b9e:	2300      	movs	r3, #0
 8109ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109ba2:	2301      	movs	r3, #1
 8109ba4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8109baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109bac:	2b00      	cmp	r3, #0
 8109bae:	f000 80e7 	beq.w	8109d80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109bb2:	697b      	ldr	r3, [r7, #20]
 8109bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109bb6:	4a19      	ldr	r2, [pc, #100]	; (8109c1c <UART_SetConfig+0x930>)
 8109bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109bbc:	461a      	mov	r2, r3
 8109bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8109bc4:	005a      	lsls	r2, r3, #1
 8109bc6:	697b      	ldr	r3, [r7, #20]
 8109bc8:	685b      	ldr	r3, [r3, #4]
 8109bca:	085b      	lsrs	r3, r3, #1
 8109bcc:	441a      	add	r2, r3
 8109bce:	697b      	ldr	r3, [r7, #20]
 8109bd0:	685b      	ldr	r3, [r3, #4]
 8109bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8109bd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109bda:	2b0f      	cmp	r3, #15
 8109bdc:	d916      	bls.n	8109c0c <UART_SetConfig+0x920>
 8109bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109be4:	d212      	bcs.n	8109c0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8109be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109be8:	b29b      	uxth	r3, r3
 8109bea:	f023 030f 	bic.w	r3, r3, #15
 8109bee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8109bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109bf2:	085b      	lsrs	r3, r3, #1
 8109bf4:	b29b      	uxth	r3, r3
 8109bf6:	f003 0307 	and.w	r3, r3, #7
 8109bfa:	b29a      	uxth	r2, r3
 8109bfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8109bfe:	4313      	orrs	r3, r2
 8109c00:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8109c02:	697b      	ldr	r3, [r7, #20]
 8109c04:	681b      	ldr	r3, [r3, #0]
 8109c06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8109c08:	60da      	str	r2, [r3, #12]
 8109c0a:	e0b9      	b.n	8109d80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109c0c:	2301      	movs	r3, #1
 8109c0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109c12:	e0b5      	b.n	8109d80 <UART_SetConfig+0xa94>
 8109c14:	03d09000 	.word	0x03d09000
 8109c18:	003d0900 	.word	0x003d0900
 8109c1c:	0810b00c 	.word	0x0810b00c
 8109c20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8109c24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109c28:	2b20      	cmp	r3, #32
 8109c2a:	dc49      	bgt.n	8109cc0 <UART_SetConfig+0x9d4>
 8109c2c:	2b00      	cmp	r3, #0
 8109c2e:	db7c      	blt.n	8109d2a <UART_SetConfig+0xa3e>
 8109c30:	2b20      	cmp	r3, #32
 8109c32:	d87a      	bhi.n	8109d2a <UART_SetConfig+0xa3e>
 8109c34:	a201      	add	r2, pc, #4	; (adr r2, 8109c3c <UART_SetConfig+0x950>)
 8109c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109c3a:	bf00      	nop
 8109c3c:	08109cc7 	.word	0x08109cc7
 8109c40:	08109ccf 	.word	0x08109ccf
 8109c44:	08109d2b 	.word	0x08109d2b
 8109c48:	08109d2b 	.word	0x08109d2b
 8109c4c:	08109cd7 	.word	0x08109cd7
 8109c50:	08109d2b 	.word	0x08109d2b
 8109c54:	08109d2b 	.word	0x08109d2b
 8109c58:	08109d2b 	.word	0x08109d2b
 8109c5c:	08109ce7 	.word	0x08109ce7
 8109c60:	08109d2b 	.word	0x08109d2b
 8109c64:	08109d2b 	.word	0x08109d2b
 8109c68:	08109d2b 	.word	0x08109d2b
 8109c6c:	08109d2b 	.word	0x08109d2b
 8109c70:	08109d2b 	.word	0x08109d2b
 8109c74:	08109d2b 	.word	0x08109d2b
 8109c78:	08109d2b 	.word	0x08109d2b
 8109c7c:	08109cf7 	.word	0x08109cf7
 8109c80:	08109d2b 	.word	0x08109d2b
 8109c84:	08109d2b 	.word	0x08109d2b
 8109c88:	08109d2b 	.word	0x08109d2b
 8109c8c:	08109d2b 	.word	0x08109d2b
 8109c90:	08109d2b 	.word	0x08109d2b
 8109c94:	08109d2b 	.word	0x08109d2b
 8109c98:	08109d2b 	.word	0x08109d2b
 8109c9c:	08109d2b 	.word	0x08109d2b
 8109ca0:	08109d2b 	.word	0x08109d2b
 8109ca4:	08109d2b 	.word	0x08109d2b
 8109ca8:	08109d2b 	.word	0x08109d2b
 8109cac:	08109d2b 	.word	0x08109d2b
 8109cb0:	08109d2b 	.word	0x08109d2b
 8109cb4:	08109d2b 	.word	0x08109d2b
 8109cb8:	08109d2b 	.word	0x08109d2b
 8109cbc:	08109d1d 	.word	0x08109d1d
 8109cc0:	2b40      	cmp	r3, #64	; 0x40
 8109cc2:	d02e      	beq.n	8109d22 <UART_SetConfig+0xa36>
 8109cc4:	e031      	b.n	8109d2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109cc6:	f7fb fe4b 	bl	8105960 <HAL_RCC_GetPCLK1Freq>
 8109cca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109ccc:	e033      	b.n	8109d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109cce:	f7fb fe5d 	bl	810598c <HAL_RCC_GetPCLK2Freq>
 8109cd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109cd4:	e02f      	b.n	8109d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109cda:	4618      	mov	r0, r3
 8109cdc:	f7fd fa9a 	bl	8107214 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109ce4:	e027      	b.n	8109d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109ce6:	f107 0318 	add.w	r3, r7, #24
 8109cea:	4618      	mov	r0, r3
 8109cec:	f7fd fbe6 	bl	81074bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109cf0:	69fb      	ldr	r3, [r7, #28]
 8109cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109cf4:	e01f      	b.n	8109d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109cf6:	4b2d      	ldr	r3, [pc, #180]	; (8109dac <UART_SetConfig+0xac0>)
 8109cf8:	681b      	ldr	r3, [r3, #0]
 8109cfa:	f003 0320 	and.w	r3, r3, #32
 8109cfe:	2b00      	cmp	r3, #0
 8109d00:	d009      	beq.n	8109d16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109d02:	4b2a      	ldr	r3, [pc, #168]	; (8109dac <UART_SetConfig+0xac0>)
 8109d04:	681b      	ldr	r3, [r3, #0]
 8109d06:	08db      	lsrs	r3, r3, #3
 8109d08:	f003 0303 	and.w	r3, r3, #3
 8109d0c:	4a28      	ldr	r2, [pc, #160]	; (8109db0 <UART_SetConfig+0xac4>)
 8109d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8109d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109d14:	e00f      	b.n	8109d36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8109d16:	4b26      	ldr	r3, [pc, #152]	; (8109db0 <UART_SetConfig+0xac4>)
 8109d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d1a:	e00c      	b.n	8109d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109d1c:	4b25      	ldr	r3, [pc, #148]	; (8109db4 <UART_SetConfig+0xac8>)
 8109d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d20:	e009      	b.n	8109d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d28:	e005      	b.n	8109d36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8109d2a:	2300      	movs	r3, #0
 8109d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109d2e:	2301      	movs	r3, #1
 8109d30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109d34:	bf00      	nop
    }

    if (pclk != 0U)
 8109d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109d38:	2b00      	cmp	r3, #0
 8109d3a:	d021      	beq.n	8109d80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109d3c:	697b      	ldr	r3, [r7, #20]
 8109d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109d40:	4a1d      	ldr	r2, [pc, #116]	; (8109db8 <UART_SetConfig+0xacc>)
 8109d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109d46:	461a      	mov	r2, r3
 8109d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109d4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8109d4e:	697b      	ldr	r3, [r7, #20]
 8109d50:	685b      	ldr	r3, [r3, #4]
 8109d52:	085b      	lsrs	r3, r3, #1
 8109d54:	441a      	add	r2, r3
 8109d56:	697b      	ldr	r3, [r7, #20]
 8109d58:	685b      	ldr	r3, [r3, #4]
 8109d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8109d5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109d62:	2b0f      	cmp	r3, #15
 8109d64:	d909      	bls.n	8109d7a <UART_SetConfig+0xa8e>
 8109d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109d6c:	d205      	bcs.n	8109d7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8109d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109d70:	b29a      	uxth	r2, r3
 8109d72:	697b      	ldr	r3, [r7, #20]
 8109d74:	681b      	ldr	r3, [r3, #0]
 8109d76:	60da      	str	r2, [r3, #12]
 8109d78:	e002      	b.n	8109d80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109d7a:	2301      	movs	r3, #1
 8109d7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8109d80:	697b      	ldr	r3, [r7, #20]
 8109d82:	2201      	movs	r2, #1
 8109d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8109d88:	697b      	ldr	r3, [r7, #20]
 8109d8a:	2201      	movs	r2, #1
 8109d8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8109d90:	697b      	ldr	r3, [r7, #20]
 8109d92:	2200      	movs	r2, #0
 8109d94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8109d96:	697b      	ldr	r3, [r7, #20]
 8109d98:	2200      	movs	r2, #0
 8109d9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8109d9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8109da0:	4618      	mov	r0, r3
 8109da2:	3748      	adds	r7, #72	; 0x48
 8109da4:	46bd      	mov	sp, r7
 8109da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8109daa:	bf00      	nop
 8109dac:	58024400 	.word	0x58024400
 8109db0:	03d09000 	.word	0x03d09000
 8109db4:	003d0900 	.word	0x003d0900
 8109db8:	0810b00c 	.word	0x0810b00c

08109dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109dbc:	b480      	push	{r7}
 8109dbe:	b083      	sub	sp, #12
 8109dc0:	af00      	add	r7, sp, #0
 8109dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109dc4:	687b      	ldr	r3, [r7, #4]
 8109dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109dc8:	f003 0301 	and.w	r3, r3, #1
 8109dcc:	2b00      	cmp	r3, #0
 8109dce:	d00a      	beq.n	8109de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8109dd0:	687b      	ldr	r3, [r7, #4]
 8109dd2:	681b      	ldr	r3, [r3, #0]
 8109dd4:	685b      	ldr	r3, [r3, #4]
 8109dd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8109dda:	687b      	ldr	r3, [r7, #4]
 8109ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109dde:	687b      	ldr	r3, [r7, #4]
 8109de0:	681b      	ldr	r3, [r3, #0]
 8109de2:	430a      	orrs	r2, r1
 8109de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8109de6:	687b      	ldr	r3, [r7, #4]
 8109de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109dea:	f003 0302 	and.w	r3, r3, #2
 8109dee:	2b00      	cmp	r3, #0
 8109df0:	d00a      	beq.n	8109e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8109df2:	687b      	ldr	r3, [r7, #4]
 8109df4:	681b      	ldr	r3, [r3, #0]
 8109df6:	685b      	ldr	r3, [r3, #4]
 8109df8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8109dfc:	687b      	ldr	r3, [r7, #4]
 8109dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8109e00:	687b      	ldr	r3, [r7, #4]
 8109e02:	681b      	ldr	r3, [r3, #0]
 8109e04:	430a      	orrs	r2, r1
 8109e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8109e08:	687b      	ldr	r3, [r7, #4]
 8109e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109e0c:	f003 0304 	and.w	r3, r3, #4
 8109e10:	2b00      	cmp	r3, #0
 8109e12:	d00a      	beq.n	8109e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8109e14:	687b      	ldr	r3, [r7, #4]
 8109e16:	681b      	ldr	r3, [r3, #0]
 8109e18:	685b      	ldr	r3, [r3, #4]
 8109e1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8109e1e:	687b      	ldr	r3, [r7, #4]
 8109e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109e22:	687b      	ldr	r3, [r7, #4]
 8109e24:	681b      	ldr	r3, [r3, #0]
 8109e26:	430a      	orrs	r2, r1
 8109e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8109e2a:	687b      	ldr	r3, [r7, #4]
 8109e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109e2e:	f003 0308 	and.w	r3, r3, #8
 8109e32:	2b00      	cmp	r3, #0
 8109e34:	d00a      	beq.n	8109e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8109e36:	687b      	ldr	r3, [r7, #4]
 8109e38:	681b      	ldr	r3, [r3, #0]
 8109e3a:	685b      	ldr	r3, [r3, #4]
 8109e3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8109e40:	687b      	ldr	r3, [r7, #4]
 8109e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109e44:	687b      	ldr	r3, [r7, #4]
 8109e46:	681b      	ldr	r3, [r3, #0]
 8109e48:	430a      	orrs	r2, r1
 8109e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8109e4c:	687b      	ldr	r3, [r7, #4]
 8109e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109e50:	f003 0310 	and.w	r3, r3, #16
 8109e54:	2b00      	cmp	r3, #0
 8109e56:	d00a      	beq.n	8109e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8109e58:	687b      	ldr	r3, [r7, #4]
 8109e5a:	681b      	ldr	r3, [r3, #0]
 8109e5c:	689b      	ldr	r3, [r3, #8]
 8109e5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8109e62:	687b      	ldr	r3, [r7, #4]
 8109e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8109e66:	687b      	ldr	r3, [r7, #4]
 8109e68:	681b      	ldr	r3, [r3, #0]
 8109e6a:	430a      	orrs	r2, r1
 8109e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8109e6e:	687b      	ldr	r3, [r7, #4]
 8109e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109e72:	f003 0320 	and.w	r3, r3, #32
 8109e76:	2b00      	cmp	r3, #0
 8109e78:	d00a      	beq.n	8109e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8109e7a:	687b      	ldr	r3, [r7, #4]
 8109e7c:	681b      	ldr	r3, [r3, #0]
 8109e7e:	689b      	ldr	r3, [r3, #8]
 8109e80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8109e84:	687b      	ldr	r3, [r7, #4]
 8109e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8109e88:	687b      	ldr	r3, [r7, #4]
 8109e8a:	681b      	ldr	r3, [r3, #0]
 8109e8c:	430a      	orrs	r2, r1
 8109e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8109e90:	687b      	ldr	r3, [r7, #4]
 8109e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109e98:	2b00      	cmp	r3, #0
 8109e9a:	d01a      	beq.n	8109ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8109e9c:	687b      	ldr	r3, [r7, #4]
 8109e9e:	681b      	ldr	r3, [r3, #0]
 8109ea0:	685b      	ldr	r3, [r3, #4]
 8109ea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8109ea6:	687b      	ldr	r3, [r7, #4]
 8109ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8109eaa:	687b      	ldr	r3, [r7, #4]
 8109eac:	681b      	ldr	r3, [r3, #0]
 8109eae:	430a      	orrs	r2, r1
 8109eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8109eb2:	687b      	ldr	r3, [r7, #4]
 8109eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109eba:	d10a      	bne.n	8109ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8109ebc:	687b      	ldr	r3, [r7, #4]
 8109ebe:	681b      	ldr	r3, [r3, #0]
 8109ec0:	685b      	ldr	r3, [r3, #4]
 8109ec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8109ec6:	687b      	ldr	r3, [r7, #4]
 8109ec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8109eca:	687b      	ldr	r3, [r7, #4]
 8109ecc:	681b      	ldr	r3, [r3, #0]
 8109ece:	430a      	orrs	r2, r1
 8109ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8109ed2:	687b      	ldr	r3, [r7, #4]
 8109ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109eda:	2b00      	cmp	r3, #0
 8109edc:	d00a      	beq.n	8109ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8109ede:	687b      	ldr	r3, [r7, #4]
 8109ee0:	681b      	ldr	r3, [r3, #0]
 8109ee2:	685b      	ldr	r3, [r3, #4]
 8109ee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8109ee8:	687b      	ldr	r3, [r7, #4]
 8109eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8109eec:	687b      	ldr	r3, [r7, #4]
 8109eee:	681b      	ldr	r3, [r3, #0]
 8109ef0:	430a      	orrs	r2, r1
 8109ef2:	605a      	str	r2, [r3, #4]
  }
}
 8109ef4:	bf00      	nop
 8109ef6:	370c      	adds	r7, #12
 8109ef8:	46bd      	mov	sp, r7
 8109efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109efe:	4770      	bx	lr

08109f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8109f00:	b580      	push	{r7, lr}
 8109f02:	b086      	sub	sp, #24
 8109f04:	af02      	add	r7, sp, #8
 8109f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109f08:	687b      	ldr	r3, [r7, #4]
 8109f0a:	2200      	movs	r2, #0
 8109f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8109f10:	f7f9 f8ee 	bl	81030f0 <HAL_GetTick>
 8109f14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8109f16:	687b      	ldr	r3, [r7, #4]
 8109f18:	681b      	ldr	r3, [r3, #0]
 8109f1a:	681b      	ldr	r3, [r3, #0]
 8109f1c:	f003 0308 	and.w	r3, r3, #8
 8109f20:	2b08      	cmp	r3, #8
 8109f22:	d10e      	bne.n	8109f42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8109f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8109f28:	9300      	str	r3, [sp, #0]
 8109f2a:	68fb      	ldr	r3, [r7, #12]
 8109f2c:	2200      	movs	r2, #0
 8109f2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8109f32:	6878      	ldr	r0, [r7, #4]
 8109f34:	f000 f82f 	bl	8109f96 <UART_WaitOnFlagUntilTimeout>
 8109f38:	4603      	mov	r3, r0
 8109f3a:	2b00      	cmp	r3, #0
 8109f3c:	d001      	beq.n	8109f42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8109f3e:	2303      	movs	r3, #3
 8109f40:	e025      	b.n	8109f8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8109f42:	687b      	ldr	r3, [r7, #4]
 8109f44:	681b      	ldr	r3, [r3, #0]
 8109f46:	681b      	ldr	r3, [r3, #0]
 8109f48:	f003 0304 	and.w	r3, r3, #4
 8109f4c:	2b04      	cmp	r3, #4
 8109f4e:	d10e      	bne.n	8109f6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8109f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8109f54:	9300      	str	r3, [sp, #0]
 8109f56:	68fb      	ldr	r3, [r7, #12]
 8109f58:	2200      	movs	r2, #0
 8109f5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8109f5e:	6878      	ldr	r0, [r7, #4]
 8109f60:	f000 f819 	bl	8109f96 <UART_WaitOnFlagUntilTimeout>
 8109f64:	4603      	mov	r3, r0
 8109f66:	2b00      	cmp	r3, #0
 8109f68:	d001      	beq.n	8109f6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8109f6a:	2303      	movs	r3, #3
 8109f6c:	e00f      	b.n	8109f8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8109f6e:	687b      	ldr	r3, [r7, #4]
 8109f70:	2220      	movs	r2, #32
 8109f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8109f76:	687b      	ldr	r3, [r7, #4]
 8109f78:	2220      	movs	r2, #32
 8109f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109f7e:	687b      	ldr	r3, [r7, #4]
 8109f80:	2200      	movs	r2, #0
 8109f82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8109f84:	687b      	ldr	r3, [r7, #4]
 8109f86:	2200      	movs	r2, #0
 8109f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109f8c:	2300      	movs	r3, #0
}
 8109f8e:	4618      	mov	r0, r3
 8109f90:	3710      	adds	r7, #16
 8109f92:	46bd      	mov	sp, r7
 8109f94:	bd80      	pop	{r7, pc}

08109f96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8109f96:	b580      	push	{r7, lr}
 8109f98:	b09c      	sub	sp, #112	; 0x70
 8109f9a:	af00      	add	r7, sp, #0
 8109f9c:	60f8      	str	r0, [r7, #12]
 8109f9e:	60b9      	str	r1, [r7, #8]
 8109fa0:	603b      	str	r3, [r7, #0]
 8109fa2:	4613      	mov	r3, r2
 8109fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109fa6:	e0a9      	b.n	810a0fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8109faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109fae:	f000 80a5 	beq.w	810a0fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109fb2:	f7f9 f89d 	bl	81030f0 <HAL_GetTick>
 8109fb6:	4602      	mov	r2, r0
 8109fb8:	683b      	ldr	r3, [r7, #0]
 8109fba:	1ad3      	subs	r3, r2, r3
 8109fbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8109fbe:	429a      	cmp	r2, r3
 8109fc0:	d302      	bcc.n	8109fc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8109fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8109fc4:	2b00      	cmp	r3, #0
 8109fc6:	d140      	bne.n	810a04a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8109fc8:	68fb      	ldr	r3, [r7, #12]
 8109fca:	681b      	ldr	r3, [r3, #0]
 8109fcc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8109fd0:	e853 3f00 	ldrex	r3, [r3]
 8109fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8109fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8109fd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8109fdc:	667b      	str	r3, [r7, #100]	; 0x64
 8109fde:	68fb      	ldr	r3, [r7, #12]
 8109fe0:	681b      	ldr	r3, [r3, #0]
 8109fe2:	461a      	mov	r2, r3
 8109fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8109fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8109fe8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109fea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8109fec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8109fee:	e841 2300 	strex	r3, r2, [r1]
 8109ff2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8109ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8109ff6:	2b00      	cmp	r3, #0
 8109ff8:	d1e6      	bne.n	8109fc8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109ffa:	68fb      	ldr	r3, [r7, #12]
 8109ffc:	681b      	ldr	r3, [r3, #0]
 8109ffe:	3308      	adds	r3, #8
 810a000:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a004:	e853 3f00 	ldrex	r3, [r3]
 810a008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a00c:	f023 0301 	bic.w	r3, r3, #1
 810a010:	663b      	str	r3, [r7, #96]	; 0x60
 810a012:	68fb      	ldr	r3, [r7, #12]
 810a014:	681b      	ldr	r3, [r3, #0]
 810a016:	3308      	adds	r3, #8
 810a018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810a01a:	64ba      	str	r2, [r7, #72]	; 0x48
 810a01c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a01e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810a020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810a022:	e841 2300 	strex	r3, r2, [r1]
 810a026:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 810a028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810a02a:	2b00      	cmp	r3, #0
 810a02c:	d1e5      	bne.n	8109ffa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810a02e:	68fb      	ldr	r3, [r7, #12]
 810a030:	2220      	movs	r2, #32
 810a032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810a036:	68fb      	ldr	r3, [r7, #12]
 810a038:	2220      	movs	r2, #32
 810a03a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810a03e:	68fb      	ldr	r3, [r7, #12]
 810a040:	2200      	movs	r2, #0
 810a042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810a046:	2303      	movs	r3, #3
 810a048:	e069      	b.n	810a11e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810a04a:	68fb      	ldr	r3, [r7, #12]
 810a04c:	681b      	ldr	r3, [r3, #0]
 810a04e:	681b      	ldr	r3, [r3, #0]
 810a050:	f003 0304 	and.w	r3, r3, #4
 810a054:	2b00      	cmp	r3, #0
 810a056:	d051      	beq.n	810a0fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810a058:	68fb      	ldr	r3, [r7, #12]
 810a05a:	681b      	ldr	r3, [r3, #0]
 810a05c:	69db      	ldr	r3, [r3, #28]
 810a05e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810a062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a066:	d149      	bne.n	810a0fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810a068:	68fb      	ldr	r3, [r7, #12]
 810a06a:	681b      	ldr	r3, [r3, #0]
 810a06c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810a070:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810a072:	68fb      	ldr	r3, [r7, #12]
 810a074:	681b      	ldr	r3, [r3, #0]
 810a076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a07a:	e853 3f00 	ldrex	r3, [r3]
 810a07e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a082:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810a086:	66fb      	str	r3, [r7, #108]	; 0x6c
 810a088:	68fb      	ldr	r3, [r7, #12]
 810a08a:	681b      	ldr	r3, [r3, #0]
 810a08c:	461a      	mov	r2, r3
 810a08e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810a090:	637b      	str	r3, [r7, #52]	; 0x34
 810a092:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810a096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810a098:	e841 2300 	strex	r3, r2, [r1]
 810a09c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810a09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a0a0:	2b00      	cmp	r3, #0
 810a0a2:	d1e6      	bne.n	810a072 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a0a4:	68fb      	ldr	r3, [r7, #12]
 810a0a6:	681b      	ldr	r3, [r3, #0]
 810a0a8:	3308      	adds	r3, #8
 810a0aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a0ac:	697b      	ldr	r3, [r7, #20]
 810a0ae:	e853 3f00 	ldrex	r3, [r3]
 810a0b2:	613b      	str	r3, [r7, #16]
   return(result);
 810a0b4:	693b      	ldr	r3, [r7, #16]
 810a0b6:	f023 0301 	bic.w	r3, r3, #1
 810a0ba:	66bb      	str	r3, [r7, #104]	; 0x68
 810a0bc:	68fb      	ldr	r3, [r7, #12]
 810a0be:	681b      	ldr	r3, [r3, #0]
 810a0c0:	3308      	adds	r3, #8
 810a0c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 810a0c4:	623a      	str	r2, [r7, #32]
 810a0c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a0c8:	69f9      	ldr	r1, [r7, #28]
 810a0ca:	6a3a      	ldr	r2, [r7, #32]
 810a0cc:	e841 2300 	strex	r3, r2, [r1]
 810a0d0:	61bb      	str	r3, [r7, #24]
   return(result);
 810a0d2:	69bb      	ldr	r3, [r7, #24]
 810a0d4:	2b00      	cmp	r3, #0
 810a0d6:	d1e5      	bne.n	810a0a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 810a0d8:	68fb      	ldr	r3, [r7, #12]
 810a0da:	2220      	movs	r2, #32
 810a0dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810a0e0:	68fb      	ldr	r3, [r7, #12]
 810a0e2:	2220      	movs	r2, #32
 810a0e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810a0e8:	68fb      	ldr	r3, [r7, #12]
 810a0ea:	2220      	movs	r2, #32
 810a0ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a0f0:	68fb      	ldr	r3, [r7, #12]
 810a0f2:	2200      	movs	r2, #0
 810a0f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810a0f8:	2303      	movs	r3, #3
 810a0fa:	e010      	b.n	810a11e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a0fc:	68fb      	ldr	r3, [r7, #12]
 810a0fe:	681b      	ldr	r3, [r3, #0]
 810a100:	69da      	ldr	r2, [r3, #28]
 810a102:	68bb      	ldr	r3, [r7, #8]
 810a104:	4013      	ands	r3, r2
 810a106:	68ba      	ldr	r2, [r7, #8]
 810a108:	429a      	cmp	r2, r3
 810a10a:	bf0c      	ite	eq
 810a10c:	2301      	moveq	r3, #1
 810a10e:	2300      	movne	r3, #0
 810a110:	b2db      	uxtb	r3, r3
 810a112:	461a      	mov	r2, r3
 810a114:	79fb      	ldrb	r3, [r7, #7]
 810a116:	429a      	cmp	r2, r3
 810a118:	f43f af46 	beq.w	8109fa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810a11c:	2300      	movs	r3, #0
}
 810a11e:	4618      	mov	r0, r3
 810a120:	3770      	adds	r7, #112	; 0x70
 810a122:	46bd      	mov	sp, r7
 810a124:	bd80      	pop	{r7, pc}

0810a126 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810a126:	b480      	push	{r7}
 810a128:	b085      	sub	sp, #20
 810a12a:	af00      	add	r7, sp, #0
 810a12c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a12e:	687b      	ldr	r3, [r7, #4]
 810a130:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a134:	2b01      	cmp	r3, #1
 810a136:	d101      	bne.n	810a13c <HAL_UARTEx_DisableFifoMode+0x16>
 810a138:	2302      	movs	r3, #2
 810a13a:	e027      	b.n	810a18c <HAL_UARTEx_DisableFifoMode+0x66>
 810a13c:	687b      	ldr	r3, [r7, #4]
 810a13e:	2201      	movs	r2, #1
 810a140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810a144:	687b      	ldr	r3, [r7, #4]
 810a146:	2224      	movs	r2, #36	; 0x24
 810a148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a14c:	687b      	ldr	r3, [r7, #4]
 810a14e:	681b      	ldr	r3, [r3, #0]
 810a150:	681b      	ldr	r3, [r3, #0]
 810a152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a154:	687b      	ldr	r3, [r7, #4]
 810a156:	681b      	ldr	r3, [r3, #0]
 810a158:	681a      	ldr	r2, [r3, #0]
 810a15a:	687b      	ldr	r3, [r7, #4]
 810a15c:	681b      	ldr	r3, [r3, #0]
 810a15e:	f022 0201 	bic.w	r2, r2, #1
 810a162:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810a164:	68fb      	ldr	r3, [r7, #12]
 810a166:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810a16a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810a16c:	687b      	ldr	r3, [r7, #4]
 810a16e:	2200      	movs	r2, #0
 810a170:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a172:	687b      	ldr	r3, [r7, #4]
 810a174:	681b      	ldr	r3, [r3, #0]
 810a176:	68fa      	ldr	r2, [r7, #12]
 810a178:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a17a:	687b      	ldr	r3, [r7, #4]
 810a17c:	2220      	movs	r2, #32
 810a17e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a182:	687b      	ldr	r3, [r7, #4]
 810a184:	2200      	movs	r2, #0
 810a186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810a18a:	2300      	movs	r3, #0
}
 810a18c:	4618      	mov	r0, r3
 810a18e:	3714      	adds	r7, #20
 810a190:	46bd      	mov	sp, r7
 810a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a196:	4770      	bx	lr

0810a198 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810a198:	b580      	push	{r7, lr}
 810a19a:	b084      	sub	sp, #16
 810a19c:	af00      	add	r7, sp, #0
 810a19e:	6078      	str	r0, [r7, #4]
 810a1a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a1a2:	687b      	ldr	r3, [r7, #4]
 810a1a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a1a8:	2b01      	cmp	r3, #1
 810a1aa:	d101      	bne.n	810a1b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810a1ac:	2302      	movs	r3, #2
 810a1ae:	e02d      	b.n	810a20c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810a1b0:	687b      	ldr	r3, [r7, #4]
 810a1b2:	2201      	movs	r2, #1
 810a1b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810a1b8:	687b      	ldr	r3, [r7, #4]
 810a1ba:	2224      	movs	r2, #36	; 0x24
 810a1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a1c0:	687b      	ldr	r3, [r7, #4]
 810a1c2:	681b      	ldr	r3, [r3, #0]
 810a1c4:	681b      	ldr	r3, [r3, #0]
 810a1c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a1c8:	687b      	ldr	r3, [r7, #4]
 810a1ca:	681b      	ldr	r3, [r3, #0]
 810a1cc:	681a      	ldr	r2, [r3, #0]
 810a1ce:	687b      	ldr	r3, [r7, #4]
 810a1d0:	681b      	ldr	r3, [r3, #0]
 810a1d2:	f022 0201 	bic.w	r2, r2, #1
 810a1d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810a1d8:	687b      	ldr	r3, [r7, #4]
 810a1da:	681b      	ldr	r3, [r3, #0]
 810a1dc:	689b      	ldr	r3, [r3, #8]
 810a1de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810a1e2:	687b      	ldr	r3, [r7, #4]
 810a1e4:	681b      	ldr	r3, [r3, #0]
 810a1e6:	683a      	ldr	r2, [r7, #0]
 810a1e8:	430a      	orrs	r2, r1
 810a1ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810a1ec:	6878      	ldr	r0, [r7, #4]
 810a1ee:	f000 f84f 	bl	810a290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a1f2:	687b      	ldr	r3, [r7, #4]
 810a1f4:	681b      	ldr	r3, [r3, #0]
 810a1f6:	68fa      	ldr	r2, [r7, #12]
 810a1f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a1fa:	687b      	ldr	r3, [r7, #4]
 810a1fc:	2220      	movs	r2, #32
 810a1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a202:	687b      	ldr	r3, [r7, #4]
 810a204:	2200      	movs	r2, #0
 810a206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810a20a:	2300      	movs	r3, #0
}
 810a20c:	4618      	mov	r0, r3
 810a20e:	3710      	adds	r7, #16
 810a210:	46bd      	mov	sp, r7
 810a212:	bd80      	pop	{r7, pc}

0810a214 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810a214:	b580      	push	{r7, lr}
 810a216:	b084      	sub	sp, #16
 810a218:	af00      	add	r7, sp, #0
 810a21a:	6078      	str	r0, [r7, #4]
 810a21c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a21e:	687b      	ldr	r3, [r7, #4]
 810a220:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a224:	2b01      	cmp	r3, #1
 810a226:	d101      	bne.n	810a22c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810a228:	2302      	movs	r3, #2
 810a22a:	e02d      	b.n	810a288 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810a22c:	687b      	ldr	r3, [r7, #4]
 810a22e:	2201      	movs	r2, #1
 810a230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810a234:	687b      	ldr	r3, [r7, #4]
 810a236:	2224      	movs	r2, #36	; 0x24
 810a238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a23c:	687b      	ldr	r3, [r7, #4]
 810a23e:	681b      	ldr	r3, [r3, #0]
 810a240:	681b      	ldr	r3, [r3, #0]
 810a242:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a244:	687b      	ldr	r3, [r7, #4]
 810a246:	681b      	ldr	r3, [r3, #0]
 810a248:	681a      	ldr	r2, [r3, #0]
 810a24a:	687b      	ldr	r3, [r7, #4]
 810a24c:	681b      	ldr	r3, [r3, #0]
 810a24e:	f022 0201 	bic.w	r2, r2, #1
 810a252:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810a254:	687b      	ldr	r3, [r7, #4]
 810a256:	681b      	ldr	r3, [r3, #0]
 810a258:	689b      	ldr	r3, [r3, #8]
 810a25a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810a25e:	687b      	ldr	r3, [r7, #4]
 810a260:	681b      	ldr	r3, [r3, #0]
 810a262:	683a      	ldr	r2, [r7, #0]
 810a264:	430a      	orrs	r2, r1
 810a266:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810a268:	6878      	ldr	r0, [r7, #4]
 810a26a:	f000 f811 	bl	810a290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a26e:	687b      	ldr	r3, [r7, #4]
 810a270:	681b      	ldr	r3, [r3, #0]
 810a272:	68fa      	ldr	r2, [r7, #12]
 810a274:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a276:	687b      	ldr	r3, [r7, #4]
 810a278:	2220      	movs	r2, #32
 810a27a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a27e:	687b      	ldr	r3, [r7, #4]
 810a280:	2200      	movs	r2, #0
 810a282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810a286:	2300      	movs	r3, #0
}
 810a288:	4618      	mov	r0, r3
 810a28a:	3710      	adds	r7, #16
 810a28c:	46bd      	mov	sp, r7
 810a28e:	bd80      	pop	{r7, pc}

0810a290 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810a290:	b480      	push	{r7}
 810a292:	b085      	sub	sp, #20
 810a294:	af00      	add	r7, sp, #0
 810a296:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810a298:	687b      	ldr	r3, [r7, #4]
 810a29a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a29c:	2b00      	cmp	r3, #0
 810a29e:	d108      	bne.n	810a2b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810a2a0:	687b      	ldr	r3, [r7, #4]
 810a2a2:	2201      	movs	r2, #1
 810a2a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810a2a8:	687b      	ldr	r3, [r7, #4]
 810a2aa:	2201      	movs	r2, #1
 810a2ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810a2b0:	e031      	b.n	810a316 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810a2b2:	2310      	movs	r3, #16
 810a2b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810a2b6:	2310      	movs	r3, #16
 810a2b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810a2ba:	687b      	ldr	r3, [r7, #4]
 810a2bc:	681b      	ldr	r3, [r3, #0]
 810a2be:	689b      	ldr	r3, [r3, #8]
 810a2c0:	0e5b      	lsrs	r3, r3, #25
 810a2c2:	b2db      	uxtb	r3, r3
 810a2c4:	f003 0307 	and.w	r3, r3, #7
 810a2c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810a2ca:	687b      	ldr	r3, [r7, #4]
 810a2cc:	681b      	ldr	r3, [r3, #0]
 810a2ce:	689b      	ldr	r3, [r3, #8]
 810a2d0:	0f5b      	lsrs	r3, r3, #29
 810a2d2:	b2db      	uxtb	r3, r3
 810a2d4:	f003 0307 	and.w	r3, r3, #7
 810a2d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810a2da:	7bbb      	ldrb	r3, [r7, #14]
 810a2dc:	7b3a      	ldrb	r2, [r7, #12]
 810a2de:	4911      	ldr	r1, [pc, #68]	; (810a324 <UARTEx_SetNbDataToProcess+0x94>)
 810a2e0:	5c8a      	ldrb	r2, [r1, r2]
 810a2e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810a2e6:	7b3a      	ldrb	r2, [r7, #12]
 810a2e8:	490f      	ldr	r1, [pc, #60]	; (810a328 <UARTEx_SetNbDataToProcess+0x98>)
 810a2ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810a2ec:	fb93 f3f2 	sdiv	r3, r3, r2
 810a2f0:	b29a      	uxth	r2, r3
 810a2f2:	687b      	ldr	r3, [r7, #4]
 810a2f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810a2f8:	7bfb      	ldrb	r3, [r7, #15]
 810a2fa:	7b7a      	ldrb	r2, [r7, #13]
 810a2fc:	4909      	ldr	r1, [pc, #36]	; (810a324 <UARTEx_SetNbDataToProcess+0x94>)
 810a2fe:	5c8a      	ldrb	r2, [r1, r2]
 810a300:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810a304:	7b7a      	ldrb	r2, [r7, #13]
 810a306:	4908      	ldr	r1, [pc, #32]	; (810a328 <UARTEx_SetNbDataToProcess+0x98>)
 810a308:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810a30a:	fb93 f3f2 	sdiv	r3, r3, r2
 810a30e:	b29a      	uxth	r2, r3
 810a310:	687b      	ldr	r3, [r7, #4]
 810a312:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810a316:	bf00      	nop
 810a318:	3714      	adds	r7, #20
 810a31a:	46bd      	mov	sp, r7
 810a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a320:	4770      	bx	lr
 810a322:	bf00      	nop
 810a324:	0810b024 	.word	0x0810b024
 810a328:	0810b02c 	.word	0x0810b02c

0810a32c <__libc_init_array>:
 810a32c:	b570      	push	{r4, r5, r6, lr}
 810a32e:	4d0d      	ldr	r5, [pc, #52]	; (810a364 <__libc_init_array+0x38>)
 810a330:	4c0d      	ldr	r4, [pc, #52]	; (810a368 <__libc_init_array+0x3c>)
 810a332:	1b64      	subs	r4, r4, r5
 810a334:	10a4      	asrs	r4, r4, #2
 810a336:	2600      	movs	r6, #0
 810a338:	42a6      	cmp	r6, r4
 810a33a:	d109      	bne.n	810a350 <__libc_init_array+0x24>
 810a33c:	4d0b      	ldr	r5, [pc, #44]	; (810a36c <__libc_init_array+0x40>)
 810a33e:	4c0c      	ldr	r4, [pc, #48]	; (810a370 <__libc_init_array+0x44>)
 810a340:	f000 fcc0 	bl	810acc4 <_init>
 810a344:	1b64      	subs	r4, r4, r5
 810a346:	10a4      	asrs	r4, r4, #2
 810a348:	2600      	movs	r6, #0
 810a34a:	42a6      	cmp	r6, r4
 810a34c:	d105      	bne.n	810a35a <__libc_init_array+0x2e>
 810a34e:	bd70      	pop	{r4, r5, r6, pc}
 810a350:	f855 3b04 	ldr.w	r3, [r5], #4
 810a354:	4798      	blx	r3
 810a356:	3601      	adds	r6, #1
 810a358:	e7ee      	b.n	810a338 <__libc_init_array+0xc>
 810a35a:	f855 3b04 	ldr.w	r3, [r5], #4
 810a35e:	4798      	blx	r3
 810a360:	3601      	adds	r6, #1
 810a362:	e7f2      	b.n	810a34a <__libc_init_array+0x1e>
 810a364:	0810b070 	.word	0x0810b070
 810a368:	0810b070 	.word	0x0810b070
 810a36c:	0810b070 	.word	0x0810b070
 810a370:	0810b074 	.word	0x0810b074

0810a374 <memset>:
 810a374:	4402      	add	r2, r0
 810a376:	4603      	mov	r3, r0
 810a378:	4293      	cmp	r3, r2
 810a37a:	d100      	bne.n	810a37e <memset+0xa>
 810a37c:	4770      	bx	lr
 810a37e:	f803 1b01 	strb.w	r1, [r3], #1
 810a382:	e7f9      	b.n	810a378 <memset+0x4>

0810a384 <siprintf>:
 810a384:	b40e      	push	{r1, r2, r3}
 810a386:	b500      	push	{lr}
 810a388:	b09c      	sub	sp, #112	; 0x70
 810a38a:	ab1d      	add	r3, sp, #116	; 0x74
 810a38c:	9002      	str	r0, [sp, #8]
 810a38e:	9006      	str	r0, [sp, #24]
 810a390:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810a394:	4809      	ldr	r0, [pc, #36]	; (810a3bc <siprintf+0x38>)
 810a396:	9107      	str	r1, [sp, #28]
 810a398:	9104      	str	r1, [sp, #16]
 810a39a:	4909      	ldr	r1, [pc, #36]	; (810a3c0 <siprintf+0x3c>)
 810a39c:	f853 2b04 	ldr.w	r2, [r3], #4
 810a3a0:	9105      	str	r1, [sp, #20]
 810a3a2:	6800      	ldr	r0, [r0, #0]
 810a3a4:	9301      	str	r3, [sp, #4]
 810a3a6:	a902      	add	r1, sp, #8
 810a3a8:	f000 f868 	bl	810a47c <_svfiprintf_r>
 810a3ac:	9b02      	ldr	r3, [sp, #8]
 810a3ae:	2200      	movs	r2, #0
 810a3b0:	701a      	strb	r2, [r3, #0]
 810a3b2:	b01c      	add	sp, #112	; 0x70
 810a3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 810a3b8:	b003      	add	sp, #12
 810a3ba:	4770      	bx	lr
 810a3bc:	10000018 	.word	0x10000018
 810a3c0:	ffff0208 	.word	0xffff0208

0810a3c4 <__ssputs_r>:
 810a3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a3c8:	688e      	ldr	r6, [r1, #8]
 810a3ca:	429e      	cmp	r6, r3
 810a3cc:	4682      	mov	sl, r0
 810a3ce:	460c      	mov	r4, r1
 810a3d0:	4690      	mov	r8, r2
 810a3d2:	461f      	mov	r7, r3
 810a3d4:	d838      	bhi.n	810a448 <__ssputs_r+0x84>
 810a3d6:	898a      	ldrh	r2, [r1, #12]
 810a3d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810a3dc:	d032      	beq.n	810a444 <__ssputs_r+0x80>
 810a3de:	6825      	ldr	r5, [r4, #0]
 810a3e0:	6909      	ldr	r1, [r1, #16]
 810a3e2:	eba5 0901 	sub.w	r9, r5, r1
 810a3e6:	6965      	ldr	r5, [r4, #20]
 810a3e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810a3ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810a3f0:	3301      	adds	r3, #1
 810a3f2:	444b      	add	r3, r9
 810a3f4:	106d      	asrs	r5, r5, #1
 810a3f6:	429d      	cmp	r5, r3
 810a3f8:	bf38      	it	cc
 810a3fa:	461d      	movcc	r5, r3
 810a3fc:	0553      	lsls	r3, r2, #21
 810a3fe:	d531      	bpl.n	810a464 <__ssputs_r+0xa0>
 810a400:	4629      	mov	r1, r5
 810a402:	f000 fb63 	bl	810aacc <_malloc_r>
 810a406:	4606      	mov	r6, r0
 810a408:	b950      	cbnz	r0, 810a420 <__ssputs_r+0x5c>
 810a40a:	230c      	movs	r3, #12
 810a40c:	f8ca 3000 	str.w	r3, [sl]
 810a410:	89a3      	ldrh	r3, [r4, #12]
 810a412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a416:	81a3      	strh	r3, [r4, #12]
 810a418:	f04f 30ff 	mov.w	r0, #4294967295
 810a41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a420:	6921      	ldr	r1, [r4, #16]
 810a422:	464a      	mov	r2, r9
 810a424:	f000 fabe 	bl	810a9a4 <memcpy>
 810a428:	89a3      	ldrh	r3, [r4, #12]
 810a42a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810a42e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a432:	81a3      	strh	r3, [r4, #12]
 810a434:	6126      	str	r6, [r4, #16]
 810a436:	6165      	str	r5, [r4, #20]
 810a438:	444e      	add	r6, r9
 810a43a:	eba5 0509 	sub.w	r5, r5, r9
 810a43e:	6026      	str	r6, [r4, #0]
 810a440:	60a5      	str	r5, [r4, #8]
 810a442:	463e      	mov	r6, r7
 810a444:	42be      	cmp	r6, r7
 810a446:	d900      	bls.n	810a44a <__ssputs_r+0x86>
 810a448:	463e      	mov	r6, r7
 810a44a:	6820      	ldr	r0, [r4, #0]
 810a44c:	4632      	mov	r2, r6
 810a44e:	4641      	mov	r1, r8
 810a450:	f000 fab6 	bl	810a9c0 <memmove>
 810a454:	68a3      	ldr	r3, [r4, #8]
 810a456:	1b9b      	subs	r3, r3, r6
 810a458:	60a3      	str	r3, [r4, #8]
 810a45a:	6823      	ldr	r3, [r4, #0]
 810a45c:	4433      	add	r3, r6
 810a45e:	6023      	str	r3, [r4, #0]
 810a460:	2000      	movs	r0, #0
 810a462:	e7db      	b.n	810a41c <__ssputs_r+0x58>
 810a464:	462a      	mov	r2, r5
 810a466:	f000 fba5 	bl	810abb4 <_realloc_r>
 810a46a:	4606      	mov	r6, r0
 810a46c:	2800      	cmp	r0, #0
 810a46e:	d1e1      	bne.n	810a434 <__ssputs_r+0x70>
 810a470:	6921      	ldr	r1, [r4, #16]
 810a472:	4650      	mov	r0, sl
 810a474:	f000 fabe 	bl	810a9f4 <_free_r>
 810a478:	e7c7      	b.n	810a40a <__ssputs_r+0x46>
	...

0810a47c <_svfiprintf_r>:
 810a47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a480:	4698      	mov	r8, r3
 810a482:	898b      	ldrh	r3, [r1, #12]
 810a484:	061b      	lsls	r3, r3, #24
 810a486:	b09d      	sub	sp, #116	; 0x74
 810a488:	4607      	mov	r7, r0
 810a48a:	460d      	mov	r5, r1
 810a48c:	4614      	mov	r4, r2
 810a48e:	d50e      	bpl.n	810a4ae <_svfiprintf_r+0x32>
 810a490:	690b      	ldr	r3, [r1, #16]
 810a492:	b963      	cbnz	r3, 810a4ae <_svfiprintf_r+0x32>
 810a494:	2140      	movs	r1, #64	; 0x40
 810a496:	f000 fb19 	bl	810aacc <_malloc_r>
 810a49a:	6028      	str	r0, [r5, #0]
 810a49c:	6128      	str	r0, [r5, #16]
 810a49e:	b920      	cbnz	r0, 810a4aa <_svfiprintf_r+0x2e>
 810a4a0:	230c      	movs	r3, #12
 810a4a2:	603b      	str	r3, [r7, #0]
 810a4a4:	f04f 30ff 	mov.w	r0, #4294967295
 810a4a8:	e0d1      	b.n	810a64e <_svfiprintf_r+0x1d2>
 810a4aa:	2340      	movs	r3, #64	; 0x40
 810a4ac:	616b      	str	r3, [r5, #20]
 810a4ae:	2300      	movs	r3, #0
 810a4b0:	9309      	str	r3, [sp, #36]	; 0x24
 810a4b2:	2320      	movs	r3, #32
 810a4b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810a4b8:	f8cd 800c 	str.w	r8, [sp, #12]
 810a4bc:	2330      	movs	r3, #48	; 0x30
 810a4be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810a668 <_svfiprintf_r+0x1ec>
 810a4c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810a4c6:	f04f 0901 	mov.w	r9, #1
 810a4ca:	4623      	mov	r3, r4
 810a4cc:	469a      	mov	sl, r3
 810a4ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a4d2:	b10a      	cbz	r2, 810a4d8 <_svfiprintf_r+0x5c>
 810a4d4:	2a25      	cmp	r2, #37	; 0x25
 810a4d6:	d1f9      	bne.n	810a4cc <_svfiprintf_r+0x50>
 810a4d8:	ebba 0b04 	subs.w	fp, sl, r4
 810a4dc:	d00b      	beq.n	810a4f6 <_svfiprintf_r+0x7a>
 810a4de:	465b      	mov	r3, fp
 810a4e0:	4622      	mov	r2, r4
 810a4e2:	4629      	mov	r1, r5
 810a4e4:	4638      	mov	r0, r7
 810a4e6:	f7ff ff6d 	bl	810a3c4 <__ssputs_r>
 810a4ea:	3001      	adds	r0, #1
 810a4ec:	f000 80aa 	beq.w	810a644 <_svfiprintf_r+0x1c8>
 810a4f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a4f2:	445a      	add	r2, fp
 810a4f4:	9209      	str	r2, [sp, #36]	; 0x24
 810a4f6:	f89a 3000 	ldrb.w	r3, [sl]
 810a4fa:	2b00      	cmp	r3, #0
 810a4fc:	f000 80a2 	beq.w	810a644 <_svfiprintf_r+0x1c8>
 810a500:	2300      	movs	r3, #0
 810a502:	f04f 32ff 	mov.w	r2, #4294967295
 810a506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a50a:	f10a 0a01 	add.w	sl, sl, #1
 810a50e:	9304      	str	r3, [sp, #16]
 810a510:	9307      	str	r3, [sp, #28]
 810a512:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810a516:	931a      	str	r3, [sp, #104]	; 0x68
 810a518:	4654      	mov	r4, sl
 810a51a:	2205      	movs	r2, #5
 810a51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a520:	4851      	ldr	r0, [pc, #324]	; (810a668 <_svfiprintf_r+0x1ec>)
 810a522:	f7f5 fedd 	bl	81002e0 <memchr>
 810a526:	9a04      	ldr	r2, [sp, #16]
 810a528:	b9d8      	cbnz	r0, 810a562 <_svfiprintf_r+0xe6>
 810a52a:	06d0      	lsls	r0, r2, #27
 810a52c:	bf44      	itt	mi
 810a52e:	2320      	movmi	r3, #32
 810a530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a534:	0711      	lsls	r1, r2, #28
 810a536:	bf44      	itt	mi
 810a538:	232b      	movmi	r3, #43	; 0x2b
 810a53a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a53e:	f89a 3000 	ldrb.w	r3, [sl]
 810a542:	2b2a      	cmp	r3, #42	; 0x2a
 810a544:	d015      	beq.n	810a572 <_svfiprintf_r+0xf6>
 810a546:	9a07      	ldr	r2, [sp, #28]
 810a548:	4654      	mov	r4, sl
 810a54a:	2000      	movs	r0, #0
 810a54c:	f04f 0c0a 	mov.w	ip, #10
 810a550:	4621      	mov	r1, r4
 810a552:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a556:	3b30      	subs	r3, #48	; 0x30
 810a558:	2b09      	cmp	r3, #9
 810a55a:	d94e      	bls.n	810a5fa <_svfiprintf_r+0x17e>
 810a55c:	b1b0      	cbz	r0, 810a58c <_svfiprintf_r+0x110>
 810a55e:	9207      	str	r2, [sp, #28]
 810a560:	e014      	b.n	810a58c <_svfiprintf_r+0x110>
 810a562:	eba0 0308 	sub.w	r3, r0, r8
 810a566:	fa09 f303 	lsl.w	r3, r9, r3
 810a56a:	4313      	orrs	r3, r2
 810a56c:	9304      	str	r3, [sp, #16]
 810a56e:	46a2      	mov	sl, r4
 810a570:	e7d2      	b.n	810a518 <_svfiprintf_r+0x9c>
 810a572:	9b03      	ldr	r3, [sp, #12]
 810a574:	1d19      	adds	r1, r3, #4
 810a576:	681b      	ldr	r3, [r3, #0]
 810a578:	9103      	str	r1, [sp, #12]
 810a57a:	2b00      	cmp	r3, #0
 810a57c:	bfbb      	ittet	lt
 810a57e:	425b      	neglt	r3, r3
 810a580:	f042 0202 	orrlt.w	r2, r2, #2
 810a584:	9307      	strge	r3, [sp, #28]
 810a586:	9307      	strlt	r3, [sp, #28]
 810a588:	bfb8      	it	lt
 810a58a:	9204      	strlt	r2, [sp, #16]
 810a58c:	7823      	ldrb	r3, [r4, #0]
 810a58e:	2b2e      	cmp	r3, #46	; 0x2e
 810a590:	d10c      	bne.n	810a5ac <_svfiprintf_r+0x130>
 810a592:	7863      	ldrb	r3, [r4, #1]
 810a594:	2b2a      	cmp	r3, #42	; 0x2a
 810a596:	d135      	bne.n	810a604 <_svfiprintf_r+0x188>
 810a598:	9b03      	ldr	r3, [sp, #12]
 810a59a:	1d1a      	adds	r2, r3, #4
 810a59c:	681b      	ldr	r3, [r3, #0]
 810a59e:	9203      	str	r2, [sp, #12]
 810a5a0:	2b00      	cmp	r3, #0
 810a5a2:	bfb8      	it	lt
 810a5a4:	f04f 33ff 	movlt.w	r3, #4294967295
 810a5a8:	3402      	adds	r4, #2
 810a5aa:	9305      	str	r3, [sp, #20]
 810a5ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810a678 <_svfiprintf_r+0x1fc>
 810a5b0:	7821      	ldrb	r1, [r4, #0]
 810a5b2:	2203      	movs	r2, #3
 810a5b4:	4650      	mov	r0, sl
 810a5b6:	f7f5 fe93 	bl	81002e0 <memchr>
 810a5ba:	b140      	cbz	r0, 810a5ce <_svfiprintf_r+0x152>
 810a5bc:	2340      	movs	r3, #64	; 0x40
 810a5be:	eba0 000a 	sub.w	r0, r0, sl
 810a5c2:	fa03 f000 	lsl.w	r0, r3, r0
 810a5c6:	9b04      	ldr	r3, [sp, #16]
 810a5c8:	4303      	orrs	r3, r0
 810a5ca:	3401      	adds	r4, #1
 810a5cc:	9304      	str	r3, [sp, #16]
 810a5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a5d2:	4826      	ldr	r0, [pc, #152]	; (810a66c <_svfiprintf_r+0x1f0>)
 810a5d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810a5d8:	2206      	movs	r2, #6
 810a5da:	f7f5 fe81 	bl	81002e0 <memchr>
 810a5de:	2800      	cmp	r0, #0
 810a5e0:	d038      	beq.n	810a654 <_svfiprintf_r+0x1d8>
 810a5e2:	4b23      	ldr	r3, [pc, #140]	; (810a670 <_svfiprintf_r+0x1f4>)
 810a5e4:	bb1b      	cbnz	r3, 810a62e <_svfiprintf_r+0x1b2>
 810a5e6:	9b03      	ldr	r3, [sp, #12]
 810a5e8:	3307      	adds	r3, #7
 810a5ea:	f023 0307 	bic.w	r3, r3, #7
 810a5ee:	3308      	adds	r3, #8
 810a5f0:	9303      	str	r3, [sp, #12]
 810a5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a5f4:	4433      	add	r3, r6
 810a5f6:	9309      	str	r3, [sp, #36]	; 0x24
 810a5f8:	e767      	b.n	810a4ca <_svfiprintf_r+0x4e>
 810a5fa:	fb0c 3202 	mla	r2, ip, r2, r3
 810a5fe:	460c      	mov	r4, r1
 810a600:	2001      	movs	r0, #1
 810a602:	e7a5      	b.n	810a550 <_svfiprintf_r+0xd4>
 810a604:	2300      	movs	r3, #0
 810a606:	3401      	adds	r4, #1
 810a608:	9305      	str	r3, [sp, #20]
 810a60a:	4619      	mov	r1, r3
 810a60c:	f04f 0c0a 	mov.w	ip, #10
 810a610:	4620      	mov	r0, r4
 810a612:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a616:	3a30      	subs	r2, #48	; 0x30
 810a618:	2a09      	cmp	r2, #9
 810a61a:	d903      	bls.n	810a624 <_svfiprintf_r+0x1a8>
 810a61c:	2b00      	cmp	r3, #0
 810a61e:	d0c5      	beq.n	810a5ac <_svfiprintf_r+0x130>
 810a620:	9105      	str	r1, [sp, #20]
 810a622:	e7c3      	b.n	810a5ac <_svfiprintf_r+0x130>
 810a624:	fb0c 2101 	mla	r1, ip, r1, r2
 810a628:	4604      	mov	r4, r0
 810a62a:	2301      	movs	r3, #1
 810a62c:	e7f0      	b.n	810a610 <_svfiprintf_r+0x194>
 810a62e:	ab03      	add	r3, sp, #12
 810a630:	9300      	str	r3, [sp, #0]
 810a632:	462a      	mov	r2, r5
 810a634:	4b0f      	ldr	r3, [pc, #60]	; (810a674 <_svfiprintf_r+0x1f8>)
 810a636:	a904      	add	r1, sp, #16
 810a638:	4638      	mov	r0, r7
 810a63a:	f3af 8000 	nop.w
 810a63e:	1c42      	adds	r2, r0, #1
 810a640:	4606      	mov	r6, r0
 810a642:	d1d6      	bne.n	810a5f2 <_svfiprintf_r+0x176>
 810a644:	89ab      	ldrh	r3, [r5, #12]
 810a646:	065b      	lsls	r3, r3, #25
 810a648:	f53f af2c 	bmi.w	810a4a4 <_svfiprintf_r+0x28>
 810a64c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a64e:	b01d      	add	sp, #116	; 0x74
 810a650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a654:	ab03      	add	r3, sp, #12
 810a656:	9300      	str	r3, [sp, #0]
 810a658:	462a      	mov	r2, r5
 810a65a:	4b06      	ldr	r3, [pc, #24]	; (810a674 <_svfiprintf_r+0x1f8>)
 810a65c:	a904      	add	r1, sp, #16
 810a65e:	4638      	mov	r0, r7
 810a660:	f000 f87a 	bl	810a758 <_printf_i>
 810a664:	e7eb      	b.n	810a63e <_svfiprintf_r+0x1c2>
 810a666:	bf00      	nop
 810a668:	0810b034 	.word	0x0810b034
 810a66c:	0810b03e 	.word	0x0810b03e
 810a670:	00000000 	.word	0x00000000
 810a674:	0810a3c5 	.word	0x0810a3c5
 810a678:	0810b03a 	.word	0x0810b03a

0810a67c <_printf_common>:
 810a67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a680:	4616      	mov	r6, r2
 810a682:	4699      	mov	r9, r3
 810a684:	688a      	ldr	r2, [r1, #8]
 810a686:	690b      	ldr	r3, [r1, #16]
 810a688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810a68c:	4293      	cmp	r3, r2
 810a68e:	bfb8      	it	lt
 810a690:	4613      	movlt	r3, r2
 810a692:	6033      	str	r3, [r6, #0]
 810a694:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810a698:	4607      	mov	r7, r0
 810a69a:	460c      	mov	r4, r1
 810a69c:	b10a      	cbz	r2, 810a6a2 <_printf_common+0x26>
 810a69e:	3301      	adds	r3, #1
 810a6a0:	6033      	str	r3, [r6, #0]
 810a6a2:	6823      	ldr	r3, [r4, #0]
 810a6a4:	0699      	lsls	r1, r3, #26
 810a6a6:	bf42      	ittt	mi
 810a6a8:	6833      	ldrmi	r3, [r6, #0]
 810a6aa:	3302      	addmi	r3, #2
 810a6ac:	6033      	strmi	r3, [r6, #0]
 810a6ae:	6825      	ldr	r5, [r4, #0]
 810a6b0:	f015 0506 	ands.w	r5, r5, #6
 810a6b4:	d106      	bne.n	810a6c4 <_printf_common+0x48>
 810a6b6:	f104 0a19 	add.w	sl, r4, #25
 810a6ba:	68e3      	ldr	r3, [r4, #12]
 810a6bc:	6832      	ldr	r2, [r6, #0]
 810a6be:	1a9b      	subs	r3, r3, r2
 810a6c0:	42ab      	cmp	r3, r5
 810a6c2:	dc26      	bgt.n	810a712 <_printf_common+0x96>
 810a6c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810a6c8:	1e13      	subs	r3, r2, #0
 810a6ca:	6822      	ldr	r2, [r4, #0]
 810a6cc:	bf18      	it	ne
 810a6ce:	2301      	movne	r3, #1
 810a6d0:	0692      	lsls	r2, r2, #26
 810a6d2:	d42b      	bmi.n	810a72c <_printf_common+0xb0>
 810a6d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810a6d8:	4649      	mov	r1, r9
 810a6da:	4638      	mov	r0, r7
 810a6dc:	47c0      	blx	r8
 810a6de:	3001      	adds	r0, #1
 810a6e0:	d01e      	beq.n	810a720 <_printf_common+0xa4>
 810a6e2:	6823      	ldr	r3, [r4, #0]
 810a6e4:	68e5      	ldr	r5, [r4, #12]
 810a6e6:	6832      	ldr	r2, [r6, #0]
 810a6e8:	f003 0306 	and.w	r3, r3, #6
 810a6ec:	2b04      	cmp	r3, #4
 810a6ee:	bf08      	it	eq
 810a6f0:	1aad      	subeq	r5, r5, r2
 810a6f2:	68a3      	ldr	r3, [r4, #8]
 810a6f4:	6922      	ldr	r2, [r4, #16]
 810a6f6:	bf0c      	ite	eq
 810a6f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810a6fc:	2500      	movne	r5, #0
 810a6fe:	4293      	cmp	r3, r2
 810a700:	bfc4      	itt	gt
 810a702:	1a9b      	subgt	r3, r3, r2
 810a704:	18ed      	addgt	r5, r5, r3
 810a706:	2600      	movs	r6, #0
 810a708:	341a      	adds	r4, #26
 810a70a:	42b5      	cmp	r5, r6
 810a70c:	d11a      	bne.n	810a744 <_printf_common+0xc8>
 810a70e:	2000      	movs	r0, #0
 810a710:	e008      	b.n	810a724 <_printf_common+0xa8>
 810a712:	2301      	movs	r3, #1
 810a714:	4652      	mov	r2, sl
 810a716:	4649      	mov	r1, r9
 810a718:	4638      	mov	r0, r7
 810a71a:	47c0      	blx	r8
 810a71c:	3001      	adds	r0, #1
 810a71e:	d103      	bne.n	810a728 <_printf_common+0xac>
 810a720:	f04f 30ff 	mov.w	r0, #4294967295
 810a724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a728:	3501      	adds	r5, #1
 810a72a:	e7c6      	b.n	810a6ba <_printf_common+0x3e>
 810a72c:	18e1      	adds	r1, r4, r3
 810a72e:	1c5a      	adds	r2, r3, #1
 810a730:	2030      	movs	r0, #48	; 0x30
 810a732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810a736:	4422      	add	r2, r4
 810a738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810a73c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810a740:	3302      	adds	r3, #2
 810a742:	e7c7      	b.n	810a6d4 <_printf_common+0x58>
 810a744:	2301      	movs	r3, #1
 810a746:	4622      	mov	r2, r4
 810a748:	4649      	mov	r1, r9
 810a74a:	4638      	mov	r0, r7
 810a74c:	47c0      	blx	r8
 810a74e:	3001      	adds	r0, #1
 810a750:	d0e6      	beq.n	810a720 <_printf_common+0xa4>
 810a752:	3601      	adds	r6, #1
 810a754:	e7d9      	b.n	810a70a <_printf_common+0x8e>
	...

0810a758 <_printf_i>:
 810a758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a75c:	7e0f      	ldrb	r7, [r1, #24]
 810a75e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810a760:	2f78      	cmp	r7, #120	; 0x78
 810a762:	4691      	mov	r9, r2
 810a764:	4680      	mov	r8, r0
 810a766:	460c      	mov	r4, r1
 810a768:	469a      	mov	sl, r3
 810a76a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810a76e:	d807      	bhi.n	810a780 <_printf_i+0x28>
 810a770:	2f62      	cmp	r7, #98	; 0x62
 810a772:	d80a      	bhi.n	810a78a <_printf_i+0x32>
 810a774:	2f00      	cmp	r7, #0
 810a776:	f000 80d8 	beq.w	810a92a <_printf_i+0x1d2>
 810a77a:	2f58      	cmp	r7, #88	; 0x58
 810a77c:	f000 80a3 	beq.w	810a8c6 <_printf_i+0x16e>
 810a780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810a788:	e03a      	b.n	810a800 <_printf_i+0xa8>
 810a78a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810a78e:	2b15      	cmp	r3, #21
 810a790:	d8f6      	bhi.n	810a780 <_printf_i+0x28>
 810a792:	a101      	add	r1, pc, #4	; (adr r1, 810a798 <_printf_i+0x40>)
 810a794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810a798:	0810a7f1 	.word	0x0810a7f1
 810a79c:	0810a805 	.word	0x0810a805
 810a7a0:	0810a781 	.word	0x0810a781
 810a7a4:	0810a781 	.word	0x0810a781
 810a7a8:	0810a781 	.word	0x0810a781
 810a7ac:	0810a781 	.word	0x0810a781
 810a7b0:	0810a805 	.word	0x0810a805
 810a7b4:	0810a781 	.word	0x0810a781
 810a7b8:	0810a781 	.word	0x0810a781
 810a7bc:	0810a781 	.word	0x0810a781
 810a7c0:	0810a781 	.word	0x0810a781
 810a7c4:	0810a911 	.word	0x0810a911
 810a7c8:	0810a835 	.word	0x0810a835
 810a7cc:	0810a8f3 	.word	0x0810a8f3
 810a7d0:	0810a781 	.word	0x0810a781
 810a7d4:	0810a781 	.word	0x0810a781
 810a7d8:	0810a933 	.word	0x0810a933
 810a7dc:	0810a781 	.word	0x0810a781
 810a7e0:	0810a835 	.word	0x0810a835
 810a7e4:	0810a781 	.word	0x0810a781
 810a7e8:	0810a781 	.word	0x0810a781
 810a7ec:	0810a8fb 	.word	0x0810a8fb
 810a7f0:	682b      	ldr	r3, [r5, #0]
 810a7f2:	1d1a      	adds	r2, r3, #4
 810a7f4:	681b      	ldr	r3, [r3, #0]
 810a7f6:	602a      	str	r2, [r5, #0]
 810a7f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a7fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810a800:	2301      	movs	r3, #1
 810a802:	e0a3      	b.n	810a94c <_printf_i+0x1f4>
 810a804:	6820      	ldr	r0, [r4, #0]
 810a806:	6829      	ldr	r1, [r5, #0]
 810a808:	0606      	lsls	r6, r0, #24
 810a80a:	f101 0304 	add.w	r3, r1, #4
 810a80e:	d50a      	bpl.n	810a826 <_printf_i+0xce>
 810a810:	680e      	ldr	r6, [r1, #0]
 810a812:	602b      	str	r3, [r5, #0]
 810a814:	2e00      	cmp	r6, #0
 810a816:	da03      	bge.n	810a820 <_printf_i+0xc8>
 810a818:	232d      	movs	r3, #45	; 0x2d
 810a81a:	4276      	negs	r6, r6
 810a81c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a820:	485e      	ldr	r0, [pc, #376]	; (810a99c <_printf_i+0x244>)
 810a822:	230a      	movs	r3, #10
 810a824:	e019      	b.n	810a85a <_printf_i+0x102>
 810a826:	680e      	ldr	r6, [r1, #0]
 810a828:	602b      	str	r3, [r5, #0]
 810a82a:	f010 0f40 	tst.w	r0, #64	; 0x40
 810a82e:	bf18      	it	ne
 810a830:	b236      	sxthne	r6, r6
 810a832:	e7ef      	b.n	810a814 <_printf_i+0xbc>
 810a834:	682b      	ldr	r3, [r5, #0]
 810a836:	6820      	ldr	r0, [r4, #0]
 810a838:	1d19      	adds	r1, r3, #4
 810a83a:	6029      	str	r1, [r5, #0]
 810a83c:	0601      	lsls	r1, r0, #24
 810a83e:	d501      	bpl.n	810a844 <_printf_i+0xec>
 810a840:	681e      	ldr	r6, [r3, #0]
 810a842:	e002      	b.n	810a84a <_printf_i+0xf2>
 810a844:	0646      	lsls	r6, r0, #25
 810a846:	d5fb      	bpl.n	810a840 <_printf_i+0xe8>
 810a848:	881e      	ldrh	r6, [r3, #0]
 810a84a:	4854      	ldr	r0, [pc, #336]	; (810a99c <_printf_i+0x244>)
 810a84c:	2f6f      	cmp	r7, #111	; 0x6f
 810a84e:	bf0c      	ite	eq
 810a850:	2308      	moveq	r3, #8
 810a852:	230a      	movne	r3, #10
 810a854:	2100      	movs	r1, #0
 810a856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810a85a:	6865      	ldr	r5, [r4, #4]
 810a85c:	60a5      	str	r5, [r4, #8]
 810a85e:	2d00      	cmp	r5, #0
 810a860:	bfa2      	ittt	ge
 810a862:	6821      	ldrge	r1, [r4, #0]
 810a864:	f021 0104 	bicge.w	r1, r1, #4
 810a868:	6021      	strge	r1, [r4, #0]
 810a86a:	b90e      	cbnz	r6, 810a870 <_printf_i+0x118>
 810a86c:	2d00      	cmp	r5, #0
 810a86e:	d04d      	beq.n	810a90c <_printf_i+0x1b4>
 810a870:	4615      	mov	r5, r2
 810a872:	fbb6 f1f3 	udiv	r1, r6, r3
 810a876:	fb03 6711 	mls	r7, r3, r1, r6
 810a87a:	5dc7      	ldrb	r7, [r0, r7]
 810a87c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810a880:	4637      	mov	r7, r6
 810a882:	42bb      	cmp	r3, r7
 810a884:	460e      	mov	r6, r1
 810a886:	d9f4      	bls.n	810a872 <_printf_i+0x11a>
 810a888:	2b08      	cmp	r3, #8
 810a88a:	d10b      	bne.n	810a8a4 <_printf_i+0x14c>
 810a88c:	6823      	ldr	r3, [r4, #0]
 810a88e:	07de      	lsls	r6, r3, #31
 810a890:	d508      	bpl.n	810a8a4 <_printf_i+0x14c>
 810a892:	6923      	ldr	r3, [r4, #16]
 810a894:	6861      	ldr	r1, [r4, #4]
 810a896:	4299      	cmp	r1, r3
 810a898:	bfde      	ittt	le
 810a89a:	2330      	movle	r3, #48	; 0x30
 810a89c:	f805 3c01 	strble.w	r3, [r5, #-1]
 810a8a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 810a8a4:	1b52      	subs	r2, r2, r5
 810a8a6:	6122      	str	r2, [r4, #16]
 810a8a8:	f8cd a000 	str.w	sl, [sp]
 810a8ac:	464b      	mov	r3, r9
 810a8ae:	aa03      	add	r2, sp, #12
 810a8b0:	4621      	mov	r1, r4
 810a8b2:	4640      	mov	r0, r8
 810a8b4:	f7ff fee2 	bl	810a67c <_printf_common>
 810a8b8:	3001      	adds	r0, #1
 810a8ba:	d14c      	bne.n	810a956 <_printf_i+0x1fe>
 810a8bc:	f04f 30ff 	mov.w	r0, #4294967295
 810a8c0:	b004      	add	sp, #16
 810a8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a8c6:	4835      	ldr	r0, [pc, #212]	; (810a99c <_printf_i+0x244>)
 810a8c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 810a8cc:	6829      	ldr	r1, [r5, #0]
 810a8ce:	6823      	ldr	r3, [r4, #0]
 810a8d0:	f851 6b04 	ldr.w	r6, [r1], #4
 810a8d4:	6029      	str	r1, [r5, #0]
 810a8d6:	061d      	lsls	r5, r3, #24
 810a8d8:	d514      	bpl.n	810a904 <_printf_i+0x1ac>
 810a8da:	07df      	lsls	r7, r3, #31
 810a8dc:	bf44      	itt	mi
 810a8de:	f043 0320 	orrmi.w	r3, r3, #32
 810a8e2:	6023      	strmi	r3, [r4, #0]
 810a8e4:	b91e      	cbnz	r6, 810a8ee <_printf_i+0x196>
 810a8e6:	6823      	ldr	r3, [r4, #0]
 810a8e8:	f023 0320 	bic.w	r3, r3, #32
 810a8ec:	6023      	str	r3, [r4, #0]
 810a8ee:	2310      	movs	r3, #16
 810a8f0:	e7b0      	b.n	810a854 <_printf_i+0xfc>
 810a8f2:	6823      	ldr	r3, [r4, #0]
 810a8f4:	f043 0320 	orr.w	r3, r3, #32
 810a8f8:	6023      	str	r3, [r4, #0]
 810a8fa:	2378      	movs	r3, #120	; 0x78
 810a8fc:	4828      	ldr	r0, [pc, #160]	; (810a9a0 <_printf_i+0x248>)
 810a8fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810a902:	e7e3      	b.n	810a8cc <_printf_i+0x174>
 810a904:	0659      	lsls	r1, r3, #25
 810a906:	bf48      	it	mi
 810a908:	b2b6      	uxthmi	r6, r6
 810a90a:	e7e6      	b.n	810a8da <_printf_i+0x182>
 810a90c:	4615      	mov	r5, r2
 810a90e:	e7bb      	b.n	810a888 <_printf_i+0x130>
 810a910:	682b      	ldr	r3, [r5, #0]
 810a912:	6826      	ldr	r6, [r4, #0]
 810a914:	6961      	ldr	r1, [r4, #20]
 810a916:	1d18      	adds	r0, r3, #4
 810a918:	6028      	str	r0, [r5, #0]
 810a91a:	0635      	lsls	r5, r6, #24
 810a91c:	681b      	ldr	r3, [r3, #0]
 810a91e:	d501      	bpl.n	810a924 <_printf_i+0x1cc>
 810a920:	6019      	str	r1, [r3, #0]
 810a922:	e002      	b.n	810a92a <_printf_i+0x1d2>
 810a924:	0670      	lsls	r0, r6, #25
 810a926:	d5fb      	bpl.n	810a920 <_printf_i+0x1c8>
 810a928:	8019      	strh	r1, [r3, #0]
 810a92a:	2300      	movs	r3, #0
 810a92c:	6123      	str	r3, [r4, #16]
 810a92e:	4615      	mov	r5, r2
 810a930:	e7ba      	b.n	810a8a8 <_printf_i+0x150>
 810a932:	682b      	ldr	r3, [r5, #0]
 810a934:	1d1a      	adds	r2, r3, #4
 810a936:	602a      	str	r2, [r5, #0]
 810a938:	681d      	ldr	r5, [r3, #0]
 810a93a:	6862      	ldr	r2, [r4, #4]
 810a93c:	2100      	movs	r1, #0
 810a93e:	4628      	mov	r0, r5
 810a940:	f7f5 fcce 	bl	81002e0 <memchr>
 810a944:	b108      	cbz	r0, 810a94a <_printf_i+0x1f2>
 810a946:	1b40      	subs	r0, r0, r5
 810a948:	6060      	str	r0, [r4, #4]
 810a94a:	6863      	ldr	r3, [r4, #4]
 810a94c:	6123      	str	r3, [r4, #16]
 810a94e:	2300      	movs	r3, #0
 810a950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a954:	e7a8      	b.n	810a8a8 <_printf_i+0x150>
 810a956:	6923      	ldr	r3, [r4, #16]
 810a958:	462a      	mov	r2, r5
 810a95a:	4649      	mov	r1, r9
 810a95c:	4640      	mov	r0, r8
 810a95e:	47d0      	blx	sl
 810a960:	3001      	adds	r0, #1
 810a962:	d0ab      	beq.n	810a8bc <_printf_i+0x164>
 810a964:	6823      	ldr	r3, [r4, #0]
 810a966:	079b      	lsls	r3, r3, #30
 810a968:	d413      	bmi.n	810a992 <_printf_i+0x23a>
 810a96a:	68e0      	ldr	r0, [r4, #12]
 810a96c:	9b03      	ldr	r3, [sp, #12]
 810a96e:	4298      	cmp	r0, r3
 810a970:	bfb8      	it	lt
 810a972:	4618      	movlt	r0, r3
 810a974:	e7a4      	b.n	810a8c0 <_printf_i+0x168>
 810a976:	2301      	movs	r3, #1
 810a978:	4632      	mov	r2, r6
 810a97a:	4649      	mov	r1, r9
 810a97c:	4640      	mov	r0, r8
 810a97e:	47d0      	blx	sl
 810a980:	3001      	adds	r0, #1
 810a982:	d09b      	beq.n	810a8bc <_printf_i+0x164>
 810a984:	3501      	adds	r5, #1
 810a986:	68e3      	ldr	r3, [r4, #12]
 810a988:	9903      	ldr	r1, [sp, #12]
 810a98a:	1a5b      	subs	r3, r3, r1
 810a98c:	42ab      	cmp	r3, r5
 810a98e:	dcf2      	bgt.n	810a976 <_printf_i+0x21e>
 810a990:	e7eb      	b.n	810a96a <_printf_i+0x212>
 810a992:	2500      	movs	r5, #0
 810a994:	f104 0619 	add.w	r6, r4, #25
 810a998:	e7f5      	b.n	810a986 <_printf_i+0x22e>
 810a99a:	bf00      	nop
 810a99c:	0810b045 	.word	0x0810b045
 810a9a0:	0810b056 	.word	0x0810b056

0810a9a4 <memcpy>:
 810a9a4:	440a      	add	r2, r1
 810a9a6:	4291      	cmp	r1, r2
 810a9a8:	f100 33ff 	add.w	r3, r0, #4294967295
 810a9ac:	d100      	bne.n	810a9b0 <memcpy+0xc>
 810a9ae:	4770      	bx	lr
 810a9b0:	b510      	push	{r4, lr}
 810a9b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a9b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 810a9ba:	4291      	cmp	r1, r2
 810a9bc:	d1f9      	bne.n	810a9b2 <memcpy+0xe>
 810a9be:	bd10      	pop	{r4, pc}

0810a9c0 <memmove>:
 810a9c0:	4288      	cmp	r0, r1
 810a9c2:	b510      	push	{r4, lr}
 810a9c4:	eb01 0402 	add.w	r4, r1, r2
 810a9c8:	d902      	bls.n	810a9d0 <memmove+0x10>
 810a9ca:	4284      	cmp	r4, r0
 810a9cc:	4623      	mov	r3, r4
 810a9ce:	d807      	bhi.n	810a9e0 <memmove+0x20>
 810a9d0:	1e43      	subs	r3, r0, #1
 810a9d2:	42a1      	cmp	r1, r4
 810a9d4:	d008      	beq.n	810a9e8 <memmove+0x28>
 810a9d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 810a9da:	f803 2f01 	strb.w	r2, [r3, #1]!
 810a9de:	e7f8      	b.n	810a9d2 <memmove+0x12>
 810a9e0:	4402      	add	r2, r0
 810a9e2:	4601      	mov	r1, r0
 810a9e4:	428a      	cmp	r2, r1
 810a9e6:	d100      	bne.n	810a9ea <memmove+0x2a>
 810a9e8:	bd10      	pop	{r4, pc}
 810a9ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810a9ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810a9f2:	e7f7      	b.n	810a9e4 <memmove+0x24>

0810a9f4 <_free_r>:
 810a9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810a9f6:	2900      	cmp	r1, #0
 810a9f8:	d044      	beq.n	810aa84 <_free_r+0x90>
 810a9fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810a9fe:	9001      	str	r0, [sp, #4]
 810aa00:	2b00      	cmp	r3, #0
 810aa02:	f1a1 0404 	sub.w	r4, r1, #4
 810aa06:	bfb8      	it	lt
 810aa08:	18e4      	addlt	r4, r4, r3
 810aa0a:	f000 f913 	bl	810ac34 <__malloc_lock>
 810aa0e:	4a1e      	ldr	r2, [pc, #120]	; (810aa88 <_free_r+0x94>)
 810aa10:	9801      	ldr	r0, [sp, #4]
 810aa12:	6813      	ldr	r3, [r2, #0]
 810aa14:	b933      	cbnz	r3, 810aa24 <_free_r+0x30>
 810aa16:	6063      	str	r3, [r4, #4]
 810aa18:	6014      	str	r4, [r2, #0]
 810aa1a:	b003      	add	sp, #12
 810aa1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810aa20:	f000 b90e 	b.w	810ac40 <__malloc_unlock>
 810aa24:	42a3      	cmp	r3, r4
 810aa26:	d908      	bls.n	810aa3a <_free_r+0x46>
 810aa28:	6825      	ldr	r5, [r4, #0]
 810aa2a:	1961      	adds	r1, r4, r5
 810aa2c:	428b      	cmp	r3, r1
 810aa2e:	bf01      	itttt	eq
 810aa30:	6819      	ldreq	r1, [r3, #0]
 810aa32:	685b      	ldreq	r3, [r3, #4]
 810aa34:	1949      	addeq	r1, r1, r5
 810aa36:	6021      	streq	r1, [r4, #0]
 810aa38:	e7ed      	b.n	810aa16 <_free_r+0x22>
 810aa3a:	461a      	mov	r2, r3
 810aa3c:	685b      	ldr	r3, [r3, #4]
 810aa3e:	b10b      	cbz	r3, 810aa44 <_free_r+0x50>
 810aa40:	42a3      	cmp	r3, r4
 810aa42:	d9fa      	bls.n	810aa3a <_free_r+0x46>
 810aa44:	6811      	ldr	r1, [r2, #0]
 810aa46:	1855      	adds	r5, r2, r1
 810aa48:	42a5      	cmp	r5, r4
 810aa4a:	d10b      	bne.n	810aa64 <_free_r+0x70>
 810aa4c:	6824      	ldr	r4, [r4, #0]
 810aa4e:	4421      	add	r1, r4
 810aa50:	1854      	adds	r4, r2, r1
 810aa52:	42a3      	cmp	r3, r4
 810aa54:	6011      	str	r1, [r2, #0]
 810aa56:	d1e0      	bne.n	810aa1a <_free_r+0x26>
 810aa58:	681c      	ldr	r4, [r3, #0]
 810aa5a:	685b      	ldr	r3, [r3, #4]
 810aa5c:	6053      	str	r3, [r2, #4]
 810aa5e:	4421      	add	r1, r4
 810aa60:	6011      	str	r1, [r2, #0]
 810aa62:	e7da      	b.n	810aa1a <_free_r+0x26>
 810aa64:	d902      	bls.n	810aa6c <_free_r+0x78>
 810aa66:	230c      	movs	r3, #12
 810aa68:	6003      	str	r3, [r0, #0]
 810aa6a:	e7d6      	b.n	810aa1a <_free_r+0x26>
 810aa6c:	6825      	ldr	r5, [r4, #0]
 810aa6e:	1961      	adds	r1, r4, r5
 810aa70:	428b      	cmp	r3, r1
 810aa72:	bf04      	itt	eq
 810aa74:	6819      	ldreq	r1, [r3, #0]
 810aa76:	685b      	ldreq	r3, [r3, #4]
 810aa78:	6063      	str	r3, [r4, #4]
 810aa7a:	bf04      	itt	eq
 810aa7c:	1949      	addeq	r1, r1, r5
 810aa7e:	6021      	streq	r1, [r4, #0]
 810aa80:	6054      	str	r4, [r2, #4]
 810aa82:	e7ca      	b.n	810aa1a <_free_r+0x26>
 810aa84:	b003      	add	sp, #12
 810aa86:	bd30      	pop	{r4, r5, pc}
 810aa88:	1000040c 	.word	0x1000040c

0810aa8c <sbrk_aligned>:
 810aa8c:	b570      	push	{r4, r5, r6, lr}
 810aa8e:	4e0e      	ldr	r6, [pc, #56]	; (810aac8 <sbrk_aligned+0x3c>)
 810aa90:	460c      	mov	r4, r1
 810aa92:	6831      	ldr	r1, [r6, #0]
 810aa94:	4605      	mov	r5, r0
 810aa96:	b911      	cbnz	r1, 810aa9e <sbrk_aligned+0x12>
 810aa98:	f000 f8bc 	bl	810ac14 <_sbrk_r>
 810aa9c:	6030      	str	r0, [r6, #0]
 810aa9e:	4621      	mov	r1, r4
 810aaa0:	4628      	mov	r0, r5
 810aaa2:	f000 f8b7 	bl	810ac14 <_sbrk_r>
 810aaa6:	1c43      	adds	r3, r0, #1
 810aaa8:	d00a      	beq.n	810aac0 <sbrk_aligned+0x34>
 810aaaa:	1cc4      	adds	r4, r0, #3
 810aaac:	f024 0403 	bic.w	r4, r4, #3
 810aab0:	42a0      	cmp	r0, r4
 810aab2:	d007      	beq.n	810aac4 <sbrk_aligned+0x38>
 810aab4:	1a21      	subs	r1, r4, r0
 810aab6:	4628      	mov	r0, r5
 810aab8:	f000 f8ac 	bl	810ac14 <_sbrk_r>
 810aabc:	3001      	adds	r0, #1
 810aabe:	d101      	bne.n	810aac4 <sbrk_aligned+0x38>
 810aac0:	f04f 34ff 	mov.w	r4, #4294967295
 810aac4:	4620      	mov	r0, r4
 810aac6:	bd70      	pop	{r4, r5, r6, pc}
 810aac8:	10000410 	.word	0x10000410

0810aacc <_malloc_r>:
 810aacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810aad0:	1ccd      	adds	r5, r1, #3
 810aad2:	f025 0503 	bic.w	r5, r5, #3
 810aad6:	3508      	adds	r5, #8
 810aad8:	2d0c      	cmp	r5, #12
 810aada:	bf38      	it	cc
 810aadc:	250c      	movcc	r5, #12
 810aade:	2d00      	cmp	r5, #0
 810aae0:	4607      	mov	r7, r0
 810aae2:	db01      	blt.n	810aae8 <_malloc_r+0x1c>
 810aae4:	42a9      	cmp	r1, r5
 810aae6:	d905      	bls.n	810aaf4 <_malloc_r+0x28>
 810aae8:	230c      	movs	r3, #12
 810aaea:	603b      	str	r3, [r7, #0]
 810aaec:	2600      	movs	r6, #0
 810aaee:	4630      	mov	r0, r6
 810aaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810aaf4:	4e2e      	ldr	r6, [pc, #184]	; (810abb0 <_malloc_r+0xe4>)
 810aaf6:	f000 f89d 	bl	810ac34 <__malloc_lock>
 810aafa:	6833      	ldr	r3, [r6, #0]
 810aafc:	461c      	mov	r4, r3
 810aafe:	bb34      	cbnz	r4, 810ab4e <_malloc_r+0x82>
 810ab00:	4629      	mov	r1, r5
 810ab02:	4638      	mov	r0, r7
 810ab04:	f7ff ffc2 	bl	810aa8c <sbrk_aligned>
 810ab08:	1c43      	adds	r3, r0, #1
 810ab0a:	4604      	mov	r4, r0
 810ab0c:	d14d      	bne.n	810abaa <_malloc_r+0xde>
 810ab0e:	6834      	ldr	r4, [r6, #0]
 810ab10:	4626      	mov	r6, r4
 810ab12:	2e00      	cmp	r6, #0
 810ab14:	d140      	bne.n	810ab98 <_malloc_r+0xcc>
 810ab16:	6823      	ldr	r3, [r4, #0]
 810ab18:	4631      	mov	r1, r6
 810ab1a:	4638      	mov	r0, r7
 810ab1c:	eb04 0803 	add.w	r8, r4, r3
 810ab20:	f000 f878 	bl	810ac14 <_sbrk_r>
 810ab24:	4580      	cmp	r8, r0
 810ab26:	d13a      	bne.n	810ab9e <_malloc_r+0xd2>
 810ab28:	6821      	ldr	r1, [r4, #0]
 810ab2a:	3503      	adds	r5, #3
 810ab2c:	1a6d      	subs	r5, r5, r1
 810ab2e:	f025 0503 	bic.w	r5, r5, #3
 810ab32:	3508      	adds	r5, #8
 810ab34:	2d0c      	cmp	r5, #12
 810ab36:	bf38      	it	cc
 810ab38:	250c      	movcc	r5, #12
 810ab3a:	4629      	mov	r1, r5
 810ab3c:	4638      	mov	r0, r7
 810ab3e:	f7ff ffa5 	bl	810aa8c <sbrk_aligned>
 810ab42:	3001      	adds	r0, #1
 810ab44:	d02b      	beq.n	810ab9e <_malloc_r+0xd2>
 810ab46:	6823      	ldr	r3, [r4, #0]
 810ab48:	442b      	add	r3, r5
 810ab4a:	6023      	str	r3, [r4, #0]
 810ab4c:	e00e      	b.n	810ab6c <_malloc_r+0xa0>
 810ab4e:	6822      	ldr	r2, [r4, #0]
 810ab50:	1b52      	subs	r2, r2, r5
 810ab52:	d41e      	bmi.n	810ab92 <_malloc_r+0xc6>
 810ab54:	2a0b      	cmp	r2, #11
 810ab56:	d916      	bls.n	810ab86 <_malloc_r+0xba>
 810ab58:	1961      	adds	r1, r4, r5
 810ab5a:	42a3      	cmp	r3, r4
 810ab5c:	6025      	str	r5, [r4, #0]
 810ab5e:	bf18      	it	ne
 810ab60:	6059      	strne	r1, [r3, #4]
 810ab62:	6863      	ldr	r3, [r4, #4]
 810ab64:	bf08      	it	eq
 810ab66:	6031      	streq	r1, [r6, #0]
 810ab68:	5162      	str	r2, [r4, r5]
 810ab6a:	604b      	str	r3, [r1, #4]
 810ab6c:	4638      	mov	r0, r7
 810ab6e:	f104 060b 	add.w	r6, r4, #11
 810ab72:	f000 f865 	bl	810ac40 <__malloc_unlock>
 810ab76:	f026 0607 	bic.w	r6, r6, #7
 810ab7a:	1d23      	adds	r3, r4, #4
 810ab7c:	1af2      	subs	r2, r6, r3
 810ab7e:	d0b6      	beq.n	810aaee <_malloc_r+0x22>
 810ab80:	1b9b      	subs	r3, r3, r6
 810ab82:	50a3      	str	r3, [r4, r2]
 810ab84:	e7b3      	b.n	810aaee <_malloc_r+0x22>
 810ab86:	6862      	ldr	r2, [r4, #4]
 810ab88:	42a3      	cmp	r3, r4
 810ab8a:	bf0c      	ite	eq
 810ab8c:	6032      	streq	r2, [r6, #0]
 810ab8e:	605a      	strne	r2, [r3, #4]
 810ab90:	e7ec      	b.n	810ab6c <_malloc_r+0xa0>
 810ab92:	4623      	mov	r3, r4
 810ab94:	6864      	ldr	r4, [r4, #4]
 810ab96:	e7b2      	b.n	810aafe <_malloc_r+0x32>
 810ab98:	4634      	mov	r4, r6
 810ab9a:	6876      	ldr	r6, [r6, #4]
 810ab9c:	e7b9      	b.n	810ab12 <_malloc_r+0x46>
 810ab9e:	230c      	movs	r3, #12
 810aba0:	603b      	str	r3, [r7, #0]
 810aba2:	4638      	mov	r0, r7
 810aba4:	f000 f84c 	bl	810ac40 <__malloc_unlock>
 810aba8:	e7a1      	b.n	810aaee <_malloc_r+0x22>
 810abaa:	6025      	str	r5, [r4, #0]
 810abac:	e7de      	b.n	810ab6c <_malloc_r+0xa0>
 810abae:	bf00      	nop
 810abb0:	1000040c 	.word	0x1000040c

0810abb4 <_realloc_r>:
 810abb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810abb8:	4680      	mov	r8, r0
 810abba:	4614      	mov	r4, r2
 810abbc:	460e      	mov	r6, r1
 810abbe:	b921      	cbnz	r1, 810abca <_realloc_r+0x16>
 810abc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810abc4:	4611      	mov	r1, r2
 810abc6:	f7ff bf81 	b.w	810aacc <_malloc_r>
 810abca:	b92a      	cbnz	r2, 810abd8 <_realloc_r+0x24>
 810abcc:	f7ff ff12 	bl	810a9f4 <_free_r>
 810abd0:	4625      	mov	r5, r4
 810abd2:	4628      	mov	r0, r5
 810abd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810abd8:	f000 f838 	bl	810ac4c <_malloc_usable_size_r>
 810abdc:	4284      	cmp	r4, r0
 810abde:	4607      	mov	r7, r0
 810abe0:	d802      	bhi.n	810abe8 <_realloc_r+0x34>
 810abe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810abe6:	d812      	bhi.n	810ac0e <_realloc_r+0x5a>
 810abe8:	4621      	mov	r1, r4
 810abea:	4640      	mov	r0, r8
 810abec:	f7ff ff6e 	bl	810aacc <_malloc_r>
 810abf0:	4605      	mov	r5, r0
 810abf2:	2800      	cmp	r0, #0
 810abf4:	d0ed      	beq.n	810abd2 <_realloc_r+0x1e>
 810abf6:	42bc      	cmp	r4, r7
 810abf8:	4622      	mov	r2, r4
 810abfa:	4631      	mov	r1, r6
 810abfc:	bf28      	it	cs
 810abfe:	463a      	movcs	r2, r7
 810ac00:	f7ff fed0 	bl	810a9a4 <memcpy>
 810ac04:	4631      	mov	r1, r6
 810ac06:	4640      	mov	r0, r8
 810ac08:	f7ff fef4 	bl	810a9f4 <_free_r>
 810ac0c:	e7e1      	b.n	810abd2 <_realloc_r+0x1e>
 810ac0e:	4635      	mov	r5, r6
 810ac10:	e7df      	b.n	810abd2 <_realloc_r+0x1e>
	...

0810ac14 <_sbrk_r>:
 810ac14:	b538      	push	{r3, r4, r5, lr}
 810ac16:	4d06      	ldr	r5, [pc, #24]	; (810ac30 <_sbrk_r+0x1c>)
 810ac18:	2300      	movs	r3, #0
 810ac1a:	4604      	mov	r4, r0
 810ac1c:	4608      	mov	r0, r1
 810ac1e:	602b      	str	r3, [r5, #0]
 810ac20:	f000 f842 	bl	810aca8 <_sbrk>
 810ac24:	1c43      	adds	r3, r0, #1
 810ac26:	d102      	bne.n	810ac2e <_sbrk_r+0x1a>
 810ac28:	682b      	ldr	r3, [r5, #0]
 810ac2a:	b103      	cbz	r3, 810ac2e <_sbrk_r+0x1a>
 810ac2c:	6023      	str	r3, [r4, #0]
 810ac2e:	bd38      	pop	{r3, r4, r5, pc}
 810ac30:	10000414 	.word	0x10000414

0810ac34 <__malloc_lock>:
 810ac34:	4801      	ldr	r0, [pc, #4]	; (810ac3c <__malloc_lock+0x8>)
 810ac36:	f000 b811 	b.w	810ac5c <__retarget_lock_acquire_recursive>
 810ac3a:	bf00      	nop
 810ac3c:	10000418 	.word	0x10000418

0810ac40 <__malloc_unlock>:
 810ac40:	4801      	ldr	r0, [pc, #4]	; (810ac48 <__malloc_unlock+0x8>)
 810ac42:	f000 b80c 	b.w	810ac5e <__retarget_lock_release_recursive>
 810ac46:	bf00      	nop
 810ac48:	10000418 	.word	0x10000418

0810ac4c <_malloc_usable_size_r>:
 810ac4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ac50:	1f18      	subs	r0, r3, #4
 810ac52:	2b00      	cmp	r3, #0
 810ac54:	bfbc      	itt	lt
 810ac56:	580b      	ldrlt	r3, [r1, r0]
 810ac58:	18c0      	addlt	r0, r0, r3
 810ac5a:	4770      	bx	lr

0810ac5c <__retarget_lock_acquire_recursive>:
 810ac5c:	4770      	bx	lr

0810ac5e <__retarget_lock_release_recursive>:
 810ac5e:	4770      	bx	lr

0810ac60 <roundf>:
 810ac60:	ee10 0a10 	vmov	r0, s0
 810ac64:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 810ac68:	3a7f      	subs	r2, #127	; 0x7f
 810ac6a:	2a16      	cmp	r2, #22
 810ac6c:	dc15      	bgt.n	810ac9a <roundf+0x3a>
 810ac6e:	2a00      	cmp	r2, #0
 810ac70:	da08      	bge.n	810ac84 <roundf+0x24>
 810ac72:	3201      	adds	r2, #1
 810ac74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 810ac78:	d101      	bne.n	810ac7e <roundf+0x1e>
 810ac7a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 810ac7e:	ee00 3a10 	vmov	s0, r3
 810ac82:	4770      	bx	lr
 810ac84:	4907      	ldr	r1, [pc, #28]	; (810aca4 <roundf+0x44>)
 810ac86:	4111      	asrs	r1, r2
 810ac88:	4208      	tst	r0, r1
 810ac8a:	d0fa      	beq.n	810ac82 <roundf+0x22>
 810ac8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 810ac90:	4113      	asrs	r3, r2
 810ac92:	4403      	add	r3, r0
 810ac94:	ea23 0301 	bic.w	r3, r3, r1
 810ac98:	e7f1      	b.n	810ac7e <roundf+0x1e>
 810ac9a:	2a80      	cmp	r2, #128	; 0x80
 810ac9c:	d1f1      	bne.n	810ac82 <roundf+0x22>
 810ac9e:	ee30 0a00 	vadd.f32	s0, s0, s0
 810aca2:	4770      	bx	lr
 810aca4:	007fffff 	.word	0x007fffff

0810aca8 <_sbrk>:
 810aca8:	4a04      	ldr	r2, [pc, #16]	; (810acbc <_sbrk+0x14>)
 810acaa:	6811      	ldr	r1, [r2, #0]
 810acac:	4603      	mov	r3, r0
 810acae:	b909      	cbnz	r1, 810acb4 <_sbrk+0xc>
 810acb0:	4903      	ldr	r1, [pc, #12]	; (810acc0 <_sbrk+0x18>)
 810acb2:	6011      	str	r1, [r2, #0]
 810acb4:	6810      	ldr	r0, [r2, #0]
 810acb6:	4403      	add	r3, r0
 810acb8:	6013      	str	r3, [r2, #0]
 810acba:	4770      	bx	lr
 810acbc:	1000041c 	.word	0x1000041c
 810acc0:	10000420 	.word	0x10000420

0810acc4 <_init>:
 810acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810acc6:	bf00      	nop
 810acc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810acca:	bc08      	pop	{r3}
 810accc:	469e      	mov	lr, r3
 810acce:	4770      	bx	lr

0810acd0 <_fini>:
 810acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810acd2:	bf00      	nop
 810acd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810acd6:	bc08      	pop	{r3}
 810acd8:	469e      	mov	lr, r3
 810acda:	4770      	bx	lr
