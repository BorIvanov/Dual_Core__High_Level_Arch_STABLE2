
Dual_Core__High_Level_Arch_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab78  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0810ae18  0810ae18  0001ae18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810b35c  0810b35c  0001b35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810b364  0810b364  0001b364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810b368  0810b368  0001b368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  10000000  0810b36c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003bc  10000088  0810b3f0  00020088  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  10000444  0810b3f0  00020444  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002410c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046d2  00000000  00000000  000441c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c70  00000000  00000000  00048898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a78  00000000  00000000  0004a508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004171a  00000000  00000000  0004bf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000280ee  00000000  00000000  0008d69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a2e49  00000000  00000000  000b5788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002585d1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007aec  00000000  00000000  00258624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000088 	.word	0x10000088
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810ae00 	.word	0x0810ae00

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000008c 	.word	0x1000008c
 81002dc:	0810ae00 	.word	0x0810ae00

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_drsub>:
 8100380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100384:	e002      	b.n	810038c <__adddf3>
 8100386:	bf00      	nop

08100388 <__aeabi_dsub>:
 8100388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810038c <__adddf3>:
 810038c:	b530      	push	{r4, r5, lr}
 810038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8100392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8100396:	ea94 0f05 	teq	r4, r5
 810039a:	bf08      	it	eq
 810039c:	ea90 0f02 	teqeq	r0, r2
 81003a0:	bf1f      	itttt	ne
 81003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003b2:	f000 80e2 	beq.w	810057a <__adddf3+0x1ee>
 81003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003be:	bfb8      	it	lt
 81003c0:	426d      	neglt	r5, r5
 81003c2:	dd0c      	ble.n	81003de <__adddf3+0x52>
 81003c4:	442c      	add	r4, r5
 81003c6:	ea80 0202 	eor.w	r2, r0, r2
 81003ca:	ea81 0303 	eor.w	r3, r1, r3
 81003ce:	ea82 0000 	eor.w	r0, r2, r0
 81003d2:	ea83 0101 	eor.w	r1, r3, r1
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	2d36      	cmp	r5, #54	; 0x36
 81003e0:	bf88      	it	hi
 81003e2:	bd30      	pophi	{r4, r5, pc}
 81003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 81003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 81003f4:	d002      	beq.n	81003fc <__adddf3+0x70>
 81003f6:	4240      	negs	r0, r0
 81003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100408:	d002      	beq.n	8100410 <__adddf3+0x84>
 810040a:	4252      	negs	r2, r2
 810040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100410:	ea94 0f05 	teq	r4, r5
 8100414:	f000 80a7 	beq.w	8100566 <__adddf3+0x1da>
 8100418:	f1a4 0401 	sub.w	r4, r4, #1
 810041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100420:	db0d      	blt.n	810043e <__adddf3+0xb2>
 8100422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100426:	fa22 f205 	lsr.w	r2, r2, r5
 810042a:	1880      	adds	r0, r0, r2
 810042c:	f141 0100 	adc.w	r1, r1, #0
 8100430:	fa03 f20e 	lsl.w	r2, r3, lr
 8100434:	1880      	adds	r0, r0, r2
 8100436:	fa43 f305 	asr.w	r3, r3, r5
 810043a:	4159      	adcs	r1, r3
 810043c:	e00e      	b.n	810045c <__adddf3+0xd0>
 810043e:	f1a5 0520 	sub.w	r5, r5, #32
 8100442:	f10e 0e20 	add.w	lr, lr, #32
 8100446:	2a01      	cmp	r2, #1
 8100448:	fa03 fc0e 	lsl.w	ip, r3, lr
 810044c:	bf28      	it	cs
 810044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100452:	fa43 f305 	asr.w	r3, r3, r5
 8100456:	18c0      	adds	r0, r0, r3
 8100458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100460:	d507      	bpl.n	8100472 <__adddf3+0xe6>
 8100462:	f04f 0e00 	mov.w	lr, #0
 8100466:	f1dc 0c00 	rsbs	ip, ip, #0
 810046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100476:	d31b      	bcc.n	81004b0 <__adddf3+0x124>
 8100478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810047c:	d30c      	bcc.n	8100498 <__adddf3+0x10c>
 810047e:	0849      	lsrs	r1, r1, #1
 8100480:	ea5f 0030 	movs.w	r0, r0, rrx
 8100484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100488:	f104 0401 	add.w	r4, r4, #1
 810048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8100490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8100494:	f080 809a 	bcs.w	81005cc <__adddf3+0x240>
 8100498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 810049c:	bf08      	it	eq
 810049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004a2:	f150 0000 	adcs.w	r0, r0, #0
 81004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004aa:	ea41 0105 	orr.w	r1, r1, r5
 81004ae:	bd30      	pop	{r4, r5, pc}
 81004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004b4:	4140      	adcs	r0, r0
 81004b6:	eb41 0101 	adc.w	r1, r1, r1
 81004ba:	3c01      	subs	r4, #1
 81004bc:	bf28      	it	cs
 81004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004c2:	d2e9      	bcs.n	8100498 <__adddf3+0x10c>
 81004c4:	f091 0f00 	teq	r1, #0
 81004c8:	bf04      	itt	eq
 81004ca:	4601      	moveq	r1, r0
 81004cc:	2000      	moveq	r0, #0
 81004ce:	fab1 f381 	clz	r3, r1
 81004d2:	bf08      	it	eq
 81004d4:	3320      	addeq	r3, #32
 81004d6:	f1a3 030b 	sub.w	r3, r3, #11
 81004da:	f1b3 0220 	subs.w	r2, r3, #32
 81004de:	da0c      	bge.n	81004fa <__adddf3+0x16e>
 81004e0:	320c      	adds	r2, #12
 81004e2:	dd08      	ble.n	81004f6 <__adddf3+0x16a>
 81004e4:	f102 0c14 	add.w	ip, r2, #20
 81004e8:	f1c2 020c 	rsb	r2, r2, #12
 81004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 81004f0:	fa21 f102 	lsr.w	r1, r1, r2
 81004f4:	e00c      	b.n	8100510 <__adddf3+0x184>
 81004f6:	f102 0214 	add.w	r2, r2, #20
 81004fa:	bfd8      	it	le
 81004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8100500:	fa01 f102 	lsl.w	r1, r1, r2
 8100504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100508:	bfdc      	itt	le
 810050a:	ea41 010c 	orrle.w	r1, r1, ip
 810050e:	4090      	lslle	r0, r2
 8100510:	1ae4      	subs	r4, r4, r3
 8100512:	bfa2      	ittt	ge
 8100514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100518:	4329      	orrge	r1, r5
 810051a:	bd30      	popge	{r4, r5, pc}
 810051c:	ea6f 0404 	mvn.w	r4, r4
 8100520:	3c1f      	subs	r4, #31
 8100522:	da1c      	bge.n	810055e <__adddf3+0x1d2>
 8100524:	340c      	adds	r4, #12
 8100526:	dc0e      	bgt.n	8100546 <__adddf3+0x1ba>
 8100528:	f104 0414 	add.w	r4, r4, #20
 810052c:	f1c4 0220 	rsb	r2, r4, #32
 8100530:	fa20 f004 	lsr.w	r0, r0, r4
 8100534:	fa01 f302 	lsl.w	r3, r1, r2
 8100538:	ea40 0003 	orr.w	r0, r0, r3
 810053c:	fa21 f304 	lsr.w	r3, r1, r4
 8100540:	ea45 0103 	orr.w	r1, r5, r3
 8100544:	bd30      	pop	{r4, r5, pc}
 8100546:	f1c4 040c 	rsb	r4, r4, #12
 810054a:	f1c4 0220 	rsb	r2, r4, #32
 810054e:	fa20 f002 	lsr.w	r0, r0, r2
 8100552:	fa01 f304 	lsl.w	r3, r1, r4
 8100556:	ea40 0003 	orr.w	r0, r0, r3
 810055a:	4629      	mov	r1, r5
 810055c:	bd30      	pop	{r4, r5, pc}
 810055e:	fa21 f004 	lsr.w	r0, r1, r4
 8100562:	4629      	mov	r1, r5
 8100564:	bd30      	pop	{r4, r5, pc}
 8100566:	f094 0f00 	teq	r4, #0
 810056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810056e:	bf06      	itte	eq
 8100570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100574:	3401      	addeq	r4, #1
 8100576:	3d01      	subne	r5, #1
 8100578:	e74e      	b.n	8100418 <__adddf3+0x8c>
 810057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810057e:	bf18      	it	ne
 8100580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100584:	d029      	beq.n	81005da <__adddf3+0x24e>
 8100586:	ea94 0f05 	teq	r4, r5
 810058a:	bf08      	it	eq
 810058c:	ea90 0f02 	teqeq	r0, r2
 8100590:	d005      	beq.n	810059e <__adddf3+0x212>
 8100592:	ea54 0c00 	orrs.w	ip, r4, r0
 8100596:	bf04      	itt	eq
 8100598:	4619      	moveq	r1, r3
 810059a:	4610      	moveq	r0, r2
 810059c:	bd30      	pop	{r4, r5, pc}
 810059e:	ea91 0f03 	teq	r1, r3
 81005a2:	bf1e      	ittt	ne
 81005a4:	2100      	movne	r1, #0
 81005a6:	2000      	movne	r0, #0
 81005a8:	bd30      	popne	{r4, r5, pc}
 81005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005ae:	d105      	bne.n	81005bc <__adddf3+0x230>
 81005b0:	0040      	lsls	r0, r0, #1
 81005b2:	4149      	adcs	r1, r1
 81005b4:	bf28      	it	cs
 81005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ba:	bd30      	pop	{r4, r5, pc}
 81005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005c0:	bf3c      	itt	cc
 81005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005c6:	bd30      	popcc	{r4, r5, pc}
 81005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005d4:	f04f 0000 	mov.w	r0, #0
 81005d8:	bd30      	pop	{r4, r5, pc}
 81005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005de:	bf1a      	itte	ne
 81005e0:	4619      	movne	r1, r3
 81005e2:	4610      	movne	r0, r2
 81005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005e8:	bf1c      	itt	ne
 81005ea:	460b      	movne	r3, r1
 81005ec:	4602      	movne	r2, r0
 81005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 81005f2:	bf06      	itte	eq
 81005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 81005f8:	ea91 0f03 	teqeq	r1, r3
 81005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100600:	bd30      	pop	{r4, r5, pc}
 8100602:	bf00      	nop

08100604 <__aeabi_ui2d>:
 8100604:	f090 0f00 	teq	r0, #0
 8100608:	bf04      	itt	eq
 810060a:	2100      	moveq	r1, #0
 810060c:	4770      	bxeq	lr
 810060e:	b530      	push	{r4, r5, lr}
 8100610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100618:	f04f 0500 	mov.w	r5, #0
 810061c:	f04f 0100 	mov.w	r1, #0
 8100620:	e750      	b.n	81004c4 <__adddf3+0x138>
 8100622:	bf00      	nop

08100624 <__aeabi_i2d>:
 8100624:	f090 0f00 	teq	r0, #0
 8100628:	bf04      	itt	eq
 810062a:	2100      	moveq	r1, #0
 810062c:	4770      	bxeq	lr
 810062e:	b530      	push	{r4, r5, lr}
 8100630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810063c:	bf48      	it	mi
 810063e:	4240      	negmi	r0, r0
 8100640:	f04f 0100 	mov.w	r1, #0
 8100644:	e73e      	b.n	81004c4 <__adddf3+0x138>
 8100646:	bf00      	nop

08100648 <__aeabi_f2d>:
 8100648:	0042      	lsls	r2, r0, #1
 810064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100656:	bf1f      	itttt	ne
 8100658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100664:	4770      	bxne	lr
 8100666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810066a:	bf08      	it	eq
 810066c:	4770      	bxeq	lr
 810066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100672:	bf04      	itt	eq
 8100674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100678:	4770      	bxeq	lr
 810067a:	b530      	push	{r4, r5, lr}
 810067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100688:	e71c      	b.n	81004c4 <__adddf3+0x138>
 810068a:	bf00      	nop

0810068c <__aeabi_ul2d>:
 810068c:	ea50 0201 	orrs.w	r2, r0, r1
 8100690:	bf08      	it	eq
 8100692:	4770      	bxeq	lr
 8100694:	b530      	push	{r4, r5, lr}
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	e00a      	b.n	81006b2 <__aeabi_l2d+0x16>

0810069c <__aeabi_l2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006aa:	d502      	bpl.n	81006b2 <__aeabi_l2d+0x16>
 81006ac:	4240      	negs	r0, r0
 81006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006be:	f43f aed8 	beq.w	8100472 <__adddf3+0xe6>
 81006c2:	f04f 0203 	mov.w	r2, #3
 81006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006ca:	bf18      	it	ne
 81006cc:	3203      	addne	r2, #3
 81006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006d2:	bf18      	it	ne
 81006d4:	3203      	addne	r2, #3
 81006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006da:	f1c2 0320 	rsb	r3, r2, #32
 81006de:	fa00 fc03 	lsl.w	ip, r0, r3
 81006e2:	fa20 f002 	lsr.w	r0, r0, r2
 81006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006ea:	ea40 000e 	orr.w	r0, r0, lr
 81006ee:	fa21 f102 	lsr.w	r1, r1, r2
 81006f2:	4414      	add	r4, r2
 81006f4:	e6bd      	b.n	8100472 <__adddf3+0xe6>
 81006f6:	bf00      	nop

081006f8 <__gedf2>:
 81006f8:	f04f 3cff 	mov.w	ip, #4294967295
 81006fc:	e006      	b.n	810070c <__cmpdf2+0x4>
 81006fe:	bf00      	nop

08100700 <__ledf2>:
 8100700:	f04f 0c01 	mov.w	ip, #1
 8100704:	e002      	b.n	810070c <__cmpdf2+0x4>
 8100706:	bf00      	nop

08100708 <__cmpdf2>:
 8100708:	f04f 0c01 	mov.w	ip, #1
 810070c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100710:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100714:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100718:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 810071c:	bf18      	it	ne
 810071e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100722:	d01b      	beq.n	810075c <__cmpdf2+0x54>
 8100724:	b001      	add	sp, #4
 8100726:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 810072a:	bf0c      	ite	eq
 810072c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100730:	ea91 0f03 	teqne	r1, r3
 8100734:	bf02      	ittt	eq
 8100736:	ea90 0f02 	teqeq	r0, r2
 810073a:	2000      	moveq	r0, #0
 810073c:	4770      	bxeq	lr
 810073e:	f110 0f00 	cmn.w	r0, #0
 8100742:	ea91 0f03 	teq	r1, r3
 8100746:	bf58      	it	pl
 8100748:	4299      	cmppl	r1, r3
 810074a:	bf08      	it	eq
 810074c:	4290      	cmpeq	r0, r2
 810074e:	bf2c      	ite	cs
 8100750:	17d8      	asrcs	r0, r3, #31
 8100752:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100756:	f040 0001 	orr.w	r0, r0, #1
 810075a:	4770      	bx	lr
 810075c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100764:	d102      	bne.n	810076c <__cmpdf2+0x64>
 8100766:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 810076a:	d107      	bne.n	810077c <__cmpdf2+0x74>
 810076c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100770:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100774:	d1d6      	bne.n	8100724 <__cmpdf2+0x1c>
 8100776:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 810077a:	d0d3      	beq.n	8100724 <__cmpdf2+0x1c>
 810077c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100780:	4770      	bx	lr
 8100782:	bf00      	nop

08100784 <__aeabi_cdrcmple>:
 8100784:	4684      	mov	ip, r0
 8100786:	4610      	mov	r0, r2
 8100788:	4662      	mov	r2, ip
 810078a:	468c      	mov	ip, r1
 810078c:	4619      	mov	r1, r3
 810078e:	4663      	mov	r3, ip
 8100790:	e000      	b.n	8100794 <__aeabi_cdcmpeq>
 8100792:	bf00      	nop

08100794 <__aeabi_cdcmpeq>:
 8100794:	b501      	push	{r0, lr}
 8100796:	f7ff ffb7 	bl	8100708 <__cmpdf2>
 810079a:	2800      	cmp	r0, #0
 810079c:	bf48      	it	mi
 810079e:	f110 0f00 	cmnmi.w	r0, #0
 81007a2:	bd01      	pop	{r0, pc}

081007a4 <__aeabi_dcmpeq>:
 81007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007a8:	f7ff fff4 	bl	8100794 <__aeabi_cdcmpeq>
 81007ac:	bf0c      	ite	eq
 81007ae:	2001      	moveq	r0, #1
 81007b0:	2000      	movne	r0, #0
 81007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 81007b6:	bf00      	nop

081007b8 <__aeabi_dcmplt>:
 81007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007bc:	f7ff ffea 	bl	8100794 <__aeabi_cdcmpeq>
 81007c0:	bf34      	ite	cc
 81007c2:	2001      	movcc	r0, #1
 81007c4:	2000      	movcs	r0, #0
 81007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 81007ca:	bf00      	nop

081007cc <__aeabi_dcmple>:
 81007cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007d0:	f7ff ffe0 	bl	8100794 <__aeabi_cdcmpeq>
 81007d4:	bf94      	ite	ls
 81007d6:	2001      	movls	r0, #1
 81007d8:	2000      	movhi	r0, #0
 81007da:	f85d fb08 	ldr.w	pc, [sp], #8
 81007de:	bf00      	nop

081007e0 <__aeabi_dcmpge>:
 81007e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007e4:	f7ff ffce 	bl	8100784 <__aeabi_cdrcmple>
 81007e8:	bf94      	ite	ls
 81007ea:	2001      	movls	r0, #1
 81007ec:	2000      	movhi	r0, #0
 81007ee:	f85d fb08 	ldr.w	pc, [sp], #8
 81007f2:	bf00      	nop

081007f4 <__aeabi_dcmpgt>:
 81007f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 81007f8:	f7ff ffc4 	bl	8100784 <__aeabi_cdrcmple>
 81007fc:	bf34      	ite	cc
 81007fe:	2001      	movcc	r0, #1
 8100800:	2000      	movcs	r0, #0
 8100802:	f85d fb08 	ldr.w	pc, [sp], #8
 8100806:	bf00      	nop

08100808 <__aeabi_d2iz>:
 8100808:	ea4f 0241 	mov.w	r2, r1, lsl #1
 810080c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100810:	d215      	bcs.n	810083e <__aeabi_d2iz+0x36>
 8100812:	d511      	bpl.n	8100838 <__aeabi_d2iz+0x30>
 8100814:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100818:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 810081c:	d912      	bls.n	8100844 <__aeabi_d2iz+0x3c>
 810081e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100822:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100826:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 810082a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 810082e:	fa23 f002 	lsr.w	r0, r3, r2
 8100832:	bf18      	it	ne
 8100834:	4240      	negne	r0, r0
 8100836:	4770      	bx	lr
 8100838:	f04f 0000 	mov.w	r0, #0
 810083c:	4770      	bx	lr
 810083e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100842:	d105      	bne.n	8100850 <__aeabi_d2iz+0x48>
 8100844:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100848:	bf08      	it	eq
 810084a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 810084e:	4770      	bx	lr
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	4770      	bx	lr
 8100856:	bf00      	nop

08100858 <__aeabi_uldivmod>:
 8100858:	b953      	cbnz	r3, 8100870 <__aeabi_uldivmod+0x18>
 810085a:	b94a      	cbnz	r2, 8100870 <__aeabi_uldivmod+0x18>
 810085c:	2900      	cmp	r1, #0
 810085e:	bf08      	it	eq
 8100860:	2800      	cmpeq	r0, #0
 8100862:	bf1c      	itt	ne
 8100864:	f04f 31ff 	movne.w	r1, #4294967295
 8100868:	f04f 30ff 	movne.w	r0, #4294967295
 810086c:	f000 b974 	b.w	8100b58 <__aeabi_idiv0>
 8100870:	f1ad 0c08 	sub.w	ip, sp, #8
 8100874:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100878:	f000 f806 	bl	8100888 <__udivmoddi4>
 810087c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100884:	b004      	add	sp, #16
 8100886:	4770      	bx	lr

08100888 <__udivmoddi4>:
 8100888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810088c:	9d08      	ldr	r5, [sp, #32]
 810088e:	4604      	mov	r4, r0
 8100890:	468e      	mov	lr, r1
 8100892:	2b00      	cmp	r3, #0
 8100894:	d14d      	bne.n	8100932 <__udivmoddi4+0xaa>
 8100896:	428a      	cmp	r2, r1
 8100898:	4694      	mov	ip, r2
 810089a:	d969      	bls.n	8100970 <__udivmoddi4+0xe8>
 810089c:	fab2 f282 	clz	r2, r2
 81008a0:	b152      	cbz	r2, 81008b8 <__udivmoddi4+0x30>
 81008a2:	fa01 f302 	lsl.w	r3, r1, r2
 81008a6:	f1c2 0120 	rsb	r1, r2, #32
 81008aa:	fa20 f101 	lsr.w	r1, r0, r1
 81008ae:	fa0c fc02 	lsl.w	ip, ip, r2
 81008b2:	ea41 0e03 	orr.w	lr, r1, r3
 81008b6:	4094      	lsls	r4, r2
 81008b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81008bc:	0c21      	lsrs	r1, r4, #16
 81008be:	fbbe f6f8 	udiv	r6, lr, r8
 81008c2:	fa1f f78c 	uxth.w	r7, ip
 81008c6:	fb08 e316 	mls	r3, r8, r6, lr
 81008ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 81008ce:	fb06 f107 	mul.w	r1, r6, r7
 81008d2:	4299      	cmp	r1, r3
 81008d4:	d90a      	bls.n	81008ec <__udivmoddi4+0x64>
 81008d6:	eb1c 0303 	adds.w	r3, ip, r3
 81008da:	f106 30ff 	add.w	r0, r6, #4294967295
 81008de:	f080 811f 	bcs.w	8100b20 <__udivmoddi4+0x298>
 81008e2:	4299      	cmp	r1, r3
 81008e4:	f240 811c 	bls.w	8100b20 <__udivmoddi4+0x298>
 81008e8:	3e02      	subs	r6, #2
 81008ea:	4463      	add	r3, ip
 81008ec:	1a5b      	subs	r3, r3, r1
 81008ee:	b2a4      	uxth	r4, r4
 81008f0:	fbb3 f0f8 	udiv	r0, r3, r8
 81008f4:	fb08 3310 	mls	r3, r8, r0, r3
 81008f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 81008fc:	fb00 f707 	mul.w	r7, r0, r7
 8100900:	42a7      	cmp	r7, r4
 8100902:	d90a      	bls.n	810091a <__udivmoddi4+0x92>
 8100904:	eb1c 0404 	adds.w	r4, ip, r4
 8100908:	f100 33ff 	add.w	r3, r0, #4294967295
 810090c:	f080 810a 	bcs.w	8100b24 <__udivmoddi4+0x29c>
 8100910:	42a7      	cmp	r7, r4
 8100912:	f240 8107 	bls.w	8100b24 <__udivmoddi4+0x29c>
 8100916:	4464      	add	r4, ip
 8100918:	3802      	subs	r0, #2
 810091a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810091e:	1be4      	subs	r4, r4, r7
 8100920:	2600      	movs	r6, #0
 8100922:	b11d      	cbz	r5, 810092c <__udivmoddi4+0xa4>
 8100924:	40d4      	lsrs	r4, r2
 8100926:	2300      	movs	r3, #0
 8100928:	e9c5 4300 	strd	r4, r3, [r5]
 810092c:	4631      	mov	r1, r6
 810092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100932:	428b      	cmp	r3, r1
 8100934:	d909      	bls.n	810094a <__udivmoddi4+0xc2>
 8100936:	2d00      	cmp	r5, #0
 8100938:	f000 80ef 	beq.w	8100b1a <__udivmoddi4+0x292>
 810093c:	2600      	movs	r6, #0
 810093e:	e9c5 0100 	strd	r0, r1, [r5]
 8100942:	4630      	mov	r0, r6
 8100944:	4631      	mov	r1, r6
 8100946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810094a:	fab3 f683 	clz	r6, r3
 810094e:	2e00      	cmp	r6, #0
 8100950:	d14a      	bne.n	81009e8 <__udivmoddi4+0x160>
 8100952:	428b      	cmp	r3, r1
 8100954:	d302      	bcc.n	810095c <__udivmoddi4+0xd4>
 8100956:	4282      	cmp	r2, r0
 8100958:	f200 80f9 	bhi.w	8100b4e <__udivmoddi4+0x2c6>
 810095c:	1a84      	subs	r4, r0, r2
 810095e:	eb61 0303 	sbc.w	r3, r1, r3
 8100962:	2001      	movs	r0, #1
 8100964:	469e      	mov	lr, r3
 8100966:	2d00      	cmp	r5, #0
 8100968:	d0e0      	beq.n	810092c <__udivmoddi4+0xa4>
 810096a:	e9c5 4e00 	strd	r4, lr, [r5]
 810096e:	e7dd      	b.n	810092c <__udivmoddi4+0xa4>
 8100970:	b902      	cbnz	r2, 8100974 <__udivmoddi4+0xec>
 8100972:	deff      	udf	#255	; 0xff
 8100974:	fab2 f282 	clz	r2, r2
 8100978:	2a00      	cmp	r2, #0
 810097a:	f040 8092 	bne.w	8100aa2 <__udivmoddi4+0x21a>
 810097e:	eba1 010c 	sub.w	r1, r1, ip
 8100982:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100986:	fa1f fe8c 	uxth.w	lr, ip
 810098a:	2601      	movs	r6, #1
 810098c:	0c20      	lsrs	r0, r4, #16
 810098e:	fbb1 f3f7 	udiv	r3, r1, r7
 8100992:	fb07 1113 	mls	r1, r7, r3, r1
 8100996:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810099a:	fb0e f003 	mul.w	r0, lr, r3
 810099e:	4288      	cmp	r0, r1
 81009a0:	d908      	bls.n	81009b4 <__udivmoddi4+0x12c>
 81009a2:	eb1c 0101 	adds.w	r1, ip, r1
 81009a6:	f103 38ff 	add.w	r8, r3, #4294967295
 81009aa:	d202      	bcs.n	81009b2 <__udivmoddi4+0x12a>
 81009ac:	4288      	cmp	r0, r1
 81009ae:	f200 80cb 	bhi.w	8100b48 <__udivmoddi4+0x2c0>
 81009b2:	4643      	mov	r3, r8
 81009b4:	1a09      	subs	r1, r1, r0
 81009b6:	b2a4      	uxth	r4, r4
 81009b8:	fbb1 f0f7 	udiv	r0, r1, r7
 81009bc:	fb07 1110 	mls	r1, r7, r0, r1
 81009c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 81009c4:	fb0e fe00 	mul.w	lr, lr, r0
 81009c8:	45a6      	cmp	lr, r4
 81009ca:	d908      	bls.n	81009de <__udivmoddi4+0x156>
 81009cc:	eb1c 0404 	adds.w	r4, ip, r4
 81009d0:	f100 31ff 	add.w	r1, r0, #4294967295
 81009d4:	d202      	bcs.n	81009dc <__udivmoddi4+0x154>
 81009d6:	45a6      	cmp	lr, r4
 81009d8:	f200 80bb 	bhi.w	8100b52 <__udivmoddi4+0x2ca>
 81009dc:	4608      	mov	r0, r1
 81009de:	eba4 040e 	sub.w	r4, r4, lr
 81009e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 81009e6:	e79c      	b.n	8100922 <__udivmoddi4+0x9a>
 81009e8:	f1c6 0720 	rsb	r7, r6, #32
 81009ec:	40b3      	lsls	r3, r6
 81009ee:	fa22 fc07 	lsr.w	ip, r2, r7
 81009f2:	ea4c 0c03 	orr.w	ip, ip, r3
 81009f6:	fa20 f407 	lsr.w	r4, r0, r7
 81009fa:	fa01 f306 	lsl.w	r3, r1, r6
 81009fe:	431c      	orrs	r4, r3
 8100a00:	40f9      	lsrs	r1, r7
 8100a02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100a06:	fa00 f306 	lsl.w	r3, r0, r6
 8100a0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8100a0e:	0c20      	lsrs	r0, r4, #16
 8100a10:	fa1f fe8c 	uxth.w	lr, ip
 8100a14:	fb09 1118 	mls	r1, r9, r8, r1
 8100a18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100a1c:	fb08 f00e 	mul.w	r0, r8, lr
 8100a20:	4288      	cmp	r0, r1
 8100a22:	fa02 f206 	lsl.w	r2, r2, r6
 8100a26:	d90b      	bls.n	8100a40 <__udivmoddi4+0x1b8>
 8100a28:	eb1c 0101 	adds.w	r1, ip, r1
 8100a2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8100a30:	f080 8088 	bcs.w	8100b44 <__udivmoddi4+0x2bc>
 8100a34:	4288      	cmp	r0, r1
 8100a36:	f240 8085 	bls.w	8100b44 <__udivmoddi4+0x2bc>
 8100a3a:	f1a8 0802 	sub.w	r8, r8, #2
 8100a3e:	4461      	add	r1, ip
 8100a40:	1a09      	subs	r1, r1, r0
 8100a42:	b2a4      	uxth	r4, r4
 8100a44:	fbb1 f0f9 	udiv	r0, r1, r9
 8100a48:	fb09 1110 	mls	r1, r9, r0, r1
 8100a4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100a50:	fb00 fe0e 	mul.w	lr, r0, lr
 8100a54:	458e      	cmp	lr, r1
 8100a56:	d908      	bls.n	8100a6a <__udivmoddi4+0x1e2>
 8100a58:	eb1c 0101 	adds.w	r1, ip, r1
 8100a5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8100a60:	d26c      	bcs.n	8100b3c <__udivmoddi4+0x2b4>
 8100a62:	458e      	cmp	lr, r1
 8100a64:	d96a      	bls.n	8100b3c <__udivmoddi4+0x2b4>
 8100a66:	3802      	subs	r0, #2
 8100a68:	4461      	add	r1, ip
 8100a6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8100a6e:	fba0 9402 	umull	r9, r4, r0, r2
 8100a72:	eba1 010e 	sub.w	r1, r1, lr
 8100a76:	42a1      	cmp	r1, r4
 8100a78:	46c8      	mov	r8, r9
 8100a7a:	46a6      	mov	lr, r4
 8100a7c:	d356      	bcc.n	8100b2c <__udivmoddi4+0x2a4>
 8100a7e:	d053      	beq.n	8100b28 <__udivmoddi4+0x2a0>
 8100a80:	b15d      	cbz	r5, 8100a9a <__udivmoddi4+0x212>
 8100a82:	ebb3 0208 	subs.w	r2, r3, r8
 8100a86:	eb61 010e 	sbc.w	r1, r1, lr
 8100a8a:	fa01 f707 	lsl.w	r7, r1, r7
 8100a8e:	fa22 f306 	lsr.w	r3, r2, r6
 8100a92:	40f1      	lsrs	r1, r6
 8100a94:	431f      	orrs	r7, r3
 8100a96:	e9c5 7100 	strd	r7, r1, [r5]
 8100a9a:	2600      	movs	r6, #0
 8100a9c:	4631      	mov	r1, r6
 8100a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100aa2:	f1c2 0320 	rsb	r3, r2, #32
 8100aa6:	40d8      	lsrs	r0, r3
 8100aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8100aac:	fa21 f303 	lsr.w	r3, r1, r3
 8100ab0:	4091      	lsls	r1, r2
 8100ab2:	4301      	orrs	r1, r0
 8100ab4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100ab8:	fa1f fe8c 	uxth.w	lr, ip
 8100abc:	fbb3 f0f7 	udiv	r0, r3, r7
 8100ac0:	fb07 3610 	mls	r6, r7, r0, r3
 8100ac4:	0c0b      	lsrs	r3, r1, #16
 8100ac6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100aca:	fb00 f60e 	mul.w	r6, r0, lr
 8100ace:	429e      	cmp	r6, r3
 8100ad0:	fa04 f402 	lsl.w	r4, r4, r2
 8100ad4:	d908      	bls.n	8100ae8 <__udivmoddi4+0x260>
 8100ad6:	eb1c 0303 	adds.w	r3, ip, r3
 8100ada:	f100 38ff 	add.w	r8, r0, #4294967295
 8100ade:	d22f      	bcs.n	8100b40 <__udivmoddi4+0x2b8>
 8100ae0:	429e      	cmp	r6, r3
 8100ae2:	d92d      	bls.n	8100b40 <__udivmoddi4+0x2b8>
 8100ae4:	3802      	subs	r0, #2
 8100ae6:	4463      	add	r3, ip
 8100ae8:	1b9b      	subs	r3, r3, r6
 8100aea:	b289      	uxth	r1, r1
 8100aec:	fbb3 f6f7 	udiv	r6, r3, r7
 8100af0:	fb07 3316 	mls	r3, r7, r6, r3
 8100af4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100af8:	fb06 f30e 	mul.w	r3, r6, lr
 8100afc:	428b      	cmp	r3, r1
 8100afe:	d908      	bls.n	8100b12 <__udivmoddi4+0x28a>
 8100b00:	eb1c 0101 	adds.w	r1, ip, r1
 8100b04:	f106 38ff 	add.w	r8, r6, #4294967295
 8100b08:	d216      	bcs.n	8100b38 <__udivmoddi4+0x2b0>
 8100b0a:	428b      	cmp	r3, r1
 8100b0c:	d914      	bls.n	8100b38 <__udivmoddi4+0x2b0>
 8100b0e:	3e02      	subs	r6, #2
 8100b10:	4461      	add	r1, ip
 8100b12:	1ac9      	subs	r1, r1, r3
 8100b14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100b18:	e738      	b.n	810098c <__udivmoddi4+0x104>
 8100b1a:	462e      	mov	r6, r5
 8100b1c:	4628      	mov	r0, r5
 8100b1e:	e705      	b.n	810092c <__udivmoddi4+0xa4>
 8100b20:	4606      	mov	r6, r0
 8100b22:	e6e3      	b.n	81008ec <__udivmoddi4+0x64>
 8100b24:	4618      	mov	r0, r3
 8100b26:	e6f8      	b.n	810091a <__udivmoddi4+0x92>
 8100b28:	454b      	cmp	r3, r9
 8100b2a:	d2a9      	bcs.n	8100a80 <__udivmoddi4+0x1f8>
 8100b2c:	ebb9 0802 	subs.w	r8, r9, r2
 8100b30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8100b34:	3801      	subs	r0, #1
 8100b36:	e7a3      	b.n	8100a80 <__udivmoddi4+0x1f8>
 8100b38:	4646      	mov	r6, r8
 8100b3a:	e7ea      	b.n	8100b12 <__udivmoddi4+0x28a>
 8100b3c:	4620      	mov	r0, r4
 8100b3e:	e794      	b.n	8100a6a <__udivmoddi4+0x1e2>
 8100b40:	4640      	mov	r0, r8
 8100b42:	e7d1      	b.n	8100ae8 <__udivmoddi4+0x260>
 8100b44:	46d0      	mov	r8, sl
 8100b46:	e77b      	b.n	8100a40 <__udivmoddi4+0x1b8>
 8100b48:	3b02      	subs	r3, #2
 8100b4a:	4461      	add	r1, ip
 8100b4c:	e732      	b.n	81009b4 <__udivmoddi4+0x12c>
 8100b4e:	4630      	mov	r0, r6
 8100b50:	e709      	b.n	8100966 <__udivmoddi4+0xde>
 8100b52:	4464      	add	r4, ip
 8100b54:	3802      	subs	r0, #2
 8100b56:	e742      	b.n	81009de <__udivmoddi4+0x156>

08100b58 <__aeabi_idiv0>:
 8100b58:	4770      	bx	lr
 8100b5a:	bf00      	nop

08100b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100b5c:	b480      	push	{r7}
 8100b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100b60:	4b09      	ldr	r3, [pc, #36]	; (8100b88 <SystemInit+0x2c>)
 8100b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100b66:	4a08      	ldr	r2, [pc, #32]	; (8100b88 <SystemInit+0x2c>)
 8100b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100b70:	4b05      	ldr	r3, [pc, #20]	; (8100b88 <SystemInit+0x2c>)
 8100b72:	691b      	ldr	r3, [r3, #16]
 8100b74:	4a04      	ldr	r2, [pc, #16]	; (8100b88 <SystemInit+0x2c>)
 8100b76:	f043 0310 	orr.w	r3, r3, #16
 8100b7a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100b7c:	bf00      	nop
 8100b7e:	46bd      	mov	sp, r7
 8100b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b84:	4770      	bx	lr
 8100b86:	bf00      	nop
 8100b88:	e000ed00 	.word	0xe000ed00

08100b8c <open_all_columns>:
 */

#include "level_2/board_opener.h"

void open_all_columns(void)
{
 8100b8c:	b580      	push	{r7, lr}
 8100b8e:	af00      	add	r7, sp, #0
	// THIS order of opening has to be preserved

	open_column_2(); 	// Opening Column 2
 8100b90:	f000 f824 	bl	8100bdc <open_column_2>

	open_column_6(); 	// Opening Column 6
 8100b94:	f000 f86a 	bl	8100c6c <open_column_6>

	open_column_7();	// Opening Column 7
 8100b98:	f000 f87a 	bl	8100c90 <open_column_7>

	open_column_4();	// Opening Column 4
 8100b9c:	f000 f842 	bl	8100c24 <open_column_4>

	open_column_1();	// Opening Column 1
 8100ba0:	f000 f80a 	bl	8100bb8 <open_column_1>

	open_column_5();	// Opening Column 5
 8100ba4:	f000 f850 	bl	8100c48 <open_column_5>

	open_column_3();	// Opening Column 3
 8100ba8:	f000 f82a 	bl	8100c00 <open_column_3>

	open_fully();		// Opening the board fully
 8100bac:	f000 f882 	bl	8100cb4 <open_fully>

	close();			// Closing the board fully
 8100bb0:	f000 f892 	bl	8100cd8 <close>
}
 8100bb4:	bf00      	nop
 8100bb6:	bd80      	pop	{r7, pc}

08100bb8 <open_column_1>:

void open_column_1(void)
{
 8100bb8:	b580      	push	{r7, lr}
 8100bba:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 1\n\r");
 8100bbc:	4806      	ldr	r0, [pc, #24]	; (8100bd8 <open_column_1+0x20>)
 8100bbe:	f002 fa39 	bl	8103034 <send_msg>
	set_Slide_Servo(OPEN_COL_1);
 8100bc2:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8100bc6:	f000 ffcd 	bl	8101b64 <set_Slide_Servo>
	HAL_Delay(1000);
 8100bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100bce:	f002 fb39 	bl	8103244 <HAL_Delay>
}
 8100bd2:	bf00      	nop
 8100bd4:	bd80      	pop	{r7, pc}
 8100bd6:	bf00      	nop
 8100bd8:	0810ae18 	.word	0x0810ae18

08100bdc <open_column_2>:

void open_column_2(void)
{
 8100bdc:	b580      	push	{r7, lr}
 8100bde:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 2\n\r");
 8100be0:	4806      	ldr	r0, [pc, #24]	; (8100bfc <open_column_2+0x20>)
 8100be2:	f002 fa27 	bl	8103034 <send_msg>
	set_Slide_Servo(OPEN_COL_2);
 8100be6:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8100bea:	f000 ffbb 	bl	8101b64 <set_Slide_Servo>
	HAL_Delay(1000);
 8100bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100bf2:	f002 fb27 	bl	8103244 <HAL_Delay>
}
 8100bf6:	bf00      	nop
 8100bf8:	bd80      	pop	{r7, pc}
 8100bfa:	bf00      	nop
 8100bfc:	0810ae2c 	.word	0x0810ae2c

08100c00 <open_column_3>:

void open_column_3(void)
{
 8100c00:	b580      	push	{r7, lr}
 8100c02:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 3\n\r");
 8100c04:	4806      	ldr	r0, [pc, #24]	; (8100c20 <open_column_3+0x20>)
 8100c06:	f002 fa15 	bl	8103034 <send_msg>
	set_Slide_Servo(OPEN_COL_3);
 8100c0a:	eeb3 0a07 	vmov.f32	s0, #55	; 0x41b80000  23.0
 8100c0e:	f000 ffa9 	bl	8101b64 <set_Slide_Servo>
	HAL_Delay(1000);
 8100c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100c16:	f002 fb15 	bl	8103244 <HAL_Delay>
}
 8100c1a:	bf00      	nop
 8100c1c:	bd80      	pop	{r7, pc}
 8100c1e:	bf00      	nop
 8100c20:	0810ae40 	.word	0x0810ae40

08100c24 <open_column_4>:

void open_column_4(void)
{
 8100c24:	b580      	push	{r7, lr}
 8100c26:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 4\n\r");
 8100c28:	4806      	ldr	r0, [pc, #24]	; (8100c44 <open_column_4+0x20>)
 8100c2a:	f002 fa03 	bl	8103034 <send_msg>
	set_Slide_Servo(OPEN_COL_4);
 8100c2e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8100c32:	f000 ff97 	bl	8101b64 <set_Slide_Servo>
	HAL_Delay(1000);
 8100c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100c3a:	f002 fb03 	bl	8103244 <HAL_Delay>
}
 8100c3e:	bf00      	nop
 8100c40:	bd80      	pop	{r7, pc}
 8100c42:	bf00      	nop
 8100c44:	0810ae54 	.word	0x0810ae54

08100c48 <open_column_5>:

void open_column_5(void)
{
 8100c48:	b580      	push	{r7, lr}
 8100c4a:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 5\n\r");
 8100c4c:	4806      	ldr	r0, [pc, #24]	; (8100c68 <open_column_5+0x20>)
 8100c4e:	f002 f9f1 	bl	8103034 <send_msg>
	set_Slide_Servo(OPEN_COL_5);
 8100c52:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 8100c56:	f000 ff85 	bl	8101b64 <set_Slide_Servo>
	HAL_Delay(1000);
 8100c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100c5e:	f002 faf1 	bl	8103244 <HAL_Delay>
}
 8100c62:	bf00      	nop
 8100c64:	bd80      	pop	{r7, pc}
 8100c66:	bf00      	nop
 8100c68:	0810ae68 	.word	0x0810ae68

08100c6c <open_column_6>:

void open_column_6(void)
{
 8100c6c:	b580      	push	{r7, lr}
 8100c6e:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 6\n\r");
 8100c70:	4806      	ldr	r0, [pc, #24]	; (8100c8c <open_column_6+0x20>)
 8100c72:	f002 f9df 	bl	8103034 <send_msg>
	set_Slide_Servo(OPEN_COL_6);
 8100c76:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8100c7a:	f000 ff73 	bl	8101b64 <set_Slide_Servo>
	HAL_Delay(1000);
 8100c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100c82:	f002 fadf 	bl	8103244 <HAL_Delay>
}
 8100c86:	bf00      	nop
 8100c88:	bd80      	pop	{r7, pc}
 8100c8a:	bf00      	nop
 8100c8c:	0810ae7c 	.word	0x0810ae7c

08100c90 <open_column_7>:

void open_column_7(void)
{
 8100c90:	b580      	push	{r7, lr}
 8100c92:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening Column 7\n\r");
 8100c94:	4806      	ldr	r0, [pc, #24]	; (8100cb0 <open_column_7+0x20>)
 8100c96:	f002 f9cd 	bl	8103034 <send_msg>
	set_Slide_Servo(OPEN_COL_7);
 8100c9a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8100c9e:	f000 ff61 	bl	8101b64 <set_Slide_Servo>
	HAL_Delay(1000);
 8100ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100ca6:	f002 facd 	bl	8103244 <HAL_Delay>
}
 8100caa:	bf00      	nop
 8100cac:	bd80      	pop	{r7, pc}
 8100cae:	bf00      	nop
 8100cb0:	0810ae90 	.word	0x0810ae90

08100cb4 <open_fully>:

void open_fully(void)
{
 8100cb4:	b580      	push	{r7, lr}
 8100cb6:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rOpening board fully\n\r");
 8100cb8:	4806      	ldr	r0, [pc, #24]	; (8100cd4 <open_fully+0x20>)
 8100cba:	f002 f9bb 	bl	8103034 <send_msg>
	set_Slide_Servo(SLIDE_OPEN);
 8100cbe:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8100cc2:	f000 ff4f 	bl	8101b64 <set_Slide_Servo>
	HAL_Delay(1000);
 8100cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100cca:	f002 fabb 	bl	8103244 <HAL_Delay>
}
 8100cce:	bf00      	nop
 8100cd0:	bd80      	pop	{r7, pc}
 8100cd2:	bf00      	nop
 8100cd4:	0810aea4 	.word	0x0810aea4

08100cd8 <close>:

void close(void)
{
 8100cd8:	b580      	push	{r7, lr}
 8100cda:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\rClosing board fully\n\r");
 8100cdc:	4806      	ldr	r0, [pc, #24]	; (8100cf8 <close+0x20>)
 8100cde:	f002 f9a9 	bl	8103034 <send_msg>
	set_Slide_Servo(SLIDE_CLOSED);
 8100ce2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8100ce6:	f000 ff3d 	bl	8101b64 <set_Slide_Servo>
	HAL_Delay(1000);
 8100cea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100cee:	f002 faa9 	bl	8103244 <HAL_Delay>
}
 8100cf2:	bf00      	nop
 8100cf4:	bd80      	pop	{r7, pc}
 8100cf6:	bf00      	nop
 8100cf8:	0810aebc 	.word	0x0810aebc

08100cfc <start_PWM>:
#include "level_2/init_CM4.h"


void start_PWM(void)
/* start_PWM: Function which initialises the PWM TIMERs 2,13,14. */
{
 8100cfc:	b580      	push	{r7, lr}
 8100cfe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8100d00:	2100      	movs	r1, #0
 8100d02:	4808      	ldr	r0, [pc, #32]	; (8100d24 <start_PWM+0x28>)
 8100d04:	f007 f9ce 	bl	81080a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8100d08:	2100      	movs	r1, #0
 8100d0a:	4807      	ldr	r0, [pc, #28]	; (8100d28 <start_PWM+0x2c>)
 8100d0c:	f007 f9ca 	bl	81080a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8100d10:	2108      	movs	r1, #8
 8100d12:	4806      	ldr	r0, [pc, #24]	; (8100d2c <start_PWM+0x30>)
 8100d14:	f007 f9c6 	bl	81080a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8100d18:	210c      	movs	r1, #12
 8100d1a:	4804      	ldr	r0, [pc, #16]	; (8100d2c <start_PWM+0x30>)
 8100d1c:	f007 f9c2 	bl	81080a4 <HAL_TIM_PWM_Start>
}
 8100d20:	bf00      	nop
 8100d22:	bd80      	pop	{r7, pc}
 8100d24:	10000304 	.word	0x10000304
 8100d28:	10000350 	.word	0x10000350
 8100d2c:	100001d4 	.word	0x100001d4

08100d30 <init_Movement>:

void init_Movement(void)
/* start_Movement: Function which initialises the motors and servos */
{
 8100d30:	b580      	push	{r7, lr}
 8100d32:	af00      	add	r7, sp, #0
	initMotors();
 8100d34:	f000 fb96 	bl	8101464 <initMotors>
	set_Enable_Power();
 8100d38:	f001 fb5a 	bl	81023f0 <set_Enable_Power>
	start_PWM();
 8100d3c:	f7ff ffde 	bl	8100cfc <start_PWM>
}
 8100d40:	bf00      	nop
 8100d42:	bd80      	pop	{r7, pc}

08100d44 <init_MX_init>:

void init_MX_init(void)
/* start_MX_init: Function which initialises the STM32H peripherals */
{
 8100d44:	b580      	push	{r7, lr}
 8100d46:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8100d48:	f001 f88e 	bl	8101e68 <MX_ADC1_Init>
	MX_I2C1_Init();
 8100d4c:	f001 fb8a 	bl	8102464 <MX_I2C1_Init>
	MX_TIM2_Init();
 8100d50:	f001 fc84 	bl	810265c <MX_TIM2_Init>
	MX_TIM3_Init();
 8100d54:	f001 fce6 	bl	8102724 <MX_TIM3_Init>
	MX_TIM4_Init();
 8100d58:	f001 fd3a 	bl	81027d0 <MX_TIM4_Init>
	MX_TIM7_Init();
 8100d5c:	f001 fd8e 	bl	810287c <MX_TIM7_Init>
	MX_TIM13_Init();
 8100d60:	f001 fdc2 	bl	81028e8 <MX_TIM13_Init>
	MX_TIM14_Init();
 8100d64:	f001 fe0e 	bl	8102984 <MX_TIM14_Init>

	HAL_TIM_Base_Start_IT(&htim7); // activate interrupt for TIM7
 8100d68:	4802      	ldr	r0, [pc, #8]	; (8100d74 <init_MX_init+0x30>)
 8100d6a:	f007 f8cb 	bl	8107f04 <HAL_TIM_Base_Start_IT>

}
 8100d6e:	bf00      	nop
 8100d70:	bd80      	pop	{r7, pc}
 8100d72:	bf00      	nop
 8100d74:	100002b8 	.word	0x100002b8

08100d78 <init_Start_Up>:
void init_Start_Up(void)
/* init_Start_Up: Function to initialise the whole system and set inital values to PWMs
 *	The microcontroller peripherals. The Motors and Servos.
 *	Homes the servos.
 */
{
 8100d78:	b580      	push	{r7, lr}
 8100d7a:	af00      	add	r7, sp, #0
	// TODO: init global vars

	send_msg((uint8_t*)"\r!Initialising Micro-controller Signals!\n\r");
 8100d7c:	481c      	ldr	r0, [pc, #112]	; (8100df0 <init_Start_Up+0x78>)
 8100d7e:	f002 f959 	bl	8103034 <send_msg>
	init_MX_init();
 8100d82:	f7ff ffdf 	bl	8100d44 <init_MX_init>
	HAL_Delay(50);
 8100d86:	2032      	movs	r0, #50	; 0x32
 8100d88:	f002 fa5c 	bl	8103244 <HAL_Delay>

	send_msg((uint8_t*)"\r!Initialising movement signals!\n\r");
 8100d8c:	4819      	ldr	r0, [pc, #100]	; (8100df4 <init_Start_Up+0x7c>)
 8100d8e:	f002 f951 	bl	8103034 <send_msg>
	init_Movement();
 8100d92:	f7ff ffcd 	bl	8100d30 <init_Movement>
	HAL_Delay(50);
 8100d96:	2032      	movs	r0, #50	; 0x32
 8100d98:	f002 fa54 	bl	8103244 <HAL_Delay>

	send_msg((uint8_t*)"\rHoming Motors\n\r");
 8100d9c:	4816      	ldr	r0, [pc, #88]	; (8100df8 <init_Start_Up+0x80>)
 8100d9e:	f002 f949 	bl	8103034 <send_msg>
	HAL_Delay(50);
 8100da2:	2032      	movs	r0, #50	; 0x32
 8100da4:	f002 fa4e 	bl	8103244 <HAL_Delay>

	HomeMotors(1, 1); // homing motors
 8100da8:	2101      	movs	r1, #1
 8100daa:	2001      	movs	r0, #1
 8100dac:	f000 fb90 	bl	81014d0 <HomeMotors>
	HAL_Delay(50);
 8100db0:	2032      	movs	r0, #50	; 0x32
 8100db2:	f002 fa47 	bl	8103244 <HAL_Delay>

	send_msg((uint8_t*)"\r########Motors Homed########\n\r");
 8100db6:	4811      	ldr	r0, [pc, #68]	; (8100dfc <init_Start_Up+0x84>)
 8100db8:	f002 f93c 	bl	8103034 <send_msg>
	HAL_Delay(50);
 8100dbc:	2032      	movs	r0, #50	; 0x32
 8100dbe:	f002 fa41 	bl	8103244 <HAL_Delay>

	send_msg((uint8_t*)"\rHoming servos\n\r");
 8100dc2:	480f      	ldr	r0, [pc, #60]	; (8100e00 <init_Start_Up+0x88>)
 8100dc4:	f002 f936 	bl	8103034 <send_msg>
	HAL_Delay(50);
 8100dc8:	2032      	movs	r0, #50	; 0x32
 8100dca:	f002 fa3b 	bl	8103244 <HAL_Delay>

	set_Slide_Servo(SLIDE_CLOSED);
 8100dce:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8100dd2:	f000 fec7 	bl	8101b64 <set_Slide_Servo>
	set_Rotate_Servo(ROTATE_NEUTRAL);
 8100dd6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8100e04 <init_Start_Up+0x8c>
 8100dda:	f000 fe8d 	bl	8101af8 <set_Rotate_Servo>
	send_msg((uint8_t*)"\r########Servos Homed########\n\r");
 8100dde:	480a      	ldr	r0, [pc, #40]	; (8100e08 <init_Start_Up+0x90>)
 8100de0:	f002 f928 	bl	8103034 <send_msg>
	HAL_Delay(50);
 8100de4:	2032      	movs	r0, #50	; 0x32
 8100de6:	f002 fa2d 	bl	8103244 <HAL_Delay>

}
 8100dea:	bf00      	nop
 8100dec:	bd80      	pop	{r7, pc}
 8100dee:	bf00      	nop
 8100df0:	0810aed4 	.word	0x0810aed4
 8100df4:	0810af00 	.word	0x0810af00
 8100df8:	0810af24 	.word	0x0810af24
 8100dfc:	0810af38 	.word	0x0810af38
 8100e00:	0810af58 	.word	0x0810af58
 8100e04:	40a9999a 	.word	0x40a9999a
 8100e08:	0810af6c 	.word	0x0810af6c

08100e0c <activate_HSEM_Notifications>:
#include "level_2/task_manager.h"

void activate_HSEM_Notifications(void)
/* activate_HSEM_Notifications: Called in the beginning of the
 * program to activate notifications to look out for (ones arriving from CM7) */
{
 8100e0c:	b580      	push	{r7, lr}
 8100e0e:	af00      	add	r7, sp, #0
	HAL_HSEM_ActivateNotification(HSEM_CM7_TO_CM4_MASK);
 8100e10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8100e14:	f003 fe0a 	bl	8104a2c <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_CM4_INIT_MASK);
 8100e18:	2004      	movs	r0, #4
 8100e1a:	f003 fe07 	bl	8104a2c <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_ROBOT_TURN_MASK);
 8100e1e:	2010      	movs	r0, #16
 8100e20:	f003 fe04 	bl	8104a2c <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_USER_TURN_MASK);
 8100e24:	2008      	movs	r0, #8
 8100e26:	f003 fe01 	bl	8104a2c <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_GAME_END_MASK);
 8100e2a:	2020      	movs	r0, #32
 8100e2c:	f003 fdfe 	bl	8104a2c <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_CLEAN_UP_MASK);
 8100e30:	2040      	movs	r0, #64	; 0x40
 8100e32:	f003 fdfb 	bl	8104a2c <HAL_HSEM_ActivateNotification>
}
 8100e36:	bf00      	nop
 8100e38:	bd80      	pop	{r7, pc}
	...

08100e3c <HAL_HSEM_FreeCallback>:

void HAL_HSEM_FreeCallback(uint32_t SemMask)
/* Function is called automatically when a semaphore is released
 * This function takes care of HSEM's released from Cortex-M7 */
{
 8100e3c:	b580      	push	{r7, lr}
 8100e3e:	b082      	sub	sp, #8
 8100e40:	af00      	add	r7, sp, #0
 8100e42:	6078      	str	r0, [r7, #4]
	// Handle the semaphore release event
	switch (SemMask)
 8100e44:	687b      	ldr	r3, [r7, #4]
 8100e46:	2b20      	cmp	r3, #32
 8100e48:	d844      	bhi.n	8100ed4 <HAL_HSEM_FreeCallback+0x98>
 8100e4a:	687b      	ldr	r3, [r7, #4]
 8100e4c:	2b04      	cmp	r3, #4
 8100e4e:	d368      	bcc.n	8100f22 <HAL_HSEM_FreeCallback+0xe6>
 8100e50:	687b      	ldr	r3, [r7, #4]
 8100e52:	3b04      	subs	r3, #4
 8100e54:	2b1c      	cmp	r3, #28
 8100e56:	d864      	bhi.n	8100f22 <HAL_HSEM_FreeCallback+0xe6>
 8100e58:	a201      	add	r2, pc, #4	; (adr r2, 8100e60 <HAL_HSEM_FreeCallback+0x24>)
 8100e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100e5e:	bf00      	nop
 8100e60:	08100edd 	.word	0x08100edd
 8100e64:	08100f23 	.word	0x08100f23
 8100e68:	08100f23 	.word	0x08100f23
 8100e6c:	08100f23 	.word	0x08100f23
 8100e70:	08100ef9 	.word	0x08100ef9
 8100e74:	08100f23 	.word	0x08100f23
 8100e78:	08100f23 	.word	0x08100f23
 8100e7c:	08100f23 	.word	0x08100f23
 8100e80:	08100f23 	.word	0x08100f23
 8100e84:	08100f23 	.word	0x08100f23
 8100e88:	08100f23 	.word	0x08100f23
 8100e8c:	08100f23 	.word	0x08100f23
 8100e90:	08100eeb 	.word	0x08100eeb
 8100e94:	08100f23 	.word	0x08100f23
 8100e98:	08100f23 	.word	0x08100f23
 8100e9c:	08100f23 	.word	0x08100f23
 8100ea0:	08100f23 	.word	0x08100f23
 8100ea4:	08100f23 	.word	0x08100f23
 8100ea8:	08100f23 	.word	0x08100f23
 8100eac:	08100f23 	.word	0x08100f23
 8100eb0:	08100f23 	.word	0x08100f23
 8100eb4:	08100f23 	.word	0x08100f23
 8100eb8:	08100f23 	.word	0x08100f23
 8100ebc:	08100f23 	.word	0x08100f23
 8100ec0:	08100f23 	.word	0x08100f23
 8100ec4:	08100f23 	.word	0x08100f23
 8100ec8:	08100f23 	.word	0x08100f23
 8100ecc:	08100f23 	.word	0x08100f23
 8100ed0:	08100f07 	.word	0x08100f07
 8100ed4:	687b      	ldr	r3, [r7, #4]
 8100ed6:	2b40      	cmp	r3, #64	; 0x40
 8100ed8:	d01c      	beq.n	8100f14 <HAL_HSEM_FreeCallback+0xd8>
		current_state_CM4 = STATE_CLEAN_UP; // change state according to command from CM7
		HAL_HSEM_ActivateNotification(HSEM_CLEAN_UP_MASK); // reactivate notification
		break;

	default:
		break;
 8100eda:	e022      	b.n	8100f22 <HAL_HSEM_FreeCallback+0xe6>
		current_state_CM4 = STATE_INIT; // change state according to command from CM7
 8100edc:	4b13      	ldr	r3, [pc, #76]	; (8100f2c <HAL_HSEM_FreeCallback+0xf0>)
 8100ede:	2200      	movs	r2, #0
 8100ee0:	601a      	str	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_CM4_INIT_MASK); // reactivate notification
 8100ee2:	2004      	movs	r0, #4
 8100ee4:	f003 fda2 	bl	8104a2c <HAL_HSEM_ActivateNotification>
		break;
 8100ee8:	e01c      	b.n	8100f24 <HAL_HSEM_FreeCallback+0xe8>
		current_state_CM4 = STATE_ROBOT_TURN; // change state according to command from CM7
 8100eea:	4b10      	ldr	r3, [pc, #64]	; (8100f2c <HAL_HSEM_FreeCallback+0xf0>)
 8100eec:	2202      	movs	r2, #2
 8100eee:	601a      	str	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_ROBOT_TURN_MASK); // reactivate notification
 8100ef0:	2010      	movs	r0, #16
 8100ef2:	f003 fd9b 	bl	8104a2c <HAL_HSEM_ActivateNotification>
		break;
 8100ef6:	e015      	b.n	8100f24 <HAL_HSEM_FreeCallback+0xe8>
		current_state_CM4 = STATE_USER_TURN; // change state according to command from CM7
 8100ef8:	4b0c      	ldr	r3, [pc, #48]	; (8100f2c <HAL_HSEM_FreeCallback+0xf0>)
 8100efa:	2203      	movs	r2, #3
 8100efc:	601a      	str	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_USER_TURN_MASK); // reactivate notification
 8100efe:	2008      	movs	r0, #8
 8100f00:	f003 fd94 	bl	8104a2c <HAL_HSEM_ActivateNotification>
		break;
 8100f04:	e00e      	b.n	8100f24 <HAL_HSEM_FreeCallback+0xe8>
		current_state_CM4 = STATE_GAME_END; // change state according to command from CM7
 8100f06:	4b09      	ldr	r3, [pc, #36]	; (8100f2c <HAL_HSEM_FreeCallback+0xf0>)
 8100f08:	2206      	movs	r2, #6
 8100f0a:	601a      	str	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_GAME_END_MASK); // reactivate notification
 8100f0c:	2020      	movs	r0, #32
 8100f0e:	f003 fd8d 	bl	8104a2c <HAL_HSEM_ActivateNotification>
		break;
 8100f12:	e007      	b.n	8100f24 <HAL_HSEM_FreeCallback+0xe8>
		current_state_CM4 = STATE_CLEAN_UP; // change state according to command from CM7
 8100f14:	4b05      	ldr	r3, [pc, #20]	; (8100f2c <HAL_HSEM_FreeCallback+0xf0>)
 8100f16:	2204      	movs	r2, #4
 8100f18:	601a      	str	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(HSEM_CLEAN_UP_MASK); // reactivate notification
 8100f1a:	2040      	movs	r0, #64	; 0x40
 8100f1c:	f003 fd86 	bl	8104a2c <HAL_HSEM_ActivateNotification>
		break;
 8100f20:	e000      	b.n	8100f24 <HAL_HSEM_FreeCallback+0xe8>
		break;
 8100f22:	bf00      	nop
	}
}
 8100f24:	bf00      	nop
 8100f26:	3708      	adds	r7, #8
 8100f28:	46bd      	mov	sp, r7
 8100f2a:	bd80      	pop	{r7, pc}
 8100f2c:	10000010 	.word	0x10000010

08100f30 <gameplay_loop_CM4>:

void gameplay_loop_CM4(int state)
// gameplay_loop_CM4: The main logic of Cortex-M4
{
 8100f30:	b580      	push	{r7, lr}
 8100f32:	b082      	sub	sp, #8
 8100f34:	af00      	add	r7, sp, #0
 8100f36:	6078      	str	r0, [r7, #4]
	switch (state)
 8100f38:	687b      	ldr	r3, [r7, #4]
 8100f3a:	2b06      	cmp	r3, #6
 8100f3c:	d825      	bhi.n	8100f8a <gameplay_loop_CM4+0x5a>
 8100f3e:	a201      	add	r2, pc, #4	; (adr r2, 8100f44 <gameplay_loop_CM4+0x14>)
 8100f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100f44:	08100f61 	.word	0x08100f61
 8100f48:	08100f67 	.word	0x08100f67
 8100f4c:	08100f6d 	.word	0x08100f6d
 8100f50:	08100f73 	.word	0x08100f73
 8100f54:	08100f79 	.word	0x08100f79
 8100f58:	08100f7f 	.word	0x08100f7f
 8100f5c:	08100f85 	.word	0x08100f85
	{
	case STATE_INIT:
		exec_state_init();
 8100f60:	f000 f818 	bl	8100f94 <exec_state_init>
		break;
 8100f64:	e012      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	case STATE_IDLE:
		exec_state_idle();
 8100f66:	f000 f827 	bl	8100fb8 <exec_state_idle>
		break;
 8100f6a:	e00f      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	case STATE_ROBOT_TURN:
		exec_state_robot_move();
 8100f6c:	f000 f82e 	bl	8100fcc <exec_state_robot_move>
		break;
 8100f70:	e00c      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	case STATE_USER_TURN:
		exec_state_user_move();
 8100f72:	f000 f879 	bl	8101068 <exec_state_user_move>
		break;
 8100f76:	e009      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	case STATE_CLEAN_UP:
		exec_state_clean_up();
 8100f78:	f000 f896 	bl	81010a8 <exec_state_clean_up>
		break;
 8100f7c:	e006      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	case STATE_CHEAT_DETECTED:
		exec_state_cheat_detected();
 8100f7e:	f000 f8a5 	bl	81010cc <exec_state_cheat_detected>
		break;
 8100f82:	e003      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	case STATE_GAME_END:
		exec_state_game_end();
 8100f84:	f000 f8b2 	bl	81010ec <exec_state_game_end>
		break;
 8100f88:	e000      	b.n	8100f8c <gameplay_loop_CM4+0x5c>

	default: // im not sure what needs to happen here yet
		// maybe my default should be idle, maybe not
		break;
 8100f8a:	bf00      	nop
	}
}
 8100f8c:	bf00      	nop
 8100f8e:	3708      	adds	r7, #8
 8100f90:	46bd      	mov	sp, r7
 8100f92:	bd80      	pop	{r7, pc}

08100f94 <exec_state_init>:

void exec_state_init(void)
{
 8100f94:	b580      	push	{r7, lr}
 8100f96:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r🟢🟢🟢 Executing STATE INIT 🟢🟢🟢\n\r");
 8100f98:	4806      	ldr	r0, [pc, #24]	; (8100fb4 <exec_state_init+0x20>)
 8100f9a:	f002 f84b 	bl	8103034 <send_msg>

	// initialize necessary signals
	// home procedure
	open_all_columns();
 8100f9e:	f7ff fdf5 	bl	8100b8c <open_all_columns>

	HSEM_TAKE_RELEASE(HSEM_CM4_DONE); 	// tell CM7 that CM4 is done with task
 8100fa2:	2001      	movs	r0, #1
 8100fa4:	f003 fd14 	bl	81049d0 <HAL_HSEM_FastTake>
 8100fa8:	2100      	movs	r1, #0
 8100faa:	2001      	movs	r0, #1
 8100fac:	f003 fd2a 	bl	8104a04 <HAL_HSEM_Release>
}
 8100fb0:	bf00      	nop
 8100fb2:	bd80      	pop	{r7, pc}
 8100fb4:	0810af8c 	.word	0x0810af8c

08100fb8 <exec_state_idle>:

void exec_state_idle(void)
{
 8100fb8:	b580      	push	{r7, lr}
 8100fba:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r⚡⚡⚡ Executing STATE IDLE ⚡⚡⚡\n\r");
 8100fbc:	4802      	ldr	r0, [pc, #8]	; (8100fc8 <exec_state_idle+0x10>)
 8100fbe:	f002 f839 	bl	8103034 <send_msg>
	/* Do nothing
	 A perfect place to check for current score and determine if the game ends
	 or check for a cheat move */
}
 8100fc2:	bf00      	nop
 8100fc4:	bd80      	pop	{r7, pc}
 8100fc6:	bf00      	nop
 8100fc8:	0810afc0 	.word	0x0810afc0

08100fcc <exec_state_robot_move>:

void exec_state_robot_move(void)
{
 8100fcc:	b580      	push	{r7, lr}
 8100fce:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r⚡⚡⚡ Executing STATE ROBOT TURN ⚡⚡⚡\n\r");
 8100fd0:	4821      	ldr	r0, [pc, #132]	; (8101058 <exec_state_robot_move+0x8c>)
 8100fd2:	f002 f82f 	bl	8103034 <send_msg>
	// access "column to be played at" from memory
	// move to that position

	send_msg_data((uint8_t*) "\r##### Moving to pos X: %d #####\n\r",
 8100fd6:	210c      	movs	r1, #12
 8100fd8:	4820      	ldr	r0, [pc, #128]	; (810105c <exec_state_robot_move+0x90>)
 8100fda:	f002 f83f 	bl	810305c <send_msg_data>
			X_POS_STACK_3);
	send_msg_data((uint8_t*) "\r##### Moving to pos Z: %d #####\n\r",
 8100fde:	210f      	movs	r1, #15
 8100fe0:	481f      	ldr	r0, [pc, #124]	; (8101060 <exec_state_robot_move+0x94>)
 8100fe2:	f002 f83b 	bl	810305c <send_msg_data>
			Z_POS_STORE_TOP);
	move_to_X_and_Z(X_POS_STACK_3, Z_POS_STORE_TOP); // moves to above storage number 3
 8100fe6:	210f      	movs	r1, #15
 8100fe8:	200c      	movs	r0, #12
 8100fea:	f000 fa43 	bl	8101474 <move_to_X_and_Z>
	HAL_Delay(1500);
 8100fee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8100ff2:	f002 f927 	bl	8103244 <HAL_Delay>
	set_Rotate_Servo(ROTATE_TO_STORE); 				// rotates end-effector down
 8100ff6:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8101064 <exec_state_robot_move+0x98>
 8100ffa:	f000 fd7d 	bl	8101af8 <set_Rotate_Servo>
	HAL_Delay(500);
 8100ffe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101002:	f002 f91f 	bl	8103244 <HAL_Delay>

	move_to_X_and_Z(X_POS_STACK_3, Z_POS_STORE_6); 	// moves down to place token
 8101006:	2107      	movs	r1, #7
 8101008:	200c      	movs	r0, #12
 810100a:	f000 fa33 	bl	8101474 <move_to_X_and_Z>
	HAL_Delay(1500);
 810100e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8101012:	f002 f917 	bl	8103244 <HAL_Delay>

	move_to_X_and_Z(X_POS_STACK_3, Z_POS_STORE_TOP); // moves to above storage number 3 (goes back  up safely)
 8101016:	210f      	movs	r1, #15
 8101018:	200c      	movs	r0, #12
 810101a:	f000 fa2b 	bl	8101474 <move_to_X_and_Z>
	HAL_Delay(500);
 810101e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101022:	f002 f90f 	bl	8103244 <HAL_Delay>

	send_msg_data((uint8_t*) "\r##### Moving to pos X: %d #####\n\r",
 8101026:	2101      	movs	r1, #1
 8101028:	480c      	ldr	r0, [pc, #48]	; (810105c <exec_state_robot_move+0x90>)
 810102a:	f002 f817 	bl	810305c <send_msg_data>
			X_POS_COL_1);
	send_msg_data((uint8_t*) "\r##### Moving to pos Z: %d #####\n\r",
 810102e:	2137      	movs	r1, #55	; 0x37
 8101030:	480b      	ldr	r0, [pc, #44]	; (8101060 <exec_state_robot_move+0x94>)
 8101032:	f002 f813 	bl	810305c <send_msg_data>
			Z_POS_TOP);
	move_to_X_and_Z(X_POS_COL_1, Z_POS_TOP); // Moving above col 1 and going down to drop token
 8101036:	2137      	movs	r1, #55	; 0x37
 8101038:	2001      	movs	r0, #1
 810103a:	f000 fa1b 	bl	8101474 <move_to_X_and_Z>
	HAL_Delay(1000);
 810103e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101042:	f002 f8ff 	bl	8103244 <HAL_Delay>

	HSEM_TAKE_RELEASE(HSEM_CM4_DONE); 	// tell CM7 that CM4 is done
 8101046:	2001      	movs	r0, #1
 8101048:	f003 fcc2 	bl	81049d0 <HAL_HSEM_FastTake>
 810104c:	2100      	movs	r1, #0
 810104e:	2001      	movs	r0, #1
 8101050:	f003 fcd8 	bl	8104a04 <HAL_HSEM_Release>
}
 8101054:	bf00      	nop
 8101056:	bd80      	pop	{r7, pc}
 8101058:	0810afec 	.word	0x0810afec
 810105c:	0810b020 	.word	0x0810b020
 8101060:	0810b044 	.word	0x0810b044
 8101064:	41533333 	.word	0x41533333

08101068 <exec_state_user_move>:

void exec_state_user_move(void)
{
 8101068:	b580      	push	{r7, lr}
 810106a:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r⚡⚡⚡ Executing STATE USER MOVE ⚡⚡⚡\n\r");
 810106c:	480d      	ldr	r0, [pc, #52]	; (81010a4 <exec_state_user_move+0x3c>)
 810106e:	f001 ffe1 	bl	8103034 <send_msg>
	while (checkcoin() != -1) // check until a token is dropped
 8101072:	e00d      	b.n	8101090 <exec_state_user_move+0x28>
	{
		if (checkcoin() != 9)
 8101074:	f000 f94e 	bl	8101314 <checkcoin>
 8101078:	4603      	mov	r3, r0
 810107a:	2b09      	cmp	r3, #9
 810107c:	d008      	beq.n	8101090 <exec_state_user_move+0x28>
		{
			update_board_mem();
 810107e:	f000 f981 	bl	8101384 <update_board_mem>
			HSEM_TAKE_RELEASE(HSEM_CM4_DONE); // tell CM7 that CM4 is done with task
 8101082:	2001      	movs	r0, #1
 8101084:	f003 fca4 	bl	81049d0 <HAL_HSEM_FastTake>
 8101088:	2100      	movs	r1, #0
 810108a:	2001      	movs	r0, #1
 810108c:	f003 fcba 	bl	8104a04 <HAL_HSEM_Release>
	while (checkcoin() != -1) // check until a token is dropped
 8101090:	f000 f940 	bl	8101314 <checkcoin>
 8101094:	4603      	mov	r3, r0
 8101096:	f1b3 3fff 	cmp.w	r3, #4294967295
 810109a:	d1eb      	bne.n	8101074 <exec_state_user_move+0xc>
		}
	}
}
 810109c:	bf00      	nop
 810109e:	bf00      	nop
 81010a0:	bd80      	pop	{r7, pc}
 81010a2:	bf00      	nop
 81010a4:	0810b068 	.word	0x0810b068

081010a8 <exec_state_clean_up>:

void exec_state_clean_up(void)
{
 81010a8:	b580      	push	{r7, lr}
 81010aa:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r⚡⚡⚡ Executing STATE CLEAN-UP ⚡⚡⚡\n\r");
 81010ac:	4806      	ldr	r0, [pc, #24]	; (81010c8 <exec_state_clean_up+0x20>)
 81010ae:	f001 ffc1 	bl	8103034 <send_msg>

	open_all_columns();
 81010b2:	f7ff fd6b 	bl	8100b8c <open_all_columns>

	HSEM_TAKE_RELEASE(HSEM_CM4_DONE);	// tell CM7 that CM4 is done with task
 81010b6:	2001      	movs	r0, #1
 81010b8:	f003 fc8a 	bl	81049d0 <HAL_HSEM_FastTake>
 81010bc:	2100      	movs	r1, #0
 81010be:	2001      	movs	r0, #1
 81010c0:	f003 fca0 	bl	8104a04 <HAL_HSEM_Release>
}
 81010c4:	bf00      	nop
 81010c6:	bd80      	pop	{r7, pc}
 81010c8:	0810b09c 	.word	0x0810b09c

081010cc <exec_state_cheat_detected>:

void exec_state_cheat_detected(void)
{
 81010cc:	b580      	push	{r7, lr}
 81010ce:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r⚠⚠⚠ CHEATER DETECTED ⚠⚠⚠\n\r");
 81010d0:	4805      	ldr	r0, [pc, #20]	; (81010e8 <exec_state_cheat_detected+0x1c>)
 81010d2:	f001 ffaf 	bl	8103034 <send_msg>

	// we arrive here from an interrupt from Lightgate (?)
	// Send task that triggers Cheat Detected in CM7

	HSEM_TAKE_RELEASE(HSEM_CM4_DONE);	// tell CM7 that CM4 is done with task
 81010d6:	2001      	movs	r0, #1
 81010d8:	f003 fc7a 	bl	81049d0 <HAL_HSEM_FastTake>
 81010dc:	2100      	movs	r1, #0
 81010de:	2001      	movs	r0, #1
 81010e0:	f003 fc90 	bl	8104a04 <HAL_HSEM_Release>
}
 81010e4:	bf00      	nop
 81010e6:	bd80      	pop	{r7, pc}
 81010e8:	0810b0cc 	.word	0x0810b0cc

081010ec <exec_state_game_end>:

void exec_state_game_end(void)
{
 81010ec:	b580      	push	{r7, lr}
 81010ee:	af00      	add	r7, sp, #0
	send_msg((uint8_t*) "\r🛑🛑🛑 Executing STATE CLEAN-UP 🛑🛑🛑\n\r");
 81010f0:	4805      	ldr	r0, [pc, #20]	; (8101108 <exec_state_game_end+0x1c>)
 81010f2:	f001 ff9f 	bl	8103034 <send_msg>

	// display appropriate msgs
	HSEM_TAKE_RELEASE(HSEM_CM4_DONE);	// tell CM7 that CM4 is done with task
 81010f6:	2001      	movs	r0, #1
 81010f8:	f003 fc6a 	bl	81049d0 <HAL_HSEM_FastTake>
 81010fc:	2100      	movs	r1, #0
 81010fe:	2001      	movs	r0, #1
 8101100:	f003 fc80 	bl	8104a04 <HAL_HSEM_Release>
}
 8101104:	bf00      	nop
 8101106:	bd80      	pop	{r7, pc}
 8101108:	0810b0f4 	.word	0x0810b0f4

0810110c <check_state>:
 STATE_CLEAN_UP						4
 STATE_CHEAT_DETECTED				5
 STATE_GAME_END						6
 */
int check_state(void)
{
 810110c:	b480      	push	{r7}
 810110e:	af00      	add	r7, sp, #0
	return current_state_CM4;
 8101110:	4b03      	ldr	r3, [pc, #12]	; (8101120 <check_state+0x14>)
 8101112:	681b      	ldr	r3, [r3, #0]
}
 8101114:	4618      	mov	r0, r3
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	10000010 	.word	0x10000010

08101124 <coinInsertDetection>:
 * returns:
 * 	0: no move
 * 	1-7: inserted into column n
 * 	9: error
 */
{
 8101124:	b580      	push	{r7, lr}
 8101126:	b082      	sub	sp, #8
 8101128:	af00      	add	r7, sp, #0
	int output = 0;
 810112a:	2300      	movs	r3, #0
 810112c:	607b      	str	r3, [r7, #4]

	/* Query the processor with the I2C connection for the light gates */
	int gateNew = queryLightGate();
 810112e:	f000 f84b 	bl	81011c8 <queryLightGate>
 8101132:	6038      	str	r0, [r7, #0]

	if (gateNew == 9)
 8101134:	683b      	ldr	r3, [r7, #0]
 8101136:	2b09      	cmp	r3, #9
 8101138:	d106      	bne.n	8101148 <coinInsertDetection+0x24>
	{
		detect_error++;
 810113a:	4b0f      	ldr	r3, [pc, #60]	; (8101178 <coinInsertDetection+0x54>)
 810113c:	681b      	ldr	r3, [r3, #0]
 810113e:	3301      	adds	r3, #1
 8101140:	4a0d      	ldr	r2, [pc, #52]	; (8101178 <coinInsertDetection+0x54>)
 8101142:	6013      	str	r3, [r2, #0]
		return 9;
 8101144:	2309      	movs	r3, #9
 8101146:	e013      	b.n	8101170 <coinInsertDetection+0x4c>
	}

	/* Query the logic: if the same as the prior gate, not debounced yet.  */
	if (gateNew == -1 && gateOld <= 7 && gateNew != gateOld)
 8101148:	683b      	ldr	r3, [r7, #0]
 810114a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810114e:	d10b      	bne.n	8101168 <coinInsertDetection+0x44>
 8101150:	4b0a      	ldr	r3, [pc, #40]	; (810117c <coinInsertDetection+0x58>)
 8101152:	681b      	ldr	r3, [r3, #0]
 8101154:	2b07      	cmp	r3, #7
 8101156:	dc07      	bgt.n	8101168 <coinInsertDetection+0x44>
 8101158:	4b08      	ldr	r3, [pc, #32]	; (810117c <coinInsertDetection+0x58>)
 810115a:	681b      	ldr	r3, [r3, #0]
 810115c:	683a      	ldr	r2, [r7, #0]
 810115e:	429a      	cmp	r2, r3
 8101160:	d002      	beq.n	8101168 <coinInsertDetection+0x44>
	{
		output = gateOld;
 8101162:	4b06      	ldr	r3, [pc, #24]	; (810117c <coinInsertDetection+0x58>)
 8101164:	681b      	ldr	r3, [r3, #0]
 8101166:	607b      	str	r3, [r7, #4]
	}

	gateOld = gateNew;
 8101168:	4a04      	ldr	r2, [pc, #16]	; (810117c <coinInsertDetection+0x58>)
 810116a:	683b      	ldr	r3, [r7, #0]
 810116c:	6013      	str	r3, [r2, #0]

	return output;
 810116e:	687b      	ldr	r3, [r7, #4]
}
 8101170:	4618      	mov	r0, r3
 8101172:	3708      	adds	r7, #8
 8101174:	46bd      	mov	sp, r7
 8101176:	bd80      	pop	{r7, pc}
 8101178:	10000120 	.word	0x10000120
 810117c:	1000000c 	.word	0x1000000c

08101180 <init_coinDetector>:
 * to set all ports as inputs. It checks the device status after transmitting the command
 * byte and displays appropriate messages based on the result. It then receives the input
 * ports and performs some operations on them.
 */
void init_coinDetector(void)
{
 8101180:	b580      	push	{r7, lr}
 8101182:	b084      	sub	sp, #16
 8101184:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef dev_Status;           // Device status variable
	uint8_t data = 0xFF;         // Command byte data to set all ports as inputs
 8101186:	23ff      	movs	r3, #255	; 0xff
 8101188:	71bb      	strb	r3, [r7, #6]

	dev_Status = i2c_Transmit(&hi2c1, CD_ADD, 0x03, 1, &data, 1); // Transmit command byte to configure the device
 810118a:	2301      	movs	r3, #1
 810118c:	9301      	str	r3, [sp, #4]
 810118e:	1dbb      	adds	r3, r7, #6
 8101190:	9300      	str	r3, [sp, #0]
 8101192:	2301      	movs	r3, #1
 8101194:	2203      	movs	r2, #3
 8101196:	2138      	movs	r1, #56	; 0x38
 8101198:	4808      	ldr	r0, [pc, #32]	; (81011bc <init_coinDetector+0x3c>)
 810119a:	f001 fa09 	bl	81025b0 <i2c_Transmit>
 810119e:	4603      	mov	r3, r0
 81011a0:	71fb      	strb	r3, [r7, #7]

	if (dev_Status != HAL_OK)   // Check if device status is not OK
 81011a2:	79fb      	ldrb	r3, [r7, #7]
 81011a4:	2b00      	cmp	r3, #0
 81011a6:	d003      	beq.n	81011b0 <init_coinDetector+0x30>
	{
		send_msg((uint8_t*) "\r¡User-Detector Initialisation FAILED¡\n\r"); // Display error message
 81011a8:	4805      	ldr	r0, [pc, #20]	; (81011c0 <init_coinDetector+0x40>)
 81011aa:	f001 ff43 	bl	8103034 <send_msg>
 81011ae:	e002      	b.n	81011b6 <init_coinDetector+0x36>
		return;
	}
	else
	{
		send_msg((uint8_t*) "\r!User-Detector Initialised!\n\r"); // Display success message
 81011b0:	4804      	ldr	r0, [pc, #16]	; (81011c4 <init_coinDetector+0x44>)
 81011b2:	f001 ff3f 	bl	8103034 <send_msg>
	}
}
 81011b6:	3708      	adds	r7, #8
 81011b8:	46bd      	mov	sp, r7
 81011ba:	bd80      	pop	{r7, pc}
 81011bc:	10000188 	.word	0x10000188
 81011c0:	0810b12c 	.word	0x0810b12c
 81011c4:	0810b158 	.word	0x0810b158

081011c8 <queryLightGate>:
 *         - -2: Error from PCA9554
 *         - -1: All gates are free
 *         - 1 to 7: Stack where the gate is blocked
 *         - 9: More than one gate is blocked
 */
{
 81011c8:	b580      	push	{r7, lr}
 81011ca:	b084      	sub	sp, #16
 81011cc:	af02      	add	r7, sp, #8
	 0100 1011 - 0x4B
	 0100 1101 - 0x4D
	 0100 1111 - 0x4F
	 */
	// Program command byte: Reading the input port [0x00] register
	dev_Status = i2c_Receive(&hi2c1, CD_ADD, 0x00, 1, &cd, sizeof(cd));
 81011ce:	2301      	movs	r3, #1
 81011d0:	9301      	str	r3, [sp, #4]
 81011d2:	1dbb      	adds	r3, r7, #6
 81011d4:	9300      	str	r3, [sp, #0]
 81011d6:	2301      	movs	r3, #1
 81011d8:	2200      	movs	r2, #0
 81011da:	2138      	movs	r1, #56	; 0x38
 81011dc:	484a      	ldr	r0, [pc, #296]	; (8101308 <queryLightGate+0x140>)
 81011de:	f001 fa10 	bl	8102602 <i2c_Receive>
 81011e2:	4603      	mov	r3, r0
 81011e4:	71fb      	strb	r3, [r7, #7]

	if (dev_Status != HAL_OK)
 81011e6:	79fb      	ldrb	r3, [r7, #7]
 81011e8:	2b00      	cmp	r3, #0
 81011ea:	d002      	beq.n	81011f2 <queryLightGate+0x2a>
	{
		return -2;              // Error from PCA9554
 81011ec:	f06f 0301 	mvn.w	r3, #1
 81011f0:	e085      	b.n	81012fe <queryLightGate+0x136>
	}
	else
	{
		/* Remove LSB: is always 1 */
		cd &= ~0x01;
 81011f2:	79bb      	ldrb	r3, [r7, #6]
 81011f4:	f023 0301 	bic.w	r3, r3, #1
 81011f8:	b2db      	uxtb	r3, r3
 81011fa:	71bb      	strb	r3, [r7, #6]

		/* Check if empty: */
		if (!cd)
 81011fc:	79bb      	ldrb	r3, [r7, #6]
 81011fe:	2b00      	cmp	r3, #0
 8101200:	d102      	bne.n	8101208 <queryLightGate+0x40>
			return -1;          // All gates are free
 8101202:	f04f 33ff 	mov.w	r3, #4294967295
 8101206:	e07a      	b.n	81012fe <queryLightGate+0x136>

		if (cd == 0x02)
 8101208:	79bb      	ldrb	r3, [r7, #6]
 810120a:	2b02      	cmp	r3, #2
 810120c:	d101      	bne.n	8101212 <queryLightGate+0x4a>
		{
			return 7;
 810120e:	2307      	movs	r3, #7
 8101210:	e075      	b.n	81012fe <queryLightGate+0x136>
		}
		if (cd == 0x04)
 8101212:	79bb      	ldrb	r3, [r7, #6]
 8101214:	2b04      	cmp	r3, #4
 8101216:	d101      	bne.n	810121c <queryLightGate+0x54>
		{
			return 6;
 8101218:	2306      	movs	r3, #6
 810121a:	e070      	b.n	81012fe <queryLightGate+0x136>
		}
		if (cd == 0x08)
 810121c:	79bb      	ldrb	r3, [r7, #6]
 810121e:	2b08      	cmp	r3, #8
 8101220:	d101      	bne.n	8101226 <queryLightGate+0x5e>
		{
			return 5;
 8101222:	2305      	movs	r3, #5
 8101224:	e06b      	b.n	81012fe <queryLightGate+0x136>
		}
		if (cd == 0x10)
 8101226:	79bb      	ldrb	r3, [r7, #6]
 8101228:	2b10      	cmp	r3, #16
 810122a:	d101      	bne.n	8101230 <queryLightGate+0x68>
		{
			return 3; 	// flipped in hardware
 810122c:	2303      	movs	r3, #3
 810122e:	e066      	b.n	81012fe <queryLightGate+0x136>
		}
		if (cd == 0x20)
 8101230:	79bb      	ldrb	r3, [r7, #6]
 8101232:	2b20      	cmp	r3, #32
 8101234:	d101      	bne.n	810123a <queryLightGate+0x72>
		{
			return 4; 	// flipped in hardware
 8101236:	2304      	movs	r3, #4
 8101238:	e061      	b.n	81012fe <queryLightGate+0x136>
		}
		if (cd == 0x40)
 810123a:	79bb      	ldrb	r3, [r7, #6]
 810123c:	2b40      	cmp	r3, #64	; 0x40
 810123e:	d101      	bne.n	8101244 <queryLightGate+0x7c>
		{
			return 1; 	// flipped in hardware
 8101240:	2301      	movs	r3, #1
 8101242:	e05c      	b.n	81012fe <queryLightGate+0x136>
		}
		if (cd == 0x80)
 8101244:	79bb      	ldrb	r3, [r7, #6]
 8101246:	2b80      	cmp	r3, #128	; 0x80
 8101248:	d101      	bne.n	810124e <queryLightGate+0x86>
		{
			return 2; 	// flipped in hardware
 810124a:	2302      	movs	r3, #2
 810124c:	e057      	b.n	81012fe <queryLightGate+0x136>
		}

		// More than one coin detected, update the mem_Board array accordingly
		if ((cd >> 1) & 1)
 810124e:	79bb      	ldrb	r3, [r7, #6]
 8101250:	085b      	lsrs	r3, r3, #1
 8101252:	b2db      	uxtb	r3, r3
 8101254:	f003 0301 	and.w	r3, r3, #1
 8101258:	2b00      	cmp	r3, #0
 810125a:	d004      	beq.n	8101266 <queryLightGate+0x9e>
		{
			mem_Board[7 - 1]++;
 810125c:	4b2b      	ldr	r3, [pc, #172]	; (810130c <queryLightGate+0x144>)
 810125e:	699b      	ldr	r3, [r3, #24]
 8101260:	3301      	adds	r3, #1
 8101262:	4a2a      	ldr	r2, [pc, #168]	; (810130c <queryLightGate+0x144>)
 8101264:	6193      	str	r3, [r2, #24]
		}
		if ((cd >> 2) & 1)
 8101266:	79bb      	ldrb	r3, [r7, #6]
 8101268:	089b      	lsrs	r3, r3, #2
 810126a:	b2db      	uxtb	r3, r3
 810126c:	f003 0301 	and.w	r3, r3, #1
 8101270:	2b00      	cmp	r3, #0
 8101272:	d004      	beq.n	810127e <queryLightGate+0xb6>
		{
			mem_Board[6 - 1]++;
 8101274:	4b25      	ldr	r3, [pc, #148]	; (810130c <queryLightGate+0x144>)
 8101276:	695b      	ldr	r3, [r3, #20]
 8101278:	3301      	adds	r3, #1
 810127a:	4a24      	ldr	r2, [pc, #144]	; (810130c <queryLightGate+0x144>)
 810127c:	6153      	str	r3, [r2, #20]
		}
		if ((cd >> 3) & 1)
 810127e:	79bb      	ldrb	r3, [r7, #6]
 8101280:	08db      	lsrs	r3, r3, #3
 8101282:	b2db      	uxtb	r3, r3
 8101284:	f003 0301 	and.w	r3, r3, #1
 8101288:	2b00      	cmp	r3, #0
 810128a:	d004      	beq.n	8101296 <queryLightGate+0xce>
		{
			mem_Board[5 - 1]++;
 810128c:	4b1f      	ldr	r3, [pc, #124]	; (810130c <queryLightGate+0x144>)
 810128e:	691b      	ldr	r3, [r3, #16]
 8101290:	3301      	adds	r3, #1
 8101292:	4a1e      	ldr	r2, [pc, #120]	; (810130c <queryLightGate+0x144>)
 8101294:	6113      	str	r3, [r2, #16]
		}
		if ((cd >> 4) & 1)
 8101296:	79bb      	ldrb	r3, [r7, #6]
 8101298:	091b      	lsrs	r3, r3, #4
 810129a:	b2db      	uxtb	r3, r3
 810129c:	f003 0301 	and.w	r3, r3, #1
 81012a0:	2b00      	cmp	r3, #0
 81012a2:	d004      	beq.n	81012ae <queryLightGate+0xe6>
		{
			mem_Board[3 - 1]++;
 81012a4:	4b19      	ldr	r3, [pc, #100]	; (810130c <queryLightGate+0x144>)
 81012a6:	689b      	ldr	r3, [r3, #8]
 81012a8:	3301      	adds	r3, #1
 81012aa:	4a18      	ldr	r2, [pc, #96]	; (810130c <queryLightGate+0x144>)
 81012ac:	6093      	str	r3, [r2, #8]
		}
		if ((cd >> 5) & 1)
 81012ae:	79bb      	ldrb	r3, [r7, #6]
 81012b0:	095b      	lsrs	r3, r3, #5
 81012b2:	b2db      	uxtb	r3, r3
 81012b4:	f003 0301 	and.w	r3, r3, #1
 81012b8:	2b00      	cmp	r3, #0
 81012ba:	d004      	beq.n	81012c6 <queryLightGate+0xfe>
		{
			mem_Board[4 - 1]++;
 81012bc:	4b13      	ldr	r3, [pc, #76]	; (810130c <queryLightGate+0x144>)
 81012be:	68db      	ldr	r3, [r3, #12]
 81012c0:	3301      	adds	r3, #1
 81012c2:	4a12      	ldr	r2, [pc, #72]	; (810130c <queryLightGate+0x144>)
 81012c4:	60d3      	str	r3, [r2, #12]
		}
		if ((cd >> 6) & 1)
 81012c6:	79bb      	ldrb	r3, [r7, #6]
 81012c8:	099b      	lsrs	r3, r3, #6
 81012ca:	b2db      	uxtb	r3, r3
 81012cc:	f003 0301 	and.w	r3, r3, #1
 81012d0:	2b00      	cmp	r3, #0
 81012d2:	d004      	beq.n	81012de <queryLightGate+0x116>
		{
			mem_Board[1 - 1]++;
 81012d4:	4b0d      	ldr	r3, [pc, #52]	; (810130c <queryLightGate+0x144>)
 81012d6:	681b      	ldr	r3, [r3, #0]
 81012d8:	3301      	adds	r3, #1
 81012da:	4a0c      	ldr	r2, [pc, #48]	; (810130c <queryLightGate+0x144>)
 81012dc:	6013      	str	r3, [r2, #0]
		}
		if ((cd >> 7) & 1)
 81012de:	79bb      	ldrb	r3, [r7, #6]
 81012e0:	09db      	lsrs	r3, r3, #7
 81012e2:	b2db      	uxtb	r3, r3
 81012e4:	f003 0301 	and.w	r3, r3, #1
 81012e8:	2b00      	cmp	r3, #0
 81012ea:	d004      	beq.n	81012f6 <queryLightGate+0x12e>
		{
			mem_Board[2 - 1]++;
 81012ec:	4b07      	ldr	r3, [pc, #28]	; (810130c <queryLightGate+0x144>)
 81012ee:	685b      	ldr	r3, [r3, #4]
 81012f0:	3301      	adds	r3, #1
 81012f2:	4a06      	ldr	r2, [pc, #24]	; (810130c <queryLightGate+0x144>)
 81012f4:	6053      	str	r3, [r2, #4]
		}
		sens = 0;
 81012f6:	4b06      	ldr	r3, [pc, #24]	; (8101310 <queryLightGate+0x148>)
 81012f8:	2200      	movs	r2, #0
 81012fa:	601a      	str	r2, [r3, #0]
		return 9;               // More than one gate is blocked
 81012fc:	2309      	movs	r3, #9

	}
}
 81012fe:	4618      	mov	r0, r3
 8101300:	3708      	adds	r7, #8
 8101302:	46bd      	mov	sp, r7
 8101304:	bd80      	pop	{r7, pc}
 8101306:	bf00      	nop
 8101308:	10000188 	.word	0x10000188
 810130c:	100000e0 	.word	0x100000e0
 8101310:	10000118 	.word	0x10000118

08101314 <checkcoin>:
 * @return Index of the column that has changed (1-7), or:
 *         - 9: Error (more than one column changed)
 *         - -1: No column changed
 */
int checkcoin(void)
{
 8101314:	b480      	push	{r7}
 8101316:	b085      	sub	sp, #20
 8101318:	af00      	add	r7, sp, #0
	int column = -1;                 // Index of the changed column (-1 if none)
 810131a:	f04f 33ff 	mov.w	r3, #4294967295
 810131e:	60fb      	str	r3, [r7, #12]
	int amountOfColumnsChanged = 0;       // Number of columns that have changed
 8101320:	2300      	movs	r3, #0
 8101322:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < 7; i++)
 8101324:	2300      	movs	r3, #0
 8101326:	607b      	str	r3, [r7, #4]
 8101328:	e012      	b.n	8101350 <checkcoin+0x3c>
	{
		if (mem_Board[i] - mem_Board_old[i] > 0)
 810132a:	4a14      	ldr	r2, [pc, #80]	; (810137c <checkcoin+0x68>)
 810132c:	687b      	ldr	r3, [r7, #4]
 810132e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8101332:	4913      	ldr	r1, [pc, #76]	; (8101380 <checkcoin+0x6c>)
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 810133a:	1ad3      	subs	r3, r2, r3
 810133c:	2b00      	cmp	r3, #0
 810133e:	dd04      	ble.n	810134a <checkcoin+0x36>
		{
			column = i;                   // Update column index
 8101340:	687b      	ldr	r3, [r7, #4]
 8101342:	60fb      	str	r3, [r7, #12]
			amountOfColumnsChanged++;     // Increment count of changed columns
 8101344:	68bb      	ldr	r3, [r7, #8]
 8101346:	3301      	adds	r3, #1
 8101348:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 7; i++)
 810134a:	687b      	ldr	r3, [r7, #4]
 810134c:	3301      	adds	r3, #1
 810134e:	607b      	str	r3, [r7, #4]
 8101350:	687b      	ldr	r3, [r7, #4]
 8101352:	2b06      	cmp	r3, #6
 8101354:	dde9      	ble.n	810132a <checkcoin+0x16>
		}
	}

	if (amountOfColumnsChanged == 1)
 8101356:	68bb      	ldr	r3, [r7, #8]
 8101358:	2b01      	cmp	r3, #1
 810135a:	d103      	bne.n	8101364 <checkcoin+0x50>
	{
		column++;                         // Increment column index by 1
 810135c:	68fb      	ldr	r3, [r7, #12]
 810135e:	3301      	adds	r3, #1
 8101360:	60fb      	str	r3, [r7, #12]
 8101362:	e004      	b.n	810136e <checkcoin+0x5a>
	}
	else if (amountOfColumnsChanged > 1)
 8101364:	68bb      	ldr	r3, [r7, #8]
 8101366:	2b01      	cmp	r3, #1
 8101368:	dd01      	ble.n	810136e <checkcoin+0x5a>
	{
		column = 9;             // More than one column changed, set error value
 810136a:	2309      	movs	r3, #9
 810136c:	60fb      	str	r3, [r7, #12]
	}

	return column;                        // Return column index or error value
 810136e:	68fb      	ldr	r3, [r7, #12]
}
 8101370:	4618      	mov	r0, r3
 8101372:	3714      	adds	r7, #20
 8101374:	46bd      	mov	sp, r7
 8101376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137a:	4770      	bx	lr
 810137c:	100000e0 	.word	0x100000e0
 8101380:	100000fc 	.word	0x100000fc

08101384 <update_board_mem>:

void update_board_mem(void)
{
 8101384:	b480      	push	{r7}
 8101386:	b083      	sub	sp, #12
 8101388:	af00      	add	r7, sp, #0
	for (int k = 0; k < 7; k++) 	//update board
 810138a:	2300      	movs	r3, #0
 810138c:	607b      	str	r3, [r7, #4]
 810138e:	e00a      	b.n	81013a6 <update_board_mem+0x22>
	{
		mem_Board_old[k] = mem_Board[k];
 8101390:	4a0a      	ldr	r2, [pc, #40]	; (81013bc <update_board_mem+0x38>)
 8101392:	687b      	ldr	r3, [r7, #4]
 8101394:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8101398:	4909      	ldr	r1, [pc, #36]	; (81013c0 <update_board_mem+0x3c>)
 810139a:	687b      	ldr	r3, [r7, #4]
 810139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int k = 0; k < 7; k++) 	//update board
 81013a0:	687b      	ldr	r3, [r7, #4]
 81013a2:	3301      	adds	r3, #1
 81013a4:	607b      	str	r3, [r7, #4]
 81013a6:	687b      	ldr	r3, [r7, #4]
 81013a8:	2b06      	cmp	r3, #6
 81013aa:	ddf1      	ble.n	8101390 <update_board_mem+0xc>
	}
}
 81013ac:	bf00      	nop
 81013ae:	bf00      	nop
 81013b0:	370c      	adds	r7, #12
 81013b2:	46bd      	mov	sp, r7
 81013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013b8:	4770      	bx	lr
 81013ba:	bf00      	nop
 81013bc:	100000e0 	.word	0x100000e0
 81013c0:	100000fc 	.word	0x100000fc

081013c4 <TCS3472_Create>:
int yellow = 0;
int rgb_error = 0;

TCS3472 TCS3472_Create(uint8_t addr, I2C_HandleTypeDef *handle)
/* Structure with the address and I2C handle of the RGB Sensor */
{
 81013c4:	b480      	push	{r7}
 81013c6:	b087      	sub	sp, #28
 81013c8:	af00      	add	r7, sp, #0
 81013ca:	60f8      	str	r0, [r7, #12]
 81013cc:	460b      	mov	r3, r1
 81013ce:	607a      	str	r2, [r7, #4]
 81013d0:	72fb      	strb	r3, [r7, #11]
	//create structure of RBG sensor data
	TCS3472 sensor_data =
 81013d2:	7afb      	ldrb	r3, [r7, #11]
 81013d4:	743b      	strb	r3, [r7, #16]
 81013d6:	687b      	ldr	r3, [r7, #4]
 81013d8:	617b      	str	r3, [r7, #20]
	{ addr, handle };
	return sensor_data;
 81013da:	68fb      	ldr	r3, [r7, #12]
 81013dc:	461a      	mov	r2, r3
 81013de:	f107 0310 	add.w	r3, r7, #16
 81013e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 81013e6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 81013ea:	68f8      	ldr	r0, [r7, #12]
 81013ec:	371c      	adds	r7, #28
 81013ee:	46bd      	mov	sp, r7
 81013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013f4:	4770      	bx	lr
	...

081013f8 <rgb_init>:


void rgb_init(const TCS3472 *const self)
/* Function that programs the RGB sensor to turn on and then sets initial values */
{
 81013f8:	b580      	push	{r7, lr}
 81013fa:	b082      	sub	sp, #8
 81013fc:	af00      	add	r7, sp, #0
 81013fe:	6078      	str	r0, [r7, #4]
	// command to turn on the device [0x03] sent to register [0x80]
	rgb_send(self, RGB_COMMAND_REG | RGB_REG_ENABLE,
 8101400:	2203      	movs	r2, #3
 8101402:	2180      	movs	r1, #128	; 0x80
 8101404:	6878      	ldr	r0, [r7, #4]
 8101406:	f000 f815 	bl	8101434 <rgb_send>
			RGB_ENABLE_PON | RGB_ENABLE_AEN);

	HAL_Delay(2);
 810140a:	2002      	movs	r0, #2
 810140c:	f001 ff1a 	bl	8103244 <HAL_Delay>
	// 0xFF = 2.4 ms
	// 0x00 = 700 ms
	// 0xEE = 238; (256 - 238) * 2.4 = 43.2 ms

	//  ATIME = 0xEE; sent to TIMING register [0x81]
	rgb_send(self, RGB_COMMAND_REG | RGB_REG_TIMING, 0xEE);
 8101410:	22ee      	movs	r2, #238	; 0xee
 8101412:	2181      	movs	r1, #129	; 0x81
 8101414:	6878      	ldr	r0, [r7, #4]
 8101416:	f000 f80d 	bl	8101434 <rgb_send>
	HAL_Delay(10);
 810141a:	200a      	movs	r0, #10
 810141c:	f001 ff12 	bl	8103244 <HAL_Delay>
	send_msg((uint8_t*) "\r!RGB-Sensor Initialised!\n\r");
 8101420:	4803      	ldr	r0, [pc, #12]	; (8101430 <rgb_init+0x38>)
 8101422:	f001 fe07 	bl	8103034 <send_msg>

}
 8101426:	bf00      	nop
 8101428:	3708      	adds	r7, #8
 810142a:	46bd      	mov	sp, r7
 810142c:	bd80      	pop	{r7, pc}
 810142e:	bf00      	nop
 8101430:	0810b178 	.word	0x0810b178

08101434 <rgb_send>:
 *
 * @param1 self: the structure which holds information about the RGB sensor
 * @param2 regAddress: the register to which the data will be written to
 * @param3 data: the data to be written in the register
 */
{
 8101434:	b580      	push	{r7, lr}
 8101436:	b084      	sub	sp, #16
 8101438:	af02      	add	r7, sp, #8
 810143a:	6078      	str	r0, [r7, #4]
 810143c:	460b      	mov	r3, r1
 810143e:	70fb      	strb	r3, [r7, #3]
 8101440:	4613      	mov	r3, r2
 8101442:	70bb      	strb	r3, [r7, #2]
	i2c_Transmit(self->handle, self->dev_addr, regAddress, 1, &data, 1);
 8101444:	687b      	ldr	r3, [r7, #4]
 8101446:	6858      	ldr	r0, [r3, #4]
 8101448:	687b      	ldr	r3, [r7, #4]
 810144a:	7819      	ldrb	r1, [r3, #0]
 810144c:	78fa      	ldrb	r2, [r7, #3]
 810144e:	2301      	movs	r3, #1
 8101450:	9301      	str	r3, [sp, #4]
 8101452:	1cbb      	adds	r3, r7, #2
 8101454:	9300      	str	r3, [sp, #0]
 8101456:	2301      	movs	r3, #1
 8101458:	f001 f8aa 	bl	81025b0 <i2c_Transmit>
}
 810145c:	bf00      	nop
 810145e:	3708      	adds	r7, #8
 8101460:	46bd      	mov	sp, r7
 8101462:	bd80      	pop	{r7, pc}

08101464 <initMotors>:
 */
#include "level_3/motor_master.h"

void initMotors()
/* Initialising timers for motors */
{
 8101464:	b580      	push	{r7, lr}
 8101466:	af00      	add	r7, sp, #0
	initMotorX();
 8101468:	f000 f860 	bl	810152c <initMotorX>
	initMotorZ();
 810146c:	f000 f9ce 	bl	810180c <initMotorZ>
}
 8101470:	bf00      	nop
 8101472:	bd80      	pop	{r7, pc}

08101474 <move_to_X_and_Z>:
 * param1 posX: position of the X axis locations defined in motor_x.h
 * param2 posZ: position of the Z axis locations defined in motor_z.h
 *
 * return none: TODO: a return could be implemented for various feedback
 */
{
 8101474:	b580      	push	{r7, lr}
 8101476:	b082      	sub	sp, #8
 8101478:	af00      	add	r7, sp, #0
 810147a:	4603      	mov	r3, r0
 810147c:	460a      	mov	r2, r1
 810147e:	80fb      	strh	r3, [r7, #6]
 8101480:	4613      	mov	r3, r2
 8101482:	80bb      	strh	r3, [r7, #4]
	move_to_posX(posX);
 8101484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101488:	4618      	mov	r0, r3
 810148a:	f7ff f8cb 	bl	8100624 <__aeabi_i2d>
 810148e:	4602      	mov	r2, r0
 8101490:	460b      	mov	r3, r1
 8101492:	ec43 2b10 	vmov	d0, r2, r3
 8101496:	f000 f891 	bl	81015bc <move_to_posX>
	send_msg((uint8_t*) "\r**** Motor X is at the final position! ****\n\r");
 810149a:	480b      	ldr	r0, [pc, #44]	; (81014c8 <move_to_X_and_Z+0x54>)
 810149c:	f001 fdca 	bl	8103034 <send_msg>

	move_to_posZ(posZ);
 81014a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 81014a4:	4618      	mov	r0, r3
 81014a6:	f7ff f8bd 	bl	8100624 <__aeabi_i2d>
 81014aa:	4602      	mov	r2, r0
 81014ac:	460b      	mov	r3, r1
 81014ae:	ec43 2b10 	vmov	d0, r2, r3
 81014b2:	f000 f9f3 	bl	810189c <move_to_posZ>
	send_msg((uint8_t*) "\r**** Motor Z is at the final position! ****\n\r");
 81014b6:	4805      	ldr	r0, [pc, #20]	; (81014cc <move_to_X_and_Z+0x58>)
 81014b8:	f001 fdbc 	bl	8103034 <send_msg>

	return 1;
 81014bc:	2301      	movs	r3, #1
}
 81014be:	4618      	mov	r0, r3
 81014c0:	3708      	adds	r7, #8
 81014c2:	46bd      	mov	sp, r7
 81014c4:	bd80      	pop	{r7, pc}
 81014c6:	bf00      	nop
 81014c8:	0810b194 	.word	0x0810b194
 81014cc:	0810b1c4 	.word	0x0810b1c4

081014d0 <HomeMotors>:
 * param1 homeX: 1 homed, 0 skip
 * param2 homeZ: 1 homed, 0 skip
 *
 * return none: TODO: a return could be implemented for various feedback
 */
{
 81014d0:	b580      	push	{r7, lr}
 81014d2:	b082      	sub	sp, #8
 81014d4:	af00      	add	r7, sp, #0
 81014d6:	4603      	mov	r3, r0
 81014d8:	460a      	mov	r2, r1
 81014da:	71fb      	strb	r3, [r7, #7]
 81014dc:	4613      	mov	r3, r2
 81014de:	71bb      	strb	r3, [r7, #6]
	send_msg((uint8_t*) "\r#### HOMING Motor X №###\n\r");
 81014e0:	480e      	ldr	r0, [pc, #56]	; (810151c <HomeMotors+0x4c>)
 81014e2:	f001 fda7 	bl	8103034 <send_msg>
	if (homeX)
 81014e6:	79fb      	ldrb	r3, [r7, #7]
 81014e8:	2b00      	cmp	r3, #0
 81014ea:	d001      	beq.n	81014f0 <HomeMotors+0x20>
	{
		homeMotorX();
 81014ec:	f000 f82e 	bl	810154c <homeMotorX>
	}
	send_msg((uint8_t*) "\r######## Motor X is at HOME ########\n\r");
 81014f0:	480b      	ldr	r0, [pc, #44]	; (8101520 <HomeMotors+0x50>)
 81014f2:	f001 fd9f 	bl	8103034 <send_msg>

	HAL_Delay(250);
 81014f6:	20fa      	movs	r0, #250	; 0xfa
 81014f8:	f001 fea4 	bl	8103244 <HAL_Delay>
	send_msg((uint8_t*) "\r#### HOMING Motor Z ####\n\r");
 81014fc:	4809      	ldr	r0, [pc, #36]	; (8101524 <HomeMotors+0x54>)
 81014fe:	f001 fd99 	bl	8103034 <send_msg>
	if (homeZ)
 8101502:	79bb      	ldrb	r3, [r7, #6]
 8101504:	2b00      	cmp	r3, #0
 8101506:	d001      	beq.n	810150c <HomeMotors+0x3c>
	{
		homeMotorZ();
 8101508:	f000 f990 	bl	810182c <homeMotorZ>
	}
	send_msg((uint8_t*) "\r######## Motor Z is at HOME ########\n\r");
 810150c:	4806      	ldr	r0, [pc, #24]	; (8101528 <HomeMotors+0x58>)
 810150e:	f001 fd91 	bl	8103034 <send_msg>
	return 1;
 8101512:	2301      	movs	r3, #1
}
 8101514:	4618      	mov	r0, r3
 8101516:	3708      	adds	r7, #8
 8101518:	46bd      	mov	sp, r7
 810151a:	bd80      	pop	{r7, pc}
 810151c:	0810b1f4 	.word	0x0810b1f4
 8101520:	0810b214 	.word	0x0810b214
 8101524:	0810b23c 	.word	0x0810b23c
 8101528:	0810b258 	.word	0x0810b258

0810152c <initMotorX>:
uint8_t i_X = 0;
uint8_t once_X = 1;

void initMotorX()
/* Initialises the necessary timers for motor X */
{
 810152c:	b580      	push	{r7, lr}
 810152e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8101530:	2108      	movs	r1, #8
 8101532:	4804      	ldr	r0, [pc, #16]	; (8101544 <initMotorX+0x18>)
 8101534:	f006 fdb6 	bl	81080a4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8101538:	213c      	movs	r1, #60	; 0x3c
 810153a:	4803      	ldr	r0, [pc, #12]	; (8101548 <initMotorX+0x1c>)
 810153c:	f006 ff66 	bl	810840c <HAL_TIM_Encoder_Start_IT>
}
 8101540:	bf00      	nop
 8101542:	bd80      	pop	{r7, pc}
 8101544:	100001d4 	.word	0x100001d4
 8101548:	10000220 	.word	0x10000220

0810154c <homeMotorX>:

uint8_t homeMotorX()
/* homeMotorX: Moves the motor to the home position */
{
 810154c:	b580      	push	{r7, lr}
 810154e:	af00      	add	r7, sp, #0

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 130); 	// set PWM of motor
 8101550:	4b15      	ldr	r3, [pc, #84]	; (81015a8 <homeMotorX+0x5c>)
 8101552:	681b      	ldr	r3, [r3, #0]
 8101554:	2282      	movs	r2, #130	; 0x82
 8101556:	63da      	str	r2, [r3, #60]	; 0x3c

	set_Direction_X(); 									// counter-clockwise  | towards HOME TODO:Change name
 8101558:	f000 feea 	bl	8102330 <set_Direction_X>
	set_Ready_X(); 										// enables motor X TODO:Change name
 810155c:	f000 ff00 	bl	8102360 <set_Ready_X>

	while (!get_Homing_X())
 8101560:	bf00      	nop
 8101562:	f000 ff5d 	bl	8102420 <get_Homing_X>
 8101566:	4603      	mov	r3, r0
 8101568:	2b00      	cmp	r3, #0
 810156a:	d0fa      	beq.n	8101562 <homeMotorX+0x16>
	{

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0); 	// set PWM of motor
 810156c:	4b0e      	ldr	r3, [pc, #56]	; (81015a8 <homeMotorX+0x5c>)
 810156e:	681b      	ldr	r3, [r3, #0]
 8101570:	2200      	movs	r2, #0
 8101572:	63da      	str	r2, [r3, #60]	; 0x3c
	reset_Ready_X(); 									// disables motor
 8101574:	f000 ff00 	bl	8102378 <reset_Ready_X>
	HAL_Delay(1000);
 8101578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 810157c:	f001 fe62 	bl	8103244 <HAL_Delay>
	/* Initialise variables */
	position_mm_X = 0.0;
 8101580:	490a      	ldr	r1, [pc, #40]	; (81015ac <homeMotorX+0x60>)
 8101582:	f04f 0200 	mov.w	r2, #0
 8101586:	f04f 0300 	mov.w	r3, #0
 810158a:	e9c1 2300 	strd	r2, r3, [r1]
	counterX = 0;
 810158e:	4b08      	ldr	r3, [pc, #32]	; (81015b0 <homeMotorX+0x64>)
 8101590:	2200      	movs	r2, #0
 8101592:	601a      	str	r2, [r3, #0]
	i_X = 0;
 8101594:	4b07      	ldr	r3, [pc, #28]	; (81015b4 <homeMotorX+0x68>)
 8101596:	2200      	movs	r2, #0
 8101598:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0); 					// reset timer
 810159a:	4b07      	ldr	r3, [pc, #28]	; (81015b8 <homeMotorX+0x6c>)
 810159c:	681b      	ldr	r3, [r3, #0]
 810159e:	2200      	movs	r2, #0
 81015a0:	625a      	str	r2, [r3, #36]	; 0x24
	return 1;
 81015a2:	2301      	movs	r3, #1
}
 81015a4:	4618      	mov	r0, r3
 81015a6:	bd80      	pop	{r7, pc}
 81015a8:	100001d4 	.word	0x100001d4
 81015ac:	100000a8 	.word	0x100000a8
 81015b0:	100000a4 	.word	0x100000a4
 81015b4:	100000b4 	.word	0x100000b4
 81015b8:	10000220 	.word	0x10000220

081015bc <move_to_posX>:
/* move_to_posX: Moves the motor to a position X cm away from the home position
 *
 * @param posX: Centimetres away from the home position
 *  RANGE posX:  TODO: Determine it
 */
{
 81015bc:	b580      	push	{r7, lr}
 81015be:	b084      	sub	sp, #16
 81015c0:	af00      	add	r7, sp, #0
 81015c2:	ed87 0b00 	vstr	d0, [r7]
	counterX = __HAL_TIM_GET_COUNTER(&htim3);					// get timer value
 81015c6:	4b86      	ldr	r3, [pc, #536]	; (81017e0 <move_to_posX+0x224>)
 81015c8:	681b      	ldr	r3, [r3, #0]
 81015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81015cc:	4a85      	ldr	r2, [pc, #532]	; (81017e4 <move_to_posX+0x228>)
 81015ce:	6013      	str	r3, [r2, #0]
	position_mm_X = (double) ((counterX / 3855) + (i_X * 17)); 	// get position
 81015d0:	4b84      	ldr	r3, [pc, #528]	; (81017e4 <move_to_posX+0x228>)
 81015d2:	681b      	ldr	r3, [r3, #0]
 81015d4:	4a84      	ldr	r2, [pc, #528]	; (81017e8 <move_to_posX+0x22c>)
 81015d6:	fba2 2303 	umull	r2, r3, r2, r3
 81015da:	0ada      	lsrs	r2, r3, #11
 81015dc:	4b83      	ldr	r3, [pc, #524]	; (81017ec <move_to_posX+0x230>)
 81015de:	781b      	ldrb	r3, [r3, #0]
 81015e0:	4619      	mov	r1, r3
 81015e2:	460b      	mov	r3, r1
 81015e4:	011b      	lsls	r3, r3, #4
 81015e6:	440b      	add	r3, r1
 81015e8:	4413      	add	r3, r2
 81015ea:	4618      	mov	r0, r3
 81015ec:	f7ff f80a 	bl	8100604 <__aeabi_ui2d>
 81015f0:	4602      	mov	r2, r0
 81015f2:	460b      	mov	r3, r1
 81015f4:	497e      	ldr	r1, [pc, #504]	; (81017f0 <move_to_posX+0x234>)
 81015f6:	e9c1 2300 	strd	r2, r3, [r1]
	double delta = posX - position_mm_X;						// calculate delta
 81015fa:	4b7d      	ldr	r3, [pc, #500]	; (81017f0 <move_to_posX+0x234>)
 81015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101600:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101604:	f7fe fec0 	bl	8100388 <__aeabi_dsub>
 8101608:	4602      	mov	r2, r0
 810160a:	460b      	mov	r3, r1
 810160c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 130); 			// adjust speed (prev val 140) 120 is a bit slow, but safe speed for not crashing during testing
 8101610:	4b78      	ldr	r3, [pc, #480]	; (81017f4 <move_to_posX+0x238>)
 8101612:	681b      	ldr	r3, [r3, #0]
 8101614:	2282      	movs	r2, #130	; 0x82
 8101616:	63da      	str	r2, [r3, #60]	; 0x3c

	set_Ready_X(); 												// enable motor
 8101618:	f000 fea2 	bl	8102360 <set_Ready_X>
	while (abs(delta) > 1.5) 										// accuracy of movement TODO: prove it
 810161c:	e0ca      	b.n	81017b4 <move_to_posX+0x1f8>
	{
		if (delta > 0){
 810161e:	f04f 0200 	mov.w	r2, #0
 8101622:	f04f 0300 	mov.w	r3, #0
 8101626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810162a:	f7ff f8e3 	bl	81007f4 <__aeabi_dcmpgt>
 810162e:	4603      	mov	r3, r0
 8101630:	2b00      	cmp	r3, #0
 8101632:	d002      	beq.n	810163a <move_to_posX+0x7e>
			reset_Direction_X();} 								// clockwise | towards END
 8101634:	f000 fe88 	bl	8102348 <reset_Direction_X>
 8101638:	e00d      	b.n	8101656 <move_to_posX+0x9a>
		else if (delta < 0){
 810163a:	f04f 0200 	mov.w	r2, #0
 810163e:	f04f 0300 	mov.w	r3, #0
 8101642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101646:	f7ff f8b7 	bl	81007b8 <__aeabi_dcmplt>
 810164a:	4603      	mov	r3, r0
 810164c:	2b00      	cmp	r3, #0
 810164e:	d100      	bne.n	8101652 <move_to_posX+0x96>
			set_Direction_X();}  								// counter-clockwise | towards HOME
		else{
			break;}
 8101650:	e0bb      	b.n	81017ca <move_to_posX+0x20e>
			set_Direction_X();}  								// counter-clockwise | towards HOME
 8101652:	f000 fe6d 	bl	8102330 <set_Direction_X>

		counterX = __HAL_TIM_GET_COUNTER(&htim3);				// update counter
 8101656:	4b62      	ldr	r3, [pc, #392]	; (81017e0 <move_to_posX+0x224>)
 8101658:	681b      	ldr	r3, [r3, #0]
 810165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810165c:	4a61      	ldr	r2, [pc, #388]	; (81017e4 <move_to_posX+0x228>)
 810165e:	6013      	str	r3, [r2, #0]
		/* Some Magic */
		if (counterX > 61680 && delta > 0 && once_X){
 8101660:	4b60      	ldr	r3, [pc, #384]	; (81017e4 <move_to_posX+0x228>)
 8101662:	681b      	ldr	r3, [r3, #0]
 8101664:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8101668:	4293      	cmp	r3, r2
 810166a:	d912      	bls.n	8101692 <move_to_posX+0xd6>
 810166c:	f04f 0200 	mov.w	r2, #0
 8101670:	f04f 0300 	mov.w	r3, #0
 8101674:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101678:	f7ff f8bc 	bl	81007f4 <__aeabi_dcmpgt>
 810167c:	4603      	mov	r3, r0
 810167e:	2b00      	cmp	r3, #0
 8101680:	d007      	beq.n	8101692 <move_to_posX+0xd6>
 8101682:	4b5d      	ldr	r3, [pc, #372]	; (81017f8 <move_to_posX+0x23c>)
 8101684:	781b      	ldrb	r3, [r3, #0]
 8101686:	2b00      	cmp	r3, #0
 8101688:	d003      	beq.n	8101692 <move_to_posX+0xd6>
			once_X = 0;}
 810168a:	4b5b      	ldr	r3, [pc, #364]	; (81017f8 <move_to_posX+0x23c>)
 810168c:	2200      	movs	r2, #0
 810168e:	701a      	strb	r2, [r3, #0]
 8101690:	e051      	b.n	8101736 <move_to_posX+0x17a>
		else if (counterX < 3855 && delta > 0 && !once_X){
 8101692:	4b54      	ldr	r3, [pc, #336]	; (81017e4 <move_to_posX+0x228>)
 8101694:	681b      	ldr	r3, [r3, #0]
 8101696:	f640 720e 	movw	r2, #3854	; 0xf0e
 810169a:	4293      	cmp	r3, r2
 810169c:	d818      	bhi.n	81016d0 <move_to_posX+0x114>
 810169e:	f04f 0200 	mov.w	r2, #0
 81016a2:	f04f 0300 	mov.w	r3, #0
 81016a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81016aa:	f7ff f8a3 	bl	81007f4 <__aeabi_dcmpgt>
 81016ae:	4603      	mov	r3, r0
 81016b0:	2b00      	cmp	r3, #0
 81016b2:	d00d      	beq.n	81016d0 <move_to_posX+0x114>
 81016b4:	4b50      	ldr	r3, [pc, #320]	; (81017f8 <move_to_posX+0x23c>)
 81016b6:	781b      	ldrb	r3, [r3, #0]
 81016b8:	2b00      	cmp	r3, #0
 81016ba:	d109      	bne.n	81016d0 <move_to_posX+0x114>
			once_X = 1, i_X += 1;}
 81016bc:	4b4e      	ldr	r3, [pc, #312]	; (81017f8 <move_to_posX+0x23c>)
 81016be:	2201      	movs	r2, #1
 81016c0:	701a      	strb	r2, [r3, #0]
 81016c2:	4b4a      	ldr	r3, [pc, #296]	; (81017ec <move_to_posX+0x230>)
 81016c4:	781b      	ldrb	r3, [r3, #0]
 81016c6:	3301      	adds	r3, #1
 81016c8:	b2da      	uxtb	r2, r3
 81016ca:	4b48      	ldr	r3, [pc, #288]	; (81017ec <move_to_posX+0x230>)
 81016cc:	701a      	strb	r2, [r3, #0]
 81016ce:	e032      	b.n	8101736 <move_to_posX+0x17a>
		else if (counterX < 3855 && delta < 0){
 81016d0:	4b44      	ldr	r3, [pc, #272]	; (81017e4 <move_to_posX+0x228>)
 81016d2:	681b      	ldr	r3, [r3, #0]
 81016d4:	f640 720e 	movw	r2, #3854	; 0xf0e
 81016d8:	4293      	cmp	r3, r2
 81016da:	d80e      	bhi.n	81016fa <move_to_posX+0x13e>
 81016dc:	f04f 0200 	mov.w	r2, #0
 81016e0:	f04f 0300 	mov.w	r3, #0
 81016e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81016e8:	f7ff f866 	bl	81007b8 <__aeabi_dcmplt>
 81016ec:	4603      	mov	r3, r0
 81016ee:	2b00      	cmp	r3, #0
 81016f0:	d003      	beq.n	81016fa <move_to_posX+0x13e>
			once_X = 0;}
 81016f2:	4b41      	ldr	r3, [pc, #260]	; (81017f8 <move_to_posX+0x23c>)
 81016f4:	2200      	movs	r2, #0
 81016f6:	701a      	strb	r2, [r3, #0]
 81016f8:	e01d      	b.n	8101736 <move_to_posX+0x17a>
		else if (counterX > 61680 && delta < 0 && !once_X){
 81016fa:	4b3a      	ldr	r3, [pc, #232]	; (81017e4 <move_to_posX+0x228>)
 81016fc:	681b      	ldr	r3, [r3, #0]
 81016fe:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8101702:	4293      	cmp	r3, r2
 8101704:	d917      	bls.n	8101736 <move_to_posX+0x17a>
 8101706:	f04f 0200 	mov.w	r2, #0
 810170a:	f04f 0300 	mov.w	r3, #0
 810170e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101712:	f7ff f851 	bl	81007b8 <__aeabi_dcmplt>
 8101716:	4603      	mov	r3, r0
 8101718:	2b00      	cmp	r3, #0
 810171a:	d00c      	beq.n	8101736 <move_to_posX+0x17a>
 810171c:	4b36      	ldr	r3, [pc, #216]	; (81017f8 <move_to_posX+0x23c>)
 810171e:	781b      	ldrb	r3, [r3, #0]
 8101720:	2b00      	cmp	r3, #0
 8101722:	d108      	bne.n	8101736 <move_to_posX+0x17a>
			once_X = 1, i_X -= 1;}
 8101724:	4b34      	ldr	r3, [pc, #208]	; (81017f8 <move_to_posX+0x23c>)
 8101726:	2201      	movs	r2, #1
 8101728:	701a      	strb	r2, [r3, #0]
 810172a:	4b30      	ldr	r3, [pc, #192]	; (81017ec <move_to_posX+0x230>)
 810172c:	781b      	ldrb	r3, [r3, #0]
 810172e:	3b01      	subs	r3, #1
 8101730:	b2da      	uxtb	r2, r3
 8101732:	4b2e      	ldr	r3, [pc, #184]	; (81017ec <move_to_posX+0x230>)
 8101734:	701a      	strb	r2, [r3, #0]
		/* End of Magic */

		position_mm_X = (double) ((counterX / 3855) + (i_X * 17));	// update position
 8101736:	4b2b      	ldr	r3, [pc, #172]	; (81017e4 <move_to_posX+0x228>)
 8101738:	681b      	ldr	r3, [r3, #0]
 810173a:	4a2b      	ldr	r2, [pc, #172]	; (81017e8 <move_to_posX+0x22c>)
 810173c:	fba2 2303 	umull	r2, r3, r2, r3
 8101740:	0ada      	lsrs	r2, r3, #11
 8101742:	4b2a      	ldr	r3, [pc, #168]	; (81017ec <move_to_posX+0x230>)
 8101744:	781b      	ldrb	r3, [r3, #0]
 8101746:	4619      	mov	r1, r3
 8101748:	460b      	mov	r3, r1
 810174a:	011b      	lsls	r3, r3, #4
 810174c:	440b      	add	r3, r1
 810174e:	4413      	add	r3, r2
 8101750:	4618      	mov	r0, r3
 8101752:	f7fe ff57 	bl	8100604 <__aeabi_ui2d>
 8101756:	4602      	mov	r2, r0
 8101758:	460b      	mov	r3, r1
 810175a:	4925      	ldr	r1, [pc, #148]	; (81017f0 <move_to_posX+0x234>)
 810175c:	e9c1 2300 	strd	r2, r3, [r1]
		delta = posX - position_mm_X;								// update delta
 8101760:	4b23      	ldr	r3, [pc, #140]	; (81017f0 <move_to_posX+0x234>)
 8101762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101766:	e9d7 0100 	ldrd	r0, r1, [r7]
 810176a:	f7fe fe0d 	bl	8100388 <__aeabi_dsub>
 810176e:	4602      	mov	r2, r0
 8101770:	460b      	mov	r3, r1
 8101772:	e9c7 2302 	strd	r2, r3, [r7, #8]

		// limit msg sending every Nth operation
		if (msg_counter_x % 200000 == 0)							// TODO: move 10 to a define freq of msging
 8101776:	4b21      	ldr	r3, [pc, #132]	; (81017fc <move_to_posX+0x240>)
 8101778:	681a      	ldr	r2, [r3, #0]
 810177a:	4b21      	ldr	r3, [pc, #132]	; (8101800 <move_to_posX+0x244>)
 810177c:	fb83 1302 	smull	r1, r3, r3, r2
 8101780:	1399      	asrs	r1, r3, #14
 8101782:	17d3      	asrs	r3, r2, #31
 8101784:	1acb      	subs	r3, r1, r3
 8101786:	491f      	ldr	r1, [pc, #124]	; (8101804 <move_to_posX+0x248>)
 8101788:	fb01 f303 	mul.w	r3, r1, r3
 810178c:	1ad3      	subs	r3, r2, r3
 810178e:	2b00      	cmp	r3, #0
 8101790:	d10b      	bne.n	81017aa <move_to_posX+0x1ee>
		{
			send_msg_data((uint8_t*)"\rCurrently @ Pos X: %d\n\r", (int)position_mm_X);
 8101792:	4b17      	ldr	r3, [pc, #92]	; (81017f0 <move_to_posX+0x234>)
 8101794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101798:	4610      	mov	r0, r2
 810179a:	4619      	mov	r1, r3
 810179c:	f7ff f834 	bl	8100808 <__aeabi_d2iz>
 81017a0:	4603      	mov	r3, r0
 81017a2:	4619      	mov	r1, r3
 81017a4:	4818      	ldr	r0, [pc, #96]	; (8101808 <move_to_posX+0x24c>)
 81017a6:	f001 fc59 	bl	810305c <send_msg_data>
		}
		msg_counter_x++;
 81017aa:	4b14      	ldr	r3, [pc, #80]	; (81017fc <move_to_posX+0x240>)
 81017ac:	681b      	ldr	r3, [r3, #0]
 81017ae:	3301      	adds	r3, #1
 81017b0:	4a12      	ldr	r2, [pc, #72]	; (81017fc <move_to_posX+0x240>)
 81017b2:	6013      	str	r3, [r2, #0]
	while (abs(delta) > 1.5) 										// accuracy of movement TODO: prove it
 81017b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81017b8:	f7ff f826 	bl	8100808 <__aeabi_d2iz>
 81017bc:	4603      	mov	r3, r0
 81017be:	2b00      	cmp	r3, #0
 81017c0:	bfb8      	it	lt
 81017c2:	425b      	neglt	r3, r3
 81017c4:	2b01      	cmp	r3, #1
 81017c6:	f73f af2a 	bgt.w	810161e <move_to_posX+0x62>

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0);					// set PWM to 0
 81017ca:	4b0a      	ldr	r3, [pc, #40]	; (81017f4 <move_to_posX+0x238>)
 81017cc:	681b      	ldr	r3, [r3, #0]
 81017ce:	2200      	movs	r2, #0
 81017d0:	63da      	str	r2, [r3, #60]	; 0x3c
	reset_Ready_X();
 81017d2:	f000 fdd1 	bl	8102378 <reset_Ready_X>
	return 1;
 81017d6:	2301      	movs	r3, #1
}
 81017d8:	4618      	mov	r0, r3
 81017da:	3710      	adds	r7, #16
 81017dc:	46bd      	mov	sp, r7
 81017de:	bd80      	pop	{r7, pc}
 81017e0:	10000220 	.word	0x10000220
 81017e4:	100000a4 	.word	0x100000a4
 81017e8:	88008801 	.word	0x88008801
 81017ec:	100000b4 	.word	0x100000b4
 81017f0:	100000a8 	.word	0x100000a8
 81017f4:	100001d4 	.word	0x100001d4
 81017f8:	10000008 	.word	0x10000008
 81017fc:	100000b0 	.word	0x100000b0
 8101800:	14f8b589 	.word	0x14f8b589
 8101804:	00030d40 	.word	0x00030d40
 8101808:	0810b280 	.word	0x0810b280

0810180c <initMotorZ>:
uint8_t i_Z = 0;
uint8_t once_Z = 1;

void initMotorZ()
/* Initialises the necessary timers for motor Z */
{
 810180c:	b580      	push	{r7, lr}
 810180e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);   // Start PWM output for motor Z using TIM2 channel 4
 8101810:	210c      	movs	r1, #12
 8101812:	4804      	ldr	r0, [pc, #16]	; (8101824 <initMotorZ+0x18>)
 8101814:	f006 fc46 	bl	81080a4 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);   // Enable encoder interface with interrupt for all channels of TIM4
 8101818:	213c      	movs	r1, #60	; 0x3c
 810181a:	4803      	ldr	r0, [pc, #12]	; (8101828 <initMotorZ+0x1c>)
 810181c:	f006 fdf6 	bl	810840c <HAL_TIM_Encoder_Start_IT>
}
 8101820:	bf00      	nop
 8101822:	bd80      	pop	{r7, pc}
 8101824:	100001d4 	.word	0x100001d4
 8101828:	1000026c 	.word	0x1000026c

0810182c <homeMotorZ>:
uint8_t homeMotorZ()
/* homeMotorZ: Moves the motor to the home position
 *
 * return: none todo: make a return for error catching and/or others
 * */
{
 810182c:	b580      	push	{r7, lr}
 810182e:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 115); 	// set PWM of motor
 8101830:	4b15      	ldr	r3, [pc, #84]	; (8101888 <homeMotorZ+0x5c>)
 8101832:	681b      	ldr	r3, [r3, #0]
 8101834:	2273      	movs	r2, #115	; 0x73
 8101836:	641a      	str	r2, [r3, #64]	; 0x40

	set_Direction_Z(); 									// counter-clockwise | towards HOME TODO:Change name
 8101838:	f000 fdaa 	bl	8102390 <set_Direction_Z>
	set_Ready_Z(); 										// enable motor TODO:Change name
 810183c:	f000 fdc0 	bl	81023c0 <set_Ready_Z>


	while (!get_Homing_Z()) 							// wait until home-switch is hit
 8101840:	bf00      	nop
 8101842:	f000 fdff 	bl	8102444 <get_Homing_Z>
 8101846:	4603      	mov	r3, r0
 8101848:	2b00      	cmp	r3, #0
 810184a:	d0fa      	beq.n	8101842 <homeMotorZ+0x16>
	{

	}
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 0); 	// set PWM of motor
 810184c:	4b0e      	ldr	r3, [pc, #56]	; (8101888 <homeMotorZ+0x5c>)
 810184e:	681b      	ldr	r3, [r3, #0]
 8101850:	2200      	movs	r2, #0
 8101852:	641a      	str	r2, [r3, #64]	; 0x40
	reset_Ready_Z(); 									//disable motor
 8101854:	f000 fdc0 	bl	81023d8 <reset_Ready_Z>
	HAL_Delay(1000);
 8101858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 810185c:	f001 fcf2 	bl	8103244 <HAL_Delay>
	/* reset variables */
	position_mm_Z = 0.0;
 8101860:	490a      	ldr	r1, [pc, #40]	; (810188c <homeMotorZ+0x60>)
 8101862:	f04f 0200 	mov.w	r2, #0
 8101866:	f04f 0300 	mov.w	r3, #0
 810186a:	e9c1 2300 	strd	r2, r3, [r1]
	counterZ = 0;
 810186e:	4b08      	ldr	r3, [pc, #32]	; (8101890 <homeMotorZ+0x64>)
 8101870:	2200      	movs	r2, #0
 8101872:	601a      	str	r2, [r3, #0]
	i_Z = 0;
 8101874:	4b07      	ldr	r3, [pc, #28]	; (8101894 <homeMotorZ+0x68>)
 8101876:	2200      	movs	r2, #0
 8101878:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim4, 0); 					// reset timer
 810187a:	4b07      	ldr	r3, [pc, #28]	; (8101898 <homeMotorZ+0x6c>)
 810187c:	681b      	ldr	r3, [r3, #0]
 810187e:	2200      	movs	r2, #0
 8101880:	625a      	str	r2, [r3, #36]	; 0x24
	return 1;
 8101882:	2301      	movs	r3, #1
}
 8101884:	4618      	mov	r0, r3
 8101886:	bd80      	pop	{r7, pc}
 8101888:	100001d4 	.word	0x100001d4
 810188c:	100000c0 	.word	0x100000c0
 8101890:	100000b8 	.word	0x100000b8
 8101894:	100000cc 	.word	0x100000cc
 8101898:	1000026c 	.word	0x1000026c

0810189c <move_to_posZ>:
/* move_to_posZ: Moves the motor to a position Z cm away from the home position
 *
 * @param posZ: Centimetres away from the home position
 *  RANGE posZ:  1 - 53 cm
 */
{
 810189c:	b580      	push	{r7, lr}
 810189e:	b084      	sub	sp, #16
 81018a0:	af00      	add	r7, sp, #0
 81018a2:	ed87 0b00 	vstr	d0, [r7]
	counterZ = __HAL_TIM_GET_COUNTER(&htim4);					// get timer value
 81018a6:	4b89      	ldr	r3, [pc, #548]	; (8101acc <move_to_posZ+0x230>)
 81018a8:	681b      	ldr	r3, [r3, #0]
 81018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81018ac:	4a88      	ldr	r2, [pc, #544]	; (8101ad0 <move_to_posZ+0x234>)
 81018ae:	6013      	str	r3, [r2, #0]
	position_mm_Z = (double) ((counterZ / 3855) + (i_Z * 17));	// get position
 81018b0:	4b87      	ldr	r3, [pc, #540]	; (8101ad0 <move_to_posZ+0x234>)
 81018b2:	681b      	ldr	r3, [r3, #0]
 81018b4:	4a87      	ldr	r2, [pc, #540]	; (8101ad4 <move_to_posZ+0x238>)
 81018b6:	fba2 2303 	umull	r2, r3, r2, r3
 81018ba:	0ada      	lsrs	r2, r3, #11
 81018bc:	4b86      	ldr	r3, [pc, #536]	; (8101ad8 <move_to_posZ+0x23c>)
 81018be:	781b      	ldrb	r3, [r3, #0]
 81018c0:	4619      	mov	r1, r3
 81018c2:	460b      	mov	r3, r1
 81018c4:	011b      	lsls	r3, r3, #4
 81018c6:	440b      	add	r3, r1
 81018c8:	4413      	add	r3, r2
 81018ca:	4618      	mov	r0, r3
 81018cc:	f7fe fe9a 	bl	8100604 <__aeabi_ui2d>
 81018d0:	4602      	mov	r2, r0
 81018d2:	460b      	mov	r3, r1
 81018d4:	4981      	ldr	r1, [pc, #516]	; (8101adc <move_to_posZ+0x240>)
 81018d6:	e9c1 2300 	strd	r2, r3, [r1]
	double delta = posZ - position_mm_Z;						// calculate delta
 81018da:	4b80      	ldr	r3, [pc, #512]	; (8101adc <move_to_posZ+0x240>)
 81018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81018e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 81018e4:	f7fe fd50 	bl	8100388 <__aeabi_dsub>
 81018e8:	4602      	mov	r2, r0
 81018ea:	460b      	mov	r3, r1
 81018ec:	e9c7 2302 	strd	r2, r3, [r7, #8]

	set_Ready_Z(); 												// enable motor
 81018f0:	f000 fd66 	bl	81023c0 <set_Ready_Z>
	while (abs(delta) > 1.5)										// desired accuracy in cm? TODO:prove it
 81018f4:	e0d3      	b.n	8101a9e <move_to_posZ+0x202>
	{
		if (delta > 0)
 81018f6:	f04f 0200 	mov.w	r2, #0
 81018fa:	f04f 0300 	mov.w	r3, #0
 81018fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101902:	f7fe ff77 	bl	81007f4 <__aeabi_dcmpgt>
 8101906:	4603      	mov	r3, r0
 8101908:	2b00      	cmp	r3, #0
 810190a:	d007      	beq.n	810191c <move_to_posZ+0x80>
		{
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 450);	// adjust speed (prev val 340)
 810190c:	4b74      	ldr	r3, [pc, #464]	; (8101ae0 <move_to_posZ+0x244>)
 810190e:	681b      	ldr	r3, [r3, #0]
 8101910:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8101914:	641a      	str	r2, [r3, #64]	; 0x40
			reset_Direction_Z(); 								// clockwise | towards END/up
 8101916:	f000 fd47 	bl	81023a8 <reset_Direction_Z>
 810191a:	e011      	b.n	8101940 <move_to_posZ+0xa4>
		}
		else if (delta < 0)
 810191c:	f04f 0200 	mov.w	r2, #0
 8101920:	f04f 0300 	mov.w	r3, #0
 8101924:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101928:	f7fe ff46 	bl	81007b8 <__aeabi_dcmplt>
 810192c:	4603      	mov	r3, r0
 810192e:	2b00      	cmp	r3, #0
 8101930:	d100      	bne.n	8101934 <move_to_posZ+0x98>
		{
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 100); 	// adjust speed (prev val 120)
			set_Direction_Z(); 									// counter-clockwise | towards HOME/down
		}
		else
			break;
 8101932:	e0bf      	b.n	8101ab4 <move_to_posZ+0x218>
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 100); 	// adjust speed (prev val 120)
 8101934:	4b6a      	ldr	r3, [pc, #424]	; (8101ae0 <move_to_posZ+0x244>)
 8101936:	681b      	ldr	r3, [r3, #0]
 8101938:	2264      	movs	r2, #100	; 0x64
 810193a:	641a      	str	r2, [r3, #64]	; 0x40
			set_Direction_Z(); 									// counter-clockwise | towards HOME/down
 810193c:	f000 fd28 	bl	8102390 <set_Direction_Z>

		counterZ = __HAL_TIM_GET_COUNTER(&htim4);				// update counter
 8101940:	4b62      	ldr	r3, [pc, #392]	; (8101acc <move_to_posZ+0x230>)
 8101942:	681b      	ldr	r3, [r3, #0]
 8101944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101946:	4a62      	ldr	r2, [pc, #392]	; (8101ad0 <move_to_posZ+0x234>)
 8101948:	6013      	str	r3, [r2, #0]
		/* Some Magic */
		if (counterZ > 61680 && delta > 0 && once_Z){
 810194a:	4b61      	ldr	r3, [pc, #388]	; (8101ad0 <move_to_posZ+0x234>)
 810194c:	681b      	ldr	r3, [r3, #0]
 810194e:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8101952:	4293      	cmp	r3, r2
 8101954:	d912      	bls.n	810197c <move_to_posZ+0xe0>
 8101956:	f04f 0200 	mov.w	r2, #0
 810195a:	f04f 0300 	mov.w	r3, #0
 810195e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101962:	f7fe ff47 	bl	81007f4 <__aeabi_dcmpgt>
 8101966:	4603      	mov	r3, r0
 8101968:	2b00      	cmp	r3, #0
 810196a:	d007      	beq.n	810197c <move_to_posZ+0xe0>
 810196c:	4b5d      	ldr	r3, [pc, #372]	; (8101ae4 <move_to_posZ+0x248>)
 810196e:	781b      	ldrb	r3, [r3, #0]
 8101970:	2b00      	cmp	r3, #0
 8101972:	d003      	beq.n	810197c <move_to_posZ+0xe0>
			once_Z = 0;}
 8101974:	4b5b      	ldr	r3, [pc, #364]	; (8101ae4 <move_to_posZ+0x248>)
 8101976:	2200      	movs	r2, #0
 8101978:	701a      	strb	r2, [r3, #0]
 810197a:	e051      	b.n	8101a20 <move_to_posZ+0x184>
		else if (counterZ < 3855 && delta > 0 && !once_Z){
 810197c:	4b54      	ldr	r3, [pc, #336]	; (8101ad0 <move_to_posZ+0x234>)
 810197e:	681b      	ldr	r3, [r3, #0]
 8101980:	f640 720e 	movw	r2, #3854	; 0xf0e
 8101984:	4293      	cmp	r3, r2
 8101986:	d818      	bhi.n	81019ba <move_to_posZ+0x11e>
 8101988:	f04f 0200 	mov.w	r2, #0
 810198c:	f04f 0300 	mov.w	r3, #0
 8101990:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101994:	f7fe ff2e 	bl	81007f4 <__aeabi_dcmpgt>
 8101998:	4603      	mov	r3, r0
 810199a:	2b00      	cmp	r3, #0
 810199c:	d00d      	beq.n	81019ba <move_to_posZ+0x11e>
 810199e:	4b51      	ldr	r3, [pc, #324]	; (8101ae4 <move_to_posZ+0x248>)
 81019a0:	781b      	ldrb	r3, [r3, #0]
 81019a2:	2b00      	cmp	r3, #0
 81019a4:	d109      	bne.n	81019ba <move_to_posZ+0x11e>
			once_Z = 1, i_Z += 1;}
 81019a6:	4b4f      	ldr	r3, [pc, #316]	; (8101ae4 <move_to_posZ+0x248>)
 81019a8:	2201      	movs	r2, #1
 81019aa:	701a      	strb	r2, [r3, #0]
 81019ac:	4b4a      	ldr	r3, [pc, #296]	; (8101ad8 <move_to_posZ+0x23c>)
 81019ae:	781b      	ldrb	r3, [r3, #0]
 81019b0:	3301      	adds	r3, #1
 81019b2:	b2da      	uxtb	r2, r3
 81019b4:	4b48      	ldr	r3, [pc, #288]	; (8101ad8 <move_to_posZ+0x23c>)
 81019b6:	701a      	strb	r2, [r3, #0]
 81019b8:	e032      	b.n	8101a20 <move_to_posZ+0x184>
		else if (counterZ < 3855 && delta < 0){
 81019ba:	4b45      	ldr	r3, [pc, #276]	; (8101ad0 <move_to_posZ+0x234>)
 81019bc:	681b      	ldr	r3, [r3, #0]
 81019be:	f640 720e 	movw	r2, #3854	; 0xf0e
 81019c2:	4293      	cmp	r3, r2
 81019c4:	d80e      	bhi.n	81019e4 <move_to_posZ+0x148>
 81019c6:	f04f 0200 	mov.w	r2, #0
 81019ca:	f04f 0300 	mov.w	r3, #0
 81019ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81019d2:	f7fe fef1 	bl	81007b8 <__aeabi_dcmplt>
 81019d6:	4603      	mov	r3, r0
 81019d8:	2b00      	cmp	r3, #0
 81019da:	d003      	beq.n	81019e4 <move_to_posZ+0x148>
			once_Z = 0;}
 81019dc:	4b41      	ldr	r3, [pc, #260]	; (8101ae4 <move_to_posZ+0x248>)
 81019de:	2200      	movs	r2, #0
 81019e0:	701a      	strb	r2, [r3, #0]
 81019e2:	e01d      	b.n	8101a20 <move_to_posZ+0x184>
		else if (counterZ > 61680 && delta < 0 && !once_Z){
 81019e4:	4b3a      	ldr	r3, [pc, #232]	; (8101ad0 <move_to_posZ+0x234>)
 81019e6:	681b      	ldr	r3, [r3, #0]
 81019e8:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 81019ec:	4293      	cmp	r3, r2
 81019ee:	d917      	bls.n	8101a20 <move_to_posZ+0x184>
 81019f0:	f04f 0200 	mov.w	r2, #0
 81019f4:	f04f 0300 	mov.w	r3, #0
 81019f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81019fc:	f7fe fedc 	bl	81007b8 <__aeabi_dcmplt>
 8101a00:	4603      	mov	r3, r0
 8101a02:	2b00      	cmp	r3, #0
 8101a04:	d00c      	beq.n	8101a20 <move_to_posZ+0x184>
 8101a06:	4b37      	ldr	r3, [pc, #220]	; (8101ae4 <move_to_posZ+0x248>)
 8101a08:	781b      	ldrb	r3, [r3, #0]
 8101a0a:	2b00      	cmp	r3, #0
 8101a0c:	d108      	bne.n	8101a20 <move_to_posZ+0x184>
			once_Z = 1, i_Z -= 1;}
 8101a0e:	4b35      	ldr	r3, [pc, #212]	; (8101ae4 <move_to_posZ+0x248>)
 8101a10:	2201      	movs	r2, #1
 8101a12:	701a      	strb	r2, [r3, #0]
 8101a14:	4b30      	ldr	r3, [pc, #192]	; (8101ad8 <move_to_posZ+0x23c>)
 8101a16:	781b      	ldrb	r3, [r3, #0]
 8101a18:	3b01      	subs	r3, #1
 8101a1a:	b2da      	uxtb	r2, r3
 8101a1c:	4b2e      	ldr	r3, [pc, #184]	; (8101ad8 <move_to_posZ+0x23c>)
 8101a1e:	701a      	strb	r2, [r3, #0]
		/* End of Magic */

		position_mm_Z = (double) ((counterZ / 3855) + (i_Z * 17));  // update position
 8101a20:	4b2b      	ldr	r3, [pc, #172]	; (8101ad0 <move_to_posZ+0x234>)
 8101a22:	681b      	ldr	r3, [r3, #0]
 8101a24:	4a2b      	ldr	r2, [pc, #172]	; (8101ad4 <move_to_posZ+0x238>)
 8101a26:	fba2 2303 	umull	r2, r3, r2, r3
 8101a2a:	0ada      	lsrs	r2, r3, #11
 8101a2c:	4b2a      	ldr	r3, [pc, #168]	; (8101ad8 <move_to_posZ+0x23c>)
 8101a2e:	781b      	ldrb	r3, [r3, #0]
 8101a30:	4619      	mov	r1, r3
 8101a32:	460b      	mov	r3, r1
 8101a34:	011b      	lsls	r3, r3, #4
 8101a36:	440b      	add	r3, r1
 8101a38:	4413      	add	r3, r2
 8101a3a:	4618      	mov	r0, r3
 8101a3c:	f7fe fde2 	bl	8100604 <__aeabi_ui2d>
 8101a40:	4602      	mov	r2, r0
 8101a42:	460b      	mov	r3, r1
 8101a44:	4925      	ldr	r1, [pc, #148]	; (8101adc <move_to_posZ+0x240>)
 8101a46:	e9c1 2300 	strd	r2, r3, [r1]
		delta = posZ - position_mm_Z;								// update delta
 8101a4a:	4b24      	ldr	r3, [pc, #144]	; (8101adc <move_to_posZ+0x240>)
 8101a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101a54:	f7fe fc98 	bl	8100388 <__aeabi_dsub>
 8101a58:	4602      	mov	r2, r0
 8101a5a:	460b      	mov	r3, r1
 8101a5c:	e9c7 2302 	strd	r2, r3, [r7, #8]

		// limit msg sending every Nth itteration
		if (msg_counter_z % 200000 == 0)							// TODO: move 200000 to a define freq of msging
 8101a60:	4b21      	ldr	r3, [pc, #132]	; (8101ae8 <move_to_posZ+0x24c>)
 8101a62:	681a      	ldr	r2, [r3, #0]
 8101a64:	4b21      	ldr	r3, [pc, #132]	; (8101aec <move_to_posZ+0x250>)
 8101a66:	fb83 1302 	smull	r1, r3, r3, r2
 8101a6a:	1399      	asrs	r1, r3, #14
 8101a6c:	17d3      	asrs	r3, r2, #31
 8101a6e:	1acb      	subs	r3, r1, r3
 8101a70:	491f      	ldr	r1, [pc, #124]	; (8101af0 <move_to_posZ+0x254>)
 8101a72:	fb01 f303 	mul.w	r3, r1, r3
 8101a76:	1ad3      	subs	r3, r2, r3
 8101a78:	2b00      	cmp	r3, #0
 8101a7a:	d10b      	bne.n	8101a94 <move_to_posZ+0x1f8>
		{
			send_msg_data((uint8_t*)"\rCurrently @ Pos Z: %d\n\r", (int)position_mm_Z);
 8101a7c:	4b17      	ldr	r3, [pc, #92]	; (8101adc <move_to_posZ+0x240>)
 8101a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a82:	4610      	mov	r0, r2
 8101a84:	4619      	mov	r1, r3
 8101a86:	f7fe febf 	bl	8100808 <__aeabi_d2iz>
 8101a8a:	4603      	mov	r3, r0
 8101a8c:	4619      	mov	r1, r3
 8101a8e:	4819      	ldr	r0, [pc, #100]	; (8101af4 <move_to_posZ+0x258>)
 8101a90:	f001 fae4 	bl	810305c <send_msg_data>
		}
		msg_counter_z++;
 8101a94:	4b14      	ldr	r3, [pc, #80]	; (8101ae8 <move_to_posZ+0x24c>)
 8101a96:	681b      	ldr	r3, [r3, #0]
 8101a98:	3301      	adds	r3, #1
 8101a9a:	4a13      	ldr	r2, [pc, #76]	; (8101ae8 <move_to_posZ+0x24c>)
 8101a9c:	6013      	str	r3, [r2, #0]
	while (abs(delta) > 1.5)										// desired accuracy in cm? TODO:prove it
 8101a9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101aa2:	f7fe feb1 	bl	8100808 <__aeabi_d2iz>
 8101aa6:	4603      	mov	r3, r0
 8101aa8:	2b00      	cmp	r3, #0
 8101aaa:	bfb8      	it	lt
 8101aac:	425b      	neglt	r3, r3
 8101aae:	2b01      	cmp	r3, #1
 8101ab0:	f73f af21 	bgt.w	81018f6 <move_to_posZ+0x5a>

	}
	reset_Direction_Z(); 					// reverses the direction to stop it from dropping due gravity
 8101ab4:	f000 fc78 	bl	81023a8 <reset_Direction_Z>
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, 200); //  PWM to lower value to improve power consumption
 8101ab8:	4b09      	ldr	r3, [pc, #36]	; (8101ae0 <move_to_posZ+0x244>)
 8101aba:	681b      	ldr	r3, [r3, #0]
 8101abc:	22c8      	movs	r2, #200	; 0xc8
 8101abe:	641a      	str	r2, [r3, #64]	; 0x40
	return 1;
 8101ac0:	2301      	movs	r3, #1
}
 8101ac2:	4618      	mov	r0, r3
 8101ac4:	3710      	adds	r7, #16
 8101ac6:	46bd      	mov	sp, r7
 8101ac8:	bd80      	pop	{r7, pc}
 8101aca:	bf00      	nop
 8101acc:	1000026c 	.word	0x1000026c
 8101ad0:	100000b8 	.word	0x100000b8
 8101ad4:	88008801 	.word	0x88008801
 8101ad8:	100000cc 	.word	0x100000cc
 8101adc:	100000c0 	.word	0x100000c0
 8101ae0:	100001d4 	.word	0x100001d4
 8101ae4:	10000009 	.word	0x10000009
 8101ae8:	100000c8 	.word	0x100000c8
 8101aec:	14f8b589 	.word	0x14f8b589
 8101af0:	00030d40 	.word	0x00030d40
 8101af4:	0810b29c 	.word	0x0810b29c

08101af8 <set_Rotate_Servo>:
/* set_Rotate_Servo: Sets the angle of the servo controlling the end-effector rotator
 *
 * @param angle: Angle of rotation in degrees
 * Acceptable values between 1 - 23 degrees
 */
{
 8101af8:	b480      	push	{r7}
 8101afa:	b083      	sub	sp, #12
 8101afc:	af00      	add	r7, sp, #0
 8101afe:	ed87 0a01 	vstr	s0, [r7, #4]
	t_pulse_rotate = 10 * ((uint32_t) angle) + CONTROL_PULSE_MIN; 	// from data sheet of Parallax Standard Servo
 8101b02:	edd7 7a01 	vldr	s15, [r7, #4]
 8101b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101b0a:	ee17 2a90 	vmov	r2, s15
 8101b0e:	4613      	mov	r3, r2
 8101b10:	009b      	lsls	r3, r3, #2
 8101b12:	4413      	add	r3, r2
 8101b14:	005b      	lsls	r3, r3, #1
 8101b16:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8101b1a:	4a0d      	ldr	r2, [pc, #52]	; (8101b50 <set_Rotate_Servo+0x58>)
 8101b1c:	6013      	str	r3, [r2, #0]
	CCR_value_rotate = (t_pulse_rotate - CONTROL_PULSE_MIN)
			* (TIMER_COUNTER_PERIOD) / (CONTROL_PULSE_RANGE); 		// mapping the values of us to the range of Timer Counter
 8101b1e:	4b0c      	ldr	r3, [pc, #48]	; (8101b50 <set_Rotate_Servo+0x58>)
 8101b20:	681b      	ldr	r3, [r3, #0]
 8101b22:	f64e 2260 	movw	r2, #60000	; 0xea60
 8101b26:	fb03 f202 	mul.w	r2, r3, r2
 8101b2a:	4b0a      	ldr	r3, [pc, #40]	; (8101b54 <set_Rotate_Servo+0x5c>)
 8101b2c:	4413      	add	r3, r2
 8101b2e:	4a0a      	ldr	r2, [pc, #40]	; (8101b58 <set_Rotate_Servo+0x60>)
 8101b30:	fba2 2303 	umull	r2, r3, r2, r3
 8101b34:	0a9b      	lsrs	r3, r3, #10
	CCR_value_rotate = (t_pulse_rotate - CONTROL_PULSE_MIN)
 8101b36:	4a09      	ldr	r2, [pc, #36]	; (8101b5c <set_Rotate_Servo+0x64>)
 8101b38:	6013      	str	r3, [r2, #0]
	TIM13->CCR1 = CCR_value_rotate; 								// applying value to TIM
 8101b3a:	4a09      	ldr	r2, [pc, #36]	; (8101b60 <set_Rotate_Servo+0x68>)
 8101b3c:	4b07      	ldr	r3, [pc, #28]	; (8101b5c <set_Rotate_Servo+0x64>)
 8101b3e:	681b      	ldr	r3, [r3, #0]
 8101b40:	6353      	str	r3, [r2, #52]	; 0x34
}
 8101b42:	bf00      	nop
 8101b44:	370c      	adds	r7, #12
 8101b46:	46bd      	mov	sp, r7
 8101b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b4c:	4770      	bx	lr
 8101b4e:	bf00      	nop
 8101b50:	100000d0 	.word	0x100000d0
 8101b54:	fdc85f80 	.word	0xfdc85f80
 8101b58:	91a2b3c5 	.word	0x91a2b3c5
 8101b5c:	100000d8 	.word	0x100000d8
 8101b60:	40001c00 	.word	0x40001c00

08101b64 <set_Slide_Servo>:
/* set_Slide_Servo: Sets the angle of the servo controlling the board opening slider
 *
 * @param angle: Angle of rotation in degrees
 * Acceptable values between 1 - 25 degrees
 */
{
 8101b64:	b480      	push	{r7}
 8101b66:	b083      	sub	sp, #12
 8101b68:	af00      	add	r7, sp, #0
 8101b6a:	ed87 0a01 	vstr	s0, [r7, #4]
	t_pulse_slide = 10 * ((uint32_t) angle) + CONTROL_PULSE_MIN; 	// from data sheet of Parallax Standard Servo
 8101b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101b76:	ee17 2a90 	vmov	r2, s15
 8101b7a:	4613      	mov	r3, r2
 8101b7c:	009b      	lsls	r3, r3, #2
 8101b7e:	4413      	add	r3, r2
 8101b80:	005b      	lsls	r3, r3, #1
 8101b82:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8101b86:	4a0d      	ldr	r2, [pc, #52]	; (8101bbc <set_Slide_Servo+0x58>)
 8101b88:	6013      	str	r3, [r2, #0]
	CCR_value_slide = (t_pulse_slide - CONTROL_PULSE_MIN)
			* (TIMER_COUNTER_PERIOD) / (CONTROL_PULSE_RANGE); 		// mapping the values of us to the range of Timer Counter
 8101b8a:	4b0c      	ldr	r3, [pc, #48]	; (8101bbc <set_Slide_Servo+0x58>)
 8101b8c:	681b      	ldr	r3, [r3, #0]
 8101b8e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8101b92:	fb03 f202 	mul.w	r2, r3, r2
 8101b96:	4b0a      	ldr	r3, [pc, #40]	; (8101bc0 <set_Slide_Servo+0x5c>)
 8101b98:	4413      	add	r3, r2
 8101b9a:	4a0a      	ldr	r2, [pc, #40]	; (8101bc4 <set_Slide_Servo+0x60>)
 8101b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8101ba0:	0a9b      	lsrs	r3, r3, #10
	CCR_value_slide = (t_pulse_slide - CONTROL_PULSE_MIN)
 8101ba2:	4a09      	ldr	r2, [pc, #36]	; (8101bc8 <set_Slide_Servo+0x64>)
 8101ba4:	6013      	str	r3, [r2, #0]
	TIM14->CCR1 = CCR_value_slide; 									// applying value to TIM
 8101ba6:	4a09      	ldr	r2, [pc, #36]	; (8101bcc <set_Slide_Servo+0x68>)
 8101ba8:	4b07      	ldr	r3, [pc, #28]	; (8101bc8 <set_Slide_Servo+0x64>)
 8101baa:	681b      	ldr	r3, [r3, #0]
 8101bac:	6353      	str	r3, [r2, #52]	; 0x34
}
 8101bae:	bf00      	nop
 8101bb0:	370c      	adds	r7, #12
 8101bb2:	46bd      	mov	sp, r7
 8101bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bb8:	4770      	bx	lr
 8101bba:	bf00      	nop
 8101bbc:	100000d4 	.word	0x100000d4
 8101bc0:	fdc85f80 	.word	0xfdc85f80
 8101bc4:	91a2b3c5 	.word	0x91a2b3c5
 8101bc8:	100000dc 	.word	0x100000dc
 8101bcc:	40002000 	.word	0x40002000

08101bd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8101bd0:	b480      	push	{r7}
 8101bd2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101bd4:	f3bf 8f4f 	dsb	sy
}
 8101bd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8101bda:	4b06      	ldr	r3, [pc, #24]	; (8101bf4 <__NVIC_SystemReset+0x24>)
 8101bdc:	68db      	ldr	r3, [r3, #12]
 8101bde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8101be2:	4904      	ldr	r1, [pc, #16]	; (8101bf4 <__NVIC_SystemReset+0x24>)
 8101be4:	4b04      	ldr	r3, [pc, #16]	; (8101bf8 <__NVIC_SystemReset+0x28>)
 8101be6:	4313      	orrs	r3, r2
 8101be8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8101bea:	f3bf 8f4f 	dsb	sy
}
 8101bee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8101bf0:	bf00      	nop
 8101bf2:	e7fd      	b.n	8101bf0 <__NVIC_SystemReset+0x20>
 8101bf4:	e000ed00 	.word	0xe000ed00
 8101bf8:	05fa0004 	.word	0x05fa0004

08101bfc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8101bfc:	b580      	push	{r7, lr}
 8101bfe:	b086      	sub	sp, #24
 8101c00:	af00      	add	r7, sp, #0

	/* USER CODE END 1 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8101c02:	4b5e      	ldr	r3, [pc, #376]	; (8101d7c <main+0x180>)
 8101c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c08:	4a5c      	ldr	r2, [pc, #368]	; (8101d7c <main+0x180>)
 8101c0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c12:	4b5a      	ldr	r3, [pc, #360]	; (8101d7c <main+0x180>)
 8101c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101c1c:	60fb      	str	r3, [r7, #12]
 8101c1e:	68fb      	ldr	r3, [r7, #12]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101c20:	2001      	movs	r0, #1
 8101c22:	f002 ff03 	bl	8104a2c <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8101c26:	f003 fda3 	bl	8105770 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8101c2a:	2201      	movs	r2, #1
 8101c2c:	2102      	movs	r1, #2
 8101c2e:	2000      	movs	r0, #0
 8101c30:	f003 fd24 	bl	810567c <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101c34:	4b52      	ldr	r3, [pc, #328]	; (8101d80 <main+0x184>)
 8101c36:	681b      	ldr	r3, [r3, #0]
 8101c38:	091b      	lsrs	r3, r3, #4
 8101c3a:	f003 030f 	and.w	r3, r3, #15
 8101c3e:	2b07      	cmp	r3, #7
 8101c40:	d108      	bne.n	8101c54 <main+0x58>
 8101c42:	4b50      	ldr	r3, [pc, #320]	; (8101d84 <main+0x188>)
 8101c44:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101c48:	4a4e      	ldr	r2, [pc, #312]	; (8101d84 <main+0x188>)
 8101c4a:	f043 0301 	orr.w	r3, r3, #1
 8101c4e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101c52:	e007      	b.n	8101c64 <main+0x68>
 8101c54:	4b4b      	ldr	r3, [pc, #300]	; (8101d84 <main+0x188>)
 8101c56:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101c5a:	4a4a      	ldr	r2, [pc, #296]	; (8101d84 <main+0x188>)
 8101c5c:	f043 0301 	orr.w	r3, r3, #1
 8101c60:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8101c64:	f001 fa3a 	bl	81030dc <HAL_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8101c68:	f000 f9e6 	bl	8102038 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8101c6c:	f001 f8a8 	bl	8102dc0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	init_Start_Up();
 8101c70:	f7ff f882 	bl	8100d78 <init_Start_Up>
	//uint16_t value_proxy = 0;
	//int columnDetected = 0;
	//VCNL4010 struct_proxy;
	TCS3472 struct_rgb;

	struct_rgb = TCS3472_Create(RGB_ADD, &hi2c1);
 8101c74:	463b      	mov	r3, r7
 8101c76:	4a44      	ldr	r2, [pc, #272]	; (8101d88 <main+0x18c>)
 8101c78:	2129      	movs	r1, #41	; 0x29
 8101c7a:	4618      	mov	r0, r3
 8101c7c:	f7ff fba2 	bl	81013c4 <TCS3472_Create>
 8101c80:	f107 0310 	add.w	r3, r7, #16
 8101c84:	463a      	mov	r2, r7
 8101c86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101c8a:	e883 0003 	stmia.w	r3, {r0, r1}
	rgb_init(&struct_rgb);
 8101c8e:	f107 0310 	add.w	r3, r7, #16
 8101c92:	4618      	mov	r0, r3
 8101c94:	f7ff fbb0 	bl	81013f8 <rgb_init>
	init_coinDetector();
 8101c98:	f7ff fa72 	bl	8101180 <init_coinDetector>

	activate_HSEM_Notifications();
 8101c9c:	f7ff f8b6 	bl	8100e0c <activate_HSEM_Notifications>

		 move_to_X_and_Z(X_POS_FLIPPER, Z_POS_FLIPPER_BASE); // go up
		 HAL_Delay(500);
		 */

		current_state_CM4 = check_state();
 8101ca0:	f7ff fa34 	bl	810110c <check_state>
 8101ca4:	4603      	mov	r3, r0
 8101ca6:	4a39      	ldr	r2, [pc, #228]	; (8101d8c <main+0x190>)
 8101ca8:	6013      	str	r3, [r2, #0]

		if (current_state_CM4 != previous_state_CM4)
 8101caa:	4b38      	ldr	r3, [pc, #224]	; (8101d8c <main+0x190>)
 8101cac:	681a      	ldr	r2, [r3, #0]
 8101cae:	4b38      	ldr	r3, [pc, #224]	; (8101d90 <main+0x194>)
 8101cb0:	681b      	ldr	r3, [r3, #0]
 8101cb2:	429a      	cmp	r2, r3
 8101cb4:	d05d      	beq.n	8101d72 <main+0x176>
		{
			switch (current_state_CM4)
 8101cb6:	4b35      	ldr	r3, [pc, #212]	; (8101d8c <main+0x190>)
 8101cb8:	681b      	ldr	r3, [r3, #0]
 8101cba:	2b06      	cmp	r3, #6
 8101cbc:	d85b      	bhi.n	8101d76 <main+0x17a>
 8101cbe:	a201      	add	r2, pc, #4	; (adr r2, 8101cc4 <main+0xc8>)
 8101cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101cc4:	08101ce1 	.word	0x08101ce1
 8101cc8:	08101cf5 	.word	0x08101cf5
 8101ccc:	08101d09 	.word	0x08101d09
 8101cd0:	08101d1d 	.word	0x08101d1d
 8101cd4:	08101d37 	.word	0x08101d37
 8101cd8:	08101d4b 	.word	0x08101d4b
 8101cdc:	08101d5f 	.word	0x08101d5f
			{
			case STATE_INIT:
				gameplay_loop_CM4(current_state_CM4);
 8101ce0:	4b2a      	ldr	r3, [pc, #168]	; (8101d8c <main+0x190>)
 8101ce2:	681b      	ldr	r3, [r3, #0]
 8101ce4:	4618      	mov	r0, r3
 8101ce6:	f7ff f923 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101cea:	4b28      	ldr	r3, [pc, #160]	; (8101d8c <main+0x190>)
 8101cec:	681b      	ldr	r3, [r3, #0]
 8101cee:	4a28      	ldr	r2, [pc, #160]	; (8101d90 <main+0x194>)
 8101cf0:	6013      	str	r3, [r2, #0]
				break;
 8101cf2:	e041      	b.n	8101d78 <main+0x17c>

			case STATE_IDLE:
				gameplay_loop_CM4(current_state_CM4);
 8101cf4:	4b25      	ldr	r3, [pc, #148]	; (8101d8c <main+0x190>)
 8101cf6:	681b      	ldr	r3, [r3, #0]
 8101cf8:	4618      	mov	r0, r3
 8101cfa:	f7ff f919 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101cfe:	4b23      	ldr	r3, [pc, #140]	; (8101d8c <main+0x190>)
 8101d00:	681b      	ldr	r3, [r3, #0]
 8101d02:	4a23      	ldr	r2, [pc, #140]	; (8101d90 <main+0x194>)
 8101d04:	6013      	str	r3, [r2, #0]
				break;
 8101d06:	e037      	b.n	8101d78 <main+0x17c>

			case STATE_ROBOT_TURN:
				gameplay_loop_CM4(current_state_CM4);
 8101d08:	4b20      	ldr	r3, [pc, #128]	; (8101d8c <main+0x190>)
 8101d0a:	681b      	ldr	r3, [r3, #0]
 8101d0c:	4618      	mov	r0, r3
 8101d0e:	f7ff f90f 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101d12:	4b1e      	ldr	r3, [pc, #120]	; (8101d8c <main+0x190>)
 8101d14:	681b      	ldr	r3, [r3, #0]
 8101d16:	4a1e      	ldr	r2, [pc, #120]	; (8101d90 <main+0x194>)
 8101d18:	6013      	str	r3, [r2, #0]
				break;
 8101d1a:	e02d      	b.n	8101d78 <main+0x17c>

			case STATE_USER_TURN:
				send_msg((uint8_t*) "\rWaiting for token INSERTION ...\n\r");
 8101d1c:	481d      	ldr	r0, [pc, #116]	; (8101d94 <main+0x198>)
 8101d1e:	f001 f989 	bl	8103034 <send_msg>
				gameplay_loop_CM4(current_state_CM4);
 8101d22:	4b1a      	ldr	r3, [pc, #104]	; (8101d8c <main+0x190>)
 8101d24:	681b      	ldr	r3, [r3, #0]
 8101d26:	4618      	mov	r0, r3
 8101d28:	f7ff f902 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101d2c:	4b17      	ldr	r3, [pc, #92]	; (8101d8c <main+0x190>)
 8101d2e:	681b      	ldr	r3, [r3, #0]
 8101d30:	4a17      	ldr	r2, [pc, #92]	; (8101d90 <main+0x194>)
 8101d32:	6013      	str	r3, [r2, #0]
				break;
 8101d34:	e020      	b.n	8101d78 <main+0x17c>

			case STATE_CLEAN_UP:
				gameplay_loop_CM4(current_state_CM4);
 8101d36:	4b15      	ldr	r3, [pc, #84]	; (8101d8c <main+0x190>)
 8101d38:	681b      	ldr	r3, [r3, #0]
 8101d3a:	4618      	mov	r0, r3
 8101d3c:	f7ff f8f8 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101d40:	4b12      	ldr	r3, [pc, #72]	; (8101d8c <main+0x190>)
 8101d42:	681b      	ldr	r3, [r3, #0]
 8101d44:	4a12      	ldr	r2, [pc, #72]	; (8101d90 <main+0x194>)
 8101d46:	6013      	str	r3, [r2, #0]
				break;
 8101d48:	e016      	b.n	8101d78 <main+0x17c>

			case STATE_CHEAT_DETECTED:
				gameplay_loop_CM4(current_state_CM4);
 8101d4a:	4b10      	ldr	r3, [pc, #64]	; (8101d8c <main+0x190>)
 8101d4c:	681b      	ldr	r3, [r3, #0]
 8101d4e:	4618      	mov	r0, r3
 8101d50:	f7ff f8ee 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101d54:	4b0d      	ldr	r3, [pc, #52]	; (8101d8c <main+0x190>)
 8101d56:	681b      	ldr	r3, [r3, #0]
 8101d58:	4a0d      	ldr	r2, [pc, #52]	; (8101d90 <main+0x194>)
 8101d5a:	6013      	str	r3, [r2, #0]
				break;
 8101d5c:	e00c      	b.n	8101d78 <main+0x17c>

			case STATE_GAME_END:
				gameplay_loop_CM4(current_state_CM4);
 8101d5e:	4b0b      	ldr	r3, [pc, #44]	; (8101d8c <main+0x190>)
 8101d60:	681b      	ldr	r3, [r3, #0]
 8101d62:	4618      	mov	r0, r3
 8101d64:	f7ff f8e4 	bl	8100f30 <gameplay_loop_CM4>
				previous_state_CM4 = current_state_CM4;
 8101d68:	4b08      	ldr	r3, [pc, #32]	; (8101d8c <main+0x190>)
 8101d6a:	681b      	ldr	r3, [r3, #0]
 8101d6c:	4a08      	ldr	r2, [pc, #32]	; (8101d90 <main+0x194>)
 8101d6e:	6013      	str	r3, [r2, #0]
				break;
 8101d70:	e002      	b.n	8101d78 <main+0x17c>

			default:
				break;
			}

		}
 8101d72:	bf00      	nop
 8101d74:	e794      	b.n	8101ca0 <main+0xa4>
				break;
 8101d76:	bf00      	nop
		current_state_CM4 = check_state();
 8101d78:	e792      	b.n	8101ca0 <main+0xa4>
 8101d7a:	bf00      	nop
 8101d7c:	58024400 	.word	0x58024400
 8101d80:	e000ed00 	.word	0xe000ed00
 8101d84:	58026400 	.word	0x58026400
 8101d88:	10000188 	.word	0x10000188
 8101d8c:	10000010 	.word	0x10000010
 8101d90:	10000014 	.word	0x10000014
 8101d94:	0810b2b8 	.word	0x0810b2b8

08101d98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8101d98:	b580      	push	{r7, lr}
 8101d9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8101d9c:	b672      	cpsid	i
}
 8101d9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	reset_Enable_Power();
 8101da0:	f000 fb32 	bl	8102408 <reset_Enable_Power>

	send_msg((uint8_t*) "\rERROR, resetting\n\r");
 8101da4:	4802      	ldr	r0, [pc, #8]	; (8101db0 <Error_Handler+0x18>)
 8101da6:	f001 f945 	bl	8103034 <send_msg>

	NVIC_SystemReset();
 8101daa:	f7ff ff11 	bl	8101bd0 <__NVIC_SystemReset>
 8101dae:	bf00      	nop
 8101db0:	0810b2dc 	.word	0x0810b2dc

08101db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101db4:	b580      	push	{r7, lr}
 8101db6:	b082      	sub	sp, #8
 8101db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101dba:	4b0d      	ldr	r3, [pc, #52]	; (8101df0 <HAL_MspInit+0x3c>)
 8101dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101dc0:	4a0b      	ldr	r2, [pc, #44]	; (8101df0 <HAL_MspInit+0x3c>)
 8101dc2:	f043 0302 	orr.w	r3, r3, #2
 8101dc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101dca:	4b09      	ldr	r3, [pc, #36]	; (8101df0 <HAL_MspInit+0x3c>)
 8101dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101dd0:	f003 0302 	and.w	r3, r3, #2
 8101dd4:	607b      	str	r3, [r7, #4]
 8101dd6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8101dd8:	2200      	movs	r2, #0
 8101dda:	2100      	movs	r1, #0
 8101ddc:	207e      	movs	r0, #126	; 0x7e
 8101dde:	f002 fbcc 	bl	810457a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101de2:	207e      	movs	r0, #126	; 0x7e
 8101de4:	f002 fbe3 	bl	81045ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101de8:	bf00      	nop
 8101dea:	3708      	adds	r7, #8
 8101dec:	46bd      	mov	sp, r7
 8101dee:	bd80      	pop	{r7, pc}
 8101df0:	58024400 	.word	0x58024400

08101df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101df4:	b480      	push	{r7}
 8101df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101df8:	e7fe      	b.n	8101df8 <NMI_Handler+0x4>

08101dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101dfa:	b480      	push	{r7}
 8101dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101dfe:	e7fe      	b.n	8101dfe <HardFault_Handler+0x4>

08101e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101e00:	b480      	push	{r7}
 8101e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101e04:	e7fe      	b.n	8101e04 <MemManage_Handler+0x4>

08101e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101e06:	b480      	push	{r7}
 8101e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101e0a:	e7fe      	b.n	8101e0a <BusFault_Handler+0x4>

08101e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101e0c:	b480      	push	{r7}
 8101e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101e10:	e7fe      	b.n	8101e10 <UsageFault_Handler+0x4>

08101e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101e12:	b480      	push	{r7}
 8101e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101e16:	bf00      	nop
 8101e18:	46bd      	mov	sp, r7
 8101e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e1e:	4770      	bx	lr

08101e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101e20:	b480      	push	{r7}
 8101e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101e24:	bf00      	nop
 8101e26:	46bd      	mov	sp, r7
 8101e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e2c:	4770      	bx	lr

08101e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101e2e:	b480      	push	{r7}
 8101e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101e32:	bf00      	nop
 8101e34:	46bd      	mov	sp, r7
 8101e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e3a:	4770      	bx	lr

08101e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101e3c:	b580      	push	{r7, lr}
 8101e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101e40:	f001 f9e0 	bl	8103204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101e44:	bf00      	nop
 8101e46:	bd80      	pop	{r7, pc}

08101e48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8101e48:	b580      	push	{r7, lr}
 8101e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8101e4c:	4802      	ldr	r0, [pc, #8]	; (8101e58 <TIM7_IRQHandler+0x10>)
 8101e4e:	f006 fb8b 	bl	8108568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8101e52:	bf00      	nop
 8101e54:	bd80      	pop	{r7, pc}
 8101e56:	bf00      	nop
 8101e58:	100002b8 	.word	0x100002b8

08101e5c <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8101e5c:	b580      	push	{r7, lr}
 8101e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8101e60:	f002 fdf6 	bl	8104a50 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8101e64:	bf00      	nop
 8101e66:	bd80      	pop	{r7, pc}

08101e68 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8101e68:	b580      	push	{r7, lr}
 8101e6a:	b08a      	sub	sp, #40	; 0x28
 8101e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8101e6e:	f107 031c 	add.w	r3, r7, #28
 8101e72:	2200      	movs	r2, #0
 8101e74:	601a      	str	r2, [r3, #0]
 8101e76:	605a      	str	r2, [r3, #4]
 8101e78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8101e7a:	463b      	mov	r3, r7
 8101e7c:	2200      	movs	r2, #0
 8101e7e:	601a      	str	r2, [r3, #0]
 8101e80:	605a      	str	r2, [r3, #4]
 8101e82:	609a      	str	r2, [r3, #8]
 8101e84:	60da      	str	r2, [r3, #12]
 8101e86:	611a      	str	r2, [r3, #16]
 8101e88:	615a      	str	r2, [r3, #20]
 8101e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8101e8c:	4b2f      	ldr	r3, [pc, #188]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101e8e:	4a30      	ldr	r2, [pc, #192]	; (8101f50 <MX_ADC1_Init+0xe8>)
 8101e90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8101e92:	4b2e      	ldr	r3, [pc, #184]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101e94:	2200      	movs	r2, #0
 8101e96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8101e98:	4b2c      	ldr	r3, [pc, #176]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101e9a:	2208      	movs	r2, #8
 8101e9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8101e9e:	4b2b      	ldr	r3, [pc, #172]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101ea0:	2200      	movs	r2, #0
 8101ea2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101ea4:	4b29      	ldr	r3, [pc, #164]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101ea6:	2204      	movs	r2, #4
 8101ea8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8101eaa:	4b28      	ldr	r3, [pc, #160]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101eac:	2200      	movs	r2, #0
 8101eae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8101eb0:	4b26      	ldr	r3, [pc, #152]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101eb2:	2200      	movs	r2, #0
 8101eb4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8101eb6:	4b25      	ldr	r3, [pc, #148]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101eb8:	2201      	movs	r2, #1
 8101eba:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8101ebc:	4b23      	ldr	r3, [pc, #140]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101ebe:	2200      	movs	r2, #0
 8101ec0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101ec2:	4b22      	ldr	r3, [pc, #136]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101ec4:	2200      	movs	r2, #0
 8101ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8101ec8:	4b20      	ldr	r3, [pc, #128]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101eca:	2200      	movs	r2, #0
 8101ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8101ece:	4b1f      	ldr	r3, [pc, #124]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101ed0:	2200      	movs	r2, #0
 8101ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8101ed4:	4b1d      	ldr	r3, [pc, #116]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101ed6:	2200      	movs	r2, #0
 8101ed8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101eda:	4b1c      	ldr	r3, [pc, #112]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101edc:	2200      	movs	r2, #0
 8101ede:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8101ee0:	4b1a      	ldr	r3, [pc, #104]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101ee2:	2200      	movs	r2, #0
 8101ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101ee8:	4818      	ldr	r0, [pc, #96]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101eea:	f001 fb67 	bl	81035bc <HAL_ADC_Init>
 8101eee:	4603      	mov	r3, r0
 8101ef0:	2b00      	cmp	r3, #0
 8101ef2:	d001      	beq.n	8101ef8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8101ef4:	f7ff ff50 	bl	8101d98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101ef8:	2300      	movs	r3, #0
 8101efa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101efc:	f107 031c 	add.w	r3, r7, #28
 8101f00:	4619      	mov	r1, r3
 8101f02:	4812      	ldr	r0, [pc, #72]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101f04:	f002 f97c 	bl	8104200 <HAL_ADCEx_MultiModeConfigChannel>
 8101f08:	4603      	mov	r3, r0
 8101f0a:	2b00      	cmp	r3, #0
 8101f0c:	d001      	beq.n	8101f12 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8101f0e:	f7ff ff43 	bl	8101d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8101f12:	4b10      	ldr	r3, [pc, #64]	; (8101f54 <MX_ADC1_Init+0xec>)
 8101f14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101f16:	2306      	movs	r3, #6
 8101f18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8101f1a:	2300      	movs	r3, #0
 8101f1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101f1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8101f22:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8101f24:	2304      	movs	r3, #4
 8101f26:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8101f28:	2300      	movs	r3, #0
 8101f2a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8101f2c:	2300      	movs	r3, #0
 8101f2e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8101f30:	463b      	mov	r3, r7
 8101f32:	4619      	mov	r1, r3
 8101f34:	4805      	ldr	r0, [pc, #20]	; (8101f4c <MX_ADC1_Init+0xe4>)
 8101f36:	f001 fce3 	bl	8103900 <HAL_ADC_ConfigChannel>
 8101f3a:	4603      	mov	r3, r0
 8101f3c:	2b00      	cmp	r3, #0
 8101f3e:	d001      	beq.n	8101f44 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8101f40:	f7ff ff2a 	bl	8101d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8101f44:	bf00      	nop
 8101f46:	3728      	adds	r7, #40	; 0x28
 8101f48:	46bd      	mov	sp, r7
 8101f4a:	bd80      	pop	{r7, pc}
 8101f4c:	10000124 	.word	0x10000124
 8101f50:	40022000 	.word	0x40022000
 8101f54:	4b840000 	.word	0x4b840000

08101f58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8101f58:	b580      	push	{r7, lr}
 8101f5a:	b0b8      	sub	sp, #224	; 0xe0
 8101f5c:	af00      	add	r7, sp, #0
 8101f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101f64:	2200      	movs	r2, #0
 8101f66:	601a      	str	r2, [r3, #0]
 8101f68:	605a      	str	r2, [r3, #4]
 8101f6a:	609a      	str	r2, [r3, #8]
 8101f6c:	60da      	str	r2, [r3, #12]
 8101f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f70:	f107 0310 	add.w	r3, r7, #16
 8101f74:	22bc      	movs	r2, #188	; 0xbc
 8101f76:	2100      	movs	r1, #0
 8101f78:	4618      	mov	r0, r3
 8101f7a:	f008 fabd 	bl	810a4f8 <memset>
  if(adcHandle->Instance==ADC1)
 8101f7e:	687b      	ldr	r3, [r7, #4]
 8101f80:	681b      	ldr	r3, [r3, #0]
 8101f82:	4a2a      	ldr	r2, [pc, #168]	; (810202c <HAL_ADC_MspInit+0xd4>)
 8101f84:	4293      	cmp	r3, r2
 8101f86:	d14c      	bne.n	8102022 <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8101f88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8101f8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8101f8e:	2301      	movs	r3, #1
 8101f90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8101f92:	2313      	movs	r3, #19
 8101f94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 128;
 8101f96:	2380      	movs	r3, #128	; 0x80
 8101f98:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8101f9a:	2302      	movs	r3, #2
 8101f9c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8101f9e:	2302      	movs	r3, #2
 8101fa0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8101fa2:	23c0      	movs	r3, #192	; 0xc0
 8101fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8101fa6:	2320      	movs	r3, #32
 8101fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8101faa:	2300      	movs	r3, #0
 8101fac:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8101fae:	2300      	movs	r3, #0
 8101fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101fb4:	f107 0310 	add.w	r3, r7, #16
 8101fb8:	4618      	mov	r0, r3
 8101fba:	f003 fdbf 	bl	8105b3c <HAL_RCCEx_PeriphCLKConfig>
 8101fbe:	4603      	mov	r3, r0
 8101fc0:	2b00      	cmp	r3, #0
 8101fc2:	d001      	beq.n	8101fc8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8101fc4:	f7ff fee8 	bl	8101d98 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101fc8:	4b19      	ldr	r3, [pc, #100]	; (8102030 <HAL_ADC_MspInit+0xd8>)
 8101fca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101fce:	4a18      	ldr	r2, [pc, #96]	; (8102030 <HAL_ADC_MspInit+0xd8>)
 8101fd0:	f043 0320 	orr.w	r3, r3, #32
 8101fd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101fd8:	4b15      	ldr	r3, [pc, #84]	; (8102030 <HAL_ADC_MspInit+0xd8>)
 8101fda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101fde:	f003 0320 	and.w	r3, r3, #32
 8101fe2:	60fb      	str	r3, [r7, #12]
 8101fe4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101fe6:	4b12      	ldr	r3, [pc, #72]	; (8102030 <HAL_ADC_MspInit+0xd8>)
 8101fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fec:	4a10      	ldr	r2, [pc, #64]	; (8102030 <HAL_ADC_MspInit+0xd8>)
 8101fee:	f043 0301 	orr.w	r3, r3, #1
 8101ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ff6:	4b0e      	ldr	r3, [pc, #56]	; (8102030 <HAL_ADC_MspInit+0xd8>)
 8101ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ffc:	f003 0301 	and.w	r3, r3, #1
 8102000:	60bb      	str	r3, [r7, #8]
 8102002:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = Vaccuum_Sensor_Pin;
 8102004:	2310      	movs	r3, #16
 8102006:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 810200a:	2303      	movs	r3, #3
 810200c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102010:	2300      	movs	r3, #0
 8102012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(Vaccuum_Sensor_GPIO_Port, &GPIO_InitStruct);
 8102016:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810201a:	4619      	mov	r1, r3
 810201c:	4805      	ldr	r0, [pc, #20]	; (8102034 <HAL_ADC_MspInit+0xdc>)
 810201e:	f002 faf5 	bl	810460c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8102022:	bf00      	nop
 8102024:	37e0      	adds	r7, #224	; 0xe0
 8102026:	46bd      	mov	sp, r7
 8102028:	bd80      	pop	{r7, pc}
 810202a:	bf00      	nop
 810202c:	40022000 	.word	0x40022000
 8102030:	58024400 	.word	0x58024400
 8102034:	58020000 	.word	0x58020000

08102038 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8102038:	b580      	push	{r7, lr}
 810203a:	b08c      	sub	sp, #48	; 0x30
 810203c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810203e:	f107 031c 	add.w	r3, r7, #28
 8102042:	2200      	movs	r2, #0
 8102044:	601a      	str	r2, [r3, #0]
 8102046:	605a      	str	r2, [r3, #4]
 8102048:	609a      	str	r2, [r3, #8]
 810204a:	60da      	str	r2, [r3, #12]
 810204c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810204e:	4bb0      	ldr	r3, [pc, #704]	; (8102310 <MX_GPIO_Init+0x2d8>)
 8102050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102054:	4aae      	ldr	r2, [pc, #696]	; (8102310 <MX_GPIO_Init+0x2d8>)
 8102056:	f043 0310 	orr.w	r3, r3, #16
 810205a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810205e:	4bac      	ldr	r3, [pc, #688]	; (8102310 <MX_GPIO_Init+0x2d8>)
 8102060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102064:	f003 0310 	and.w	r3, r3, #16
 8102068:	61bb      	str	r3, [r7, #24]
 810206a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810206c:	4ba8      	ldr	r3, [pc, #672]	; (8102310 <MX_GPIO_Init+0x2d8>)
 810206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102072:	4aa7      	ldr	r2, [pc, #668]	; (8102310 <MX_GPIO_Init+0x2d8>)
 8102074:	f043 0304 	orr.w	r3, r3, #4
 8102078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810207c:	4ba4      	ldr	r3, [pc, #656]	; (8102310 <MX_GPIO_Init+0x2d8>)
 810207e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102082:	f003 0304 	and.w	r3, r3, #4
 8102086:	617b      	str	r3, [r7, #20]
 8102088:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810208a:	4ba1      	ldr	r3, [pc, #644]	; (8102310 <MX_GPIO_Init+0x2d8>)
 810208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102090:	4a9f      	ldr	r2, [pc, #636]	; (8102310 <MX_GPIO_Init+0x2d8>)
 8102092:	f043 0320 	orr.w	r3, r3, #32
 8102096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810209a:	4b9d      	ldr	r3, [pc, #628]	; (8102310 <MX_GPIO_Init+0x2d8>)
 810209c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020a0:	f003 0320 	and.w	r3, r3, #32
 81020a4:	613b      	str	r3, [r7, #16]
 81020a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81020a8:	4b99      	ldr	r3, [pc, #612]	; (8102310 <MX_GPIO_Init+0x2d8>)
 81020aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020ae:	4a98      	ldr	r2, [pc, #608]	; (8102310 <MX_GPIO_Init+0x2d8>)
 81020b0:	f043 0301 	orr.w	r3, r3, #1
 81020b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81020b8:	4b95      	ldr	r3, [pc, #596]	; (8102310 <MX_GPIO_Init+0x2d8>)
 81020ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020be:	f003 0301 	and.w	r3, r3, #1
 81020c2:	60fb      	str	r3, [r7, #12]
 81020c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81020c6:	4b92      	ldr	r3, [pc, #584]	; (8102310 <MX_GPIO_Init+0x2d8>)
 81020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020cc:	4a90      	ldr	r2, [pc, #576]	; (8102310 <MX_GPIO_Init+0x2d8>)
 81020ce:	f043 0302 	orr.w	r3, r3, #2
 81020d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81020d6:	4b8e      	ldr	r3, [pc, #568]	; (8102310 <MX_GPIO_Init+0x2d8>)
 81020d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020dc:	f003 0302 	and.w	r3, r3, #2
 81020e0:	60bb      	str	r3, [r7, #8]
 81020e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81020e4:	4b8a      	ldr	r3, [pc, #552]	; (8102310 <MX_GPIO_Init+0x2d8>)
 81020e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020ea:	4a89      	ldr	r2, [pc, #548]	; (8102310 <MX_GPIO_Init+0x2d8>)
 81020ec:	f043 0308 	orr.w	r3, r3, #8
 81020f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81020f4:	4b86      	ldr	r3, [pc, #536]	; (8102310 <MX_GPIO_Init+0x2d8>)
 81020f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020fa:	f003 0308 	and.w	r3, r3, #8
 81020fe:	607b      	str	r3, [r7, #4]
 8102100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8102102:	4b83      	ldr	r3, [pc, #524]	; (8102310 <MX_GPIO_Init+0x2d8>)
 8102104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102108:	4a81      	ldr	r2, [pc, #516]	; (8102310 <MX_GPIO_Init+0x2d8>)
 810210a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810210e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102112:	4b7f      	ldr	r3, [pc, #508]	; (8102310 <MX_GPIO_Init+0x2d8>)
 8102114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810211c:	603b      	str	r3, [r7, #0]
 810211e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DigiIN_OUT_Z_Pin|Direction_Z_Pin|LD2_Pin, GPIO_PIN_RESET);
 8102120:	2200      	movs	r2, #0
 8102122:	2107      	movs	r1, #7
 8102124:	487b      	ldr	r0, [pc, #492]	; (8102314 <MX_GPIO_Init+0x2dc>)
 8102126:	f002 fc39 	bl	810499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_RESET);
 810212a:	2200      	movs	r2, #0
 810212c:	2101      	movs	r1, #1
 810212e:	487a      	ldr	r0, [pc, #488]	; (8102318 <MX_GPIO_Init+0x2e0>)
 8102130:	f002 fc34 	bl	810499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8102134:	2200      	movs	r2, #0
 8102136:	f244 0101 	movw	r1, #16385	; 0x4001
 810213a:	4878      	ldr	r0, [pc, #480]	; (810231c <MX_GPIO_Init+0x2e4>)
 810213c:	f002 fc2e 	bl	810499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|DigiIN_OUT_X_Pin|Ready_X_Pin|Debug_1_Pin
 8102140:	2200      	movs	r2, #0
 8102142:	f24c 4178 	movw	r1, #50296	; 0xc478
 8102146:	4876      	ldr	r0, [pc, #472]	; (8102320 <MX_GPIO_Init+0x2e8>)
 8102148:	f002 fc28 	bl	810499c <HAL_GPIO_WritePin>
                          |Debug_2_Pin|Debug_3_Pin|Debug_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Vaccuum_Valve_Pin|Vaccuum_Pump_Pin|Solenoid_Pin, GPIO_PIN_SET);
 810214c:	2201      	movs	r2, #1
 810214e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8102152:	4874      	ldr	r0, [pc, #464]	; (8102324 <MX_GPIO_Init+0x2ec>)
 8102154:	f002 fc22 	bl	810499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_SET);
 8102158:	2201      	movs	r2, #1
 810215a:	2101      	movs	r1, #1
 810215c:	4870      	ldr	r0, [pc, #448]	; (8102320 <MX_GPIO_Init+0x2e8>)
 810215e:	f002 fc1d 	bl	810499c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 8102162:	2200      	movs	r2, #0
 8102164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8102168:	486f      	ldr	r0, [pc, #444]	; (8102328 <MX_GPIO_Init+0x2f0>)
 810216a:	f002 fc17 	bl	810499c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DigiIN_OUT_Z_Pin|Direction_Z_Pin|LD2_Pin;
 810216e:	2307      	movs	r3, #7
 8102170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102172:	2301      	movs	r3, #1
 8102174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102176:	2300      	movs	r3, #0
 8102178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810217a:	2300      	movs	r3, #0
 810217c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810217e:	f107 031c 	add.w	r3, r7, #28
 8102182:	4619      	mov	r1, r3
 8102184:	4863      	ldr	r0, [pc, #396]	; (8102314 <MX_GPIO_Init+0x2dc>)
 8102186:	f002 fa41 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|Rotary_Switch_C2_Pin;
 810218a:	f242 0301 	movw	r3, #8193	; 0x2001
 810218e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8102190:	2300      	movs	r3, #0
 8102192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102194:	2300      	movs	r3, #0
 8102196:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102198:	f107 031c 	add.w	r3, r7, #28
 810219c:	4619      	mov	r1, r3
 810219e:	4861      	ldr	r0, [pc, #388]	; (8102324 <MX_GPIO_Init+0x2ec>)
 81021a0:	f002 fa34 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rotary_Switch_C8_Pin;
 81021a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81021a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81021aa:	2300      	movs	r3, #0
 81021ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021ae:	2300      	movs	r3, #0
 81021b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rotary_Switch_C8_GPIO_Port, &GPIO_InitStruct);
 81021b2:	f107 031c 	add.w	r3, r7, #28
 81021b6:	4619      	mov	r1, r3
 81021b8:	485c      	ldr	r0, [pc, #368]	; (810232c <MX_GPIO_Init+0x2f4>)
 81021ba:	f002 fa27 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Ready_Z_Pin;
 81021be:	2301      	movs	r3, #1
 81021c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81021c2:	2301      	movs	r3, #1
 81021c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021c6:	2300      	movs	r3, #0
 81021c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021ca:	2300      	movs	r3, #0
 81021cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Ready_Z_GPIO_Port, &GPIO_InitStruct);
 81021ce:	f107 031c 	add.w	r3, r7, #28
 81021d2:	4619      	mov	r1, r3
 81021d4:	4850      	ldr	r0, [pc, #320]	; (8102318 <MX_GPIO_Init+0x2e0>)
 81021d6:	f002 fa19 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rotary_Switch_C1_Pin;
 81021da:	2308      	movs	r3, #8
 81021dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81021de:	2300      	movs	r3, #0
 81021e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021e2:	2300      	movs	r3, #0
 81021e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rotary_Switch_C1_GPIO_Port, &GPIO_InitStruct);
 81021e6:	f107 031c 	add.w	r3, r7, #28
 81021ea:	4619      	mov	r1, r3
 81021ec:	484a      	ldr	r0, [pc, #296]	; (8102318 <MX_GPIO_Init+0x2e0>)
 81021ee:	f002 fa0d 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 81021f2:	f244 0301 	movw	r3, #16385	; 0x4001
 81021f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81021f8:	2301      	movs	r3, #1
 81021fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021fc:	2300      	movs	r3, #0
 81021fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102200:	2300      	movs	r3, #0
 8102202:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102204:	f107 031c 	add.w	r3, r7, #28
 8102208:	4619      	mov	r1, r3
 810220a:	4844      	ldr	r0, [pc, #272]	; (810231c <MX_GPIO_Init+0x2e4>)
 810220c:	f002 f9fe 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rotary_Switch_C4_Pin;
 8102210:	2302      	movs	r3, #2
 8102212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8102214:	2300      	movs	r3, #0
 8102216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102218:	2300      	movs	r3, #0
 810221a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Rotary_Switch_C4_GPIO_Port, &GPIO_InitStruct);
 810221c:	f107 031c 	add.w	r3, r7, #28
 8102220:	4619      	mov	r1, r3
 8102222:	483e      	ldr	r0, [pc, #248]	; (810231c <MX_GPIO_Init+0x2e4>)
 8102224:	f002 f9f2 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Homing_Z_Pin;
 8102228:	2304      	movs	r3, #4
 810222a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 810222c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8102230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102232:	2300      	movs	r3, #0
 8102234:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Homing_Z_GPIO_Port, &GPIO_InitStruct);
 8102236:	f107 031c 	add.w	r3, r7, #28
 810223a:	4619      	mov	r1, r3
 810223c:	4837      	ldr	r0, [pc, #220]	; (810231c <MX_GPIO_Init+0x2e4>)
 810223e:	f002 f9e5 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Pushbutton_Rotary_Switch_Pin;
 8102242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8102246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8102248:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 810224c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810224e:	2300      	movs	r3, #0
 8102250:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Pushbutton_Rotary_Switch_GPIO_Port, &GPIO_InitStruct);
 8102252:	f107 031c 	add.w	r3, r7, #28
 8102256:	4619      	mov	r1, r3
 8102258:	482e      	ldr	r0, [pc, #184]	; (8102314 <MX_GPIO_Init+0x2dc>)
 810225a:	f002 f9d7 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Homing_X_Pin|Endstop_X_Pin|Endstop_Z_Pin;
 810225e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8102262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8102264:	2300      	movs	r3, #0
 8102266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102268:	2300      	movs	r3, #0
 810226a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810226c:	f107 031c 	add.w	r3, r7, #28
 8102270:	4619      	mov	r1, r3
 8102272:	4828      	ldr	r0, [pc, #160]	; (8102314 <MX_GPIO_Init+0x2dc>)
 8102274:	f002 f9ca 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|DigiIN_OUT_X_Pin|Ready_X_Pin|Enable_PWR_Pin
 8102278:	f24c 4379 	movw	r3, #50297	; 0xc479
 810227c:	61fb      	str	r3, [r7, #28]
                          |Debug_1_Pin|Debug_2_Pin|Debug_3_Pin|Debug_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810227e:	2301      	movs	r3, #1
 8102280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102282:	2300      	movs	r3, #0
 8102284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102286:	2300      	movs	r3, #0
 8102288:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810228a:	f107 031c 	add.w	r3, r7, #28
 810228e:	4619      	mov	r1, r3
 8102290:	4823      	ldr	r0, [pc, #140]	; (8102320 <MX_GPIO_Init+0x2e8>)
 8102292:	f002 f9bb 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Vaccuum_Valve_Pin|Vaccuum_Pump_Pin|Solenoid_Pin;
 8102296:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 810229a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810229c:	2301      	movs	r3, #1
 810229e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81022a0:	2300      	movs	r3, #0
 81022a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81022a4:	2300      	movs	r3, #0
 81022a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81022a8:	f107 031c 	add.w	r3, r7, #28
 81022ac:	4619      	mov	r1, r3
 81022ae:	481d      	ldr	r0, [pc, #116]	; (8102324 <MX_GPIO_Init+0x2ec>)
 81022b0:	f002 f9ac 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Coin_INT_Pin|Prox_INT_Pin;
 81022b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81022b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81022ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81022be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81022c0:	2300      	movs	r3, #0
 81022c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81022c4:	f107 031c 	add.w	r3, r7, #28
 81022c8:	4619      	mov	r1, r3
 81022ca:	4816      	ldr	r0, [pc, #88]	; (8102324 <MX_GPIO_Init+0x2ec>)
 81022cc:	f002 f99e 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Read_EMO_Pin;
 81022d0:	2302      	movs	r3, #2
 81022d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81022d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81022d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81022da:	2300      	movs	r3, #0
 81022dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Read_EMO_GPIO_Port, &GPIO_InitStruct);
 81022de:	f107 031c 	add.w	r3, r7, #28
 81022e2:	4619      	mov	r1, r3
 81022e4:	480e      	ldr	r0, [pc, #56]	; (8102320 <MX_GPIO_Init+0x2e8>)
 81022e6:	f002 f991 	bl	810460c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Direction_X_Pin;
 81022ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81022ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81022f0:	2301      	movs	r3, #1
 81022f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81022f4:	2300      	movs	r3, #0
 81022f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81022f8:	2300      	movs	r3, #0
 81022fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Direction_X_GPIO_Port, &GPIO_InitStruct);
 81022fc:	f107 031c 	add.w	r3, r7, #28
 8102300:	4619      	mov	r1, r3
 8102302:	4809      	ldr	r0, [pc, #36]	; (8102328 <MX_GPIO_Init+0x2f0>)
 8102304:	f002 f982 	bl	810460c <HAL_GPIO_Init>

}
 8102308:	bf00      	nop
 810230a:	3730      	adds	r7, #48	; 0x30
 810230c:	46bd      	mov	sp, r7
 810230e:	bd80      	pop	{r7, pc}
 8102310:	58024400 	.word	0x58024400
 8102314:	58021000 	.word	0x58021000
 8102318:	58020000 	.word	0x58020000
 810231c:	58020400 	.word	0x58020400
 8102320:	58020c00 	.word	0x58020c00
 8102324:	58020800 	.word	0x58020800
 8102328:	58021800 	.word	0x58021800
 810232c:	58021400 	.word	0x58021400

08102330 <set_Direction_X>:
	HAL_GPIO_WritePin(Solenoid_GPIO_Port, Solenoid_Pin, GPIO_PIN_RESET);
}



void set_Direction_X(void){
 8102330:	b580      	push	{r7, lr}
 8102332:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_SET);
 8102334:	2201      	movs	r2, #1
 8102336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 810233a:	4802      	ldr	r0, [pc, #8]	; (8102344 <set_Direction_X+0x14>)
 810233c:	f002 fb2e 	bl	810499c <HAL_GPIO_WritePin>
}
 8102340:	bf00      	nop
 8102342:	bd80      	pop	{r7, pc}
 8102344:	58021800 	.word	0x58021800

08102348 <reset_Direction_X>:
void reset_Direction_X(void){
 8102348:	b580      	push	{r7, lr}
 810234a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_X_GPIO_Port, Direction_X_Pin, GPIO_PIN_RESET);
 810234c:	2200      	movs	r2, #0
 810234e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8102352:	4802      	ldr	r0, [pc, #8]	; (810235c <reset_Direction_X+0x14>)
 8102354:	f002 fb22 	bl	810499c <HAL_GPIO_WritePin>
}
 8102358:	bf00      	nop
 810235a:	bd80      	pop	{r7, pc}
 810235c:	58021800 	.word	0x58021800

08102360 <set_Ready_X>:

void set_Ready_X(void){
 8102360:	b580      	push	{r7, lr}
 8102362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_SET);
 8102364:	2201      	movs	r2, #1
 8102366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810236a:	4802      	ldr	r0, [pc, #8]	; (8102374 <set_Ready_X+0x14>)
 810236c:	f002 fb16 	bl	810499c <HAL_GPIO_WritePin>
}
 8102370:	bf00      	nop
 8102372:	bd80      	pop	{r7, pc}
 8102374:	58020c00 	.word	0x58020c00

08102378 <reset_Ready_X>:
void reset_Ready_X(void){
 8102378:	b580      	push	{r7, lr}
 810237a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_X_GPIO_Port, Ready_X_Pin, GPIO_PIN_RESET);
 810237c:	2200      	movs	r2, #0
 810237e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102382:	4802      	ldr	r0, [pc, #8]	; (810238c <reset_Ready_X+0x14>)
 8102384:	f002 fb0a 	bl	810499c <HAL_GPIO_WritePin>
}
 8102388:	bf00      	nop
 810238a:	bd80      	pop	{r7, pc}
 810238c:	58020c00 	.word	0x58020c00

08102390 <set_Direction_Z>:
	HAL_GPIO_WritePin(DigiIN_OUT_X_GPIO_Port, DigiIN_OUT_X_Pin, GPIO_PIN_RESET);
}



void set_Direction_Z(void){
 8102390:	b580      	push	{r7, lr}
 8102392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_SET);
 8102394:	2201      	movs	r2, #1
 8102396:	2101      	movs	r1, #1
 8102398:	4802      	ldr	r0, [pc, #8]	; (81023a4 <set_Direction_Z+0x14>)
 810239a:	f002 faff 	bl	810499c <HAL_GPIO_WritePin>
}
 810239e:	bf00      	nop
 81023a0:	bd80      	pop	{r7, pc}
 81023a2:	bf00      	nop
 81023a4:	58021000 	.word	0x58021000

081023a8 <reset_Direction_Z>:
void reset_Direction_Z(void){
 81023a8:	b580      	push	{r7, lr}
 81023aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Direction_Z_GPIO_Port, Direction_Z_Pin, GPIO_PIN_RESET);
 81023ac:	2200      	movs	r2, #0
 81023ae:	2101      	movs	r1, #1
 81023b0:	4802      	ldr	r0, [pc, #8]	; (81023bc <reset_Direction_Z+0x14>)
 81023b2:	f002 faf3 	bl	810499c <HAL_GPIO_WritePin>
}
 81023b6:	bf00      	nop
 81023b8:	bd80      	pop	{r7, pc}
 81023ba:	bf00      	nop
 81023bc:	58021000 	.word	0x58021000

081023c0 <set_Ready_Z>:

void set_Ready_Z(void){
 81023c0:	b580      	push	{r7, lr}
 81023c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_SET);
 81023c4:	2201      	movs	r2, #1
 81023c6:	2101      	movs	r1, #1
 81023c8:	4802      	ldr	r0, [pc, #8]	; (81023d4 <set_Ready_Z+0x14>)
 81023ca:	f002 fae7 	bl	810499c <HAL_GPIO_WritePin>
}
 81023ce:	bf00      	nop
 81023d0:	bd80      	pop	{r7, pc}
 81023d2:	bf00      	nop
 81023d4:	58020000 	.word	0x58020000

081023d8 <reset_Ready_Z>:
void reset_Ready_Z(void){
 81023d8:	b580      	push	{r7, lr}
 81023da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ready_Z_GPIO_Port, Ready_Z_Pin, GPIO_PIN_RESET);
 81023dc:	2200      	movs	r2, #0
 81023de:	2101      	movs	r1, #1
 81023e0:	4802      	ldr	r0, [pc, #8]	; (81023ec <reset_Ready_Z+0x14>)
 81023e2:	f002 fadb 	bl	810499c <HAL_GPIO_WritePin>
}
 81023e6:	bf00      	nop
 81023e8:	bd80      	pop	{r7, pc}
 81023ea:	bf00      	nop
 81023ec:	58020000 	.word	0x58020000

081023f0 <set_Enable_Power>:
	HAL_GPIO_WritePin(DigiIN_OUT_Z_GPIO_Port, DigiIN_OUT_Z_Pin, GPIO_PIN_RESET);
}



void set_Enable_Power(void){
 81023f0:	b580      	push	{r7, lr}
 81023f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_RESET);
 81023f4:	2200      	movs	r2, #0
 81023f6:	2101      	movs	r1, #1
 81023f8:	4802      	ldr	r0, [pc, #8]	; (8102404 <set_Enable_Power+0x14>)
 81023fa:	f002 facf 	bl	810499c <HAL_GPIO_WritePin>
}
 81023fe:	bf00      	nop
 8102400:	bd80      	pop	{r7, pc}
 8102402:	bf00      	nop
 8102404:	58020c00 	.word	0x58020c00

08102408 <reset_Enable_Power>:
void reset_Enable_Power(void){
 8102408:	b580      	push	{r7, lr}
 810240a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Enable_PWR_GPIO_Port, Enable_PWR_Pin, GPIO_PIN_SET);
 810240c:	2201      	movs	r2, #1
 810240e:	2101      	movs	r1, #1
 8102410:	4802      	ldr	r0, [pc, #8]	; (810241c <reset_Enable_Power+0x14>)
 8102412:	f002 fac3 	bl	810499c <HAL_GPIO_WritePin>
}
 8102416:	bf00      	nop
 8102418:	bd80      	pop	{r7, pc}
 810241a:	bf00      	nop
 810241c:	58020c00 	.word	0x58020c00

08102420 <get_Homing_X>:

int get_Homing_X(void){
 8102420:	b580      	push	{r7, lr}
 8102422:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Homing_X_GPIO_Port, Homing_X_Pin) == GPIO_PIN_RESET;
 8102424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8102428:	4805      	ldr	r0, [pc, #20]	; (8102440 <get_Homing_X+0x20>)
 810242a:	f002 fa9f 	bl	810496c <HAL_GPIO_ReadPin>
 810242e:	4603      	mov	r3, r0
 8102430:	2b00      	cmp	r3, #0
 8102432:	bf0c      	ite	eq
 8102434:	2301      	moveq	r3, #1
 8102436:	2300      	movne	r3, #0
 8102438:	b2db      	uxtb	r3, r3
}
 810243a:	4618      	mov	r0, r3
 810243c:	bd80      	pop	{r7, pc}
 810243e:	bf00      	nop
 8102440:	58021000 	.word	0x58021000

08102444 <get_Homing_Z>:
int get_Homing_Z(void){
 8102444:	b580      	push	{r7, lr}
 8102446:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(Homing_Z_GPIO_Port, Homing_Z_Pin) == GPIO_PIN_RESET;
 8102448:	2104      	movs	r1, #4
 810244a:	4805      	ldr	r0, [pc, #20]	; (8102460 <get_Homing_Z+0x1c>)
 810244c:	f002 fa8e 	bl	810496c <HAL_GPIO_ReadPin>
 8102450:	4603      	mov	r3, r0
 8102452:	2b00      	cmp	r3, #0
 8102454:	bf0c      	ite	eq
 8102456:	2301      	moveq	r3, #1
 8102458:	2300      	movne	r3, #0
 810245a:	b2db      	uxtb	r3, r3
}
 810245c:	4618      	mov	r0, r3
 810245e:	bd80      	pop	{r7, pc}
 8102460:	58020400 	.word	0x58020400

08102464 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8102464:	b580      	push	{r7, lr}
 8102466:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8102468:	4b1b      	ldr	r3, [pc, #108]	; (81024d8 <MX_I2C1_Init+0x74>)
 810246a:	4a1c      	ldr	r2, [pc, #112]	; (81024dc <MX_I2C1_Init+0x78>)
 810246c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 810246e:	4b1a      	ldr	r3, [pc, #104]	; (81024d8 <MX_I2C1_Init+0x74>)
 8102470:	4a1b      	ldr	r2, [pc, #108]	; (81024e0 <MX_I2C1_Init+0x7c>)
 8102472:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8102474:	4b18      	ldr	r3, [pc, #96]	; (81024d8 <MX_I2C1_Init+0x74>)
 8102476:	2200      	movs	r2, #0
 8102478:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810247a:	4b17      	ldr	r3, [pc, #92]	; (81024d8 <MX_I2C1_Init+0x74>)
 810247c:	2201      	movs	r2, #1
 810247e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102480:	4b15      	ldr	r3, [pc, #84]	; (81024d8 <MX_I2C1_Init+0x74>)
 8102482:	2200      	movs	r2, #0
 8102484:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8102486:	4b14      	ldr	r3, [pc, #80]	; (81024d8 <MX_I2C1_Init+0x74>)
 8102488:	2200      	movs	r2, #0
 810248a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810248c:	4b12      	ldr	r3, [pc, #72]	; (81024d8 <MX_I2C1_Init+0x74>)
 810248e:	2200      	movs	r2, #0
 8102490:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8102492:	4b11      	ldr	r3, [pc, #68]	; (81024d8 <MX_I2C1_Init+0x74>)
 8102494:	2200      	movs	r2, #0
 8102496:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102498:	4b0f      	ldr	r3, [pc, #60]	; (81024d8 <MX_I2C1_Init+0x74>)
 810249a:	2200      	movs	r2, #0
 810249c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810249e:	480e      	ldr	r0, [pc, #56]	; (81024d8 <MX_I2C1_Init+0x74>)
 81024a0:	f002 faf0 	bl	8104a84 <HAL_I2C_Init>
 81024a4:	4603      	mov	r3, r0
 81024a6:	2b00      	cmp	r3, #0
 81024a8:	d001      	beq.n	81024ae <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 81024aa:	f7ff fc75 	bl	8101d98 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81024ae:	2100      	movs	r1, #0
 81024b0:	4809      	ldr	r0, [pc, #36]	; (81024d8 <MX_I2C1_Init+0x74>)
 81024b2:	f003 f84b 	bl	810554c <HAL_I2CEx_ConfigAnalogFilter>
 81024b6:	4603      	mov	r3, r0
 81024b8:	2b00      	cmp	r3, #0
 81024ba:	d001      	beq.n	81024c0 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 81024bc:	f7ff fc6c 	bl	8101d98 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81024c0:	2100      	movs	r1, #0
 81024c2:	4805      	ldr	r0, [pc, #20]	; (81024d8 <MX_I2C1_Init+0x74>)
 81024c4:	f003 f88d 	bl	81055e2 <HAL_I2CEx_ConfigDigitalFilter>
 81024c8:	4603      	mov	r3, r0
 81024ca:	2b00      	cmp	r3, #0
 81024cc:	d001      	beq.n	81024d2 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 81024ce:	f7ff fc63 	bl	8101d98 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 81024d2:	bf00      	nop
 81024d4:	bd80      	pop	{r7, pc}
 81024d6:	bf00      	nop
 81024d8:	10000188 	.word	0x10000188
 81024dc:	40005400 	.word	0x40005400
 81024e0:	307075b1 	.word	0x307075b1

081024e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 81024e4:	b580      	push	{r7, lr}
 81024e6:	b0b8      	sub	sp, #224	; 0xe0
 81024e8:	af00      	add	r7, sp, #0
 81024ea:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 81024ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81024f0:	2200      	movs	r2, #0
 81024f2:	601a      	str	r2, [r3, #0]
 81024f4:	605a      	str	r2, [r3, #4]
 81024f6:	609a      	str	r2, [r3, #8]
 81024f8:	60da      	str	r2, [r3, #12]
 81024fa:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 81024fc:	f107 0310 	add.w	r3, r7, #16
 8102500:	22bc      	movs	r2, #188	; 0xbc
 8102502:	2100      	movs	r1, #0
 8102504:	4618      	mov	r0, r3
 8102506:	f007 fff7 	bl	810a4f8 <memset>
	{ 0 };
	if (i2cHandle->Instance == I2C1)
 810250a:	687b      	ldr	r3, [r7, #4]
 810250c:	681b      	ldr	r3, [r3, #0]
 810250e:	4a25      	ldr	r2, [pc, #148]	; (81025a4 <HAL_I2C_MspInit+0xc0>)
 8102510:	4293      	cmp	r3, r2
 8102512:	d142      	bne.n	810259a <HAL_I2C_MspInit+0xb6>

		/* USER CODE END I2C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8102514:	2308      	movs	r3, #8
 8102516:	613b      	str	r3, [r7, #16]
		PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102518:	2300      	movs	r3, #0
 810251a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810251e:	f107 0310 	add.w	r3, r7, #16
 8102522:	4618      	mov	r0, r3
 8102524:	f003 fb0a 	bl	8105b3c <HAL_RCCEx_PeriphCLKConfig>
 8102528:	4603      	mov	r3, r0
 810252a:	2b00      	cmp	r3, #0
 810252c:	d001      	beq.n	8102532 <HAL_I2C_MspInit+0x4e>
		{
			Error_Handler();
 810252e:	f7ff fc33 	bl	8101d98 <Error_Handler>
		}

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8102532:	4b1d      	ldr	r3, [pc, #116]	; (81025a8 <HAL_I2C_MspInit+0xc4>)
 8102534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102538:	4a1b      	ldr	r2, [pc, #108]	; (81025a8 <HAL_I2C_MspInit+0xc4>)
 810253a:	f043 0302 	orr.w	r3, r3, #2
 810253e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102542:	4b19      	ldr	r3, [pc, #100]	; (81025a8 <HAL_I2C_MspInit+0xc4>)
 8102544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102548:	f003 0302 	and.w	r3, r3, #2
 810254c:	60fb      	str	r3, [r7, #12]
 810254e:	68fb      	ldr	r3, [r7, #12]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8102550:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102554:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102558:	2312      	movs	r3, #18
 810255a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 810255e:	2300      	movs	r3, #0
 8102560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102564:	2300      	movs	r3, #0
 8102566:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810256a:	2304      	movs	r3, #4
 810256c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102570:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102574:	4619      	mov	r1, r3
 8102576:	480d      	ldr	r0, [pc, #52]	; (81025ac <HAL_I2C_MspInit+0xc8>)
 8102578:	f002 f848 	bl	810460c <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 810257c:	4b0a      	ldr	r3, [pc, #40]	; (81025a8 <HAL_I2C_MspInit+0xc4>)
 810257e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102582:	4a09      	ldr	r2, [pc, #36]	; (81025a8 <HAL_I2C_MspInit+0xc4>)
 8102584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102588:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810258c:	4b06      	ldr	r3, [pc, #24]	; (81025a8 <HAL_I2C_MspInit+0xc4>)
 810258e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102596:	60bb      	str	r3, [r7, #8]
 8102598:	68bb      	ldr	r3, [r7, #8]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 810259a:	bf00      	nop
 810259c:	37e0      	adds	r7, #224	; 0xe0
 810259e:	46bd      	mov	sp, r7
 81025a0:	bd80      	pop	{r7, pc}
 81025a2:	bf00      	nop
 81025a4:	40005400 	.word	0x40005400
 81025a8:	58024400 	.word	0x58024400
 81025ac:	58020400 	.word	0x58020400

081025b0 <i2c_Transmit>:
@param[5] pData: Pointer to the data buffer containing the data to be transmitted.
@param[6] pData_size: Size of the data buffer in bytes.

@retval HAL_StatusTypeDef: HAL status enumeration value.
 */
{
 81025b0:	b590      	push	{r4, r7, lr}
 81025b2:	b089      	sub	sp, #36	; 0x24
 81025b4:	af04      	add	r7, sp, #16
 81025b6:	6078      	str	r0, [r7, #4]
 81025b8:	4608      	mov	r0, r1
 81025ba:	4611      	mov	r1, r2
 81025bc:	461a      	mov	r2, r3
 81025be:	4603      	mov	r3, r0
 81025c0:	70fb      	strb	r3, [r7, #3]
 81025c2:	460b      	mov	r3, r1
 81025c4:	70bb      	strb	r3, [r7, #2]
 81025c6:	4613      	mov	r3, r2
 81025c8:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef retFunc;
	uint8_t write_addr = DevAddress << 1;
 81025ca:	78fb      	ldrb	r3, [r7, #3]
 81025cc:	005b      	lsls	r3, r3, #1
 81025ce:	73fb      	strb	r3, [r7, #15]
	retFunc = HAL_I2C_Mem_Write(bus, write_addr, MemAddress, MemAddSize, pData,
 81025d0:	7bfb      	ldrb	r3, [r7, #15]
 81025d2:	b299      	uxth	r1, r3
 81025d4:	78bb      	ldrb	r3, [r7, #2]
 81025d6:	b29a      	uxth	r2, r3
 81025d8:	787b      	ldrb	r3, [r7, #1]
 81025da:	b298      	uxth	r0, r3
 81025dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 81025e0:	b29b      	uxth	r3, r3
 81025e2:	2432      	movs	r4, #50	; 0x32
 81025e4:	9402      	str	r4, [sp, #8]
 81025e6:	9301      	str	r3, [sp, #4]
 81025e8:	6a3b      	ldr	r3, [r7, #32]
 81025ea:	9300      	str	r3, [sp, #0]
 81025ec:	4603      	mov	r3, r0
 81025ee:	6878      	ldr	r0, [r7, #4]
 81025f0:	f002 fad8 	bl	8104ba4 <HAL_I2C_Mem_Write>
 81025f4:	4603      	mov	r3, r0
 81025f6:	73bb      	strb	r3, [r7, #14]
			pData_size, TIME_OUT);
	return retFunc;
 81025f8:	7bbb      	ldrb	r3, [r7, #14]
}
 81025fa:	4618      	mov	r0, r3
 81025fc:	3714      	adds	r7, #20
 81025fe:	46bd      	mov	sp, r7
 8102600:	bd90      	pop	{r4, r7, pc}

08102602 <i2c_Receive>:
@param[5] pData: Pointer to the data buffer to store the received data.
@param[6] pData_size: Size of the data buffer in bytes.

@retval HAL_StatusTypeDef: HAL status enumeration value.
 */
{
 8102602:	b590      	push	{r4, r7, lr}
 8102604:	b089      	sub	sp, #36	; 0x24
 8102606:	af04      	add	r7, sp, #16
 8102608:	6078      	str	r0, [r7, #4]
 810260a:	4608      	mov	r0, r1
 810260c:	4611      	mov	r1, r2
 810260e:	461a      	mov	r2, r3
 8102610:	4603      	mov	r3, r0
 8102612:	70fb      	strb	r3, [r7, #3]
 8102614:	460b      	mov	r3, r1
 8102616:	70bb      	strb	r3, [r7, #2]
 8102618:	4613      	mov	r3, r2
 810261a:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef retFunc;
	uint8_t read_addr = (DevAddress << 1) | 0x01;
 810261c:	78fb      	ldrb	r3, [r7, #3]
 810261e:	005b      	lsls	r3, r3, #1
 8102620:	b25b      	sxtb	r3, r3
 8102622:	f043 0301 	orr.w	r3, r3, #1
 8102626:	b25b      	sxtb	r3, r3
 8102628:	73fb      	strb	r3, [r7, #15]
	retFunc = HAL_I2C_Mem_Read(bus, read_addr, MemAddress, MemAddSize, pData,
 810262a:	7bfb      	ldrb	r3, [r7, #15]
 810262c:	b299      	uxth	r1, r3
 810262e:	78bb      	ldrb	r3, [r7, #2]
 8102630:	b29a      	uxth	r2, r3
 8102632:	787b      	ldrb	r3, [r7, #1]
 8102634:	b298      	uxth	r0, r3
 8102636:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 810263a:	b29b      	uxth	r3, r3
 810263c:	2432      	movs	r4, #50	; 0x32
 810263e:	9402      	str	r4, [sp, #8]
 8102640:	9301      	str	r3, [sp, #4]
 8102642:	6a3b      	ldr	r3, [r7, #32]
 8102644:	9300      	str	r3, [sp, #0]
 8102646:	4603      	mov	r3, r0
 8102648:	6878      	ldr	r0, [r7, #4]
 810264a:	f002 fbbf 	bl	8104dcc <HAL_I2C_Mem_Read>
 810264e:	4603      	mov	r3, r0
 8102650:	73bb      	strb	r3, [r7, #14]
			pData_size, TIME_OUT);
	return retFunc;
 8102652:	7bbb      	ldrb	r3, [r7, #14]
}
 8102654:	4618      	mov	r0, r3
 8102656:	3714      	adds	r7, #20
 8102658:	46bd      	mov	sp, r7
 810265a:	bd90      	pop	{r4, r7, pc}

0810265c <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 810265c:	b580      	push	{r7, lr}
 810265e:	b08a      	sub	sp, #40	; 0x28
 8102660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102662:	f107 031c 	add.w	r3, r7, #28
 8102666:	2200      	movs	r2, #0
 8102668:	601a      	str	r2, [r3, #0]
 810266a:	605a      	str	r2, [r3, #4]
 810266c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 810266e:	463b      	mov	r3, r7
 8102670:	2200      	movs	r2, #0
 8102672:	601a      	str	r2, [r3, #0]
 8102674:	605a      	str	r2, [r3, #4]
 8102676:	609a      	str	r2, [r3, #8]
 8102678:	60da      	str	r2, [r3, #12]
 810267a:	611a      	str	r2, [r3, #16]
 810267c:	615a      	str	r2, [r3, #20]
 810267e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8102680:	4b27      	ldr	r3, [pc, #156]	; (8102720 <MX_TIM2_Init+0xc4>)
 8102682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8102688:	4b25      	ldr	r3, [pc, #148]	; (8102720 <MX_TIM2_Init+0xc4>)
 810268a:	222f      	movs	r2, #47	; 0x2f
 810268c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810268e:	4b24      	ldr	r3, [pc, #144]	; (8102720 <MX_TIM2_Init+0xc4>)
 8102690:	2200      	movs	r2, #0
 8102692:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8102694:	4b22      	ldr	r3, [pc, #136]	; (8102720 <MX_TIM2_Init+0xc4>)
 8102696:	f240 32e7 	movw	r2, #999	; 0x3e7
 810269a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810269c:	4b20      	ldr	r3, [pc, #128]	; (8102720 <MX_TIM2_Init+0xc4>)
 810269e:	2200      	movs	r2, #0
 81026a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81026a2:	4b1f      	ldr	r3, [pc, #124]	; (8102720 <MX_TIM2_Init+0xc4>)
 81026a4:	2200      	movs	r2, #0
 81026a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 81026a8:	481d      	ldr	r0, [pc, #116]	; (8102720 <MX_TIM2_Init+0xc4>)
 81026aa:	f005 fca3 	bl	8107ff4 <HAL_TIM_PWM_Init>
 81026ae:	4603      	mov	r3, r0
 81026b0:	2b00      	cmp	r3, #0
 81026b2:	d001      	beq.n	81026b8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 81026b4:	f7ff fb70 	bl	8101d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81026b8:	2300      	movs	r3, #0
 81026ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81026bc:	2300      	movs	r3, #0
 81026be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 81026c0:	f107 031c 	add.w	r3, r7, #28
 81026c4:	4619      	mov	r1, r3
 81026c6:	4816      	ldr	r0, [pc, #88]	; (8102720 <MX_TIM2_Init+0xc4>)
 81026c8:	f006 fd40 	bl	810914c <HAL_TIMEx_MasterConfigSynchronization>
 81026cc:	4603      	mov	r3, r0
 81026ce:	2b00      	cmp	r3, #0
 81026d0:	d001      	beq.n	81026d6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 81026d2:	f7ff fb61 	bl	8101d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81026d6:	2360      	movs	r3, #96	; 0x60
 81026d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 81026da:	2300      	movs	r3, #0
 81026dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81026de:	2300      	movs	r3, #0
 81026e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81026e2:	2300      	movs	r3, #0
 81026e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 81026e6:	463b      	mov	r3, r7
 81026e8:	2208      	movs	r2, #8
 81026ea:	4619      	mov	r1, r3
 81026ec:	480c      	ldr	r0, [pc, #48]	; (8102720 <MX_TIM2_Init+0xc4>)
 81026ee:	f006 f85b 	bl	81087a8 <HAL_TIM_PWM_ConfigChannel>
 81026f2:	4603      	mov	r3, r0
 81026f4:	2b00      	cmp	r3, #0
 81026f6:	d001      	beq.n	81026fc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 81026f8:	f7ff fb4e 	bl	8101d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 81026fc:	463b      	mov	r3, r7
 81026fe:	220c      	movs	r2, #12
 8102700:	4619      	mov	r1, r3
 8102702:	4807      	ldr	r0, [pc, #28]	; (8102720 <MX_TIM2_Init+0xc4>)
 8102704:	f006 f850 	bl	81087a8 <HAL_TIM_PWM_ConfigChannel>
 8102708:	4603      	mov	r3, r0
 810270a:	2b00      	cmp	r3, #0
 810270c:	d001      	beq.n	8102712 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 810270e:	f7ff fb43 	bl	8101d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8102712:	4803      	ldr	r0, [pc, #12]	; (8102720 <MX_TIM2_Init+0xc4>)
 8102714:	f000 fa9e 	bl	8102c54 <HAL_TIM_MspPostInit>

}
 8102718:	bf00      	nop
 810271a:	3728      	adds	r7, #40	; 0x28
 810271c:	46bd      	mov	sp, r7
 810271e:	bd80      	pop	{r7, pc}
 8102720:	100001d4 	.word	0x100001d4

08102724 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8102724:	b580      	push	{r7, lr}
 8102726:	b08c      	sub	sp, #48	; 0x30
 8102728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 810272a:	f107 030c 	add.w	r3, r7, #12
 810272e:	2224      	movs	r2, #36	; 0x24
 8102730:	2100      	movs	r1, #0
 8102732:	4618      	mov	r0, r3
 8102734:	f007 fee0 	bl	810a4f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102738:	463b      	mov	r3, r7
 810273a:	2200      	movs	r2, #0
 810273c:	601a      	str	r2, [r3, #0]
 810273e:	605a      	str	r2, [r3, #4]
 8102740:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8102742:	4b21      	ldr	r3, [pc, #132]	; (81027c8 <MX_TIM3_Init+0xa4>)
 8102744:	4a21      	ldr	r2, [pc, #132]	; (81027cc <MX_TIM3_Init+0xa8>)
 8102746:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8102748:	4b1f      	ldr	r3, [pc, #124]	; (81027c8 <MX_TIM3_Init+0xa4>)
 810274a:	2200      	movs	r2, #0
 810274c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 810274e:	4b1e      	ldr	r3, [pc, #120]	; (81027c8 <MX_TIM3_Init+0xa4>)
 8102750:	2200      	movs	r2, #0
 8102752:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8102754:	4b1c      	ldr	r3, [pc, #112]	; (81027c8 <MX_TIM3_Init+0xa4>)
 8102756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810275a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810275c:	4b1a      	ldr	r3, [pc, #104]	; (81027c8 <MX_TIM3_Init+0xa4>)
 810275e:	2200      	movs	r2, #0
 8102760:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102762:	4b19      	ldr	r3, [pc, #100]	; (81027c8 <MX_TIM3_Init+0xa4>)
 8102764:	2200      	movs	r2, #0
 8102766:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8102768:	2301      	movs	r3, #1
 810276a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 810276c:	2300      	movs	r3, #0
 810276e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8102770:	2301      	movs	r3, #1
 8102772:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8102774:	2300      	movs	r3, #0
 8102776:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8102778:	2300      	movs	r3, #0
 810277a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 810277c:	2302      	movs	r3, #2
 810277e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8102780:	2301      	movs	r3, #1
 8102782:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8102784:	2300      	movs	r3, #0
 8102786:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8102788:	2300      	movs	r3, #0
 810278a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 810278c:	f107 030c 	add.w	r3, r7, #12
 8102790:	4619      	mov	r1, r3
 8102792:	480d      	ldr	r0, [pc, #52]	; (81027c8 <MX_TIM3_Init+0xa4>)
 8102794:	f005 fd94 	bl	81082c0 <HAL_TIM_Encoder_Init>
 8102798:	4603      	mov	r3, r0
 810279a:	2b00      	cmp	r3, #0
 810279c:	d001      	beq.n	81027a2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 810279e:	f7ff fafb 	bl	8101d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81027a2:	2300      	movs	r3, #0
 81027a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81027a6:	2300      	movs	r3, #0
 81027a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 81027aa:	463b      	mov	r3, r7
 81027ac:	4619      	mov	r1, r3
 81027ae:	4806      	ldr	r0, [pc, #24]	; (81027c8 <MX_TIM3_Init+0xa4>)
 81027b0:	f006 fccc 	bl	810914c <HAL_TIMEx_MasterConfigSynchronization>
 81027b4:	4603      	mov	r3, r0
 81027b6:	2b00      	cmp	r3, #0
 81027b8:	d001      	beq.n	81027be <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 81027ba:	f7ff faed 	bl	8101d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 81027be:	bf00      	nop
 81027c0:	3730      	adds	r7, #48	; 0x30
 81027c2:	46bd      	mov	sp, r7
 81027c4:	bd80      	pop	{r7, pc}
 81027c6:	bf00      	nop
 81027c8:	10000220 	.word	0x10000220
 81027cc:	40000400 	.word	0x40000400

081027d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 81027d0:	b580      	push	{r7, lr}
 81027d2:	b08c      	sub	sp, #48	; 0x30
 81027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81027d6:	f107 030c 	add.w	r3, r7, #12
 81027da:	2224      	movs	r2, #36	; 0x24
 81027dc:	2100      	movs	r1, #0
 81027de:	4618      	mov	r0, r3
 81027e0:	f007 fe8a 	bl	810a4f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81027e4:	463b      	mov	r3, r7
 81027e6:	2200      	movs	r2, #0
 81027e8:	601a      	str	r2, [r3, #0]
 81027ea:	605a      	str	r2, [r3, #4]
 81027ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 81027ee:	4b21      	ldr	r3, [pc, #132]	; (8102874 <MX_TIM4_Init+0xa4>)
 81027f0:	4a21      	ldr	r2, [pc, #132]	; (8102878 <MX_TIM4_Init+0xa8>)
 81027f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 81027f4:	4b1f      	ldr	r3, [pc, #124]	; (8102874 <MX_TIM4_Init+0xa4>)
 81027f6:	2200      	movs	r2, #0
 81027f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 81027fa:	4b1e      	ldr	r3, [pc, #120]	; (8102874 <MX_TIM4_Init+0xa4>)
 81027fc:	2200      	movs	r2, #0
 81027fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8102800:	4b1c      	ldr	r3, [pc, #112]	; (8102874 <MX_TIM4_Init+0xa4>)
 8102802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8102806:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102808:	4b1a      	ldr	r3, [pc, #104]	; (8102874 <MX_TIM4_Init+0xa4>)
 810280a:	2200      	movs	r2, #0
 810280c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810280e:	4b19      	ldr	r3, [pc, #100]	; (8102874 <MX_TIM4_Init+0xa4>)
 8102810:	2200      	movs	r2, #0
 8102812:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8102814:	2301      	movs	r3, #1
 8102816:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8102818:	2300      	movs	r3, #0
 810281a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 810281c:	2301      	movs	r3, #1
 810281e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8102820:	2300      	movs	r3, #0
 8102822:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8102824:	2300      	movs	r3, #0
 8102826:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8102828:	2302      	movs	r3, #2
 810282a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 810282c:	2301      	movs	r3, #1
 810282e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8102830:	2300      	movs	r3, #0
 8102832:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8102834:	2300      	movs	r3, #0
 8102836:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8102838:	f107 030c 	add.w	r3, r7, #12
 810283c:	4619      	mov	r1, r3
 810283e:	480d      	ldr	r0, [pc, #52]	; (8102874 <MX_TIM4_Init+0xa4>)
 8102840:	f005 fd3e 	bl	81082c0 <HAL_TIM_Encoder_Init>
 8102844:	4603      	mov	r3, r0
 8102846:	2b00      	cmp	r3, #0
 8102848:	d001      	beq.n	810284e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 810284a:	f7ff faa5 	bl	8101d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810284e:	2300      	movs	r3, #0
 8102850:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102852:	2300      	movs	r3, #0
 8102854:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8102856:	463b      	mov	r3, r7
 8102858:	4619      	mov	r1, r3
 810285a:	4806      	ldr	r0, [pc, #24]	; (8102874 <MX_TIM4_Init+0xa4>)
 810285c:	f006 fc76 	bl	810914c <HAL_TIMEx_MasterConfigSynchronization>
 8102860:	4603      	mov	r3, r0
 8102862:	2b00      	cmp	r3, #0
 8102864:	d001      	beq.n	810286a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8102866:	f7ff fa97 	bl	8101d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 810286a:	bf00      	nop
 810286c:	3730      	adds	r7, #48	; 0x30
 810286e:	46bd      	mov	sp, r7
 8102870:	bd80      	pop	{r7, pc}
 8102872:	bf00      	nop
 8102874:	1000026c 	.word	0x1000026c
 8102878:	40000800 	.word	0x40000800

0810287c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 810287c:	b580      	push	{r7, lr}
 810287e:	b084      	sub	sp, #16
 8102880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102882:	1d3b      	adds	r3, r7, #4
 8102884:	2200      	movs	r2, #0
 8102886:	601a      	str	r2, [r3, #0]
 8102888:	605a      	str	r2, [r3, #4]
 810288a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 810288c:	4b14      	ldr	r3, [pc, #80]	; (81028e0 <MX_TIM7_Init+0x64>)
 810288e:	4a15      	ldr	r2, [pc, #84]	; (81028e4 <MX_TIM7_Init+0x68>)
 8102890:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 8102892:	4b13      	ldr	r3, [pc, #76]	; (81028e0 <MX_TIM7_Init+0x64>)
 8102894:	224f      	movs	r2, #79	; 0x4f
 8102896:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102898:	4b11      	ldr	r3, [pc, #68]	; (81028e0 <MX_TIM7_Init+0x64>)
 810289a:	2200      	movs	r2, #0
 810289c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 60000-1;
 810289e:	4b10      	ldr	r3, [pc, #64]	; (81028e0 <MX_TIM7_Init+0x64>)
 81028a0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 81028a4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81028a6:	4b0e      	ldr	r3, [pc, #56]	; (81028e0 <MX_TIM7_Init+0x64>)
 81028a8:	2200      	movs	r2, #0
 81028aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 81028ac:	480c      	ldr	r0, [pc, #48]	; (81028e0 <MX_TIM7_Init+0x64>)
 81028ae:	f005 fad1 	bl	8107e54 <HAL_TIM_Base_Init>
 81028b2:	4603      	mov	r3, r0
 81028b4:	2b00      	cmp	r3, #0
 81028b6:	d001      	beq.n	81028bc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 81028b8:	f7ff fa6e 	bl	8101d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81028bc:	2300      	movs	r3, #0
 81028be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81028c0:	2300      	movs	r3, #0
 81028c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 81028c4:	1d3b      	adds	r3, r7, #4
 81028c6:	4619      	mov	r1, r3
 81028c8:	4805      	ldr	r0, [pc, #20]	; (81028e0 <MX_TIM7_Init+0x64>)
 81028ca:	f006 fc3f 	bl	810914c <HAL_TIMEx_MasterConfigSynchronization>
 81028ce:	4603      	mov	r3, r0
 81028d0:	2b00      	cmp	r3, #0
 81028d2:	d001      	beq.n	81028d8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 81028d4:	f7ff fa60 	bl	8101d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 81028d8:	bf00      	nop
 81028da:	3710      	adds	r7, #16
 81028dc:	46bd      	mov	sp, r7
 81028de:	bd80      	pop	{r7, pc}
 81028e0:	100002b8 	.word	0x100002b8
 81028e4:	40001400 	.word	0x40001400

081028e8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 81028e8:	b580      	push	{r7, lr}
 81028ea:	b088      	sub	sp, #32
 81028ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 81028ee:	1d3b      	adds	r3, r7, #4
 81028f0:	2200      	movs	r2, #0
 81028f2:	601a      	str	r2, [r3, #0]
 81028f4:	605a      	str	r2, [r3, #4]
 81028f6:	609a      	str	r2, [r3, #8]
 81028f8:	60da      	str	r2, [r3, #12]
 81028fa:	611a      	str	r2, [r3, #16]
 81028fc:	615a      	str	r2, [r3, #20]
 81028fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8102900:	4b1e      	ldr	r3, [pc, #120]	; (810297c <MX_TIM13_Init+0x94>)
 8102902:	4a1f      	ldr	r2, [pc, #124]	; (8102980 <MX_TIM13_Init+0x98>)
 8102904:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 80-1;
 8102906:	4b1d      	ldr	r3, [pc, #116]	; (810297c <MX_TIM13_Init+0x94>)
 8102908:	224f      	movs	r2, #79	; 0x4f
 810290a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 810290c:	4b1b      	ldr	r3, [pc, #108]	; (810297c <MX_TIM13_Init+0x94>)
 810290e:	2200      	movs	r2, #0
 8102910:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 60000-1;
 8102912:	4b1a      	ldr	r3, [pc, #104]	; (810297c <MX_TIM13_Init+0x94>)
 8102914:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8102918:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810291a:	4b18      	ldr	r3, [pc, #96]	; (810297c <MX_TIM13_Init+0x94>)
 810291c:	2200      	movs	r2, #0
 810291e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102920:	4b16      	ldr	r3, [pc, #88]	; (810297c <MX_TIM13_Init+0x94>)
 8102922:	2200      	movs	r2, #0
 8102924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8102926:	4815      	ldr	r0, [pc, #84]	; (810297c <MX_TIM13_Init+0x94>)
 8102928:	f005 fa94 	bl	8107e54 <HAL_TIM_Base_Init>
 810292c:	4603      	mov	r3, r0
 810292e:	2b00      	cmp	r3, #0
 8102930:	d001      	beq.n	8102936 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8102932:	f7ff fa31 	bl	8101d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8102936:	4811      	ldr	r0, [pc, #68]	; (810297c <MX_TIM13_Init+0x94>)
 8102938:	f005 fb5c 	bl	8107ff4 <HAL_TIM_PWM_Init>
 810293c:	4603      	mov	r3, r0
 810293e:	2b00      	cmp	r3, #0
 8102940:	d001      	beq.n	8102946 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8102942:	f7ff fa29 	bl	8101d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102946:	2360      	movs	r3, #96	; 0x60
 8102948:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 810294a:	2300      	movs	r3, #0
 810294c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810294e:	2300      	movs	r3, #0
 8102950:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102952:	2300      	movs	r3, #0
 8102954:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102956:	1d3b      	adds	r3, r7, #4
 8102958:	2200      	movs	r2, #0
 810295a:	4619      	mov	r1, r3
 810295c:	4807      	ldr	r0, [pc, #28]	; (810297c <MX_TIM13_Init+0x94>)
 810295e:	f005 ff23 	bl	81087a8 <HAL_TIM_PWM_ConfigChannel>
 8102962:	4603      	mov	r3, r0
 8102964:	2b00      	cmp	r3, #0
 8102966:	d001      	beq.n	810296c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8102968:	f7ff fa16 	bl	8101d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 810296c:	4803      	ldr	r0, [pc, #12]	; (810297c <MX_TIM13_Init+0x94>)
 810296e:	f000 f971 	bl	8102c54 <HAL_TIM_MspPostInit>

}
 8102972:	bf00      	nop
 8102974:	3720      	adds	r7, #32
 8102976:	46bd      	mov	sp, r7
 8102978:	bd80      	pop	{r7, pc}
 810297a:	bf00      	nop
 810297c:	10000304 	.word	0x10000304
 8102980:	40001c00 	.word	0x40001c00

08102984 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8102984:	b580      	push	{r7, lr}
 8102986:	b088      	sub	sp, #32
 8102988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 810298a:	1d3b      	adds	r3, r7, #4
 810298c:	2200      	movs	r2, #0
 810298e:	601a      	str	r2, [r3, #0]
 8102990:	605a      	str	r2, [r3, #4]
 8102992:	609a      	str	r2, [r3, #8]
 8102994:	60da      	str	r2, [r3, #12]
 8102996:	611a      	str	r2, [r3, #16]
 8102998:	615a      	str	r2, [r3, #20]
 810299a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 810299c:	4b1e      	ldr	r3, [pc, #120]	; (8102a18 <MX_TIM14_Init+0x94>)
 810299e:	4a1f      	ldr	r2, [pc, #124]	; (8102a1c <MX_TIM14_Init+0x98>)
 81029a0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80-1;
 81029a2:	4b1d      	ldr	r3, [pc, #116]	; (8102a18 <MX_TIM14_Init+0x94>)
 81029a4:	224f      	movs	r2, #79	; 0x4f
 81029a6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 81029a8:	4b1b      	ldr	r3, [pc, #108]	; (8102a18 <MX_TIM14_Init+0x94>)
 81029aa:	2200      	movs	r2, #0
 81029ac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 60000-1;
 81029ae:	4b1a      	ldr	r3, [pc, #104]	; (8102a18 <MX_TIM14_Init+0x94>)
 81029b0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 81029b4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81029b6:	4b18      	ldr	r3, [pc, #96]	; (8102a18 <MX_TIM14_Init+0x94>)
 81029b8:	2200      	movs	r2, #0
 81029ba:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81029bc:	4b16      	ldr	r3, [pc, #88]	; (8102a18 <MX_TIM14_Init+0x94>)
 81029be:	2200      	movs	r2, #0
 81029c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 81029c2:	4815      	ldr	r0, [pc, #84]	; (8102a18 <MX_TIM14_Init+0x94>)
 81029c4:	f005 fa46 	bl	8107e54 <HAL_TIM_Base_Init>
 81029c8:	4603      	mov	r3, r0
 81029ca:	2b00      	cmp	r3, #0
 81029cc:	d001      	beq.n	81029d2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 81029ce:	f7ff f9e3 	bl	8101d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 81029d2:	4811      	ldr	r0, [pc, #68]	; (8102a18 <MX_TIM14_Init+0x94>)
 81029d4:	f005 fb0e 	bl	8107ff4 <HAL_TIM_PWM_Init>
 81029d8:	4603      	mov	r3, r0
 81029da:	2b00      	cmp	r3, #0
 81029dc:	d001      	beq.n	81029e2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 81029de:	f7ff f9db 	bl	8101d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81029e2:	2360      	movs	r3, #96	; 0x60
 81029e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 81029e6:	2300      	movs	r3, #0
 81029e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81029ea:	2300      	movs	r3, #0
 81029ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81029ee:	2300      	movs	r3, #0
 81029f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81029f2:	1d3b      	adds	r3, r7, #4
 81029f4:	2200      	movs	r2, #0
 81029f6:	4619      	mov	r1, r3
 81029f8:	4807      	ldr	r0, [pc, #28]	; (8102a18 <MX_TIM14_Init+0x94>)
 81029fa:	f005 fed5 	bl	81087a8 <HAL_TIM_PWM_ConfigChannel>
 81029fe:	4603      	mov	r3, r0
 8102a00:	2b00      	cmp	r3, #0
 8102a02:	d001      	beq.n	8102a08 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8102a04:	f7ff f9c8 	bl	8101d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8102a08:	4803      	ldr	r0, [pc, #12]	; (8102a18 <MX_TIM14_Init+0x94>)
 8102a0a:	f000 f923 	bl	8102c54 <HAL_TIM_MspPostInit>

}
 8102a0e:	bf00      	nop
 8102a10:	3720      	adds	r7, #32
 8102a12:	46bd      	mov	sp, r7
 8102a14:	bd80      	pop	{r7, pc}
 8102a16:	bf00      	nop
 8102a18:	10000350 	.word	0x10000350
 8102a1c:	40002000 	.word	0x40002000

08102a20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8102a20:	b480      	push	{r7}
 8102a22:	b085      	sub	sp, #20
 8102a24:	af00      	add	r7, sp, #0
 8102a26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8102a28:	687b      	ldr	r3, [r7, #4]
 8102a2a:	681b      	ldr	r3, [r3, #0]
 8102a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102a30:	d10e      	bne.n	8102a50 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8102a32:	4b0a      	ldr	r3, [pc, #40]	; (8102a5c <HAL_TIM_PWM_MspInit+0x3c>)
 8102a34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a38:	4a08      	ldr	r2, [pc, #32]	; (8102a5c <HAL_TIM_PWM_MspInit+0x3c>)
 8102a3a:	f043 0301 	orr.w	r3, r3, #1
 8102a3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102a42:	4b06      	ldr	r3, [pc, #24]	; (8102a5c <HAL_TIM_PWM_MspInit+0x3c>)
 8102a44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a48:	f003 0301 	and.w	r3, r3, #1
 8102a4c:	60fb      	str	r3, [r7, #12]
 8102a4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8102a50:	bf00      	nop
 8102a52:	3714      	adds	r7, #20
 8102a54:	46bd      	mov	sp, r7
 8102a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a5a:	4770      	bx	lr
 8102a5c:	58024400 	.word	0x58024400

08102a60 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8102a60:	b580      	push	{r7, lr}
 8102a62:	b08c      	sub	sp, #48	; 0x30
 8102a64:	af00      	add	r7, sp, #0
 8102a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102a68:	f107 031c 	add.w	r3, r7, #28
 8102a6c:	2200      	movs	r2, #0
 8102a6e:	601a      	str	r2, [r3, #0]
 8102a70:	605a      	str	r2, [r3, #4]
 8102a72:	609a      	str	r2, [r3, #8]
 8102a74:	60da      	str	r2, [r3, #12]
 8102a76:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	681b      	ldr	r3, [r3, #0]
 8102a7c:	4a44      	ldr	r2, [pc, #272]	; (8102b90 <HAL_TIM_Encoder_MspInit+0x130>)
 8102a7e:	4293      	cmp	r3, r2
 8102a80:	d14d      	bne.n	8102b1e <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102a82:	4b44      	ldr	r3, [pc, #272]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a88:	4a42      	ldr	r2, [pc, #264]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102a8a:	f043 0302 	orr.w	r3, r3, #2
 8102a8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102a92:	4b40      	ldr	r3, [pc, #256]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a98:	f003 0302 	and.w	r3, r3, #2
 8102a9c:	61bb      	str	r3, [r7, #24]
 8102a9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102aa0:	4b3c      	ldr	r3, [pc, #240]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102aa6:	4a3b      	ldr	r2, [pc, #236]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102aa8:	f043 0301 	orr.w	r3, r3, #1
 8102aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102ab0:	4b38      	ldr	r3, [pc, #224]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102ab6:	f003 0301 	and.w	r3, r3, #1
 8102aba:	617b      	str	r3, [r7, #20]
 8102abc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102abe:	4b35      	ldr	r3, [pc, #212]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102ac4:	4a33      	ldr	r2, [pc, #204]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102ac6:	f043 0302 	orr.w	r3, r3, #2
 8102aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102ace:	4b31      	ldr	r3, [pc, #196]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102ad4:	f003 0302 	and.w	r3, r3, #2
 8102ad8:	613b      	str	r3, [r7, #16]
 8102ada:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_X_A_Pin;
 8102adc:	2340      	movs	r3, #64	; 0x40
 8102ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ae0:	2302      	movs	r3, #2
 8102ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102ae4:	2300      	movs	r3, #0
 8102ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102ae8:	2300      	movs	r3, #0
 8102aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102aec:	2302      	movs	r3, #2
 8102aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Encoder_X_A_GPIO_Port, &GPIO_InitStruct);
 8102af0:	f107 031c 	add.w	r3, r7, #28
 8102af4:	4619      	mov	r1, r3
 8102af6:	4828      	ldr	r0, [pc, #160]	; (8102b98 <HAL_TIM_Encoder_MspInit+0x138>)
 8102af8:	f001 fd88 	bl	810460c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_X_B_Pin;
 8102afc:	2320      	movs	r3, #32
 8102afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102b00:	2302      	movs	r3, #2
 8102b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102b04:	2300      	movs	r3, #0
 8102b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102b08:	2300      	movs	r3, #0
 8102b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102b0c:	2302      	movs	r3, #2
 8102b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Encoder_X_B_GPIO_Port, &GPIO_InitStruct);
 8102b10:	f107 031c 	add.w	r3, r7, #28
 8102b14:	4619      	mov	r1, r3
 8102b16:	4821      	ldr	r0, [pc, #132]	; (8102b9c <HAL_TIM_Encoder_MspInit+0x13c>)
 8102b18:	f001 fd78 	bl	810460c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8102b1c:	e033      	b.n	8102b86 <HAL_TIM_Encoder_MspInit+0x126>
  else if(tim_encoderHandle->Instance==TIM4)
 8102b1e:	687b      	ldr	r3, [r7, #4]
 8102b20:	681b      	ldr	r3, [r3, #0]
 8102b22:	4a1f      	ldr	r2, [pc, #124]	; (8102ba0 <HAL_TIM_Encoder_MspInit+0x140>)
 8102b24:	4293      	cmp	r3, r2
 8102b26:	d12e      	bne.n	8102b86 <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8102b28:	4b1a      	ldr	r3, [pc, #104]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b2e:	4a19      	ldr	r2, [pc, #100]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102b30:	f043 0304 	orr.w	r3, r3, #4
 8102b34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102b38:	4b16      	ldr	r3, [pc, #88]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b3e:	f003 0304 	and.w	r3, r3, #4
 8102b42:	60fb      	str	r3, [r7, #12]
 8102b44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102b46:	4b13      	ldr	r3, [pc, #76]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b4c:	4a11      	ldr	r2, [pc, #68]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102b4e:	f043 0308 	orr.w	r3, r3, #8
 8102b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b56:	4b0f      	ldr	r3, [pc, #60]	; (8102b94 <HAL_TIM_Encoder_MspInit+0x134>)
 8102b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b5c:	f003 0308 	and.w	r3, r3, #8
 8102b60:	60bb      	str	r3, [r7, #8]
 8102b62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Z_A_Pin|Encoder_Z_B_Pin;
 8102b64:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8102b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102b6a:	2302      	movs	r3, #2
 8102b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102b6e:	2300      	movs	r3, #0
 8102b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102b72:	2300      	movs	r3, #0
 8102b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8102b76:	2302      	movs	r3, #2
 8102b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102b7a:	f107 031c 	add.w	r3, r7, #28
 8102b7e:	4619      	mov	r1, r3
 8102b80:	4808      	ldr	r0, [pc, #32]	; (8102ba4 <HAL_TIM_Encoder_MspInit+0x144>)
 8102b82:	f001 fd43 	bl	810460c <HAL_GPIO_Init>
}
 8102b86:	bf00      	nop
 8102b88:	3730      	adds	r7, #48	; 0x30
 8102b8a:	46bd      	mov	sp, r7
 8102b8c:	bd80      	pop	{r7, pc}
 8102b8e:	bf00      	nop
 8102b90:	40000400 	.word	0x40000400
 8102b94:	58024400 	.word	0x58024400
 8102b98:	58020000 	.word	0x58020000
 8102b9c:	58020400 	.word	0x58020400
 8102ba0:	40000800 	.word	0x40000800
 8102ba4:	58020c00 	.word	0x58020c00

08102ba8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8102ba8:	b580      	push	{r7, lr}
 8102baa:	b086      	sub	sp, #24
 8102bac:	af00      	add	r7, sp, #0
 8102bae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8102bb0:	687b      	ldr	r3, [r7, #4]
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	4a23      	ldr	r2, [pc, #140]	; (8102c44 <HAL_TIM_Base_MspInit+0x9c>)
 8102bb6:	4293      	cmp	r3, r2
 8102bb8:	d117      	bne.n	8102bea <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8102bba:	4b23      	ldr	r3, [pc, #140]	; (8102c48 <HAL_TIM_Base_MspInit+0xa0>)
 8102bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102bc0:	4a21      	ldr	r2, [pc, #132]	; (8102c48 <HAL_TIM_Base_MspInit+0xa0>)
 8102bc2:	f043 0320 	orr.w	r3, r3, #32
 8102bc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102bca:	4b1f      	ldr	r3, [pc, #124]	; (8102c48 <HAL_TIM_Base_MspInit+0xa0>)
 8102bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102bd0:	f003 0320 	and.w	r3, r3, #32
 8102bd4:	617b      	str	r3, [r7, #20]
 8102bd6:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8102bd8:	2200      	movs	r2, #0
 8102bda:	2100      	movs	r1, #0
 8102bdc:	2037      	movs	r0, #55	; 0x37
 8102bde:	f001 fccc 	bl	810457a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8102be2:	2037      	movs	r0, #55	; 0x37
 8102be4:	f001 fce3 	bl	81045ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8102be8:	e028      	b.n	8102c3c <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM13)
 8102bea:	687b      	ldr	r3, [r7, #4]
 8102bec:	681b      	ldr	r3, [r3, #0]
 8102bee:	4a17      	ldr	r2, [pc, #92]	; (8102c4c <HAL_TIM_Base_MspInit+0xa4>)
 8102bf0:	4293      	cmp	r3, r2
 8102bf2:	d10f      	bne.n	8102c14 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8102bf4:	4b14      	ldr	r3, [pc, #80]	; (8102c48 <HAL_TIM_Base_MspInit+0xa0>)
 8102bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102bfa:	4a13      	ldr	r2, [pc, #76]	; (8102c48 <HAL_TIM_Base_MspInit+0xa0>)
 8102bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8102c00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102c04:	4b10      	ldr	r3, [pc, #64]	; (8102c48 <HAL_TIM_Base_MspInit+0xa0>)
 8102c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102c0e:	613b      	str	r3, [r7, #16]
 8102c10:	693b      	ldr	r3, [r7, #16]
}
 8102c12:	e013      	b.n	8102c3c <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM14)
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	4a0d      	ldr	r2, [pc, #52]	; (8102c50 <HAL_TIM_Base_MspInit+0xa8>)
 8102c1a:	4293      	cmp	r3, r2
 8102c1c:	d10e      	bne.n	8102c3c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8102c1e:	4b0a      	ldr	r3, [pc, #40]	; (8102c48 <HAL_TIM_Base_MspInit+0xa0>)
 8102c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c24:	4a08      	ldr	r2, [pc, #32]	; (8102c48 <HAL_TIM_Base_MspInit+0xa0>)
 8102c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102c2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102c2e:	4b06      	ldr	r3, [pc, #24]	; (8102c48 <HAL_TIM_Base_MspInit+0xa0>)
 8102c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102c38:	60fb      	str	r3, [r7, #12]
 8102c3a:	68fb      	ldr	r3, [r7, #12]
}
 8102c3c:	bf00      	nop
 8102c3e:	3718      	adds	r7, #24
 8102c40:	46bd      	mov	sp, r7
 8102c42:	bd80      	pop	{r7, pc}
 8102c44:	40001400 	.word	0x40001400
 8102c48:	58024400 	.word	0x58024400
 8102c4c:	40001c00 	.word	0x40001c00
 8102c50:	40002000 	.word	0x40002000

08102c54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8102c54:	b580      	push	{r7, lr}
 8102c56:	b08a      	sub	sp, #40	; 0x28
 8102c58:	af00      	add	r7, sp, #0
 8102c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102c5c:	f107 0314 	add.w	r3, r7, #20
 8102c60:	2200      	movs	r2, #0
 8102c62:	601a      	str	r2, [r3, #0]
 8102c64:	605a      	str	r2, [r3, #4]
 8102c66:	609a      	str	r2, [r3, #8]
 8102c68:	60da      	str	r2, [r3, #12]
 8102c6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8102c6c:	687b      	ldr	r3, [r7, #4]
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102c74:	d120      	bne.n	8102cb8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102c76:	4b38      	ldr	r3, [pc, #224]	; (8102d58 <HAL_TIM_MspPostInit+0x104>)
 8102c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102c7c:	4a36      	ldr	r2, [pc, #216]	; (8102d58 <HAL_TIM_MspPostInit+0x104>)
 8102c7e:	f043 0302 	orr.w	r3, r3, #2
 8102c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102c86:	4b34      	ldr	r3, [pc, #208]	; (8102d58 <HAL_TIM_MspPostInit+0x104>)
 8102c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102c8c:	f003 0302 	and.w	r3, r3, #2
 8102c90:	613b      	str	r3, [r7, #16]
 8102c92:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_X_Pin|PWM_Z_Pin;
 8102c94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8102c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102c9a:	2302      	movs	r3, #2
 8102c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102c9e:	2300      	movs	r3, #0
 8102ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102ca2:	2300      	movs	r3, #0
 8102ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8102ca6:	2301      	movs	r3, #1
 8102ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102caa:	f107 0314 	add.w	r3, r7, #20
 8102cae:	4619      	mov	r1, r3
 8102cb0:	482a      	ldr	r0, [pc, #168]	; (8102d5c <HAL_TIM_MspPostInit+0x108>)
 8102cb2:	f001 fcab 	bl	810460c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8102cb6:	e04a      	b.n	8102d4e <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8102cb8:	687b      	ldr	r3, [r7, #4]
 8102cba:	681b      	ldr	r3, [r3, #0]
 8102cbc:	4a28      	ldr	r2, [pc, #160]	; (8102d60 <HAL_TIM_MspPostInit+0x10c>)
 8102cbe:	4293      	cmp	r3, r2
 8102cc0:	d120      	bne.n	8102d04 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102cc2:	4b25      	ldr	r3, [pc, #148]	; (8102d58 <HAL_TIM_MspPostInit+0x104>)
 8102cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102cc8:	4a23      	ldr	r2, [pc, #140]	; (8102d58 <HAL_TIM_MspPostInit+0x104>)
 8102cca:	f043 0320 	orr.w	r3, r3, #32
 8102cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102cd2:	4b21      	ldr	r3, [pc, #132]	; (8102d58 <HAL_TIM_MspPostInit+0x104>)
 8102cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102cd8:	f003 0320 	and.w	r3, r3, #32
 8102cdc:	60fb      	str	r3, [r7, #12]
 8102cde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Servo_Rotate_Pin;
 8102ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8102ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ce6:	2302      	movs	r3, #2
 8102ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102cea:	2300      	movs	r3, #0
 8102cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102cee:	2300      	movs	r3, #0
 8102cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8102cf2:	2309      	movs	r3, #9
 8102cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Servo_Rotate_GPIO_Port, &GPIO_InitStruct);
 8102cf6:	f107 0314 	add.w	r3, r7, #20
 8102cfa:	4619      	mov	r1, r3
 8102cfc:	4819      	ldr	r0, [pc, #100]	; (8102d64 <HAL_TIM_MspPostInit+0x110>)
 8102cfe:	f001 fc85 	bl	810460c <HAL_GPIO_Init>
}
 8102d02:	e024      	b.n	8102d4e <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	681b      	ldr	r3, [r3, #0]
 8102d08:	4a17      	ldr	r2, [pc, #92]	; (8102d68 <HAL_TIM_MspPostInit+0x114>)
 8102d0a:	4293      	cmp	r3, r2
 8102d0c:	d11f      	bne.n	8102d4e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102d0e:	4b12      	ldr	r3, [pc, #72]	; (8102d58 <HAL_TIM_MspPostInit+0x104>)
 8102d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d14:	4a10      	ldr	r2, [pc, #64]	; (8102d58 <HAL_TIM_MspPostInit+0x104>)
 8102d16:	f043 0320 	orr.w	r3, r3, #32
 8102d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102d1e:	4b0e      	ldr	r3, [pc, #56]	; (8102d58 <HAL_TIM_MspPostInit+0x104>)
 8102d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d24:	f003 0320 	and.w	r3, r3, #32
 8102d28:	60bb      	str	r3, [r7, #8]
 8102d2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_Servo_Slider_Pin;
 8102d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8102d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102d32:	2302      	movs	r3, #2
 8102d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102d36:	2300      	movs	r3, #0
 8102d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102d3a:	2300      	movs	r3, #0
 8102d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8102d3e:	2309      	movs	r3, #9
 8102d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Servo_Slider_GPIO_Port, &GPIO_InitStruct);
 8102d42:	f107 0314 	add.w	r3, r7, #20
 8102d46:	4619      	mov	r1, r3
 8102d48:	4806      	ldr	r0, [pc, #24]	; (8102d64 <HAL_TIM_MspPostInit+0x110>)
 8102d4a:	f001 fc5f 	bl	810460c <HAL_GPIO_Init>
}
 8102d4e:	bf00      	nop
 8102d50:	3728      	adds	r7, #40	; 0x28
 8102d52:	46bd      	mov	sp, r7
 8102d54:	bd80      	pop	{r7, pc}
 8102d56:	bf00      	nop
 8102d58:	58024400 	.word	0x58024400
 8102d5c:	58020400 	.word	0x58020400
 8102d60:	40001c00 	.word	0x40001c00
 8102d64:	58021400 	.word	0x58021400
 8102d68:	40002000 	.word	0x40002000

08102d6c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
// Interrupt to check if a coin has been inserted
// Frequency is 50Hz ?
{
 8102d6c:	b580      	push	{r7, lr}
 8102d6e:	b082      	sub	sp, #8
 8102d70:	af00      	add	r7, sp, #0
 8102d72:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) // check for which timer the Interrupt is for
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	4a0e      	ldr	r2, [pc, #56]	; (8102db4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102d7a:	4293      	cmp	r3, r2
 8102d7c:	d116      	bne.n	8102dac <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		Sens_CoinEntry = coinInsertDetection();
 8102d7e:	f7fe f9d1 	bl	8101124 <coinInsertDetection>
 8102d82:	4603      	mov	r3, r0
 8102d84:	4a0c      	ldr	r2, [pc, #48]	; (8102db8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102d86:	6013      	str	r3, [r2, #0]

		if (Sens_CoinEntry > 0 && Sens_CoinEntry < 8)
 8102d88:	4b0b      	ldr	r3, [pc, #44]	; (8102db8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102d8a:	681b      	ldr	r3, [r3, #0]
 8102d8c:	2b00      	cmp	r3, #0
 8102d8e:	dd0d      	ble.n	8102dac <HAL_TIM_PeriodElapsedCallback+0x40>
 8102d90:	4b09      	ldr	r3, [pc, #36]	; (8102db8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102d92:	681b      	ldr	r3, [r3, #0]
 8102d94:	2b07      	cmp	r3, #7
 8102d96:	dc09      	bgt.n	8102dac <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			mem_Board[Sens_CoinEntry - 1]++;
 8102d98:	4b07      	ldr	r3, [pc, #28]	; (8102db8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102d9a:	681b      	ldr	r3, [r3, #0]
 8102d9c:	3b01      	subs	r3, #1
 8102d9e:	4a07      	ldr	r2, [pc, #28]	; (8102dbc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8102da0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8102da4:	3201      	adds	r2, #1
 8102da6:	4905      	ldr	r1, [pc, #20]	; (8102dbc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8102da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// make a flag for user msg
			// and check for it in some state
			// display msg, then clear it
		}
	}
}
 8102dac:	bf00      	nop
 8102dae:	3708      	adds	r7, #8
 8102db0:	46bd      	mov	sp, r7
 8102db2:	bd80      	pop	{r7, pc}
 8102db4:	40001400 	.word	0x40001400
 8102db8:	1000011c 	.word	0x1000011c
 8102dbc:	100000e0 	.word	0x100000e0

08102dc0 <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8102dc0:	b580      	push	{r7, lr}
 8102dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102dc4:	4b22      	ldr	r3, [pc, #136]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102dc6:	4a23      	ldr	r2, [pc, #140]	; (8102e54 <MX_USART3_UART_Init+0x94>)
 8102dc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102dca:	4b21      	ldr	r3, [pc, #132]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102dd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102dd2:	4b1f      	ldr	r3, [pc, #124]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102dd4:	2200      	movs	r2, #0
 8102dd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102dd8:	4b1d      	ldr	r3, [pc, #116]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102dda:	2200      	movs	r2, #0
 8102ddc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102dde:	4b1c      	ldr	r3, [pc, #112]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102de0:	2200      	movs	r2, #0
 8102de2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102de4:	4b1a      	ldr	r3, [pc, #104]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102de6:	220c      	movs	r2, #12
 8102de8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102dea:	4b19      	ldr	r3, [pc, #100]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102dec:	2200      	movs	r2, #0
 8102dee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102df0:	4b17      	ldr	r3, [pc, #92]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102df2:	2200      	movs	r2, #0
 8102df4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8102df6:	4b16      	ldr	r3, [pc, #88]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102df8:	2200      	movs	r2, #0
 8102dfa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102dfc:	4b14      	ldr	r3, [pc, #80]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102dfe:	2200      	movs	r2, #0
 8102e00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102e02:	4b13      	ldr	r3, [pc, #76]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102e04:	2200      	movs	r2, #0
 8102e06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102e08:	4811      	ldr	r0, [pc, #68]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102e0a:	f006 fa4b 	bl	81092a4 <HAL_UART_Init>
 8102e0e:	4603      	mov	r3, r0
 8102e10:	2b00      	cmp	r3, #0
 8102e12:	d001      	beq.n	8102e18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8102e14:	f7fe ffc0 	bl	8101d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102e18:	2100      	movs	r1, #0
 8102e1a:	480d      	ldr	r0, [pc, #52]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102e1c:	f007 fa7e 	bl	810a31c <HAL_UARTEx_SetTxFifoThreshold>
 8102e20:	4603      	mov	r3, r0
 8102e22:	2b00      	cmp	r3, #0
 8102e24:	d001      	beq.n	8102e2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8102e26:	f7fe ffb7 	bl	8101d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102e2a:	2100      	movs	r1, #0
 8102e2c:	4808      	ldr	r0, [pc, #32]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102e2e:	f007 fab3 	bl	810a398 <HAL_UARTEx_SetRxFifoThreshold>
 8102e32:	4603      	mov	r3, r0
 8102e34:	2b00      	cmp	r3, #0
 8102e36:	d001      	beq.n	8102e3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102e38:	f7fe ffae 	bl	8101d98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102e3c:	4804      	ldr	r0, [pc, #16]	; (8102e50 <MX_USART3_UART_Init+0x90>)
 8102e3e:	f007 fa34 	bl	810a2aa <HAL_UARTEx_DisableFifoMode>
 8102e42:	4603      	mov	r3, r0
 8102e44:	2b00      	cmp	r3, #0
 8102e46:	d001      	beq.n	8102e4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102e48:	f7fe ffa6 	bl	8101d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102e4c:	bf00      	nop
 8102e4e:	bd80      	pop	{r7, pc}
 8102e50:	1000039c 	.word	0x1000039c
 8102e54:	40004800 	.word	0x40004800

08102e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102e58:	b580      	push	{r7, lr}
 8102e5a:	b0bc      	sub	sp, #240	; 0xf0
 8102e5c:	af00      	add	r7, sp, #0
 8102e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102e60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102e64:	2200      	movs	r2, #0
 8102e66:	601a      	str	r2, [r3, #0]
 8102e68:	605a      	str	r2, [r3, #4]
 8102e6a:	609a      	str	r2, [r3, #8]
 8102e6c:	60da      	str	r2, [r3, #12]
 8102e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102e70:	f107 0320 	add.w	r3, r7, #32
 8102e74:	22bc      	movs	r2, #188	; 0xbc
 8102e76:	2100      	movs	r1, #0
 8102e78:	4618      	mov	r0, r3
 8102e7a:	f007 fb3d 	bl	810a4f8 <memset>
  if(uartHandle->Instance==UART5)
 8102e7e:	687b      	ldr	r3, [r7, #4]
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	4a5c      	ldr	r2, [pc, #368]	; (8102ff4 <HAL_UART_MspInit+0x19c>)
 8102e84:	4293      	cmp	r3, r2
 8102e86:	d168      	bne.n	8102f5a <HAL_UART_MspInit+0x102>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8102e88:	2302      	movs	r3, #2
 8102e8a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102e8c:	2300      	movs	r3, #0
 8102e8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102e92:	f107 0320 	add.w	r3, r7, #32
 8102e96:	4618      	mov	r0, r3
 8102e98:	f002 fe50 	bl	8105b3c <HAL_RCCEx_PeriphCLKConfig>
 8102e9c:	4603      	mov	r3, r0
 8102e9e:	2b00      	cmp	r3, #0
 8102ea0:	d001      	beq.n	8102ea6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8102ea2:	f7fe ff79 	bl	8101d98 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8102ea6:	4b54      	ldr	r3, [pc, #336]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102eac:	4a52      	ldr	r2, [pc, #328]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102eb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102eb6:	4b50      	ldr	r3, [pc, #320]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102ec0:	61fb      	str	r3, [r7, #28]
 8102ec2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102ec4:	4b4c      	ldr	r3, [pc, #304]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102eca:	4a4b      	ldr	r2, [pc, #300]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102ecc:	f043 0302 	orr.w	r3, r3, #2
 8102ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102ed4:	4b48      	ldr	r3, [pc, #288]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102eda:	f003 0302 	and.w	r3, r3, #2
 8102ede:	61bb      	str	r3, [r7, #24]
 8102ee0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8102ee2:	4b45      	ldr	r3, [pc, #276]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102ee8:	4a43      	ldr	r2, [pc, #268]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102eea:	f043 0304 	orr.w	r3, r3, #4
 8102eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102ef2:	4b41      	ldr	r3, [pc, #260]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102ef8:	f003 0304 	and.w	r3, r3, #4
 8102efc:	617b      	str	r3, [r7, #20]
 8102efe:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8102f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102f04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102f08:	2302      	movs	r3, #2
 8102f0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102f0e:	2300      	movs	r3, #0
 8102f10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102f14:	2300      	movs	r3, #0
 8102f16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8102f1a:	230e      	movs	r3, #14
 8102f1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102f20:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102f24:	4619      	mov	r1, r3
 8102f26:	4835      	ldr	r0, [pc, #212]	; (8102ffc <HAL_UART_MspInit+0x1a4>)
 8102f28:	f001 fb70 	bl	810460c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8102f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102f30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102f34:	2302      	movs	r3, #2
 8102f36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102f3a:	2300      	movs	r3, #0
 8102f3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102f40:	2300      	movs	r3, #0
 8102f42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8102f46:	2308      	movs	r3, #8
 8102f48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102f4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102f50:	4619      	mov	r1, r3
 8102f52:	482b      	ldr	r0, [pc, #172]	; (8103000 <HAL_UART_MspInit+0x1a8>)
 8102f54:	f001 fb5a 	bl	810460c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102f58:	e047      	b.n	8102fea <HAL_UART_MspInit+0x192>
  else if(uartHandle->Instance==USART3)
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	681b      	ldr	r3, [r3, #0]
 8102f5e:	4a29      	ldr	r2, [pc, #164]	; (8103004 <HAL_UART_MspInit+0x1ac>)
 8102f60:	4293      	cmp	r3, r2
 8102f62:	d142      	bne.n	8102fea <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102f64:	2302      	movs	r3, #2
 8102f66:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102f68:	2300      	movs	r3, #0
 8102f6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102f6e:	f107 0320 	add.w	r3, r7, #32
 8102f72:	4618      	mov	r0, r3
 8102f74:	f002 fde2 	bl	8105b3c <HAL_RCCEx_PeriphCLKConfig>
 8102f78:	4603      	mov	r3, r0
 8102f7a:	2b00      	cmp	r3, #0
 8102f7c:	d001      	beq.n	8102f82 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8102f7e:	f7fe ff0b 	bl	8101d98 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8102f82:	4b1d      	ldr	r3, [pc, #116]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102f88:	4a1b      	ldr	r2, [pc, #108]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102f8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102f8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102f92:	4b19      	ldr	r3, [pc, #100]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102f9c:	613b      	str	r3, [r7, #16]
 8102f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102fa0:	4b15      	ldr	r3, [pc, #84]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102fa6:	4a14      	ldr	r2, [pc, #80]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102fa8:	f043 0308 	orr.w	r3, r3, #8
 8102fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102fb0:	4b11      	ldr	r3, [pc, #68]	; (8102ff8 <HAL_UART_MspInit+0x1a0>)
 8102fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102fb6:	f003 0308 	and.w	r3, r3, #8
 8102fba:	60fb      	str	r3, [r7, #12]
 8102fbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102fbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102fc6:	2302      	movs	r3, #2
 8102fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102fcc:	2300      	movs	r3, #0
 8102fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102fd2:	2300      	movs	r3, #0
 8102fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102fd8:	2307      	movs	r3, #7
 8102fda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102fde:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102fe2:	4619      	mov	r1, r3
 8102fe4:	4808      	ldr	r0, [pc, #32]	; (8103008 <HAL_UART_MspInit+0x1b0>)
 8102fe6:	f001 fb11 	bl	810460c <HAL_GPIO_Init>
}
 8102fea:	bf00      	nop
 8102fec:	37f0      	adds	r7, #240	; 0xf0
 8102fee:	46bd      	mov	sp, r7
 8102ff0:	bd80      	pop	{r7, pc}
 8102ff2:	bf00      	nop
 8102ff4:	40005000 	.word	0x40005000
 8102ff8:	58024400 	.word	0x58024400
 8102ffc:	58020400 	.word	0x58020400
 8103000:	58020800 	.word	0x58020800
 8103004:	40004800 	.word	0x40004800
 8103008:	58020c00 	.word	0x58020c00

0810300c <ST_LINK_WRITE>:
  }
}

/* USER CODE BEGIN 1 */
void ST_LINK_WRITE(uint8_t * msg, uint8_t length)
{
 810300c:	b580      	push	{r7, lr}
 810300e:	b082      	sub	sp, #8
 8103010:	af00      	add	r7, sp, #0
 8103012:	6078      	str	r0, [r7, #4]
 8103014:	460b      	mov	r3, r1
 8103016:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3,msg,length,100);
 8103018:	78fb      	ldrb	r3, [r7, #3]
 810301a:	b29a      	uxth	r2, r3
 810301c:	2364      	movs	r3, #100	; 0x64
 810301e:	6879      	ldr	r1, [r7, #4]
 8103020:	4803      	ldr	r0, [pc, #12]	; (8103030 <ST_LINK_WRITE+0x24>)
 8103022:	f006 f98f 	bl	8109344 <HAL_UART_Transmit>
}
 8103026:	bf00      	nop
 8103028:	3708      	adds	r7, #8
 810302a:	46bd      	mov	sp, r7
 810302c:	bd80      	pop	{r7, pc}
 810302e:	bf00      	nop
 8103030:	1000039c 	.word	0x1000039c

08103034 <send_msg>:

void send_msg(uint8_t *msg_array)
/* Sends a message to the user */
{
 8103034:	b580      	push	{r7, lr}
 8103036:	b090      	sub	sp, #64	; 0x40
 8103038:	af00      	add	r7, sp, #0
 810303a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[50]; // TODO: I think all buffers could be a global one at
						// a later stage or local for the library
	sprintf(buffer,(uint8_t*) msg_array);
 810303c:	f107 030c 	add.w	r3, r7, #12
 8103040:	6879      	ldr	r1, [r7, #4]
 8103042:	4618      	mov	r0, r3
 8103044:	f007 fa60 	bl	810a508 <siprintf>
	ST_LINK_WRITE(buffer, sizeof(buffer));
 8103048:	f107 030c 	add.w	r3, r7, #12
 810304c:	2132      	movs	r1, #50	; 0x32
 810304e:	4618      	mov	r0, r3
 8103050:	f7ff ffdc 	bl	810300c <ST_LINK_WRITE>
	//HAL_Delay(10);
}
 8103054:	bf00      	nop
 8103056:	3740      	adds	r7, #64	; 0x40
 8103058:	46bd      	mov	sp, r7
 810305a:	bd80      	pop	{r7, pc}

0810305c <send_msg_data>:

void send_msg_data(uint8_t *msg_array, int data)
/* Sends a message with data to the user */
{
 810305c:	b580      	push	{r7, lr}
 810305e:	b08c      	sub	sp, #48	; 0x30
 8103060:	af00      	add	r7, sp, #0
 8103062:	6078      	str	r0, [r7, #4]
 8103064:	6039      	str	r1, [r7, #0]
	uint8_t buffer[40];
	sprintf(buffer, (uint8_t*)msg_array, data);
 8103066:	f107 0308 	add.w	r3, r7, #8
 810306a:	683a      	ldr	r2, [r7, #0]
 810306c:	6879      	ldr	r1, [r7, #4]
 810306e:	4618      	mov	r0, r3
 8103070:	f007 fa4a 	bl	810a508 <siprintf>
	ST_LINK_WRITE(buffer, sizeof(buffer));
 8103074:	f107 0308 	add.w	r3, r7, #8
 8103078:	2128      	movs	r1, #40	; 0x28
 810307a:	4618      	mov	r0, r3
 810307c:	f7ff ffc6 	bl	810300c <ST_LINK_WRITE>
}
 8103080:	bf00      	nop
 8103082:	3730      	adds	r7, #48	; 0x30
 8103084:	46bd      	mov	sp, r7
 8103086:	bd80      	pop	{r7, pc}

08103088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8103088:	f8df d034 	ldr.w	sp, [pc, #52]	; 81030c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810308c:	f7fd fd66 	bl	8100b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8103090:	480c      	ldr	r0, [pc, #48]	; (81030c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8103092:	490d      	ldr	r1, [pc, #52]	; (81030c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8103094:	4a0d      	ldr	r2, [pc, #52]	; (81030cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8103096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8103098:	e002      	b.n	81030a0 <LoopCopyDataInit>

0810309a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810309a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810309c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810309e:	3304      	adds	r3, #4

081030a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81030a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81030a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81030a4:	d3f9      	bcc.n	810309a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81030a6:	4a0a      	ldr	r2, [pc, #40]	; (81030d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81030a8:	4c0a      	ldr	r4, [pc, #40]	; (81030d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 81030aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 81030ac:	e001      	b.n	81030b2 <LoopFillZerobss>

081030ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81030ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81030b0:	3204      	adds	r2, #4

081030b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81030b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81030b4:	d3fb      	bcc.n	81030ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81030b6:	f007 f9fb 	bl	810a4b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81030ba:	f7fe fd9f 	bl	8101bfc <main>
  bx  lr
 81030be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81030c0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81030c4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81030c8:	10000084 	.word	0x10000084
  ldr r2, =_sidata
 81030cc:	0810b36c 	.word	0x0810b36c
  ldr r2, =_sbss
 81030d0:	10000088 	.word	0x10000088
  ldr r4, =_ebss
 81030d4:	10000444 	.word	0x10000444

081030d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81030d8:	e7fe      	b.n	81030d8 <ADC3_IRQHandler>
	...

081030dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81030dc:	b580      	push	{r7, lr}
 81030de:	b082      	sub	sp, #8
 81030e0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81030e2:	4b28      	ldr	r3, [pc, #160]	; (8103184 <HAL_Init+0xa8>)
 81030e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81030e8:	4a26      	ldr	r2, [pc, #152]	; (8103184 <HAL_Init+0xa8>)
 81030ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81030ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81030f2:	4b24      	ldr	r3, [pc, #144]	; (8103184 <HAL_Init+0xa8>)
 81030f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81030f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81030fc:	603b      	str	r3, [r7, #0]
 81030fe:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103100:	4b21      	ldr	r3, [pc, #132]	; (8103188 <HAL_Init+0xac>)
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8103108:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810310c:	4a1e      	ldr	r2, [pc, #120]	; (8103188 <HAL_Init+0xac>)
 810310e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8103112:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103114:	4b1c      	ldr	r3, [pc, #112]	; (8103188 <HAL_Init+0xac>)
 8103116:	681b      	ldr	r3, [r3, #0]
 8103118:	4a1b      	ldr	r2, [pc, #108]	; (8103188 <HAL_Init+0xac>)
 810311a:	f043 0301 	orr.w	r3, r3, #1
 810311e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103120:	2003      	movs	r0, #3
 8103122:	f001 fa1f 	bl	8104564 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8103126:	f002 fb31 	bl	810578c <HAL_RCC_GetSysClockFreq>
 810312a:	4602      	mov	r2, r0
 810312c:	4b15      	ldr	r3, [pc, #84]	; (8103184 <HAL_Init+0xa8>)
 810312e:	699b      	ldr	r3, [r3, #24]
 8103130:	0a1b      	lsrs	r3, r3, #8
 8103132:	f003 030f 	and.w	r3, r3, #15
 8103136:	4915      	ldr	r1, [pc, #84]	; (810318c <HAL_Init+0xb0>)
 8103138:	5ccb      	ldrb	r3, [r1, r3]
 810313a:	f003 031f 	and.w	r3, r3, #31
 810313e:	fa22 f303 	lsr.w	r3, r2, r3
 8103142:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103144:	4b0f      	ldr	r3, [pc, #60]	; (8103184 <HAL_Init+0xa8>)
 8103146:	699b      	ldr	r3, [r3, #24]
 8103148:	f003 030f 	and.w	r3, r3, #15
 810314c:	4a0f      	ldr	r2, [pc, #60]	; (810318c <HAL_Init+0xb0>)
 810314e:	5cd3      	ldrb	r3, [r2, r3]
 8103150:	f003 031f 	and.w	r3, r3, #31
 8103154:	687a      	ldr	r2, [r7, #4]
 8103156:	fa22 f303 	lsr.w	r3, r2, r3
 810315a:	4a0d      	ldr	r2, [pc, #52]	; (8103190 <HAL_Init+0xb4>)
 810315c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810315e:	4b0c      	ldr	r3, [pc, #48]	; (8103190 <HAL_Init+0xb4>)
 8103160:	681b      	ldr	r3, [r3, #0]
 8103162:	4a0c      	ldr	r2, [pc, #48]	; (8103194 <HAL_Init+0xb8>)
 8103164:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103166:	2000      	movs	r0, #0
 8103168:	f000 f816 	bl	8103198 <HAL_InitTick>
 810316c:	4603      	mov	r3, r0
 810316e:	2b00      	cmp	r3, #0
 8103170:	d001      	beq.n	8103176 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103172:	2301      	movs	r3, #1
 8103174:	e002      	b.n	810317c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8103176:	f7fe fe1d 	bl	8101db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810317a:	2300      	movs	r3, #0
}
 810317c:	4618      	mov	r0, r3
 810317e:	3708      	adds	r7, #8
 8103180:	46bd      	mov	sp, r7
 8103182:	bd80      	pop	{r7, pc}
 8103184:	58024400 	.word	0x58024400
 8103188:	40024400 	.word	0x40024400
 810318c:	0810b2f0 	.word	0x0810b2f0
 8103190:	10000004 	.word	0x10000004
 8103194:	10000000 	.word	0x10000000

08103198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103198:	b580      	push	{r7, lr}
 810319a:	b082      	sub	sp, #8
 810319c:	af00      	add	r7, sp, #0
 810319e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81031a0:	4b15      	ldr	r3, [pc, #84]	; (81031f8 <HAL_InitTick+0x60>)
 81031a2:	781b      	ldrb	r3, [r3, #0]
 81031a4:	2b00      	cmp	r3, #0
 81031a6:	d101      	bne.n	81031ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81031a8:	2301      	movs	r3, #1
 81031aa:	e021      	b.n	81031f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81031ac:	4b13      	ldr	r3, [pc, #76]	; (81031fc <HAL_InitTick+0x64>)
 81031ae:	681a      	ldr	r2, [r3, #0]
 81031b0:	4b11      	ldr	r3, [pc, #68]	; (81031f8 <HAL_InitTick+0x60>)
 81031b2:	781b      	ldrb	r3, [r3, #0]
 81031b4:	4619      	mov	r1, r3
 81031b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81031ba:	fbb3 f3f1 	udiv	r3, r3, r1
 81031be:	fbb2 f3f3 	udiv	r3, r2, r3
 81031c2:	4618      	mov	r0, r3
 81031c4:	f001 fa01 	bl	81045ca <HAL_SYSTICK_Config>
 81031c8:	4603      	mov	r3, r0
 81031ca:	2b00      	cmp	r3, #0
 81031cc:	d001      	beq.n	81031d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81031ce:	2301      	movs	r3, #1
 81031d0:	e00e      	b.n	81031f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	2b0f      	cmp	r3, #15
 81031d6:	d80a      	bhi.n	81031ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81031d8:	2200      	movs	r2, #0
 81031da:	6879      	ldr	r1, [r7, #4]
 81031dc:	f04f 30ff 	mov.w	r0, #4294967295
 81031e0:	f001 f9cb 	bl	810457a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81031e4:	4a06      	ldr	r2, [pc, #24]	; (8103200 <HAL_InitTick+0x68>)
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81031ea:	2300      	movs	r3, #0
 81031ec:	e000      	b.n	81031f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81031ee:	2301      	movs	r3, #1
}
 81031f0:	4618      	mov	r0, r3
 81031f2:	3708      	adds	r7, #8
 81031f4:	46bd      	mov	sp, r7
 81031f6:	bd80      	pop	{r7, pc}
 81031f8:	1000001c 	.word	0x1000001c
 81031fc:	10000000 	.word	0x10000000
 8103200:	10000018 	.word	0x10000018

08103204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103204:	b480      	push	{r7}
 8103206:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103208:	4b06      	ldr	r3, [pc, #24]	; (8103224 <HAL_IncTick+0x20>)
 810320a:	781b      	ldrb	r3, [r3, #0]
 810320c:	461a      	mov	r2, r3
 810320e:	4b06      	ldr	r3, [pc, #24]	; (8103228 <HAL_IncTick+0x24>)
 8103210:	681b      	ldr	r3, [r3, #0]
 8103212:	4413      	add	r3, r2
 8103214:	4a04      	ldr	r2, [pc, #16]	; (8103228 <HAL_IncTick+0x24>)
 8103216:	6013      	str	r3, [r2, #0]
}
 8103218:	bf00      	nop
 810321a:	46bd      	mov	sp, r7
 810321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103220:	4770      	bx	lr
 8103222:	bf00      	nop
 8103224:	1000001c 	.word	0x1000001c
 8103228:	1000042c 	.word	0x1000042c

0810322c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810322c:	b480      	push	{r7}
 810322e:	af00      	add	r7, sp, #0
  return uwTick;
 8103230:	4b03      	ldr	r3, [pc, #12]	; (8103240 <HAL_GetTick+0x14>)
 8103232:	681b      	ldr	r3, [r3, #0]
}
 8103234:	4618      	mov	r0, r3
 8103236:	46bd      	mov	sp, r7
 8103238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810323c:	4770      	bx	lr
 810323e:	bf00      	nop
 8103240:	1000042c 	.word	0x1000042c

08103244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103244:	b580      	push	{r7, lr}
 8103246:	b084      	sub	sp, #16
 8103248:	af00      	add	r7, sp, #0
 810324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810324c:	f7ff ffee 	bl	810322c <HAL_GetTick>
 8103250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103256:	68fb      	ldr	r3, [r7, #12]
 8103258:	f1b3 3fff 	cmp.w	r3, #4294967295
 810325c:	d005      	beq.n	810326a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810325e:	4b0a      	ldr	r3, [pc, #40]	; (8103288 <HAL_Delay+0x44>)
 8103260:	781b      	ldrb	r3, [r3, #0]
 8103262:	461a      	mov	r2, r3
 8103264:	68fb      	ldr	r3, [r7, #12]
 8103266:	4413      	add	r3, r2
 8103268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810326a:	bf00      	nop
 810326c:	f7ff ffde 	bl	810322c <HAL_GetTick>
 8103270:	4602      	mov	r2, r0
 8103272:	68bb      	ldr	r3, [r7, #8]
 8103274:	1ad3      	subs	r3, r2, r3
 8103276:	68fa      	ldr	r2, [r7, #12]
 8103278:	429a      	cmp	r2, r3
 810327a:	d8f7      	bhi.n	810326c <HAL_Delay+0x28>
  {
  }
}
 810327c:	bf00      	nop
 810327e:	bf00      	nop
 8103280:	3710      	adds	r7, #16
 8103282:	46bd      	mov	sp, r7
 8103284:	bd80      	pop	{r7, pc}
 8103286:	bf00      	nop
 8103288:	1000001c 	.word	0x1000001c

0810328c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 810328c:	b480      	push	{r7}
 810328e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8103290:	4b03      	ldr	r3, [pc, #12]	; (81032a0 <HAL_GetREVID+0x14>)
 8103292:	681b      	ldr	r3, [r3, #0]
 8103294:	0c1b      	lsrs	r3, r3, #16
}
 8103296:	4618      	mov	r0, r3
 8103298:	46bd      	mov	sp, r7
 810329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810329e:	4770      	bx	lr
 81032a0:	5c001000 	.word	0x5c001000

081032a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81032a4:	b480      	push	{r7}
 81032a6:	b083      	sub	sp, #12
 81032a8:	af00      	add	r7, sp, #0
 81032aa:	6078      	str	r0, [r7, #4]
 81032ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	689b      	ldr	r3, [r3, #8]
 81032b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81032b6:	683b      	ldr	r3, [r7, #0]
 81032b8:	431a      	orrs	r2, r3
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	609a      	str	r2, [r3, #8]
}
 81032be:	bf00      	nop
 81032c0:	370c      	adds	r7, #12
 81032c2:	46bd      	mov	sp, r7
 81032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032c8:	4770      	bx	lr

081032ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81032ca:	b480      	push	{r7}
 81032cc:	b083      	sub	sp, #12
 81032ce:	af00      	add	r7, sp, #0
 81032d0:	6078      	str	r0, [r7, #4]
 81032d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81032d4:	687b      	ldr	r3, [r7, #4]
 81032d6:	689b      	ldr	r3, [r3, #8]
 81032d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 81032dc:	683b      	ldr	r3, [r7, #0]
 81032de:	431a      	orrs	r2, r3
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	609a      	str	r2, [r3, #8]
}
 81032e4:	bf00      	nop
 81032e6:	370c      	adds	r7, #12
 81032e8:	46bd      	mov	sp, r7
 81032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032ee:	4770      	bx	lr

081032f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81032f0:	b480      	push	{r7}
 81032f2:	b083      	sub	sp, #12
 81032f4:	af00      	add	r7, sp, #0
 81032f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	689b      	ldr	r3, [r3, #8]
 81032fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8103300:	4618      	mov	r0, r3
 8103302:	370c      	adds	r7, #12
 8103304:	46bd      	mov	sp, r7
 8103306:	f85d 7b04 	ldr.w	r7, [sp], #4
 810330a:	4770      	bx	lr

0810330c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 810330c:	b480      	push	{r7}
 810330e:	b087      	sub	sp, #28
 8103310:	af00      	add	r7, sp, #0
 8103312:	60f8      	str	r0, [r7, #12]
 8103314:	60b9      	str	r1, [r7, #8]
 8103316:	607a      	str	r2, [r7, #4]
 8103318:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810331a:	68fb      	ldr	r3, [r7, #12]
 810331c:	3360      	adds	r3, #96	; 0x60
 810331e:	461a      	mov	r2, r3
 8103320:	68bb      	ldr	r3, [r7, #8]
 8103322:	009b      	lsls	r3, r3, #2
 8103324:	4413      	add	r3, r2
 8103326:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8103328:	697b      	ldr	r3, [r7, #20]
 810332a:	681b      	ldr	r3, [r3, #0]
 810332c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8103336:	683b      	ldr	r3, [r7, #0]
 8103338:	430b      	orrs	r3, r1
 810333a:	431a      	orrs	r2, r3
 810333c:	697b      	ldr	r3, [r7, #20]
 810333e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8103340:	bf00      	nop
 8103342:	371c      	adds	r7, #28
 8103344:	46bd      	mov	sp, r7
 8103346:	f85d 7b04 	ldr.w	r7, [sp], #4
 810334a:	4770      	bx	lr

0810334c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 810334c:	b480      	push	{r7}
 810334e:	b085      	sub	sp, #20
 8103350:	af00      	add	r7, sp, #0
 8103352:	60f8      	str	r0, [r7, #12]
 8103354:	60b9      	str	r1, [r7, #8]
 8103356:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8103358:	68fb      	ldr	r3, [r7, #12]
 810335a:	691b      	ldr	r3, [r3, #16]
 810335c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8103360:	68bb      	ldr	r3, [r7, #8]
 8103362:	f003 031f 	and.w	r3, r3, #31
 8103366:	6879      	ldr	r1, [r7, #4]
 8103368:	fa01 f303 	lsl.w	r3, r1, r3
 810336c:	431a      	orrs	r2, r3
 810336e:	68fb      	ldr	r3, [r7, #12]
 8103370:	611a      	str	r2, [r3, #16]
}
 8103372:	bf00      	nop
 8103374:	3714      	adds	r7, #20
 8103376:	46bd      	mov	sp, r7
 8103378:	f85d 7b04 	ldr.w	r7, [sp], #4
 810337c:	4770      	bx	lr

0810337e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 810337e:	b480      	push	{r7}
 8103380:	b087      	sub	sp, #28
 8103382:	af00      	add	r7, sp, #0
 8103384:	60f8      	str	r0, [r7, #12]
 8103386:	60b9      	str	r1, [r7, #8]
 8103388:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810338a:	68fb      	ldr	r3, [r7, #12]
 810338c:	3360      	adds	r3, #96	; 0x60
 810338e:	461a      	mov	r2, r3
 8103390:	68bb      	ldr	r3, [r7, #8]
 8103392:	009b      	lsls	r3, r3, #2
 8103394:	4413      	add	r3, r2
 8103396:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8103398:	697b      	ldr	r3, [r7, #20]
 810339a:	681b      	ldr	r3, [r3, #0]
 810339c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	431a      	orrs	r2, r3
 81033a4:	697b      	ldr	r3, [r7, #20]
 81033a6:	601a      	str	r2, [r3, #0]
  }
}
 81033a8:	bf00      	nop
 81033aa:	371c      	adds	r7, #28
 81033ac:	46bd      	mov	sp, r7
 81033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033b2:	4770      	bx	lr

081033b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81033b4:	b480      	push	{r7}
 81033b6:	b087      	sub	sp, #28
 81033b8:	af00      	add	r7, sp, #0
 81033ba:	60f8      	str	r0, [r7, #12]
 81033bc:	60b9      	str	r1, [r7, #8]
 81033be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81033c0:	68fb      	ldr	r3, [r7, #12]
 81033c2:	3330      	adds	r3, #48	; 0x30
 81033c4:	461a      	mov	r2, r3
 81033c6:	68bb      	ldr	r3, [r7, #8]
 81033c8:	0a1b      	lsrs	r3, r3, #8
 81033ca:	009b      	lsls	r3, r3, #2
 81033cc:	f003 030c 	and.w	r3, r3, #12
 81033d0:	4413      	add	r3, r2
 81033d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81033d4:	697b      	ldr	r3, [r7, #20]
 81033d6:	681a      	ldr	r2, [r3, #0]
 81033d8:	68bb      	ldr	r3, [r7, #8]
 81033da:	f003 031f 	and.w	r3, r3, #31
 81033de:	211f      	movs	r1, #31
 81033e0:	fa01 f303 	lsl.w	r3, r1, r3
 81033e4:	43db      	mvns	r3, r3
 81033e6:	401a      	ands	r2, r3
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	0e9b      	lsrs	r3, r3, #26
 81033ec:	f003 011f 	and.w	r1, r3, #31
 81033f0:	68bb      	ldr	r3, [r7, #8]
 81033f2:	f003 031f 	and.w	r3, r3, #31
 81033f6:	fa01 f303 	lsl.w	r3, r1, r3
 81033fa:	431a      	orrs	r2, r3
 81033fc:	697b      	ldr	r3, [r7, #20]
 81033fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8103400:	bf00      	nop
 8103402:	371c      	adds	r7, #28
 8103404:	46bd      	mov	sp, r7
 8103406:	f85d 7b04 	ldr.w	r7, [sp], #4
 810340a:	4770      	bx	lr

0810340c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 810340c:	b480      	push	{r7}
 810340e:	b087      	sub	sp, #28
 8103410:	af00      	add	r7, sp, #0
 8103412:	60f8      	str	r0, [r7, #12]
 8103414:	60b9      	str	r1, [r7, #8]
 8103416:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8103418:	68fb      	ldr	r3, [r7, #12]
 810341a:	3314      	adds	r3, #20
 810341c:	461a      	mov	r2, r3
 810341e:	68bb      	ldr	r3, [r7, #8]
 8103420:	0e5b      	lsrs	r3, r3, #25
 8103422:	009b      	lsls	r3, r3, #2
 8103424:	f003 0304 	and.w	r3, r3, #4
 8103428:	4413      	add	r3, r2
 810342a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810342c:	697b      	ldr	r3, [r7, #20]
 810342e:	681a      	ldr	r2, [r3, #0]
 8103430:	68bb      	ldr	r3, [r7, #8]
 8103432:	0d1b      	lsrs	r3, r3, #20
 8103434:	f003 031f 	and.w	r3, r3, #31
 8103438:	2107      	movs	r1, #7
 810343a:	fa01 f303 	lsl.w	r3, r1, r3
 810343e:	43db      	mvns	r3, r3
 8103440:	401a      	ands	r2, r3
 8103442:	68bb      	ldr	r3, [r7, #8]
 8103444:	0d1b      	lsrs	r3, r3, #20
 8103446:	f003 031f 	and.w	r3, r3, #31
 810344a:	6879      	ldr	r1, [r7, #4]
 810344c:	fa01 f303 	lsl.w	r3, r1, r3
 8103450:	431a      	orrs	r2, r3
 8103452:	697b      	ldr	r3, [r7, #20]
 8103454:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8103456:	bf00      	nop
 8103458:	371c      	adds	r7, #28
 810345a:	46bd      	mov	sp, r7
 810345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103460:	4770      	bx	lr
	...

08103464 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8103464:	b480      	push	{r7}
 8103466:	b085      	sub	sp, #20
 8103468:	af00      	add	r7, sp, #0
 810346a:	60f8      	str	r0, [r7, #12]
 810346c:	60b9      	str	r1, [r7, #8]
 810346e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8103470:	68fb      	ldr	r3, [r7, #12]
 8103472:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8103476:	68bb      	ldr	r3, [r7, #8]
 8103478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810347c:	43db      	mvns	r3, r3
 810347e:	401a      	ands	r2, r3
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	f003 0318 	and.w	r3, r3, #24
 8103486:	4908      	ldr	r1, [pc, #32]	; (81034a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8103488:	40d9      	lsrs	r1, r3
 810348a:	68bb      	ldr	r3, [r7, #8]
 810348c:	400b      	ands	r3, r1
 810348e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103492:	431a      	orrs	r2, r3
 8103494:	68fb      	ldr	r3, [r7, #12]
 8103496:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 810349a:	bf00      	nop
 810349c:	3714      	adds	r7, #20
 810349e:	46bd      	mov	sp, r7
 81034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034a4:	4770      	bx	lr
 81034a6:	bf00      	nop
 81034a8:	000fffff 	.word	0x000fffff

081034ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81034ac:	b480      	push	{r7}
 81034ae:	b083      	sub	sp, #12
 81034b0:	af00      	add	r7, sp, #0
 81034b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	689b      	ldr	r3, [r3, #8]
 81034b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 81034bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81034c0:	687a      	ldr	r2, [r7, #4]
 81034c2:	6093      	str	r3, [r2, #8]
}
 81034c4:	bf00      	nop
 81034c6:	370c      	adds	r7, #12
 81034c8:	46bd      	mov	sp, r7
 81034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ce:	4770      	bx	lr

081034d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 81034d0:	b480      	push	{r7}
 81034d2:	b083      	sub	sp, #12
 81034d4:	af00      	add	r7, sp, #0
 81034d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	689b      	ldr	r3, [r3, #8]
 81034dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81034e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81034e4:	d101      	bne.n	81034ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 81034e6:	2301      	movs	r3, #1
 81034e8:	e000      	b.n	81034ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 81034ea:	2300      	movs	r3, #0
}
 81034ec:	4618      	mov	r0, r3
 81034ee:	370c      	adds	r7, #12
 81034f0:	46bd      	mov	sp, r7
 81034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034f6:	4770      	bx	lr

081034f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 81034f8:	b480      	push	{r7}
 81034fa:	b083      	sub	sp, #12
 81034fc:	af00      	add	r7, sp, #0
 81034fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	689b      	ldr	r3, [r3, #8]
 8103504:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8103508:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810350c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8103514:	bf00      	nop
 8103516:	370c      	adds	r7, #12
 8103518:	46bd      	mov	sp, r7
 810351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810351e:	4770      	bx	lr

08103520 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8103520:	b480      	push	{r7}
 8103522:	b083      	sub	sp, #12
 8103524:	af00      	add	r7, sp, #0
 8103526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	689b      	ldr	r3, [r3, #8]
 810352c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103534:	d101      	bne.n	810353a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8103536:	2301      	movs	r3, #1
 8103538:	e000      	b.n	810353c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 810353a:	2300      	movs	r3, #0
}
 810353c:	4618      	mov	r0, r3
 810353e:	370c      	adds	r7, #12
 8103540:	46bd      	mov	sp, r7
 8103542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103546:	4770      	bx	lr

08103548 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8103548:	b480      	push	{r7}
 810354a:	b083      	sub	sp, #12
 810354c:	af00      	add	r7, sp, #0
 810354e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	689b      	ldr	r3, [r3, #8]
 8103554:	f003 0301 	and.w	r3, r3, #1
 8103558:	2b01      	cmp	r3, #1
 810355a:	d101      	bne.n	8103560 <LL_ADC_IsEnabled+0x18>
 810355c:	2301      	movs	r3, #1
 810355e:	e000      	b.n	8103562 <LL_ADC_IsEnabled+0x1a>
 8103560:	2300      	movs	r3, #0
}
 8103562:	4618      	mov	r0, r3
 8103564:	370c      	adds	r7, #12
 8103566:	46bd      	mov	sp, r7
 8103568:	f85d 7b04 	ldr.w	r7, [sp], #4
 810356c:	4770      	bx	lr

0810356e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810356e:	b480      	push	{r7}
 8103570:	b083      	sub	sp, #12
 8103572:	af00      	add	r7, sp, #0
 8103574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	689b      	ldr	r3, [r3, #8]
 810357a:	f003 0304 	and.w	r3, r3, #4
 810357e:	2b04      	cmp	r3, #4
 8103580:	d101      	bne.n	8103586 <LL_ADC_REG_IsConversionOngoing+0x18>
 8103582:	2301      	movs	r3, #1
 8103584:	e000      	b.n	8103588 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103586:	2300      	movs	r3, #0
}
 8103588:	4618      	mov	r0, r3
 810358a:	370c      	adds	r7, #12
 810358c:	46bd      	mov	sp, r7
 810358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103592:	4770      	bx	lr

08103594 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103594:	b480      	push	{r7}
 8103596:	b083      	sub	sp, #12
 8103598:	af00      	add	r7, sp, #0
 810359a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 810359c:	687b      	ldr	r3, [r7, #4]
 810359e:	689b      	ldr	r3, [r3, #8]
 81035a0:	f003 0308 	and.w	r3, r3, #8
 81035a4:	2b08      	cmp	r3, #8
 81035a6:	d101      	bne.n	81035ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 81035a8:	2301      	movs	r3, #1
 81035aa:	e000      	b.n	81035ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81035ac:	2300      	movs	r3, #0
}
 81035ae:	4618      	mov	r0, r3
 81035b0:	370c      	adds	r7, #12
 81035b2:	46bd      	mov	sp, r7
 81035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035b8:	4770      	bx	lr
	...

081035bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81035bc:	b590      	push	{r4, r7, lr}
 81035be:	b089      	sub	sp, #36	; 0x24
 81035c0:	af00      	add	r7, sp, #0
 81035c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81035c4:	2300      	movs	r3, #0
 81035c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81035c8:	2300      	movs	r3, #0
 81035ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	2b00      	cmp	r3, #0
 81035d0:	d101      	bne.n	81035d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81035d2:	2301      	movs	r3, #1
 81035d4:	e18f      	b.n	81038f6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	68db      	ldr	r3, [r3, #12]
 81035da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035e0:	2b00      	cmp	r3, #0
 81035e2:	d109      	bne.n	81035f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81035e4:	6878      	ldr	r0, [r7, #4]
 81035e6:	f7fe fcb7 	bl	8101f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81035ea:	687b      	ldr	r3, [r7, #4]
 81035ec:	2200      	movs	r2, #0
 81035ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81035f0:	687b      	ldr	r3, [r7, #4]
 81035f2:	2200      	movs	r2, #0
 81035f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	4618      	mov	r0, r3
 81035fe:	f7ff ff67 	bl	81034d0 <LL_ADC_IsDeepPowerDownEnabled>
 8103602:	4603      	mov	r3, r0
 8103604:	2b00      	cmp	r3, #0
 8103606:	d004      	beq.n	8103612 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	681b      	ldr	r3, [r3, #0]
 810360c:	4618      	mov	r0, r3
 810360e:	f7ff ff4d 	bl	81034ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	681b      	ldr	r3, [r3, #0]
 8103616:	4618      	mov	r0, r3
 8103618:	f7ff ff82 	bl	8103520 <LL_ADC_IsInternalRegulatorEnabled>
 810361c:	4603      	mov	r3, r0
 810361e:	2b00      	cmp	r3, #0
 8103620:	d114      	bne.n	810364c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	681b      	ldr	r3, [r3, #0]
 8103626:	4618      	mov	r0, r3
 8103628:	f7ff ff66 	bl	81034f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810362c:	4b88      	ldr	r3, [pc, #544]	; (8103850 <HAL_ADC_Init+0x294>)
 810362e:	681b      	ldr	r3, [r3, #0]
 8103630:	099b      	lsrs	r3, r3, #6
 8103632:	4a88      	ldr	r2, [pc, #544]	; (8103854 <HAL_ADC_Init+0x298>)
 8103634:	fba2 2303 	umull	r2, r3, r2, r3
 8103638:	099b      	lsrs	r3, r3, #6
 810363a:	3301      	adds	r3, #1
 810363c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810363e:	e002      	b.n	8103646 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8103640:	68bb      	ldr	r3, [r7, #8]
 8103642:	3b01      	subs	r3, #1
 8103644:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103646:	68bb      	ldr	r3, [r7, #8]
 8103648:	2b00      	cmp	r3, #0
 810364a:	d1f9      	bne.n	8103640 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	681b      	ldr	r3, [r3, #0]
 8103650:	4618      	mov	r0, r3
 8103652:	f7ff ff65 	bl	8103520 <LL_ADC_IsInternalRegulatorEnabled>
 8103656:	4603      	mov	r3, r0
 8103658:	2b00      	cmp	r3, #0
 810365a:	d10d      	bne.n	8103678 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103660:	f043 0210 	orr.w	r2, r3, #16
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810366c:	f043 0201 	orr.w	r2, r3, #1
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8103674:	2301      	movs	r3, #1
 8103676:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	681b      	ldr	r3, [r3, #0]
 810367c:	4618      	mov	r0, r3
 810367e:	f7ff ff76 	bl	810356e <LL_ADC_REG_IsConversionOngoing>
 8103682:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103688:	f003 0310 	and.w	r3, r3, #16
 810368c:	2b00      	cmp	r3, #0
 810368e:	f040 8129 	bne.w	81038e4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8103692:	697b      	ldr	r3, [r7, #20]
 8103694:	2b00      	cmp	r3, #0
 8103696:	f040 8125 	bne.w	81038e4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 810369a:	687b      	ldr	r3, [r7, #4]
 810369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810369e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 81036a2:	f043 0202 	orr.w	r2, r3, #2
 81036a6:	687b      	ldr	r3, [r7, #4]
 81036a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81036aa:	687b      	ldr	r3, [r7, #4]
 81036ac:	681b      	ldr	r3, [r3, #0]
 81036ae:	4618      	mov	r0, r3
 81036b0:	f7ff ff4a 	bl	8103548 <LL_ADC_IsEnabled>
 81036b4:	4603      	mov	r3, r0
 81036b6:	2b00      	cmp	r3, #0
 81036b8:	d136      	bne.n	8103728 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81036ba:	687b      	ldr	r3, [r7, #4]
 81036bc:	681b      	ldr	r3, [r3, #0]
 81036be:	4a66      	ldr	r2, [pc, #408]	; (8103858 <HAL_ADC_Init+0x29c>)
 81036c0:	4293      	cmp	r3, r2
 81036c2:	d004      	beq.n	81036ce <HAL_ADC_Init+0x112>
 81036c4:	687b      	ldr	r3, [r7, #4]
 81036c6:	681b      	ldr	r3, [r3, #0]
 81036c8:	4a64      	ldr	r2, [pc, #400]	; (810385c <HAL_ADC_Init+0x2a0>)
 81036ca:	4293      	cmp	r3, r2
 81036cc:	d10e      	bne.n	81036ec <HAL_ADC_Init+0x130>
 81036ce:	4862      	ldr	r0, [pc, #392]	; (8103858 <HAL_ADC_Init+0x29c>)
 81036d0:	f7ff ff3a 	bl	8103548 <LL_ADC_IsEnabled>
 81036d4:	4604      	mov	r4, r0
 81036d6:	4861      	ldr	r0, [pc, #388]	; (810385c <HAL_ADC_Init+0x2a0>)
 81036d8:	f7ff ff36 	bl	8103548 <LL_ADC_IsEnabled>
 81036dc:	4603      	mov	r3, r0
 81036de:	4323      	orrs	r3, r4
 81036e0:	2b00      	cmp	r3, #0
 81036e2:	bf0c      	ite	eq
 81036e4:	2301      	moveq	r3, #1
 81036e6:	2300      	movne	r3, #0
 81036e8:	b2db      	uxtb	r3, r3
 81036ea:	e008      	b.n	81036fe <HAL_ADC_Init+0x142>
 81036ec:	485c      	ldr	r0, [pc, #368]	; (8103860 <HAL_ADC_Init+0x2a4>)
 81036ee:	f7ff ff2b 	bl	8103548 <LL_ADC_IsEnabled>
 81036f2:	4603      	mov	r3, r0
 81036f4:	2b00      	cmp	r3, #0
 81036f6:	bf0c      	ite	eq
 81036f8:	2301      	moveq	r3, #1
 81036fa:	2300      	movne	r3, #0
 81036fc:	b2db      	uxtb	r3, r3
 81036fe:	2b00      	cmp	r3, #0
 8103700:	d012      	beq.n	8103728 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8103702:	687b      	ldr	r3, [r7, #4]
 8103704:	681b      	ldr	r3, [r3, #0]
 8103706:	4a54      	ldr	r2, [pc, #336]	; (8103858 <HAL_ADC_Init+0x29c>)
 8103708:	4293      	cmp	r3, r2
 810370a:	d004      	beq.n	8103716 <HAL_ADC_Init+0x15a>
 810370c:	687b      	ldr	r3, [r7, #4]
 810370e:	681b      	ldr	r3, [r3, #0]
 8103710:	4a52      	ldr	r2, [pc, #328]	; (810385c <HAL_ADC_Init+0x2a0>)
 8103712:	4293      	cmp	r3, r2
 8103714:	d101      	bne.n	810371a <HAL_ADC_Init+0x15e>
 8103716:	4a53      	ldr	r2, [pc, #332]	; (8103864 <HAL_ADC_Init+0x2a8>)
 8103718:	e000      	b.n	810371c <HAL_ADC_Init+0x160>
 810371a:	4a53      	ldr	r2, [pc, #332]	; (8103868 <HAL_ADC_Init+0x2ac>)
 810371c:	687b      	ldr	r3, [r7, #4]
 810371e:	685b      	ldr	r3, [r3, #4]
 8103720:	4619      	mov	r1, r3
 8103722:	4610      	mov	r0, r2
 8103724:	f7ff fdbe 	bl	81032a4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8103728:	f7ff fdb0 	bl	810328c <HAL_GetREVID>
 810372c:	4603      	mov	r3, r0
 810372e:	f241 0203 	movw	r2, #4099	; 0x1003
 8103732:	4293      	cmp	r3, r2
 8103734:	d914      	bls.n	8103760 <HAL_ADC_Init+0x1a4>
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	689b      	ldr	r3, [r3, #8]
 810373a:	2b10      	cmp	r3, #16
 810373c:	d110      	bne.n	8103760 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	7d5b      	ldrb	r3, [r3, #21]
 8103742:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103748:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810374a:	687b      	ldr	r3, [r7, #4]
 810374c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810374e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103750:	687b      	ldr	r3, [r7, #4]
 8103752:	7f1b      	ldrb	r3, [r3, #28]
 8103754:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103756:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103758:	f043 030c 	orr.w	r3, r3, #12
 810375c:	61bb      	str	r3, [r7, #24]
 810375e:	e00d      	b.n	810377c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103760:	687b      	ldr	r3, [r7, #4]
 8103762:	7d5b      	ldrb	r3, [r3, #21]
 8103764:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103766:	687b      	ldr	r3, [r7, #4]
 8103768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810376a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 810376c:	687b      	ldr	r3, [r7, #4]
 810376e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103770:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103772:	687b      	ldr	r3, [r7, #4]
 8103774:	7f1b      	ldrb	r3, [r3, #28]
 8103776:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103778:	4313      	orrs	r3, r2
 810377a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 810377c:	687b      	ldr	r3, [r7, #4]
 810377e:	7f1b      	ldrb	r3, [r3, #28]
 8103780:	2b01      	cmp	r3, #1
 8103782:	d106      	bne.n	8103792 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	6a1b      	ldr	r3, [r3, #32]
 8103788:	3b01      	subs	r3, #1
 810378a:	045b      	lsls	r3, r3, #17
 810378c:	69ba      	ldr	r2, [r7, #24]
 810378e:	4313      	orrs	r3, r2
 8103790:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8103792:	687b      	ldr	r3, [r7, #4]
 8103794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103796:	2b00      	cmp	r3, #0
 8103798:	d009      	beq.n	81037ae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810379a:	687b      	ldr	r3, [r7, #4]
 810379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810379e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81037a6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81037a8:	69ba      	ldr	r2, [r7, #24]
 81037aa:	4313      	orrs	r3, r2
 81037ac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	68da      	ldr	r2, [r3, #12]
 81037b4:	4b2d      	ldr	r3, [pc, #180]	; (810386c <HAL_ADC_Init+0x2b0>)
 81037b6:	4013      	ands	r3, r2
 81037b8:	687a      	ldr	r2, [r7, #4]
 81037ba:	6812      	ldr	r2, [r2, #0]
 81037bc:	69b9      	ldr	r1, [r7, #24]
 81037be:	430b      	orrs	r3, r1
 81037c0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	681b      	ldr	r3, [r3, #0]
 81037c6:	4618      	mov	r0, r3
 81037c8:	f7ff fed1 	bl	810356e <LL_ADC_REG_IsConversionOngoing>
 81037cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	681b      	ldr	r3, [r3, #0]
 81037d2:	4618      	mov	r0, r3
 81037d4:	f7ff fede 	bl	8103594 <LL_ADC_INJ_IsConversionOngoing>
 81037d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81037da:	693b      	ldr	r3, [r7, #16]
 81037dc:	2b00      	cmp	r3, #0
 81037de:	d15f      	bne.n	81038a0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81037e0:	68fb      	ldr	r3, [r7, #12]
 81037e2:	2b00      	cmp	r3, #0
 81037e4:	d15c      	bne.n	81038a0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	7d1b      	ldrb	r3, [r3, #20]
 81037ea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 81037f0:	4313      	orrs	r3, r2
 81037f2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	68db      	ldr	r3, [r3, #12]
 81037fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81037fe:	f023 0303 	bic.w	r3, r3, #3
 8103802:	687a      	ldr	r2, [r7, #4]
 8103804:	6812      	ldr	r2, [r2, #0]
 8103806:	69b9      	ldr	r1, [r7, #24]
 8103808:	430b      	orrs	r3, r1
 810380a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 810380c:	687b      	ldr	r3, [r7, #4]
 810380e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8103812:	2b01      	cmp	r3, #1
 8103814:	d12e      	bne.n	8103874 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810381a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	681b      	ldr	r3, [r3, #0]
 8103820:	691a      	ldr	r2, [r3, #16]
 8103822:	4b13      	ldr	r3, [pc, #76]	; (8103870 <HAL_ADC_Init+0x2b4>)
 8103824:	4013      	ands	r3, r2
 8103826:	687a      	ldr	r2, [r7, #4]
 8103828:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 810382a:	3a01      	subs	r2, #1
 810382c:	0411      	lsls	r1, r2, #16
 810382e:	687a      	ldr	r2, [r7, #4]
 8103830:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8103832:	4311      	orrs	r1, r2
 8103834:	687a      	ldr	r2, [r7, #4]
 8103836:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8103838:	4311      	orrs	r1, r2
 810383a:	687a      	ldr	r2, [r7, #4]
 810383c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810383e:	430a      	orrs	r2, r1
 8103840:	431a      	orrs	r2, r3
 8103842:	687b      	ldr	r3, [r7, #4]
 8103844:	681b      	ldr	r3, [r3, #0]
 8103846:	f042 0201 	orr.w	r2, r2, #1
 810384a:	611a      	str	r2, [r3, #16]
 810384c:	e01a      	b.n	8103884 <HAL_ADC_Init+0x2c8>
 810384e:	bf00      	nop
 8103850:	10000000 	.word	0x10000000
 8103854:	053e2d63 	.word	0x053e2d63
 8103858:	40022000 	.word	0x40022000
 810385c:	40022100 	.word	0x40022100
 8103860:	58026000 	.word	0x58026000
 8103864:	40022300 	.word	0x40022300
 8103868:	58026300 	.word	0x58026300
 810386c:	fff0c003 	.word	0xfff0c003
 8103870:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	681b      	ldr	r3, [r3, #0]
 8103878:	691a      	ldr	r2, [r3, #16]
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	f022 0201 	bic.w	r2, r2, #1
 8103882:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103884:	687b      	ldr	r3, [r7, #4]
 8103886:	681b      	ldr	r3, [r3, #0]
 8103888:	691b      	ldr	r3, [r3, #16]
 810388a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 810388e:	687b      	ldr	r3, [r7, #4]
 8103890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	681b      	ldr	r3, [r3, #0]
 8103896:	430a      	orrs	r2, r1
 8103898:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 810389a:	6878      	ldr	r0, [r7, #4]
 810389c:	f000 fb80 	bl	8103fa0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	68db      	ldr	r3, [r3, #12]
 81038a4:	2b01      	cmp	r3, #1
 81038a6:	d10c      	bne.n	81038c2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038ae:	f023 010f 	bic.w	r1, r3, #15
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	699b      	ldr	r3, [r3, #24]
 81038b6:	1e5a      	subs	r2, r3, #1
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	681b      	ldr	r3, [r3, #0]
 81038bc:	430a      	orrs	r2, r1
 81038be:	631a      	str	r2, [r3, #48]	; 0x30
 81038c0:	e007      	b.n	81038d2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	681b      	ldr	r3, [r3, #0]
 81038c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81038c8:	687b      	ldr	r3, [r7, #4]
 81038ca:	681b      	ldr	r3, [r3, #0]
 81038cc:	f022 020f 	bic.w	r2, r2, #15
 81038d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038d6:	f023 0303 	bic.w	r3, r3, #3
 81038da:	f043 0201 	orr.w	r2, r3, #1
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	655a      	str	r2, [r3, #84]	; 0x54
 81038e2:	e007      	b.n	81038f4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038e8:	f043 0210 	orr.w	r2, r3, #16
 81038ec:	687b      	ldr	r3, [r7, #4]
 81038ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81038f0:	2301      	movs	r3, #1
 81038f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81038f4:	7ffb      	ldrb	r3, [r7, #31]
}
 81038f6:	4618      	mov	r0, r3
 81038f8:	3724      	adds	r7, #36	; 0x24
 81038fa:	46bd      	mov	sp, r7
 81038fc:	bd90      	pop	{r4, r7, pc}
 81038fe:	bf00      	nop

08103900 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8103900:	b590      	push	{r4, r7, lr}
 8103902:	b0a1      	sub	sp, #132	; 0x84
 8103904:	af00      	add	r7, sp, #0
 8103906:	6078      	str	r0, [r7, #4]
 8103908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810390a:	2300      	movs	r3, #0
 810390c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8103910:	2300      	movs	r3, #0
 8103912:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103914:	683b      	ldr	r3, [r7, #0]
 8103916:	68db      	ldr	r3, [r3, #12]
 8103918:	4a9d      	ldr	r2, [pc, #628]	; (8103b90 <HAL_ADC_ConfigChannel+0x290>)
 810391a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103922:	2b01      	cmp	r3, #1
 8103924:	d101      	bne.n	810392a <HAL_ADC_ConfigChannel+0x2a>
 8103926:	2302      	movs	r3, #2
 8103928:	e321      	b.n	8103f6e <HAL_ADC_ConfigChannel+0x66e>
 810392a:	687b      	ldr	r3, [r7, #4]
 810392c:	2201      	movs	r2, #1
 810392e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	681b      	ldr	r3, [r3, #0]
 8103936:	4618      	mov	r0, r3
 8103938:	f7ff fe19 	bl	810356e <LL_ADC_REG_IsConversionOngoing>
 810393c:	4603      	mov	r3, r0
 810393e:	2b00      	cmp	r3, #0
 8103940:	f040 8306 	bne.w	8103f50 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8103944:	683b      	ldr	r3, [r7, #0]
 8103946:	681b      	ldr	r3, [r3, #0]
 8103948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810394c:	2b00      	cmp	r3, #0
 810394e:	d108      	bne.n	8103962 <HAL_ADC_ConfigChannel+0x62>
 8103950:	683b      	ldr	r3, [r7, #0]
 8103952:	681b      	ldr	r3, [r3, #0]
 8103954:	0e9b      	lsrs	r3, r3, #26
 8103956:	f003 031f 	and.w	r3, r3, #31
 810395a:	2201      	movs	r2, #1
 810395c:	fa02 f303 	lsl.w	r3, r2, r3
 8103960:	e016      	b.n	8103990 <HAL_ADC_ConfigChannel+0x90>
 8103962:	683b      	ldr	r3, [r7, #0]
 8103964:	681b      	ldr	r3, [r3, #0]
 8103966:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810396a:	fa93 f3a3 	rbit	r3, r3
 810396e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8103970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8103972:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8103974:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8103976:	2b00      	cmp	r3, #0
 8103978:	d101      	bne.n	810397e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 810397a:	2320      	movs	r3, #32
 810397c:	e003      	b.n	8103986 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 810397e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8103980:	fab3 f383 	clz	r3, r3
 8103984:	b2db      	uxtb	r3, r3
 8103986:	f003 031f 	and.w	r3, r3, #31
 810398a:	2201      	movs	r2, #1
 810398c:	fa02 f303 	lsl.w	r3, r2, r3
 8103990:	687a      	ldr	r2, [r7, #4]
 8103992:	6812      	ldr	r2, [r2, #0]
 8103994:	69d1      	ldr	r1, [r2, #28]
 8103996:	687a      	ldr	r2, [r7, #4]
 8103998:	6812      	ldr	r2, [r2, #0]
 810399a:	430b      	orrs	r3, r1
 810399c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	6818      	ldr	r0, [r3, #0]
 81039a2:	683b      	ldr	r3, [r7, #0]
 81039a4:	6859      	ldr	r1, [r3, #4]
 81039a6:	683b      	ldr	r3, [r7, #0]
 81039a8:	681b      	ldr	r3, [r3, #0]
 81039aa:	461a      	mov	r2, r3
 81039ac:	f7ff fd02 	bl	81033b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81039b0:	687b      	ldr	r3, [r7, #4]
 81039b2:	681b      	ldr	r3, [r3, #0]
 81039b4:	4618      	mov	r0, r3
 81039b6:	f7ff fdda 	bl	810356e <LL_ADC_REG_IsConversionOngoing>
 81039ba:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81039bc:	687b      	ldr	r3, [r7, #4]
 81039be:	681b      	ldr	r3, [r3, #0]
 81039c0:	4618      	mov	r0, r3
 81039c2:	f7ff fde7 	bl	8103594 <LL_ADC_INJ_IsConversionOngoing>
 81039c6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81039c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81039ca:	2b00      	cmp	r3, #0
 81039cc:	f040 80b3 	bne.w	8103b36 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81039d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81039d2:	2b00      	cmp	r3, #0
 81039d4:	f040 80af 	bne.w	8103b36 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	6818      	ldr	r0, [r3, #0]
 81039dc:	683b      	ldr	r3, [r7, #0]
 81039de:	6819      	ldr	r1, [r3, #0]
 81039e0:	683b      	ldr	r3, [r7, #0]
 81039e2:	689b      	ldr	r3, [r3, #8]
 81039e4:	461a      	mov	r2, r3
 81039e6:	f7ff fd11 	bl	810340c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81039ea:	4b6a      	ldr	r3, [pc, #424]	; (8103b94 <HAL_ADC_ConfigChannel+0x294>)
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 81039f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81039f6:	d10b      	bne.n	8103a10 <HAL_ADC_ConfigChannel+0x110>
 81039f8:	683b      	ldr	r3, [r7, #0]
 81039fa:	695a      	ldr	r2, [r3, #20]
 81039fc:	687b      	ldr	r3, [r7, #4]
 81039fe:	681b      	ldr	r3, [r3, #0]
 8103a00:	68db      	ldr	r3, [r3, #12]
 8103a02:	089b      	lsrs	r3, r3, #2
 8103a04:	f003 0307 	and.w	r3, r3, #7
 8103a08:	005b      	lsls	r3, r3, #1
 8103a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8103a0e:	e01d      	b.n	8103a4c <HAL_ADC_ConfigChannel+0x14c>
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	681b      	ldr	r3, [r3, #0]
 8103a14:	68db      	ldr	r3, [r3, #12]
 8103a16:	f003 0310 	and.w	r3, r3, #16
 8103a1a:	2b00      	cmp	r3, #0
 8103a1c:	d10b      	bne.n	8103a36 <HAL_ADC_ConfigChannel+0x136>
 8103a1e:	683b      	ldr	r3, [r7, #0]
 8103a20:	695a      	ldr	r2, [r3, #20]
 8103a22:	687b      	ldr	r3, [r7, #4]
 8103a24:	681b      	ldr	r3, [r3, #0]
 8103a26:	68db      	ldr	r3, [r3, #12]
 8103a28:	089b      	lsrs	r3, r3, #2
 8103a2a:	f003 0307 	and.w	r3, r3, #7
 8103a2e:	005b      	lsls	r3, r3, #1
 8103a30:	fa02 f303 	lsl.w	r3, r2, r3
 8103a34:	e00a      	b.n	8103a4c <HAL_ADC_ConfigChannel+0x14c>
 8103a36:	683b      	ldr	r3, [r7, #0]
 8103a38:	695a      	ldr	r2, [r3, #20]
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	681b      	ldr	r3, [r3, #0]
 8103a3e:	68db      	ldr	r3, [r3, #12]
 8103a40:	089b      	lsrs	r3, r3, #2
 8103a42:	f003 0304 	and.w	r3, r3, #4
 8103a46:	005b      	lsls	r3, r3, #1
 8103a48:	fa02 f303 	lsl.w	r3, r2, r3
 8103a4c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8103a4e:	683b      	ldr	r3, [r7, #0]
 8103a50:	691b      	ldr	r3, [r3, #16]
 8103a52:	2b04      	cmp	r3, #4
 8103a54:	d027      	beq.n	8103aa6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8103a56:	687b      	ldr	r3, [r7, #4]
 8103a58:	6818      	ldr	r0, [r3, #0]
 8103a5a:	683b      	ldr	r3, [r7, #0]
 8103a5c:	6919      	ldr	r1, [r3, #16]
 8103a5e:	683b      	ldr	r3, [r7, #0]
 8103a60:	681a      	ldr	r2, [r3, #0]
 8103a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103a64:	f7ff fc52 	bl	810330c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	6818      	ldr	r0, [r3, #0]
 8103a6c:	683b      	ldr	r3, [r7, #0]
 8103a6e:	6919      	ldr	r1, [r3, #16]
 8103a70:	683b      	ldr	r3, [r7, #0]
 8103a72:	7e5b      	ldrb	r3, [r3, #25]
 8103a74:	2b01      	cmp	r3, #1
 8103a76:	d102      	bne.n	8103a7e <HAL_ADC_ConfigChannel+0x17e>
 8103a78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8103a7c:	e000      	b.n	8103a80 <HAL_ADC_ConfigChannel+0x180>
 8103a7e:	2300      	movs	r3, #0
 8103a80:	461a      	mov	r2, r3
 8103a82:	f7ff fc7c 	bl	810337e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	6818      	ldr	r0, [r3, #0]
 8103a8a:	683b      	ldr	r3, [r7, #0]
 8103a8c:	6919      	ldr	r1, [r3, #16]
 8103a8e:	683b      	ldr	r3, [r7, #0]
 8103a90:	7e1b      	ldrb	r3, [r3, #24]
 8103a92:	2b01      	cmp	r3, #1
 8103a94:	d102      	bne.n	8103a9c <HAL_ADC_ConfigChannel+0x19c>
 8103a96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8103a9a:	e000      	b.n	8103a9e <HAL_ADC_ConfigChannel+0x19e>
 8103a9c:	2300      	movs	r3, #0
 8103a9e:	461a      	mov	r2, r3
 8103aa0:	f7ff fc54 	bl	810334c <LL_ADC_SetDataRightShift>
 8103aa4:	e047      	b.n	8103b36 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	681b      	ldr	r3, [r3, #0]
 8103aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103aac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103ab0:	683b      	ldr	r3, [r7, #0]
 8103ab2:	681b      	ldr	r3, [r3, #0]
 8103ab4:	069b      	lsls	r3, r3, #26
 8103ab6:	429a      	cmp	r2, r3
 8103ab8:	d107      	bne.n	8103aca <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	681b      	ldr	r3, [r3, #0]
 8103abe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8103ac0:	687b      	ldr	r3, [r7, #4]
 8103ac2:	681b      	ldr	r3, [r3, #0]
 8103ac4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103ac8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	681b      	ldr	r3, [r3, #0]
 8103ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103ad4:	683b      	ldr	r3, [r7, #0]
 8103ad6:	681b      	ldr	r3, [r3, #0]
 8103ad8:	069b      	lsls	r3, r3, #26
 8103ada:	429a      	cmp	r2, r3
 8103adc:	d107      	bne.n	8103aee <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	681b      	ldr	r3, [r3, #0]
 8103ae2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8103ae4:	687b      	ldr	r3, [r7, #4]
 8103ae6:	681b      	ldr	r3, [r3, #0]
 8103ae8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103aec:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103aee:	687b      	ldr	r3, [r7, #4]
 8103af0:	681b      	ldr	r3, [r3, #0]
 8103af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103af4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103af8:	683b      	ldr	r3, [r7, #0]
 8103afa:	681b      	ldr	r3, [r3, #0]
 8103afc:	069b      	lsls	r3, r3, #26
 8103afe:	429a      	cmp	r2, r3
 8103b00:	d107      	bne.n	8103b12 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	681b      	ldr	r3, [r3, #0]
 8103b06:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8103b08:	687b      	ldr	r3, [r7, #4]
 8103b0a:	681b      	ldr	r3, [r3, #0]
 8103b0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103b10:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103b12:	687b      	ldr	r3, [r7, #4]
 8103b14:	681b      	ldr	r3, [r3, #0]
 8103b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103b18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103b1c:	683b      	ldr	r3, [r7, #0]
 8103b1e:	681b      	ldr	r3, [r3, #0]
 8103b20:	069b      	lsls	r3, r3, #26
 8103b22:	429a      	cmp	r2, r3
 8103b24:	d107      	bne.n	8103b36 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8103b26:	687b      	ldr	r3, [r7, #4]
 8103b28:	681b      	ldr	r3, [r3, #0]
 8103b2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103b34:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	4618      	mov	r0, r3
 8103b3c:	f7ff fd04 	bl	8103548 <LL_ADC_IsEnabled>
 8103b40:	4603      	mov	r3, r0
 8103b42:	2b00      	cmp	r3, #0
 8103b44:	f040 820d 	bne.w	8103f62 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8103b48:	687b      	ldr	r3, [r7, #4]
 8103b4a:	6818      	ldr	r0, [r3, #0]
 8103b4c:	683b      	ldr	r3, [r7, #0]
 8103b4e:	6819      	ldr	r1, [r3, #0]
 8103b50:	683b      	ldr	r3, [r7, #0]
 8103b52:	68db      	ldr	r3, [r3, #12]
 8103b54:	461a      	mov	r2, r3
 8103b56:	f7ff fc85 	bl	8103464 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8103b5a:	683b      	ldr	r3, [r7, #0]
 8103b5c:	68db      	ldr	r3, [r3, #12]
 8103b5e:	4a0c      	ldr	r2, [pc, #48]	; (8103b90 <HAL_ADC_ConfigChannel+0x290>)
 8103b60:	4293      	cmp	r3, r2
 8103b62:	f040 8133 	bne.w	8103dcc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103b6a:	683b      	ldr	r3, [r7, #0]
 8103b6c:	681b      	ldr	r3, [r3, #0]
 8103b6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103b72:	2b00      	cmp	r3, #0
 8103b74:	d110      	bne.n	8103b98 <HAL_ADC_ConfigChannel+0x298>
 8103b76:	683b      	ldr	r3, [r7, #0]
 8103b78:	681b      	ldr	r3, [r3, #0]
 8103b7a:	0e9b      	lsrs	r3, r3, #26
 8103b7c:	3301      	adds	r3, #1
 8103b7e:	f003 031f 	and.w	r3, r3, #31
 8103b82:	2b09      	cmp	r3, #9
 8103b84:	bf94      	ite	ls
 8103b86:	2301      	movls	r3, #1
 8103b88:	2300      	movhi	r3, #0
 8103b8a:	b2db      	uxtb	r3, r3
 8103b8c:	e01e      	b.n	8103bcc <HAL_ADC_ConfigChannel+0x2cc>
 8103b8e:	bf00      	nop
 8103b90:	47ff0000 	.word	0x47ff0000
 8103b94:	5c001000 	.word	0x5c001000
 8103b98:	683b      	ldr	r3, [r7, #0]
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8103ba0:	fa93 f3a3 	rbit	r3, r3
 8103ba4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8103ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8103baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103bac:	2b00      	cmp	r3, #0
 8103bae:	d101      	bne.n	8103bb4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8103bb0:	2320      	movs	r3, #32
 8103bb2:	e003      	b.n	8103bbc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8103bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103bb6:	fab3 f383 	clz	r3, r3
 8103bba:	b2db      	uxtb	r3, r3
 8103bbc:	3301      	adds	r3, #1
 8103bbe:	f003 031f 	and.w	r3, r3, #31
 8103bc2:	2b09      	cmp	r3, #9
 8103bc4:	bf94      	ite	ls
 8103bc6:	2301      	movls	r3, #1
 8103bc8:	2300      	movhi	r3, #0
 8103bca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103bcc:	2b00      	cmp	r3, #0
 8103bce:	d079      	beq.n	8103cc4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103bd0:	683b      	ldr	r3, [r7, #0]
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103bd8:	2b00      	cmp	r3, #0
 8103bda:	d107      	bne.n	8103bec <HAL_ADC_ConfigChannel+0x2ec>
 8103bdc:	683b      	ldr	r3, [r7, #0]
 8103bde:	681b      	ldr	r3, [r3, #0]
 8103be0:	0e9b      	lsrs	r3, r3, #26
 8103be2:	3301      	adds	r3, #1
 8103be4:	069b      	lsls	r3, r3, #26
 8103be6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103bea:	e015      	b.n	8103c18 <HAL_ADC_ConfigChannel+0x318>
 8103bec:	683b      	ldr	r3, [r7, #0]
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103bf4:	fa93 f3a3 	rbit	r3, r3
 8103bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8103bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103bfc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8103bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103c00:	2b00      	cmp	r3, #0
 8103c02:	d101      	bne.n	8103c08 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8103c04:	2320      	movs	r3, #32
 8103c06:	e003      	b.n	8103c10 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8103c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103c0a:	fab3 f383 	clz	r3, r3
 8103c0e:	b2db      	uxtb	r3, r3
 8103c10:	3301      	adds	r3, #1
 8103c12:	069b      	lsls	r3, r3, #26
 8103c14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103c18:	683b      	ldr	r3, [r7, #0]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103c20:	2b00      	cmp	r3, #0
 8103c22:	d109      	bne.n	8103c38 <HAL_ADC_ConfigChannel+0x338>
 8103c24:	683b      	ldr	r3, [r7, #0]
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	0e9b      	lsrs	r3, r3, #26
 8103c2a:	3301      	adds	r3, #1
 8103c2c:	f003 031f 	and.w	r3, r3, #31
 8103c30:	2101      	movs	r1, #1
 8103c32:	fa01 f303 	lsl.w	r3, r1, r3
 8103c36:	e017      	b.n	8103c68 <HAL_ADC_ConfigChannel+0x368>
 8103c38:	683b      	ldr	r3, [r7, #0]
 8103c3a:	681b      	ldr	r3, [r3, #0]
 8103c3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103c40:	fa93 f3a3 	rbit	r3, r3
 8103c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8103c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103c48:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8103c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103c4c:	2b00      	cmp	r3, #0
 8103c4e:	d101      	bne.n	8103c54 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8103c50:	2320      	movs	r3, #32
 8103c52:	e003      	b.n	8103c5c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8103c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103c56:	fab3 f383 	clz	r3, r3
 8103c5a:	b2db      	uxtb	r3, r3
 8103c5c:	3301      	adds	r3, #1
 8103c5e:	f003 031f 	and.w	r3, r3, #31
 8103c62:	2101      	movs	r1, #1
 8103c64:	fa01 f303 	lsl.w	r3, r1, r3
 8103c68:	ea42 0103 	orr.w	r1, r2, r3
 8103c6c:	683b      	ldr	r3, [r7, #0]
 8103c6e:	681b      	ldr	r3, [r3, #0]
 8103c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103c74:	2b00      	cmp	r3, #0
 8103c76:	d10a      	bne.n	8103c8e <HAL_ADC_ConfigChannel+0x38e>
 8103c78:	683b      	ldr	r3, [r7, #0]
 8103c7a:	681b      	ldr	r3, [r3, #0]
 8103c7c:	0e9b      	lsrs	r3, r3, #26
 8103c7e:	3301      	adds	r3, #1
 8103c80:	f003 021f 	and.w	r2, r3, #31
 8103c84:	4613      	mov	r3, r2
 8103c86:	005b      	lsls	r3, r3, #1
 8103c88:	4413      	add	r3, r2
 8103c8a:	051b      	lsls	r3, r3, #20
 8103c8c:	e018      	b.n	8103cc0 <HAL_ADC_ConfigChannel+0x3c0>
 8103c8e:	683b      	ldr	r3, [r7, #0]
 8103c90:	681b      	ldr	r3, [r3, #0]
 8103c92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103c96:	fa93 f3a3 	rbit	r3, r3
 8103c9a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8103c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8103ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103ca2:	2b00      	cmp	r3, #0
 8103ca4:	d101      	bne.n	8103caa <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8103ca6:	2320      	movs	r3, #32
 8103ca8:	e003      	b.n	8103cb2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8103caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103cac:	fab3 f383 	clz	r3, r3
 8103cb0:	b2db      	uxtb	r3, r3
 8103cb2:	3301      	adds	r3, #1
 8103cb4:	f003 021f 	and.w	r2, r3, #31
 8103cb8:	4613      	mov	r3, r2
 8103cba:	005b      	lsls	r3, r3, #1
 8103cbc:	4413      	add	r3, r2
 8103cbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103cc0:	430b      	orrs	r3, r1
 8103cc2:	e07e      	b.n	8103dc2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103cc4:	683b      	ldr	r3, [r7, #0]
 8103cc6:	681b      	ldr	r3, [r3, #0]
 8103cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103ccc:	2b00      	cmp	r3, #0
 8103cce:	d107      	bne.n	8103ce0 <HAL_ADC_ConfigChannel+0x3e0>
 8103cd0:	683b      	ldr	r3, [r7, #0]
 8103cd2:	681b      	ldr	r3, [r3, #0]
 8103cd4:	0e9b      	lsrs	r3, r3, #26
 8103cd6:	3301      	adds	r3, #1
 8103cd8:	069b      	lsls	r3, r3, #26
 8103cda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103cde:	e015      	b.n	8103d0c <HAL_ADC_ConfigChannel+0x40c>
 8103ce0:	683b      	ldr	r3, [r7, #0]
 8103ce2:	681b      	ldr	r3, [r3, #0]
 8103ce4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103ce8:	fa93 f3a3 	rbit	r3, r3
 8103cec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8103cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8103cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103cf4:	2b00      	cmp	r3, #0
 8103cf6:	d101      	bne.n	8103cfc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8103cf8:	2320      	movs	r3, #32
 8103cfa:	e003      	b.n	8103d04 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8103cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103cfe:	fab3 f383 	clz	r3, r3
 8103d02:	b2db      	uxtb	r3, r3
 8103d04:	3301      	adds	r3, #1
 8103d06:	069b      	lsls	r3, r3, #26
 8103d08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103d0c:	683b      	ldr	r3, [r7, #0]
 8103d0e:	681b      	ldr	r3, [r3, #0]
 8103d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103d14:	2b00      	cmp	r3, #0
 8103d16:	d109      	bne.n	8103d2c <HAL_ADC_ConfigChannel+0x42c>
 8103d18:	683b      	ldr	r3, [r7, #0]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	0e9b      	lsrs	r3, r3, #26
 8103d1e:	3301      	adds	r3, #1
 8103d20:	f003 031f 	and.w	r3, r3, #31
 8103d24:	2101      	movs	r1, #1
 8103d26:	fa01 f303 	lsl.w	r3, r1, r3
 8103d2a:	e017      	b.n	8103d5c <HAL_ADC_ConfigChannel+0x45c>
 8103d2c:	683b      	ldr	r3, [r7, #0]
 8103d2e:	681b      	ldr	r3, [r3, #0]
 8103d30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103d32:	69fb      	ldr	r3, [r7, #28]
 8103d34:	fa93 f3a3 	rbit	r3, r3
 8103d38:	61bb      	str	r3, [r7, #24]
  return result;
 8103d3a:	69bb      	ldr	r3, [r7, #24]
 8103d3c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8103d3e:	6a3b      	ldr	r3, [r7, #32]
 8103d40:	2b00      	cmp	r3, #0
 8103d42:	d101      	bne.n	8103d48 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8103d44:	2320      	movs	r3, #32
 8103d46:	e003      	b.n	8103d50 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103d48:	6a3b      	ldr	r3, [r7, #32]
 8103d4a:	fab3 f383 	clz	r3, r3
 8103d4e:	b2db      	uxtb	r3, r3
 8103d50:	3301      	adds	r3, #1
 8103d52:	f003 031f 	and.w	r3, r3, #31
 8103d56:	2101      	movs	r1, #1
 8103d58:	fa01 f303 	lsl.w	r3, r1, r3
 8103d5c:	ea42 0103 	orr.w	r1, r2, r3
 8103d60:	683b      	ldr	r3, [r7, #0]
 8103d62:	681b      	ldr	r3, [r3, #0]
 8103d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103d68:	2b00      	cmp	r3, #0
 8103d6a:	d10d      	bne.n	8103d88 <HAL_ADC_ConfigChannel+0x488>
 8103d6c:	683b      	ldr	r3, [r7, #0]
 8103d6e:	681b      	ldr	r3, [r3, #0]
 8103d70:	0e9b      	lsrs	r3, r3, #26
 8103d72:	3301      	adds	r3, #1
 8103d74:	f003 021f 	and.w	r2, r3, #31
 8103d78:	4613      	mov	r3, r2
 8103d7a:	005b      	lsls	r3, r3, #1
 8103d7c:	4413      	add	r3, r2
 8103d7e:	3b1e      	subs	r3, #30
 8103d80:	051b      	lsls	r3, r3, #20
 8103d82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103d86:	e01b      	b.n	8103dc0 <HAL_ADC_ConfigChannel+0x4c0>
 8103d88:	683b      	ldr	r3, [r7, #0]
 8103d8a:	681b      	ldr	r3, [r3, #0]
 8103d8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103d8e:	693b      	ldr	r3, [r7, #16]
 8103d90:	fa93 f3a3 	rbit	r3, r3
 8103d94:	60fb      	str	r3, [r7, #12]
  return result;
 8103d96:	68fb      	ldr	r3, [r7, #12]
 8103d98:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103d9a:	697b      	ldr	r3, [r7, #20]
 8103d9c:	2b00      	cmp	r3, #0
 8103d9e:	d101      	bne.n	8103da4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8103da0:	2320      	movs	r3, #32
 8103da2:	e003      	b.n	8103dac <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8103da4:	697b      	ldr	r3, [r7, #20]
 8103da6:	fab3 f383 	clz	r3, r3
 8103daa:	b2db      	uxtb	r3, r3
 8103dac:	3301      	adds	r3, #1
 8103dae:	f003 021f 	and.w	r2, r3, #31
 8103db2:	4613      	mov	r3, r2
 8103db4:	005b      	lsls	r3, r3, #1
 8103db6:	4413      	add	r3, r2
 8103db8:	3b1e      	subs	r3, #30
 8103dba:	051b      	lsls	r3, r3, #20
 8103dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103dc0:	430b      	orrs	r3, r1
 8103dc2:	683a      	ldr	r2, [r7, #0]
 8103dc4:	6892      	ldr	r2, [r2, #8]
 8103dc6:	4619      	mov	r1, r3
 8103dc8:	f7ff fb20 	bl	810340c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103dcc:	683b      	ldr	r3, [r7, #0]
 8103dce:	681b      	ldr	r3, [r3, #0]
 8103dd0:	2b00      	cmp	r3, #0
 8103dd2:	f280 80c6 	bge.w	8103f62 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	681b      	ldr	r3, [r3, #0]
 8103dda:	4a67      	ldr	r2, [pc, #412]	; (8103f78 <HAL_ADC_ConfigChannel+0x678>)
 8103ddc:	4293      	cmp	r3, r2
 8103dde:	d004      	beq.n	8103dea <HAL_ADC_ConfigChannel+0x4ea>
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	4a65      	ldr	r2, [pc, #404]	; (8103f7c <HAL_ADC_ConfigChannel+0x67c>)
 8103de6:	4293      	cmp	r3, r2
 8103de8:	d101      	bne.n	8103dee <HAL_ADC_ConfigChannel+0x4ee>
 8103dea:	4b65      	ldr	r3, [pc, #404]	; (8103f80 <HAL_ADC_ConfigChannel+0x680>)
 8103dec:	e000      	b.n	8103df0 <HAL_ADC_ConfigChannel+0x4f0>
 8103dee:	4b65      	ldr	r3, [pc, #404]	; (8103f84 <HAL_ADC_ConfigChannel+0x684>)
 8103df0:	4618      	mov	r0, r3
 8103df2:	f7ff fa7d 	bl	81032f0 <LL_ADC_GetCommonPathInternalCh>
 8103df6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	681b      	ldr	r3, [r3, #0]
 8103dfc:	4a5e      	ldr	r2, [pc, #376]	; (8103f78 <HAL_ADC_ConfigChannel+0x678>)
 8103dfe:	4293      	cmp	r3, r2
 8103e00:	d004      	beq.n	8103e0c <HAL_ADC_ConfigChannel+0x50c>
 8103e02:	687b      	ldr	r3, [r7, #4]
 8103e04:	681b      	ldr	r3, [r3, #0]
 8103e06:	4a5d      	ldr	r2, [pc, #372]	; (8103f7c <HAL_ADC_ConfigChannel+0x67c>)
 8103e08:	4293      	cmp	r3, r2
 8103e0a:	d10e      	bne.n	8103e2a <HAL_ADC_ConfigChannel+0x52a>
 8103e0c:	485a      	ldr	r0, [pc, #360]	; (8103f78 <HAL_ADC_ConfigChannel+0x678>)
 8103e0e:	f7ff fb9b 	bl	8103548 <LL_ADC_IsEnabled>
 8103e12:	4604      	mov	r4, r0
 8103e14:	4859      	ldr	r0, [pc, #356]	; (8103f7c <HAL_ADC_ConfigChannel+0x67c>)
 8103e16:	f7ff fb97 	bl	8103548 <LL_ADC_IsEnabled>
 8103e1a:	4603      	mov	r3, r0
 8103e1c:	4323      	orrs	r3, r4
 8103e1e:	2b00      	cmp	r3, #0
 8103e20:	bf0c      	ite	eq
 8103e22:	2301      	moveq	r3, #1
 8103e24:	2300      	movne	r3, #0
 8103e26:	b2db      	uxtb	r3, r3
 8103e28:	e008      	b.n	8103e3c <HAL_ADC_ConfigChannel+0x53c>
 8103e2a:	4857      	ldr	r0, [pc, #348]	; (8103f88 <HAL_ADC_ConfigChannel+0x688>)
 8103e2c:	f7ff fb8c 	bl	8103548 <LL_ADC_IsEnabled>
 8103e30:	4603      	mov	r3, r0
 8103e32:	2b00      	cmp	r3, #0
 8103e34:	bf0c      	ite	eq
 8103e36:	2301      	moveq	r3, #1
 8103e38:	2300      	movne	r3, #0
 8103e3a:	b2db      	uxtb	r3, r3
 8103e3c:	2b00      	cmp	r3, #0
 8103e3e:	d07d      	beq.n	8103f3c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103e40:	683b      	ldr	r3, [r7, #0]
 8103e42:	681b      	ldr	r3, [r3, #0]
 8103e44:	4a51      	ldr	r2, [pc, #324]	; (8103f8c <HAL_ADC_ConfigChannel+0x68c>)
 8103e46:	4293      	cmp	r3, r2
 8103e48:	d130      	bne.n	8103eac <HAL_ADC_ConfigChannel+0x5ac>
 8103e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103e50:	2b00      	cmp	r3, #0
 8103e52:	d12b      	bne.n	8103eac <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	681b      	ldr	r3, [r3, #0]
 8103e58:	4a4b      	ldr	r2, [pc, #300]	; (8103f88 <HAL_ADC_ConfigChannel+0x688>)
 8103e5a:	4293      	cmp	r3, r2
 8103e5c:	f040 8081 	bne.w	8103f62 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103e60:	687b      	ldr	r3, [r7, #4]
 8103e62:	681b      	ldr	r3, [r3, #0]
 8103e64:	4a44      	ldr	r2, [pc, #272]	; (8103f78 <HAL_ADC_ConfigChannel+0x678>)
 8103e66:	4293      	cmp	r3, r2
 8103e68:	d004      	beq.n	8103e74 <HAL_ADC_ConfigChannel+0x574>
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	681b      	ldr	r3, [r3, #0]
 8103e6e:	4a43      	ldr	r2, [pc, #268]	; (8103f7c <HAL_ADC_ConfigChannel+0x67c>)
 8103e70:	4293      	cmp	r3, r2
 8103e72:	d101      	bne.n	8103e78 <HAL_ADC_ConfigChannel+0x578>
 8103e74:	4a42      	ldr	r2, [pc, #264]	; (8103f80 <HAL_ADC_ConfigChannel+0x680>)
 8103e76:	e000      	b.n	8103e7a <HAL_ADC_ConfigChannel+0x57a>
 8103e78:	4a42      	ldr	r2, [pc, #264]	; (8103f84 <HAL_ADC_ConfigChannel+0x684>)
 8103e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103e7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103e80:	4619      	mov	r1, r3
 8103e82:	4610      	mov	r0, r2
 8103e84:	f7ff fa21 	bl	81032ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103e88:	4b41      	ldr	r3, [pc, #260]	; (8103f90 <HAL_ADC_ConfigChannel+0x690>)
 8103e8a:	681b      	ldr	r3, [r3, #0]
 8103e8c:	099b      	lsrs	r3, r3, #6
 8103e8e:	4a41      	ldr	r2, [pc, #260]	; (8103f94 <HAL_ADC_ConfigChannel+0x694>)
 8103e90:	fba2 2303 	umull	r2, r3, r2, r3
 8103e94:	099b      	lsrs	r3, r3, #6
 8103e96:	3301      	adds	r3, #1
 8103e98:	005b      	lsls	r3, r3, #1
 8103e9a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103e9c:	e002      	b.n	8103ea4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8103e9e:	68bb      	ldr	r3, [r7, #8]
 8103ea0:	3b01      	subs	r3, #1
 8103ea2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103ea4:	68bb      	ldr	r3, [r7, #8]
 8103ea6:	2b00      	cmp	r3, #0
 8103ea8:	d1f9      	bne.n	8103e9e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103eaa:	e05a      	b.n	8103f62 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103eac:	683b      	ldr	r3, [r7, #0]
 8103eae:	681b      	ldr	r3, [r3, #0]
 8103eb0:	4a39      	ldr	r2, [pc, #228]	; (8103f98 <HAL_ADC_ConfigChannel+0x698>)
 8103eb2:	4293      	cmp	r3, r2
 8103eb4:	d11e      	bne.n	8103ef4 <HAL_ADC_ConfigChannel+0x5f4>
 8103eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103ebc:	2b00      	cmp	r3, #0
 8103ebe:	d119      	bne.n	8103ef4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103ec0:	687b      	ldr	r3, [r7, #4]
 8103ec2:	681b      	ldr	r3, [r3, #0]
 8103ec4:	4a30      	ldr	r2, [pc, #192]	; (8103f88 <HAL_ADC_ConfigChannel+0x688>)
 8103ec6:	4293      	cmp	r3, r2
 8103ec8:	d14b      	bne.n	8103f62 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103eca:	687b      	ldr	r3, [r7, #4]
 8103ecc:	681b      	ldr	r3, [r3, #0]
 8103ece:	4a2a      	ldr	r2, [pc, #168]	; (8103f78 <HAL_ADC_ConfigChannel+0x678>)
 8103ed0:	4293      	cmp	r3, r2
 8103ed2:	d004      	beq.n	8103ede <HAL_ADC_ConfigChannel+0x5de>
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	681b      	ldr	r3, [r3, #0]
 8103ed8:	4a28      	ldr	r2, [pc, #160]	; (8103f7c <HAL_ADC_ConfigChannel+0x67c>)
 8103eda:	4293      	cmp	r3, r2
 8103edc:	d101      	bne.n	8103ee2 <HAL_ADC_ConfigChannel+0x5e2>
 8103ede:	4a28      	ldr	r2, [pc, #160]	; (8103f80 <HAL_ADC_ConfigChannel+0x680>)
 8103ee0:	e000      	b.n	8103ee4 <HAL_ADC_ConfigChannel+0x5e4>
 8103ee2:	4a28      	ldr	r2, [pc, #160]	; (8103f84 <HAL_ADC_ConfigChannel+0x684>)
 8103ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103eea:	4619      	mov	r1, r3
 8103eec:	4610      	mov	r0, r2
 8103eee:	f7ff f9ec 	bl	81032ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103ef2:	e036      	b.n	8103f62 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103ef4:	683b      	ldr	r3, [r7, #0]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	4a28      	ldr	r2, [pc, #160]	; (8103f9c <HAL_ADC_ConfigChannel+0x69c>)
 8103efa:	4293      	cmp	r3, r2
 8103efc:	d131      	bne.n	8103f62 <HAL_ADC_ConfigChannel+0x662>
 8103efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103f04:	2b00      	cmp	r3, #0
 8103f06:	d12c      	bne.n	8103f62 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103f08:	687b      	ldr	r3, [r7, #4]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	4a1e      	ldr	r2, [pc, #120]	; (8103f88 <HAL_ADC_ConfigChannel+0x688>)
 8103f0e:	4293      	cmp	r3, r2
 8103f10:	d127      	bne.n	8103f62 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	681b      	ldr	r3, [r3, #0]
 8103f16:	4a18      	ldr	r2, [pc, #96]	; (8103f78 <HAL_ADC_ConfigChannel+0x678>)
 8103f18:	4293      	cmp	r3, r2
 8103f1a:	d004      	beq.n	8103f26 <HAL_ADC_ConfigChannel+0x626>
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	4a16      	ldr	r2, [pc, #88]	; (8103f7c <HAL_ADC_ConfigChannel+0x67c>)
 8103f22:	4293      	cmp	r3, r2
 8103f24:	d101      	bne.n	8103f2a <HAL_ADC_ConfigChannel+0x62a>
 8103f26:	4a16      	ldr	r2, [pc, #88]	; (8103f80 <HAL_ADC_ConfigChannel+0x680>)
 8103f28:	e000      	b.n	8103f2c <HAL_ADC_ConfigChannel+0x62c>
 8103f2a:	4a16      	ldr	r2, [pc, #88]	; (8103f84 <HAL_ADC_ConfigChannel+0x684>)
 8103f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103f2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103f32:	4619      	mov	r1, r3
 8103f34:	4610      	mov	r0, r2
 8103f36:	f7ff f9c8 	bl	81032ca <LL_ADC_SetCommonPathInternalCh>
 8103f3a:	e012      	b.n	8103f62 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f40:	f043 0220 	orr.w	r2, r3, #32
 8103f44:	687b      	ldr	r3, [r7, #4]
 8103f46:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103f48:	2301      	movs	r3, #1
 8103f4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8103f4e:	e008      	b.n	8103f62 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f54:	f043 0220 	orr.w	r2, r3, #32
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103f5c:	2301      	movs	r3, #1
 8103f5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	2200      	movs	r2, #0
 8103f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103f6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103f6e:	4618      	mov	r0, r3
 8103f70:	3784      	adds	r7, #132	; 0x84
 8103f72:	46bd      	mov	sp, r7
 8103f74:	bd90      	pop	{r4, r7, pc}
 8103f76:	bf00      	nop
 8103f78:	40022000 	.word	0x40022000
 8103f7c:	40022100 	.word	0x40022100
 8103f80:	40022300 	.word	0x40022300
 8103f84:	58026300 	.word	0x58026300
 8103f88:	58026000 	.word	0x58026000
 8103f8c:	cb840000 	.word	0xcb840000
 8103f90:	10000000 	.word	0x10000000
 8103f94:	053e2d63 	.word	0x053e2d63
 8103f98:	c7520000 	.word	0xc7520000
 8103f9c:	cfb80000 	.word	0xcfb80000

08103fa0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103fa0:	b580      	push	{r7, lr}
 8103fa2:	b084      	sub	sp, #16
 8103fa4:	af00      	add	r7, sp, #0
 8103fa6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	681b      	ldr	r3, [r3, #0]
 8103fac:	4a79      	ldr	r2, [pc, #484]	; (8104194 <ADC_ConfigureBoostMode+0x1f4>)
 8103fae:	4293      	cmp	r3, r2
 8103fb0:	d004      	beq.n	8103fbc <ADC_ConfigureBoostMode+0x1c>
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	681b      	ldr	r3, [r3, #0]
 8103fb6:	4a78      	ldr	r2, [pc, #480]	; (8104198 <ADC_ConfigureBoostMode+0x1f8>)
 8103fb8:	4293      	cmp	r3, r2
 8103fba:	d109      	bne.n	8103fd0 <ADC_ConfigureBoostMode+0x30>
 8103fbc:	4b77      	ldr	r3, [pc, #476]	; (810419c <ADC_ConfigureBoostMode+0x1fc>)
 8103fbe:	689b      	ldr	r3, [r3, #8]
 8103fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103fc4:	2b00      	cmp	r3, #0
 8103fc6:	bf14      	ite	ne
 8103fc8:	2301      	movne	r3, #1
 8103fca:	2300      	moveq	r3, #0
 8103fcc:	b2db      	uxtb	r3, r3
 8103fce:	e008      	b.n	8103fe2 <ADC_ConfigureBoostMode+0x42>
 8103fd0:	4b73      	ldr	r3, [pc, #460]	; (81041a0 <ADC_ConfigureBoostMode+0x200>)
 8103fd2:	689b      	ldr	r3, [r3, #8]
 8103fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103fd8:	2b00      	cmp	r3, #0
 8103fda:	bf14      	ite	ne
 8103fdc:	2301      	movne	r3, #1
 8103fde:	2300      	moveq	r3, #0
 8103fe0:	b2db      	uxtb	r3, r3
 8103fe2:	2b00      	cmp	r3, #0
 8103fe4:	d01c      	beq.n	8104020 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103fe6:	f001 fd4b 	bl	8105a80 <HAL_RCC_GetHCLKFreq>
 8103fea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	685b      	ldr	r3, [r3, #4]
 8103ff0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103ff4:	d010      	beq.n	8104018 <ADC_ConfigureBoostMode+0x78>
 8103ff6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103ffa:	d871      	bhi.n	81040e0 <ADC_ConfigureBoostMode+0x140>
 8103ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104000:	d002      	beq.n	8104008 <ADC_ConfigureBoostMode+0x68>
 8104002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104006:	d16b      	bne.n	81040e0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8104008:	687b      	ldr	r3, [r7, #4]
 810400a:	685b      	ldr	r3, [r3, #4]
 810400c:	0c1b      	lsrs	r3, r3, #16
 810400e:	68fa      	ldr	r2, [r7, #12]
 8104010:	fbb2 f3f3 	udiv	r3, r2, r3
 8104014:	60fb      	str	r3, [r7, #12]
        break;
 8104016:	e066      	b.n	81040e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8104018:	68fb      	ldr	r3, [r7, #12]
 810401a:	089b      	lsrs	r3, r3, #2
 810401c:	60fb      	str	r3, [r7, #12]
        break;
 810401e:	e062      	b.n	81040e6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8104020:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8104024:	f002 fcd0 	bl	81069c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8104028:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	685b      	ldr	r3, [r3, #4]
 810402e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8104032:	d051      	beq.n	81040d8 <ADC_ConfigureBoostMode+0x138>
 8104034:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8104038:	d854      	bhi.n	81040e4 <ADC_ConfigureBoostMode+0x144>
 810403a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810403e:	d047      	beq.n	81040d0 <ADC_ConfigureBoostMode+0x130>
 8104040:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8104044:	d84e      	bhi.n	81040e4 <ADC_ConfigureBoostMode+0x144>
 8104046:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 810404a:	d03d      	beq.n	81040c8 <ADC_ConfigureBoostMode+0x128>
 810404c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8104050:	d848      	bhi.n	81040e4 <ADC_ConfigureBoostMode+0x144>
 8104052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104056:	d033      	beq.n	81040c0 <ADC_ConfigureBoostMode+0x120>
 8104058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810405c:	d842      	bhi.n	81040e4 <ADC_ConfigureBoostMode+0x144>
 810405e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8104062:	d029      	beq.n	81040b8 <ADC_ConfigureBoostMode+0x118>
 8104064:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8104068:	d83c      	bhi.n	81040e4 <ADC_ConfigureBoostMode+0x144>
 810406a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 810406e:	d01a      	beq.n	81040a6 <ADC_ConfigureBoostMode+0x106>
 8104070:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8104074:	d836      	bhi.n	81040e4 <ADC_ConfigureBoostMode+0x144>
 8104076:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 810407a:	d014      	beq.n	81040a6 <ADC_ConfigureBoostMode+0x106>
 810407c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8104080:	d830      	bhi.n	81040e4 <ADC_ConfigureBoostMode+0x144>
 8104082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104086:	d00e      	beq.n	81040a6 <ADC_ConfigureBoostMode+0x106>
 8104088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810408c:	d82a      	bhi.n	81040e4 <ADC_ConfigureBoostMode+0x144>
 810408e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8104092:	d008      	beq.n	81040a6 <ADC_ConfigureBoostMode+0x106>
 8104094:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8104098:	d824      	bhi.n	81040e4 <ADC_ConfigureBoostMode+0x144>
 810409a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810409e:	d002      	beq.n	81040a6 <ADC_ConfigureBoostMode+0x106>
 81040a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81040a4:	d11e      	bne.n	81040e4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	685b      	ldr	r3, [r3, #4]
 81040aa:	0c9b      	lsrs	r3, r3, #18
 81040ac:	005b      	lsls	r3, r3, #1
 81040ae:	68fa      	ldr	r2, [r7, #12]
 81040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 81040b4:	60fb      	str	r3, [r7, #12]
        break;
 81040b6:	e016      	b.n	81040e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 81040b8:	68fb      	ldr	r3, [r7, #12]
 81040ba:	091b      	lsrs	r3, r3, #4
 81040bc:	60fb      	str	r3, [r7, #12]
        break;
 81040be:	e012      	b.n	81040e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 81040c0:	68fb      	ldr	r3, [r7, #12]
 81040c2:	095b      	lsrs	r3, r3, #5
 81040c4:	60fb      	str	r3, [r7, #12]
        break;
 81040c6:	e00e      	b.n	81040e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 81040c8:	68fb      	ldr	r3, [r7, #12]
 81040ca:	099b      	lsrs	r3, r3, #6
 81040cc:	60fb      	str	r3, [r7, #12]
        break;
 81040ce:	e00a      	b.n	81040e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 81040d0:	68fb      	ldr	r3, [r7, #12]
 81040d2:	09db      	lsrs	r3, r3, #7
 81040d4:	60fb      	str	r3, [r7, #12]
        break;
 81040d6:	e006      	b.n	81040e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 81040d8:	68fb      	ldr	r3, [r7, #12]
 81040da:	0a1b      	lsrs	r3, r3, #8
 81040dc:	60fb      	str	r3, [r7, #12]
        break;
 81040de:	e002      	b.n	81040e6 <ADC_ConfigureBoostMode+0x146>
        break;
 81040e0:	bf00      	nop
 81040e2:	e000      	b.n	81040e6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 81040e4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81040e6:	f7ff f8d1 	bl	810328c <HAL_GetREVID>
 81040ea:	4603      	mov	r3, r0
 81040ec:	f241 0203 	movw	r2, #4099	; 0x1003
 81040f0:	4293      	cmp	r3, r2
 81040f2:	d815      	bhi.n	8104120 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 81040f4:	68fb      	ldr	r3, [r7, #12]
 81040f6:	4a2b      	ldr	r2, [pc, #172]	; (81041a4 <ADC_ConfigureBoostMode+0x204>)
 81040f8:	4293      	cmp	r3, r2
 81040fa:	d908      	bls.n	810410e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	681b      	ldr	r3, [r3, #0]
 8104100:	689a      	ldr	r2, [r3, #8]
 8104102:	687b      	ldr	r3, [r7, #4]
 8104104:	681b      	ldr	r3, [r3, #0]
 8104106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810410a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 810410c:	e03e      	b.n	810418c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810410e:	687b      	ldr	r3, [r7, #4]
 8104110:	681b      	ldr	r3, [r3, #0]
 8104112:	689a      	ldr	r2, [r3, #8]
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810411c:	609a      	str	r2, [r3, #8]
}
 810411e:	e035      	b.n	810418c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8104120:	68fb      	ldr	r3, [r7, #12]
 8104122:	085b      	lsrs	r3, r3, #1
 8104124:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8104126:	68fb      	ldr	r3, [r7, #12]
 8104128:	4a1f      	ldr	r2, [pc, #124]	; (81041a8 <ADC_ConfigureBoostMode+0x208>)
 810412a:	4293      	cmp	r3, r2
 810412c:	d808      	bhi.n	8104140 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	681b      	ldr	r3, [r3, #0]
 8104132:	689a      	ldr	r2, [r3, #8]
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	681b      	ldr	r3, [r3, #0]
 8104138:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 810413c:	609a      	str	r2, [r3, #8]
}
 810413e:	e025      	b.n	810418c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8104140:	68fb      	ldr	r3, [r7, #12]
 8104142:	4a1a      	ldr	r2, [pc, #104]	; (81041ac <ADC_ConfigureBoostMode+0x20c>)
 8104144:	4293      	cmp	r3, r2
 8104146:	d80a      	bhi.n	810415e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	681b      	ldr	r3, [r3, #0]
 810414c:	689b      	ldr	r3, [r3, #8]
 810414e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104152:	687b      	ldr	r3, [r7, #4]
 8104154:	681b      	ldr	r3, [r3, #0]
 8104156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810415a:	609a      	str	r2, [r3, #8]
}
 810415c:	e016      	b.n	810418c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 810415e:	68fb      	ldr	r3, [r7, #12]
 8104160:	4a13      	ldr	r2, [pc, #76]	; (81041b0 <ADC_ConfigureBoostMode+0x210>)
 8104162:	4293      	cmp	r3, r2
 8104164:	d80a      	bhi.n	810417c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	681b      	ldr	r3, [r3, #0]
 810416a:	689b      	ldr	r3, [r3, #8]
 810416c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104170:	687b      	ldr	r3, [r7, #4]
 8104172:	681b      	ldr	r3, [r3, #0]
 8104174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104178:	609a      	str	r2, [r3, #8]
}
 810417a:	e007      	b.n	810418c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	689a      	ldr	r2, [r3, #8]
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 810418a:	609a      	str	r2, [r3, #8]
}
 810418c:	bf00      	nop
 810418e:	3710      	adds	r7, #16
 8104190:	46bd      	mov	sp, r7
 8104192:	bd80      	pop	{r7, pc}
 8104194:	40022000 	.word	0x40022000
 8104198:	40022100 	.word	0x40022100
 810419c:	40022300 	.word	0x40022300
 81041a0:	58026300 	.word	0x58026300
 81041a4:	01312d00 	.word	0x01312d00
 81041a8:	005f5e10 	.word	0x005f5e10
 81041ac:	00bebc20 	.word	0x00bebc20
 81041b0:	017d7840 	.word	0x017d7840

081041b4 <LL_ADC_IsEnabled>:
{
 81041b4:	b480      	push	{r7}
 81041b6:	b083      	sub	sp, #12
 81041b8:	af00      	add	r7, sp, #0
 81041ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	689b      	ldr	r3, [r3, #8]
 81041c0:	f003 0301 	and.w	r3, r3, #1
 81041c4:	2b01      	cmp	r3, #1
 81041c6:	d101      	bne.n	81041cc <LL_ADC_IsEnabled+0x18>
 81041c8:	2301      	movs	r3, #1
 81041ca:	e000      	b.n	81041ce <LL_ADC_IsEnabled+0x1a>
 81041cc:	2300      	movs	r3, #0
}
 81041ce:	4618      	mov	r0, r3
 81041d0:	370c      	adds	r7, #12
 81041d2:	46bd      	mov	sp, r7
 81041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041d8:	4770      	bx	lr

081041da <LL_ADC_REG_IsConversionOngoing>:
{
 81041da:	b480      	push	{r7}
 81041dc:	b083      	sub	sp, #12
 81041de:	af00      	add	r7, sp, #0
 81041e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	689b      	ldr	r3, [r3, #8]
 81041e6:	f003 0304 	and.w	r3, r3, #4
 81041ea:	2b04      	cmp	r3, #4
 81041ec:	d101      	bne.n	81041f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 81041ee:	2301      	movs	r3, #1
 81041f0:	e000      	b.n	81041f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81041f2:	2300      	movs	r3, #0
}
 81041f4:	4618      	mov	r0, r3
 81041f6:	370c      	adds	r7, #12
 81041f8:	46bd      	mov	sp, r7
 81041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041fe:	4770      	bx	lr

08104200 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8104200:	b590      	push	{r4, r7, lr}
 8104202:	b09f      	sub	sp, #124	; 0x7c
 8104204:	af00      	add	r7, sp, #0
 8104206:	6078      	str	r0, [r7, #4]
 8104208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810420a:	2300      	movs	r3, #0
 810420c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8104216:	2b01      	cmp	r3, #1
 8104218:	d101      	bne.n	810421e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 810421a:	2302      	movs	r3, #2
 810421c:	e0c4      	b.n	81043a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 810421e:	687b      	ldr	r3, [r7, #4]
 8104220:	2201      	movs	r2, #1
 8104222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8104226:	2300      	movs	r3, #0
 8104228:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 810422a:	2300      	movs	r3, #0
 810422c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810422e:	687b      	ldr	r3, [r7, #4]
 8104230:	681b      	ldr	r3, [r3, #0]
 8104232:	4a5f      	ldr	r2, [pc, #380]	; (81043b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104234:	4293      	cmp	r3, r2
 8104236:	d102      	bne.n	810423e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8104238:	4b5e      	ldr	r3, [pc, #376]	; (81043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810423a:	60bb      	str	r3, [r7, #8]
 810423c:	e001      	b.n	8104242 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 810423e:	2300      	movs	r3, #0
 8104240:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8104242:	68bb      	ldr	r3, [r7, #8]
 8104244:	2b00      	cmp	r3, #0
 8104246:	d10b      	bne.n	8104260 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810424c:	f043 0220 	orr.w	r2, r3, #32
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8104254:	687b      	ldr	r3, [r7, #4]
 8104256:	2200      	movs	r2, #0
 8104258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 810425c:	2301      	movs	r3, #1
 810425e:	e0a3      	b.n	81043a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8104260:	68bb      	ldr	r3, [r7, #8]
 8104262:	4618      	mov	r0, r3
 8104264:	f7ff ffb9 	bl	81041da <LL_ADC_REG_IsConversionOngoing>
 8104268:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	681b      	ldr	r3, [r3, #0]
 810426e:	4618      	mov	r0, r3
 8104270:	f7ff ffb3 	bl	81041da <LL_ADC_REG_IsConversionOngoing>
 8104274:	4603      	mov	r3, r0
 8104276:	2b00      	cmp	r3, #0
 8104278:	f040 8085 	bne.w	8104386 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 810427c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810427e:	2b00      	cmp	r3, #0
 8104280:	f040 8081 	bne.w	8104386 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	681b      	ldr	r3, [r3, #0]
 8104288:	4a49      	ldr	r2, [pc, #292]	; (81043b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810428a:	4293      	cmp	r3, r2
 810428c:	d004      	beq.n	8104298 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810428e:	687b      	ldr	r3, [r7, #4]
 8104290:	681b      	ldr	r3, [r3, #0]
 8104292:	4a48      	ldr	r2, [pc, #288]	; (81043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104294:	4293      	cmp	r3, r2
 8104296:	d101      	bne.n	810429c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8104298:	4b47      	ldr	r3, [pc, #284]	; (81043b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 810429a:	e000      	b.n	810429e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 810429c:	4b47      	ldr	r3, [pc, #284]	; (81043bc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810429e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81042a0:	683b      	ldr	r3, [r7, #0]
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	2b00      	cmp	r3, #0
 81042a6:	d03b      	beq.n	8104320 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81042a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81042aa:	689b      	ldr	r3, [r3, #8]
 81042ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81042b0:	683b      	ldr	r3, [r7, #0]
 81042b2:	685b      	ldr	r3, [r3, #4]
 81042b4:	431a      	orrs	r2, r3
 81042b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81042b8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81042ba:	687b      	ldr	r3, [r7, #4]
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	4a3c      	ldr	r2, [pc, #240]	; (81043b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81042c0:	4293      	cmp	r3, r2
 81042c2:	d004      	beq.n	81042ce <HAL_ADCEx_MultiModeConfigChannel+0xce>
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	681b      	ldr	r3, [r3, #0]
 81042c8:	4a3a      	ldr	r2, [pc, #232]	; (81043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81042ca:	4293      	cmp	r3, r2
 81042cc:	d10e      	bne.n	81042ec <HAL_ADCEx_MultiModeConfigChannel+0xec>
 81042ce:	4838      	ldr	r0, [pc, #224]	; (81043b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81042d0:	f7ff ff70 	bl	81041b4 <LL_ADC_IsEnabled>
 81042d4:	4604      	mov	r4, r0
 81042d6:	4837      	ldr	r0, [pc, #220]	; (81043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81042d8:	f7ff ff6c 	bl	81041b4 <LL_ADC_IsEnabled>
 81042dc:	4603      	mov	r3, r0
 81042de:	4323      	orrs	r3, r4
 81042e0:	2b00      	cmp	r3, #0
 81042e2:	bf0c      	ite	eq
 81042e4:	2301      	moveq	r3, #1
 81042e6:	2300      	movne	r3, #0
 81042e8:	b2db      	uxtb	r3, r3
 81042ea:	e008      	b.n	81042fe <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 81042ec:	4834      	ldr	r0, [pc, #208]	; (81043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81042ee:	f7ff ff61 	bl	81041b4 <LL_ADC_IsEnabled>
 81042f2:	4603      	mov	r3, r0
 81042f4:	2b00      	cmp	r3, #0
 81042f6:	bf0c      	ite	eq
 81042f8:	2301      	moveq	r3, #1
 81042fa:	2300      	movne	r3, #0
 81042fc:	b2db      	uxtb	r3, r3
 81042fe:	2b00      	cmp	r3, #0
 8104300:	d04b      	beq.n	810439a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8104302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104304:	689b      	ldr	r3, [r3, #8]
 8104306:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 810430a:	f023 030f 	bic.w	r3, r3, #15
 810430e:	683a      	ldr	r2, [r7, #0]
 8104310:	6811      	ldr	r1, [r2, #0]
 8104312:	683a      	ldr	r2, [r7, #0]
 8104314:	6892      	ldr	r2, [r2, #8]
 8104316:	430a      	orrs	r2, r1
 8104318:	431a      	orrs	r2, r3
 810431a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810431c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810431e:	e03c      	b.n	810439a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8104320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104322:	689b      	ldr	r3, [r3, #8]
 8104324:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8104328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810432a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810432c:	687b      	ldr	r3, [r7, #4]
 810432e:	681b      	ldr	r3, [r3, #0]
 8104330:	4a1f      	ldr	r2, [pc, #124]	; (81043b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104332:	4293      	cmp	r3, r2
 8104334:	d004      	beq.n	8104340 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8104336:	687b      	ldr	r3, [r7, #4]
 8104338:	681b      	ldr	r3, [r3, #0]
 810433a:	4a1e      	ldr	r2, [pc, #120]	; (81043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810433c:	4293      	cmp	r3, r2
 810433e:	d10e      	bne.n	810435e <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8104340:	481b      	ldr	r0, [pc, #108]	; (81043b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104342:	f7ff ff37 	bl	81041b4 <LL_ADC_IsEnabled>
 8104346:	4604      	mov	r4, r0
 8104348:	481a      	ldr	r0, [pc, #104]	; (81043b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810434a:	f7ff ff33 	bl	81041b4 <LL_ADC_IsEnabled>
 810434e:	4603      	mov	r3, r0
 8104350:	4323      	orrs	r3, r4
 8104352:	2b00      	cmp	r3, #0
 8104354:	bf0c      	ite	eq
 8104356:	2301      	moveq	r3, #1
 8104358:	2300      	movne	r3, #0
 810435a:	b2db      	uxtb	r3, r3
 810435c:	e008      	b.n	8104370 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 810435e:	4818      	ldr	r0, [pc, #96]	; (81043c0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104360:	f7ff ff28 	bl	81041b4 <LL_ADC_IsEnabled>
 8104364:	4603      	mov	r3, r0
 8104366:	2b00      	cmp	r3, #0
 8104368:	bf0c      	ite	eq
 810436a:	2301      	moveq	r3, #1
 810436c:	2300      	movne	r3, #0
 810436e:	b2db      	uxtb	r3, r3
 8104370:	2b00      	cmp	r3, #0
 8104372:	d012      	beq.n	810439a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8104374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104376:	689b      	ldr	r3, [r3, #8]
 8104378:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 810437c:	f023 030f 	bic.w	r3, r3, #15
 8104380:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8104382:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104384:	e009      	b.n	810439a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104386:	687b      	ldr	r3, [r7, #4]
 8104388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810438a:	f043 0220 	orr.w	r2, r3, #32
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8104392:	2301      	movs	r3, #1
 8104394:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8104398:	e000      	b.n	810439c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810439a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	2200      	movs	r2, #0
 81043a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81043a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 81043a8:	4618      	mov	r0, r3
 81043aa:	377c      	adds	r7, #124	; 0x7c
 81043ac:	46bd      	mov	sp, r7
 81043ae:	bd90      	pop	{r4, r7, pc}
 81043b0:	40022000 	.word	0x40022000
 81043b4:	40022100 	.word	0x40022100
 81043b8:	40022300 	.word	0x40022300
 81043bc:	58026300 	.word	0x58026300
 81043c0:	58026000 	.word	0x58026000

081043c4 <__NVIC_SetPriorityGrouping>:
{
 81043c4:	b480      	push	{r7}
 81043c6:	b085      	sub	sp, #20
 81043c8:	af00      	add	r7, sp, #0
 81043ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	f003 0307 	and.w	r3, r3, #7
 81043d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81043d4:	4b0c      	ldr	r3, [pc, #48]	; (8104408 <__NVIC_SetPriorityGrouping+0x44>)
 81043d6:	68db      	ldr	r3, [r3, #12]
 81043d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81043da:	68ba      	ldr	r2, [r7, #8]
 81043dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81043e0:	4013      	ands	r3, r2
 81043e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81043e4:	68fb      	ldr	r3, [r7, #12]
 81043e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81043e8:	68bb      	ldr	r3, [r7, #8]
 81043ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81043ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81043f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81043f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81043f6:	4a04      	ldr	r2, [pc, #16]	; (8104408 <__NVIC_SetPriorityGrouping+0x44>)
 81043f8:	68bb      	ldr	r3, [r7, #8]
 81043fa:	60d3      	str	r3, [r2, #12]
}
 81043fc:	bf00      	nop
 81043fe:	3714      	adds	r7, #20
 8104400:	46bd      	mov	sp, r7
 8104402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104406:	4770      	bx	lr
 8104408:	e000ed00 	.word	0xe000ed00

0810440c <__NVIC_GetPriorityGrouping>:
{
 810440c:	b480      	push	{r7}
 810440e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104410:	4b04      	ldr	r3, [pc, #16]	; (8104424 <__NVIC_GetPriorityGrouping+0x18>)
 8104412:	68db      	ldr	r3, [r3, #12]
 8104414:	0a1b      	lsrs	r3, r3, #8
 8104416:	f003 0307 	and.w	r3, r3, #7
}
 810441a:	4618      	mov	r0, r3
 810441c:	46bd      	mov	sp, r7
 810441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104422:	4770      	bx	lr
 8104424:	e000ed00 	.word	0xe000ed00

08104428 <__NVIC_EnableIRQ>:
{
 8104428:	b480      	push	{r7}
 810442a:	b083      	sub	sp, #12
 810442c:	af00      	add	r7, sp, #0
 810442e:	4603      	mov	r3, r0
 8104430:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104436:	2b00      	cmp	r3, #0
 8104438:	db0b      	blt.n	8104452 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810443a:	88fb      	ldrh	r3, [r7, #6]
 810443c:	f003 021f 	and.w	r2, r3, #31
 8104440:	4907      	ldr	r1, [pc, #28]	; (8104460 <__NVIC_EnableIRQ+0x38>)
 8104442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104446:	095b      	lsrs	r3, r3, #5
 8104448:	2001      	movs	r0, #1
 810444a:	fa00 f202 	lsl.w	r2, r0, r2
 810444e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8104452:	bf00      	nop
 8104454:	370c      	adds	r7, #12
 8104456:	46bd      	mov	sp, r7
 8104458:	f85d 7b04 	ldr.w	r7, [sp], #4
 810445c:	4770      	bx	lr
 810445e:	bf00      	nop
 8104460:	e000e100 	.word	0xe000e100

08104464 <__NVIC_SetPriority>:
{
 8104464:	b480      	push	{r7}
 8104466:	b083      	sub	sp, #12
 8104468:	af00      	add	r7, sp, #0
 810446a:	4603      	mov	r3, r0
 810446c:	6039      	str	r1, [r7, #0]
 810446e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104474:	2b00      	cmp	r3, #0
 8104476:	db0a      	blt.n	810448e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104478:	683b      	ldr	r3, [r7, #0]
 810447a:	b2da      	uxtb	r2, r3
 810447c:	490c      	ldr	r1, [pc, #48]	; (81044b0 <__NVIC_SetPriority+0x4c>)
 810447e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104482:	0112      	lsls	r2, r2, #4
 8104484:	b2d2      	uxtb	r2, r2
 8104486:	440b      	add	r3, r1
 8104488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 810448c:	e00a      	b.n	81044a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810448e:	683b      	ldr	r3, [r7, #0]
 8104490:	b2da      	uxtb	r2, r3
 8104492:	4908      	ldr	r1, [pc, #32]	; (81044b4 <__NVIC_SetPriority+0x50>)
 8104494:	88fb      	ldrh	r3, [r7, #6]
 8104496:	f003 030f 	and.w	r3, r3, #15
 810449a:	3b04      	subs	r3, #4
 810449c:	0112      	lsls	r2, r2, #4
 810449e:	b2d2      	uxtb	r2, r2
 81044a0:	440b      	add	r3, r1
 81044a2:	761a      	strb	r2, [r3, #24]
}
 81044a4:	bf00      	nop
 81044a6:	370c      	adds	r7, #12
 81044a8:	46bd      	mov	sp, r7
 81044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044ae:	4770      	bx	lr
 81044b0:	e000e100 	.word	0xe000e100
 81044b4:	e000ed00 	.word	0xe000ed00

081044b8 <NVIC_EncodePriority>:
{
 81044b8:	b480      	push	{r7}
 81044ba:	b089      	sub	sp, #36	; 0x24
 81044bc:	af00      	add	r7, sp, #0
 81044be:	60f8      	str	r0, [r7, #12]
 81044c0:	60b9      	str	r1, [r7, #8]
 81044c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81044c4:	68fb      	ldr	r3, [r7, #12]
 81044c6:	f003 0307 	and.w	r3, r3, #7
 81044ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81044cc:	69fb      	ldr	r3, [r7, #28]
 81044ce:	f1c3 0307 	rsb	r3, r3, #7
 81044d2:	2b04      	cmp	r3, #4
 81044d4:	bf28      	it	cs
 81044d6:	2304      	movcs	r3, #4
 81044d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81044da:	69fb      	ldr	r3, [r7, #28]
 81044dc:	3304      	adds	r3, #4
 81044de:	2b06      	cmp	r3, #6
 81044e0:	d902      	bls.n	81044e8 <NVIC_EncodePriority+0x30>
 81044e2:	69fb      	ldr	r3, [r7, #28]
 81044e4:	3b03      	subs	r3, #3
 81044e6:	e000      	b.n	81044ea <NVIC_EncodePriority+0x32>
 81044e8:	2300      	movs	r3, #0
 81044ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81044ec:	f04f 32ff 	mov.w	r2, #4294967295
 81044f0:	69bb      	ldr	r3, [r7, #24]
 81044f2:	fa02 f303 	lsl.w	r3, r2, r3
 81044f6:	43da      	mvns	r2, r3
 81044f8:	68bb      	ldr	r3, [r7, #8]
 81044fa:	401a      	ands	r2, r3
 81044fc:	697b      	ldr	r3, [r7, #20]
 81044fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104500:	f04f 31ff 	mov.w	r1, #4294967295
 8104504:	697b      	ldr	r3, [r7, #20]
 8104506:	fa01 f303 	lsl.w	r3, r1, r3
 810450a:	43d9      	mvns	r1, r3
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104510:	4313      	orrs	r3, r2
}
 8104512:	4618      	mov	r0, r3
 8104514:	3724      	adds	r7, #36	; 0x24
 8104516:	46bd      	mov	sp, r7
 8104518:	f85d 7b04 	ldr.w	r7, [sp], #4
 810451c:	4770      	bx	lr
	...

08104520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8104520:	b580      	push	{r7, lr}
 8104522:	b082      	sub	sp, #8
 8104524:	af00      	add	r7, sp, #0
 8104526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	3b01      	subs	r3, #1
 810452c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104530:	d301      	bcc.n	8104536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8104532:	2301      	movs	r3, #1
 8104534:	e00f      	b.n	8104556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8104536:	4a0a      	ldr	r2, [pc, #40]	; (8104560 <SysTick_Config+0x40>)
 8104538:	687b      	ldr	r3, [r7, #4]
 810453a:	3b01      	subs	r3, #1
 810453c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810453e:	210f      	movs	r1, #15
 8104540:	f04f 30ff 	mov.w	r0, #4294967295
 8104544:	f7ff ff8e 	bl	8104464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8104548:	4b05      	ldr	r3, [pc, #20]	; (8104560 <SysTick_Config+0x40>)
 810454a:	2200      	movs	r2, #0
 810454c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810454e:	4b04      	ldr	r3, [pc, #16]	; (8104560 <SysTick_Config+0x40>)
 8104550:	2207      	movs	r2, #7
 8104552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8104554:	2300      	movs	r3, #0
}
 8104556:	4618      	mov	r0, r3
 8104558:	3708      	adds	r7, #8
 810455a:	46bd      	mov	sp, r7
 810455c:	bd80      	pop	{r7, pc}
 810455e:	bf00      	nop
 8104560:	e000e010 	.word	0xe000e010

08104564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104564:	b580      	push	{r7, lr}
 8104566:	b082      	sub	sp, #8
 8104568:	af00      	add	r7, sp, #0
 810456a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810456c:	6878      	ldr	r0, [r7, #4]
 810456e:	f7ff ff29 	bl	81043c4 <__NVIC_SetPriorityGrouping>
}
 8104572:	bf00      	nop
 8104574:	3708      	adds	r7, #8
 8104576:	46bd      	mov	sp, r7
 8104578:	bd80      	pop	{r7, pc}

0810457a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810457a:	b580      	push	{r7, lr}
 810457c:	b086      	sub	sp, #24
 810457e:	af00      	add	r7, sp, #0
 8104580:	4603      	mov	r3, r0
 8104582:	60b9      	str	r1, [r7, #8]
 8104584:	607a      	str	r2, [r7, #4]
 8104586:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8104588:	f7ff ff40 	bl	810440c <__NVIC_GetPriorityGrouping>
 810458c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810458e:	687a      	ldr	r2, [r7, #4]
 8104590:	68b9      	ldr	r1, [r7, #8]
 8104592:	6978      	ldr	r0, [r7, #20]
 8104594:	f7ff ff90 	bl	81044b8 <NVIC_EncodePriority>
 8104598:	4602      	mov	r2, r0
 810459a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810459e:	4611      	mov	r1, r2
 81045a0:	4618      	mov	r0, r3
 81045a2:	f7ff ff5f 	bl	8104464 <__NVIC_SetPriority>
}
 81045a6:	bf00      	nop
 81045a8:	3718      	adds	r7, #24
 81045aa:	46bd      	mov	sp, r7
 81045ac:	bd80      	pop	{r7, pc}

081045ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81045ae:	b580      	push	{r7, lr}
 81045b0:	b082      	sub	sp, #8
 81045b2:	af00      	add	r7, sp, #0
 81045b4:	4603      	mov	r3, r0
 81045b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81045b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81045bc:	4618      	mov	r0, r3
 81045be:	f7ff ff33 	bl	8104428 <__NVIC_EnableIRQ>
}
 81045c2:	bf00      	nop
 81045c4:	3708      	adds	r7, #8
 81045c6:	46bd      	mov	sp, r7
 81045c8:	bd80      	pop	{r7, pc}

081045ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81045ca:	b580      	push	{r7, lr}
 81045cc:	b082      	sub	sp, #8
 81045ce:	af00      	add	r7, sp, #0
 81045d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81045d2:	6878      	ldr	r0, [r7, #4]
 81045d4:	f7ff ffa4 	bl	8104520 <SysTick_Config>
 81045d8:	4603      	mov	r3, r0
}
 81045da:	4618      	mov	r0, r3
 81045dc:	3708      	adds	r7, #8
 81045de:	46bd      	mov	sp, r7
 81045e0:	bd80      	pop	{r7, pc}
	...

081045e4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81045e4:	b480      	push	{r7}
 81045e6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81045e8:	4b07      	ldr	r3, [pc, #28]	; (8104608 <HAL_GetCurrentCPUID+0x24>)
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	091b      	lsrs	r3, r3, #4
 81045ee:	f003 030f 	and.w	r3, r3, #15
 81045f2:	2b07      	cmp	r3, #7
 81045f4:	d101      	bne.n	81045fa <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81045f6:	2303      	movs	r3, #3
 81045f8:	e000      	b.n	81045fc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81045fa:	2301      	movs	r3, #1
  }
}
 81045fc:	4618      	mov	r0, r3
 81045fe:	46bd      	mov	sp, r7
 8104600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104604:	4770      	bx	lr
 8104606:	bf00      	nop
 8104608:	e000ed00 	.word	0xe000ed00

0810460c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810460c:	b480      	push	{r7}
 810460e:	b089      	sub	sp, #36	; 0x24
 8104610:	af00      	add	r7, sp, #0
 8104612:	6078      	str	r0, [r7, #4]
 8104614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104616:	2300      	movs	r3, #0
 8104618:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810461a:	4b89      	ldr	r3, [pc, #548]	; (8104840 <HAL_GPIO_Init+0x234>)
 810461c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810461e:	e194      	b.n	810494a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104620:	683b      	ldr	r3, [r7, #0]
 8104622:	681a      	ldr	r2, [r3, #0]
 8104624:	2101      	movs	r1, #1
 8104626:	69fb      	ldr	r3, [r7, #28]
 8104628:	fa01 f303 	lsl.w	r3, r1, r3
 810462c:	4013      	ands	r3, r2
 810462e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104630:	693b      	ldr	r3, [r7, #16]
 8104632:	2b00      	cmp	r3, #0
 8104634:	f000 8186 	beq.w	8104944 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104638:	683b      	ldr	r3, [r7, #0]
 810463a:	685b      	ldr	r3, [r3, #4]
 810463c:	f003 0303 	and.w	r3, r3, #3
 8104640:	2b01      	cmp	r3, #1
 8104642:	d005      	beq.n	8104650 <HAL_GPIO_Init+0x44>
 8104644:	683b      	ldr	r3, [r7, #0]
 8104646:	685b      	ldr	r3, [r3, #4]
 8104648:	f003 0303 	and.w	r3, r3, #3
 810464c:	2b02      	cmp	r3, #2
 810464e:	d130      	bne.n	81046b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104650:	687b      	ldr	r3, [r7, #4]
 8104652:	689b      	ldr	r3, [r3, #8]
 8104654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104656:	69fb      	ldr	r3, [r7, #28]
 8104658:	005b      	lsls	r3, r3, #1
 810465a:	2203      	movs	r2, #3
 810465c:	fa02 f303 	lsl.w	r3, r2, r3
 8104660:	43db      	mvns	r3, r3
 8104662:	69ba      	ldr	r2, [r7, #24]
 8104664:	4013      	ands	r3, r2
 8104666:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104668:	683b      	ldr	r3, [r7, #0]
 810466a:	68da      	ldr	r2, [r3, #12]
 810466c:	69fb      	ldr	r3, [r7, #28]
 810466e:	005b      	lsls	r3, r3, #1
 8104670:	fa02 f303 	lsl.w	r3, r2, r3
 8104674:	69ba      	ldr	r2, [r7, #24]
 8104676:	4313      	orrs	r3, r2
 8104678:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810467a:	687b      	ldr	r3, [r7, #4]
 810467c:	69ba      	ldr	r2, [r7, #24]
 810467e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104680:	687b      	ldr	r3, [r7, #4]
 8104682:	685b      	ldr	r3, [r3, #4]
 8104684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104686:	2201      	movs	r2, #1
 8104688:	69fb      	ldr	r3, [r7, #28]
 810468a:	fa02 f303 	lsl.w	r3, r2, r3
 810468e:	43db      	mvns	r3, r3
 8104690:	69ba      	ldr	r2, [r7, #24]
 8104692:	4013      	ands	r3, r2
 8104694:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104696:	683b      	ldr	r3, [r7, #0]
 8104698:	685b      	ldr	r3, [r3, #4]
 810469a:	091b      	lsrs	r3, r3, #4
 810469c:	f003 0201 	and.w	r2, r3, #1
 81046a0:	69fb      	ldr	r3, [r7, #28]
 81046a2:	fa02 f303 	lsl.w	r3, r2, r3
 81046a6:	69ba      	ldr	r2, [r7, #24]
 81046a8:	4313      	orrs	r3, r2
 81046aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81046ac:	687b      	ldr	r3, [r7, #4]
 81046ae:	69ba      	ldr	r2, [r7, #24]
 81046b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81046b2:	683b      	ldr	r3, [r7, #0]
 81046b4:	685b      	ldr	r3, [r3, #4]
 81046b6:	f003 0303 	and.w	r3, r3, #3
 81046ba:	2b03      	cmp	r3, #3
 81046bc:	d017      	beq.n	81046ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81046be:	687b      	ldr	r3, [r7, #4]
 81046c0:	68db      	ldr	r3, [r3, #12]
 81046c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81046c4:	69fb      	ldr	r3, [r7, #28]
 81046c6:	005b      	lsls	r3, r3, #1
 81046c8:	2203      	movs	r2, #3
 81046ca:	fa02 f303 	lsl.w	r3, r2, r3
 81046ce:	43db      	mvns	r3, r3
 81046d0:	69ba      	ldr	r2, [r7, #24]
 81046d2:	4013      	ands	r3, r2
 81046d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81046d6:	683b      	ldr	r3, [r7, #0]
 81046d8:	689a      	ldr	r2, [r3, #8]
 81046da:	69fb      	ldr	r3, [r7, #28]
 81046dc:	005b      	lsls	r3, r3, #1
 81046de:	fa02 f303 	lsl.w	r3, r2, r3
 81046e2:	69ba      	ldr	r2, [r7, #24]
 81046e4:	4313      	orrs	r3, r2
 81046e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	69ba      	ldr	r2, [r7, #24]
 81046ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81046ee:	683b      	ldr	r3, [r7, #0]
 81046f0:	685b      	ldr	r3, [r3, #4]
 81046f2:	f003 0303 	and.w	r3, r3, #3
 81046f6:	2b02      	cmp	r3, #2
 81046f8:	d123      	bne.n	8104742 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81046fa:	69fb      	ldr	r3, [r7, #28]
 81046fc:	08da      	lsrs	r2, r3, #3
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	3208      	adds	r2, #8
 8104702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104708:	69fb      	ldr	r3, [r7, #28]
 810470a:	f003 0307 	and.w	r3, r3, #7
 810470e:	009b      	lsls	r3, r3, #2
 8104710:	220f      	movs	r2, #15
 8104712:	fa02 f303 	lsl.w	r3, r2, r3
 8104716:	43db      	mvns	r3, r3
 8104718:	69ba      	ldr	r2, [r7, #24]
 810471a:	4013      	ands	r3, r2
 810471c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810471e:	683b      	ldr	r3, [r7, #0]
 8104720:	691a      	ldr	r2, [r3, #16]
 8104722:	69fb      	ldr	r3, [r7, #28]
 8104724:	f003 0307 	and.w	r3, r3, #7
 8104728:	009b      	lsls	r3, r3, #2
 810472a:	fa02 f303 	lsl.w	r3, r2, r3
 810472e:	69ba      	ldr	r2, [r7, #24]
 8104730:	4313      	orrs	r3, r2
 8104732:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104734:	69fb      	ldr	r3, [r7, #28]
 8104736:	08da      	lsrs	r2, r3, #3
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	3208      	adds	r2, #8
 810473c:	69b9      	ldr	r1, [r7, #24]
 810473e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104748:	69fb      	ldr	r3, [r7, #28]
 810474a:	005b      	lsls	r3, r3, #1
 810474c:	2203      	movs	r2, #3
 810474e:	fa02 f303 	lsl.w	r3, r2, r3
 8104752:	43db      	mvns	r3, r3
 8104754:	69ba      	ldr	r2, [r7, #24]
 8104756:	4013      	ands	r3, r2
 8104758:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810475a:	683b      	ldr	r3, [r7, #0]
 810475c:	685b      	ldr	r3, [r3, #4]
 810475e:	f003 0203 	and.w	r2, r3, #3
 8104762:	69fb      	ldr	r3, [r7, #28]
 8104764:	005b      	lsls	r3, r3, #1
 8104766:	fa02 f303 	lsl.w	r3, r2, r3
 810476a:	69ba      	ldr	r2, [r7, #24]
 810476c:	4313      	orrs	r3, r2
 810476e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	69ba      	ldr	r2, [r7, #24]
 8104774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104776:	683b      	ldr	r3, [r7, #0]
 8104778:	685b      	ldr	r3, [r3, #4]
 810477a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810477e:	2b00      	cmp	r3, #0
 8104780:	f000 80e0 	beq.w	8104944 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104784:	4b2f      	ldr	r3, [pc, #188]	; (8104844 <HAL_GPIO_Init+0x238>)
 8104786:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810478a:	4a2e      	ldr	r2, [pc, #184]	; (8104844 <HAL_GPIO_Init+0x238>)
 810478c:	f043 0302 	orr.w	r3, r3, #2
 8104790:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104794:	4b2b      	ldr	r3, [pc, #172]	; (8104844 <HAL_GPIO_Init+0x238>)
 8104796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810479a:	f003 0302 	and.w	r3, r3, #2
 810479e:	60fb      	str	r3, [r7, #12]
 81047a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81047a2:	4a29      	ldr	r2, [pc, #164]	; (8104848 <HAL_GPIO_Init+0x23c>)
 81047a4:	69fb      	ldr	r3, [r7, #28]
 81047a6:	089b      	lsrs	r3, r3, #2
 81047a8:	3302      	adds	r3, #2
 81047aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81047ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81047b0:	69fb      	ldr	r3, [r7, #28]
 81047b2:	f003 0303 	and.w	r3, r3, #3
 81047b6:	009b      	lsls	r3, r3, #2
 81047b8:	220f      	movs	r2, #15
 81047ba:	fa02 f303 	lsl.w	r3, r2, r3
 81047be:	43db      	mvns	r3, r3
 81047c0:	69ba      	ldr	r2, [r7, #24]
 81047c2:	4013      	ands	r3, r2
 81047c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81047c6:	687b      	ldr	r3, [r7, #4]
 81047c8:	4a20      	ldr	r2, [pc, #128]	; (810484c <HAL_GPIO_Init+0x240>)
 81047ca:	4293      	cmp	r3, r2
 81047cc:	d052      	beq.n	8104874 <HAL_GPIO_Init+0x268>
 81047ce:	687b      	ldr	r3, [r7, #4]
 81047d0:	4a1f      	ldr	r2, [pc, #124]	; (8104850 <HAL_GPIO_Init+0x244>)
 81047d2:	4293      	cmp	r3, r2
 81047d4:	d031      	beq.n	810483a <HAL_GPIO_Init+0x22e>
 81047d6:	687b      	ldr	r3, [r7, #4]
 81047d8:	4a1e      	ldr	r2, [pc, #120]	; (8104854 <HAL_GPIO_Init+0x248>)
 81047da:	4293      	cmp	r3, r2
 81047dc:	d02b      	beq.n	8104836 <HAL_GPIO_Init+0x22a>
 81047de:	687b      	ldr	r3, [r7, #4]
 81047e0:	4a1d      	ldr	r2, [pc, #116]	; (8104858 <HAL_GPIO_Init+0x24c>)
 81047e2:	4293      	cmp	r3, r2
 81047e4:	d025      	beq.n	8104832 <HAL_GPIO_Init+0x226>
 81047e6:	687b      	ldr	r3, [r7, #4]
 81047e8:	4a1c      	ldr	r2, [pc, #112]	; (810485c <HAL_GPIO_Init+0x250>)
 81047ea:	4293      	cmp	r3, r2
 81047ec:	d01f      	beq.n	810482e <HAL_GPIO_Init+0x222>
 81047ee:	687b      	ldr	r3, [r7, #4]
 81047f0:	4a1b      	ldr	r2, [pc, #108]	; (8104860 <HAL_GPIO_Init+0x254>)
 81047f2:	4293      	cmp	r3, r2
 81047f4:	d019      	beq.n	810482a <HAL_GPIO_Init+0x21e>
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	4a1a      	ldr	r2, [pc, #104]	; (8104864 <HAL_GPIO_Init+0x258>)
 81047fa:	4293      	cmp	r3, r2
 81047fc:	d013      	beq.n	8104826 <HAL_GPIO_Init+0x21a>
 81047fe:	687b      	ldr	r3, [r7, #4]
 8104800:	4a19      	ldr	r2, [pc, #100]	; (8104868 <HAL_GPIO_Init+0x25c>)
 8104802:	4293      	cmp	r3, r2
 8104804:	d00d      	beq.n	8104822 <HAL_GPIO_Init+0x216>
 8104806:	687b      	ldr	r3, [r7, #4]
 8104808:	4a18      	ldr	r2, [pc, #96]	; (810486c <HAL_GPIO_Init+0x260>)
 810480a:	4293      	cmp	r3, r2
 810480c:	d007      	beq.n	810481e <HAL_GPIO_Init+0x212>
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	4a17      	ldr	r2, [pc, #92]	; (8104870 <HAL_GPIO_Init+0x264>)
 8104812:	4293      	cmp	r3, r2
 8104814:	d101      	bne.n	810481a <HAL_GPIO_Init+0x20e>
 8104816:	2309      	movs	r3, #9
 8104818:	e02d      	b.n	8104876 <HAL_GPIO_Init+0x26a>
 810481a:	230a      	movs	r3, #10
 810481c:	e02b      	b.n	8104876 <HAL_GPIO_Init+0x26a>
 810481e:	2308      	movs	r3, #8
 8104820:	e029      	b.n	8104876 <HAL_GPIO_Init+0x26a>
 8104822:	2307      	movs	r3, #7
 8104824:	e027      	b.n	8104876 <HAL_GPIO_Init+0x26a>
 8104826:	2306      	movs	r3, #6
 8104828:	e025      	b.n	8104876 <HAL_GPIO_Init+0x26a>
 810482a:	2305      	movs	r3, #5
 810482c:	e023      	b.n	8104876 <HAL_GPIO_Init+0x26a>
 810482e:	2304      	movs	r3, #4
 8104830:	e021      	b.n	8104876 <HAL_GPIO_Init+0x26a>
 8104832:	2303      	movs	r3, #3
 8104834:	e01f      	b.n	8104876 <HAL_GPIO_Init+0x26a>
 8104836:	2302      	movs	r3, #2
 8104838:	e01d      	b.n	8104876 <HAL_GPIO_Init+0x26a>
 810483a:	2301      	movs	r3, #1
 810483c:	e01b      	b.n	8104876 <HAL_GPIO_Init+0x26a>
 810483e:	bf00      	nop
 8104840:	580000c0 	.word	0x580000c0
 8104844:	58024400 	.word	0x58024400
 8104848:	58000400 	.word	0x58000400
 810484c:	58020000 	.word	0x58020000
 8104850:	58020400 	.word	0x58020400
 8104854:	58020800 	.word	0x58020800
 8104858:	58020c00 	.word	0x58020c00
 810485c:	58021000 	.word	0x58021000
 8104860:	58021400 	.word	0x58021400
 8104864:	58021800 	.word	0x58021800
 8104868:	58021c00 	.word	0x58021c00
 810486c:	58022000 	.word	0x58022000
 8104870:	58022400 	.word	0x58022400
 8104874:	2300      	movs	r3, #0
 8104876:	69fa      	ldr	r2, [r7, #28]
 8104878:	f002 0203 	and.w	r2, r2, #3
 810487c:	0092      	lsls	r2, r2, #2
 810487e:	4093      	lsls	r3, r2
 8104880:	69ba      	ldr	r2, [r7, #24]
 8104882:	4313      	orrs	r3, r2
 8104884:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104886:	4938      	ldr	r1, [pc, #224]	; (8104968 <HAL_GPIO_Init+0x35c>)
 8104888:	69fb      	ldr	r3, [r7, #28]
 810488a:	089b      	lsrs	r3, r3, #2
 810488c:	3302      	adds	r3, #2
 810488e:	69ba      	ldr	r2, [r7, #24]
 8104890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810489c:	693b      	ldr	r3, [r7, #16]
 810489e:	43db      	mvns	r3, r3
 81048a0:	69ba      	ldr	r2, [r7, #24]
 81048a2:	4013      	ands	r3, r2
 81048a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81048a6:	683b      	ldr	r3, [r7, #0]
 81048a8:	685b      	ldr	r3, [r3, #4]
 81048aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81048ae:	2b00      	cmp	r3, #0
 81048b0:	d003      	beq.n	81048ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81048b2:	69ba      	ldr	r2, [r7, #24]
 81048b4:	693b      	ldr	r3, [r7, #16]
 81048b6:	4313      	orrs	r3, r2
 81048b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81048ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81048be:	69bb      	ldr	r3, [r7, #24]
 81048c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81048c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81048c6:	685b      	ldr	r3, [r3, #4]
 81048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81048ca:	693b      	ldr	r3, [r7, #16]
 81048cc:	43db      	mvns	r3, r3
 81048ce:	69ba      	ldr	r2, [r7, #24]
 81048d0:	4013      	ands	r3, r2
 81048d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81048d4:	683b      	ldr	r3, [r7, #0]
 81048d6:	685b      	ldr	r3, [r3, #4]
 81048d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81048dc:	2b00      	cmp	r3, #0
 81048de:	d003      	beq.n	81048e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81048e0:	69ba      	ldr	r2, [r7, #24]
 81048e2:	693b      	ldr	r3, [r7, #16]
 81048e4:	4313      	orrs	r3, r2
 81048e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81048e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81048ec:	69bb      	ldr	r3, [r7, #24]
 81048ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81048f0:	697b      	ldr	r3, [r7, #20]
 81048f2:	685b      	ldr	r3, [r3, #4]
 81048f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81048f6:	693b      	ldr	r3, [r7, #16]
 81048f8:	43db      	mvns	r3, r3
 81048fa:	69ba      	ldr	r2, [r7, #24]
 81048fc:	4013      	ands	r3, r2
 81048fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104900:	683b      	ldr	r3, [r7, #0]
 8104902:	685b      	ldr	r3, [r3, #4]
 8104904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104908:	2b00      	cmp	r3, #0
 810490a:	d003      	beq.n	8104914 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810490c:	69ba      	ldr	r2, [r7, #24]
 810490e:	693b      	ldr	r3, [r7, #16]
 8104910:	4313      	orrs	r3, r2
 8104912:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104914:	697b      	ldr	r3, [r7, #20]
 8104916:	69ba      	ldr	r2, [r7, #24]
 8104918:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810491a:	697b      	ldr	r3, [r7, #20]
 810491c:	681b      	ldr	r3, [r3, #0]
 810491e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104920:	693b      	ldr	r3, [r7, #16]
 8104922:	43db      	mvns	r3, r3
 8104924:	69ba      	ldr	r2, [r7, #24]
 8104926:	4013      	ands	r3, r2
 8104928:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810492a:	683b      	ldr	r3, [r7, #0]
 810492c:	685b      	ldr	r3, [r3, #4]
 810492e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104932:	2b00      	cmp	r3, #0
 8104934:	d003      	beq.n	810493e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8104936:	69ba      	ldr	r2, [r7, #24]
 8104938:	693b      	ldr	r3, [r7, #16]
 810493a:	4313      	orrs	r3, r2
 810493c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810493e:	697b      	ldr	r3, [r7, #20]
 8104940:	69ba      	ldr	r2, [r7, #24]
 8104942:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8104944:	69fb      	ldr	r3, [r7, #28]
 8104946:	3301      	adds	r3, #1
 8104948:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810494a:	683b      	ldr	r3, [r7, #0]
 810494c:	681a      	ldr	r2, [r3, #0]
 810494e:	69fb      	ldr	r3, [r7, #28]
 8104950:	fa22 f303 	lsr.w	r3, r2, r3
 8104954:	2b00      	cmp	r3, #0
 8104956:	f47f ae63 	bne.w	8104620 <HAL_GPIO_Init+0x14>
  }
}
 810495a:	bf00      	nop
 810495c:	bf00      	nop
 810495e:	3724      	adds	r7, #36	; 0x24
 8104960:	46bd      	mov	sp, r7
 8104962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104966:	4770      	bx	lr
 8104968:	58000400 	.word	0x58000400

0810496c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 810496c:	b480      	push	{r7}
 810496e:	b085      	sub	sp, #20
 8104970:	af00      	add	r7, sp, #0
 8104972:	6078      	str	r0, [r7, #4]
 8104974:	460b      	mov	r3, r1
 8104976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8104978:	687b      	ldr	r3, [r7, #4]
 810497a:	691a      	ldr	r2, [r3, #16]
 810497c:	887b      	ldrh	r3, [r7, #2]
 810497e:	4013      	ands	r3, r2
 8104980:	2b00      	cmp	r3, #0
 8104982:	d002      	beq.n	810498a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8104984:	2301      	movs	r3, #1
 8104986:	73fb      	strb	r3, [r7, #15]
 8104988:	e001      	b.n	810498e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 810498a:	2300      	movs	r3, #0
 810498c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 810498e:	7bfb      	ldrb	r3, [r7, #15]
}
 8104990:	4618      	mov	r0, r3
 8104992:	3714      	adds	r7, #20
 8104994:	46bd      	mov	sp, r7
 8104996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810499a:	4770      	bx	lr

0810499c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 810499c:	b480      	push	{r7}
 810499e:	b083      	sub	sp, #12
 81049a0:	af00      	add	r7, sp, #0
 81049a2:	6078      	str	r0, [r7, #4]
 81049a4:	460b      	mov	r3, r1
 81049a6:	807b      	strh	r3, [r7, #2]
 81049a8:	4613      	mov	r3, r2
 81049aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81049ac:	787b      	ldrb	r3, [r7, #1]
 81049ae:	2b00      	cmp	r3, #0
 81049b0:	d003      	beq.n	81049ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81049b2:	887a      	ldrh	r2, [r7, #2]
 81049b4:	687b      	ldr	r3, [r7, #4]
 81049b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81049b8:	e003      	b.n	81049c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81049ba:	887b      	ldrh	r3, [r7, #2]
 81049bc:	041a      	lsls	r2, r3, #16
 81049be:	687b      	ldr	r3, [r7, #4]
 81049c0:	619a      	str	r2, [r3, #24]
}
 81049c2:	bf00      	nop
 81049c4:	370c      	adds	r7, #12
 81049c6:	46bd      	mov	sp, r7
 81049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049cc:	4770      	bx	lr
	...

081049d0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 81049d0:	b480      	push	{r7}
 81049d2:	b083      	sub	sp, #12
 81049d4:	af00      	add	r7, sp, #0
 81049d6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 81049d8:	4a08      	ldr	r2, [pc, #32]	; (81049fc <HAL_HSEM_FastTake+0x2c>)
 81049da:	687b      	ldr	r3, [r7, #4]
 81049dc:	3320      	adds	r3, #32
 81049de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81049e2:	4a07      	ldr	r2, [pc, #28]	; (8104a00 <HAL_HSEM_FastTake+0x30>)
 81049e4:	4293      	cmp	r3, r2
 81049e6:	d101      	bne.n	81049ec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 81049e8:	2300      	movs	r3, #0
 81049ea:	e000      	b.n	81049ee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 81049ec:	2301      	movs	r3, #1
}
 81049ee:	4618      	mov	r0, r3
 81049f0:	370c      	adds	r7, #12
 81049f2:	46bd      	mov	sp, r7
 81049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049f8:	4770      	bx	lr
 81049fa:	bf00      	nop
 81049fc:	58026400 	.word	0x58026400
 8104a00:	80000100 	.word	0x80000100

08104a04 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8104a04:	b480      	push	{r7}
 8104a06:	b083      	sub	sp, #12
 8104a08:	af00      	add	r7, sp, #0
 8104a0a:	6078      	str	r0, [r7, #4]
 8104a0c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8104a0e:	4906      	ldr	r1, [pc, #24]	; (8104a28 <HAL_HSEM_Release+0x24>)
 8104a10:	683b      	ldr	r3, [r7, #0]
 8104a12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8104a1c:	bf00      	nop
 8104a1e:	370c      	adds	r7, #12
 8104a20:	46bd      	mov	sp, r7
 8104a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a26:	4770      	bx	lr
 8104a28:	58026400 	.word	0x58026400

08104a2c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104a2c:	b480      	push	{r7}
 8104a2e:	b083      	sub	sp, #12
 8104a30:	af00      	add	r7, sp, #0
 8104a32:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104a34:	4b05      	ldr	r3, [pc, #20]	; (8104a4c <HAL_HSEM_ActivateNotification+0x20>)
 8104a36:	681a      	ldr	r2, [r3, #0]
 8104a38:	4904      	ldr	r1, [pc, #16]	; (8104a4c <HAL_HSEM_ActivateNotification+0x20>)
 8104a3a:	687b      	ldr	r3, [r7, #4]
 8104a3c:	4313      	orrs	r3, r2
 8104a3e:	600b      	str	r3, [r1, #0]
#endif
}
 8104a40:	bf00      	nop
 8104a42:	370c      	adds	r7, #12
 8104a44:	46bd      	mov	sp, r7
 8104a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a4a:	4770      	bx	lr
 8104a4c:	58026510 	.word	0x58026510

08104a50 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8104a50:	b580      	push	{r7, lr}
 8104a52:	b082      	sub	sp, #8
 8104a54:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8104a56:	4b0a      	ldr	r3, [pc, #40]	; (8104a80 <HAL_HSEM_IRQHandler+0x30>)
 8104a58:	68db      	ldr	r3, [r3, #12]
 8104a5a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8104a5c:	4b08      	ldr	r3, [pc, #32]	; (8104a80 <HAL_HSEM_IRQHandler+0x30>)
 8104a5e:	681a      	ldr	r2, [r3, #0]
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	43db      	mvns	r3, r3
 8104a64:	4906      	ldr	r1, [pc, #24]	; (8104a80 <HAL_HSEM_IRQHandler+0x30>)
 8104a66:	4013      	ands	r3, r2
 8104a68:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8104a6a:	4a05      	ldr	r2, [pc, #20]	; (8104a80 <HAL_HSEM_IRQHandler+0x30>)
 8104a6c:	687b      	ldr	r3, [r7, #4]
 8104a6e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8104a70:	6878      	ldr	r0, [r7, #4]
 8104a72:	f7fc f9e3 	bl	8100e3c <HAL_HSEM_FreeCallback>
}
 8104a76:	bf00      	nop
 8104a78:	3708      	adds	r7, #8
 8104a7a:	46bd      	mov	sp, r7
 8104a7c:	bd80      	pop	{r7, pc}
 8104a7e:	bf00      	nop
 8104a80:	58026510 	.word	0x58026510

08104a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104a84:	b580      	push	{r7, lr}
 8104a86:	b082      	sub	sp, #8
 8104a88:	af00      	add	r7, sp, #0
 8104a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104a8c:	687b      	ldr	r3, [r7, #4]
 8104a8e:	2b00      	cmp	r3, #0
 8104a90:	d101      	bne.n	8104a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8104a92:	2301      	movs	r3, #1
 8104a94:	e081      	b.n	8104b9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104a9c:	b2db      	uxtb	r3, r3
 8104a9e:	2b00      	cmp	r3, #0
 8104aa0:	d106      	bne.n	8104ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104aa2:	687b      	ldr	r3, [r7, #4]
 8104aa4:	2200      	movs	r2, #0
 8104aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104aaa:	6878      	ldr	r0, [r7, #4]
 8104aac:	f7fd fd1a 	bl	81024e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	2224      	movs	r2, #36	; 0x24
 8104ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104ab8:	687b      	ldr	r3, [r7, #4]
 8104aba:	681b      	ldr	r3, [r3, #0]
 8104abc:	681a      	ldr	r2, [r3, #0]
 8104abe:	687b      	ldr	r3, [r7, #4]
 8104ac0:	681b      	ldr	r3, [r3, #0]
 8104ac2:	f022 0201 	bic.w	r2, r2, #1
 8104ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104ac8:	687b      	ldr	r3, [r7, #4]
 8104aca:	685a      	ldr	r2, [r3, #4]
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	681b      	ldr	r3, [r3, #0]
 8104ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104ad6:	687b      	ldr	r3, [r7, #4]
 8104ad8:	681b      	ldr	r3, [r3, #0]
 8104ada:	689a      	ldr	r2, [r3, #8]
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8104ae6:	687b      	ldr	r3, [r7, #4]
 8104ae8:	68db      	ldr	r3, [r3, #12]
 8104aea:	2b01      	cmp	r3, #1
 8104aec:	d107      	bne.n	8104afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104aee:	687b      	ldr	r3, [r7, #4]
 8104af0:	689a      	ldr	r2, [r3, #8]
 8104af2:	687b      	ldr	r3, [r7, #4]
 8104af4:	681b      	ldr	r3, [r3, #0]
 8104af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104afa:	609a      	str	r2, [r3, #8]
 8104afc:	e006      	b.n	8104b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104afe:	687b      	ldr	r3, [r7, #4]
 8104b00:	689a      	ldr	r2, [r3, #8]
 8104b02:	687b      	ldr	r3, [r7, #4]
 8104b04:	681b      	ldr	r3, [r3, #0]
 8104b06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8104b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104b0c:	687b      	ldr	r3, [r7, #4]
 8104b0e:	68db      	ldr	r3, [r3, #12]
 8104b10:	2b02      	cmp	r3, #2
 8104b12:	d104      	bne.n	8104b1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	681b      	ldr	r3, [r3, #0]
 8104b22:	685b      	ldr	r3, [r3, #4]
 8104b24:	687a      	ldr	r2, [r7, #4]
 8104b26:	6812      	ldr	r2, [r2, #0]
 8104b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	681b      	ldr	r3, [r3, #0]
 8104b36:	68da      	ldr	r2, [r3, #12]
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	681b      	ldr	r3, [r3, #0]
 8104b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	691a      	ldr	r2, [r3, #16]
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	695b      	ldr	r3, [r3, #20]
 8104b4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	699b      	ldr	r3, [r3, #24]
 8104b52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104b54:	687b      	ldr	r3, [r7, #4]
 8104b56:	681b      	ldr	r3, [r3, #0]
 8104b58:	430a      	orrs	r2, r1
 8104b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	69d9      	ldr	r1, [r3, #28]
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	6a1a      	ldr	r2, [r3, #32]
 8104b64:	687b      	ldr	r3, [r7, #4]
 8104b66:	681b      	ldr	r3, [r3, #0]
 8104b68:	430a      	orrs	r2, r1
 8104b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8104b6c:	687b      	ldr	r3, [r7, #4]
 8104b6e:	681b      	ldr	r3, [r3, #0]
 8104b70:	681a      	ldr	r2, [r3, #0]
 8104b72:	687b      	ldr	r3, [r7, #4]
 8104b74:	681b      	ldr	r3, [r3, #0]
 8104b76:	f042 0201 	orr.w	r2, r2, #1
 8104b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	2200      	movs	r2, #0
 8104b80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8104b82:	687b      	ldr	r3, [r7, #4]
 8104b84:	2220      	movs	r2, #32
 8104b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104b8a:	687b      	ldr	r3, [r7, #4]
 8104b8c:	2200      	movs	r2, #0
 8104b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	2200      	movs	r2, #0
 8104b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8104b98:	2300      	movs	r3, #0
}
 8104b9a:	4618      	mov	r0, r3
 8104b9c:	3708      	adds	r7, #8
 8104b9e:	46bd      	mov	sp, r7
 8104ba0:	bd80      	pop	{r7, pc}
	...

08104ba4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104ba4:	b580      	push	{r7, lr}
 8104ba6:	b088      	sub	sp, #32
 8104ba8:	af02      	add	r7, sp, #8
 8104baa:	60f8      	str	r0, [r7, #12]
 8104bac:	4608      	mov	r0, r1
 8104bae:	4611      	mov	r1, r2
 8104bb0:	461a      	mov	r2, r3
 8104bb2:	4603      	mov	r3, r0
 8104bb4:	817b      	strh	r3, [r7, #10]
 8104bb6:	460b      	mov	r3, r1
 8104bb8:	813b      	strh	r3, [r7, #8]
 8104bba:	4613      	mov	r3, r2
 8104bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104bbe:	68fb      	ldr	r3, [r7, #12]
 8104bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104bc4:	b2db      	uxtb	r3, r3
 8104bc6:	2b20      	cmp	r3, #32
 8104bc8:	f040 80f9 	bne.w	8104dbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8104bcc:	6a3b      	ldr	r3, [r7, #32]
 8104bce:	2b00      	cmp	r3, #0
 8104bd0:	d002      	beq.n	8104bd8 <HAL_I2C_Mem_Write+0x34>
 8104bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8104bd4:	2b00      	cmp	r3, #0
 8104bd6:	d105      	bne.n	8104be4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104bd8:	68fb      	ldr	r3, [r7, #12]
 8104bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104bde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104be0:	2301      	movs	r3, #1
 8104be2:	e0ed      	b.n	8104dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104be4:	68fb      	ldr	r3, [r7, #12]
 8104be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104bea:	2b01      	cmp	r3, #1
 8104bec:	d101      	bne.n	8104bf2 <HAL_I2C_Mem_Write+0x4e>
 8104bee:	2302      	movs	r3, #2
 8104bf0:	e0e6      	b.n	8104dc0 <HAL_I2C_Mem_Write+0x21c>
 8104bf2:	68fb      	ldr	r3, [r7, #12]
 8104bf4:	2201      	movs	r2, #1
 8104bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104bfa:	f7fe fb17 	bl	810322c <HAL_GetTick>
 8104bfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104c00:	697b      	ldr	r3, [r7, #20]
 8104c02:	9300      	str	r3, [sp, #0]
 8104c04:	2319      	movs	r3, #25
 8104c06:	2201      	movs	r2, #1
 8104c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104c0c:	68f8      	ldr	r0, [r7, #12]
 8104c0e:	f000 fac3 	bl	8105198 <I2C_WaitOnFlagUntilTimeout>
 8104c12:	4603      	mov	r3, r0
 8104c14:	2b00      	cmp	r3, #0
 8104c16:	d001      	beq.n	8104c1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8104c18:	2301      	movs	r3, #1
 8104c1a:	e0d1      	b.n	8104dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8104c1c:	68fb      	ldr	r3, [r7, #12]
 8104c1e:	2221      	movs	r2, #33	; 0x21
 8104c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104c24:	68fb      	ldr	r3, [r7, #12]
 8104c26:	2240      	movs	r2, #64	; 0x40
 8104c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104c2c:	68fb      	ldr	r3, [r7, #12]
 8104c2e:	2200      	movs	r2, #0
 8104c30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104c32:	68fb      	ldr	r3, [r7, #12]
 8104c34:	6a3a      	ldr	r2, [r7, #32]
 8104c36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104c38:	68fb      	ldr	r3, [r7, #12]
 8104c3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104c3e:	68fb      	ldr	r3, [r7, #12]
 8104c40:	2200      	movs	r2, #0
 8104c42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104c44:	88f8      	ldrh	r0, [r7, #6]
 8104c46:	893a      	ldrh	r2, [r7, #8]
 8104c48:	8979      	ldrh	r1, [r7, #10]
 8104c4a:	697b      	ldr	r3, [r7, #20]
 8104c4c:	9301      	str	r3, [sp, #4]
 8104c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104c50:	9300      	str	r3, [sp, #0]
 8104c52:	4603      	mov	r3, r0
 8104c54:	68f8      	ldr	r0, [r7, #12]
 8104c56:	f000 f9d3 	bl	8105000 <I2C_RequestMemoryWrite>
 8104c5a:	4603      	mov	r3, r0
 8104c5c:	2b00      	cmp	r3, #0
 8104c5e:	d005      	beq.n	8104c6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104c60:	68fb      	ldr	r3, [r7, #12]
 8104c62:	2200      	movs	r2, #0
 8104c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104c68:	2301      	movs	r3, #1
 8104c6a:	e0a9      	b.n	8104dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104c6c:	68fb      	ldr	r3, [r7, #12]
 8104c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c70:	b29b      	uxth	r3, r3
 8104c72:	2bff      	cmp	r3, #255	; 0xff
 8104c74:	d90e      	bls.n	8104c94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104c76:	68fb      	ldr	r3, [r7, #12]
 8104c78:	22ff      	movs	r2, #255	; 0xff
 8104c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8104c7c:	68fb      	ldr	r3, [r7, #12]
 8104c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c80:	b2da      	uxtb	r2, r3
 8104c82:	8979      	ldrh	r1, [r7, #10]
 8104c84:	2300      	movs	r3, #0
 8104c86:	9300      	str	r3, [sp, #0]
 8104c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104c8c:	68f8      	ldr	r0, [r7, #12]
 8104c8e:	f000 fc2b 	bl	81054e8 <I2C_TransferConfig>
 8104c92:	e00f      	b.n	8104cb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104c94:	68fb      	ldr	r3, [r7, #12]
 8104c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c98:	b29a      	uxth	r2, r3
 8104c9a:	68fb      	ldr	r3, [r7, #12]
 8104c9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8104c9e:	68fb      	ldr	r3, [r7, #12]
 8104ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104ca2:	b2da      	uxtb	r2, r3
 8104ca4:	8979      	ldrh	r1, [r7, #10]
 8104ca6:	2300      	movs	r3, #0
 8104ca8:	9300      	str	r3, [sp, #0]
 8104caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104cae:	68f8      	ldr	r0, [r7, #12]
 8104cb0:	f000 fc1a 	bl	81054e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104cb4:	697a      	ldr	r2, [r7, #20]
 8104cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104cb8:	68f8      	ldr	r0, [r7, #12]
 8104cba:	f000 faad 	bl	8105218 <I2C_WaitOnTXISFlagUntilTimeout>
 8104cbe:	4603      	mov	r3, r0
 8104cc0:	2b00      	cmp	r3, #0
 8104cc2:	d001      	beq.n	8104cc8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8104cc4:	2301      	movs	r3, #1
 8104cc6:	e07b      	b.n	8104dc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8104cc8:	68fb      	ldr	r3, [r7, #12]
 8104cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104ccc:	781a      	ldrb	r2, [r3, #0]
 8104cce:	68fb      	ldr	r3, [r7, #12]
 8104cd0:	681b      	ldr	r3, [r3, #0]
 8104cd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104cd4:	68fb      	ldr	r3, [r7, #12]
 8104cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104cd8:	1c5a      	adds	r2, r3, #1
 8104cda:	68fb      	ldr	r3, [r7, #12]
 8104cdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8104cde:	68fb      	ldr	r3, [r7, #12]
 8104ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ce2:	b29b      	uxth	r3, r3
 8104ce4:	3b01      	subs	r3, #1
 8104ce6:	b29a      	uxth	r2, r3
 8104ce8:	68fb      	ldr	r3, [r7, #12]
 8104cea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8104cec:	68fb      	ldr	r3, [r7, #12]
 8104cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104cf0:	3b01      	subs	r3, #1
 8104cf2:	b29a      	uxth	r2, r3
 8104cf4:	68fb      	ldr	r3, [r7, #12]
 8104cf6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104cf8:	68fb      	ldr	r3, [r7, #12]
 8104cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104cfc:	b29b      	uxth	r3, r3
 8104cfe:	2b00      	cmp	r3, #0
 8104d00:	d034      	beq.n	8104d6c <HAL_I2C_Mem_Write+0x1c8>
 8104d02:	68fb      	ldr	r3, [r7, #12]
 8104d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104d06:	2b00      	cmp	r3, #0
 8104d08:	d130      	bne.n	8104d6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104d0a:	697b      	ldr	r3, [r7, #20]
 8104d0c:	9300      	str	r3, [sp, #0]
 8104d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104d10:	2200      	movs	r2, #0
 8104d12:	2180      	movs	r1, #128	; 0x80
 8104d14:	68f8      	ldr	r0, [r7, #12]
 8104d16:	f000 fa3f 	bl	8105198 <I2C_WaitOnFlagUntilTimeout>
 8104d1a:	4603      	mov	r3, r0
 8104d1c:	2b00      	cmp	r3, #0
 8104d1e:	d001      	beq.n	8104d24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8104d20:	2301      	movs	r3, #1
 8104d22:	e04d      	b.n	8104dc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104d24:	68fb      	ldr	r3, [r7, #12]
 8104d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d28:	b29b      	uxth	r3, r3
 8104d2a:	2bff      	cmp	r3, #255	; 0xff
 8104d2c:	d90e      	bls.n	8104d4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104d2e:	68fb      	ldr	r3, [r7, #12]
 8104d30:	22ff      	movs	r2, #255	; 0xff
 8104d32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104d34:	68fb      	ldr	r3, [r7, #12]
 8104d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104d38:	b2da      	uxtb	r2, r3
 8104d3a:	8979      	ldrh	r1, [r7, #10]
 8104d3c:	2300      	movs	r3, #0
 8104d3e:	9300      	str	r3, [sp, #0]
 8104d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104d44:	68f8      	ldr	r0, [r7, #12]
 8104d46:	f000 fbcf 	bl	81054e8 <I2C_TransferConfig>
 8104d4a:	e00f      	b.n	8104d6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104d4c:	68fb      	ldr	r3, [r7, #12]
 8104d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d50:	b29a      	uxth	r2, r3
 8104d52:	68fb      	ldr	r3, [r7, #12]
 8104d54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104d56:	68fb      	ldr	r3, [r7, #12]
 8104d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104d5a:	b2da      	uxtb	r2, r3
 8104d5c:	8979      	ldrh	r1, [r7, #10]
 8104d5e:	2300      	movs	r3, #0
 8104d60:	9300      	str	r3, [sp, #0]
 8104d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104d66:	68f8      	ldr	r0, [r7, #12]
 8104d68:	f000 fbbe 	bl	81054e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8104d6c:	68fb      	ldr	r3, [r7, #12]
 8104d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d70:	b29b      	uxth	r3, r3
 8104d72:	2b00      	cmp	r3, #0
 8104d74:	d19e      	bne.n	8104cb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104d76:	697a      	ldr	r2, [r7, #20]
 8104d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104d7a:	68f8      	ldr	r0, [r7, #12]
 8104d7c:	f000 fa8c 	bl	8105298 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104d80:	4603      	mov	r3, r0
 8104d82:	2b00      	cmp	r3, #0
 8104d84:	d001      	beq.n	8104d8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8104d86:	2301      	movs	r3, #1
 8104d88:	e01a      	b.n	8104dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104d8a:	68fb      	ldr	r3, [r7, #12]
 8104d8c:	681b      	ldr	r3, [r3, #0]
 8104d8e:	2220      	movs	r2, #32
 8104d90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104d92:	68fb      	ldr	r3, [r7, #12]
 8104d94:	681b      	ldr	r3, [r3, #0]
 8104d96:	6859      	ldr	r1, [r3, #4]
 8104d98:	68fb      	ldr	r3, [r7, #12]
 8104d9a:	681a      	ldr	r2, [r3, #0]
 8104d9c:	4b0a      	ldr	r3, [pc, #40]	; (8104dc8 <HAL_I2C_Mem_Write+0x224>)
 8104d9e:	400b      	ands	r3, r1
 8104da0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104da2:	68fb      	ldr	r3, [r7, #12]
 8104da4:	2220      	movs	r2, #32
 8104da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104daa:	68fb      	ldr	r3, [r7, #12]
 8104dac:	2200      	movs	r2, #0
 8104dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104db2:	68fb      	ldr	r3, [r7, #12]
 8104db4:	2200      	movs	r2, #0
 8104db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104dba:	2300      	movs	r3, #0
 8104dbc:	e000      	b.n	8104dc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8104dbe:	2302      	movs	r3, #2
  }
}
 8104dc0:	4618      	mov	r0, r3
 8104dc2:	3718      	adds	r7, #24
 8104dc4:	46bd      	mov	sp, r7
 8104dc6:	bd80      	pop	{r7, pc}
 8104dc8:	fe00e800 	.word	0xfe00e800

08104dcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104dcc:	b580      	push	{r7, lr}
 8104dce:	b088      	sub	sp, #32
 8104dd0:	af02      	add	r7, sp, #8
 8104dd2:	60f8      	str	r0, [r7, #12]
 8104dd4:	4608      	mov	r0, r1
 8104dd6:	4611      	mov	r1, r2
 8104dd8:	461a      	mov	r2, r3
 8104dda:	4603      	mov	r3, r0
 8104ddc:	817b      	strh	r3, [r7, #10]
 8104dde:	460b      	mov	r3, r1
 8104de0:	813b      	strh	r3, [r7, #8]
 8104de2:	4613      	mov	r3, r2
 8104de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104de6:	68fb      	ldr	r3, [r7, #12]
 8104de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104dec:	b2db      	uxtb	r3, r3
 8104dee:	2b20      	cmp	r3, #32
 8104df0:	f040 80fd 	bne.w	8104fee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8104df4:	6a3b      	ldr	r3, [r7, #32]
 8104df6:	2b00      	cmp	r3, #0
 8104df8:	d002      	beq.n	8104e00 <HAL_I2C_Mem_Read+0x34>
 8104dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8104dfc:	2b00      	cmp	r3, #0
 8104dfe:	d105      	bne.n	8104e0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104e00:	68fb      	ldr	r3, [r7, #12]
 8104e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104e06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104e08:	2301      	movs	r3, #1
 8104e0a:	e0f1      	b.n	8104ff0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104e0c:	68fb      	ldr	r3, [r7, #12]
 8104e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104e12:	2b01      	cmp	r3, #1
 8104e14:	d101      	bne.n	8104e1a <HAL_I2C_Mem_Read+0x4e>
 8104e16:	2302      	movs	r3, #2
 8104e18:	e0ea      	b.n	8104ff0 <HAL_I2C_Mem_Read+0x224>
 8104e1a:	68fb      	ldr	r3, [r7, #12]
 8104e1c:	2201      	movs	r2, #1
 8104e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104e22:	f7fe fa03 	bl	810322c <HAL_GetTick>
 8104e26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104e28:	697b      	ldr	r3, [r7, #20]
 8104e2a:	9300      	str	r3, [sp, #0]
 8104e2c:	2319      	movs	r3, #25
 8104e2e:	2201      	movs	r2, #1
 8104e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104e34:	68f8      	ldr	r0, [r7, #12]
 8104e36:	f000 f9af 	bl	8105198 <I2C_WaitOnFlagUntilTimeout>
 8104e3a:	4603      	mov	r3, r0
 8104e3c:	2b00      	cmp	r3, #0
 8104e3e:	d001      	beq.n	8104e44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8104e40:	2301      	movs	r3, #1
 8104e42:	e0d5      	b.n	8104ff0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8104e44:	68fb      	ldr	r3, [r7, #12]
 8104e46:	2222      	movs	r2, #34	; 0x22
 8104e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104e4c:	68fb      	ldr	r3, [r7, #12]
 8104e4e:	2240      	movs	r2, #64	; 0x40
 8104e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104e54:	68fb      	ldr	r3, [r7, #12]
 8104e56:	2200      	movs	r2, #0
 8104e58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104e5a:	68fb      	ldr	r3, [r7, #12]
 8104e5c:	6a3a      	ldr	r2, [r7, #32]
 8104e5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104e60:	68fb      	ldr	r3, [r7, #12]
 8104e62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104e66:	68fb      	ldr	r3, [r7, #12]
 8104e68:	2200      	movs	r2, #0
 8104e6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8104e6c:	88f8      	ldrh	r0, [r7, #6]
 8104e6e:	893a      	ldrh	r2, [r7, #8]
 8104e70:	8979      	ldrh	r1, [r7, #10]
 8104e72:	697b      	ldr	r3, [r7, #20]
 8104e74:	9301      	str	r3, [sp, #4]
 8104e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104e78:	9300      	str	r3, [sp, #0]
 8104e7a:	4603      	mov	r3, r0
 8104e7c:	68f8      	ldr	r0, [r7, #12]
 8104e7e:	f000 f913 	bl	81050a8 <I2C_RequestMemoryRead>
 8104e82:	4603      	mov	r3, r0
 8104e84:	2b00      	cmp	r3, #0
 8104e86:	d005      	beq.n	8104e94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104e88:	68fb      	ldr	r3, [r7, #12]
 8104e8a:	2200      	movs	r2, #0
 8104e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104e90:	2301      	movs	r3, #1
 8104e92:	e0ad      	b.n	8104ff0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104e94:	68fb      	ldr	r3, [r7, #12]
 8104e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104e98:	b29b      	uxth	r3, r3
 8104e9a:	2bff      	cmp	r3, #255	; 0xff
 8104e9c:	d90e      	bls.n	8104ebc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104e9e:	68fb      	ldr	r3, [r7, #12]
 8104ea0:	22ff      	movs	r2, #255	; 0xff
 8104ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104ea4:	68fb      	ldr	r3, [r7, #12]
 8104ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104ea8:	b2da      	uxtb	r2, r3
 8104eaa:	8979      	ldrh	r1, [r7, #10]
 8104eac:	4b52      	ldr	r3, [pc, #328]	; (8104ff8 <HAL_I2C_Mem_Read+0x22c>)
 8104eae:	9300      	str	r3, [sp, #0]
 8104eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104eb4:	68f8      	ldr	r0, [r7, #12]
 8104eb6:	f000 fb17 	bl	81054e8 <I2C_TransferConfig>
 8104eba:	e00f      	b.n	8104edc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104ebc:	68fb      	ldr	r3, [r7, #12]
 8104ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ec0:	b29a      	uxth	r2, r3
 8104ec2:	68fb      	ldr	r3, [r7, #12]
 8104ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104ec6:	68fb      	ldr	r3, [r7, #12]
 8104ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104eca:	b2da      	uxtb	r2, r3
 8104ecc:	8979      	ldrh	r1, [r7, #10]
 8104ece:	4b4a      	ldr	r3, [pc, #296]	; (8104ff8 <HAL_I2C_Mem_Read+0x22c>)
 8104ed0:	9300      	str	r3, [sp, #0]
 8104ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104ed6:	68f8      	ldr	r0, [r7, #12]
 8104ed8:	f000 fb06 	bl	81054e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8104edc:	697b      	ldr	r3, [r7, #20]
 8104ede:	9300      	str	r3, [sp, #0]
 8104ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104ee2:	2200      	movs	r2, #0
 8104ee4:	2104      	movs	r1, #4
 8104ee6:	68f8      	ldr	r0, [r7, #12]
 8104ee8:	f000 f956 	bl	8105198 <I2C_WaitOnFlagUntilTimeout>
 8104eec:	4603      	mov	r3, r0
 8104eee:	2b00      	cmp	r3, #0
 8104ef0:	d001      	beq.n	8104ef6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8104ef2:	2301      	movs	r3, #1
 8104ef4:	e07c      	b.n	8104ff0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104ef6:	68fb      	ldr	r3, [r7, #12]
 8104ef8:	681b      	ldr	r3, [r3, #0]
 8104efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104efc:	68fb      	ldr	r3, [r7, #12]
 8104efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f00:	b2d2      	uxtb	r2, r2
 8104f02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104f04:	68fb      	ldr	r3, [r7, #12]
 8104f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f08:	1c5a      	adds	r2, r3, #1
 8104f0a:	68fb      	ldr	r3, [r7, #12]
 8104f0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8104f0e:	68fb      	ldr	r3, [r7, #12]
 8104f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104f12:	3b01      	subs	r3, #1
 8104f14:	b29a      	uxth	r2, r3
 8104f16:	68fb      	ldr	r3, [r7, #12]
 8104f18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104f1a:	68fb      	ldr	r3, [r7, #12]
 8104f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104f1e:	b29b      	uxth	r3, r3
 8104f20:	3b01      	subs	r3, #1
 8104f22:	b29a      	uxth	r2, r3
 8104f24:	68fb      	ldr	r3, [r7, #12]
 8104f26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104f28:	68fb      	ldr	r3, [r7, #12]
 8104f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104f2c:	b29b      	uxth	r3, r3
 8104f2e:	2b00      	cmp	r3, #0
 8104f30:	d034      	beq.n	8104f9c <HAL_I2C_Mem_Read+0x1d0>
 8104f32:	68fb      	ldr	r3, [r7, #12]
 8104f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104f36:	2b00      	cmp	r3, #0
 8104f38:	d130      	bne.n	8104f9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104f3a:	697b      	ldr	r3, [r7, #20]
 8104f3c:	9300      	str	r3, [sp, #0]
 8104f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f40:	2200      	movs	r2, #0
 8104f42:	2180      	movs	r1, #128	; 0x80
 8104f44:	68f8      	ldr	r0, [r7, #12]
 8104f46:	f000 f927 	bl	8105198 <I2C_WaitOnFlagUntilTimeout>
 8104f4a:	4603      	mov	r3, r0
 8104f4c:	2b00      	cmp	r3, #0
 8104f4e:	d001      	beq.n	8104f54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8104f50:	2301      	movs	r3, #1
 8104f52:	e04d      	b.n	8104ff0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104f54:	68fb      	ldr	r3, [r7, #12]
 8104f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104f58:	b29b      	uxth	r3, r3
 8104f5a:	2bff      	cmp	r3, #255	; 0xff
 8104f5c:	d90e      	bls.n	8104f7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104f5e:	68fb      	ldr	r3, [r7, #12]
 8104f60:	22ff      	movs	r2, #255	; 0xff
 8104f62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8104f64:	68fb      	ldr	r3, [r7, #12]
 8104f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104f68:	b2da      	uxtb	r2, r3
 8104f6a:	8979      	ldrh	r1, [r7, #10]
 8104f6c:	2300      	movs	r3, #0
 8104f6e:	9300      	str	r3, [sp, #0]
 8104f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104f74:	68f8      	ldr	r0, [r7, #12]
 8104f76:	f000 fab7 	bl	81054e8 <I2C_TransferConfig>
 8104f7a:	e00f      	b.n	8104f9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104f7c:	68fb      	ldr	r3, [r7, #12]
 8104f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104f80:	b29a      	uxth	r2, r3
 8104f82:	68fb      	ldr	r3, [r7, #12]
 8104f84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104f86:	68fb      	ldr	r3, [r7, #12]
 8104f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104f8a:	b2da      	uxtb	r2, r3
 8104f8c:	8979      	ldrh	r1, [r7, #10]
 8104f8e:	2300      	movs	r3, #0
 8104f90:	9300      	str	r3, [sp, #0]
 8104f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104f96:	68f8      	ldr	r0, [r7, #12]
 8104f98:	f000 faa6 	bl	81054e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8104f9c:	68fb      	ldr	r3, [r7, #12]
 8104f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104fa0:	b29b      	uxth	r3, r3
 8104fa2:	2b00      	cmp	r3, #0
 8104fa4:	d19a      	bne.n	8104edc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104fa6:	697a      	ldr	r2, [r7, #20]
 8104fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104faa:	68f8      	ldr	r0, [r7, #12]
 8104fac:	f000 f974 	bl	8105298 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104fb0:	4603      	mov	r3, r0
 8104fb2:	2b00      	cmp	r3, #0
 8104fb4:	d001      	beq.n	8104fba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8104fb6:	2301      	movs	r3, #1
 8104fb8:	e01a      	b.n	8104ff0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104fba:	68fb      	ldr	r3, [r7, #12]
 8104fbc:	681b      	ldr	r3, [r3, #0]
 8104fbe:	2220      	movs	r2, #32
 8104fc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104fc2:	68fb      	ldr	r3, [r7, #12]
 8104fc4:	681b      	ldr	r3, [r3, #0]
 8104fc6:	6859      	ldr	r1, [r3, #4]
 8104fc8:	68fb      	ldr	r3, [r7, #12]
 8104fca:	681a      	ldr	r2, [r3, #0]
 8104fcc:	4b0b      	ldr	r3, [pc, #44]	; (8104ffc <HAL_I2C_Mem_Read+0x230>)
 8104fce:	400b      	ands	r3, r1
 8104fd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104fd2:	68fb      	ldr	r3, [r7, #12]
 8104fd4:	2220      	movs	r2, #32
 8104fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104fda:	68fb      	ldr	r3, [r7, #12]
 8104fdc:	2200      	movs	r2, #0
 8104fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104fe2:	68fb      	ldr	r3, [r7, #12]
 8104fe4:	2200      	movs	r2, #0
 8104fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104fea:	2300      	movs	r3, #0
 8104fec:	e000      	b.n	8104ff0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8104fee:	2302      	movs	r3, #2
  }
}
 8104ff0:	4618      	mov	r0, r3
 8104ff2:	3718      	adds	r7, #24
 8104ff4:	46bd      	mov	sp, r7
 8104ff6:	bd80      	pop	{r7, pc}
 8104ff8:	80002400 	.word	0x80002400
 8104ffc:	fe00e800 	.word	0xfe00e800

08105000 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8105000:	b580      	push	{r7, lr}
 8105002:	b086      	sub	sp, #24
 8105004:	af02      	add	r7, sp, #8
 8105006:	60f8      	str	r0, [r7, #12]
 8105008:	4608      	mov	r0, r1
 810500a:	4611      	mov	r1, r2
 810500c:	461a      	mov	r2, r3
 810500e:	4603      	mov	r3, r0
 8105010:	817b      	strh	r3, [r7, #10]
 8105012:	460b      	mov	r3, r1
 8105014:	813b      	strh	r3, [r7, #8]
 8105016:	4613      	mov	r3, r2
 8105018:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 810501a:	88fb      	ldrh	r3, [r7, #6]
 810501c:	b2da      	uxtb	r2, r3
 810501e:	8979      	ldrh	r1, [r7, #10]
 8105020:	4b20      	ldr	r3, [pc, #128]	; (81050a4 <I2C_RequestMemoryWrite+0xa4>)
 8105022:	9300      	str	r3, [sp, #0]
 8105024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105028:	68f8      	ldr	r0, [r7, #12]
 810502a:	f000 fa5d 	bl	81054e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810502e:	69fa      	ldr	r2, [r7, #28]
 8105030:	69b9      	ldr	r1, [r7, #24]
 8105032:	68f8      	ldr	r0, [r7, #12]
 8105034:	f000 f8f0 	bl	8105218 <I2C_WaitOnTXISFlagUntilTimeout>
 8105038:	4603      	mov	r3, r0
 810503a:	2b00      	cmp	r3, #0
 810503c:	d001      	beq.n	8105042 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 810503e:	2301      	movs	r3, #1
 8105040:	e02c      	b.n	810509c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8105042:	88fb      	ldrh	r3, [r7, #6]
 8105044:	2b01      	cmp	r3, #1
 8105046:	d105      	bne.n	8105054 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105048:	893b      	ldrh	r3, [r7, #8]
 810504a:	b2da      	uxtb	r2, r3
 810504c:	68fb      	ldr	r3, [r7, #12]
 810504e:	681b      	ldr	r3, [r3, #0]
 8105050:	629a      	str	r2, [r3, #40]	; 0x28
 8105052:	e015      	b.n	8105080 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8105054:	893b      	ldrh	r3, [r7, #8]
 8105056:	0a1b      	lsrs	r3, r3, #8
 8105058:	b29b      	uxth	r3, r3
 810505a:	b2da      	uxtb	r2, r3
 810505c:	68fb      	ldr	r3, [r7, #12]
 810505e:	681b      	ldr	r3, [r3, #0]
 8105060:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105062:	69fa      	ldr	r2, [r7, #28]
 8105064:	69b9      	ldr	r1, [r7, #24]
 8105066:	68f8      	ldr	r0, [r7, #12]
 8105068:	f000 f8d6 	bl	8105218 <I2C_WaitOnTXISFlagUntilTimeout>
 810506c:	4603      	mov	r3, r0
 810506e:	2b00      	cmp	r3, #0
 8105070:	d001      	beq.n	8105076 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8105072:	2301      	movs	r3, #1
 8105074:	e012      	b.n	810509c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105076:	893b      	ldrh	r3, [r7, #8]
 8105078:	b2da      	uxtb	r2, r3
 810507a:	68fb      	ldr	r3, [r7, #12]
 810507c:	681b      	ldr	r3, [r3, #0]
 810507e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8105080:	69fb      	ldr	r3, [r7, #28]
 8105082:	9300      	str	r3, [sp, #0]
 8105084:	69bb      	ldr	r3, [r7, #24]
 8105086:	2200      	movs	r2, #0
 8105088:	2180      	movs	r1, #128	; 0x80
 810508a:	68f8      	ldr	r0, [r7, #12]
 810508c:	f000 f884 	bl	8105198 <I2C_WaitOnFlagUntilTimeout>
 8105090:	4603      	mov	r3, r0
 8105092:	2b00      	cmp	r3, #0
 8105094:	d001      	beq.n	810509a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8105096:	2301      	movs	r3, #1
 8105098:	e000      	b.n	810509c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 810509a:	2300      	movs	r3, #0
}
 810509c:	4618      	mov	r0, r3
 810509e:	3710      	adds	r7, #16
 81050a0:	46bd      	mov	sp, r7
 81050a2:	bd80      	pop	{r7, pc}
 81050a4:	80002000 	.word	0x80002000

081050a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 81050a8:	b580      	push	{r7, lr}
 81050aa:	b086      	sub	sp, #24
 81050ac:	af02      	add	r7, sp, #8
 81050ae:	60f8      	str	r0, [r7, #12]
 81050b0:	4608      	mov	r0, r1
 81050b2:	4611      	mov	r1, r2
 81050b4:	461a      	mov	r2, r3
 81050b6:	4603      	mov	r3, r0
 81050b8:	817b      	strh	r3, [r7, #10]
 81050ba:	460b      	mov	r3, r1
 81050bc:	813b      	strh	r3, [r7, #8]
 81050be:	4613      	mov	r3, r2
 81050c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 81050c2:	88fb      	ldrh	r3, [r7, #6]
 81050c4:	b2da      	uxtb	r2, r3
 81050c6:	8979      	ldrh	r1, [r7, #10]
 81050c8:	4b20      	ldr	r3, [pc, #128]	; (810514c <I2C_RequestMemoryRead+0xa4>)
 81050ca:	9300      	str	r3, [sp, #0]
 81050cc:	2300      	movs	r3, #0
 81050ce:	68f8      	ldr	r0, [r7, #12]
 81050d0:	f000 fa0a 	bl	81054e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81050d4:	69fa      	ldr	r2, [r7, #28]
 81050d6:	69b9      	ldr	r1, [r7, #24]
 81050d8:	68f8      	ldr	r0, [r7, #12]
 81050da:	f000 f89d 	bl	8105218 <I2C_WaitOnTXISFlagUntilTimeout>
 81050de:	4603      	mov	r3, r0
 81050e0:	2b00      	cmp	r3, #0
 81050e2:	d001      	beq.n	81050e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 81050e4:	2301      	movs	r3, #1
 81050e6:	e02c      	b.n	8105142 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81050e8:	88fb      	ldrh	r3, [r7, #6]
 81050ea:	2b01      	cmp	r3, #1
 81050ec:	d105      	bne.n	81050fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81050ee:	893b      	ldrh	r3, [r7, #8]
 81050f0:	b2da      	uxtb	r2, r3
 81050f2:	68fb      	ldr	r3, [r7, #12]
 81050f4:	681b      	ldr	r3, [r3, #0]
 81050f6:	629a      	str	r2, [r3, #40]	; 0x28
 81050f8:	e015      	b.n	8105126 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81050fa:	893b      	ldrh	r3, [r7, #8]
 81050fc:	0a1b      	lsrs	r3, r3, #8
 81050fe:	b29b      	uxth	r3, r3
 8105100:	b2da      	uxtb	r2, r3
 8105102:	68fb      	ldr	r3, [r7, #12]
 8105104:	681b      	ldr	r3, [r3, #0]
 8105106:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105108:	69fa      	ldr	r2, [r7, #28]
 810510a:	69b9      	ldr	r1, [r7, #24]
 810510c:	68f8      	ldr	r0, [r7, #12]
 810510e:	f000 f883 	bl	8105218 <I2C_WaitOnTXISFlagUntilTimeout>
 8105112:	4603      	mov	r3, r0
 8105114:	2b00      	cmp	r3, #0
 8105116:	d001      	beq.n	810511c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8105118:	2301      	movs	r3, #1
 810511a:	e012      	b.n	8105142 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810511c:	893b      	ldrh	r3, [r7, #8]
 810511e:	b2da      	uxtb	r2, r3
 8105120:	68fb      	ldr	r3, [r7, #12]
 8105122:	681b      	ldr	r3, [r3, #0]
 8105124:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8105126:	69fb      	ldr	r3, [r7, #28]
 8105128:	9300      	str	r3, [sp, #0]
 810512a:	69bb      	ldr	r3, [r7, #24]
 810512c:	2200      	movs	r2, #0
 810512e:	2140      	movs	r1, #64	; 0x40
 8105130:	68f8      	ldr	r0, [r7, #12]
 8105132:	f000 f831 	bl	8105198 <I2C_WaitOnFlagUntilTimeout>
 8105136:	4603      	mov	r3, r0
 8105138:	2b00      	cmp	r3, #0
 810513a:	d001      	beq.n	8105140 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 810513c:	2301      	movs	r3, #1
 810513e:	e000      	b.n	8105142 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8105140:	2300      	movs	r3, #0
}
 8105142:	4618      	mov	r0, r3
 8105144:	3710      	adds	r7, #16
 8105146:	46bd      	mov	sp, r7
 8105148:	bd80      	pop	{r7, pc}
 810514a:	bf00      	nop
 810514c:	80002000 	.word	0x80002000

08105150 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8105150:	b480      	push	{r7}
 8105152:	b083      	sub	sp, #12
 8105154:	af00      	add	r7, sp, #0
 8105156:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	681b      	ldr	r3, [r3, #0]
 810515c:	699b      	ldr	r3, [r3, #24]
 810515e:	f003 0302 	and.w	r3, r3, #2
 8105162:	2b02      	cmp	r3, #2
 8105164:	d103      	bne.n	810516e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	2200      	movs	r2, #0
 810516c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810516e:	687b      	ldr	r3, [r7, #4]
 8105170:	681b      	ldr	r3, [r3, #0]
 8105172:	699b      	ldr	r3, [r3, #24]
 8105174:	f003 0301 	and.w	r3, r3, #1
 8105178:	2b01      	cmp	r3, #1
 810517a:	d007      	beq.n	810518c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	681b      	ldr	r3, [r3, #0]
 8105180:	699a      	ldr	r2, [r3, #24]
 8105182:	687b      	ldr	r3, [r7, #4]
 8105184:	681b      	ldr	r3, [r3, #0]
 8105186:	f042 0201 	orr.w	r2, r2, #1
 810518a:	619a      	str	r2, [r3, #24]
  }
}
 810518c:	bf00      	nop
 810518e:	370c      	adds	r7, #12
 8105190:	46bd      	mov	sp, r7
 8105192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105196:	4770      	bx	lr

08105198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8105198:	b580      	push	{r7, lr}
 810519a:	b084      	sub	sp, #16
 810519c:	af00      	add	r7, sp, #0
 810519e:	60f8      	str	r0, [r7, #12]
 81051a0:	60b9      	str	r1, [r7, #8]
 81051a2:	603b      	str	r3, [r7, #0]
 81051a4:	4613      	mov	r3, r2
 81051a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81051a8:	e022      	b.n	81051f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81051aa:	683b      	ldr	r3, [r7, #0]
 81051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 81051b0:	d01e      	beq.n	81051f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81051b2:	f7fe f83b 	bl	810322c <HAL_GetTick>
 81051b6:	4602      	mov	r2, r0
 81051b8:	69bb      	ldr	r3, [r7, #24]
 81051ba:	1ad3      	subs	r3, r2, r3
 81051bc:	683a      	ldr	r2, [r7, #0]
 81051be:	429a      	cmp	r2, r3
 81051c0:	d302      	bcc.n	81051c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 81051c2:	683b      	ldr	r3, [r7, #0]
 81051c4:	2b00      	cmp	r3, #0
 81051c6:	d113      	bne.n	81051f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81051c8:	68fb      	ldr	r3, [r7, #12]
 81051ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81051cc:	f043 0220 	orr.w	r2, r3, #32
 81051d0:	68fb      	ldr	r3, [r7, #12]
 81051d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81051d4:	68fb      	ldr	r3, [r7, #12]
 81051d6:	2220      	movs	r2, #32
 81051d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81051dc:	68fb      	ldr	r3, [r7, #12]
 81051de:	2200      	movs	r2, #0
 81051e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81051e4:	68fb      	ldr	r3, [r7, #12]
 81051e6:	2200      	movs	r2, #0
 81051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81051ec:	2301      	movs	r3, #1
 81051ee:	e00f      	b.n	8105210 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81051f0:	68fb      	ldr	r3, [r7, #12]
 81051f2:	681b      	ldr	r3, [r3, #0]
 81051f4:	699a      	ldr	r2, [r3, #24]
 81051f6:	68bb      	ldr	r3, [r7, #8]
 81051f8:	4013      	ands	r3, r2
 81051fa:	68ba      	ldr	r2, [r7, #8]
 81051fc:	429a      	cmp	r2, r3
 81051fe:	bf0c      	ite	eq
 8105200:	2301      	moveq	r3, #1
 8105202:	2300      	movne	r3, #0
 8105204:	b2db      	uxtb	r3, r3
 8105206:	461a      	mov	r2, r3
 8105208:	79fb      	ldrb	r3, [r7, #7]
 810520a:	429a      	cmp	r2, r3
 810520c:	d0cd      	beq.n	81051aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 810520e:	2300      	movs	r3, #0
}
 8105210:	4618      	mov	r0, r3
 8105212:	3710      	adds	r7, #16
 8105214:	46bd      	mov	sp, r7
 8105216:	bd80      	pop	{r7, pc}

08105218 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105218:	b580      	push	{r7, lr}
 810521a:	b084      	sub	sp, #16
 810521c:	af00      	add	r7, sp, #0
 810521e:	60f8      	str	r0, [r7, #12]
 8105220:	60b9      	str	r1, [r7, #8]
 8105222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105224:	e02c      	b.n	8105280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105226:	687a      	ldr	r2, [r7, #4]
 8105228:	68b9      	ldr	r1, [r7, #8]
 810522a:	68f8      	ldr	r0, [r7, #12]
 810522c:	f000 f870 	bl	8105310 <I2C_IsErrorOccurred>
 8105230:	4603      	mov	r3, r0
 8105232:	2b00      	cmp	r3, #0
 8105234:	d001      	beq.n	810523a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105236:	2301      	movs	r3, #1
 8105238:	e02a      	b.n	8105290 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810523a:	68bb      	ldr	r3, [r7, #8]
 810523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105240:	d01e      	beq.n	8105280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105242:	f7fd fff3 	bl	810322c <HAL_GetTick>
 8105246:	4602      	mov	r2, r0
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	1ad3      	subs	r3, r2, r3
 810524c:	68ba      	ldr	r2, [r7, #8]
 810524e:	429a      	cmp	r2, r3
 8105250:	d302      	bcc.n	8105258 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8105252:	68bb      	ldr	r3, [r7, #8]
 8105254:	2b00      	cmp	r3, #0
 8105256:	d113      	bne.n	8105280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105258:	68fb      	ldr	r3, [r7, #12]
 810525a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810525c:	f043 0220 	orr.w	r2, r3, #32
 8105260:	68fb      	ldr	r3, [r7, #12]
 8105262:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105264:	68fb      	ldr	r3, [r7, #12]
 8105266:	2220      	movs	r2, #32
 8105268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810526c:	68fb      	ldr	r3, [r7, #12]
 810526e:	2200      	movs	r2, #0
 8105270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105274:	68fb      	ldr	r3, [r7, #12]
 8105276:	2200      	movs	r2, #0
 8105278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 810527c:	2301      	movs	r3, #1
 810527e:	e007      	b.n	8105290 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105280:	68fb      	ldr	r3, [r7, #12]
 8105282:	681b      	ldr	r3, [r3, #0]
 8105284:	699b      	ldr	r3, [r3, #24]
 8105286:	f003 0302 	and.w	r3, r3, #2
 810528a:	2b02      	cmp	r3, #2
 810528c:	d1cb      	bne.n	8105226 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810528e:	2300      	movs	r3, #0
}
 8105290:	4618      	mov	r0, r3
 8105292:	3710      	adds	r7, #16
 8105294:	46bd      	mov	sp, r7
 8105296:	bd80      	pop	{r7, pc}

08105298 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105298:	b580      	push	{r7, lr}
 810529a:	b084      	sub	sp, #16
 810529c:	af00      	add	r7, sp, #0
 810529e:	60f8      	str	r0, [r7, #12]
 81052a0:	60b9      	str	r1, [r7, #8]
 81052a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81052a4:	e028      	b.n	81052f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81052a6:	687a      	ldr	r2, [r7, #4]
 81052a8:	68b9      	ldr	r1, [r7, #8]
 81052aa:	68f8      	ldr	r0, [r7, #12]
 81052ac:	f000 f830 	bl	8105310 <I2C_IsErrorOccurred>
 81052b0:	4603      	mov	r3, r0
 81052b2:	2b00      	cmp	r3, #0
 81052b4:	d001      	beq.n	81052ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81052b6:	2301      	movs	r3, #1
 81052b8:	e026      	b.n	8105308 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81052ba:	f7fd ffb7 	bl	810322c <HAL_GetTick>
 81052be:	4602      	mov	r2, r0
 81052c0:	687b      	ldr	r3, [r7, #4]
 81052c2:	1ad3      	subs	r3, r2, r3
 81052c4:	68ba      	ldr	r2, [r7, #8]
 81052c6:	429a      	cmp	r2, r3
 81052c8:	d302      	bcc.n	81052d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81052ca:	68bb      	ldr	r3, [r7, #8]
 81052cc:	2b00      	cmp	r3, #0
 81052ce:	d113      	bne.n	81052f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81052d0:	68fb      	ldr	r3, [r7, #12]
 81052d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81052d4:	f043 0220 	orr.w	r2, r3, #32
 81052d8:	68fb      	ldr	r3, [r7, #12]
 81052da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81052dc:	68fb      	ldr	r3, [r7, #12]
 81052de:	2220      	movs	r2, #32
 81052e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81052e4:	68fb      	ldr	r3, [r7, #12]
 81052e6:	2200      	movs	r2, #0
 81052e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81052ec:	68fb      	ldr	r3, [r7, #12]
 81052ee:	2200      	movs	r2, #0
 81052f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81052f4:	2301      	movs	r3, #1
 81052f6:	e007      	b.n	8105308 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81052f8:	68fb      	ldr	r3, [r7, #12]
 81052fa:	681b      	ldr	r3, [r3, #0]
 81052fc:	699b      	ldr	r3, [r3, #24]
 81052fe:	f003 0320 	and.w	r3, r3, #32
 8105302:	2b20      	cmp	r3, #32
 8105304:	d1cf      	bne.n	81052a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8105306:	2300      	movs	r3, #0
}
 8105308:	4618      	mov	r0, r3
 810530a:	3710      	adds	r7, #16
 810530c:	46bd      	mov	sp, r7
 810530e:	bd80      	pop	{r7, pc}

08105310 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105310:	b580      	push	{r7, lr}
 8105312:	b08a      	sub	sp, #40	; 0x28
 8105314:	af00      	add	r7, sp, #0
 8105316:	60f8      	str	r0, [r7, #12]
 8105318:	60b9      	str	r1, [r7, #8]
 810531a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810531c:	2300      	movs	r3, #0
 810531e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8105322:	68fb      	ldr	r3, [r7, #12]
 8105324:	681b      	ldr	r3, [r3, #0]
 8105326:	699b      	ldr	r3, [r3, #24]
 8105328:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810532a:	2300      	movs	r3, #0
 810532c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8105332:	69bb      	ldr	r3, [r7, #24]
 8105334:	f003 0310 	and.w	r3, r3, #16
 8105338:	2b00      	cmp	r3, #0
 810533a:	d075      	beq.n	8105428 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810533c:	68fb      	ldr	r3, [r7, #12]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	2210      	movs	r2, #16
 8105342:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8105344:	e056      	b.n	81053f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8105346:	68bb      	ldr	r3, [r7, #8]
 8105348:	f1b3 3fff 	cmp.w	r3, #4294967295
 810534c:	d052      	beq.n	81053f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810534e:	f7fd ff6d 	bl	810322c <HAL_GetTick>
 8105352:	4602      	mov	r2, r0
 8105354:	69fb      	ldr	r3, [r7, #28]
 8105356:	1ad3      	subs	r3, r2, r3
 8105358:	68ba      	ldr	r2, [r7, #8]
 810535a:	429a      	cmp	r2, r3
 810535c:	d302      	bcc.n	8105364 <I2C_IsErrorOccurred+0x54>
 810535e:	68bb      	ldr	r3, [r7, #8]
 8105360:	2b00      	cmp	r3, #0
 8105362:	d147      	bne.n	81053f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8105364:	68fb      	ldr	r3, [r7, #12]
 8105366:	681b      	ldr	r3, [r3, #0]
 8105368:	685b      	ldr	r3, [r3, #4]
 810536a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810536e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8105370:	68fb      	ldr	r3, [r7, #12]
 8105372:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8105376:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8105378:	68fb      	ldr	r3, [r7, #12]
 810537a:	681b      	ldr	r3, [r3, #0]
 810537c:	699b      	ldr	r3, [r3, #24]
 810537e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105386:	d12e      	bne.n	81053e6 <I2C_IsErrorOccurred+0xd6>
 8105388:	697b      	ldr	r3, [r7, #20]
 810538a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810538e:	d02a      	beq.n	81053e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8105390:	7cfb      	ldrb	r3, [r7, #19]
 8105392:	2b20      	cmp	r3, #32
 8105394:	d027      	beq.n	81053e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8105396:	68fb      	ldr	r3, [r7, #12]
 8105398:	681b      	ldr	r3, [r3, #0]
 810539a:	685a      	ldr	r2, [r3, #4]
 810539c:	68fb      	ldr	r3, [r7, #12]
 810539e:	681b      	ldr	r3, [r3, #0]
 81053a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81053a4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81053a6:	f7fd ff41 	bl	810322c <HAL_GetTick>
 81053aa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81053ac:	e01b      	b.n	81053e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81053ae:	f7fd ff3d 	bl	810322c <HAL_GetTick>
 81053b2:	4602      	mov	r2, r0
 81053b4:	69fb      	ldr	r3, [r7, #28]
 81053b6:	1ad3      	subs	r3, r2, r3
 81053b8:	2b19      	cmp	r3, #25
 81053ba:	d914      	bls.n	81053e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81053bc:	68fb      	ldr	r3, [r7, #12]
 81053be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81053c0:	f043 0220 	orr.w	r2, r3, #32
 81053c4:	68fb      	ldr	r3, [r7, #12]
 81053c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 81053c8:	68fb      	ldr	r3, [r7, #12]
 81053ca:	2220      	movs	r2, #32
 81053cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 81053d0:	68fb      	ldr	r3, [r7, #12]
 81053d2:	2200      	movs	r2, #0
 81053d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 81053d8:	68fb      	ldr	r3, [r7, #12]
 81053da:	2200      	movs	r2, #0
 81053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 81053e0:	2301      	movs	r3, #1
 81053e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81053e6:	68fb      	ldr	r3, [r7, #12]
 81053e8:	681b      	ldr	r3, [r3, #0]
 81053ea:	699b      	ldr	r3, [r3, #24]
 81053ec:	f003 0320 	and.w	r3, r3, #32
 81053f0:	2b20      	cmp	r3, #32
 81053f2:	d1dc      	bne.n	81053ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81053f4:	68fb      	ldr	r3, [r7, #12]
 81053f6:	681b      	ldr	r3, [r3, #0]
 81053f8:	699b      	ldr	r3, [r3, #24]
 81053fa:	f003 0320 	and.w	r3, r3, #32
 81053fe:	2b20      	cmp	r3, #32
 8105400:	d003      	beq.n	810540a <I2C_IsErrorOccurred+0xfa>
 8105402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8105406:	2b00      	cmp	r3, #0
 8105408:	d09d      	beq.n	8105346 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 810540a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810540e:	2b00      	cmp	r3, #0
 8105410:	d103      	bne.n	810541a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105412:	68fb      	ldr	r3, [r7, #12]
 8105414:	681b      	ldr	r3, [r3, #0]
 8105416:	2220      	movs	r2, #32
 8105418:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 810541a:	6a3b      	ldr	r3, [r7, #32]
 810541c:	f043 0304 	orr.w	r3, r3, #4
 8105420:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8105422:	2301      	movs	r3, #1
 8105424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8105428:	68fb      	ldr	r3, [r7, #12]
 810542a:	681b      	ldr	r3, [r3, #0]
 810542c:	699b      	ldr	r3, [r3, #24]
 810542e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8105430:	69bb      	ldr	r3, [r7, #24]
 8105432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105436:	2b00      	cmp	r3, #0
 8105438:	d00b      	beq.n	8105452 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 810543a:	6a3b      	ldr	r3, [r7, #32]
 810543c:	f043 0301 	orr.w	r3, r3, #1
 8105440:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8105442:	68fb      	ldr	r3, [r7, #12]
 8105444:	681b      	ldr	r3, [r3, #0]
 8105446:	f44f 7280 	mov.w	r2, #256	; 0x100
 810544a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810544c:	2301      	movs	r3, #1
 810544e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8105452:	69bb      	ldr	r3, [r7, #24]
 8105454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8105458:	2b00      	cmp	r3, #0
 810545a:	d00b      	beq.n	8105474 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 810545c:	6a3b      	ldr	r3, [r7, #32]
 810545e:	f043 0308 	orr.w	r3, r3, #8
 8105462:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8105464:	68fb      	ldr	r3, [r7, #12]
 8105466:	681b      	ldr	r3, [r3, #0]
 8105468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810546c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810546e:	2301      	movs	r3, #1
 8105470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8105474:	69bb      	ldr	r3, [r7, #24]
 8105476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810547a:	2b00      	cmp	r3, #0
 810547c:	d00b      	beq.n	8105496 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810547e:	6a3b      	ldr	r3, [r7, #32]
 8105480:	f043 0302 	orr.w	r3, r3, #2
 8105484:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8105486:	68fb      	ldr	r3, [r7, #12]
 8105488:	681b      	ldr	r3, [r3, #0]
 810548a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810548e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8105490:	2301      	movs	r3, #1
 8105492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8105496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810549a:	2b00      	cmp	r3, #0
 810549c:	d01c      	beq.n	81054d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810549e:	68f8      	ldr	r0, [r7, #12]
 81054a0:	f7ff fe56 	bl	8105150 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81054a4:	68fb      	ldr	r3, [r7, #12]
 81054a6:	681b      	ldr	r3, [r3, #0]
 81054a8:	6859      	ldr	r1, [r3, #4]
 81054aa:	68fb      	ldr	r3, [r7, #12]
 81054ac:	681a      	ldr	r2, [r3, #0]
 81054ae:	4b0d      	ldr	r3, [pc, #52]	; (81054e4 <I2C_IsErrorOccurred+0x1d4>)
 81054b0:	400b      	ands	r3, r1
 81054b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 81054b4:	68fb      	ldr	r3, [r7, #12]
 81054b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81054b8:	6a3b      	ldr	r3, [r7, #32]
 81054ba:	431a      	orrs	r2, r3
 81054bc:	68fb      	ldr	r3, [r7, #12]
 81054be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81054c0:	68fb      	ldr	r3, [r7, #12]
 81054c2:	2220      	movs	r2, #32
 81054c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81054c8:	68fb      	ldr	r3, [r7, #12]
 81054ca:	2200      	movs	r2, #0
 81054cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81054d0:	68fb      	ldr	r3, [r7, #12]
 81054d2:	2200      	movs	r2, #0
 81054d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 81054d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81054dc:	4618      	mov	r0, r3
 81054de:	3728      	adds	r7, #40	; 0x28
 81054e0:	46bd      	mov	sp, r7
 81054e2:	bd80      	pop	{r7, pc}
 81054e4:	fe00e800 	.word	0xfe00e800

081054e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81054e8:	b480      	push	{r7}
 81054ea:	b087      	sub	sp, #28
 81054ec:	af00      	add	r7, sp, #0
 81054ee:	60f8      	str	r0, [r7, #12]
 81054f0:	607b      	str	r3, [r7, #4]
 81054f2:	460b      	mov	r3, r1
 81054f4:	817b      	strh	r3, [r7, #10]
 81054f6:	4613      	mov	r3, r2
 81054f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81054fa:	897b      	ldrh	r3, [r7, #10]
 81054fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8105500:	7a7b      	ldrb	r3, [r7, #9]
 8105502:	041b      	lsls	r3, r3, #16
 8105504:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105508:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810550a:	687b      	ldr	r3, [r7, #4]
 810550c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810550e:	6a3b      	ldr	r3, [r7, #32]
 8105510:	4313      	orrs	r3, r2
 8105512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8105516:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8105518:	68fb      	ldr	r3, [r7, #12]
 810551a:	681b      	ldr	r3, [r3, #0]
 810551c:	685a      	ldr	r2, [r3, #4]
 810551e:	6a3b      	ldr	r3, [r7, #32]
 8105520:	0d5b      	lsrs	r3, r3, #21
 8105522:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8105526:	4b08      	ldr	r3, [pc, #32]	; (8105548 <I2C_TransferConfig+0x60>)
 8105528:	430b      	orrs	r3, r1
 810552a:	43db      	mvns	r3, r3
 810552c:	ea02 0103 	and.w	r1, r2, r3
 8105530:	68fb      	ldr	r3, [r7, #12]
 8105532:	681b      	ldr	r3, [r3, #0]
 8105534:	697a      	ldr	r2, [r7, #20]
 8105536:	430a      	orrs	r2, r1
 8105538:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810553a:	bf00      	nop
 810553c:	371c      	adds	r7, #28
 810553e:	46bd      	mov	sp, r7
 8105540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105544:	4770      	bx	lr
 8105546:	bf00      	nop
 8105548:	03ff63ff 	.word	0x03ff63ff

0810554c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810554c:	b480      	push	{r7}
 810554e:	b083      	sub	sp, #12
 8105550:	af00      	add	r7, sp, #0
 8105552:	6078      	str	r0, [r7, #4]
 8105554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810555c:	b2db      	uxtb	r3, r3
 810555e:	2b20      	cmp	r3, #32
 8105560:	d138      	bne.n	81055d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105562:	687b      	ldr	r3, [r7, #4]
 8105564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105568:	2b01      	cmp	r3, #1
 810556a:	d101      	bne.n	8105570 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810556c:	2302      	movs	r3, #2
 810556e:	e032      	b.n	81055d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	2201      	movs	r2, #1
 8105574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	2224      	movs	r2, #36	; 0x24
 810557c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105580:	687b      	ldr	r3, [r7, #4]
 8105582:	681b      	ldr	r3, [r3, #0]
 8105584:	681a      	ldr	r2, [r3, #0]
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	681b      	ldr	r3, [r3, #0]
 810558a:	f022 0201 	bic.w	r2, r2, #1
 810558e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8105590:	687b      	ldr	r3, [r7, #4]
 8105592:	681b      	ldr	r3, [r3, #0]
 8105594:	681a      	ldr	r2, [r3, #0]
 8105596:	687b      	ldr	r3, [r7, #4]
 8105598:	681b      	ldr	r3, [r3, #0]
 810559a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810559e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81055a0:	687b      	ldr	r3, [r7, #4]
 81055a2:	681b      	ldr	r3, [r3, #0]
 81055a4:	6819      	ldr	r1, [r3, #0]
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	681b      	ldr	r3, [r3, #0]
 81055aa:	683a      	ldr	r2, [r7, #0]
 81055ac:	430a      	orrs	r2, r1
 81055ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	681b      	ldr	r3, [r3, #0]
 81055b4:	681a      	ldr	r2, [r3, #0]
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	f042 0201 	orr.w	r2, r2, #1
 81055be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	2220      	movs	r2, #32
 81055c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81055c8:	687b      	ldr	r3, [r7, #4]
 81055ca:	2200      	movs	r2, #0
 81055cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81055d0:	2300      	movs	r3, #0
 81055d2:	e000      	b.n	81055d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81055d4:	2302      	movs	r3, #2
  }
}
 81055d6:	4618      	mov	r0, r3
 81055d8:	370c      	adds	r7, #12
 81055da:	46bd      	mov	sp, r7
 81055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055e0:	4770      	bx	lr

081055e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81055e2:	b480      	push	{r7}
 81055e4:	b085      	sub	sp, #20
 81055e6:	af00      	add	r7, sp, #0
 81055e8:	6078      	str	r0, [r7, #4]
 81055ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81055f2:	b2db      	uxtb	r3, r3
 81055f4:	2b20      	cmp	r3, #32
 81055f6:	d139      	bne.n	810566c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81055f8:	687b      	ldr	r3, [r7, #4]
 81055fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81055fe:	2b01      	cmp	r3, #1
 8105600:	d101      	bne.n	8105606 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8105602:	2302      	movs	r3, #2
 8105604:	e033      	b.n	810566e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	2201      	movs	r2, #1
 810560a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810560e:	687b      	ldr	r3, [r7, #4]
 8105610:	2224      	movs	r2, #36	; 0x24
 8105612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105616:	687b      	ldr	r3, [r7, #4]
 8105618:	681b      	ldr	r3, [r3, #0]
 810561a:	681a      	ldr	r2, [r3, #0]
 810561c:	687b      	ldr	r3, [r7, #4]
 810561e:	681b      	ldr	r3, [r3, #0]
 8105620:	f022 0201 	bic.w	r2, r2, #1
 8105624:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	681b      	ldr	r3, [r3, #0]
 810562a:	681b      	ldr	r3, [r3, #0]
 810562c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810562e:	68fb      	ldr	r3, [r7, #12]
 8105630:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8105634:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8105636:	683b      	ldr	r3, [r7, #0]
 8105638:	021b      	lsls	r3, r3, #8
 810563a:	68fa      	ldr	r2, [r7, #12]
 810563c:	4313      	orrs	r3, r2
 810563e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8105640:	687b      	ldr	r3, [r7, #4]
 8105642:	681b      	ldr	r3, [r3, #0]
 8105644:	68fa      	ldr	r2, [r7, #12]
 8105646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	681b      	ldr	r3, [r3, #0]
 810564c:	681a      	ldr	r2, [r3, #0]
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	681b      	ldr	r3, [r3, #0]
 8105652:	f042 0201 	orr.w	r2, r2, #1
 8105656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	2220      	movs	r2, #32
 810565c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	2200      	movs	r2, #0
 8105664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105668:	2300      	movs	r3, #0
 810566a:	e000      	b.n	810566e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810566c:	2302      	movs	r3, #2
  }
}
 810566e:	4618      	mov	r0, r3
 8105670:	3714      	adds	r7, #20
 8105672:	46bd      	mov	sp, r7
 8105674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105678:	4770      	bx	lr
	...

0810567c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810567c:	b580      	push	{r7, lr}
 810567e:	b084      	sub	sp, #16
 8105680:	af00      	add	r7, sp, #0
 8105682:	60f8      	str	r0, [r7, #12]
 8105684:	460b      	mov	r3, r1
 8105686:	607a      	str	r2, [r7, #4]
 8105688:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810568a:	4b37      	ldr	r3, [pc, #220]	; (8105768 <HAL_PWREx_EnterSTOPMode+0xec>)
 810568c:	681b      	ldr	r3, [r3, #0]
 810568e:	f023 0201 	bic.w	r2, r3, #1
 8105692:	4935      	ldr	r1, [pc, #212]	; (8105768 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105694:	68fb      	ldr	r3, [r7, #12]
 8105696:	4313      	orrs	r3, r2
 8105698:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810569a:	687b      	ldr	r3, [r7, #4]
 810569c:	2b00      	cmp	r3, #0
 810569e:	d123      	bne.n	81056e8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81056a0:	f7fe ffa0 	bl	81045e4 <HAL_GetCurrentCPUID>
 81056a4:	4603      	mov	r3, r0
 81056a6:	2b03      	cmp	r3, #3
 81056a8:	d158      	bne.n	810575c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81056aa:	4b2f      	ldr	r3, [pc, #188]	; (8105768 <HAL_PWREx_EnterSTOPMode+0xec>)
 81056ac:	691b      	ldr	r3, [r3, #16]
 81056ae:	4a2e      	ldr	r2, [pc, #184]	; (8105768 <HAL_PWREx_EnterSTOPMode+0xec>)
 81056b0:	f023 0301 	bic.w	r3, r3, #1
 81056b4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81056b6:	4b2d      	ldr	r3, [pc, #180]	; (810576c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81056b8:	691b      	ldr	r3, [r3, #16]
 81056ba:	4a2c      	ldr	r2, [pc, #176]	; (810576c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81056bc:	f043 0304 	orr.w	r3, r3, #4
 81056c0:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81056c2:	f3bf 8f4f 	dsb	sy
}
 81056c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81056c8:	f3bf 8f6f 	isb	sy
}
 81056cc:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81056ce:	7afb      	ldrb	r3, [r7, #11]
 81056d0:	2b01      	cmp	r3, #1
 81056d2:	d101      	bne.n	81056d8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81056d4:	bf30      	wfi
 81056d6:	e000      	b.n	81056da <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81056d8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81056da:	4b24      	ldr	r3, [pc, #144]	; (810576c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81056dc:	691b      	ldr	r3, [r3, #16]
 81056de:	4a23      	ldr	r2, [pc, #140]	; (810576c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81056e0:	f023 0304 	bic.w	r3, r3, #4
 81056e4:	6113      	str	r3, [r2, #16]
 81056e6:	e03c      	b.n	8105762 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81056e8:	687b      	ldr	r3, [r7, #4]
 81056ea:	2b01      	cmp	r3, #1
 81056ec:	d123      	bne.n	8105736 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81056ee:	f7fe ff79 	bl	81045e4 <HAL_GetCurrentCPUID>
 81056f2:	4603      	mov	r3, r0
 81056f4:	2b01      	cmp	r3, #1
 81056f6:	d133      	bne.n	8105760 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81056f8:	4b1b      	ldr	r3, [pc, #108]	; (8105768 <HAL_PWREx_EnterSTOPMode+0xec>)
 81056fa:	695b      	ldr	r3, [r3, #20]
 81056fc:	4a1a      	ldr	r2, [pc, #104]	; (8105768 <HAL_PWREx_EnterSTOPMode+0xec>)
 81056fe:	f023 0302 	bic.w	r3, r3, #2
 8105702:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105704:	4b19      	ldr	r3, [pc, #100]	; (810576c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105706:	691b      	ldr	r3, [r3, #16]
 8105708:	4a18      	ldr	r2, [pc, #96]	; (810576c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810570a:	f043 0304 	orr.w	r3, r3, #4
 810570e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105710:	f3bf 8f4f 	dsb	sy
}
 8105714:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105716:	f3bf 8f6f 	isb	sy
}
 810571a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810571c:	7afb      	ldrb	r3, [r7, #11]
 810571e:	2b01      	cmp	r3, #1
 8105720:	d101      	bne.n	8105726 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105722:	bf30      	wfi
 8105724:	e000      	b.n	8105728 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105726:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105728:	4b10      	ldr	r3, [pc, #64]	; (810576c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810572a:	691b      	ldr	r3, [r3, #16]
 810572c:	4a0f      	ldr	r2, [pc, #60]	; (810576c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810572e:	f023 0304 	bic.w	r3, r3, #4
 8105732:	6113      	str	r3, [r2, #16]
 8105734:	e015      	b.n	8105762 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105736:	f7fe ff55 	bl	81045e4 <HAL_GetCurrentCPUID>
 810573a:	4603      	mov	r3, r0
 810573c:	2b03      	cmp	r3, #3
 810573e:	d106      	bne.n	810574e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105740:	4b09      	ldr	r3, [pc, #36]	; (8105768 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105742:	691b      	ldr	r3, [r3, #16]
 8105744:	4a08      	ldr	r2, [pc, #32]	; (8105768 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105746:	f023 0304 	bic.w	r3, r3, #4
 810574a:	6113      	str	r3, [r2, #16]
 810574c:	e009      	b.n	8105762 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810574e:	4b06      	ldr	r3, [pc, #24]	; (8105768 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105750:	695b      	ldr	r3, [r3, #20]
 8105752:	4a05      	ldr	r2, [pc, #20]	; (8105768 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105754:	f023 0304 	bic.w	r3, r3, #4
 8105758:	6153      	str	r3, [r2, #20]
 810575a:	e002      	b.n	8105762 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810575c:	bf00      	nop
 810575e:	e000      	b.n	8105762 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105760:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105762:	3710      	adds	r7, #16
 8105764:	46bd      	mov	sp, r7
 8105766:	bd80      	pop	{r7, pc}
 8105768:	58024800 	.word	0x58024800
 810576c:	e000ed00 	.word	0xe000ed00

08105770 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105770:	b580      	push	{r7, lr}
 8105772:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105774:	f7fe ff36 	bl	81045e4 <HAL_GetCurrentCPUID>
 8105778:	4603      	mov	r3, r0
 810577a:	2b03      	cmp	r3, #3
 810577c:	d101      	bne.n	8105782 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810577e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105780:	e001      	b.n	8105786 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105782:	bf40      	sev
    __WFE ();
 8105784:	bf20      	wfe
}
 8105786:	bf00      	nop
 8105788:	bd80      	pop	{r7, pc}
	...

0810578c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810578c:	b480      	push	{r7}
 810578e:	b089      	sub	sp, #36	; 0x24
 8105790:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105792:	4bb3      	ldr	r3, [pc, #716]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105794:	691b      	ldr	r3, [r3, #16]
 8105796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810579a:	2b18      	cmp	r3, #24
 810579c:	f200 8155 	bhi.w	8105a4a <HAL_RCC_GetSysClockFreq+0x2be>
 81057a0:	a201      	add	r2, pc, #4	; (adr r2, 81057a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81057a6:	bf00      	nop
 81057a8:	0810580d 	.word	0x0810580d
 81057ac:	08105a4b 	.word	0x08105a4b
 81057b0:	08105a4b 	.word	0x08105a4b
 81057b4:	08105a4b 	.word	0x08105a4b
 81057b8:	08105a4b 	.word	0x08105a4b
 81057bc:	08105a4b 	.word	0x08105a4b
 81057c0:	08105a4b 	.word	0x08105a4b
 81057c4:	08105a4b 	.word	0x08105a4b
 81057c8:	08105833 	.word	0x08105833
 81057cc:	08105a4b 	.word	0x08105a4b
 81057d0:	08105a4b 	.word	0x08105a4b
 81057d4:	08105a4b 	.word	0x08105a4b
 81057d8:	08105a4b 	.word	0x08105a4b
 81057dc:	08105a4b 	.word	0x08105a4b
 81057e0:	08105a4b 	.word	0x08105a4b
 81057e4:	08105a4b 	.word	0x08105a4b
 81057e8:	08105839 	.word	0x08105839
 81057ec:	08105a4b 	.word	0x08105a4b
 81057f0:	08105a4b 	.word	0x08105a4b
 81057f4:	08105a4b 	.word	0x08105a4b
 81057f8:	08105a4b 	.word	0x08105a4b
 81057fc:	08105a4b 	.word	0x08105a4b
 8105800:	08105a4b 	.word	0x08105a4b
 8105804:	08105a4b 	.word	0x08105a4b
 8105808:	0810583f 	.word	0x0810583f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810580c:	4b94      	ldr	r3, [pc, #592]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810580e:	681b      	ldr	r3, [r3, #0]
 8105810:	f003 0320 	and.w	r3, r3, #32
 8105814:	2b00      	cmp	r3, #0
 8105816:	d009      	beq.n	810582c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105818:	4b91      	ldr	r3, [pc, #580]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810581a:	681b      	ldr	r3, [r3, #0]
 810581c:	08db      	lsrs	r3, r3, #3
 810581e:	f003 0303 	and.w	r3, r3, #3
 8105822:	4a90      	ldr	r2, [pc, #576]	; (8105a64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105824:	fa22 f303 	lsr.w	r3, r2, r3
 8105828:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810582a:	e111      	b.n	8105a50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810582c:	4b8d      	ldr	r3, [pc, #564]	; (8105a64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810582e:	61bb      	str	r3, [r7, #24]
    break;
 8105830:	e10e      	b.n	8105a50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8105832:	4b8d      	ldr	r3, [pc, #564]	; (8105a68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105834:	61bb      	str	r3, [r7, #24]
    break;
 8105836:	e10b      	b.n	8105a50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8105838:	4b8c      	ldr	r3, [pc, #560]	; (8105a6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810583a:	61bb      	str	r3, [r7, #24]
    break;
 810583c:	e108      	b.n	8105a50 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810583e:	4b88      	ldr	r3, [pc, #544]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105842:	f003 0303 	and.w	r3, r3, #3
 8105846:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8105848:	4b85      	ldr	r3, [pc, #532]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810584c:	091b      	lsrs	r3, r3, #4
 810584e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105852:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105854:	4b82      	ldr	r3, [pc, #520]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105858:	f003 0301 	and.w	r3, r3, #1
 810585c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810585e:	4b80      	ldr	r3, [pc, #512]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105862:	08db      	lsrs	r3, r3, #3
 8105864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105868:	68fa      	ldr	r2, [r7, #12]
 810586a:	fb02 f303 	mul.w	r3, r2, r3
 810586e:	ee07 3a90 	vmov	s15, r3
 8105872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105876:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810587a:	693b      	ldr	r3, [r7, #16]
 810587c:	2b00      	cmp	r3, #0
 810587e:	f000 80e1 	beq.w	8105a44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8105882:	697b      	ldr	r3, [r7, #20]
 8105884:	2b02      	cmp	r3, #2
 8105886:	f000 8083 	beq.w	8105990 <HAL_RCC_GetSysClockFreq+0x204>
 810588a:	697b      	ldr	r3, [r7, #20]
 810588c:	2b02      	cmp	r3, #2
 810588e:	f200 80a1 	bhi.w	81059d4 <HAL_RCC_GetSysClockFreq+0x248>
 8105892:	697b      	ldr	r3, [r7, #20]
 8105894:	2b00      	cmp	r3, #0
 8105896:	d003      	beq.n	81058a0 <HAL_RCC_GetSysClockFreq+0x114>
 8105898:	697b      	ldr	r3, [r7, #20]
 810589a:	2b01      	cmp	r3, #1
 810589c:	d056      	beq.n	810594c <HAL_RCC_GetSysClockFreq+0x1c0>
 810589e:	e099      	b.n	81059d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81058a0:	4b6f      	ldr	r3, [pc, #444]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81058a2:	681b      	ldr	r3, [r3, #0]
 81058a4:	f003 0320 	and.w	r3, r3, #32
 81058a8:	2b00      	cmp	r3, #0
 81058aa:	d02d      	beq.n	8105908 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81058ac:	4b6c      	ldr	r3, [pc, #432]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81058ae:	681b      	ldr	r3, [r3, #0]
 81058b0:	08db      	lsrs	r3, r3, #3
 81058b2:	f003 0303 	and.w	r3, r3, #3
 81058b6:	4a6b      	ldr	r2, [pc, #428]	; (8105a64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81058b8:	fa22 f303 	lsr.w	r3, r2, r3
 81058bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81058be:	687b      	ldr	r3, [r7, #4]
 81058c0:	ee07 3a90 	vmov	s15, r3
 81058c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058c8:	693b      	ldr	r3, [r7, #16]
 81058ca:	ee07 3a90 	vmov	s15, r3
 81058ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058d6:	4b62      	ldr	r3, [pc, #392]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058de:	ee07 3a90 	vmov	s15, r3
 81058e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81058ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8105a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 81058ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105902:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8105906:	e087      	b.n	8105a18 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105908:	693b      	ldr	r3, [r7, #16]
 810590a:	ee07 3a90 	vmov	s15, r3
 810590e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105912:	eddf 6a58 	vldr	s13, [pc, #352]	; 8105a74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810591a:	4b51      	ldr	r3, [pc, #324]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810591e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105922:	ee07 3a90 	vmov	s15, r3
 8105926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810592a:	ed97 6a02 	vldr	s12, [r7, #8]
 810592e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8105a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810593a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810593e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810594a:	e065      	b.n	8105a18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810594c:	693b      	ldr	r3, [r7, #16]
 810594e:	ee07 3a90 	vmov	s15, r3
 8105952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105956:	eddf 6a48 	vldr	s13, [pc, #288]	; 8105a78 <HAL_RCC_GetSysClockFreq+0x2ec>
 810595a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810595e:	4b40      	ldr	r3, [pc, #256]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105966:	ee07 3a90 	vmov	s15, r3
 810596a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810596e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105972:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8105a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810597a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810597e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105986:	ee67 7a27 	vmul.f32	s15, s14, s15
 810598a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810598e:	e043      	b.n	8105a18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105990:	693b      	ldr	r3, [r7, #16]
 8105992:	ee07 3a90 	vmov	s15, r3
 8105996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810599a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8105a7c <HAL_RCC_GetSysClockFreq+0x2f0>
 810599e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81059a2:	4b2f      	ldr	r3, [pc, #188]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81059a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059aa:	ee07 3a90 	vmov	s15, r3
 81059ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81059b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8105a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 81059ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81059be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81059c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81059c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81059ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81059ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81059d2:	e021      	b.n	8105a18 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81059d4:	693b      	ldr	r3, [r7, #16]
 81059d6:	ee07 3a90 	vmov	s15, r3
 81059da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8105a78 <HAL_RCC_GetSysClockFreq+0x2ec>
 81059e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81059e6:	4b1e      	ldr	r3, [pc, #120]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059ee:	ee07 3a90 	vmov	s15, r3
 81059f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81059fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8105a70 <HAL_RCC_GetSysClockFreq+0x2e4>
 81059fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105a16:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8105a18:	4b11      	ldr	r3, [pc, #68]	; (8105a60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105a1c:	0a5b      	lsrs	r3, r3, #9
 8105a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105a22:	3301      	adds	r3, #1
 8105a24:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8105a26:	683b      	ldr	r3, [r7, #0]
 8105a28:	ee07 3a90 	vmov	s15, r3
 8105a2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a3c:	ee17 3a90 	vmov	r3, s15
 8105a40:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8105a42:	e005      	b.n	8105a50 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8105a44:	2300      	movs	r3, #0
 8105a46:	61bb      	str	r3, [r7, #24]
    break;
 8105a48:	e002      	b.n	8105a50 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8105a4a:	4b07      	ldr	r3, [pc, #28]	; (8105a68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105a4c:	61bb      	str	r3, [r7, #24]
    break;
 8105a4e:	bf00      	nop
  }

  return sysclockfreq;
 8105a50:	69bb      	ldr	r3, [r7, #24]
}
 8105a52:	4618      	mov	r0, r3
 8105a54:	3724      	adds	r7, #36	; 0x24
 8105a56:	46bd      	mov	sp, r7
 8105a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a5c:	4770      	bx	lr
 8105a5e:	bf00      	nop
 8105a60:	58024400 	.word	0x58024400
 8105a64:	03d09000 	.word	0x03d09000
 8105a68:	003d0900 	.word	0x003d0900
 8105a6c:	007a1200 	.word	0x007a1200
 8105a70:	46000000 	.word	0x46000000
 8105a74:	4c742400 	.word	0x4c742400
 8105a78:	4a742400 	.word	0x4a742400
 8105a7c:	4af42400 	.word	0x4af42400

08105a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8105a80:	b580      	push	{r7, lr}
 8105a82:	b082      	sub	sp, #8
 8105a84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105a86:	f7ff fe81 	bl	810578c <HAL_RCC_GetSysClockFreq>
 8105a8a:	4602      	mov	r2, r0
 8105a8c:	4b11      	ldr	r3, [pc, #68]	; (8105ad4 <HAL_RCC_GetHCLKFreq+0x54>)
 8105a8e:	699b      	ldr	r3, [r3, #24]
 8105a90:	0a1b      	lsrs	r3, r3, #8
 8105a92:	f003 030f 	and.w	r3, r3, #15
 8105a96:	4910      	ldr	r1, [pc, #64]	; (8105ad8 <HAL_RCC_GetHCLKFreq+0x58>)
 8105a98:	5ccb      	ldrb	r3, [r1, r3]
 8105a9a:	f003 031f 	and.w	r3, r3, #31
 8105a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8105aa2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105aa4:	4b0b      	ldr	r3, [pc, #44]	; (8105ad4 <HAL_RCC_GetHCLKFreq+0x54>)
 8105aa6:	699b      	ldr	r3, [r3, #24]
 8105aa8:	f003 030f 	and.w	r3, r3, #15
 8105aac:	4a0a      	ldr	r2, [pc, #40]	; (8105ad8 <HAL_RCC_GetHCLKFreq+0x58>)
 8105aae:	5cd3      	ldrb	r3, [r2, r3]
 8105ab0:	f003 031f 	and.w	r3, r3, #31
 8105ab4:	687a      	ldr	r2, [r7, #4]
 8105ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8105aba:	4a08      	ldr	r2, [pc, #32]	; (8105adc <HAL_RCC_GetHCLKFreq+0x5c>)
 8105abc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105abe:	4b07      	ldr	r3, [pc, #28]	; (8105adc <HAL_RCC_GetHCLKFreq+0x5c>)
 8105ac0:	681b      	ldr	r3, [r3, #0]
 8105ac2:	4a07      	ldr	r2, [pc, #28]	; (8105ae0 <HAL_RCC_GetHCLKFreq+0x60>)
 8105ac4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105ac6:	4b05      	ldr	r3, [pc, #20]	; (8105adc <HAL_RCC_GetHCLKFreq+0x5c>)
 8105ac8:	681b      	ldr	r3, [r3, #0]
}
 8105aca:	4618      	mov	r0, r3
 8105acc:	3708      	adds	r7, #8
 8105ace:	46bd      	mov	sp, r7
 8105ad0:	bd80      	pop	{r7, pc}
 8105ad2:	bf00      	nop
 8105ad4:	58024400 	.word	0x58024400
 8105ad8:	0810b2f0 	.word	0x0810b2f0
 8105adc:	10000004 	.word	0x10000004
 8105ae0:	10000000 	.word	0x10000000

08105ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105ae4:	b580      	push	{r7, lr}
 8105ae6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105ae8:	f7ff ffca 	bl	8105a80 <HAL_RCC_GetHCLKFreq>
 8105aec:	4602      	mov	r2, r0
 8105aee:	4b06      	ldr	r3, [pc, #24]	; (8105b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105af0:	69db      	ldr	r3, [r3, #28]
 8105af2:	091b      	lsrs	r3, r3, #4
 8105af4:	f003 0307 	and.w	r3, r3, #7
 8105af8:	4904      	ldr	r1, [pc, #16]	; (8105b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8105afa:	5ccb      	ldrb	r3, [r1, r3]
 8105afc:	f003 031f 	and.w	r3, r3, #31
 8105b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105b04:	4618      	mov	r0, r3
 8105b06:	bd80      	pop	{r7, pc}
 8105b08:	58024400 	.word	0x58024400
 8105b0c:	0810b2f0 	.word	0x0810b2f0

08105b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105b10:	b580      	push	{r7, lr}
 8105b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105b14:	f7ff ffb4 	bl	8105a80 <HAL_RCC_GetHCLKFreq>
 8105b18:	4602      	mov	r2, r0
 8105b1a:	4b06      	ldr	r3, [pc, #24]	; (8105b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8105b1c:	69db      	ldr	r3, [r3, #28]
 8105b1e:	0a1b      	lsrs	r3, r3, #8
 8105b20:	f003 0307 	and.w	r3, r3, #7
 8105b24:	4904      	ldr	r1, [pc, #16]	; (8105b38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8105b26:	5ccb      	ldrb	r3, [r1, r3]
 8105b28:	f003 031f 	and.w	r3, r3, #31
 8105b2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105b30:	4618      	mov	r0, r3
 8105b32:	bd80      	pop	{r7, pc}
 8105b34:	58024400 	.word	0x58024400
 8105b38:	0810b2f0 	.word	0x0810b2f0

08105b3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105b3c:	b580      	push	{r7, lr}
 8105b3e:	b086      	sub	sp, #24
 8105b40:	af00      	add	r7, sp, #0
 8105b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105b44:	2300      	movs	r3, #0
 8105b46:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8105b48:	2300      	movs	r3, #0
 8105b4a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105b54:	2b00      	cmp	r3, #0
 8105b56:	d03f      	beq.n	8105bd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105b5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105b60:	d02a      	beq.n	8105bb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8105b62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105b66:	d824      	bhi.n	8105bb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8105b68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105b6c:	d018      	beq.n	8105ba0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105b72:	d81e      	bhi.n	8105bb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8105b74:	2b00      	cmp	r3, #0
 8105b76:	d003      	beq.n	8105b80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8105b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105b7c:	d007      	beq.n	8105b8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8105b7e:	e018      	b.n	8105bb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b80:	4ba3      	ldr	r3, [pc, #652]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b84:	4aa2      	ldr	r2, [pc, #648]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105b8c:	e015      	b.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105b8e:	687b      	ldr	r3, [r7, #4]
 8105b90:	3304      	adds	r3, #4
 8105b92:	2102      	movs	r1, #2
 8105b94:	4618      	mov	r0, r3
 8105b96:	f001 fff9 	bl	8107b8c <RCCEx_PLL2_Config>
 8105b9a:	4603      	mov	r3, r0
 8105b9c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105b9e:	e00c      	b.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105ba0:	687b      	ldr	r3, [r7, #4]
 8105ba2:	3324      	adds	r3, #36	; 0x24
 8105ba4:	2102      	movs	r1, #2
 8105ba6:	4618      	mov	r0, r3
 8105ba8:	f002 f8a2 	bl	8107cf0 <RCCEx_PLL3_Config>
 8105bac:	4603      	mov	r3, r0
 8105bae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105bb0:	e003      	b.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105bb2:	2301      	movs	r3, #1
 8105bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8105bb6:	e000      	b.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8105bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105bba:	7dfb      	ldrb	r3, [r7, #23]
 8105bbc:	2b00      	cmp	r3, #0
 8105bbe:	d109      	bne.n	8105bd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105bc0:	4b93      	ldr	r3, [pc, #588]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105bc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8105bc8:	687b      	ldr	r3, [r7, #4]
 8105bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105bcc:	4990      	ldr	r1, [pc, #576]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105bce:	4313      	orrs	r3, r2
 8105bd0:	650b      	str	r3, [r1, #80]	; 0x50
 8105bd2:	e001      	b.n	8105bd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bd4:	7dfb      	ldrb	r3, [r7, #23]
 8105bd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105bd8:	687b      	ldr	r3, [r7, #4]
 8105bda:	681b      	ldr	r3, [r3, #0]
 8105bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105be0:	2b00      	cmp	r3, #0
 8105be2:	d03d      	beq.n	8105c60 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8105be4:	687b      	ldr	r3, [r7, #4]
 8105be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105be8:	2b04      	cmp	r3, #4
 8105bea:	d826      	bhi.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8105bec:	a201      	add	r2, pc, #4	; (adr r2, 8105bf4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8105bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105bf2:	bf00      	nop
 8105bf4:	08105c09 	.word	0x08105c09
 8105bf8:	08105c17 	.word	0x08105c17
 8105bfc:	08105c29 	.word	0x08105c29
 8105c00:	08105c41 	.word	0x08105c41
 8105c04:	08105c41 	.word	0x08105c41
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c08:	4b81      	ldr	r3, [pc, #516]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c0c:	4a80      	ldr	r2, [pc, #512]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105c14:	e015      	b.n	8105c42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105c16:	687b      	ldr	r3, [r7, #4]
 8105c18:	3304      	adds	r3, #4
 8105c1a:	2100      	movs	r1, #0
 8105c1c:	4618      	mov	r0, r3
 8105c1e:	f001 ffb5 	bl	8107b8c <RCCEx_PLL2_Config>
 8105c22:	4603      	mov	r3, r0
 8105c24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105c26:	e00c      	b.n	8105c42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105c28:	687b      	ldr	r3, [r7, #4]
 8105c2a:	3324      	adds	r3, #36	; 0x24
 8105c2c:	2100      	movs	r1, #0
 8105c2e:	4618      	mov	r0, r3
 8105c30:	f002 f85e 	bl	8107cf0 <RCCEx_PLL3_Config>
 8105c34:	4603      	mov	r3, r0
 8105c36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105c38:	e003      	b.n	8105c42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105c3a:	2301      	movs	r3, #1
 8105c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8105c3e:	e000      	b.n	8105c42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8105c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105c42:	7dfb      	ldrb	r3, [r7, #23]
 8105c44:	2b00      	cmp	r3, #0
 8105c46:	d109      	bne.n	8105c5c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105c48:	4b71      	ldr	r3, [pc, #452]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105c4c:	f023 0207 	bic.w	r2, r3, #7
 8105c50:	687b      	ldr	r3, [r7, #4]
 8105c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105c54:	496e      	ldr	r1, [pc, #440]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c56:	4313      	orrs	r3, r2
 8105c58:	650b      	str	r3, [r1, #80]	; 0x50
 8105c5a:	e001      	b.n	8105c60 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c5c:	7dfb      	ldrb	r3, [r7, #23]
 8105c5e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105c60:	687b      	ldr	r3, [r7, #4]
 8105c62:	681b      	ldr	r3, [r3, #0]
 8105c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105c68:	2b00      	cmp	r3, #0
 8105c6a:	d042      	beq.n	8105cf2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8105c6c:	687b      	ldr	r3, [r7, #4]
 8105c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105c74:	d02b      	beq.n	8105cce <HAL_RCCEx_PeriphCLKConfig+0x192>
 8105c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105c7a:	d825      	bhi.n	8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105c7c:	2bc0      	cmp	r3, #192	; 0xc0
 8105c7e:	d028      	beq.n	8105cd2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8105c80:	2bc0      	cmp	r3, #192	; 0xc0
 8105c82:	d821      	bhi.n	8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105c84:	2b80      	cmp	r3, #128	; 0x80
 8105c86:	d016      	beq.n	8105cb6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8105c88:	2b80      	cmp	r3, #128	; 0x80
 8105c8a:	d81d      	bhi.n	8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105c8c:	2b00      	cmp	r3, #0
 8105c8e:	d002      	beq.n	8105c96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8105c90:	2b40      	cmp	r3, #64	; 0x40
 8105c92:	d007      	beq.n	8105ca4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8105c94:	e018      	b.n	8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c96:	4b5e      	ldr	r3, [pc, #376]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c9a:	4a5d      	ldr	r2, [pc, #372]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105ca2:	e017      	b.n	8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105ca4:	687b      	ldr	r3, [r7, #4]
 8105ca6:	3304      	adds	r3, #4
 8105ca8:	2100      	movs	r1, #0
 8105caa:	4618      	mov	r0, r3
 8105cac:	f001 ff6e 	bl	8107b8c <RCCEx_PLL2_Config>
 8105cb0:	4603      	mov	r3, r0
 8105cb2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105cb4:	e00e      	b.n	8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105cb6:	687b      	ldr	r3, [r7, #4]
 8105cb8:	3324      	adds	r3, #36	; 0x24
 8105cba:	2100      	movs	r1, #0
 8105cbc:	4618      	mov	r0, r3
 8105cbe:	f002 f817 	bl	8107cf0 <RCCEx_PLL3_Config>
 8105cc2:	4603      	mov	r3, r0
 8105cc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105cc6:	e005      	b.n	8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105cc8:	2301      	movs	r3, #1
 8105cca:	75fb      	strb	r3, [r7, #23]
      break;
 8105ccc:	e002      	b.n	8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8105cce:	bf00      	nop
 8105cd0:	e000      	b.n	8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8105cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105cd4:	7dfb      	ldrb	r3, [r7, #23]
 8105cd6:	2b00      	cmp	r3, #0
 8105cd8:	d109      	bne.n	8105cee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105cda:	4b4d      	ldr	r3, [pc, #308]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105cde:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8105ce2:	687b      	ldr	r3, [r7, #4]
 8105ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105ce6:	494a      	ldr	r1, [pc, #296]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105ce8:	4313      	orrs	r3, r2
 8105cea:	650b      	str	r3, [r1, #80]	; 0x50
 8105cec:	e001      	b.n	8105cf2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cee:	7dfb      	ldrb	r3, [r7, #23]
 8105cf0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105cf2:	687b      	ldr	r3, [r7, #4]
 8105cf4:	681b      	ldr	r3, [r3, #0]
 8105cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8105cfa:	2b00      	cmp	r3, #0
 8105cfc:	d049      	beq.n	8105d92 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8105cfe:	687b      	ldr	r3, [r7, #4]
 8105d00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105d04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105d08:	d030      	beq.n	8105d6c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8105d0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105d0e:	d82a      	bhi.n	8105d66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105d10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105d14:	d02c      	beq.n	8105d70 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8105d16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105d1a:	d824      	bhi.n	8105d66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105d20:	d018      	beq.n	8105d54 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8105d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105d26:	d81e      	bhi.n	8105d66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105d28:	2b00      	cmp	r3, #0
 8105d2a:	d003      	beq.n	8105d34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8105d2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105d30:	d007      	beq.n	8105d42 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8105d32:	e018      	b.n	8105d66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d34:	4b36      	ldr	r3, [pc, #216]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d38:	4a35      	ldr	r2, [pc, #212]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105d40:	e017      	b.n	8105d72 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105d42:	687b      	ldr	r3, [r7, #4]
 8105d44:	3304      	adds	r3, #4
 8105d46:	2100      	movs	r1, #0
 8105d48:	4618      	mov	r0, r3
 8105d4a:	f001 ff1f 	bl	8107b8c <RCCEx_PLL2_Config>
 8105d4e:	4603      	mov	r3, r0
 8105d50:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105d52:	e00e      	b.n	8105d72 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	3324      	adds	r3, #36	; 0x24
 8105d58:	2100      	movs	r1, #0
 8105d5a:	4618      	mov	r0, r3
 8105d5c:	f001 ffc8 	bl	8107cf0 <RCCEx_PLL3_Config>
 8105d60:	4603      	mov	r3, r0
 8105d62:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105d64:	e005      	b.n	8105d72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105d66:	2301      	movs	r3, #1
 8105d68:	75fb      	strb	r3, [r7, #23]
      break;
 8105d6a:	e002      	b.n	8105d72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105d6c:	bf00      	nop
 8105d6e:	e000      	b.n	8105d72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105d72:	7dfb      	ldrb	r3, [r7, #23]
 8105d74:	2b00      	cmp	r3, #0
 8105d76:	d10a      	bne.n	8105d8e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105d78:	4b25      	ldr	r3, [pc, #148]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105d7c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8105d80:	687b      	ldr	r3, [r7, #4]
 8105d82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105d86:	4922      	ldr	r1, [pc, #136]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105d88:	4313      	orrs	r3, r2
 8105d8a:	658b      	str	r3, [r1, #88]	; 0x58
 8105d8c:	e001      	b.n	8105d92 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d8e:	7dfb      	ldrb	r3, [r7, #23]
 8105d90:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105d92:	687b      	ldr	r3, [r7, #4]
 8105d94:	681b      	ldr	r3, [r3, #0]
 8105d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105d9a:	2b00      	cmp	r3, #0
 8105d9c:	d04b      	beq.n	8105e36 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8105d9e:	687b      	ldr	r3, [r7, #4]
 8105da0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105da4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105da8:	d030      	beq.n	8105e0c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8105daa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105dae:	d82a      	bhi.n	8105e06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105db0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105db4:	d02e      	beq.n	8105e14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8105db6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105dba:	d824      	bhi.n	8105e06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105dbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105dc0:	d018      	beq.n	8105df4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8105dc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105dc6:	d81e      	bhi.n	8105e06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105dc8:	2b00      	cmp	r3, #0
 8105dca:	d003      	beq.n	8105dd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8105dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105dd0:	d007      	beq.n	8105de2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8105dd2:	e018      	b.n	8105e06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105dd4:	4b0e      	ldr	r3, [pc, #56]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105dd8:	4a0d      	ldr	r2, [pc, #52]	; (8105e10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105dde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105de0:	e019      	b.n	8105e16 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105de2:	687b      	ldr	r3, [r7, #4]
 8105de4:	3304      	adds	r3, #4
 8105de6:	2100      	movs	r1, #0
 8105de8:	4618      	mov	r0, r3
 8105dea:	f001 fecf 	bl	8107b8c <RCCEx_PLL2_Config>
 8105dee:	4603      	mov	r3, r0
 8105df0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105df2:	e010      	b.n	8105e16 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105df4:	687b      	ldr	r3, [r7, #4]
 8105df6:	3324      	adds	r3, #36	; 0x24
 8105df8:	2100      	movs	r1, #0
 8105dfa:	4618      	mov	r0, r3
 8105dfc:	f001 ff78 	bl	8107cf0 <RCCEx_PLL3_Config>
 8105e00:	4603      	mov	r3, r0
 8105e02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105e04:	e007      	b.n	8105e16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105e06:	2301      	movs	r3, #1
 8105e08:	75fb      	strb	r3, [r7, #23]
      break;
 8105e0a:	e004      	b.n	8105e16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8105e0c:	bf00      	nop
 8105e0e:	e002      	b.n	8105e16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8105e10:	58024400 	.word	0x58024400
      break;
 8105e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105e16:	7dfb      	ldrb	r3, [r7, #23]
 8105e18:	2b00      	cmp	r3, #0
 8105e1a:	d10a      	bne.n	8105e32 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105e1c:	4b99      	ldr	r3, [pc, #612]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105e20:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8105e24:	687b      	ldr	r3, [r7, #4]
 8105e26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105e2a:	4996      	ldr	r1, [pc, #600]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e2c:	4313      	orrs	r3, r2
 8105e2e:	658b      	str	r3, [r1, #88]	; 0x58
 8105e30:	e001      	b.n	8105e36 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e32:	7dfb      	ldrb	r3, [r7, #23]
 8105e34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	681b      	ldr	r3, [r3, #0]
 8105e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105e3e:	2b00      	cmp	r3, #0
 8105e40:	d032      	beq.n	8105ea8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105e46:	2b30      	cmp	r3, #48	; 0x30
 8105e48:	d01c      	beq.n	8105e84 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8105e4a:	2b30      	cmp	r3, #48	; 0x30
 8105e4c:	d817      	bhi.n	8105e7e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105e4e:	2b20      	cmp	r3, #32
 8105e50:	d00c      	beq.n	8105e6c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8105e52:	2b20      	cmp	r3, #32
 8105e54:	d813      	bhi.n	8105e7e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105e56:	2b00      	cmp	r3, #0
 8105e58:	d016      	beq.n	8105e88 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8105e5a:	2b10      	cmp	r3, #16
 8105e5c:	d10f      	bne.n	8105e7e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e5e:	4b89      	ldr	r3, [pc, #548]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e62:	4a88      	ldr	r2, [pc, #544]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105e68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105e6a:	e00e      	b.n	8105e8a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105e6c:	687b      	ldr	r3, [r7, #4]
 8105e6e:	3304      	adds	r3, #4
 8105e70:	2102      	movs	r1, #2
 8105e72:	4618      	mov	r0, r3
 8105e74:	f001 fe8a 	bl	8107b8c <RCCEx_PLL2_Config>
 8105e78:	4603      	mov	r3, r0
 8105e7a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105e7c:	e005      	b.n	8105e8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105e7e:	2301      	movs	r3, #1
 8105e80:	75fb      	strb	r3, [r7, #23]
      break;
 8105e82:	e002      	b.n	8105e8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105e84:	bf00      	nop
 8105e86:	e000      	b.n	8105e8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105e8a:	7dfb      	ldrb	r3, [r7, #23]
 8105e8c:	2b00      	cmp	r3, #0
 8105e8e:	d109      	bne.n	8105ea4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105e90:	4b7c      	ldr	r3, [pc, #496]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8105e98:	687b      	ldr	r3, [r7, #4]
 8105e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105e9c:	4979      	ldr	r1, [pc, #484]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105e9e:	4313      	orrs	r3, r2
 8105ea0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105ea2:	e001      	b.n	8105ea8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ea4:	7dfb      	ldrb	r3, [r7, #23]
 8105ea6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105ea8:	687b      	ldr	r3, [r7, #4]
 8105eaa:	681b      	ldr	r3, [r3, #0]
 8105eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8105eb0:	2b00      	cmp	r3, #0
 8105eb2:	d047      	beq.n	8105f44 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8105eb4:	687b      	ldr	r3, [r7, #4]
 8105eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105ebc:	d030      	beq.n	8105f20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8105ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105ec2:	d82a      	bhi.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105ec4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105ec8:	d02c      	beq.n	8105f24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8105eca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105ece:	d824      	bhi.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105ed4:	d018      	beq.n	8105f08 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8105ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105eda:	d81e      	bhi.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8105edc:	2b00      	cmp	r3, #0
 8105ede:	d003      	beq.n	8105ee8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8105ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105ee4:	d007      	beq.n	8105ef6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8105ee6:	e018      	b.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ee8:	4b66      	ldr	r3, [pc, #408]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105eec:	4a65      	ldr	r2, [pc, #404]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105ef4:	e017      	b.n	8105f26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105ef6:	687b      	ldr	r3, [r7, #4]
 8105ef8:	3304      	adds	r3, #4
 8105efa:	2100      	movs	r1, #0
 8105efc:	4618      	mov	r0, r3
 8105efe:	f001 fe45 	bl	8107b8c <RCCEx_PLL2_Config>
 8105f02:	4603      	mov	r3, r0
 8105f04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105f06:	e00e      	b.n	8105f26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105f08:	687b      	ldr	r3, [r7, #4]
 8105f0a:	3324      	adds	r3, #36	; 0x24
 8105f0c:	2100      	movs	r1, #0
 8105f0e:	4618      	mov	r0, r3
 8105f10:	f001 feee 	bl	8107cf0 <RCCEx_PLL3_Config>
 8105f14:	4603      	mov	r3, r0
 8105f16:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105f18:	e005      	b.n	8105f26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105f1a:	2301      	movs	r3, #1
 8105f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8105f1e:	e002      	b.n	8105f26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105f20:	bf00      	nop
 8105f22:	e000      	b.n	8105f26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105f26:	7dfb      	ldrb	r3, [r7, #23]
 8105f28:	2b00      	cmp	r3, #0
 8105f2a:	d109      	bne.n	8105f40 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105f2c:	4b55      	ldr	r3, [pc, #340]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f30:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105f38:	4952      	ldr	r1, [pc, #328]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105f3a:	4313      	orrs	r3, r2
 8105f3c:	650b      	str	r3, [r1, #80]	; 0x50
 8105f3e:	e001      	b.n	8105f44 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f40:	7dfb      	ldrb	r3, [r7, #23]
 8105f42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105f44:	687b      	ldr	r3, [r7, #4]
 8105f46:	681b      	ldr	r3, [r3, #0]
 8105f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8105f4c:	2b00      	cmp	r3, #0
 8105f4e:	d049      	beq.n	8105fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8105f50:	687b      	ldr	r3, [r7, #4]
 8105f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105f58:	d02e      	beq.n	8105fb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8105f5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105f5e:	d828      	bhi.n	8105fb2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105f60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105f64:	d02a      	beq.n	8105fbc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8105f66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105f6a:	d822      	bhi.n	8105fb2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105f6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105f70:	d026      	beq.n	8105fc0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8105f72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105f76:	d81c      	bhi.n	8105fb2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105f7c:	d010      	beq.n	8105fa0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8105f7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105f82:	d816      	bhi.n	8105fb2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105f84:	2b00      	cmp	r3, #0
 8105f86:	d01d      	beq.n	8105fc4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8105f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105f8c:	d111      	bne.n	8105fb2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105f8e:	687b      	ldr	r3, [r7, #4]
 8105f90:	3304      	adds	r3, #4
 8105f92:	2101      	movs	r1, #1
 8105f94:	4618      	mov	r0, r3
 8105f96:	f001 fdf9 	bl	8107b8c <RCCEx_PLL2_Config>
 8105f9a:	4603      	mov	r3, r0
 8105f9c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105f9e:	e012      	b.n	8105fc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105fa0:	687b      	ldr	r3, [r7, #4]
 8105fa2:	3324      	adds	r3, #36	; 0x24
 8105fa4:	2101      	movs	r1, #1
 8105fa6:	4618      	mov	r0, r3
 8105fa8:	f001 fea2 	bl	8107cf0 <RCCEx_PLL3_Config>
 8105fac:	4603      	mov	r3, r0
 8105fae:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105fb0:	e009      	b.n	8105fc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105fb2:	2301      	movs	r3, #1
 8105fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8105fb6:	e006      	b.n	8105fc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105fb8:	bf00      	nop
 8105fba:	e004      	b.n	8105fc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105fbc:	bf00      	nop
 8105fbe:	e002      	b.n	8105fc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105fc0:	bf00      	nop
 8105fc2:	e000      	b.n	8105fc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8105fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105fc6:	7dfb      	ldrb	r3, [r7, #23]
 8105fc8:	2b00      	cmp	r3, #0
 8105fca:	d109      	bne.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105fcc:	4b2d      	ldr	r3, [pc, #180]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105fd0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8105fd4:	687b      	ldr	r3, [r7, #4]
 8105fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105fd8:	492a      	ldr	r1, [pc, #168]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105fda:	4313      	orrs	r3, r2
 8105fdc:	650b      	str	r3, [r1, #80]	; 0x50
 8105fde:	e001      	b.n	8105fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105fe0:	7dfb      	ldrb	r3, [r7, #23]
 8105fe2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105fe4:	687b      	ldr	r3, [r7, #4]
 8105fe6:	681b      	ldr	r3, [r3, #0]
 8105fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8105fec:	2b00      	cmp	r3, #0
 8105fee:	d04d      	beq.n	810608c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105ffa:	d02e      	beq.n	810605a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8105ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106000:	d828      	bhi.n	8106054 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8106002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106006:	d02a      	beq.n	810605e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8106008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810600c:	d822      	bhi.n	8106054 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810600e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106012:	d026      	beq.n	8106062 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8106014:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106018:	d81c      	bhi.n	8106054 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810601a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810601e:	d010      	beq.n	8106042 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8106020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106024:	d816      	bhi.n	8106054 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8106026:	2b00      	cmp	r3, #0
 8106028:	d01d      	beq.n	8106066 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 810602a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810602e:	d111      	bne.n	8106054 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	3304      	adds	r3, #4
 8106034:	2101      	movs	r1, #1
 8106036:	4618      	mov	r0, r3
 8106038:	f001 fda8 	bl	8107b8c <RCCEx_PLL2_Config>
 810603c:	4603      	mov	r3, r0
 810603e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8106040:	e012      	b.n	8106068 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106042:	687b      	ldr	r3, [r7, #4]
 8106044:	3324      	adds	r3, #36	; 0x24
 8106046:	2101      	movs	r1, #1
 8106048:	4618      	mov	r0, r3
 810604a:	f001 fe51 	bl	8107cf0 <RCCEx_PLL3_Config>
 810604e:	4603      	mov	r3, r0
 8106050:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8106052:	e009      	b.n	8106068 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8106054:	2301      	movs	r3, #1
 8106056:	75fb      	strb	r3, [r7, #23]
      break;
 8106058:	e006      	b.n	8106068 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810605a:	bf00      	nop
 810605c:	e004      	b.n	8106068 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810605e:	bf00      	nop
 8106060:	e002      	b.n	8106068 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8106062:	bf00      	nop
 8106064:	e000      	b.n	8106068 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8106066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106068:	7dfb      	ldrb	r3, [r7, #23]
 810606a:	2b00      	cmp	r3, #0
 810606c:	d10c      	bne.n	8106088 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810606e:	4b05      	ldr	r3, [pc, #20]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8106070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106072:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8106076:	687b      	ldr	r3, [r7, #4]
 8106078:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810607c:	4901      	ldr	r1, [pc, #4]	; (8106084 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810607e:	4313      	orrs	r3, r2
 8106080:	658b      	str	r3, [r1, #88]	; 0x58
 8106082:	e003      	b.n	810608c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8106084:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106088:	7dfb      	ldrb	r3, [r7, #23]
 810608a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810608c:	687b      	ldr	r3, [r7, #4]
 810608e:	681b      	ldr	r3, [r3, #0]
 8106090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106094:	2b00      	cmp	r3, #0
 8106096:	d02f      	beq.n	81060f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810609c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81060a0:	d00e      	beq.n	81060c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 81060a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81060a6:	d814      	bhi.n	81060d2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 81060a8:	2b00      	cmp	r3, #0
 81060aa:	d015      	beq.n	81060d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 81060ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81060b0:	d10f      	bne.n	81060d2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81060b2:	4bb0      	ldr	r3, [pc, #704]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060b6:	4aaf      	ldr	r2, [pc, #700]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81060bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81060be:	e00c      	b.n	81060da <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81060c0:	687b      	ldr	r3, [r7, #4]
 81060c2:	3304      	adds	r3, #4
 81060c4:	2101      	movs	r1, #1
 81060c6:	4618      	mov	r0, r3
 81060c8:	f001 fd60 	bl	8107b8c <RCCEx_PLL2_Config>
 81060cc:	4603      	mov	r3, r0
 81060ce:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81060d0:	e003      	b.n	81060da <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81060d2:	2301      	movs	r3, #1
 81060d4:	75fb      	strb	r3, [r7, #23]
      break;
 81060d6:	e000      	b.n	81060da <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 81060d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81060da:	7dfb      	ldrb	r3, [r7, #23]
 81060dc:	2b00      	cmp	r3, #0
 81060de:	d109      	bne.n	81060f4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81060e0:	4ba4      	ldr	r3, [pc, #656]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81060e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81060e8:	687b      	ldr	r3, [r7, #4]
 81060ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81060ec:	49a1      	ldr	r1, [pc, #644]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81060ee:	4313      	orrs	r3, r2
 81060f0:	650b      	str	r3, [r1, #80]	; 0x50
 81060f2:	e001      	b.n	81060f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060f4:	7dfb      	ldrb	r3, [r7, #23]
 81060f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	681b      	ldr	r3, [r3, #0]
 81060fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106100:	2b00      	cmp	r3, #0
 8106102:	d032      	beq.n	810616a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106108:	2b03      	cmp	r3, #3
 810610a:	d81b      	bhi.n	8106144 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810610c:	a201      	add	r2, pc, #4	; (adr r2, 8106114 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 810610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106112:	bf00      	nop
 8106114:	0810614b 	.word	0x0810614b
 8106118:	08106125 	.word	0x08106125
 810611c:	08106133 	.word	0x08106133
 8106120:	0810614b 	.word	0x0810614b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106124:	4b93      	ldr	r3, [pc, #588]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106128:	4a92      	ldr	r2, [pc, #584]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810612a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810612e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8106130:	e00c      	b.n	810614c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106132:	687b      	ldr	r3, [r7, #4]
 8106134:	3304      	adds	r3, #4
 8106136:	2102      	movs	r1, #2
 8106138:	4618      	mov	r0, r3
 810613a:	f001 fd27 	bl	8107b8c <RCCEx_PLL2_Config>
 810613e:	4603      	mov	r3, r0
 8106140:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8106142:	e003      	b.n	810614c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8106144:	2301      	movs	r3, #1
 8106146:	75fb      	strb	r3, [r7, #23]
      break;
 8106148:	e000      	b.n	810614c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810614a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810614c:	7dfb      	ldrb	r3, [r7, #23]
 810614e:	2b00      	cmp	r3, #0
 8106150:	d109      	bne.n	8106166 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106152:	4b88      	ldr	r3, [pc, #544]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106156:	f023 0203 	bic.w	r2, r3, #3
 810615a:	687b      	ldr	r3, [r7, #4]
 810615c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810615e:	4985      	ldr	r1, [pc, #532]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106160:	4313      	orrs	r3, r2
 8106162:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106164:	e001      	b.n	810616a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106166:	7dfb      	ldrb	r3, [r7, #23]
 8106168:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	681b      	ldr	r3, [r3, #0]
 810616e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106172:	2b00      	cmp	r3, #0
 8106174:	f000 8088 	beq.w	8106288 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106178:	4b7f      	ldr	r3, [pc, #508]	; (8106378 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810617a:	681b      	ldr	r3, [r3, #0]
 810617c:	4a7e      	ldr	r2, [pc, #504]	; (8106378 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810617e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106182:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106184:	f7fd f852 	bl	810322c <HAL_GetTick>
 8106188:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810618a:	e009      	b.n	81061a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810618c:	f7fd f84e 	bl	810322c <HAL_GetTick>
 8106190:	4602      	mov	r2, r0
 8106192:	693b      	ldr	r3, [r7, #16]
 8106194:	1ad3      	subs	r3, r2, r3
 8106196:	2b64      	cmp	r3, #100	; 0x64
 8106198:	d902      	bls.n	81061a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810619a:	2303      	movs	r3, #3
 810619c:	75fb      	strb	r3, [r7, #23]
        break;
 810619e:	e005      	b.n	81061ac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81061a0:	4b75      	ldr	r3, [pc, #468]	; (8106378 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81061a2:	681b      	ldr	r3, [r3, #0]
 81061a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81061a8:	2b00      	cmp	r3, #0
 81061aa:	d0ef      	beq.n	810618c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81061ac:	7dfb      	ldrb	r3, [r7, #23]
 81061ae:	2b00      	cmp	r3, #0
 81061b0:	d168      	bne.n	8106284 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81061b2:	4b70      	ldr	r3, [pc, #448]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81061b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81061bc:	4053      	eors	r3, r2
 81061be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81061c2:	2b00      	cmp	r3, #0
 81061c4:	d013      	beq.n	81061ee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81061c6:	4b6b      	ldr	r3, [pc, #428]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81061c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81061ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81061ce:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81061d0:	4b68      	ldr	r3, [pc, #416]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81061d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81061d4:	4a67      	ldr	r2, [pc, #412]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81061d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81061da:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81061dc:	4b65      	ldr	r3, [pc, #404]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81061e0:	4a64      	ldr	r2, [pc, #400]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81061e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81061e6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81061e8:	4a62      	ldr	r2, [pc, #392]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81061ea:	68fb      	ldr	r3, [r7, #12]
 81061ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81061ee:	687b      	ldr	r3, [r7, #4]
 81061f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81061f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81061f8:	d115      	bne.n	8106226 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81061fa:	f7fd f817 	bl	810322c <HAL_GetTick>
 81061fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106200:	e00b      	b.n	810621a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106202:	f7fd f813 	bl	810322c <HAL_GetTick>
 8106206:	4602      	mov	r2, r0
 8106208:	693b      	ldr	r3, [r7, #16]
 810620a:	1ad3      	subs	r3, r2, r3
 810620c:	f241 3288 	movw	r2, #5000	; 0x1388
 8106210:	4293      	cmp	r3, r2
 8106212:	d902      	bls.n	810621a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8106214:	2303      	movs	r3, #3
 8106216:	75fb      	strb	r3, [r7, #23]
            break;
 8106218:	e005      	b.n	8106226 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810621a:	4b56      	ldr	r3, [pc, #344]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810621e:	f003 0302 	and.w	r3, r3, #2
 8106222:	2b00      	cmp	r3, #0
 8106224:	d0ed      	beq.n	8106202 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8106226:	7dfb      	ldrb	r3, [r7, #23]
 8106228:	2b00      	cmp	r3, #0
 810622a:	d128      	bne.n	810627e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810622c:	687b      	ldr	r3, [r7, #4]
 810622e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810623a:	d10f      	bne.n	810625c <HAL_RCCEx_PeriphCLKConfig+0x720>
 810623c:	4b4d      	ldr	r3, [pc, #308]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810623e:	691b      	ldr	r3, [r3, #16]
 8106240:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8106244:	687b      	ldr	r3, [r7, #4]
 8106246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810624a:	091b      	lsrs	r3, r3, #4
 810624c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8106250:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8106254:	4947      	ldr	r1, [pc, #284]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106256:	4313      	orrs	r3, r2
 8106258:	610b      	str	r3, [r1, #16]
 810625a:	e005      	b.n	8106268 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 810625c:	4b45      	ldr	r3, [pc, #276]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810625e:	691b      	ldr	r3, [r3, #16]
 8106260:	4a44      	ldr	r2, [pc, #272]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106262:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8106266:	6113      	str	r3, [r2, #16]
 8106268:	4b42      	ldr	r3, [pc, #264]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810626a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810626c:	687b      	ldr	r3, [r7, #4]
 810626e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106276:	493f      	ldr	r1, [pc, #252]	; (8106374 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8106278:	4313      	orrs	r3, r2
 810627a:	670b      	str	r3, [r1, #112]	; 0x70
 810627c:	e004      	b.n	8106288 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810627e:	7dfb      	ldrb	r3, [r7, #23]
 8106280:	75bb      	strb	r3, [r7, #22]
 8106282:	e001      	b.n	8106288 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106284:	7dfb      	ldrb	r3, [r7, #23]
 8106286:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106288:	687b      	ldr	r3, [r7, #4]
 810628a:	681b      	ldr	r3, [r3, #0]
 810628c:	f003 0301 	and.w	r3, r3, #1
 8106290:	2b00      	cmp	r3, #0
 8106292:	f000 8083 	beq.w	810639c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8106296:	687b      	ldr	r3, [r7, #4]
 8106298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810629a:	2b28      	cmp	r3, #40	; 0x28
 810629c:	d866      	bhi.n	810636c <HAL_RCCEx_PeriphCLKConfig+0x830>
 810629e:	a201      	add	r2, pc, #4	; (adr r2, 81062a4 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062a4:	0810637d 	.word	0x0810637d
 81062a8:	0810636d 	.word	0x0810636d
 81062ac:	0810636d 	.word	0x0810636d
 81062b0:	0810636d 	.word	0x0810636d
 81062b4:	0810636d 	.word	0x0810636d
 81062b8:	0810636d 	.word	0x0810636d
 81062bc:	0810636d 	.word	0x0810636d
 81062c0:	0810636d 	.word	0x0810636d
 81062c4:	08106349 	.word	0x08106349
 81062c8:	0810636d 	.word	0x0810636d
 81062cc:	0810636d 	.word	0x0810636d
 81062d0:	0810636d 	.word	0x0810636d
 81062d4:	0810636d 	.word	0x0810636d
 81062d8:	0810636d 	.word	0x0810636d
 81062dc:	0810636d 	.word	0x0810636d
 81062e0:	0810636d 	.word	0x0810636d
 81062e4:	0810635b 	.word	0x0810635b
 81062e8:	0810636d 	.word	0x0810636d
 81062ec:	0810636d 	.word	0x0810636d
 81062f0:	0810636d 	.word	0x0810636d
 81062f4:	0810636d 	.word	0x0810636d
 81062f8:	0810636d 	.word	0x0810636d
 81062fc:	0810636d 	.word	0x0810636d
 8106300:	0810636d 	.word	0x0810636d
 8106304:	0810637d 	.word	0x0810637d
 8106308:	0810636d 	.word	0x0810636d
 810630c:	0810636d 	.word	0x0810636d
 8106310:	0810636d 	.word	0x0810636d
 8106314:	0810636d 	.word	0x0810636d
 8106318:	0810636d 	.word	0x0810636d
 810631c:	0810636d 	.word	0x0810636d
 8106320:	0810636d 	.word	0x0810636d
 8106324:	0810637d 	.word	0x0810637d
 8106328:	0810636d 	.word	0x0810636d
 810632c:	0810636d 	.word	0x0810636d
 8106330:	0810636d 	.word	0x0810636d
 8106334:	0810636d 	.word	0x0810636d
 8106338:	0810636d 	.word	0x0810636d
 810633c:	0810636d 	.word	0x0810636d
 8106340:	0810636d 	.word	0x0810636d
 8106344:	0810637d 	.word	0x0810637d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106348:	687b      	ldr	r3, [r7, #4]
 810634a:	3304      	adds	r3, #4
 810634c:	2101      	movs	r1, #1
 810634e:	4618      	mov	r0, r3
 8106350:	f001 fc1c 	bl	8107b8c <RCCEx_PLL2_Config>
 8106354:	4603      	mov	r3, r0
 8106356:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8106358:	e011      	b.n	810637e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810635a:	687b      	ldr	r3, [r7, #4]
 810635c:	3324      	adds	r3, #36	; 0x24
 810635e:	2101      	movs	r1, #1
 8106360:	4618      	mov	r0, r3
 8106362:	f001 fcc5 	bl	8107cf0 <RCCEx_PLL3_Config>
 8106366:	4603      	mov	r3, r0
 8106368:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810636a:	e008      	b.n	810637e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810636c:	2301      	movs	r3, #1
 810636e:	75fb      	strb	r3, [r7, #23]
      break;
 8106370:	e005      	b.n	810637e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8106372:	bf00      	nop
 8106374:	58024400 	.word	0x58024400
 8106378:	58024800 	.word	0x58024800
      break;
 810637c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810637e:	7dfb      	ldrb	r3, [r7, #23]
 8106380:	2b00      	cmp	r3, #0
 8106382:	d109      	bne.n	8106398 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106384:	4b96      	ldr	r3, [pc, #600]	; (81065e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106388:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106390:	4993      	ldr	r1, [pc, #588]	; (81065e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106392:	4313      	orrs	r3, r2
 8106394:	654b      	str	r3, [r1, #84]	; 0x54
 8106396:	e001      	b.n	810639c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106398:	7dfb      	ldrb	r3, [r7, #23]
 810639a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810639c:	687b      	ldr	r3, [r7, #4]
 810639e:	681b      	ldr	r3, [r3, #0]
 81063a0:	f003 0302 	and.w	r3, r3, #2
 81063a4:	2b00      	cmp	r3, #0
 81063a6:	d038      	beq.n	810641a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81063a8:	687b      	ldr	r3, [r7, #4]
 81063aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81063ac:	2b05      	cmp	r3, #5
 81063ae:	d821      	bhi.n	81063f4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 81063b0:	a201      	add	r2, pc, #4	; (adr r2, 81063b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 81063b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81063b6:	bf00      	nop
 81063b8:	081063fb 	.word	0x081063fb
 81063bc:	081063d1 	.word	0x081063d1
 81063c0:	081063e3 	.word	0x081063e3
 81063c4:	081063fb 	.word	0x081063fb
 81063c8:	081063fb 	.word	0x081063fb
 81063cc:	081063fb 	.word	0x081063fb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	3304      	adds	r3, #4
 81063d4:	2101      	movs	r1, #1
 81063d6:	4618      	mov	r0, r3
 81063d8:	f001 fbd8 	bl	8107b8c <RCCEx_PLL2_Config>
 81063dc:	4603      	mov	r3, r0
 81063de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81063e0:	e00c      	b.n	81063fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81063e2:	687b      	ldr	r3, [r7, #4]
 81063e4:	3324      	adds	r3, #36	; 0x24
 81063e6:	2101      	movs	r1, #1
 81063e8:	4618      	mov	r0, r3
 81063ea:	f001 fc81 	bl	8107cf0 <RCCEx_PLL3_Config>
 81063ee:	4603      	mov	r3, r0
 81063f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81063f2:	e003      	b.n	81063fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81063f4:	2301      	movs	r3, #1
 81063f6:	75fb      	strb	r3, [r7, #23]
      break;
 81063f8:	e000      	b.n	81063fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81063fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81063fc:	7dfb      	ldrb	r3, [r7, #23]
 81063fe:	2b00      	cmp	r3, #0
 8106400:	d109      	bne.n	8106416 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106402:	4b77      	ldr	r3, [pc, #476]	; (81065e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106406:	f023 0207 	bic.w	r2, r3, #7
 810640a:	687b      	ldr	r3, [r7, #4]
 810640c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810640e:	4974      	ldr	r1, [pc, #464]	; (81065e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106410:	4313      	orrs	r3, r2
 8106412:	654b      	str	r3, [r1, #84]	; 0x54
 8106414:	e001      	b.n	810641a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106416:	7dfb      	ldrb	r3, [r7, #23]
 8106418:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	681b      	ldr	r3, [r3, #0]
 810641e:	f003 0304 	and.w	r3, r3, #4
 8106422:	2b00      	cmp	r3, #0
 8106424:	d03a      	beq.n	810649c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810642c:	2b05      	cmp	r3, #5
 810642e:	d821      	bhi.n	8106474 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8106430:	a201      	add	r2, pc, #4	; (adr r2, 8106438 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8106432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106436:	bf00      	nop
 8106438:	0810647b 	.word	0x0810647b
 810643c:	08106451 	.word	0x08106451
 8106440:	08106463 	.word	0x08106463
 8106444:	0810647b 	.word	0x0810647b
 8106448:	0810647b 	.word	0x0810647b
 810644c:	0810647b 	.word	0x0810647b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	3304      	adds	r3, #4
 8106454:	2101      	movs	r1, #1
 8106456:	4618      	mov	r0, r3
 8106458:	f001 fb98 	bl	8107b8c <RCCEx_PLL2_Config>
 810645c:	4603      	mov	r3, r0
 810645e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8106460:	e00c      	b.n	810647c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106462:	687b      	ldr	r3, [r7, #4]
 8106464:	3324      	adds	r3, #36	; 0x24
 8106466:	2101      	movs	r1, #1
 8106468:	4618      	mov	r0, r3
 810646a:	f001 fc41 	bl	8107cf0 <RCCEx_PLL3_Config>
 810646e:	4603      	mov	r3, r0
 8106470:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8106472:	e003      	b.n	810647c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106474:	2301      	movs	r3, #1
 8106476:	75fb      	strb	r3, [r7, #23]
      break;
 8106478:	e000      	b.n	810647c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 810647a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810647c:	7dfb      	ldrb	r3, [r7, #23]
 810647e:	2b00      	cmp	r3, #0
 8106480:	d10a      	bne.n	8106498 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106482:	4b57      	ldr	r3, [pc, #348]	; (81065e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106486:	f023 0207 	bic.w	r2, r3, #7
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106490:	4953      	ldr	r1, [pc, #332]	; (81065e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106492:	4313      	orrs	r3, r2
 8106494:	658b      	str	r3, [r1, #88]	; 0x58
 8106496:	e001      	b.n	810649c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106498:	7dfb      	ldrb	r3, [r7, #23]
 810649a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	681b      	ldr	r3, [r3, #0]
 81064a0:	f003 0320 	and.w	r3, r3, #32
 81064a4:	2b00      	cmp	r3, #0
 81064a6:	d04b      	beq.n	8106540 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81064a8:	687b      	ldr	r3, [r7, #4]
 81064aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81064ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81064b2:	d02e      	beq.n	8106512 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81064b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81064b8:	d828      	bhi.n	810650c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81064ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81064be:	d02a      	beq.n	8106516 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81064c4:	d822      	bhi.n	810650c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81064c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81064ca:	d026      	beq.n	810651a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81064cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81064d0:	d81c      	bhi.n	810650c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81064d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81064d6:	d010      	beq.n	81064fa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 81064d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81064dc:	d816      	bhi.n	810650c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81064de:	2b00      	cmp	r3, #0
 81064e0:	d01d      	beq.n	810651e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81064e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81064e6:	d111      	bne.n	810650c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	3304      	adds	r3, #4
 81064ec:	2100      	movs	r1, #0
 81064ee:	4618      	mov	r0, r3
 81064f0:	f001 fb4c 	bl	8107b8c <RCCEx_PLL2_Config>
 81064f4:	4603      	mov	r3, r0
 81064f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81064f8:	e012      	b.n	8106520 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	3324      	adds	r3, #36	; 0x24
 81064fe:	2102      	movs	r1, #2
 8106500:	4618      	mov	r0, r3
 8106502:	f001 fbf5 	bl	8107cf0 <RCCEx_PLL3_Config>
 8106506:	4603      	mov	r3, r0
 8106508:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810650a:	e009      	b.n	8106520 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810650c:	2301      	movs	r3, #1
 810650e:	75fb      	strb	r3, [r7, #23]
      break;
 8106510:	e006      	b.n	8106520 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8106512:	bf00      	nop
 8106514:	e004      	b.n	8106520 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8106516:	bf00      	nop
 8106518:	e002      	b.n	8106520 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810651a:	bf00      	nop
 810651c:	e000      	b.n	8106520 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810651e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106520:	7dfb      	ldrb	r3, [r7, #23]
 8106522:	2b00      	cmp	r3, #0
 8106524:	d10a      	bne.n	810653c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106526:	4b2e      	ldr	r3, [pc, #184]	; (81065e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810652a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810652e:	687b      	ldr	r3, [r7, #4]
 8106530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106534:	492a      	ldr	r1, [pc, #168]	; (81065e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8106536:	4313      	orrs	r3, r2
 8106538:	654b      	str	r3, [r1, #84]	; 0x54
 810653a:	e001      	b.n	8106540 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810653c:	7dfb      	ldrb	r3, [r7, #23]
 810653e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	681b      	ldr	r3, [r3, #0]
 8106544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106548:	2b00      	cmp	r3, #0
 810654a:	d04d      	beq.n	81065e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 810654c:	687b      	ldr	r3, [r7, #4]
 810654e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106552:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106556:	d02e      	beq.n	81065b6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8106558:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810655c:	d828      	bhi.n	81065b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810655e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106562:	d02a      	beq.n	81065ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8106564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106568:	d822      	bhi.n	81065b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810656a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810656e:	d026      	beq.n	81065be <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8106570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106574:	d81c      	bhi.n	81065b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8106576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810657a:	d010      	beq.n	810659e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 810657c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106580:	d816      	bhi.n	81065b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8106582:	2b00      	cmp	r3, #0
 8106584:	d01d      	beq.n	81065c2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8106586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810658a:	d111      	bne.n	81065b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810658c:	687b      	ldr	r3, [r7, #4]
 810658e:	3304      	adds	r3, #4
 8106590:	2100      	movs	r1, #0
 8106592:	4618      	mov	r0, r3
 8106594:	f001 fafa 	bl	8107b8c <RCCEx_PLL2_Config>
 8106598:	4603      	mov	r3, r0
 810659a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810659c:	e012      	b.n	81065c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810659e:	687b      	ldr	r3, [r7, #4]
 81065a0:	3324      	adds	r3, #36	; 0x24
 81065a2:	2102      	movs	r1, #2
 81065a4:	4618      	mov	r0, r3
 81065a6:	f001 fba3 	bl	8107cf0 <RCCEx_PLL3_Config>
 81065aa:	4603      	mov	r3, r0
 81065ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81065ae:	e009      	b.n	81065c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81065b0:	2301      	movs	r3, #1
 81065b2:	75fb      	strb	r3, [r7, #23]
      break;
 81065b4:	e006      	b.n	81065c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81065b6:	bf00      	nop
 81065b8:	e004      	b.n	81065c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81065ba:	bf00      	nop
 81065bc:	e002      	b.n	81065c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81065be:	bf00      	nop
 81065c0:	e000      	b.n	81065c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81065c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81065c4:	7dfb      	ldrb	r3, [r7, #23]
 81065c6:	2b00      	cmp	r3, #0
 81065c8:	d10c      	bne.n	81065e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81065ca:	4b05      	ldr	r3, [pc, #20]	; (81065e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81065cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81065ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81065d2:	687b      	ldr	r3, [r7, #4]
 81065d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81065d8:	4901      	ldr	r1, [pc, #4]	; (81065e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81065da:	4313      	orrs	r3, r2
 81065dc:	658b      	str	r3, [r1, #88]	; 0x58
 81065de:	e003      	b.n	81065e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 81065e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81065e4:	7dfb      	ldrb	r3, [r7, #23]
 81065e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81065e8:	687b      	ldr	r3, [r7, #4]
 81065ea:	681b      	ldr	r3, [r3, #0]
 81065ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81065f0:	2b00      	cmp	r3, #0
 81065f2:	d04b      	beq.n	810668c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81065fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81065fe:	d02e      	beq.n	810665e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8106600:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106604:	d828      	bhi.n	8106658 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8106606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810660a:	d02a      	beq.n	8106662 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 810660c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106610:	d822      	bhi.n	8106658 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8106612:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106616:	d026      	beq.n	8106666 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8106618:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810661c:	d81c      	bhi.n	8106658 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810661e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106622:	d010      	beq.n	8106646 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8106624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106628:	d816      	bhi.n	8106658 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810662a:	2b00      	cmp	r3, #0
 810662c:	d01d      	beq.n	810666a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 810662e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106632:	d111      	bne.n	8106658 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106634:	687b      	ldr	r3, [r7, #4]
 8106636:	3304      	adds	r3, #4
 8106638:	2100      	movs	r1, #0
 810663a:	4618      	mov	r0, r3
 810663c:	f001 faa6 	bl	8107b8c <RCCEx_PLL2_Config>
 8106640:	4603      	mov	r3, r0
 8106642:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8106644:	e012      	b.n	810666c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106646:	687b      	ldr	r3, [r7, #4]
 8106648:	3324      	adds	r3, #36	; 0x24
 810664a:	2102      	movs	r1, #2
 810664c:	4618      	mov	r0, r3
 810664e:	f001 fb4f 	bl	8107cf0 <RCCEx_PLL3_Config>
 8106652:	4603      	mov	r3, r0
 8106654:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8106656:	e009      	b.n	810666c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106658:	2301      	movs	r3, #1
 810665a:	75fb      	strb	r3, [r7, #23]
      break;
 810665c:	e006      	b.n	810666c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810665e:	bf00      	nop
 8106660:	e004      	b.n	810666c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8106662:	bf00      	nop
 8106664:	e002      	b.n	810666c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8106666:	bf00      	nop
 8106668:	e000      	b.n	810666c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810666a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810666c:	7dfb      	ldrb	r3, [r7, #23]
 810666e:	2b00      	cmp	r3, #0
 8106670:	d10a      	bne.n	8106688 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8106672:	4b9d      	ldr	r3, [pc, #628]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810667a:	687b      	ldr	r3, [r7, #4]
 810667c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8106680:	4999      	ldr	r1, [pc, #612]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106682:	4313      	orrs	r3, r2
 8106684:	658b      	str	r3, [r1, #88]	; 0x58
 8106686:	e001      	b.n	810668c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106688:	7dfb      	ldrb	r3, [r7, #23]
 810668a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	681b      	ldr	r3, [r3, #0]
 8106690:	f003 0308 	and.w	r3, r3, #8
 8106694:	2b00      	cmp	r3, #0
 8106696:	d01a      	beq.n	81066ce <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810669e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81066a2:	d10a      	bne.n	81066ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81066a4:	687b      	ldr	r3, [r7, #4]
 81066a6:	3324      	adds	r3, #36	; 0x24
 81066a8:	2102      	movs	r1, #2
 81066aa:	4618      	mov	r0, r3
 81066ac:	f001 fb20 	bl	8107cf0 <RCCEx_PLL3_Config>
 81066b0:	4603      	mov	r3, r0
 81066b2:	2b00      	cmp	r3, #0
 81066b4:	d001      	beq.n	81066ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 81066b6:	2301      	movs	r3, #1
 81066b8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81066ba:	4b8b      	ldr	r3, [pc, #556]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81066bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81066c2:	687b      	ldr	r3, [r7, #4]
 81066c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81066c8:	4987      	ldr	r1, [pc, #540]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81066ca:	4313      	orrs	r3, r2
 81066cc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81066ce:	687b      	ldr	r3, [r7, #4]
 81066d0:	681b      	ldr	r3, [r3, #0]
 81066d2:	f003 0310 	and.w	r3, r3, #16
 81066d6:	2b00      	cmp	r3, #0
 81066d8:	d01a      	beq.n	8106710 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81066da:	687b      	ldr	r3, [r7, #4]
 81066dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81066e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81066e4:	d10a      	bne.n	81066fc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81066e6:	687b      	ldr	r3, [r7, #4]
 81066e8:	3324      	adds	r3, #36	; 0x24
 81066ea:	2102      	movs	r1, #2
 81066ec:	4618      	mov	r0, r3
 81066ee:	f001 faff 	bl	8107cf0 <RCCEx_PLL3_Config>
 81066f2:	4603      	mov	r3, r0
 81066f4:	2b00      	cmp	r3, #0
 81066f6:	d001      	beq.n	81066fc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81066f8:	2301      	movs	r3, #1
 81066fa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81066fc:	4b7a      	ldr	r3, [pc, #488]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81066fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106704:	687b      	ldr	r3, [r7, #4]
 8106706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810670a:	4977      	ldr	r1, [pc, #476]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810670c:	4313      	orrs	r3, r2
 810670e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	681b      	ldr	r3, [r3, #0]
 8106714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8106718:	2b00      	cmp	r3, #0
 810671a:	d034      	beq.n	8106786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 810671c:	687b      	ldr	r3, [r7, #4]
 810671e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8106722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106726:	d01d      	beq.n	8106764 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8106728:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810672c:	d817      	bhi.n	810675e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 810672e:	2b00      	cmp	r3, #0
 8106730:	d003      	beq.n	810673a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8106732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106736:	d009      	beq.n	810674c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8106738:	e011      	b.n	810675e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810673a:	687b      	ldr	r3, [r7, #4]
 810673c:	3304      	adds	r3, #4
 810673e:	2100      	movs	r1, #0
 8106740:	4618      	mov	r0, r3
 8106742:	f001 fa23 	bl	8107b8c <RCCEx_PLL2_Config>
 8106746:	4603      	mov	r3, r0
 8106748:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810674a:	e00c      	b.n	8106766 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	3324      	adds	r3, #36	; 0x24
 8106750:	2102      	movs	r1, #2
 8106752:	4618      	mov	r0, r3
 8106754:	f001 facc 	bl	8107cf0 <RCCEx_PLL3_Config>
 8106758:	4603      	mov	r3, r0
 810675a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810675c:	e003      	b.n	8106766 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810675e:	2301      	movs	r3, #1
 8106760:	75fb      	strb	r3, [r7, #23]
      break;
 8106762:	e000      	b.n	8106766 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8106764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106766:	7dfb      	ldrb	r3, [r7, #23]
 8106768:	2b00      	cmp	r3, #0
 810676a:	d10a      	bne.n	8106782 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810676c:	4b5e      	ldr	r3, [pc, #376]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810676e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106770:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8106774:	687b      	ldr	r3, [r7, #4]
 8106776:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810677a:	495b      	ldr	r1, [pc, #364]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810677c:	4313      	orrs	r3, r2
 810677e:	658b      	str	r3, [r1, #88]	; 0x58
 8106780:	e001      	b.n	8106786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106782:	7dfb      	ldrb	r3, [r7, #23]
 8106784:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8106786:	687b      	ldr	r3, [r7, #4]
 8106788:	681b      	ldr	r3, [r3, #0]
 810678a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810678e:	2b00      	cmp	r3, #0
 8106790:	d033      	beq.n	81067fa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106798:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810679c:	d01c      	beq.n	81067d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810679e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81067a2:	d816      	bhi.n	81067d2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 81067a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81067a8:	d003      	beq.n	81067b2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 81067aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81067ae:	d007      	beq.n	81067c0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 81067b0:	e00f      	b.n	81067d2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81067b2:	4b4d      	ldr	r3, [pc, #308]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81067b6:	4a4c      	ldr	r2, [pc, #304]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81067b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81067bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81067be:	e00c      	b.n	81067da <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81067c0:	687b      	ldr	r3, [r7, #4]
 81067c2:	3324      	adds	r3, #36	; 0x24
 81067c4:	2101      	movs	r1, #1
 81067c6:	4618      	mov	r0, r3
 81067c8:	f001 fa92 	bl	8107cf0 <RCCEx_PLL3_Config>
 81067cc:	4603      	mov	r3, r0
 81067ce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81067d0:	e003      	b.n	81067da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81067d2:	2301      	movs	r3, #1
 81067d4:	75fb      	strb	r3, [r7, #23]
      break;
 81067d6:	e000      	b.n	81067da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 81067d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81067da:	7dfb      	ldrb	r3, [r7, #23]
 81067dc:	2b00      	cmp	r3, #0
 81067de:	d10a      	bne.n	81067f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81067e0:	4b41      	ldr	r3, [pc, #260]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81067e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81067e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81067e8:	687b      	ldr	r3, [r7, #4]
 81067ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81067ee:	493e      	ldr	r1, [pc, #248]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81067f0:	4313      	orrs	r3, r2
 81067f2:	654b      	str	r3, [r1, #84]	; 0x54
 81067f4:	e001      	b.n	81067fa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067f6:	7dfb      	ldrb	r3, [r7, #23]
 81067f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	681b      	ldr	r3, [r3, #0]
 81067fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106802:	2b00      	cmp	r3, #0
 8106804:	d029      	beq.n	810685a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810680a:	2b00      	cmp	r3, #0
 810680c:	d003      	beq.n	8106816 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 810680e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106812:	d007      	beq.n	8106824 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8106814:	e00f      	b.n	8106836 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106816:	4b34      	ldr	r3, [pc, #208]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810681a:	4a33      	ldr	r2, [pc, #204]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810681c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106820:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8106822:	e00b      	b.n	810683c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106824:	687b      	ldr	r3, [r7, #4]
 8106826:	3304      	adds	r3, #4
 8106828:	2102      	movs	r1, #2
 810682a:	4618      	mov	r0, r3
 810682c:	f001 f9ae 	bl	8107b8c <RCCEx_PLL2_Config>
 8106830:	4603      	mov	r3, r0
 8106832:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8106834:	e002      	b.n	810683c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8106836:	2301      	movs	r3, #1
 8106838:	75fb      	strb	r3, [r7, #23]
      break;
 810683a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810683c:	7dfb      	ldrb	r3, [r7, #23]
 810683e:	2b00      	cmp	r3, #0
 8106840:	d109      	bne.n	8106856 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106842:	4b29      	ldr	r3, [pc, #164]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106846:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810684e:	4926      	ldr	r1, [pc, #152]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8106850:	4313      	orrs	r3, r2
 8106852:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106854:	e001      	b.n	810685a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106856:	7dfb      	ldrb	r3, [r7, #23]
 8106858:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810685a:	687b      	ldr	r3, [r7, #4]
 810685c:	681b      	ldr	r3, [r3, #0]
 810685e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106862:	2b00      	cmp	r3, #0
 8106864:	d00a      	beq.n	810687c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8106866:	687b      	ldr	r3, [r7, #4]
 8106868:	3324      	adds	r3, #36	; 0x24
 810686a:	2102      	movs	r1, #2
 810686c:	4618      	mov	r0, r3
 810686e:	f001 fa3f 	bl	8107cf0 <RCCEx_PLL3_Config>
 8106872:	4603      	mov	r3, r0
 8106874:	2b00      	cmp	r3, #0
 8106876:	d001      	beq.n	810687c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8106878:	2301      	movs	r3, #1
 810687a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810687c:	687b      	ldr	r3, [r7, #4]
 810687e:	681b      	ldr	r3, [r3, #0]
 8106880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106884:	2b00      	cmp	r3, #0
 8106886:	d033      	beq.n	81068f0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8106888:	687b      	ldr	r3, [r7, #4]
 810688a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810688c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106890:	d017      	beq.n	81068c2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8106892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106896:	d811      	bhi.n	81068bc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8106898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810689c:	d013      	beq.n	81068c6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810689e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81068a2:	d80b      	bhi.n	81068bc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81068a4:	2b00      	cmp	r3, #0
 81068a6:	d010      	beq.n	81068ca <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 81068a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81068ac:	d106      	bne.n	81068bc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81068ae:	4b0e      	ldr	r3, [pc, #56]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068b2:	4a0d      	ldr	r2, [pc, #52]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81068b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81068b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81068ba:	e007      	b.n	81068cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81068bc:	2301      	movs	r3, #1
 81068be:	75fb      	strb	r3, [r7, #23]
      break;
 81068c0:	e004      	b.n	81068cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81068c2:	bf00      	nop
 81068c4:	e002      	b.n	81068cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81068c6:	bf00      	nop
 81068c8:	e000      	b.n	81068cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81068ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81068cc:	7dfb      	ldrb	r3, [r7, #23]
 81068ce:	2b00      	cmp	r3, #0
 81068d0:	d10c      	bne.n	81068ec <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81068d2:	4b05      	ldr	r3, [pc, #20]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81068d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81068d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81068da:	687b      	ldr	r3, [r7, #4]
 81068dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81068de:	4902      	ldr	r1, [pc, #8]	; (81068e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81068e0:	4313      	orrs	r3, r2
 81068e2:	654b      	str	r3, [r1, #84]	; 0x54
 81068e4:	e004      	b.n	81068f0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81068e6:	bf00      	nop
 81068e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81068ec:	7dfb      	ldrb	r3, [r7, #23]
 81068ee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81068f0:	687b      	ldr	r3, [r7, #4]
 81068f2:	681b      	ldr	r3, [r3, #0]
 81068f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81068f8:	2b00      	cmp	r3, #0
 81068fa:	d008      	beq.n	810690e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81068fc:	4b31      	ldr	r3, [pc, #196]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81068fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106900:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8106904:	687b      	ldr	r3, [r7, #4]
 8106906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106908:	492e      	ldr	r1, [pc, #184]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810690a:	4313      	orrs	r3, r2
 810690c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810690e:	687b      	ldr	r3, [r7, #4]
 8106910:	681b      	ldr	r3, [r3, #0]
 8106912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8106916:	2b00      	cmp	r3, #0
 8106918:	d009      	beq.n	810692e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810691a:	4b2a      	ldr	r3, [pc, #168]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810691c:	691b      	ldr	r3, [r3, #16]
 810691e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8106922:	687b      	ldr	r3, [r7, #4]
 8106924:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106928:	4926      	ldr	r1, [pc, #152]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810692a:	4313      	orrs	r3, r2
 810692c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810692e:	687b      	ldr	r3, [r7, #4]
 8106930:	681b      	ldr	r3, [r3, #0]
 8106932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8106936:	2b00      	cmp	r3, #0
 8106938:	d008      	beq.n	810694c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810693a:	4b22      	ldr	r3, [pc, #136]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810693c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810693e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8106946:	491f      	ldr	r1, [pc, #124]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106948:	4313      	orrs	r3, r2
 810694a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	681b      	ldr	r3, [r3, #0]
 8106950:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8106954:	2b00      	cmp	r3, #0
 8106956:	d00d      	beq.n	8106974 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8106958:	4b1a      	ldr	r3, [pc, #104]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810695a:	691b      	ldr	r3, [r3, #16]
 810695c:	4a19      	ldr	r2, [pc, #100]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810695e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8106962:	6113      	str	r3, [r2, #16]
 8106964:	4b17      	ldr	r3, [pc, #92]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106966:	691a      	ldr	r2, [r3, #16]
 8106968:	687b      	ldr	r3, [r7, #4]
 810696a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810696e:	4915      	ldr	r1, [pc, #84]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8106970:	4313      	orrs	r3, r2
 8106972:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106974:	687b      	ldr	r3, [r7, #4]
 8106976:	681b      	ldr	r3, [r3, #0]
 8106978:	2b00      	cmp	r3, #0
 810697a:	da08      	bge.n	810698e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810697c:	4b11      	ldr	r3, [pc, #68]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810697e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106980:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106988:	490e      	ldr	r1, [pc, #56]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810698a:	4313      	orrs	r3, r2
 810698c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810698e:	687b      	ldr	r3, [r7, #4]
 8106990:	681b      	ldr	r3, [r3, #0]
 8106992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8106996:	2b00      	cmp	r3, #0
 8106998:	d009      	beq.n	81069ae <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810699a:	4b0a      	ldr	r3, [pc, #40]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810699c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810699e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81069a2:	687b      	ldr	r3, [r7, #4]
 81069a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81069a8:	4906      	ldr	r1, [pc, #24]	; (81069c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81069aa:	4313      	orrs	r3, r2
 81069ac:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81069ae:	7dbb      	ldrb	r3, [r7, #22]
 81069b0:	2b00      	cmp	r3, #0
 81069b2:	d101      	bne.n	81069b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81069b4:	2300      	movs	r3, #0
 81069b6:	e000      	b.n	81069ba <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81069b8:	2301      	movs	r3, #1
}
 81069ba:	4618      	mov	r0, r3
 81069bc:	3718      	adds	r7, #24
 81069be:	46bd      	mov	sp, r7
 81069c0:	bd80      	pop	{r7, pc}
 81069c2:	bf00      	nop
 81069c4:	58024400 	.word	0x58024400

081069c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 81069c8:	b580      	push	{r7, lr}
 81069ca:	b090      	sub	sp, #64	; 0x40
 81069cc:	af00      	add	r7, sp, #0
 81069ce:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 81069d0:	687b      	ldr	r3, [r7, #4]
 81069d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81069d6:	f040 8095 	bne.w	8106b04 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 81069da:	4b97      	ldr	r3, [pc, #604]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81069dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81069de:	f003 0307 	and.w	r3, r3, #7
 81069e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 81069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069e6:	2b04      	cmp	r3, #4
 81069e8:	f200 8088 	bhi.w	8106afc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 81069ec:	a201      	add	r2, pc, #4	; (adr r2, 81069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 81069ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81069f2:	bf00      	nop
 81069f4:	08106a09 	.word	0x08106a09
 81069f8:	08106a31 	.word	0x08106a31
 81069fc:	08106a59 	.word	0x08106a59
 8106a00:	08106af5 	.word	0x08106af5
 8106a04:	08106a81 	.word	0x08106a81
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106a08:	4b8b      	ldr	r3, [pc, #556]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a0a:	681b      	ldr	r3, [r3, #0]
 8106a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106a14:	d108      	bne.n	8106a28 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106a1a:	4618      	mov	r0, r3
 8106a1c:	f000 ff64 	bl	81078e8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8106a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106a24:	f000 bc94 	b.w	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106a28:	2300      	movs	r3, #0
 8106a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a2c:	f000 bc90 	b.w	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106a30:	4b81      	ldr	r3, [pc, #516]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a32:	681b      	ldr	r3, [r3, #0]
 8106a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106a38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106a3c:	d108      	bne.n	8106a50 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106a3e:	f107 0318 	add.w	r3, r7, #24
 8106a42:	4618      	mov	r0, r3
 8106a44:	f000 fca8 	bl	8107398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106a48:	69bb      	ldr	r3, [r7, #24]
 8106a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106a4c:	f000 bc80 	b.w	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106a50:	2300      	movs	r3, #0
 8106a52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a54:	f000 bc7c 	b.w	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106a58:	4b77      	ldr	r3, [pc, #476]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a5a:	681b      	ldr	r3, [r3, #0]
 8106a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106a64:	d108      	bne.n	8106a78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106a66:	f107 030c 	add.w	r3, r7, #12
 8106a6a:	4618      	mov	r0, r3
 8106a6c:	f000 fde8 	bl	8107640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106a70:	68fb      	ldr	r3, [r7, #12]
 8106a72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106a74:	f000 bc6c 	b.w	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106a78:	2300      	movs	r3, #0
 8106a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a7c:	f000 bc68 	b.w	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106a80:	4b6d      	ldr	r3, [pc, #436]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106a84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106a88:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106a8a:	4b6b      	ldr	r3, [pc, #428]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a8c:	681b      	ldr	r3, [r3, #0]
 8106a8e:	f003 0304 	and.w	r3, r3, #4
 8106a92:	2b04      	cmp	r3, #4
 8106a94:	d10c      	bne.n	8106ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8106a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a98:	2b00      	cmp	r3, #0
 8106a9a:	d109      	bne.n	8106ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106a9c:	4b66      	ldr	r3, [pc, #408]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106a9e:	681b      	ldr	r3, [r3, #0]
 8106aa0:	08db      	lsrs	r3, r3, #3
 8106aa2:	f003 0303 	and.w	r3, r3, #3
 8106aa6:	4a65      	ldr	r2, [pc, #404]	; (8106c3c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8106aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8106aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106aae:	e01f      	b.n	8106af0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106ab0:	4b61      	ldr	r3, [pc, #388]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106ab2:	681b      	ldr	r3, [r3, #0]
 8106ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106abc:	d106      	bne.n	8106acc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8106abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106ac4:	d102      	bne.n	8106acc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106ac6:	4b5e      	ldr	r3, [pc, #376]	; (8106c40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8106ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106aca:	e011      	b.n	8106af0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106acc:	4b5a      	ldr	r3, [pc, #360]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106ace:	681b      	ldr	r3, [r3, #0]
 8106ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106ad8:	d106      	bne.n	8106ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8106ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106ae0:	d102      	bne.n	8106ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106ae2:	4b58      	ldr	r3, [pc, #352]	; (8106c44 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8106ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106ae6:	e003      	b.n	8106af0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106ae8:	2300      	movs	r3, #0
 8106aea:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106aec:	f000 bc30 	b.w	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106af0:	f000 bc2e 	b.w	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106af4:	4b54      	ldr	r3, [pc, #336]	; (8106c48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8106af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106af8:	f000 bc2a 	b.w	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8106afc:	2300      	movs	r3, #0
 8106afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b00:	f000 bc26 	b.w	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8106b04:	687b      	ldr	r3, [r7, #4]
 8106b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106b0a:	f040 809f 	bne.w	8106c4c <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8106b0e:	4b4a      	ldr	r3, [pc, #296]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106b12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8106b16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106b1e:	d04d      	beq.n	8106bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8106b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106b26:	f200 8084 	bhi.w	8106c32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8106b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b2c:	2bc0      	cmp	r3, #192	; 0xc0
 8106b2e:	d07d      	beq.n	8106c2c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8106b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b32:	2bc0      	cmp	r3, #192	; 0xc0
 8106b34:	d87d      	bhi.n	8106c32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8106b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b38:	2b80      	cmp	r3, #128	; 0x80
 8106b3a:	d02d      	beq.n	8106b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8106b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b3e:	2b80      	cmp	r3, #128	; 0x80
 8106b40:	d877      	bhi.n	8106c32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8106b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b44:	2b00      	cmp	r3, #0
 8106b46:	d003      	beq.n	8106b50 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8106b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b4a:	2b40      	cmp	r3, #64	; 0x40
 8106b4c:	d012      	beq.n	8106b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8106b4e:	e070      	b.n	8106c32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106b50:	4b39      	ldr	r3, [pc, #228]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106b52:	681b      	ldr	r3, [r3, #0]
 8106b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106b5c:	d107      	bne.n	8106b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106b62:	4618      	mov	r0, r3
 8106b64:	f000 fec0 	bl	81078e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106b6c:	e3f0      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106b6e:	2300      	movs	r3, #0
 8106b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b72:	e3ed      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106b74:	4b30      	ldr	r3, [pc, #192]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106b76:	681b      	ldr	r3, [r3, #0]
 8106b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106b80:	d107      	bne.n	8106b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106b82:	f107 0318 	add.w	r3, r7, #24
 8106b86:	4618      	mov	r0, r3
 8106b88:	f000 fc06 	bl	8107398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106b8c:	69bb      	ldr	r3, [r7, #24]
 8106b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106b90:	e3de      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106b92:	2300      	movs	r3, #0
 8106b94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b96:	e3db      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106b98:	4b27      	ldr	r3, [pc, #156]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106b9a:	681b      	ldr	r3, [r3, #0]
 8106b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106ba4:	d107      	bne.n	8106bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106ba6:	f107 030c 	add.w	r3, r7, #12
 8106baa:	4618      	mov	r0, r3
 8106bac:	f000 fd48 	bl	8107640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106bb0:	68fb      	ldr	r3, [r7, #12]
 8106bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106bb4:	e3cc      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106bb6:	2300      	movs	r3, #0
 8106bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106bba:	e3c9      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106bbc:	4b1e      	ldr	r3, [pc, #120]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106bc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106bc4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106bc6:	4b1c      	ldr	r3, [pc, #112]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106bc8:	681b      	ldr	r3, [r3, #0]
 8106bca:	f003 0304 	and.w	r3, r3, #4
 8106bce:	2b04      	cmp	r3, #4
 8106bd0:	d10c      	bne.n	8106bec <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8106bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106bd4:	2b00      	cmp	r3, #0
 8106bd6:	d109      	bne.n	8106bec <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106bd8:	4b17      	ldr	r3, [pc, #92]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106bda:	681b      	ldr	r3, [r3, #0]
 8106bdc:	08db      	lsrs	r3, r3, #3
 8106bde:	f003 0303 	and.w	r3, r3, #3
 8106be2:	4a16      	ldr	r2, [pc, #88]	; (8106c3c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8106be4:	fa22 f303 	lsr.w	r3, r2, r3
 8106be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106bea:	e01e      	b.n	8106c2a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106bec:	4b12      	ldr	r3, [pc, #72]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106bee:	681b      	ldr	r3, [r3, #0]
 8106bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106bf8:	d106      	bne.n	8106c08 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8106bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106c00:	d102      	bne.n	8106c08 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106c02:	4b0f      	ldr	r3, [pc, #60]	; (8106c40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8106c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106c06:	e010      	b.n	8106c2a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106c08:	4b0b      	ldr	r3, [pc, #44]	; (8106c38 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106c0a:	681b      	ldr	r3, [r3, #0]
 8106c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106c14:	d106      	bne.n	8106c24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8106c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106c1c:	d102      	bne.n	8106c24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106c1e:	4b09      	ldr	r3, [pc, #36]	; (8106c44 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8106c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106c22:	e002      	b.n	8106c2a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106c24:	2300      	movs	r3, #0
 8106c26:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106c28:	e392      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106c2a:	e391      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106c2c:	4b06      	ldr	r3, [pc, #24]	; (8106c48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8106c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c30:	e38e      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8106c32:	2300      	movs	r3, #0
 8106c34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c36:	e38b      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106c38:	58024400 	.word	0x58024400
 8106c3c:	03d09000 	.word	0x03d09000
 8106c40:	003d0900 	.word	0x003d0900
 8106c44:	007a1200 	.word	0x007a1200
 8106c48:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8106c4c:	687b      	ldr	r3, [r7, #4]
 8106c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8106c52:	f040 809c 	bne.w	8106d8e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8106c56:	4b9d      	ldr	r3, [pc, #628]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106c5a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8106c5e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106c66:	d054      	beq.n	8106d12 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8106c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106c6e:	f200 808b 	bhi.w	8106d88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8106c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106c78:	f000 8083 	beq.w	8106d82 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8106c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106c82:	f200 8081 	bhi.w	8106d88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8106c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106c8c:	d02f      	beq.n	8106cee <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8106c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106c94:	d878      	bhi.n	8106d88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8106c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c98:	2b00      	cmp	r3, #0
 8106c9a:	d004      	beq.n	8106ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8106c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106ca2:	d012      	beq.n	8106cca <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8106ca4:	e070      	b.n	8106d88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106ca6:	4b89      	ldr	r3, [pc, #548]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106ca8:	681b      	ldr	r3, [r3, #0]
 8106caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106cae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106cb2:	d107      	bne.n	8106cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106cb8:	4618      	mov	r0, r3
 8106cba:	f000 fe15 	bl	81078e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106cc2:	e345      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106cc4:	2300      	movs	r3, #0
 8106cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106cc8:	e342      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106cca:	4b80      	ldr	r3, [pc, #512]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106ccc:	681b      	ldr	r3, [r3, #0]
 8106cce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106cd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106cd6:	d107      	bne.n	8106ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106cd8:	f107 0318 	add.w	r3, r7, #24
 8106cdc:	4618      	mov	r0, r3
 8106cde:	f000 fb5b 	bl	8107398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106ce2:	69bb      	ldr	r3, [r7, #24]
 8106ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106ce6:	e333      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106ce8:	2300      	movs	r3, #0
 8106cea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106cec:	e330      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106cee:	4b77      	ldr	r3, [pc, #476]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106cf0:	681b      	ldr	r3, [r3, #0]
 8106cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106cfa:	d107      	bne.n	8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106cfc:	f107 030c 	add.w	r3, r7, #12
 8106d00:	4618      	mov	r0, r3
 8106d02:	f000 fc9d 	bl	8107640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106d06:	68fb      	ldr	r3, [r7, #12]
 8106d08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106d0a:	e321      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106d0c:	2300      	movs	r3, #0
 8106d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d10:	e31e      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106d12:	4b6e      	ldr	r3, [pc, #440]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106d16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106d1a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106d1c:	4b6b      	ldr	r3, [pc, #428]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d1e:	681b      	ldr	r3, [r3, #0]
 8106d20:	f003 0304 	and.w	r3, r3, #4
 8106d24:	2b04      	cmp	r3, #4
 8106d26:	d10c      	bne.n	8106d42 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8106d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d2a:	2b00      	cmp	r3, #0
 8106d2c:	d109      	bne.n	8106d42 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106d2e:	4b67      	ldr	r3, [pc, #412]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d30:	681b      	ldr	r3, [r3, #0]
 8106d32:	08db      	lsrs	r3, r3, #3
 8106d34:	f003 0303 	and.w	r3, r3, #3
 8106d38:	4a65      	ldr	r2, [pc, #404]	; (8106ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8106d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8106d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106d40:	e01e      	b.n	8106d80 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106d42:	4b62      	ldr	r3, [pc, #392]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d44:	681b      	ldr	r3, [r3, #0]
 8106d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106d4e:	d106      	bne.n	8106d5e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8106d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106d56:	d102      	bne.n	8106d5e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106d58:	4b5e      	ldr	r3, [pc, #376]	; (8106ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8106d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106d5c:	e010      	b.n	8106d80 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106d5e:	4b5b      	ldr	r3, [pc, #364]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d60:	681b      	ldr	r3, [r3, #0]
 8106d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106d66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106d6a:	d106      	bne.n	8106d7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8106d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106d72:	d102      	bne.n	8106d7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106d74:	4b58      	ldr	r3, [pc, #352]	; (8106ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8106d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106d78:	e002      	b.n	8106d80 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106d7a:	2300      	movs	r3, #0
 8106d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106d7e:	e2e7      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106d80:	e2e6      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106d82:	4b56      	ldr	r3, [pc, #344]	; (8106edc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8106d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d86:	e2e3      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8106d88:	2300      	movs	r3, #0
 8106d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d8c:	e2e0      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8106d8e:	687b      	ldr	r3, [r7, #4]
 8106d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106d94:	f040 80a7 	bne.w	8106ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8106d98:	4b4c      	ldr	r3, [pc, #304]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106d9c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8106da0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106da4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106da8:	d055      	beq.n	8106e56 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8106daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106dac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106db0:	f200 8096 	bhi.w	8106ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8106db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106db6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106dba:	f000 8084 	beq.w	8106ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8106dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106dc0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106dc4:	f200 808c 	bhi.w	8106ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8106dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106dce:	d030      	beq.n	8106e32 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8106dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106dd6:	f200 8083 	bhi.w	8106ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8106dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ddc:	2b00      	cmp	r3, #0
 8106dde:	d004      	beq.n	8106dea <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8106de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106de2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8106de6:	d012      	beq.n	8106e0e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8106de8:	e07a      	b.n	8106ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106dea:	4b38      	ldr	r3, [pc, #224]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106dec:	681b      	ldr	r3, [r3, #0]
 8106dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106df2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106df6:	d107      	bne.n	8106e08 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106dfc:	4618      	mov	r0, r3
 8106dfe:	f000 fd73 	bl	81078e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106e06:	e2a3      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106e08:	2300      	movs	r3, #0
 8106e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e0c:	e2a0      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106e0e:	4b2f      	ldr	r3, [pc, #188]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106e10:	681b      	ldr	r3, [r3, #0]
 8106e12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106e1a:	d107      	bne.n	8106e2c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106e1c:	f107 0318 	add.w	r3, r7, #24
 8106e20:	4618      	mov	r0, r3
 8106e22:	f000 fab9 	bl	8107398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106e26:	69bb      	ldr	r3, [r7, #24]
 8106e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8106e2a:	e291      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106e2c:	2300      	movs	r3, #0
 8106e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e30:	e28e      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106e32:	4b26      	ldr	r3, [pc, #152]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106e34:	681b      	ldr	r3, [r3, #0]
 8106e36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106e3e:	d107      	bne.n	8106e50 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106e40:	f107 030c 	add.w	r3, r7, #12
 8106e44:	4618      	mov	r0, r3
 8106e46:	f000 fbfb 	bl	8107640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106e4a:	68fb      	ldr	r3, [r7, #12]
 8106e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106e4e:	e27f      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106e50:	2300      	movs	r3, #0
 8106e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e54:	e27c      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106e56:	4b1d      	ldr	r3, [pc, #116]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106e5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106e5e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106e60:	4b1a      	ldr	r3, [pc, #104]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106e62:	681b      	ldr	r3, [r3, #0]
 8106e64:	f003 0304 	and.w	r3, r3, #4
 8106e68:	2b04      	cmp	r3, #4
 8106e6a:	d10c      	bne.n	8106e86 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8106e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e6e:	2b00      	cmp	r3, #0
 8106e70:	d109      	bne.n	8106e86 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106e72:	4b16      	ldr	r3, [pc, #88]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106e74:	681b      	ldr	r3, [r3, #0]
 8106e76:	08db      	lsrs	r3, r3, #3
 8106e78:	f003 0303 	and.w	r3, r3, #3
 8106e7c:	4a14      	ldr	r2, [pc, #80]	; (8106ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8106e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8106e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106e84:	e01e      	b.n	8106ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106e86:	4b11      	ldr	r3, [pc, #68]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106e88:	681b      	ldr	r3, [r3, #0]
 8106e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106e92:	d106      	bne.n	8106ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8106e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106e9a:	d102      	bne.n	8106ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106e9c:	4b0d      	ldr	r3, [pc, #52]	; (8106ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8106e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106ea0:	e010      	b.n	8106ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106ea2:	4b0a      	ldr	r3, [pc, #40]	; (8106ecc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106ea4:	681b      	ldr	r3, [r3, #0]
 8106ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106eae:	d106      	bne.n	8106ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8106eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106eb6:	d102      	bne.n	8106ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106eb8:	4b07      	ldr	r3, [pc, #28]	; (8106ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8106eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106ebc:	e002      	b.n	8106ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106ebe:	2300      	movs	r3, #0
 8106ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106ec2:	e245      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106ec4:	e244      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106ec6:	4b05      	ldr	r3, [pc, #20]	; (8106edc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8106ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106eca:	e241      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106ecc:	58024400 	.word	0x58024400
 8106ed0:	03d09000 	.word	0x03d09000
 8106ed4:	003d0900 	.word	0x003d0900
 8106ed8:	007a1200 	.word	0x007a1200
 8106edc:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8106ee0:	2300      	movs	r3, #0
 8106ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106ee4:	e234      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8106ee6:	687b      	ldr	r3, [r7, #4]
 8106ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106eec:	f040 809c 	bne.w	8107028 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8106ef0:	4b9b      	ldr	r3, [pc, #620]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ef4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8106ef8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106f00:	d054      	beq.n	8106fac <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8106f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106f08:	f200 808b 	bhi.w	8107022 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106f12:	f000 8083 	beq.w	810701c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8106f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106f1c:	f200 8081 	bhi.w	8107022 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106f26:	d02f      	beq.n	8106f88 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8106f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106f2e:	d878      	bhi.n	8107022 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f32:	2b00      	cmp	r3, #0
 8106f34:	d004      	beq.n	8106f40 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8106f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106f3c:	d012      	beq.n	8106f64 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8106f3e:	e070      	b.n	8107022 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106f40:	4b87      	ldr	r3, [pc, #540]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106f42:	681b      	ldr	r3, [r3, #0]
 8106f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106f48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106f4c:	d107      	bne.n	8106f5e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106f52:	4618      	mov	r0, r3
 8106f54:	f000 fcc8 	bl	81078e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106f5c:	e1f8      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106f5e:	2300      	movs	r3, #0
 8106f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106f62:	e1f5      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106f64:	4b7e      	ldr	r3, [pc, #504]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106f66:	681b      	ldr	r3, [r3, #0]
 8106f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106f70:	d107      	bne.n	8106f82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106f72:	f107 0318 	add.w	r3, r7, #24
 8106f76:	4618      	mov	r0, r3
 8106f78:	f000 fa0e 	bl	8107398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106f7c:	69bb      	ldr	r3, [r7, #24]
 8106f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106f80:	e1e6      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106f82:	2300      	movs	r3, #0
 8106f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106f86:	e1e3      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106f88:	4b75      	ldr	r3, [pc, #468]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106f8a:	681b      	ldr	r3, [r3, #0]
 8106f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f94:	d107      	bne.n	8106fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106f96:	f107 030c 	add.w	r3, r7, #12
 8106f9a:	4618      	mov	r0, r3
 8106f9c:	f000 fb50 	bl	8107640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106fa0:	68fb      	ldr	r3, [r7, #12]
 8106fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106fa4:	e1d4      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106fa6:	2300      	movs	r3, #0
 8106fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106faa:	e1d1      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106fac:	4b6c      	ldr	r3, [pc, #432]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106fb4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106fb6:	4b6a      	ldr	r3, [pc, #424]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106fb8:	681b      	ldr	r3, [r3, #0]
 8106fba:	f003 0304 	and.w	r3, r3, #4
 8106fbe:	2b04      	cmp	r3, #4
 8106fc0:	d10c      	bne.n	8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8106fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106fc4:	2b00      	cmp	r3, #0
 8106fc6:	d109      	bne.n	8106fdc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106fc8:	4b65      	ldr	r3, [pc, #404]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106fca:	681b      	ldr	r3, [r3, #0]
 8106fcc:	08db      	lsrs	r3, r3, #3
 8106fce:	f003 0303 	and.w	r3, r3, #3
 8106fd2:	4a64      	ldr	r2, [pc, #400]	; (8107164 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8106fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8106fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106fda:	e01e      	b.n	810701a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106fdc:	4b60      	ldr	r3, [pc, #384]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106fde:	681b      	ldr	r3, [r3, #0]
 8106fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106fe8:	d106      	bne.n	8106ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8106fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106fec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106ff0:	d102      	bne.n	8106ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106ff2:	4b5d      	ldr	r3, [pc, #372]	; (8107168 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8106ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106ff6:	e010      	b.n	810701a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106ff8:	4b59      	ldr	r3, [pc, #356]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106ffa:	681b      	ldr	r3, [r3, #0]
 8106ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107004:	d106      	bne.n	8107014 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8107006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810700c:	d102      	bne.n	8107014 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810700e:	4b57      	ldr	r3, [pc, #348]	; (810716c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8107010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107012:	e002      	b.n	810701a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8107014:	2300      	movs	r3, #0
 8107016:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8107018:	e19a      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 810701a:	e199      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810701c:	4b54      	ldr	r3, [pc, #336]	; (8107170 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810701e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107020:	e196      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8107022:	2300      	movs	r3, #0
 8107024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107026:	e193      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810702e:	d173      	bne.n	8107118 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8107030:	4b4b      	ldr	r3, [pc, #300]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8107032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8107038:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810703c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107040:	d02f      	beq.n	81070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8107042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107048:	d863      	bhi.n	8107112 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 810704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810704c:	2b00      	cmp	r3, #0
 810704e:	d004      	beq.n	810705a <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8107050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107056:	d012      	beq.n	810707e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8107058:	e05b      	b.n	8107112 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810705a:	4b41      	ldr	r3, [pc, #260]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810705c:	681b      	ldr	r3, [r3, #0]
 810705e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107066:	d107      	bne.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107068:	f107 0318 	add.w	r3, r7, #24
 810706c:	4618      	mov	r0, r3
 810706e:	f000 f993 	bl	8107398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107072:	69bb      	ldr	r3, [r7, #24]
 8107074:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107076:	e16b      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8107078:	2300      	movs	r3, #0
 810707a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810707c:	e168      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810707e:	4b38      	ldr	r3, [pc, #224]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8107080:	681b      	ldr	r3, [r3, #0]
 8107082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810708a:	d107      	bne.n	810709c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810708c:	f107 030c 	add.w	r3, r7, #12
 8107090:	4618      	mov	r0, r3
 8107092:	f000 fad5 	bl	8107640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8107096:	697b      	ldr	r3, [r7, #20]
 8107098:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810709a:	e159      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810709c:	2300      	movs	r3, #0
 810709e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81070a0:	e156      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81070a2:	4b2f      	ldr	r3, [pc, #188]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81070a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81070a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81070aa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81070ac:	4b2c      	ldr	r3, [pc, #176]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81070ae:	681b      	ldr	r3, [r3, #0]
 81070b0:	f003 0304 	and.w	r3, r3, #4
 81070b4:	2b04      	cmp	r3, #4
 81070b6:	d10c      	bne.n	81070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 81070b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81070ba:	2b00      	cmp	r3, #0
 81070bc:	d109      	bne.n	81070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81070be:	4b28      	ldr	r3, [pc, #160]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81070c0:	681b      	ldr	r3, [r3, #0]
 81070c2:	08db      	lsrs	r3, r3, #3
 81070c4:	f003 0303 	and.w	r3, r3, #3
 81070c8:	4a26      	ldr	r2, [pc, #152]	; (8107164 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 81070ca:	fa22 f303 	lsr.w	r3, r2, r3
 81070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 81070d0:	e01e      	b.n	8107110 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81070d2:	4b23      	ldr	r3, [pc, #140]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81070d4:	681b      	ldr	r3, [r3, #0]
 81070d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81070da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81070de:	d106      	bne.n	81070ee <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 81070e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81070e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81070e6:	d102      	bne.n	81070ee <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81070e8:	4b1f      	ldr	r3, [pc, #124]	; (8107168 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 81070ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 81070ec:	e010      	b.n	8107110 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81070ee:	4b1c      	ldr	r3, [pc, #112]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81070f0:	681b      	ldr	r3, [r3, #0]
 81070f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81070f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81070fa:	d106      	bne.n	810710a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 81070fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81070fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107102:	d102      	bne.n	810710a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8107104:	4b19      	ldr	r3, [pc, #100]	; (810716c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8107106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107108:	e002      	b.n	8107110 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810710a:	2300      	movs	r3, #0
 810710c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810710e:	e11f      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8107110:	e11e      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8107112:	2300      	movs	r3, #0
 8107114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107116:	e11b      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8107118:	687b      	ldr	r3, [r7, #4]
 810711a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810711e:	d13e      	bne.n	810719e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8107120:	4b0f      	ldr	r3, [pc, #60]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8107122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107128:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810712c:	2b00      	cmp	r3, #0
 810712e:	d004      	beq.n	810713a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8107130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107136:	d01d      	beq.n	8107174 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8107138:	e02e      	b.n	8107198 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810713a:	4b09      	ldr	r3, [pc, #36]	; (8107160 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 810713c:	681b      	ldr	r3, [r3, #0]
 810713e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107146:	d107      	bne.n	8107158 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810714c:	4618      	mov	r0, r3
 810714e:	f000 fbcb 	bl	81078e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107154:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107156:	e0fb      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107158:	2300      	movs	r3, #0
 810715a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810715c:	e0f8      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 810715e:	bf00      	nop
 8107160:	58024400 	.word	0x58024400
 8107164:	03d09000 	.word	0x03d09000
 8107168:	003d0900 	.word	0x003d0900
 810716c:	007a1200 	.word	0x007a1200
 8107170:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107174:	4b79      	ldr	r3, [pc, #484]	; (810735c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107176:	681b      	ldr	r3, [r3, #0]
 8107178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810717c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107180:	d107      	bne.n	8107192 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107182:	f107 0318 	add.w	r3, r7, #24
 8107186:	4618      	mov	r0, r3
 8107188:	f000 f906 	bl	8107398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810718c:	6a3b      	ldr	r3, [r7, #32]
 810718e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107190:	e0de      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107192:	2300      	movs	r3, #0
 8107194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107196:	e0db      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8107198:	2300      	movs	r3, #0
 810719a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810719c:	e0d8      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810719e:	687b      	ldr	r3, [r7, #4]
 81071a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81071a4:	f040 8085 	bne.w	81072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 81071a8:	4b6c      	ldr	r3, [pc, #432]	; (810735c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81071aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81071ac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 81071b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81071b8:	d06b      	beq.n	8107292 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 81071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81071c0:	d874      	bhi.n	81072ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 81071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81071c8:	d056      	beq.n	8107278 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 81071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81071d0:	d86c      	bhi.n	81072ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 81071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81071d8:	d03b      	beq.n	8107252 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 81071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81071e0:	d864      	bhi.n	81072ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 81071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81071e8:	d021      	beq.n	810722e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 81071ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81071f0:	d85c      	bhi.n	81072ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 81071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071f4:	2b00      	cmp	r3, #0
 81071f6:	d004      	beq.n	8107202 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81071fe:	d004      	beq.n	810720a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8107200:	e054      	b.n	81072ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8107202:	f000 f8b3 	bl	810736c <HAL_RCCEx_GetD3PCLK1Freq>
 8107206:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8107208:	e0a2      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810720a:	4b54      	ldr	r3, [pc, #336]	; (810735c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810720c:	681b      	ldr	r3, [r3, #0]
 810720e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107216:	d107      	bne.n	8107228 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107218:	f107 0318 	add.w	r3, r7, #24
 810721c:	4618      	mov	r0, r3
 810721e:	f000 f8bb 	bl	8107398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107222:	69fb      	ldr	r3, [r7, #28]
 8107224:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107226:	e093      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107228:	2300      	movs	r3, #0
 810722a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810722c:	e090      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810722e:	4b4b      	ldr	r3, [pc, #300]	; (810735c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107230:	681b      	ldr	r3, [r3, #0]
 8107232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810723a:	d107      	bne.n	810724c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810723c:	f107 030c 	add.w	r3, r7, #12
 8107240:	4618      	mov	r0, r3
 8107242:	f000 f9fd 	bl	8107640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107246:	693b      	ldr	r3, [r7, #16]
 8107248:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810724a:	e081      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810724c:	2300      	movs	r3, #0
 810724e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107250:	e07e      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107252:	4b42      	ldr	r3, [pc, #264]	; (810735c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107254:	681b      	ldr	r3, [r3, #0]
 8107256:	f003 0304 	and.w	r3, r3, #4
 810725a:	2b04      	cmp	r3, #4
 810725c:	d109      	bne.n	8107272 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810725e:	4b3f      	ldr	r3, [pc, #252]	; (810735c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107260:	681b      	ldr	r3, [r3, #0]
 8107262:	08db      	lsrs	r3, r3, #3
 8107264:	f003 0303 	and.w	r3, r3, #3
 8107268:	4a3d      	ldr	r2, [pc, #244]	; (8107360 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 810726a:	fa22 f303 	lsr.w	r3, r2, r3
 810726e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107270:	e06e      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107272:	2300      	movs	r3, #0
 8107274:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107276:	e06b      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8107278:	4b38      	ldr	r3, [pc, #224]	; (810735c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810727a:	681b      	ldr	r3, [r3, #0]
 810727c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107284:	d102      	bne.n	810728c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8107286:	4b37      	ldr	r3, [pc, #220]	; (8107364 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8107288:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810728a:	e061      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810728c:	2300      	movs	r3, #0
 810728e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107290:	e05e      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107292:	4b32      	ldr	r3, [pc, #200]	; (810735c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107294:	681b      	ldr	r3, [r3, #0]
 8107296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810729a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810729e:	d102      	bne.n	81072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 81072a0:	4b31      	ldr	r3, [pc, #196]	; (8107368 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 81072a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81072a4:	e054      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81072a6:	2300      	movs	r3, #0
 81072a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81072aa:	e051      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 81072ac:	2300      	movs	r3, #0
 81072ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81072b0:	e04e      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81072b2:	687b      	ldr	r3, [r7, #4]
 81072b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81072b8:	d148      	bne.n	810734c <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 81072ba:	4b28      	ldr	r3, [pc, #160]	; (810735c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81072bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81072be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81072c2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81072c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81072ca:	d02a      	beq.n	8107322 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 81072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81072ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81072d2:	d838      	bhi.n	8107346 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 81072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81072d6:	2b00      	cmp	r3, #0
 81072d8:	d004      	beq.n	81072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 81072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81072dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81072e0:	d00d      	beq.n	81072fe <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 81072e2:	e030      	b.n	8107346 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81072e4:	4b1d      	ldr	r3, [pc, #116]	; (810735c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81072e6:	681b      	ldr	r3, [r3, #0]
 81072e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81072ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81072f0:	d102      	bne.n	81072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 81072f2:	4b1d      	ldr	r3, [pc, #116]	; (8107368 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 81072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81072f6:	e02b      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81072f8:	2300      	movs	r3, #0
 81072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81072fc:	e028      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81072fe:	4b17      	ldr	r3, [pc, #92]	; (810735c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107300:	681b      	ldr	r3, [r3, #0]
 8107302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810730a:	d107      	bne.n	810731c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810730c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107310:	4618      	mov	r0, r3
 8107312:	f000 fae9 	bl	81078e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107318:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810731a:	e019      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810731c:	2300      	movs	r3, #0
 810731e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107320:	e016      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107322:	4b0e      	ldr	r3, [pc, #56]	; (810735c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107324:	681b      	ldr	r3, [r3, #0]
 8107326:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810732a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810732e:	d107      	bne.n	8107340 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107330:	f107 0318 	add.w	r3, r7, #24
 8107334:	4618      	mov	r0, r3
 8107336:	f000 f82f 	bl	8107398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810733a:	69fb      	ldr	r3, [r7, #28]
 810733c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810733e:	e007      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8107340:	2300      	movs	r3, #0
 8107342:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107344:	e004      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8107346:	2300      	movs	r3, #0
 8107348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810734a:	e001      	b.n	8107350 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 810734c:	2300      	movs	r3, #0
 810734e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8107350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8107352:	4618      	mov	r0, r3
 8107354:	3740      	adds	r7, #64	; 0x40
 8107356:	46bd      	mov	sp, r7
 8107358:	bd80      	pop	{r7, pc}
 810735a:	bf00      	nop
 810735c:	58024400 	.word	0x58024400
 8107360:	03d09000 	.word	0x03d09000
 8107364:	003d0900 	.word	0x003d0900
 8107368:	007a1200 	.word	0x007a1200

0810736c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810736c:	b580      	push	{r7, lr}
 810736e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8107370:	f7fe fb86 	bl	8105a80 <HAL_RCC_GetHCLKFreq>
 8107374:	4602      	mov	r2, r0
 8107376:	4b06      	ldr	r3, [pc, #24]	; (8107390 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107378:	6a1b      	ldr	r3, [r3, #32]
 810737a:	091b      	lsrs	r3, r3, #4
 810737c:	f003 0307 	and.w	r3, r3, #7
 8107380:	4904      	ldr	r1, [pc, #16]	; (8107394 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8107382:	5ccb      	ldrb	r3, [r1, r3]
 8107384:	f003 031f 	and.w	r3, r3, #31
 8107388:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810738c:	4618      	mov	r0, r3
 810738e:	bd80      	pop	{r7, pc}
 8107390:	58024400 	.word	0x58024400
 8107394:	0810b2f0 	.word	0x0810b2f0

08107398 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8107398:	b480      	push	{r7}
 810739a:	b089      	sub	sp, #36	; 0x24
 810739c:	af00      	add	r7, sp, #0
 810739e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81073a0:	4ba1      	ldr	r3, [pc, #644]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81073a4:	f003 0303 	and.w	r3, r3, #3
 81073a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81073aa:	4b9f      	ldr	r3, [pc, #636]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81073ae:	0b1b      	lsrs	r3, r3, #12
 81073b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81073b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81073b6:	4b9c      	ldr	r3, [pc, #624]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81073ba:	091b      	lsrs	r3, r3, #4
 81073bc:	f003 0301 	and.w	r3, r3, #1
 81073c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81073c2:	4b99      	ldr	r3, [pc, #612]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81073c6:	08db      	lsrs	r3, r3, #3
 81073c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81073cc:	693a      	ldr	r2, [r7, #16]
 81073ce:	fb02 f303 	mul.w	r3, r2, r3
 81073d2:	ee07 3a90 	vmov	s15, r3
 81073d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81073de:	697b      	ldr	r3, [r7, #20]
 81073e0:	2b00      	cmp	r3, #0
 81073e2:	f000 8111 	beq.w	8107608 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81073e6:	69bb      	ldr	r3, [r7, #24]
 81073e8:	2b02      	cmp	r3, #2
 81073ea:	f000 8083 	beq.w	81074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81073ee:	69bb      	ldr	r3, [r7, #24]
 81073f0:	2b02      	cmp	r3, #2
 81073f2:	f200 80a1 	bhi.w	8107538 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81073f6:	69bb      	ldr	r3, [r7, #24]
 81073f8:	2b00      	cmp	r3, #0
 81073fa:	d003      	beq.n	8107404 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81073fc:	69bb      	ldr	r3, [r7, #24]
 81073fe:	2b01      	cmp	r3, #1
 8107400:	d056      	beq.n	81074b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8107402:	e099      	b.n	8107538 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107404:	4b88      	ldr	r3, [pc, #544]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107406:	681b      	ldr	r3, [r3, #0]
 8107408:	f003 0320 	and.w	r3, r3, #32
 810740c:	2b00      	cmp	r3, #0
 810740e:	d02d      	beq.n	810746c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107410:	4b85      	ldr	r3, [pc, #532]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107412:	681b      	ldr	r3, [r3, #0]
 8107414:	08db      	lsrs	r3, r3, #3
 8107416:	f003 0303 	and.w	r3, r3, #3
 810741a:	4a84      	ldr	r2, [pc, #528]	; (810762c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810741c:	fa22 f303 	lsr.w	r3, r2, r3
 8107420:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107422:	68bb      	ldr	r3, [r7, #8]
 8107424:	ee07 3a90 	vmov	s15, r3
 8107428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810742c:	697b      	ldr	r3, [r7, #20]
 810742e:	ee07 3a90 	vmov	s15, r3
 8107432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810743a:	4b7b      	ldr	r3, [pc, #492]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810743c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810743e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107442:	ee07 3a90 	vmov	s15, r3
 8107446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810744a:	ed97 6a03 	vldr	s12, [r7, #12]
 810744e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810745a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810745e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107466:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810746a:	e087      	b.n	810757c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810746c:	697b      	ldr	r3, [r7, #20]
 810746e:	ee07 3a90 	vmov	s15, r3
 8107472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107476:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107634 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810747a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810747e:	4b6a      	ldr	r3, [pc, #424]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107486:	ee07 3a90 	vmov	s15, r3
 810748a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810748e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107492:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810749a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810749e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81074a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81074a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81074aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81074ae:	e065      	b.n	810757c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81074b0:	697b      	ldr	r3, [r7, #20]
 81074b2:	ee07 3a90 	vmov	s15, r3
 81074b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81074ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107638 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81074be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81074c2:	4b59      	ldr	r3, [pc, #356]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81074c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81074ca:	ee07 3a90 	vmov	s15, r3
 81074ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074d2:	ed97 6a03 	vldr	s12, [r7, #12]
 81074d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81074da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81074de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81074e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81074e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81074ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81074ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81074f2:	e043      	b.n	810757c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81074f4:	697b      	ldr	r3, [r7, #20]
 81074f6:	ee07 3a90 	vmov	s15, r3
 81074fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81074fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810763c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107506:	4b48      	ldr	r3, [pc, #288]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810750a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810750e:	ee07 3a90 	vmov	s15, r3
 8107512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107516:	ed97 6a03 	vldr	s12, [r7, #12]
 810751a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810751e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810752a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810752e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107532:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107536:	e021      	b.n	810757c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107538:	697b      	ldr	r3, [r7, #20]
 810753a:	ee07 3a90 	vmov	s15, r3
 810753e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107542:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107638 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810754a:	4b37      	ldr	r3, [pc, #220]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810754e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107552:	ee07 3a90 	vmov	s15, r3
 8107556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810755a:	ed97 6a03 	vldr	s12, [r7, #12]
 810755e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810756a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810756e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107576:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810757a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810757c:	4b2a      	ldr	r3, [pc, #168]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810757e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107580:	0a5b      	lsrs	r3, r3, #9
 8107582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107586:	ee07 3a90 	vmov	s15, r3
 810758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810758e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107596:	edd7 6a07 	vldr	s13, [r7, #28]
 810759a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810759e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81075a2:	ee17 2a90 	vmov	r2, s15
 81075a6:	687b      	ldr	r3, [r7, #4]
 81075a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81075aa:	4b1f      	ldr	r3, [pc, #124]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81075ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81075ae:	0c1b      	lsrs	r3, r3, #16
 81075b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81075b4:	ee07 3a90 	vmov	s15, r3
 81075b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81075c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81075c4:	edd7 6a07 	vldr	s13, [r7, #28]
 81075c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81075cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81075d0:	ee17 2a90 	vmov	r2, s15
 81075d4:	687b      	ldr	r3, [r7, #4]
 81075d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81075d8:	4b13      	ldr	r3, [pc, #76]	; (8107628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81075dc:	0e1b      	lsrs	r3, r3, #24
 81075de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81075e2:	ee07 3a90 	vmov	s15, r3
 81075e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81075ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 81075f2:	edd7 6a07 	vldr	s13, [r7, #28]
 81075f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81075fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81075fe:	ee17 2a90 	vmov	r2, s15
 8107602:	687b      	ldr	r3, [r7, #4]
 8107604:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107606:	e008      	b.n	810761a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107608:	687b      	ldr	r3, [r7, #4]
 810760a:	2200      	movs	r2, #0
 810760c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810760e:	687b      	ldr	r3, [r7, #4]
 8107610:	2200      	movs	r2, #0
 8107612:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107614:	687b      	ldr	r3, [r7, #4]
 8107616:	2200      	movs	r2, #0
 8107618:	609a      	str	r2, [r3, #8]
}
 810761a:	bf00      	nop
 810761c:	3724      	adds	r7, #36	; 0x24
 810761e:	46bd      	mov	sp, r7
 8107620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107624:	4770      	bx	lr
 8107626:	bf00      	nop
 8107628:	58024400 	.word	0x58024400
 810762c:	03d09000 	.word	0x03d09000
 8107630:	46000000 	.word	0x46000000
 8107634:	4c742400 	.word	0x4c742400
 8107638:	4a742400 	.word	0x4a742400
 810763c:	4af42400 	.word	0x4af42400

08107640 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8107640:	b480      	push	{r7}
 8107642:	b089      	sub	sp, #36	; 0x24
 8107644:	af00      	add	r7, sp, #0
 8107646:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107648:	4ba1      	ldr	r3, [pc, #644]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810764a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810764c:	f003 0303 	and.w	r3, r3, #3
 8107650:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8107652:	4b9f      	ldr	r3, [pc, #636]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107656:	0d1b      	lsrs	r3, r3, #20
 8107658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810765c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810765e:	4b9c      	ldr	r3, [pc, #624]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107662:	0a1b      	lsrs	r3, r3, #8
 8107664:	f003 0301 	and.w	r3, r3, #1
 8107668:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810766a:	4b99      	ldr	r3, [pc, #612]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810766e:	08db      	lsrs	r3, r3, #3
 8107670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107674:	693a      	ldr	r2, [r7, #16]
 8107676:	fb02 f303 	mul.w	r3, r2, r3
 810767a:	ee07 3a90 	vmov	s15, r3
 810767e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107682:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8107686:	697b      	ldr	r3, [r7, #20]
 8107688:	2b00      	cmp	r3, #0
 810768a:	f000 8111 	beq.w	81078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810768e:	69bb      	ldr	r3, [r7, #24]
 8107690:	2b02      	cmp	r3, #2
 8107692:	f000 8083 	beq.w	810779c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8107696:	69bb      	ldr	r3, [r7, #24]
 8107698:	2b02      	cmp	r3, #2
 810769a:	f200 80a1 	bhi.w	81077e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810769e:	69bb      	ldr	r3, [r7, #24]
 81076a0:	2b00      	cmp	r3, #0
 81076a2:	d003      	beq.n	81076ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81076a4:	69bb      	ldr	r3, [r7, #24]
 81076a6:	2b01      	cmp	r3, #1
 81076a8:	d056      	beq.n	8107758 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81076aa:	e099      	b.n	81077e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81076ac:	4b88      	ldr	r3, [pc, #544]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076ae:	681b      	ldr	r3, [r3, #0]
 81076b0:	f003 0320 	and.w	r3, r3, #32
 81076b4:	2b00      	cmp	r3, #0
 81076b6:	d02d      	beq.n	8107714 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81076b8:	4b85      	ldr	r3, [pc, #532]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076ba:	681b      	ldr	r3, [r3, #0]
 81076bc:	08db      	lsrs	r3, r3, #3
 81076be:	f003 0303 	and.w	r3, r3, #3
 81076c2:	4a84      	ldr	r2, [pc, #528]	; (81078d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81076c4:	fa22 f303 	lsr.w	r3, r2, r3
 81076c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81076ca:	68bb      	ldr	r3, [r7, #8]
 81076cc:	ee07 3a90 	vmov	s15, r3
 81076d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81076d4:	697b      	ldr	r3, [r7, #20]
 81076d6:	ee07 3a90 	vmov	s15, r3
 81076da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81076e2:	4b7b      	ldr	r3, [pc, #492]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81076e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81076ea:	ee07 3a90 	vmov	s15, r3
 81076ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81076f2:	ed97 6a03 	vldr	s12, [r7, #12]
 81076f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 81078d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81076fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81076fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810770a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810770e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8107712:	e087      	b.n	8107824 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107714:	697b      	ldr	r3, [r7, #20]
 8107716:	ee07 3a90 	vmov	s15, r3
 810771a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810771e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81078dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8107722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107726:	4b6a      	ldr	r3, [pc, #424]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810772a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810772e:	ee07 3a90 	vmov	s15, r3
 8107732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107736:	ed97 6a03 	vldr	s12, [r7, #12]
 810773a:	eddf 5a67 	vldr	s11, [pc, #412]	; 81078d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810773e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810774a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810774e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107756:	e065      	b.n	8107824 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107758:	697b      	ldr	r3, [r7, #20]
 810775a:	ee07 3a90 	vmov	s15, r3
 810775e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107762:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810776a:	4b59      	ldr	r3, [pc, #356]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810776e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107772:	ee07 3a90 	vmov	s15, r3
 8107776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810777a:	ed97 6a03 	vldr	s12, [r7, #12]
 810777e:	eddf 5a56 	vldr	s11, [pc, #344]	; 81078d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810778a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810778e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107796:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810779a:	e043      	b.n	8107824 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810779c:	697b      	ldr	r3, [r7, #20]
 810779e:	ee07 3a90 	vmov	s15, r3
 81077a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81078e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81077aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077ae:	4b48      	ldr	r3, [pc, #288]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81077b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81077b6:	ee07 3a90 	vmov	s15, r3
 81077ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077be:	ed97 6a03 	vldr	s12, [r7, #12]
 81077c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 81078d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81077c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81077ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81077ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81077d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81077d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81077de:	e021      	b.n	8107824 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81077e0:	697b      	ldr	r3, [r7, #20]
 81077e2:	ee07 3a90 	vmov	s15, r3
 81077e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81077ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077f2:	4b37      	ldr	r3, [pc, #220]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81077f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81077fa:	ee07 3a90 	vmov	s15, r3
 81077fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107802:	ed97 6a03 	vldr	s12, [r7, #12]
 8107806:	eddf 5a34 	vldr	s11, [pc, #208]	; 81078d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810780a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810780e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810781a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810781e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107822:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8107824:	4b2a      	ldr	r3, [pc, #168]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107828:	0a5b      	lsrs	r3, r3, #9
 810782a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810782e:	ee07 3a90 	vmov	s15, r3
 8107832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810783a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810783e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810784a:	ee17 2a90 	vmov	r2, s15
 810784e:	687b      	ldr	r3, [r7, #4]
 8107850:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8107852:	4b1f      	ldr	r3, [pc, #124]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107856:	0c1b      	lsrs	r3, r3, #16
 8107858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810785c:	ee07 3a90 	vmov	s15, r3
 8107860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107868:	ee37 7a87 	vadd.f32	s14, s15, s14
 810786c:	edd7 6a07 	vldr	s13, [r7, #28]
 8107870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107878:	ee17 2a90 	vmov	r2, s15
 810787c:	687b      	ldr	r3, [r7, #4]
 810787e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8107880:	4b13      	ldr	r3, [pc, #76]	; (81078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107884:	0e1b      	lsrs	r3, r3, #24
 8107886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810788a:	ee07 3a90 	vmov	s15, r3
 810788e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107896:	ee37 7a87 	vadd.f32	s14, s15, s14
 810789a:	edd7 6a07 	vldr	s13, [r7, #28]
 810789e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81078a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81078a6:	ee17 2a90 	vmov	r2, s15
 81078aa:	687b      	ldr	r3, [r7, #4]
 81078ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81078ae:	e008      	b.n	81078c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81078b0:	687b      	ldr	r3, [r7, #4]
 81078b2:	2200      	movs	r2, #0
 81078b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81078b6:	687b      	ldr	r3, [r7, #4]
 81078b8:	2200      	movs	r2, #0
 81078ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81078bc:	687b      	ldr	r3, [r7, #4]
 81078be:	2200      	movs	r2, #0
 81078c0:	609a      	str	r2, [r3, #8]
}
 81078c2:	bf00      	nop
 81078c4:	3724      	adds	r7, #36	; 0x24
 81078c6:	46bd      	mov	sp, r7
 81078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078cc:	4770      	bx	lr
 81078ce:	bf00      	nop
 81078d0:	58024400 	.word	0x58024400
 81078d4:	03d09000 	.word	0x03d09000
 81078d8:	46000000 	.word	0x46000000
 81078dc:	4c742400 	.word	0x4c742400
 81078e0:	4a742400 	.word	0x4a742400
 81078e4:	4af42400 	.word	0x4af42400

081078e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 81078e8:	b480      	push	{r7}
 81078ea:	b089      	sub	sp, #36	; 0x24
 81078ec:	af00      	add	r7, sp, #0
 81078ee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81078f0:	4ba0      	ldr	r3, [pc, #640]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81078f4:	f003 0303 	and.w	r3, r3, #3
 81078f8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 81078fa:	4b9e      	ldr	r3, [pc, #632]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81078fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81078fe:	091b      	lsrs	r3, r3, #4
 8107900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107904:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8107906:	4b9b      	ldr	r3, [pc, #620]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810790a:	f003 0301 	and.w	r3, r3, #1
 810790e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8107910:	4b98      	ldr	r3, [pc, #608]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107914:	08db      	lsrs	r3, r3, #3
 8107916:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810791a:	693a      	ldr	r2, [r7, #16]
 810791c:	fb02 f303 	mul.w	r3, r2, r3
 8107920:	ee07 3a90 	vmov	s15, r3
 8107924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107928:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810792c:	697b      	ldr	r3, [r7, #20]
 810792e:	2b00      	cmp	r3, #0
 8107930:	f000 8111 	beq.w	8107b56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8107934:	69bb      	ldr	r3, [r7, #24]
 8107936:	2b02      	cmp	r3, #2
 8107938:	f000 8083 	beq.w	8107a42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810793c:	69bb      	ldr	r3, [r7, #24]
 810793e:	2b02      	cmp	r3, #2
 8107940:	f200 80a1 	bhi.w	8107a86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8107944:	69bb      	ldr	r3, [r7, #24]
 8107946:	2b00      	cmp	r3, #0
 8107948:	d003      	beq.n	8107952 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810794a:	69bb      	ldr	r3, [r7, #24]
 810794c:	2b01      	cmp	r3, #1
 810794e:	d056      	beq.n	81079fe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8107950:	e099      	b.n	8107a86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107952:	4b88      	ldr	r3, [pc, #544]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107954:	681b      	ldr	r3, [r3, #0]
 8107956:	f003 0320 	and.w	r3, r3, #32
 810795a:	2b00      	cmp	r3, #0
 810795c:	d02d      	beq.n	81079ba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810795e:	4b85      	ldr	r3, [pc, #532]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107960:	681b      	ldr	r3, [r3, #0]
 8107962:	08db      	lsrs	r3, r3, #3
 8107964:	f003 0303 	and.w	r3, r3, #3
 8107968:	4a83      	ldr	r2, [pc, #524]	; (8107b78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810796a:	fa22 f303 	lsr.w	r3, r2, r3
 810796e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107970:	68bb      	ldr	r3, [r7, #8]
 8107972:	ee07 3a90 	vmov	s15, r3
 8107976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810797a:	697b      	ldr	r3, [r7, #20]
 810797c:	ee07 3a90 	vmov	s15, r3
 8107980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107988:	4b7a      	ldr	r3, [pc, #488]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810798c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107990:	ee07 3a90 	vmov	s15, r3
 8107994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107998:	ed97 6a03 	vldr	s12, [r7, #12]
 810799c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8107b7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81079a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81079a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81079a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81079ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81079b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81079b4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81079b8:	e087      	b.n	8107aca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81079ba:	697b      	ldr	r3, [r7, #20]
 81079bc:	ee07 3a90 	vmov	s15, r3
 81079c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079c4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8107b80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81079c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81079cc:	4b69      	ldr	r3, [pc, #420]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81079d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81079d4:	ee07 3a90 	vmov	s15, r3
 81079d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81079dc:	ed97 6a03 	vldr	s12, [r7, #12]
 81079e0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8107b7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81079e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81079e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81079ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81079f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81079f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81079f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81079fc:	e065      	b.n	8107aca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81079fe:	697b      	ldr	r3, [r7, #20]
 8107a00:	ee07 3a90 	vmov	s15, r3
 8107a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8107b84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107a0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a10:	4b58      	ldr	r3, [pc, #352]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a18:	ee07 3a90 	vmov	s15, r3
 8107a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a20:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a24:	eddf 5a55 	vldr	s11, [pc, #340]	; 8107b7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107a28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107a34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107a40:	e043      	b.n	8107aca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107a42:	697b      	ldr	r3, [r7, #20]
 8107a44:	ee07 3a90 	vmov	s15, r3
 8107a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8107b88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8107a50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a54:	4b47      	ldr	r3, [pc, #284]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a5c:	ee07 3a90 	vmov	s15, r3
 8107a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a64:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a68:	eddf 5a44 	vldr	s11, [pc, #272]	; 8107b7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107a84:	e021      	b.n	8107aca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107a86:	697b      	ldr	r3, [r7, #20]
 8107a88:	ee07 3a90 	vmov	s15, r3
 8107a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8107b80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107a94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a98:	4b36      	ldr	r3, [pc, #216]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107aa0:	ee07 3a90 	vmov	s15, r3
 8107aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107aa8:	ed97 6a03 	vldr	s12, [r7, #12]
 8107aac:	eddf 5a33 	vldr	s11, [pc, #204]	; 8107b7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107ab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107ab8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ac4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107ac8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8107aca:	4b2a      	ldr	r3, [pc, #168]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107ace:	0a5b      	lsrs	r3, r3, #9
 8107ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107ad4:	ee07 3a90 	vmov	s15, r3
 8107ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107adc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107ae0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8107ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107af0:	ee17 2a90 	vmov	r2, s15
 8107af4:	687b      	ldr	r3, [r7, #4]
 8107af6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8107af8:	4b1e      	ldr	r3, [pc, #120]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107afc:	0c1b      	lsrs	r3, r3, #16
 8107afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107b02:	ee07 3a90 	vmov	s15, r3
 8107b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8107b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107b1e:	ee17 2a90 	vmov	r2, s15
 8107b22:	687b      	ldr	r3, [r7, #4]
 8107b24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8107b26:	4b13      	ldr	r3, [pc, #76]	; (8107b74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107b2a:	0e1b      	lsrs	r3, r3, #24
 8107b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107b30:	ee07 3a90 	vmov	s15, r3
 8107b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107b3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8107b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107b4c:	ee17 2a90 	vmov	r2, s15
 8107b50:	687b      	ldr	r3, [r7, #4]
 8107b52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8107b54:	e008      	b.n	8107b68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8107b56:	687b      	ldr	r3, [r7, #4]
 8107b58:	2200      	movs	r2, #0
 8107b5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	2200      	movs	r2, #0
 8107b60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8107b62:	687b      	ldr	r3, [r7, #4]
 8107b64:	2200      	movs	r2, #0
 8107b66:	609a      	str	r2, [r3, #8]
}
 8107b68:	bf00      	nop
 8107b6a:	3724      	adds	r7, #36	; 0x24
 8107b6c:	46bd      	mov	sp, r7
 8107b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b72:	4770      	bx	lr
 8107b74:	58024400 	.word	0x58024400
 8107b78:	03d09000 	.word	0x03d09000
 8107b7c:	46000000 	.word	0x46000000
 8107b80:	4c742400 	.word	0x4c742400
 8107b84:	4a742400 	.word	0x4a742400
 8107b88:	4af42400 	.word	0x4af42400

08107b8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107b8c:	b580      	push	{r7, lr}
 8107b8e:	b084      	sub	sp, #16
 8107b90:	af00      	add	r7, sp, #0
 8107b92:	6078      	str	r0, [r7, #4]
 8107b94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107b96:	2300      	movs	r3, #0
 8107b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107b9a:	4b54      	ldr	r3, [pc, #336]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b9e:	f003 0303 	and.w	r3, r3, #3
 8107ba2:	2b03      	cmp	r3, #3
 8107ba4:	d101      	bne.n	8107baa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8107ba6:	2301      	movs	r3, #1
 8107ba8:	e09b      	b.n	8107ce2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107baa:	4b50      	ldr	r3, [pc, #320]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107bac:	681b      	ldr	r3, [r3, #0]
 8107bae:	4a4f      	ldr	r2, [pc, #316]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107bb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8107bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107bb6:	f7fb fb39 	bl	810322c <HAL_GetTick>
 8107bba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107bbc:	e008      	b.n	8107bd0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107bbe:	f7fb fb35 	bl	810322c <HAL_GetTick>
 8107bc2:	4602      	mov	r2, r0
 8107bc4:	68bb      	ldr	r3, [r7, #8]
 8107bc6:	1ad3      	subs	r3, r2, r3
 8107bc8:	2b02      	cmp	r3, #2
 8107bca:	d901      	bls.n	8107bd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107bcc:	2303      	movs	r3, #3
 8107bce:	e088      	b.n	8107ce2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107bd0:	4b46      	ldr	r3, [pc, #280]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107bd2:	681b      	ldr	r3, [r3, #0]
 8107bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107bd8:	2b00      	cmp	r3, #0
 8107bda:	d1f0      	bne.n	8107bbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107bdc:	4b43      	ldr	r3, [pc, #268]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107be0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8107be4:	687b      	ldr	r3, [r7, #4]
 8107be6:	681b      	ldr	r3, [r3, #0]
 8107be8:	031b      	lsls	r3, r3, #12
 8107bea:	4940      	ldr	r1, [pc, #256]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107bec:	4313      	orrs	r3, r2
 8107bee:	628b      	str	r3, [r1, #40]	; 0x28
 8107bf0:	687b      	ldr	r3, [r7, #4]
 8107bf2:	685b      	ldr	r3, [r3, #4]
 8107bf4:	3b01      	subs	r3, #1
 8107bf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107bfa:	687b      	ldr	r3, [r7, #4]
 8107bfc:	689b      	ldr	r3, [r3, #8]
 8107bfe:	3b01      	subs	r3, #1
 8107c00:	025b      	lsls	r3, r3, #9
 8107c02:	b29b      	uxth	r3, r3
 8107c04:	431a      	orrs	r2, r3
 8107c06:	687b      	ldr	r3, [r7, #4]
 8107c08:	68db      	ldr	r3, [r3, #12]
 8107c0a:	3b01      	subs	r3, #1
 8107c0c:	041b      	lsls	r3, r3, #16
 8107c0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107c12:	431a      	orrs	r2, r3
 8107c14:	687b      	ldr	r3, [r7, #4]
 8107c16:	691b      	ldr	r3, [r3, #16]
 8107c18:	3b01      	subs	r3, #1
 8107c1a:	061b      	lsls	r3, r3, #24
 8107c1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107c20:	4932      	ldr	r1, [pc, #200]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c22:	4313      	orrs	r3, r2
 8107c24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107c26:	4b31      	ldr	r3, [pc, #196]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8107c2e:	687b      	ldr	r3, [r7, #4]
 8107c30:	695b      	ldr	r3, [r3, #20]
 8107c32:	492e      	ldr	r1, [pc, #184]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c34:	4313      	orrs	r3, r2
 8107c36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107c38:	4b2c      	ldr	r3, [pc, #176]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c3c:	f023 0220 	bic.w	r2, r3, #32
 8107c40:	687b      	ldr	r3, [r7, #4]
 8107c42:	699b      	ldr	r3, [r3, #24]
 8107c44:	4929      	ldr	r1, [pc, #164]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c46:	4313      	orrs	r3, r2
 8107c48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107c4a:	4b28      	ldr	r3, [pc, #160]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c4e:	4a27      	ldr	r2, [pc, #156]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c50:	f023 0310 	bic.w	r3, r3, #16
 8107c54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8107c56:	4b25      	ldr	r3, [pc, #148]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107c5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107c62:	687a      	ldr	r2, [r7, #4]
 8107c64:	69d2      	ldr	r2, [r2, #28]
 8107c66:	00d2      	lsls	r2, r2, #3
 8107c68:	4920      	ldr	r1, [pc, #128]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c6a:	4313      	orrs	r3, r2
 8107c6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107c6e:	4b1f      	ldr	r3, [pc, #124]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c72:	4a1e      	ldr	r2, [pc, #120]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c74:	f043 0310 	orr.w	r3, r3, #16
 8107c78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107c7a:	683b      	ldr	r3, [r7, #0]
 8107c7c:	2b00      	cmp	r3, #0
 8107c7e:	d106      	bne.n	8107c8e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107c80:	4b1a      	ldr	r3, [pc, #104]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c84:	4a19      	ldr	r2, [pc, #100]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8107c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107c8c:	e00f      	b.n	8107cae <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107c8e:	683b      	ldr	r3, [r7, #0]
 8107c90:	2b01      	cmp	r3, #1
 8107c92:	d106      	bne.n	8107ca2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107c94:	4b15      	ldr	r3, [pc, #84]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c98:	4a14      	ldr	r2, [pc, #80]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107ca0:	e005      	b.n	8107cae <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107ca2:	4b12      	ldr	r3, [pc, #72]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ca6:	4a11      	ldr	r2, [pc, #68]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107cac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107cae:	4b0f      	ldr	r3, [pc, #60]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107cb0:	681b      	ldr	r3, [r3, #0]
 8107cb2:	4a0e      	ldr	r2, [pc, #56]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107cb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8107cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107cba:	f7fb fab7 	bl	810322c <HAL_GetTick>
 8107cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107cc0:	e008      	b.n	8107cd4 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107cc2:	f7fb fab3 	bl	810322c <HAL_GetTick>
 8107cc6:	4602      	mov	r2, r0
 8107cc8:	68bb      	ldr	r3, [r7, #8]
 8107cca:	1ad3      	subs	r3, r2, r3
 8107ccc:	2b02      	cmp	r3, #2
 8107cce:	d901      	bls.n	8107cd4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107cd0:	2303      	movs	r3, #3
 8107cd2:	e006      	b.n	8107ce2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107cd4:	4b05      	ldr	r3, [pc, #20]	; (8107cec <RCCEx_PLL2_Config+0x160>)
 8107cd6:	681b      	ldr	r3, [r3, #0]
 8107cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107cdc:	2b00      	cmp	r3, #0
 8107cde:	d0f0      	beq.n	8107cc2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8107ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8107ce2:	4618      	mov	r0, r3
 8107ce4:	3710      	adds	r7, #16
 8107ce6:	46bd      	mov	sp, r7
 8107ce8:	bd80      	pop	{r7, pc}
 8107cea:	bf00      	nop
 8107cec:	58024400 	.word	0x58024400

08107cf0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107cf0:	b580      	push	{r7, lr}
 8107cf2:	b084      	sub	sp, #16
 8107cf4:	af00      	add	r7, sp, #0
 8107cf6:	6078      	str	r0, [r7, #4]
 8107cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107cfa:	2300      	movs	r3, #0
 8107cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107cfe:	4b54      	ldr	r3, [pc, #336]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107d02:	f003 0303 	and.w	r3, r3, #3
 8107d06:	2b03      	cmp	r3, #3
 8107d08:	d101      	bne.n	8107d0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107d0a:	2301      	movs	r3, #1
 8107d0c:	e09b      	b.n	8107e46 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107d0e:	4b50      	ldr	r3, [pc, #320]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107d10:	681b      	ldr	r3, [r3, #0]
 8107d12:	4a4f      	ldr	r2, [pc, #316]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107d1a:	f7fb fa87 	bl	810322c <HAL_GetTick>
 8107d1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107d20:	e008      	b.n	8107d34 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107d22:	f7fb fa83 	bl	810322c <HAL_GetTick>
 8107d26:	4602      	mov	r2, r0
 8107d28:	68bb      	ldr	r3, [r7, #8]
 8107d2a:	1ad3      	subs	r3, r2, r3
 8107d2c:	2b02      	cmp	r3, #2
 8107d2e:	d901      	bls.n	8107d34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107d30:	2303      	movs	r3, #3
 8107d32:	e088      	b.n	8107e46 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107d34:	4b46      	ldr	r3, [pc, #280]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107d36:	681b      	ldr	r3, [r3, #0]
 8107d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107d3c:	2b00      	cmp	r3, #0
 8107d3e:	d1f0      	bne.n	8107d22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107d40:	4b43      	ldr	r3, [pc, #268]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107d44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8107d48:	687b      	ldr	r3, [r7, #4]
 8107d4a:	681b      	ldr	r3, [r3, #0]
 8107d4c:	051b      	lsls	r3, r3, #20
 8107d4e:	4940      	ldr	r1, [pc, #256]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107d50:	4313      	orrs	r3, r2
 8107d52:	628b      	str	r3, [r1, #40]	; 0x28
 8107d54:	687b      	ldr	r3, [r7, #4]
 8107d56:	685b      	ldr	r3, [r3, #4]
 8107d58:	3b01      	subs	r3, #1
 8107d5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107d5e:	687b      	ldr	r3, [r7, #4]
 8107d60:	689b      	ldr	r3, [r3, #8]
 8107d62:	3b01      	subs	r3, #1
 8107d64:	025b      	lsls	r3, r3, #9
 8107d66:	b29b      	uxth	r3, r3
 8107d68:	431a      	orrs	r2, r3
 8107d6a:	687b      	ldr	r3, [r7, #4]
 8107d6c:	68db      	ldr	r3, [r3, #12]
 8107d6e:	3b01      	subs	r3, #1
 8107d70:	041b      	lsls	r3, r3, #16
 8107d72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107d76:	431a      	orrs	r2, r3
 8107d78:	687b      	ldr	r3, [r7, #4]
 8107d7a:	691b      	ldr	r3, [r3, #16]
 8107d7c:	3b01      	subs	r3, #1
 8107d7e:	061b      	lsls	r3, r3, #24
 8107d80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107d84:	4932      	ldr	r1, [pc, #200]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107d86:	4313      	orrs	r3, r2
 8107d88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107d8a:	4b31      	ldr	r3, [pc, #196]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8107d92:	687b      	ldr	r3, [r7, #4]
 8107d94:	695b      	ldr	r3, [r3, #20]
 8107d96:	492e      	ldr	r1, [pc, #184]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107d98:	4313      	orrs	r3, r2
 8107d9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107d9c:	4b2c      	ldr	r3, [pc, #176]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107da0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107da4:	687b      	ldr	r3, [r7, #4]
 8107da6:	699b      	ldr	r3, [r3, #24]
 8107da8:	4929      	ldr	r1, [pc, #164]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107daa:	4313      	orrs	r3, r2
 8107dac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107dae:	4b28      	ldr	r3, [pc, #160]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107db2:	4a27      	ldr	r2, [pc, #156]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107db8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107dba:	4b25      	ldr	r3, [pc, #148]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107dc2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107dc6:	687a      	ldr	r2, [r7, #4]
 8107dc8:	69d2      	ldr	r2, [r2, #28]
 8107dca:	00d2      	lsls	r2, r2, #3
 8107dcc:	4920      	ldr	r1, [pc, #128]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107dce:	4313      	orrs	r3, r2
 8107dd0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107dd2:	4b1f      	ldr	r3, [pc, #124]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107dd6:	4a1e      	ldr	r2, [pc, #120]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107dde:	683b      	ldr	r3, [r7, #0]
 8107de0:	2b00      	cmp	r3, #0
 8107de2:	d106      	bne.n	8107df2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107de4:	4b1a      	ldr	r3, [pc, #104]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107de8:	4a19      	ldr	r2, [pc, #100]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107dea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8107dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107df0:	e00f      	b.n	8107e12 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107df2:	683b      	ldr	r3, [r7, #0]
 8107df4:	2b01      	cmp	r3, #1
 8107df6:	d106      	bne.n	8107e06 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107df8:	4b15      	ldr	r3, [pc, #84]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107dfc:	4a14      	ldr	r2, [pc, #80]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107dfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107e02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107e04:	e005      	b.n	8107e12 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107e06:	4b12      	ldr	r3, [pc, #72]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107e0a:	4a11      	ldr	r2, [pc, #68]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107e0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107e10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107e12:	4b0f      	ldr	r3, [pc, #60]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107e14:	681b      	ldr	r3, [r3, #0]
 8107e16:	4a0e      	ldr	r2, [pc, #56]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107e1e:	f7fb fa05 	bl	810322c <HAL_GetTick>
 8107e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107e24:	e008      	b.n	8107e38 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107e26:	f7fb fa01 	bl	810322c <HAL_GetTick>
 8107e2a:	4602      	mov	r2, r0
 8107e2c:	68bb      	ldr	r3, [r7, #8]
 8107e2e:	1ad3      	subs	r3, r2, r3
 8107e30:	2b02      	cmp	r3, #2
 8107e32:	d901      	bls.n	8107e38 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107e34:	2303      	movs	r3, #3
 8107e36:	e006      	b.n	8107e46 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107e38:	4b05      	ldr	r3, [pc, #20]	; (8107e50 <RCCEx_PLL3_Config+0x160>)
 8107e3a:	681b      	ldr	r3, [r3, #0]
 8107e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107e40:	2b00      	cmp	r3, #0
 8107e42:	d0f0      	beq.n	8107e26 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8107e46:	4618      	mov	r0, r3
 8107e48:	3710      	adds	r7, #16
 8107e4a:	46bd      	mov	sp, r7
 8107e4c:	bd80      	pop	{r7, pc}
 8107e4e:	bf00      	nop
 8107e50:	58024400 	.word	0x58024400

08107e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8107e54:	b580      	push	{r7, lr}
 8107e56:	b082      	sub	sp, #8
 8107e58:	af00      	add	r7, sp, #0
 8107e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107e5c:	687b      	ldr	r3, [r7, #4]
 8107e5e:	2b00      	cmp	r3, #0
 8107e60:	d101      	bne.n	8107e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8107e62:	2301      	movs	r3, #1
 8107e64:	e049      	b.n	8107efa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107e66:	687b      	ldr	r3, [r7, #4]
 8107e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107e6c:	b2db      	uxtb	r3, r3
 8107e6e:	2b00      	cmp	r3, #0
 8107e70:	d106      	bne.n	8107e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107e72:	687b      	ldr	r3, [r7, #4]
 8107e74:	2200      	movs	r2, #0
 8107e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107e7a:	6878      	ldr	r0, [r7, #4]
 8107e7c:	f7fa fe94 	bl	8102ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107e80:	687b      	ldr	r3, [r7, #4]
 8107e82:	2202      	movs	r2, #2
 8107e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107e88:	687b      	ldr	r3, [r7, #4]
 8107e8a:	681a      	ldr	r2, [r3, #0]
 8107e8c:	687b      	ldr	r3, [r7, #4]
 8107e8e:	3304      	adds	r3, #4
 8107e90:	4619      	mov	r1, r3
 8107e92:	4610      	mov	r0, r2
 8107e94:	f000 fdc4 	bl	8108a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107e98:	687b      	ldr	r3, [r7, #4]
 8107e9a:	2201      	movs	r2, #1
 8107e9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107ea0:	687b      	ldr	r3, [r7, #4]
 8107ea2:	2201      	movs	r2, #1
 8107ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107ea8:	687b      	ldr	r3, [r7, #4]
 8107eaa:	2201      	movs	r2, #1
 8107eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107eb0:	687b      	ldr	r3, [r7, #4]
 8107eb2:	2201      	movs	r2, #1
 8107eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	2201      	movs	r2, #1
 8107ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107ec0:	687b      	ldr	r3, [r7, #4]
 8107ec2:	2201      	movs	r2, #1
 8107ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107ec8:	687b      	ldr	r3, [r7, #4]
 8107eca:	2201      	movs	r2, #1
 8107ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107ed0:	687b      	ldr	r3, [r7, #4]
 8107ed2:	2201      	movs	r2, #1
 8107ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107ed8:	687b      	ldr	r3, [r7, #4]
 8107eda:	2201      	movs	r2, #1
 8107edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107ee0:	687b      	ldr	r3, [r7, #4]
 8107ee2:	2201      	movs	r2, #1
 8107ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8107ee8:	687b      	ldr	r3, [r7, #4]
 8107eea:	2201      	movs	r2, #1
 8107eec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107ef0:	687b      	ldr	r3, [r7, #4]
 8107ef2:	2201      	movs	r2, #1
 8107ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107ef8:	2300      	movs	r3, #0
}
 8107efa:	4618      	mov	r0, r3
 8107efc:	3708      	adds	r7, #8
 8107efe:	46bd      	mov	sp, r7
 8107f00:	bd80      	pop	{r7, pc}
	...

08107f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8107f04:	b480      	push	{r7}
 8107f06:	b085      	sub	sp, #20
 8107f08:	af00      	add	r7, sp, #0
 8107f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8107f0c:	687b      	ldr	r3, [r7, #4]
 8107f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107f12:	b2db      	uxtb	r3, r3
 8107f14:	2b01      	cmp	r3, #1
 8107f16:	d001      	beq.n	8107f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8107f18:	2301      	movs	r3, #1
 8107f1a:	e054      	b.n	8107fc6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107f1c:	687b      	ldr	r3, [r7, #4]
 8107f1e:	2202      	movs	r2, #2
 8107f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8107f24:	687b      	ldr	r3, [r7, #4]
 8107f26:	681b      	ldr	r3, [r3, #0]
 8107f28:	68da      	ldr	r2, [r3, #12]
 8107f2a:	687b      	ldr	r3, [r7, #4]
 8107f2c:	681b      	ldr	r3, [r3, #0]
 8107f2e:	f042 0201 	orr.w	r2, r2, #1
 8107f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107f34:	687b      	ldr	r3, [r7, #4]
 8107f36:	681b      	ldr	r3, [r3, #0]
 8107f38:	4a26      	ldr	r2, [pc, #152]	; (8107fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8107f3a:	4293      	cmp	r3, r2
 8107f3c:	d022      	beq.n	8107f84 <HAL_TIM_Base_Start_IT+0x80>
 8107f3e:	687b      	ldr	r3, [r7, #4]
 8107f40:	681b      	ldr	r3, [r3, #0]
 8107f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107f46:	d01d      	beq.n	8107f84 <HAL_TIM_Base_Start_IT+0x80>
 8107f48:	687b      	ldr	r3, [r7, #4]
 8107f4a:	681b      	ldr	r3, [r3, #0]
 8107f4c:	4a22      	ldr	r2, [pc, #136]	; (8107fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8107f4e:	4293      	cmp	r3, r2
 8107f50:	d018      	beq.n	8107f84 <HAL_TIM_Base_Start_IT+0x80>
 8107f52:	687b      	ldr	r3, [r7, #4]
 8107f54:	681b      	ldr	r3, [r3, #0]
 8107f56:	4a21      	ldr	r2, [pc, #132]	; (8107fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8107f58:	4293      	cmp	r3, r2
 8107f5a:	d013      	beq.n	8107f84 <HAL_TIM_Base_Start_IT+0x80>
 8107f5c:	687b      	ldr	r3, [r7, #4]
 8107f5e:	681b      	ldr	r3, [r3, #0]
 8107f60:	4a1f      	ldr	r2, [pc, #124]	; (8107fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8107f62:	4293      	cmp	r3, r2
 8107f64:	d00e      	beq.n	8107f84 <HAL_TIM_Base_Start_IT+0x80>
 8107f66:	687b      	ldr	r3, [r7, #4]
 8107f68:	681b      	ldr	r3, [r3, #0]
 8107f6a:	4a1e      	ldr	r2, [pc, #120]	; (8107fe4 <HAL_TIM_Base_Start_IT+0xe0>)
 8107f6c:	4293      	cmp	r3, r2
 8107f6e:	d009      	beq.n	8107f84 <HAL_TIM_Base_Start_IT+0x80>
 8107f70:	687b      	ldr	r3, [r7, #4]
 8107f72:	681b      	ldr	r3, [r3, #0]
 8107f74:	4a1c      	ldr	r2, [pc, #112]	; (8107fe8 <HAL_TIM_Base_Start_IT+0xe4>)
 8107f76:	4293      	cmp	r3, r2
 8107f78:	d004      	beq.n	8107f84 <HAL_TIM_Base_Start_IT+0x80>
 8107f7a:	687b      	ldr	r3, [r7, #4]
 8107f7c:	681b      	ldr	r3, [r3, #0]
 8107f7e:	4a1b      	ldr	r2, [pc, #108]	; (8107fec <HAL_TIM_Base_Start_IT+0xe8>)
 8107f80:	4293      	cmp	r3, r2
 8107f82:	d115      	bne.n	8107fb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107f84:	687b      	ldr	r3, [r7, #4]
 8107f86:	681b      	ldr	r3, [r3, #0]
 8107f88:	689a      	ldr	r2, [r3, #8]
 8107f8a:	4b19      	ldr	r3, [pc, #100]	; (8107ff0 <HAL_TIM_Base_Start_IT+0xec>)
 8107f8c:	4013      	ands	r3, r2
 8107f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107f90:	68fb      	ldr	r3, [r7, #12]
 8107f92:	2b06      	cmp	r3, #6
 8107f94:	d015      	beq.n	8107fc2 <HAL_TIM_Base_Start_IT+0xbe>
 8107f96:	68fb      	ldr	r3, [r7, #12]
 8107f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107f9c:	d011      	beq.n	8107fc2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8107f9e:	687b      	ldr	r3, [r7, #4]
 8107fa0:	681b      	ldr	r3, [r3, #0]
 8107fa2:	681a      	ldr	r2, [r3, #0]
 8107fa4:	687b      	ldr	r3, [r7, #4]
 8107fa6:	681b      	ldr	r3, [r3, #0]
 8107fa8:	f042 0201 	orr.w	r2, r2, #1
 8107fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107fae:	e008      	b.n	8107fc2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8107fb0:	687b      	ldr	r3, [r7, #4]
 8107fb2:	681b      	ldr	r3, [r3, #0]
 8107fb4:	681a      	ldr	r2, [r3, #0]
 8107fb6:	687b      	ldr	r3, [r7, #4]
 8107fb8:	681b      	ldr	r3, [r3, #0]
 8107fba:	f042 0201 	orr.w	r2, r2, #1
 8107fbe:	601a      	str	r2, [r3, #0]
 8107fc0:	e000      	b.n	8107fc4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107fc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8107fc4:	2300      	movs	r3, #0
}
 8107fc6:	4618      	mov	r0, r3
 8107fc8:	3714      	adds	r7, #20
 8107fca:	46bd      	mov	sp, r7
 8107fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fd0:	4770      	bx	lr
 8107fd2:	bf00      	nop
 8107fd4:	40010000 	.word	0x40010000
 8107fd8:	40000400 	.word	0x40000400
 8107fdc:	40000800 	.word	0x40000800
 8107fe0:	40000c00 	.word	0x40000c00
 8107fe4:	40010400 	.word	0x40010400
 8107fe8:	40001800 	.word	0x40001800
 8107fec:	40014000 	.word	0x40014000
 8107ff0:	00010007 	.word	0x00010007

08107ff4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8107ff4:	b580      	push	{r7, lr}
 8107ff6:	b082      	sub	sp, #8
 8107ff8:	af00      	add	r7, sp, #0
 8107ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107ffc:	687b      	ldr	r3, [r7, #4]
 8107ffe:	2b00      	cmp	r3, #0
 8108000:	d101      	bne.n	8108006 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8108002:	2301      	movs	r3, #1
 8108004:	e049      	b.n	810809a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108006:	687b      	ldr	r3, [r7, #4]
 8108008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810800c:	b2db      	uxtb	r3, r3
 810800e:	2b00      	cmp	r3, #0
 8108010:	d106      	bne.n	8108020 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	2200      	movs	r2, #0
 8108016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810801a:	6878      	ldr	r0, [r7, #4]
 810801c:	f7fa fd00 	bl	8102a20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108020:	687b      	ldr	r3, [r7, #4]
 8108022:	2202      	movs	r2, #2
 8108024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108028:	687b      	ldr	r3, [r7, #4]
 810802a:	681a      	ldr	r2, [r3, #0]
 810802c:	687b      	ldr	r3, [r7, #4]
 810802e:	3304      	adds	r3, #4
 8108030:	4619      	mov	r1, r3
 8108032:	4610      	mov	r0, r2
 8108034:	f000 fcf4 	bl	8108a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8108038:	687b      	ldr	r3, [r7, #4]
 810803a:	2201      	movs	r2, #1
 810803c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108040:	687b      	ldr	r3, [r7, #4]
 8108042:	2201      	movs	r2, #1
 8108044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8108048:	687b      	ldr	r3, [r7, #4]
 810804a:	2201      	movs	r2, #1
 810804c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8108050:	687b      	ldr	r3, [r7, #4]
 8108052:	2201      	movs	r2, #1
 8108054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8108058:	687b      	ldr	r3, [r7, #4]
 810805a:	2201      	movs	r2, #1
 810805c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8108060:	687b      	ldr	r3, [r7, #4]
 8108062:	2201      	movs	r2, #1
 8108064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8108068:	687b      	ldr	r3, [r7, #4]
 810806a:	2201      	movs	r2, #1
 810806c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	2201      	movs	r2, #1
 8108074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8108078:	687b      	ldr	r3, [r7, #4]
 810807a:	2201      	movs	r2, #1
 810807c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8108080:	687b      	ldr	r3, [r7, #4]
 8108082:	2201      	movs	r2, #1
 8108084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8108088:	687b      	ldr	r3, [r7, #4]
 810808a:	2201      	movs	r2, #1
 810808c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8108090:	687b      	ldr	r3, [r7, #4]
 8108092:	2201      	movs	r2, #1
 8108094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8108098:	2300      	movs	r3, #0
}
 810809a:	4618      	mov	r0, r3
 810809c:	3708      	adds	r7, #8
 810809e:	46bd      	mov	sp, r7
 81080a0:	bd80      	pop	{r7, pc}
	...

081080a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81080a4:	b580      	push	{r7, lr}
 81080a6:	b084      	sub	sp, #16
 81080a8:	af00      	add	r7, sp, #0
 81080aa:	6078      	str	r0, [r7, #4]
 81080ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81080ae:	683b      	ldr	r3, [r7, #0]
 81080b0:	2b00      	cmp	r3, #0
 81080b2:	d109      	bne.n	81080c8 <HAL_TIM_PWM_Start+0x24>
 81080b4:	687b      	ldr	r3, [r7, #4]
 81080b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 81080ba:	b2db      	uxtb	r3, r3
 81080bc:	2b01      	cmp	r3, #1
 81080be:	bf14      	ite	ne
 81080c0:	2301      	movne	r3, #1
 81080c2:	2300      	moveq	r3, #0
 81080c4:	b2db      	uxtb	r3, r3
 81080c6:	e03c      	b.n	8108142 <HAL_TIM_PWM_Start+0x9e>
 81080c8:	683b      	ldr	r3, [r7, #0]
 81080ca:	2b04      	cmp	r3, #4
 81080cc:	d109      	bne.n	81080e2 <HAL_TIM_PWM_Start+0x3e>
 81080ce:	687b      	ldr	r3, [r7, #4]
 81080d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 81080d4:	b2db      	uxtb	r3, r3
 81080d6:	2b01      	cmp	r3, #1
 81080d8:	bf14      	ite	ne
 81080da:	2301      	movne	r3, #1
 81080dc:	2300      	moveq	r3, #0
 81080de:	b2db      	uxtb	r3, r3
 81080e0:	e02f      	b.n	8108142 <HAL_TIM_PWM_Start+0x9e>
 81080e2:	683b      	ldr	r3, [r7, #0]
 81080e4:	2b08      	cmp	r3, #8
 81080e6:	d109      	bne.n	81080fc <HAL_TIM_PWM_Start+0x58>
 81080e8:	687b      	ldr	r3, [r7, #4]
 81080ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81080ee:	b2db      	uxtb	r3, r3
 81080f0:	2b01      	cmp	r3, #1
 81080f2:	bf14      	ite	ne
 81080f4:	2301      	movne	r3, #1
 81080f6:	2300      	moveq	r3, #0
 81080f8:	b2db      	uxtb	r3, r3
 81080fa:	e022      	b.n	8108142 <HAL_TIM_PWM_Start+0x9e>
 81080fc:	683b      	ldr	r3, [r7, #0]
 81080fe:	2b0c      	cmp	r3, #12
 8108100:	d109      	bne.n	8108116 <HAL_TIM_PWM_Start+0x72>
 8108102:	687b      	ldr	r3, [r7, #4]
 8108104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108108:	b2db      	uxtb	r3, r3
 810810a:	2b01      	cmp	r3, #1
 810810c:	bf14      	ite	ne
 810810e:	2301      	movne	r3, #1
 8108110:	2300      	moveq	r3, #0
 8108112:	b2db      	uxtb	r3, r3
 8108114:	e015      	b.n	8108142 <HAL_TIM_PWM_Start+0x9e>
 8108116:	683b      	ldr	r3, [r7, #0]
 8108118:	2b10      	cmp	r3, #16
 810811a:	d109      	bne.n	8108130 <HAL_TIM_PWM_Start+0x8c>
 810811c:	687b      	ldr	r3, [r7, #4]
 810811e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8108122:	b2db      	uxtb	r3, r3
 8108124:	2b01      	cmp	r3, #1
 8108126:	bf14      	ite	ne
 8108128:	2301      	movne	r3, #1
 810812a:	2300      	moveq	r3, #0
 810812c:	b2db      	uxtb	r3, r3
 810812e:	e008      	b.n	8108142 <HAL_TIM_PWM_Start+0x9e>
 8108130:	687b      	ldr	r3, [r7, #4]
 8108132:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8108136:	b2db      	uxtb	r3, r3
 8108138:	2b01      	cmp	r3, #1
 810813a:	bf14      	ite	ne
 810813c:	2301      	movne	r3, #1
 810813e:	2300      	moveq	r3, #0
 8108140:	b2db      	uxtb	r3, r3
 8108142:	2b00      	cmp	r3, #0
 8108144:	d001      	beq.n	810814a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8108146:	2301      	movs	r3, #1
 8108148:	e0a1      	b.n	810828e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810814a:	683b      	ldr	r3, [r7, #0]
 810814c:	2b00      	cmp	r3, #0
 810814e:	d104      	bne.n	810815a <HAL_TIM_PWM_Start+0xb6>
 8108150:	687b      	ldr	r3, [r7, #4]
 8108152:	2202      	movs	r2, #2
 8108154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8108158:	e023      	b.n	81081a2 <HAL_TIM_PWM_Start+0xfe>
 810815a:	683b      	ldr	r3, [r7, #0]
 810815c:	2b04      	cmp	r3, #4
 810815e:	d104      	bne.n	810816a <HAL_TIM_PWM_Start+0xc6>
 8108160:	687b      	ldr	r3, [r7, #4]
 8108162:	2202      	movs	r2, #2
 8108164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8108168:	e01b      	b.n	81081a2 <HAL_TIM_PWM_Start+0xfe>
 810816a:	683b      	ldr	r3, [r7, #0]
 810816c:	2b08      	cmp	r3, #8
 810816e:	d104      	bne.n	810817a <HAL_TIM_PWM_Start+0xd6>
 8108170:	687b      	ldr	r3, [r7, #4]
 8108172:	2202      	movs	r2, #2
 8108174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8108178:	e013      	b.n	81081a2 <HAL_TIM_PWM_Start+0xfe>
 810817a:	683b      	ldr	r3, [r7, #0]
 810817c:	2b0c      	cmp	r3, #12
 810817e:	d104      	bne.n	810818a <HAL_TIM_PWM_Start+0xe6>
 8108180:	687b      	ldr	r3, [r7, #4]
 8108182:	2202      	movs	r2, #2
 8108184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8108188:	e00b      	b.n	81081a2 <HAL_TIM_PWM_Start+0xfe>
 810818a:	683b      	ldr	r3, [r7, #0]
 810818c:	2b10      	cmp	r3, #16
 810818e:	d104      	bne.n	810819a <HAL_TIM_PWM_Start+0xf6>
 8108190:	687b      	ldr	r3, [r7, #4]
 8108192:	2202      	movs	r2, #2
 8108194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8108198:	e003      	b.n	81081a2 <HAL_TIM_PWM_Start+0xfe>
 810819a:	687b      	ldr	r3, [r7, #4]
 810819c:	2202      	movs	r2, #2
 810819e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81081a2:	687b      	ldr	r3, [r7, #4]
 81081a4:	681b      	ldr	r3, [r3, #0]
 81081a6:	2201      	movs	r2, #1
 81081a8:	6839      	ldr	r1, [r7, #0]
 81081aa:	4618      	mov	r0, r3
 81081ac:	f000 ffa8 	bl	8109100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81081b0:	687b      	ldr	r3, [r7, #4]
 81081b2:	681b      	ldr	r3, [r3, #0]
 81081b4:	4a38      	ldr	r2, [pc, #224]	; (8108298 <HAL_TIM_PWM_Start+0x1f4>)
 81081b6:	4293      	cmp	r3, r2
 81081b8:	d013      	beq.n	81081e2 <HAL_TIM_PWM_Start+0x13e>
 81081ba:	687b      	ldr	r3, [r7, #4]
 81081bc:	681b      	ldr	r3, [r3, #0]
 81081be:	4a37      	ldr	r2, [pc, #220]	; (810829c <HAL_TIM_PWM_Start+0x1f8>)
 81081c0:	4293      	cmp	r3, r2
 81081c2:	d00e      	beq.n	81081e2 <HAL_TIM_PWM_Start+0x13e>
 81081c4:	687b      	ldr	r3, [r7, #4]
 81081c6:	681b      	ldr	r3, [r3, #0]
 81081c8:	4a35      	ldr	r2, [pc, #212]	; (81082a0 <HAL_TIM_PWM_Start+0x1fc>)
 81081ca:	4293      	cmp	r3, r2
 81081cc:	d009      	beq.n	81081e2 <HAL_TIM_PWM_Start+0x13e>
 81081ce:	687b      	ldr	r3, [r7, #4]
 81081d0:	681b      	ldr	r3, [r3, #0]
 81081d2:	4a34      	ldr	r2, [pc, #208]	; (81082a4 <HAL_TIM_PWM_Start+0x200>)
 81081d4:	4293      	cmp	r3, r2
 81081d6:	d004      	beq.n	81081e2 <HAL_TIM_PWM_Start+0x13e>
 81081d8:	687b      	ldr	r3, [r7, #4]
 81081da:	681b      	ldr	r3, [r3, #0]
 81081dc:	4a32      	ldr	r2, [pc, #200]	; (81082a8 <HAL_TIM_PWM_Start+0x204>)
 81081de:	4293      	cmp	r3, r2
 81081e0:	d101      	bne.n	81081e6 <HAL_TIM_PWM_Start+0x142>
 81081e2:	2301      	movs	r3, #1
 81081e4:	e000      	b.n	81081e8 <HAL_TIM_PWM_Start+0x144>
 81081e6:	2300      	movs	r3, #0
 81081e8:	2b00      	cmp	r3, #0
 81081ea:	d007      	beq.n	81081fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 81081ec:	687b      	ldr	r3, [r7, #4]
 81081ee:	681b      	ldr	r3, [r3, #0]
 81081f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81081f2:	687b      	ldr	r3, [r7, #4]
 81081f4:	681b      	ldr	r3, [r3, #0]
 81081f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81081fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81081fc:	687b      	ldr	r3, [r7, #4]
 81081fe:	681b      	ldr	r3, [r3, #0]
 8108200:	4a25      	ldr	r2, [pc, #148]	; (8108298 <HAL_TIM_PWM_Start+0x1f4>)
 8108202:	4293      	cmp	r3, r2
 8108204:	d022      	beq.n	810824c <HAL_TIM_PWM_Start+0x1a8>
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	681b      	ldr	r3, [r3, #0]
 810820a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810820e:	d01d      	beq.n	810824c <HAL_TIM_PWM_Start+0x1a8>
 8108210:	687b      	ldr	r3, [r7, #4]
 8108212:	681b      	ldr	r3, [r3, #0]
 8108214:	4a25      	ldr	r2, [pc, #148]	; (81082ac <HAL_TIM_PWM_Start+0x208>)
 8108216:	4293      	cmp	r3, r2
 8108218:	d018      	beq.n	810824c <HAL_TIM_PWM_Start+0x1a8>
 810821a:	687b      	ldr	r3, [r7, #4]
 810821c:	681b      	ldr	r3, [r3, #0]
 810821e:	4a24      	ldr	r2, [pc, #144]	; (81082b0 <HAL_TIM_PWM_Start+0x20c>)
 8108220:	4293      	cmp	r3, r2
 8108222:	d013      	beq.n	810824c <HAL_TIM_PWM_Start+0x1a8>
 8108224:	687b      	ldr	r3, [r7, #4]
 8108226:	681b      	ldr	r3, [r3, #0]
 8108228:	4a22      	ldr	r2, [pc, #136]	; (81082b4 <HAL_TIM_PWM_Start+0x210>)
 810822a:	4293      	cmp	r3, r2
 810822c:	d00e      	beq.n	810824c <HAL_TIM_PWM_Start+0x1a8>
 810822e:	687b      	ldr	r3, [r7, #4]
 8108230:	681b      	ldr	r3, [r3, #0]
 8108232:	4a1a      	ldr	r2, [pc, #104]	; (810829c <HAL_TIM_PWM_Start+0x1f8>)
 8108234:	4293      	cmp	r3, r2
 8108236:	d009      	beq.n	810824c <HAL_TIM_PWM_Start+0x1a8>
 8108238:	687b      	ldr	r3, [r7, #4]
 810823a:	681b      	ldr	r3, [r3, #0]
 810823c:	4a1e      	ldr	r2, [pc, #120]	; (81082b8 <HAL_TIM_PWM_Start+0x214>)
 810823e:	4293      	cmp	r3, r2
 8108240:	d004      	beq.n	810824c <HAL_TIM_PWM_Start+0x1a8>
 8108242:	687b      	ldr	r3, [r7, #4]
 8108244:	681b      	ldr	r3, [r3, #0]
 8108246:	4a16      	ldr	r2, [pc, #88]	; (81082a0 <HAL_TIM_PWM_Start+0x1fc>)
 8108248:	4293      	cmp	r3, r2
 810824a:	d115      	bne.n	8108278 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810824c:	687b      	ldr	r3, [r7, #4]
 810824e:	681b      	ldr	r3, [r3, #0]
 8108250:	689a      	ldr	r2, [r3, #8]
 8108252:	4b1a      	ldr	r3, [pc, #104]	; (81082bc <HAL_TIM_PWM_Start+0x218>)
 8108254:	4013      	ands	r3, r2
 8108256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108258:	68fb      	ldr	r3, [r7, #12]
 810825a:	2b06      	cmp	r3, #6
 810825c:	d015      	beq.n	810828a <HAL_TIM_PWM_Start+0x1e6>
 810825e:	68fb      	ldr	r3, [r7, #12]
 8108260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108264:	d011      	beq.n	810828a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8108266:	687b      	ldr	r3, [r7, #4]
 8108268:	681b      	ldr	r3, [r3, #0]
 810826a:	681a      	ldr	r2, [r3, #0]
 810826c:	687b      	ldr	r3, [r7, #4]
 810826e:	681b      	ldr	r3, [r3, #0]
 8108270:	f042 0201 	orr.w	r2, r2, #1
 8108274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108276:	e008      	b.n	810828a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8108278:	687b      	ldr	r3, [r7, #4]
 810827a:	681b      	ldr	r3, [r3, #0]
 810827c:	681a      	ldr	r2, [r3, #0]
 810827e:	687b      	ldr	r3, [r7, #4]
 8108280:	681b      	ldr	r3, [r3, #0]
 8108282:	f042 0201 	orr.w	r2, r2, #1
 8108286:	601a      	str	r2, [r3, #0]
 8108288:	e000      	b.n	810828c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810828a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810828c:	2300      	movs	r3, #0
}
 810828e:	4618      	mov	r0, r3
 8108290:	3710      	adds	r7, #16
 8108292:	46bd      	mov	sp, r7
 8108294:	bd80      	pop	{r7, pc}
 8108296:	bf00      	nop
 8108298:	40010000 	.word	0x40010000
 810829c:	40010400 	.word	0x40010400
 81082a0:	40014000 	.word	0x40014000
 81082a4:	40014400 	.word	0x40014400
 81082a8:	40014800 	.word	0x40014800
 81082ac:	40000400 	.word	0x40000400
 81082b0:	40000800 	.word	0x40000800
 81082b4:	40000c00 	.word	0x40000c00
 81082b8:	40001800 	.word	0x40001800
 81082bc:	00010007 	.word	0x00010007

081082c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 81082c0:	b580      	push	{r7, lr}
 81082c2:	b086      	sub	sp, #24
 81082c4:	af00      	add	r7, sp, #0
 81082c6:	6078      	str	r0, [r7, #4]
 81082c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 81082ca:	687b      	ldr	r3, [r7, #4]
 81082cc:	2b00      	cmp	r3, #0
 81082ce:	d101      	bne.n	81082d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 81082d0:	2301      	movs	r3, #1
 81082d2:	e097      	b.n	8108404 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 81082d4:	687b      	ldr	r3, [r7, #4]
 81082d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81082da:	b2db      	uxtb	r3, r3
 81082dc:	2b00      	cmp	r3, #0
 81082de:	d106      	bne.n	81082ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81082e0:	687b      	ldr	r3, [r7, #4]
 81082e2:	2200      	movs	r2, #0
 81082e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 81082e8:	6878      	ldr	r0, [r7, #4]
 81082ea:	f7fa fbb9 	bl	8102a60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81082ee:	687b      	ldr	r3, [r7, #4]
 81082f0:	2202      	movs	r2, #2
 81082f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 81082f6:	687b      	ldr	r3, [r7, #4]
 81082f8:	681b      	ldr	r3, [r3, #0]
 81082fa:	689b      	ldr	r3, [r3, #8]
 81082fc:	687a      	ldr	r2, [r7, #4]
 81082fe:	6812      	ldr	r2, [r2, #0]
 8108300:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8108304:	f023 0307 	bic.w	r3, r3, #7
 8108308:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810830a:	687b      	ldr	r3, [r7, #4]
 810830c:	681a      	ldr	r2, [r3, #0]
 810830e:	687b      	ldr	r3, [r7, #4]
 8108310:	3304      	adds	r3, #4
 8108312:	4619      	mov	r1, r3
 8108314:	4610      	mov	r0, r2
 8108316:	f000 fb83 	bl	8108a20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810831a:	687b      	ldr	r3, [r7, #4]
 810831c:	681b      	ldr	r3, [r3, #0]
 810831e:	689b      	ldr	r3, [r3, #8]
 8108320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8108322:	687b      	ldr	r3, [r7, #4]
 8108324:	681b      	ldr	r3, [r3, #0]
 8108326:	699b      	ldr	r3, [r3, #24]
 8108328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 810832a:	687b      	ldr	r3, [r7, #4]
 810832c:	681b      	ldr	r3, [r3, #0]
 810832e:	6a1b      	ldr	r3, [r3, #32]
 8108330:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8108332:	683b      	ldr	r3, [r7, #0]
 8108334:	681b      	ldr	r3, [r3, #0]
 8108336:	697a      	ldr	r2, [r7, #20]
 8108338:	4313      	orrs	r3, r2
 810833a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 810833c:	693b      	ldr	r3, [r7, #16]
 810833e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108342:	f023 0303 	bic.w	r3, r3, #3
 8108346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8108348:	683b      	ldr	r3, [r7, #0]
 810834a:	689a      	ldr	r2, [r3, #8]
 810834c:	683b      	ldr	r3, [r7, #0]
 810834e:	699b      	ldr	r3, [r3, #24]
 8108350:	021b      	lsls	r3, r3, #8
 8108352:	4313      	orrs	r3, r2
 8108354:	693a      	ldr	r2, [r7, #16]
 8108356:	4313      	orrs	r3, r2
 8108358:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 810835a:	693b      	ldr	r3, [r7, #16]
 810835c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8108360:	f023 030c 	bic.w	r3, r3, #12
 8108364:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8108366:	693b      	ldr	r3, [r7, #16]
 8108368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810836c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8108370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8108372:	683b      	ldr	r3, [r7, #0]
 8108374:	68da      	ldr	r2, [r3, #12]
 8108376:	683b      	ldr	r3, [r7, #0]
 8108378:	69db      	ldr	r3, [r3, #28]
 810837a:	021b      	lsls	r3, r3, #8
 810837c:	4313      	orrs	r3, r2
 810837e:	693a      	ldr	r2, [r7, #16]
 8108380:	4313      	orrs	r3, r2
 8108382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8108384:	683b      	ldr	r3, [r7, #0]
 8108386:	691b      	ldr	r3, [r3, #16]
 8108388:	011a      	lsls	r2, r3, #4
 810838a:	683b      	ldr	r3, [r7, #0]
 810838c:	6a1b      	ldr	r3, [r3, #32]
 810838e:	031b      	lsls	r3, r3, #12
 8108390:	4313      	orrs	r3, r2
 8108392:	693a      	ldr	r2, [r7, #16]
 8108394:	4313      	orrs	r3, r2
 8108396:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8108398:	68fb      	ldr	r3, [r7, #12]
 810839a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 810839e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 81083a0:	68fb      	ldr	r3, [r7, #12]
 81083a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 81083a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 81083a8:	683b      	ldr	r3, [r7, #0]
 81083aa:	685a      	ldr	r2, [r3, #4]
 81083ac:	683b      	ldr	r3, [r7, #0]
 81083ae:	695b      	ldr	r3, [r3, #20]
 81083b0:	011b      	lsls	r3, r3, #4
 81083b2:	4313      	orrs	r3, r2
 81083b4:	68fa      	ldr	r2, [r7, #12]
 81083b6:	4313      	orrs	r3, r2
 81083b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 81083ba:	687b      	ldr	r3, [r7, #4]
 81083bc:	681b      	ldr	r3, [r3, #0]
 81083be:	697a      	ldr	r2, [r7, #20]
 81083c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 81083c2:	687b      	ldr	r3, [r7, #4]
 81083c4:	681b      	ldr	r3, [r3, #0]
 81083c6:	693a      	ldr	r2, [r7, #16]
 81083c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 81083ca:	687b      	ldr	r3, [r7, #4]
 81083cc:	681b      	ldr	r3, [r3, #0]
 81083ce:	68fa      	ldr	r2, [r7, #12]
 81083d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81083d2:	687b      	ldr	r3, [r7, #4]
 81083d4:	2201      	movs	r2, #1
 81083d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81083da:	687b      	ldr	r3, [r7, #4]
 81083dc:	2201      	movs	r2, #1
 81083de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81083e2:	687b      	ldr	r3, [r7, #4]
 81083e4:	2201      	movs	r2, #1
 81083e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81083ea:	687b      	ldr	r3, [r7, #4]
 81083ec:	2201      	movs	r2, #1
 81083ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81083f2:	687b      	ldr	r3, [r7, #4]
 81083f4:	2201      	movs	r2, #1
 81083f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81083fa:	687b      	ldr	r3, [r7, #4]
 81083fc:	2201      	movs	r2, #1
 81083fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8108402:	2300      	movs	r3, #0
}
 8108404:	4618      	mov	r0, r3
 8108406:	3718      	adds	r7, #24
 8108408:	46bd      	mov	sp, r7
 810840a:	bd80      	pop	{r7, pc}

0810840c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810840c:	b580      	push	{r7, lr}
 810840e:	b084      	sub	sp, #16
 8108410:	af00      	add	r7, sp, #0
 8108412:	6078      	str	r0, [r7, #4]
 8108414:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8108416:	687b      	ldr	r3, [r7, #4]
 8108418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810841c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 810841e:	687b      	ldr	r3, [r7, #4]
 8108420:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8108424:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8108426:	687b      	ldr	r3, [r7, #4]
 8108428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810842c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 810842e:	687b      	ldr	r3, [r7, #4]
 8108430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8108434:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8108436:	683b      	ldr	r3, [r7, #0]
 8108438:	2b00      	cmp	r3, #0
 810843a:	d110      	bne.n	810845e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 810843c:	7bfb      	ldrb	r3, [r7, #15]
 810843e:	2b01      	cmp	r3, #1
 8108440:	d102      	bne.n	8108448 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8108442:	7b7b      	ldrb	r3, [r7, #13]
 8108444:	2b01      	cmp	r3, #1
 8108446:	d001      	beq.n	810844c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8108448:	2301      	movs	r3, #1
 810844a:	e089      	b.n	8108560 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 810844c:	687b      	ldr	r3, [r7, #4]
 810844e:	2202      	movs	r2, #2
 8108450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8108454:	687b      	ldr	r3, [r7, #4]
 8108456:	2202      	movs	r2, #2
 8108458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810845c:	e031      	b.n	81084c2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 810845e:	683b      	ldr	r3, [r7, #0]
 8108460:	2b04      	cmp	r3, #4
 8108462:	d110      	bne.n	8108486 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8108464:	7bbb      	ldrb	r3, [r7, #14]
 8108466:	2b01      	cmp	r3, #1
 8108468:	d102      	bne.n	8108470 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 810846a:	7b3b      	ldrb	r3, [r7, #12]
 810846c:	2b01      	cmp	r3, #1
 810846e:	d001      	beq.n	8108474 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8108470:	2301      	movs	r3, #1
 8108472:	e075      	b.n	8108560 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	2202      	movs	r2, #2
 8108478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 810847c:	687b      	ldr	r3, [r7, #4]
 810847e:	2202      	movs	r2, #2
 8108480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8108484:	e01d      	b.n	81084c2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8108486:	7bfb      	ldrb	r3, [r7, #15]
 8108488:	2b01      	cmp	r3, #1
 810848a:	d108      	bne.n	810849e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 810848c:	7bbb      	ldrb	r3, [r7, #14]
 810848e:	2b01      	cmp	r3, #1
 8108490:	d105      	bne.n	810849e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8108492:	7b7b      	ldrb	r3, [r7, #13]
 8108494:	2b01      	cmp	r3, #1
 8108496:	d102      	bne.n	810849e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8108498:	7b3b      	ldrb	r3, [r7, #12]
 810849a:	2b01      	cmp	r3, #1
 810849c:	d001      	beq.n	81084a2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 810849e:	2301      	movs	r3, #1
 81084a0:	e05e      	b.n	8108560 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81084a2:	687b      	ldr	r3, [r7, #4]
 81084a4:	2202      	movs	r2, #2
 81084a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81084aa:	687b      	ldr	r3, [r7, #4]
 81084ac:	2202      	movs	r2, #2
 81084ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81084b2:	687b      	ldr	r3, [r7, #4]
 81084b4:	2202      	movs	r2, #2
 81084b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81084ba:	687b      	ldr	r3, [r7, #4]
 81084bc:	2202      	movs	r2, #2
 81084be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 81084c2:	683b      	ldr	r3, [r7, #0]
 81084c4:	2b00      	cmp	r3, #0
 81084c6:	d003      	beq.n	81084d0 <HAL_TIM_Encoder_Start_IT+0xc4>
 81084c8:	683b      	ldr	r3, [r7, #0]
 81084ca:	2b04      	cmp	r3, #4
 81084cc:	d010      	beq.n	81084f0 <HAL_TIM_Encoder_Start_IT+0xe4>
 81084ce:	e01f      	b.n	8108510 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 81084d0:	687b      	ldr	r3, [r7, #4]
 81084d2:	681b      	ldr	r3, [r3, #0]
 81084d4:	2201      	movs	r2, #1
 81084d6:	2100      	movs	r1, #0
 81084d8:	4618      	mov	r0, r3
 81084da:	f000 fe11 	bl	8109100 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 81084de:	687b      	ldr	r3, [r7, #4]
 81084e0:	681b      	ldr	r3, [r3, #0]
 81084e2:	68da      	ldr	r2, [r3, #12]
 81084e4:	687b      	ldr	r3, [r7, #4]
 81084e6:	681b      	ldr	r3, [r3, #0]
 81084e8:	f042 0202 	orr.w	r2, r2, #2
 81084ec:	60da      	str	r2, [r3, #12]
      break;
 81084ee:	e02e      	b.n	810854e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 81084f0:	687b      	ldr	r3, [r7, #4]
 81084f2:	681b      	ldr	r3, [r3, #0]
 81084f4:	2201      	movs	r2, #1
 81084f6:	2104      	movs	r1, #4
 81084f8:	4618      	mov	r0, r3
 81084fa:	f000 fe01 	bl	8109100 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 81084fe:	687b      	ldr	r3, [r7, #4]
 8108500:	681b      	ldr	r3, [r3, #0]
 8108502:	68da      	ldr	r2, [r3, #12]
 8108504:	687b      	ldr	r3, [r7, #4]
 8108506:	681b      	ldr	r3, [r3, #0]
 8108508:	f042 0204 	orr.w	r2, r2, #4
 810850c:	60da      	str	r2, [r3, #12]
      break;
 810850e:	e01e      	b.n	810854e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8108510:	687b      	ldr	r3, [r7, #4]
 8108512:	681b      	ldr	r3, [r3, #0]
 8108514:	2201      	movs	r2, #1
 8108516:	2100      	movs	r1, #0
 8108518:	4618      	mov	r0, r3
 810851a:	f000 fdf1 	bl	8109100 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 810851e:	687b      	ldr	r3, [r7, #4]
 8108520:	681b      	ldr	r3, [r3, #0]
 8108522:	2201      	movs	r2, #1
 8108524:	2104      	movs	r1, #4
 8108526:	4618      	mov	r0, r3
 8108528:	f000 fdea 	bl	8109100 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 810852c:	687b      	ldr	r3, [r7, #4]
 810852e:	681b      	ldr	r3, [r3, #0]
 8108530:	68da      	ldr	r2, [r3, #12]
 8108532:	687b      	ldr	r3, [r7, #4]
 8108534:	681b      	ldr	r3, [r3, #0]
 8108536:	f042 0202 	orr.w	r2, r2, #2
 810853a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 810853c:	687b      	ldr	r3, [r7, #4]
 810853e:	681b      	ldr	r3, [r3, #0]
 8108540:	68da      	ldr	r2, [r3, #12]
 8108542:	687b      	ldr	r3, [r7, #4]
 8108544:	681b      	ldr	r3, [r3, #0]
 8108546:	f042 0204 	orr.w	r2, r2, #4
 810854a:	60da      	str	r2, [r3, #12]
      break;
 810854c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 810854e:	687b      	ldr	r3, [r7, #4]
 8108550:	681b      	ldr	r3, [r3, #0]
 8108552:	681a      	ldr	r2, [r3, #0]
 8108554:	687b      	ldr	r3, [r7, #4]
 8108556:	681b      	ldr	r3, [r3, #0]
 8108558:	f042 0201 	orr.w	r2, r2, #1
 810855c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 810855e:	2300      	movs	r3, #0
}
 8108560:	4618      	mov	r0, r3
 8108562:	3710      	adds	r7, #16
 8108564:	46bd      	mov	sp, r7
 8108566:	bd80      	pop	{r7, pc}

08108568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8108568:	b580      	push	{r7, lr}
 810856a:	b082      	sub	sp, #8
 810856c:	af00      	add	r7, sp, #0
 810856e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8108570:	687b      	ldr	r3, [r7, #4]
 8108572:	681b      	ldr	r3, [r3, #0]
 8108574:	691b      	ldr	r3, [r3, #16]
 8108576:	f003 0302 	and.w	r3, r3, #2
 810857a:	2b02      	cmp	r3, #2
 810857c:	d122      	bne.n	81085c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810857e:	687b      	ldr	r3, [r7, #4]
 8108580:	681b      	ldr	r3, [r3, #0]
 8108582:	68db      	ldr	r3, [r3, #12]
 8108584:	f003 0302 	and.w	r3, r3, #2
 8108588:	2b02      	cmp	r3, #2
 810858a:	d11b      	bne.n	81085c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 810858c:	687b      	ldr	r3, [r7, #4]
 810858e:	681b      	ldr	r3, [r3, #0]
 8108590:	f06f 0202 	mvn.w	r2, #2
 8108594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8108596:	687b      	ldr	r3, [r7, #4]
 8108598:	2201      	movs	r2, #1
 810859a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810859c:	687b      	ldr	r3, [r7, #4]
 810859e:	681b      	ldr	r3, [r3, #0]
 81085a0:	699b      	ldr	r3, [r3, #24]
 81085a2:	f003 0303 	and.w	r3, r3, #3
 81085a6:	2b00      	cmp	r3, #0
 81085a8:	d003      	beq.n	81085b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81085aa:	6878      	ldr	r0, [r7, #4]
 81085ac:	f000 fa1a 	bl	81089e4 <HAL_TIM_IC_CaptureCallback>
 81085b0:	e005      	b.n	81085be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81085b2:	6878      	ldr	r0, [r7, #4]
 81085b4:	f000 fa0c 	bl	81089d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81085b8:	6878      	ldr	r0, [r7, #4]
 81085ba:	f000 fa1d 	bl	81089f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81085be:	687b      	ldr	r3, [r7, #4]
 81085c0:	2200      	movs	r2, #0
 81085c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81085c4:	687b      	ldr	r3, [r7, #4]
 81085c6:	681b      	ldr	r3, [r3, #0]
 81085c8:	691b      	ldr	r3, [r3, #16]
 81085ca:	f003 0304 	and.w	r3, r3, #4
 81085ce:	2b04      	cmp	r3, #4
 81085d0:	d122      	bne.n	8108618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81085d2:	687b      	ldr	r3, [r7, #4]
 81085d4:	681b      	ldr	r3, [r3, #0]
 81085d6:	68db      	ldr	r3, [r3, #12]
 81085d8:	f003 0304 	and.w	r3, r3, #4
 81085dc:	2b04      	cmp	r3, #4
 81085de:	d11b      	bne.n	8108618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81085e0:	687b      	ldr	r3, [r7, #4]
 81085e2:	681b      	ldr	r3, [r3, #0]
 81085e4:	f06f 0204 	mvn.w	r2, #4
 81085e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81085ea:	687b      	ldr	r3, [r7, #4]
 81085ec:	2202      	movs	r2, #2
 81085ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81085f0:	687b      	ldr	r3, [r7, #4]
 81085f2:	681b      	ldr	r3, [r3, #0]
 81085f4:	699b      	ldr	r3, [r3, #24]
 81085f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81085fa:	2b00      	cmp	r3, #0
 81085fc:	d003      	beq.n	8108606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81085fe:	6878      	ldr	r0, [r7, #4]
 8108600:	f000 f9f0 	bl	81089e4 <HAL_TIM_IC_CaptureCallback>
 8108604:	e005      	b.n	8108612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108606:	6878      	ldr	r0, [r7, #4]
 8108608:	f000 f9e2 	bl	81089d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810860c:	6878      	ldr	r0, [r7, #4]
 810860e:	f000 f9f3 	bl	81089f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108612:	687b      	ldr	r3, [r7, #4]
 8108614:	2200      	movs	r2, #0
 8108616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8108618:	687b      	ldr	r3, [r7, #4]
 810861a:	681b      	ldr	r3, [r3, #0]
 810861c:	691b      	ldr	r3, [r3, #16]
 810861e:	f003 0308 	and.w	r3, r3, #8
 8108622:	2b08      	cmp	r3, #8
 8108624:	d122      	bne.n	810866c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8108626:	687b      	ldr	r3, [r7, #4]
 8108628:	681b      	ldr	r3, [r3, #0]
 810862a:	68db      	ldr	r3, [r3, #12]
 810862c:	f003 0308 	and.w	r3, r3, #8
 8108630:	2b08      	cmp	r3, #8
 8108632:	d11b      	bne.n	810866c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8108634:	687b      	ldr	r3, [r7, #4]
 8108636:	681b      	ldr	r3, [r3, #0]
 8108638:	f06f 0208 	mvn.w	r2, #8
 810863c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810863e:	687b      	ldr	r3, [r7, #4]
 8108640:	2204      	movs	r2, #4
 8108642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8108644:	687b      	ldr	r3, [r7, #4]
 8108646:	681b      	ldr	r3, [r3, #0]
 8108648:	69db      	ldr	r3, [r3, #28]
 810864a:	f003 0303 	and.w	r3, r3, #3
 810864e:	2b00      	cmp	r3, #0
 8108650:	d003      	beq.n	810865a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108652:	6878      	ldr	r0, [r7, #4]
 8108654:	f000 f9c6 	bl	81089e4 <HAL_TIM_IC_CaptureCallback>
 8108658:	e005      	b.n	8108666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810865a:	6878      	ldr	r0, [r7, #4]
 810865c:	f000 f9b8 	bl	81089d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108660:	6878      	ldr	r0, [r7, #4]
 8108662:	f000 f9c9 	bl	81089f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108666:	687b      	ldr	r3, [r7, #4]
 8108668:	2200      	movs	r2, #0
 810866a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 810866c:	687b      	ldr	r3, [r7, #4]
 810866e:	681b      	ldr	r3, [r3, #0]
 8108670:	691b      	ldr	r3, [r3, #16]
 8108672:	f003 0310 	and.w	r3, r3, #16
 8108676:	2b10      	cmp	r3, #16
 8108678:	d122      	bne.n	81086c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810867a:	687b      	ldr	r3, [r7, #4]
 810867c:	681b      	ldr	r3, [r3, #0]
 810867e:	68db      	ldr	r3, [r3, #12]
 8108680:	f003 0310 	and.w	r3, r3, #16
 8108684:	2b10      	cmp	r3, #16
 8108686:	d11b      	bne.n	81086c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8108688:	687b      	ldr	r3, [r7, #4]
 810868a:	681b      	ldr	r3, [r3, #0]
 810868c:	f06f 0210 	mvn.w	r2, #16
 8108690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8108692:	687b      	ldr	r3, [r7, #4]
 8108694:	2208      	movs	r2, #8
 8108696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8108698:	687b      	ldr	r3, [r7, #4]
 810869a:	681b      	ldr	r3, [r3, #0]
 810869c:	69db      	ldr	r3, [r3, #28]
 810869e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81086a2:	2b00      	cmp	r3, #0
 81086a4:	d003      	beq.n	81086ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81086a6:	6878      	ldr	r0, [r7, #4]
 81086a8:	f000 f99c 	bl	81089e4 <HAL_TIM_IC_CaptureCallback>
 81086ac:	e005      	b.n	81086ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81086ae:	6878      	ldr	r0, [r7, #4]
 81086b0:	f000 f98e 	bl	81089d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81086b4:	6878      	ldr	r0, [r7, #4]
 81086b6:	f000 f99f 	bl	81089f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81086ba:	687b      	ldr	r3, [r7, #4]
 81086bc:	2200      	movs	r2, #0
 81086be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81086c0:	687b      	ldr	r3, [r7, #4]
 81086c2:	681b      	ldr	r3, [r3, #0]
 81086c4:	691b      	ldr	r3, [r3, #16]
 81086c6:	f003 0301 	and.w	r3, r3, #1
 81086ca:	2b01      	cmp	r3, #1
 81086cc:	d10e      	bne.n	81086ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81086ce:	687b      	ldr	r3, [r7, #4]
 81086d0:	681b      	ldr	r3, [r3, #0]
 81086d2:	68db      	ldr	r3, [r3, #12]
 81086d4:	f003 0301 	and.w	r3, r3, #1
 81086d8:	2b01      	cmp	r3, #1
 81086da:	d107      	bne.n	81086ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81086dc:	687b      	ldr	r3, [r7, #4]
 81086de:	681b      	ldr	r3, [r3, #0]
 81086e0:	f06f 0201 	mvn.w	r2, #1
 81086e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81086e6:	6878      	ldr	r0, [r7, #4]
 81086e8:	f7fa fb40 	bl	8102d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81086ec:	687b      	ldr	r3, [r7, #4]
 81086ee:	681b      	ldr	r3, [r3, #0]
 81086f0:	691b      	ldr	r3, [r3, #16]
 81086f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81086f6:	2b80      	cmp	r3, #128	; 0x80
 81086f8:	d10e      	bne.n	8108718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81086fa:	687b      	ldr	r3, [r7, #4]
 81086fc:	681b      	ldr	r3, [r3, #0]
 81086fe:	68db      	ldr	r3, [r3, #12]
 8108700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108704:	2b80      	cmp	r3, #128	; 0x80
 8108706:	d107      	bne.n	8108718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8108708:	687b      	ldr	r3, [r7, #4]
 810870a:	681b      	ldr	r3, [r3, #0]
 810870c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8108710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8108712:	6878      	ldr	r0, [r7, #4]
 8108714:	f000 fdb2 	bl	810927c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8108718:	687b      	ldr	r3, [r7, #4]
 810871a:	681b      	ldr	r3, [r3, #0]
 810871c:	691b      	ldr	r3, [r3, #16]
 810871e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108726:	d10e      	bne.n	8108746 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8108728:	687b      	ldr	r3, [r7, #4]
 810872a:	681b      	ldr	r3, [r3, #0]
 810872c:	68db      	ldr	r3, [r3, #12]
 810872e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108732:	2b80      	cmp	r3, #128	; 0x80
 8108734:	d107      	bne.n	8108746 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8108736:	687b      	ldr	r3, [r7, #4]
 8108738:	681b      	ldr	r3, [r3, #0]
 810873a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810873e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8108740:	6878      	ldr	r0, [r7, #4]
 8108742:	f000 fda5 	bl	8109290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8108746:	687b      	ldr	r3, [r7, #4]
 8108748:	681b      	ldr	r3, [r3, #0]
 810874a:	691b      	ldr	r3, [r3, #16]
 810874c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108750:	2b40      	cmp	r3, #64	; 0x40
 8108752:	d10e      	bne.n	8108772 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8108754:	687b      	ldr	r3, [r7, #4]
 8108756:	681b      	ldr	r3, [r3, #0]
 8108758:	68db      	ldr	r3, [r3, #12]
 810875a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810875e:	2b40      	cmp	r3, #64	; 0x40
 8108760:	d107      	bne.n	8108772 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8108762:	687b      	ldr	r3, [r7, #4]
 8108764:	681b      	ldr	r3, [r3, #0]
 8108766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810876a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810876c:	6878      	ldr	r0, [r7, #4]
 810876e:	f000 f94d 	bl	8108a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8108772:	687b      	ldr	r3, [r7, #4]
 8108774:	681b      	ldr	r3, [r3, #0]
 8108776:	691b      	ldr	r3, [r3, #16]
 8108778:	f003 0320 	and.w	r3, r3, #32
 810877c:	2b20      	cmp	r3, #32
 810877e:	d10e      	bne.n	810879e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8108780:	687b      	ldr	r3, [r7, #4]
 8108782:	681b      	ldr	r3, [r3, #0]
 8108784:	68db      	ldr	r3, [r3, #12]
 8108786:	f003 0320 	and.w	r3, r3, #32
 810878a:	2b20      	cmp	r3, #32
 810878c:	d107      	bne.n	810879e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810878e:	687b      	ldr	r3, [r7, #4]
 8108790:	681b      	ldr	r3, [r3, #0]
 8108792:	f06f 0220 	mvn.w	r2, #32
 8108796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8108798:	6878      	ldr	r0, [r7, #4]
 810879a:	f000 fd65 	bl	8109268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810879e:	bf00      	nop
 81087a0:	3708      	adds	r7, #8
 81087a2:	46bd      	mov	sp, r7
 81087a4:	bd80      	pop	{r7, pc}
	...

081087a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81087a8:	b580      	push	{r7, lr}
 81087aa:	b086      	sub	sp, #24
 81087ac:	af00      	add	r7, sp, #0
 81087ae:	60f8      	str	r0, [r7, #12]
 81087b0:	60b9      	str	r1, [r7, #8]
 81087b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81087b4:	2300      	movs	r3, #0
 81087b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81087b8:	68fb      	ldr	r3, [r7, #12]
 81087ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81087be:	2b01      	cmp	r3, #1
 81087c0:	d101      	bne.n	81087c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 81087c2:	2302      	movs	r3, #2
 81087c4:	e0ff      	b.n	81089c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 81087c6:	68fb      	ldr	r3, [r7, #12]
 81087c8:	2201      	movs	r2, #1
 81087ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 81087ce:	687b      	ldr	r3, [r7, #4]
 81087d0:	2b14      	cmp	r3, #20
 81087d2:	f200 80f0 	bhi.w	81089b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 81087d6:	a201      	add	r2, pc, #4	; (adr r2, 81087dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 81087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81087dc:	08108831 	.word	0x08108831
 81087e0:	081089b7 	.word	0x081089b7
 81087e4:	081089b7 	.word	0x081089b7
 81087e8:	081089b7 	.word	0x081089b7
 81087ec:	08108871 	.word	0x08108871
 81087f0:	081089b7 	.word	0x081089b7
 81087f4:	081089b7 	.word	0x081089b7
 81087f8:	081089b7 	.word	0x081089b7
 81087fc:	081088b3 	.word	0x081088b3
 8108800:	081089b7 	.word	0x081089b7
 8108804:	081089b7 	.word	0x081089b7
 8108808:	081089b7 	.word	0x081089b7
 810880c:	081088f3 	.word	0x081088f3
 8108810:	081089b7 	.word	0x081089b7
 8108814:	081089b7 	.word	0x081089b7
 8108818:	081089b7 	.word	0x081089b7
 810881c:	08108935 	.word	0x08108935
 8108820:	081089b7 	.word	0x081089b7
 8108824:	081089b7 	.word	0x081089b7
 8108828:	081089b7 	.word	0x081089b7
 810882c:	08108975 	.word	0x08108975
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8108830:	68fb      	ldr	r3, [r7, #12]
 8108832:	681b      	ldr	r3, [r3, #0]
 8108834:	68b9      	ldr	r1, [r7, #8]
 8108836:	4618      	mov	r0, r3
 8108838:	f000 f98c 	bl	8108b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810883c:	68fb      	ldr	r3, [r7, #12]
 810883e:	681b      	ldr	r3, [r3, #0]
 8108840:	699a      	ldr	r2, [r3, #24]
 8108842:	68fb      	ldr	r3, [r7, #12]
 8108844:	681b      	ldr	r3, [r3, #0]
 8108846:	f042 0208 	orr.w	r2, r2, #8
 810884a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810884c:	68fb      	ldr	r3, [r7, #12]
 810884e:	681b      	ldr	r3, [r3, #0]
 8108850:	699a      	ldr	r2, [r3, #24]
 8108852:	68fb      	ldr	r3, [r7, #12]
 8108854:	681b      	ldr	r3, [r3, #0]
 8108856:	f022 0204 	bic.w	r2, r2, #4
 810885a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810885c:	68fb      	ldr	r3, [r7, #12]
 810885e:	681b      	ldr	r3, [r3, #0]
 8108860:	6999      	ldr	r1, [r3, #24]
 8108862:	68bb      	ldr	r3, [r7, #8]
 8108864:	691a      	ldr	r2, [r3, #16]
 8108866:	68fb      	ldr	r3, [r7, #12]
 8108868:	681b      	ldr	r3, [r3, #0]
 810886a:	430a      	orrs	r2, r1
 810886c:	619a      	str	r2, [r3, #24]
      break;
 810886e:	e0a5      	b.n	81089bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8108870:	68fb      	ldr	r3, [r7, #12]
 8108872:	681b      	ldr	r3, [r3, #0]
 8108874:	68b9      	ldr	r1, [r7, #8]
 8108876:	4618      	mov	r0, r3
 8108878:	f000 f9fc 	bl	8108c74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810887c:	68fb      	ldr	r3, [r7, #12]
 810887e:	681b      	ldr	r3, [r3, #0]
 8108880:	699a      	ldr	r2, [r3, #24]
 8108882:	68fb      	ldr	r3, [r7, #12]
 8108884:	681b      	ldr	r3, [r3, #0]
 8108886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810888a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810888c:	68fb      	ldr	r3, [r7, #12]
 810888e:	681b      	ldr	r3, [r3, #0]
 8108890:	699a      	ldr	r2, [r3, #24]
 8108892:	68fb      	ldr	r3, [r7, #12]
 8108894:	681b      	ldr	r3, [r3, #0]
 8108896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810889a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810889c:	68fb      	ldr	r3, [r7, #12]
 810889e:	681b      	ldr	r3, [r3, #0]
 81088a0:	6999      	ldr	r1, [r3, #24]
 81088a2:	68bb      	ldr	r3, [r7, #8]
 81088a4:	691b      	ldr	r3, [r3, #16]
 81088a6:	021a      	lsls	r2, r3, #8
 81088a8:	68fb      	ldr	r3, [r7, #12]
 81088aa:	681b      	ldr	r3, [r3, #0]
 81088ac:	430a      	orrs	r2, r1
 81088ae:	619a      	str	r2, [r3, #24]
      break;
 81088b0:	e084      	b.n	81089bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81088b2:	68fb      	ldr	r3, [r7, #12]
 81088b4:	681b      	ldr	r3, [r3, #0]
 81088b6:	68b9      	ldr	r1, [r7, #8]
 81088b8:	4618      	mov	r0, r3
 81088ba:	f000 fa65 	bl	8108d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81088be:	68fb      	ldr	r3, [r7, #12]
 81088c0:	681b      	ldr	r3, [r3, #0]
 81088c2:	69da      	ldr	r2, [r3, #28]
 81088c4:	68fb      	ldr	r3, [r7, #12]
 81088c6:	681b      	ldr	r3, [r3, #0]
 81088c8:	f042 0208 	orr.w	r2, r2, #8
 81088cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81088ce:	68fb      	ldr	r3, [r7, #12]
 81088d0:	681b      	ldr	r3, [r3, #0]
 81088d2:	69da      	ldr	r2, [r3, #28]
 81088d4:	68fb      	ldr	r3, [r7, #12]
 81088d6:	681b      	ldr	r3, [r3, #0]
 81088d8:	f022 0204 	bic.w	r2, r2, #4
 81088dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81088de:	68fb      	ldr	r3, [r7, #12]
 81088e0:	681b      	ldr	r3, [r3, #0]
 81088e2:	69d9      	ldr	r1, [r3, #28]
 81088e4:	68bb      	ldr	r3, [r7, #8]
 81088e6:	691a      	ldr	r2, [r3, #16]
 81088e8:	68fb      	ldr	r3, [r7, #12]
 81088ea:	681b      	ldr	r3, [r3, #0]
 81088ec:	430a      	orrs	r2, r1
 81088ee:	61da      	str	r2, [r3, #28]
      break;
 81088f0:	e064      	b.n	81089bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81088f2:	68fb      	ldr	r3, [r7, #12]
 81088f4:	681b      	ldr	r3, [r3, #0]
 81088f6:	68b9      	ldr	r1, [r7, #8]
 81088f8:	4618      	mov	r0, r3
 81088fa:	f000 facd 	bl	8108e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81088fe:	68fb      	ldr	r3, [r7, #12]
 8108900:	681b      	ldr	r3, [r3, #0]
 8108902:	69da      	ldr	r2, [r3, #28]
 8108904:	68fb      	ldr	r3, [r7, #12]
 8108906:	681b      	ldr	r3, [r3, #0]
 8108908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810890c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810890e:	68fb      	ldr	r3, [r7, #12]
 8108910:	681b      	ldr	r3, [r3, #0]
 8108912:	69da      	ldr	r2, [r3, #28]
 8108914:	68fb      	ldr	r3, [r7, #12]
 8108916:	681b      	ldr	r3, [r3, #0]
 8108918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810891c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810891e:	68fb      	ldr	r3, [r7, #12]
 8108920:	681b      	ldr	r3, [r3, #0]
 8108922:	69d9      	ldr	r1, [r3, #28]
 8108924:	68bb      	ldr	r3, [r7, #8]
 8108926:	691b      	ldr	r3, [r3, #16]
 8108928:	021a      	lsls	r2, r3, #8
 810892a:	68fb      	ldr	r3, [r7, #12]
 810892c:	681b      	ldr	r3, [r3, #0]
 810892e:	430a      	orrs	r2, r1
 8108930:	61da      	str	r2, [r3, #28]
      break;
 8108932:	e043      	b.n	81089bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8108934:	68fb      	ldr	r3, [r7, #12]
 8108936:	681b      	ldr	r3, [r3, #0]
 8108938:	68b9      	ldr	r1, [r7, #8]
 810893a:	4618      	mov	r0, r3
 810893c:	f000 fb16 	bl	8108f6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8108940:	68fb      	ldr	r3, [r7, #12]
 8108942:	681b      	ldr	r3, [r3, #0]
 8108944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108946:	68fb      	ldr	r3, [r7, #12]
 8108948:	681b      	ldr	r3, [r3, #0]
 810894a:	f042 0208 	orr.w	r2, r2, #8
 810894e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8108950:	68fb      	ldr	r3, [r7, #12]
 8108952:	681b      	ldr	r3, [r3, #0]
 8108954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108956:	68fb      	ldr	r3, [r7, #12]
 8108958:	681b      	ldr	r3, [r3, #0]
 810895a:	f022 0204 	bic.w	r2, r2, #4
 810895e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8108960:	68fb      	ldr	r3, [r7, #12]
 8108962:	681b      	ldr	r3, [r3, #0]
 8108964:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8108966:	68bb      	ldr	r3, [r7, #8]
 8108968:	691a      	ldr	r2, [r3, #16]
 810896a:	68fb      	ldr	r3, [r7, #12]
 810896c:	681b      	ldr	r3, [r3, #0]
 810896e:	430a      	orrs	r2, r1
 8108970:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8108972:	e023      	b.n	81089bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8108974:	68fb      	ldr	r3, [r7, #12]
 8108976:	681b      	ldr	r3, [r3, #0]
 8108978:	68b9      	ldr	r1, [r7, #8]
 810897a:	4618      	mov	r0, r3
 810897c:	f000 fb5a 	bl	8109034 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8108980:	68fb      	ldr	r3, [r7, #12]
 8108982:	681b      	ldr	r3, [r3, #0]
 8108984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108986:	68fb      	ldr	r3, [r7, #12]
 8108988:	681b      	ldr	r3, [r3, #0]
 810898a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810898e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8108990:	68fb      	ldr	r3, [r7, #12]
 8108992:	681b      	ldr	r3, [r3, #0]
 8108994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108996:	68fb      	ldr	r3, [r7, #12]
 8108998:	681b      	ldr	r3, [r3, #0]
 810899a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810899e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81089a0:	68fb      	ldr	r3, [r7, #12]
 81089a2:	681b      	ldr	r3, [r3, #0]
 81089a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81089a6:	68bb      	ldr	r3, [r7, #8]
 81089a8:	691b      	ldr	r3, [r3, #16]
 81089aa:	021a      	lsls	r2, r3, #8
 81089ac:	68fb      	ldr	r3, [r7, #12]
 81089ae:	681b      	ldr	r3, [r3, #0]
 81089b0:	430a      	orrs	r2, r1
 81089b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81089b4:	e002      	b.n	81089bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81089b6:	2301      	movs	r3, #1
 81089b8:	75fb      	strb	r3, [r7, #23]
      break;
 81089ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81089bc:	68fb      	ldr	r3, [r7, #12]
 81089be:	2200      	movs	r2, #0
 81089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81089c4:	7dfb      	ldrb	r3, [r7, #23]
}
 81089c6:	4618      	mov	r0, r3
 81089c8:	3718      	adds	r7, #24
 81089ca:	46bd      	mov	sp, r7
 81089cc:	bd80      	pop	{r7, pc}
 81089ce:	bf00      	nop

081089d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81089d0:	b480      	push	{r7}
 81089d2:	b083      	sub	sp, #12
 81089d4:	af00      	add	r7, sp, #0
 81089d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81089d8:	bf00      	nop
 81089da:	370c      	adds	r7, #12
 81089dc:	46bd      	mov	sp, r7
 81089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089e2:	4770      	bx	lr

081089e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81089e4:	b480      	push	{r7}
 81089e6:	b083      	sub	sp, #12
 81089e8:	af00      	add	r7, sp, #0
 81089ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81089ec:	bf00      	nop
 81089ee:	370c      	adds	r7, #12
 81089f0:	46bd      	mov	sp, r7
 81089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089f6:	4770      	bx	lr

081089f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81089f8:	b480      	push	{r7}
 81089fa:	b083      	sub	sp, #12
 81089fc:	af00      	add	r7, sp, #0
 81089fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8108a00:	bf00      	nop
 8108a02:	370c      	adds	r7, #12
 8108a04:	46bd      	mov	sp, r7
 8108a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a0a:	4770      	bx	lr

08108a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8108a0c:	b480      	push	{r7}
 8108a0e:	b083      	sub	sp, #12
 8108a10:	af00      	add	r7, sp, #0
 8108a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8108a14:	bf00      	nop
 8108a16:	370c      	adds	r7, #12
 8108a18:	46bd      	mov	sp, r7
 8108a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a1e:	4770      	bx	lr

08108a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8108a20:	b480      	push	{r7}
 8108a22:	b085      	sub	sp, #20
 8108a24:	af00      	add	r7, sp, #0
 8108a26:	6078      	str	r0, [r7, #4]
 8108a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8108a2a:	687b      	ldr	r3, [r7, #4]
 8108a2c:	681b      	ldr	r3, [r3, #0]
 8108a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	4a40      	ldr	r2, [pc, #256]	; (8108b34 <TIM_Base_SetConfig+0x114>)
 8108a34:	4293      	cmp	r3, r2
 8108a36:	d013      	beq.n	8108a60 <TIM_Base_SetConfig+0x40>
 8108a38:	687b      	ldr	r3, [r7, #4]
 8108a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108a3e:	d00f      	beq.n	8108a60 <TIM_Base_SetConfig+0x40>
 8108a40:	687b      	ldr	r3, [r7, #4]
 8108a42:	4a3d      	ldr	r2, [pc, #244]	; (8108b38 <TIM_Base_SetConfig+0x118>)
 8108a44:	4293      	cmp	r3, r2
 8108a46:	d00b      	beq.n	8108a60 <TIM_Base_SetConfig+0x40>
 8108a48:	687b      	ldr	r3, [r7, #4]
 8108a4a:	4a3c      	ldr	r2, [pc, #240]	; (8108b3c <TIM_Base_SetConfig+0x11c>)
 8108a4c:	4293      	cmp	r3, r2
 8108a4e:	d007      	beq.n	8108a60 <TIM_Base_SetConfig+0x40>
 8108a50:	687b      	ldr	r3, [r7, #4]
 8108a52:	4a3b      	ldr	r2, [pc, #236]	; (8108b40 <TIM_Base_SetConfig+0x120>)
 8108a54:	4293      	cmp	r3, r2
 8108a56:	d003      	beq.n	8108a60 <TIM_Base_SetConfig+0x40>
 8108a58:	687b      	ldr	r3, [r7, #4]
 8108a5a:	4a3a      	ldr	r2, [pc, #232]	; (8108b44 <TIM_Base_SetConfig+0x124>)
 8108a5c:	4293      	cmp	r3, r2
 8108a5e:	d108      	bne.n	8108a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8108a60:	68fb      	ldr	r3, [r7, #12]
 8108a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8108a68:	683b      	ldr	r3, [r7, #0]
 8108a6a:	685b      	ldr	r3, [r3, #4]
 8108a6c:	68fa      	ldr	r2, [r7, #12]
 8108a6e:	4313      	orrs	r3, r2
 8108a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8108a72:	687b      	ldr	r3, [r7, #4]
 8108a74:	4a2f      	ldr	r2, [pc, #188]	; (8108b34 <TIM_Base_SetConfig+0x114>)
 8108a76:	4293      	cmp	r3, r2
 8108a78:	d01f      	beq.n	8108aba <TIM_Base_SetConfig+0x9a>
 8108a7a:	687b      	ldr	r3, [r7, #4]
 8108a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108a80:	d01b      	beq.n	8108aba <TIM_Base_SetConfig+0x9a>
 8108a82:	687b      	ldr	r3, [r7, #4]
 8108a84:	4a2c      	ldr	r2, [pc, #176]	; (8108b38 <TIM_Base_SetConfig+0x118>)
 8108a86:	4293      	cmp	r3, r2
 8108a88:	d017      	beq.n	8108aba <TIM_Base_SetConfig+0x9a>
 8108a8a:	687b      	ldr	r3, [r7, #4]
 8108a8c:	4a2b      	ldr	r2, [pc, #172]	; (8108b3c <TIM_Base_SetConfig+0x11c>)
 8108a8e:	4293      	cmp	r3, r2
 8108a90:	d013      	beq.n	8108aba <TIM_Base_SetConfig+0x9a>
 8108a92:	687b      	ldr	r3, [r7, #4]
 8108a94:	4a2a      	ldr	r2, [pc, #168]	; (8108b40 <TIM_Base_SetConfig+0x120>)
 8108a96:	4293      	cmp	r3, r2
 8108a98:	d00f      	beq.n	8108aba <TIM_Base_SetConfig+0x9a>
 8108a9a:	687b      	ldr	r3, [r7, #4]
 8108a9c:	4a29      	ldr	r2, [pc, #164]	; (8108b44 <TIM_Base_SetConfig+0x124>)
 8108a9e:	4293      	cmp	r3, r2
 8108aa0:	d00b      	beq.n	8108aba <TIM_Base_SetConfig+0x9a>
 8108aa2:	687b      	ldr	r3, [r7, #4]
 8108aa4:	4a28      	ldr	r2, [pc, #160]	; (8108b48 <TIM_Base_SetConfig+0x128>)
 8108aa6:	4293      	cmp	r3, r2
 8108aa8:	d007      	beq.n	8108aba <TIM_Base_SetConfig+0x9a>
 8108aaa:	687b      	ldr	r3, [r7, #4]
 8108aac:	4a27      	ldr	r2, [pc, #156]	; (8108b4c <TIM_Base_SetConfig+0x12c>)
 8108aae:	4293      	cmp	r3, r2
 8108ab0:	d003      	beq.n	8108aba <TIM_Base_SetConfig+0x9a>
 8108ab2:	687b      	ldr	r3, [r7, #4]
 8108ab4:	4a26      	ldr	r2, [pc, #152]	; (8108b50 <TIM_Base_SetConfig+0x130>)
 8108ab6:	4293      	cmp	r3, r2
 8108ab8:	d108      	bne.n	8108acc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8108aba:	68fb      	ldr	r3, [r7, #12]
 8108abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8108ac2:	683b      	ldr	r3, [r7, #0]
 8108ac4:	68db      	ldr	r3, [r3, #12]
 8108ac6:	68fa      	ldr	r2, [r7, #12]
 8108ac8:	4313      	orrs	r3, r2
 8108aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8108acc:	68fb      	ldr	r3, [r7, #12]
 8108ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8108ad2:	683b      	ldr	r3, [r7, #0]
 8108ad4:	695b      	ldr	r3, [r3, #20]
 8108ad6:	4313      	orrs	r3, r2
 8108ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8108ada:	687b      	ldr	r3, [r7, #4]
 8108adc:	68fa      	ldr	r2, [r7, #12]
 8108ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8108ae0:	683b      	ldr	r3, [r7, #0]
 8108ae2:	689a      	ldr	r2, [r3, #8]
 8108ae4:	687b      	ldr	r3, [r7, #4]
 8108ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8108ae8:	683b      	ldr	r3, [r7, #0]
 8108aea:	681a      	ldr	r2, [r3, #0]
 8108aec:	687b      	ldr	r3, [r7, #4]
 8108aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8108af0:	687b      	ldr	r3, [r7, #4]
 8108af2:	4a10      	ldr	r2, [pc, #64]	; (8108b34 <TIM_Base_SetConfig+0x114>)
 8108af4:	4293      	cmp	r3, r2
 8108af6:	d00f      	beq.n	8108b18 <TIM_Base_SetConfig+0xf8>
 8108af8:	687b      	ldr	r3, [r7, #4]
 8108afa:	4a12      	ldr	r2, [pc, #72]	; (8108b44 <TIM_Base_SetConfig+0x124>)
 8108afc:	4293      	cmp	r3, r2
 8108afe:	d00b      	beq.n	8108b18 <TIM_Base_SetConfig+0xf8>
 8108b00:	687b      	ldr	r3, [r7, #4]
 8108b02:	4a11      	ldr	r2, [pc, #68]	; (8108b48 <TIM_Base_SetConfig+0x128>)
 8108b04:	4293      	cmp	r3, r2
 8108b06:	d007      	beq.n	8108b18 <TIM_Base_SetConfig+0xf8>
 8108b08:	687b      	ldr	r3, [r7, #4]
 8108b0a:	4a10      	ldr	r2, [pc, #64]	; (8108b4c <TIM_Base_SetConfig+0x12c>)
 8108b0c:	4293      	cmp	r3, r2
 8108b0e:	d003      	beq.n	8108b18 <TIM_Base_SetConfig+0xf8>
 8108b10:	687b      	ldr	r3, [r7, #4]
 8108b12:	4a0f      	ldr	r2, [pc, #60]	; (8108b50 <TIM_Base_SetConfig+0x130>)
 8108b14:	4293      	cmp	r3, r2
 8108b16:	d103      	bne.n	8108b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8108b18:	683b      	ldr	r3, [r7, #0]
 8108b1a:	691a      	ldr	r2, [r3, #16]
 8108b1c:	687b      	ldr	r3, [r7, #4]
 8108b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8108b20:	687b      	ldr	r3, [r7, #4]
 8108b22:	2201      	movs	r2, #1
 8108b24:	615a      	str	r2, [r3, #20]
}
 8108b26:	bf00      	nop
 8108b28:	3714      	adds	r7, #20
 8108b2a:	46bd      	mov	sp, r7
 8108b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b30:	4770      	bx	lr
 8108b32:	bf00      	nop
 8108b34:	40010000 	.word	0x40010000
 8108b38:	40000400 	.word	0x40000400
 8108b3c:	40000800 	.word	0x40000800
 8108b40:	40000c00 	.word	0x40000c00
 8108b44:	40010400 	.word	0x40010400
 8108b48:	40014000 	.word	0x40014000
 8108b4c:	40014400 	.word	0x40014400
 8108b50:	40014800 	.word	0x40014800

08108b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108b54:	b480      	push	{r7}
 8108b56:	b087      	sub	sp, #28
 8108b58:	af00      	add	r7, sp, #0
 8108b5a:	6078      	str	r0, [r7, #4]
 8108b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8108b5e:	687b      	ldr	r3, [r7, #4]
 8108b60:	6a1b      	ldr	r3, [r3, #32]
 8108b62:	f023 0201 	bic.w	r2, r3, #1
 8108b66:	687b      	ldr	r3, [r7, #4]
 8108b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108b6a:	687b      	ldr	r3, [r7, #4]
 8108b6c:	6a1b      	ldr	r3, [r3, #32]
 8108b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108b70:	687b      	ldr	r3, [r7, #4]
 8108b72:	685b      	ldr	r3, [r3, #4]
 8108b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8108b76:	687b      	ldr	r3, [r7, #4]
 8108b78:	699b      	ldr	r3, [r3, #24]
 8108b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8108b7c:	68fb      	ldr	r3, [r7, #12]
 8108b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8108b88:	68fb      	ldr	r3, [r7, #12]
 8108b8a:	f023 0303 	bic.w	r3, r3, #3
 8108b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108b90:	683b      	ldr	r3, [r7, #0]
 8108b92:	681b      	ldr	r3, [r3, #0]
 8108b94:	68fa      	ldr	r2, [r7, #12]
 8108b96:	4313      	orrs	r3, r2
 8108b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8108b9a:	697b      	ldr	r3, [r7, #20]
 8108b9c:	f023 0302 	bic.w	r3, r3, #2
 8108ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8108ba2:	683b      	ldr	r3, [r7, #0]
 8108ba4:	689b      	ldr	r3, [r3, #8]
 8108ba6:	697a      	ldr	r2, [r7, #20]
 8108ba8:	4313      	orrs	r3, r2
 8108baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8108bac:	687b      	ldr	r3, [r7, #4]
 8108bae:	4a2c      	ldr	r2, [pc, #176]	; (8108c60 <TIM_OC1_SetConfig+0x10c>)
 8108bb0:	4293      	cmp	r3, r2
 8108bb2:	d00f      	beq.n	8108bd4 <TIM_OC1_SetConfig+0x80>
 8108bb4:	687b      	ldr	r3, [r7, #4]
 8108bb6:	4a2b      	ldr	r2, [pc, #172]	; (8108c64 <TIM_OC1_SetConfig+0x110>)
 8108bb8:	4293      	cmp	r3, r2
 8108bba:	d00b      	beq.n	8108bd4 <TIM_OC1_SetConfig+0x80>
 8108bbc:	687b      	ldr	r3, [r7, #4]
 8108bbe:	4a2a      	ldr	r2, [pc, #168]	; (8108c68 <TIM_OC1_SetConfig+0x114>)
 8108bc0:	4293      	cmp	r3, r2
 8108bc2:	d007      	beq.n	8108bd4 <TIM_OC1_SetConfig+0x80>
 8108bc4:	687b      	ldr	r3, [r7, #4]
 8108bc6:	4a29      	ldr	r2, [pc, #164]	; (8108c6c <TIM_OC1_SetConfig+0x118>)
 8108bc8:	4293      	cmp	r3, r2
 8108bca:	d003      	beq.n	8108bd4 <TIM_OC1_SetConfig+0x80>
 8108bcc:	687b      	ldr	r3, [r7, #4]
 8108bce:	4a28      	ldr	r2, [pc, #160]	; (8108c70 <TIM_OC1_SetConfig+0x11c>)
 8108bd0:	4293      	cmp	r3, r2
 8108bd2:	d10c      	bne.n	8108bee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8108bd4:	697b      	ldr	r3, [r7, #20]
 8108bd6:	f023 0308 	bic.w	r3, r3, #8
 8108bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8108bdc:	683b      	ldr	r3, [r7, #0]
 8108bde:	68db      	ldr	r3, [r3, #12]
 8108be0:	697a      	ldr	r2, [r7, #20]
 8108be2:	4313      	orrs	r3, r2
 8108be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8108be6:	697b      	ldr	r3, [r7, #20]
 8108be8:	f023 0304 	bic.w	r3, r3, #4
 8108bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108bee:	687b      	ldr	r3, [r7, #4]
 8108bf0:	4a1b      	ldr	r2, [pc, #108]	; (8108c60 <TIM_OC1_SetConfig+0x10c>)
 8108bf2:	4293      	cmp	r3, r2
 8108bf4:	d00f      	beq.n	8108c16 <TIM_OC1_SetConfig+0xc2>
 8108bf6:	687b      	ldr	r3, [r7, #4]
 8108bf8:	4a1a      	ldr	r2, [pc, #104]	; (8108c64 <TIM_OC1_SetConfig+0x110>)
 8108bfa:	4293      	cmp	r3, r2
 8108bfc:	d00b      	beq.n	8108c16 <TIM_OC1_SetConfig+0xc2>
 8108bfe:	687b      	ldr	r3, [r7, #4]
 8108c00:	4a19      	ldr	r2, [pc, #100]	; (8108c68 <TIM_OC1_SetConfig+0x114>)
 8108c02:	4293      	cmp	r3, r2
 8108c04:	d007      	beq.n	8108c16 <TIM_OC1_SetConfig+0xc2>
 8108c06:	687b      	ldr	r3, [r7, #4]
 8108c08:	4a18      	ldr	r2, [pc, #96]	; (8108c6c <TIM_OC1_SetConfig+0x118>)
 8108c0a:	4293      	cmp	r3, r2
 8108c0c:	d003      	beq.n	8108c16 <TIM_OC1_SetConfig+0xc2>
 8108c0e:	687b      	ldr	r3, [r7, #4]
 8108c10:	4a17      	ldr	r2, [pc, #92]	; (8108c70 <TIM_OC1_SetConfig+0x11c>)
 8108c12:	4293      	cmp	r3, r2
 8108c14:	d111      	bne.n	8108c3a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8108c16:	693b      	ldr	r3, [r7, #16]
 8108c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8108c1e:	693b      	ldr	r3, [r7, #16]
 8108c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8108c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8108c26:	683b      	ldr	r3, [r7, #0]
 8108c28:	695b      	ldr	r3, [r3, #20]
 8108c2a:	693a      	ldr	r2, [r7, #16]
 8108c2c:	4313      	orrs	r3, r2
 8108c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8108c30:	683b      	ldr	r3, [r7, #0]
 8108c32:	699b      	ldr	r3, [r3, #24]
 8108c34:	693a      	ldr	r2, [r7, #16]
 8108c36:	4313      	orrs	r3, r2
 8108c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108c3a:	687b      	ldr	r3, [r7, #4]
 8108c3c:	693a      	ldr	r2, [r7, #16]
 8108c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8108c40:	687b      	ldr	r3, [r7, #4]
 8108c42:	68fa      	ldr	r2, [r7, #12]
 8108c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8108c46:	683b      	ldr	r3, [r7, #0]
 8108c48:	685a      	ldr	r2, [r3, #4]
 8108c4a:	687b      	ldr	r3, [r7, #4]
 8108c4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108c4e:	687b      	ldr	r3, [r7, #4]
 8108c50:	697a      	ldr	r2, [r7, #20]
 8108c52:	621a      	str	r2, [r3, #32]
}
 8108c54:	bf00      	nop
 8108c56:	371c      	adds	r7, #28
 8108c58:	46bd      	mov	sp, r7
 8108c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c5e:	4770      	bx	lr
 8108c60:	40010000 	.word	0x40010000
 8108c64:	40010400 	.word	0x40010400
 8108c68:	40014000 	.word	0x40014000
 8108c6c:	40014400 	.word	0x40014400
 8108c70:	40014800 	.word	0x40014800

08108c74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108c74:	b480      	push	{r7}
 8108c76:	b087      	sub	sp, #28
 8108c78:	af00      	add	r7, sp, #0
 8108c7a:	6078      	str	r0, [r7, #4]
 8108c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8108c7e:	687b      	ldr	r3, [r7, #4]
 8108c80:	6a1b      	ldr	r3, [r3, #32]
 8108c82:	f023 0210 	bic.w	r2, r3, #16
 8108c86:	687b      	ldr	r3, [r7, #4]
 8108c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108c8a:	687b      	ldr	r3, [r7, #4]
 8108c8c:	6a1b      	ldr	r3, [r3, #32]
 8108c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108c90:	687b      	ldr	r3, [r7, #4]
 8108c92:	685b      	ldr	r3, [r3, #4]
 8108c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8108c96:	687b      	ldr	r3, [r7, #4]
 8108c98:	699b      	ldr	r3, [r3, #24]
 8108c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8108c9c:	68fb      	ldr	r3, [r7, #12]
 8108c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8108ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8108ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8108ca8:	68fb      	ldr	r3, [r7, #12]
 8108caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108cb0:	683b      	ldr	r3, [r7, #0]
 8108cb2:	681b      	ldr	r3, [r3, #0]
 8108cb4:	021b      	lsls	r3, r3, #8
 8108cb6:	68fa      	ldr	r2, [r7, #12]
 8108cb8:	4313      	orrs	r3, r2
 8108cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8108cbc:	697b      	ldr	r3, [r7, #20]
 8108cbe:	f023 0320 	bic.w	r3, r3, #32
 8108cc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8108cc4:	683b      	ldr	r3, [r7, #0]
 8108cc6:	689b      	ldr	r3, [r3, #8]
 8108cc8:	011b      	lsls	r3, r3, #4
 8108cca:	697a      	ldr	r2, [r7, #20]
 8108ccc:	4313      	orrs	r3, r2
 8108cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8108cd0:	687b      	ldr	r3, [r7, #4]
 8108cd2:	4a28      	ldr	r2, [pc, #160]	; (8108d74 <TIM_OC2_SetConfig+0x100>)
 8108cd4:	4293      	cmp	r3, r2
 8108cd6:	d003      	beq.n	8108ce0 <TIM_OC2_SetConfig+0x6c>
 8108cd8:	687b      	ldr	r3, [r7, #4]
 8108cda:	4a27      	ldr	r2, [pc, #156]	; (8108d78 <TIM_OC2_SetConfig+0x104>)
 8108cdc:	4293      	cmp	r3, r2
 8108cde:	d10d      	bne.n	8108cfc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8108ce0:	697b      	ldr	r3, [r7, #20]
 8108ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8108ce8:	683b      	ldr	r3, [r7, #0]
 8108cea:	68db      	ldr	r3, [r3, #12]
 8108cec:	011b      	lsls	r3, r3, #4
 8108cee:	697a      	ldr	r2, [r7, #20]
 8108cf0:	4313      	orrs	r3, r2
 8108cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8108cf4:	697b      	ldr	r3, [r7, #20]
 8108cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8108cfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108cfc:	687b      	ldr	r3, [r7, #4]
 8108cfe:	4a1d      	ldr	r2, [pc, #116]	; (8108d74 <TIM_OC2_SetConfig+0x100>)
 8108d00:	4293      	cmp	r3, r2
 8108d02:	d00f      	beq.n	8108d24 <TIM_OC2_SetConfig+0xb0>
 8108d04:	687b      	ldr	r3, [r7, #4]
 8108d06:	4a1c      	ldr	r2, [pc, #112]	; (8108d78 <TIM_OC2_SetConfig+0x104>)
 8108d08:	4293      	cmp	r3, r2
 8108d0a:	d00b      	beq.n	8108d24 <TIM_OC2_SetConfig+0xb0>
 8108d0c:	687b      	ldr	r3, [r7, #4]
 8108d0e:	4a1b      	ldr	r2, [pc, #108]	; (8108d7c <TIM_OC2_SetConfig+0x108>)
 8108d10:	4293      	cmp	r3, r2
 8108d12:	d007      	beq.n	8108d24 <TIM_OC2_SetConfig+0xb0>
 8108d14:	687b      	ldr	r3, [r7, #4]
 8108d16:	4a1a      	ldr	r2, [pc, #104]	; (8108d80 <TIM_OC2_SetConfig+0x10c>)
 8108d18:	4293      	cmp	r3, r2
 8108d1a:	d003      	beq.n	8108d24 <TIM_OC2_SetConfig+0xb0>
 8108d1c:	687b      	ldr	r3, [r7, #4]
 8108d1e:	4a19      	ldr	r2, [pc, #100]	; (8108d84 <TIM_OC2_SetConfig+0x110>)
 8108d20:	4293      	cmp	r3, r2
 8108d22:	d113      	bne.n	8108d4c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8108d24:	693b      	ldr	r3, [r7, #16]
 8108d26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8108d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8108d2c:	693b      	ldr	r3, [r7, #16]
 8108d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8108d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8108d34:	683b      	ldr	r3, [r7, #0]
 8108d36:	695b      	ldr	r3, [r3, #20]
 8108d38:	009b      	lsls	r3, r3, #2
 8108d3a:	693a      	ldr	r2, [r7, #16]
 8108d3c:	4313      	orrs	r3, r2
 8108d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8108d40:	683b      	ldr	r3, [r7, #0]
 8108d42:	699b      	ldr	r3, [r3, #24]
 8108d44:	009b      	lsls	r3, r3, #2
 8108d46:	693a      	ldr	r2, [r7, #16]
 8108d48:	4313      	orrs	r3, r2
 8108d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108d4c:	687b      	ldr	r3, [r7, #4]
 8108d4e:	693a      	ldr	r2, [r7, #16]
 8108d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8108d52:	687b      	ldr	r3, [r7, #4]
 8108d54:	68fa      	ldr	r2, [r7, #12]
 8108d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8108d58:	683b      	ldr	r3, [r7, #0]
 8108d5a:	685a      	ldr	r2, [r3, #4]
 8108d5c:	687b      	ldr	r3, [r7, #4]
 8108d5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108d60:	687b      	ldr	r3, [r7, #4]
 8108d62:	697a      	ldr	r2, [r7, #20]
 8108d64:	621a      	str	r2, [r3, #32]
}
 8108d66:	bf00      	nop
 8108d68:	371c      	adds	r7, #28
 8108d6a:	46bd      	mov	sp, r7
 8108d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d70:	4770      	bx	lr
 8108d72:	bf00      	nop
 8108d74:	40010000 	.word	0x40010000
 8108d78:	40010400 	.word	0x40010400
 8108d7c:	40014000 	.word	0x40014000
 8108d80:	40014400 	.word	0x40014400
 8108d84:	40014800 	.word	0x40014800

08108d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108d88:	b480      	push	{r7}
 8108d8a:	b087      	sub	sp, #28
 8108d8c:	af00      	add	r7, sp, #0
 8108d8e:	6078      	str	r0, [r7, #4]
 8108d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8108d92:	687b      	ldr	r3, [r7, #4]
 8108d94:	6a1b      	ldr	r3, [r3, #32]
 8108d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8108d9a:	687b      	ldr	r3, [r7, #4]
 8108d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108d9e:	687b      	ldr	r3, [r7, #4]
 8108da0:	6a1b      	ldr	r3, [r3, #32]
 8108da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108da4:	687b      	ldr	r3, [r7, #4]
 8108da6:	685b      	ldr	r3, [r3, #4]
 8108da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8108daa:	687b      	ldr	r3, [r7, #4]
 8108dac:	69db      	ldr	r3, [r3, #28]
 8108dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8108db0:	68fb      	ldr	r3, [r7, #12]
 8108db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8108dbc:	68fb      	ldr	r3, [r7, #12]
 8108dbe:	f023 0303 	bic.w	r3, r3, #3
 8108dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108dc4:	683b      	ldr	r3, [r7, #0]
 8108dc6:	681b      	ldr	r3, [r3, #0]
 8108dc8:	68fa      	ldr	r2, [r7, #12]
 8108dca:	4313      	orrs	r3, r2
 8108dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8108dce:	697b      	ldr	r3, [r7, #20]
 8108dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8108dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8108dd6:	683b      	ldr	r3, [r7, #0]
 8108dd8:	689b      	ldr	r3, [r3, #8]
 8108dda:	021b      	lsls	r3, r3, #8
 8108ddc:	697a      	ldr	r2, [r7, #20]
 8108dde:	4313      	orrs	r3, r2
 8108de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8108de2:	687b      	ldr	r3, [r7, #4]
 8108de4:	4a27      	ldr	r2, [pc, #156]	; (8108e84 <TIM_OC3_SetConfig+0xfc>)
 8108de6:	4293      	cmp	r3, r2
 8108de8:	d003      	beq.n	8108df2 <TIM_OC3_SetConfig+0x6a>
 8108dea:	687b      	ldr	r3, [r7, #4]
 8108dec:	4a26      	ldr	r2, [pc, #152]	; (8108e88 <TIM_OC3_SetConfig+0x100>)
 8108dee:	4293      	cmp	r3, r2
 8108df0:	d10d      	bne.n	8108e0e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8108df2:	697b      	ldr	r3, [r7, #20]
 8108df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8108df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8108dfa:	683b      	ldr	r3, [r7, #0]
 8108dfc:	68db      	ldr	r3, [r3, #12]
 8108dfe:	021b      	lsls	r3, r3, #8
 8108e00:	697a      	ldr	r2, [r7, #20]
 8108e02:	4313      	orrs	r3, r2
 8108e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8108e06:	697b      	ldr	r3, [r7, #20]
 8108e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8108e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108e0e:	687b      	ldr	r3, [r7, #4]
 8108e10:	4a1c      	ldr	r2, [pc, #112]	; (8108e84 <TIM_OC3_SetConfig+0xfc>)
 8108e12:	4293      	cmp	r3, r2
 8108e14:	d00f      	beq.n	8108e36 <TIM_OC3_SetConfig+0xae>
 8108e16:	687b      	ldr	r3, [r7, #4]
 8108e18:	4a1b      	ldr	r2, [pc, #108]	; (8108e88 <TIM_OC3_SetConfig+0x100>)
 8108e1a:	4293      	cmp	r3, r2
 8108e1c:	d00b      	beq.n	8108e36 <TIM_OC3_SetConfig+0xae>
 8108e1e:	687b      	ldr	r3, [r7, #4]
 8108e20:	4a1a      	ldr	r2, [pc, #104]	; (8108e8c <TIM_OC3_SetConfig+0x104>)
 8108e22:	4293      	cmp	r3, r2
 8108e24:	d007      	beq.n	8108e36 <TIM_OC3_SetConfig+0xae>
 8108e26:	687b      	ldr	r3, [r7, #4]
 8108e28:	4a19      	ldr	r2, [pc, #100]	; (8108e90 <TIM_OC3_SetConfig+0x108>)
 8108e2a:	4293      	cmp	r3, r2
 8108e2c:	d003      	beq.n	8108e36 <TIM_OC3_SetConfig+0xae>
 8108e2e:	687b      	ldr	r3, [r7, #4]
 8108e30:	4a18      	ldr	r2, [pc, #96]	; (8108e94 <TIM_OC3_SetConfig+0x10c>)
 8108e32:	4293      	cmp	r3, r2
 8108e34:	d113      	bne.n	8108e5e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8108e36:	693b      	ldr	r3, [r7, #16]
 8108e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8108e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8108e3e:	693b      	ldr	r3, [r7, #16]
 8108e40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8108e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8108e46:	683b      	ldr	r3, [r7, #0]
 8108e48:	695b      	ldr	r3, [r3, #20]
 8108e4a:	011b      	lsls	r3, r3, #4
 8108e4c:	693a      	ldr	r2, [r7, #16]
 8108e4e:	4313      	orrs	r3, r2
 8108e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8108e52:	683b      	ldr	r3, [r7, #0]
 8108e54:	699b      	ldr	r3, [r3, #24]
 8108e56:	011b      	lsls	r3, r3, #4
 8108e58:	693a      	ldr	r2, [r7, #16]
 8108e5a:	4313      	orrs	r3, r2
 8108e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108e5e:	687b      	ldr	r3, [r7, #4]
 8108e60:	693a      	ldr	r2, [r7, #16]
 8108e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8108e64:	687b      	ldr	r3, [r7, #4]
 8108e66:	68fa      	ldr	r2, [r7, #12]
 8108e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8108e6a:	683b      	ldr	r3, [r7, #0]
 8108e6c:	685a      	ldr	r2, [r3, #4]
 8108e6e:	687b      	ldr	r3, [r7, #4]
 8108e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	697a      	ldr	r2, [r7, #20]
 8108e76:	621a      	str	r2, [r3, #32]
}
 8108e78:	bf00      	nop
 8108e7a:	371c      	adds	r7, #28
 8108e7c:	46bd      	mov	sp, r7
 8108e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e82:	4770      	bx	lr
 8108e84:	40010000 	.word	0x40010000
 8108e88:	40010400 	.word	0x40010400
 8108e8c:	40014000 	.word	0x40014000
 8108e90:	40014400 	.word	0x40014400
 8108e94:	40014800 	.word	0x40014800

08108e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8108e98:	b480      	push	{r7}
 8108e9a:	b087      	sub	sp, #28
 8108e9c:	af00      	add	r7, sp, #0
 8108e9e:	6078      	str	r0, [r7, #4]
 8108ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8108ea2:	687b      	ldr	r3, [r7, #4]
 8108ea4:	6a1b      	ldr	r3, [r3, #32]
 8108ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8108eaa:	687b      	ldr	r3, [r7, #4]
 8108eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108eae:	687b      	ldr	r3, [r7, #4]
 8108eb0:	6a1b      	ldr	r3, [r3, #32]
 8108eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108eb4:	687b      	ldr	r3, [r7, #4]
 8108eb6:	685b      	ldr	r3, [r3, #4]
 8108eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8108eba:	687b      	ldr	r3, [r7, #4]
 8108ebc:	69db      	ldr	r3, [r3, #28]
 8108ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8108ec0:	68fb      	ldr	r3, [r7, #12]
 8108ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8108ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8108eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8108ecc:	68fb      	ldr	r3, [r7, #12]
 8108ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108ed4:	683b      	ldr	r3, [r7, #0]
 8108ed6:	681b      	ldr	r3, [r3, #0]
 8108ed8:	021b      	lsls	r3, r3, #8
 8108eda:	68fa      	ldr	r2, [r7, #12]
 8108edc:	4313      	orrs	r3, r2
 8108ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8108ee0:	693b      	ldr	r3, [r7, #16]
 8108ee2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8108ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8108ee8:	683b      	ldr	r3, [r7, #0]
 8108eea:	689b      	ldr	r3, [r3, #8]
 8108eec:	031b      	lsls	r3, r3, #12
 8108eee:	693a      	ldr	r2, [r7, #16]
 8108ef0:	4313      	orrs	r3, r2
 8108ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108ef4:	687b      	ldr	r3, [r7, #4]
 8108ef6:	4a18      	ldr	r2, [pc, #96]	; (8108f58 <TIM_OC4_SetConfig+0xc0>)
 8108ef8:	4293      	cmp	r3, r2
 8108efa:	d00f      	beq.n	8108f1c <TIM_OC4_SetConfig+0x84>
 8108efc:	687b      	ldr	r3, [r7, #4]
 8108efe:	4a17      	ldr	r2, [pc, #92]	; (8108f5c <TIM_OC4_SetConfig+0xc4>)
 8108f00:	4293      	cmp	r3, r2
 8108f02:	d00b      	beq.n	8108f1c <TIM_OC4_SetConfig+0x84>
 8108f04:	687b      	ldr	r3, [r7, #4]
 8108f06:	4a16      	ldr	r2, [pc, #88]	; (8108f60 <TIM_OC4_SetConfig+0xc8>)
 8108f08:	4293      	cmp	r3, r2
 8108f0a:	d007      	beq.n	8108f1c <TIM_OC4_SetConfig+0x84>
 8108f0c:	687b      	ldr	r3, [r7, #4]
 8108f0e:	4a15      	ldr	r2, [pc, #84]	; (8108f64 <TIM_OC4_SetConfig+0xcc>)
 8108f10:	4293      	cmp	r3, r2
 8108f12:	d003      	beq.n	8108f1c <TIM_OC4_SetConfig+0x84>
 8108f14:	687b      	ldr	r3, [r7, #4]
 8108f16:	4a14      	ldr	r2, [pc, #80]	; (8108f68 <TIM_OC4_SetConfig+0xd0>)
 8108f18:	4293      	cmp	r3, r2
 8108f1a:	d109      	bne.n	8108f30 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8108f1c:	697b      	ldr	r3, [r7, #20]
 8108f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8108f22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8108f24:	683b      	ldr	r3, [r7, #0]
 8108f26:	695b      	ldr	r3, [r3, #20]
 8108f28:	019b      	lsls	r3, r3, #6
 8108f2a:	697a      	ldr	r2, [r7, #20]
 8108f2c:	4313      	orrs	r3, r2
 8108f2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	697a      	ldr	r2, [r7, #20]
 8108f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8108f36:	687b      	ldr	r3, [r7, #4]
 8108f38:	68fa      	ldr	r2, [r7, #12]
 8108f3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8108f3c:	683b      	ldr	r3, [r7, #0]
 8108f3e:	685a      	ldr	r2, [r3, #4]
 8108f40:	687b      	ldr	r3, [r7, #4]
 8108f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108f44:	687b      	ldr	r3, [r7, #4]
 8108f46:	693a      	ldr	r2, [r7, #16]
 8108f48:	621a      	str	r2, [r3, #32]
}
 8108f4a:	bf00      	nop
 8108f4c:	371c      	adds	r7, #28
 8108f4e:	46bd      	mov	sp, r7
 8108f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f54:	4770      	bx	lr
 8108f56:	bf00      	nop
 8108f58:	40010000 	.word	0x40010000
 8108f5c:	40010400 	.word	0x40010400
 8108f60:	40014000 	.word	0x40014000
 8108f64:	40014400 	.word	0x40014400
 8108f68:	40014800 	.word	0x40014800

08108f6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8108f6c:	b480      	push	{r7}
 8108f6e:	b087      	sub	sp, #28
 8108f70:	af00      	add	r7, sp, #0
 8108f72:	6078      	str	r0, [r7, #4]
 8108f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8108f76:	687b      	ldr	r3, [r7, #4]
 8108f78:	6a1b      	ldr	r3, [r3, #32]
 8108f7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8108f7e:	687b      	ldr	r3, [r7, #4]
 8108f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108f82:	687b      	ldr	r3, [r7, #4]
 8108f84:	6a1b      	ldr	r3, [r3, #32]
 8108f86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108f88:	687b      	ldr	r3, [r7, #4]
 8108f8a:	685b      	ldr	r3, [r3, #4]
 8108f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108f8e:	687b      	ldr	r3, [r7, #4]
 8108f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8108f94:	68fb      	ldr	r3, [r7, #12]
 8108f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108fa0:	683b      	ldr	r3, [r7, #0]
 8108fa2:	681b      	ldr	r3, [r3, #0]
 8108fa4:	68fa      	ldr	r2, [r7, #12]
 8108fa6:	4313      	orrs	r3, r2
 8108fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8108faa:	693b      	ldr	r3, [r7, #16]
 8108fac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8108fb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8108fb2:	683b      	ldr	r3, [r7, #0]
 8108fb4:	689b      	ldr	r3, [r3, #8]
 8108fb6:	041b      	lsls	r3, r3, #16
 8108fb8:	693a      	ldr	r2, [r7, #16]
 8108fba:	4313      	orrs	r3, r2
 8108fbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108fbe:	687b      	ldr	r3, [r7, #4]
 8108fc0:	4a17      	ldr	r2, [pc, #92]	; (8109020 <TIM_OC5_SetConfig+0xb4>)
 8108fc2:	4293      	cmp	r3, r2
 8108fc4:	d00f      	beq.n	8108fe6 <TIM_OC5_SetConfig+0x7a>
 8108fc6:	687b      	ldr	r3, [r7, #4]
 8108fc8:	4a16      	ldr	r2, [pc, #88]	; (8109024 <TIM_OC5_SetConfig+0xb8>)
 8108fca:	4293      	cmp	r3, r2
 8108fcc:	d00b      	beq.n	8108fe6 <TIM_OC5_SetConfig+0x7a>
 8108fce:	687b      	ldr	r3, [r7, #4]
 8108fd0:	4a15      	ldr	r2, [pc, #84]	; (8109028 <TIM_OC5_SetConfig+0xbc>)
 8108fd2:	4293      	cmp	r3, r2
 8108fd4:	d007      	beq.n	8108fe6 <TIM_OC5_SetConfig+0x7a>
 8108fd6:	687b      	ldr	r3, [r7, #4]
 8108fd8:	4a14      	ldr	r2, [pc, #80]	; (810902c <TIM_OC5_SetConfig+0xc0>)
 8108fda:	4293      	cmp	r3, r2
 8108fdc:	d003      	beq.n	8108fe6 <TIM_OC5_SetConfig+0x7a>
 8108fde:	687b      	ldr	r3, [r7, #4]
 8108fe0:	4a13      	ldr	r2, [pc, #76]	; (8109030 <TIM_OC5_SetConfig+0xc4>)
 8108fe2:	4293      	cmp	r3, r2
 8108fe4:	d109      	bne.n	8108ffa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8108fe6:	697b      	ldr	r3, [r7, #20]
 8108fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108fec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8108fee:	683b      	ldr	r3, [r7, #0]
 8108ff0:	695b      	ldr	r3, [r3, #20]
 8108ff2:	021b      	lsls	r3, r3, #8
 8108ff4:	697a      	ldr	r2, [r7, #20]
 8108ff6:	4313      	orrs	r3, r2
 8108ff8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108ffa:	687b      	ldr	r3, [r7, #4]
 8108ffc:	697a      	ldr	r2, [r7, #20]
 8108ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8109000:	687b      	ldr	r3, [r7, #4]
 8109002:	68fa      	ldr	r2, [r7, #12]
 8109004:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8109006:	683b      	ldr	r3, [r7, #0]
 8109008:	685a      	ldr	r2, [r3, #4]
 810900a:	687b      	ldr	r3, [r7, #4]
 810900c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810900e:	687b      	ldr	r3, [r7, #4]
 8109010:	693a      	ldr	r2, [r7, #16]
 8109012:	621a      	str	r2, [r3, #32]
}
 8109014:	bf00      	nop
 8109016:	371c      	adds	r7, #28
 8109018:	46bd      	mov	sp, r7
 810901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810901e:	4770      	bx	lr
 8109020:	40010000 	.word	0x40010000
 8109024:	40010400 	.word	0x40010400
 8109028:	40014000 	.word	0x40014000
 810902c:	40014400 	.word	0x40014400
 8109030:	40014800 	.word	0x40014800

08109034 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8109034:	b480      	push	{r7}
 8109036:	b087      	sub	sp, #28
 8109038:	af00      	add	r7, sp, #0
 810903a:	6078      	str	r0, [r7, #4]
 810903c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810903e:	687b      	ldr	r3, [r7, #4]
 8109040:	6a1b      	ldr	r3, [r3, #32]
 8109042:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8109046:	687b      	ldr	r3, [r7, #4]
 8109048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810904a:	687b      	ldr	r3, [r7, #4]
 810904c:	6a1b      	ldr	r3, [r3, #32]
 810904e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109050:	687b      	ldr	r3, [r7, #4]
 8109052:	685b      	ldr	r3, [r3, #4]
 8109054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8109056:	687b      	ldr	r3, [r7, #4]
 8109058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810905a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810905c:	68fb      	ldr	r3, [r7, #12]
 810905e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8109062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8109066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8109068:	683b      	ldr	r3, [r7, #0]
 810906a:	681b      	ldr	r3, [r3, #0]
 810906c:	021b      	lsls	r3, r3, #8
 810906e:	68fa      	ldr	r2, [r7, #12]
 8109070:	4313      	orrs	r3, r2
 8109072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8109074:	693b      	ldr	r3, [r7, #16]
 8109076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810907a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810907c:	683b      	ldr	r3, [r7, #0]
 810907e:	689b      	ldr	r3, [r3, #8]
 8109080:	051b      	lsls	r3, r3, #20
 8109082:	693a      	ldr	r2, [r7, #16]
 8109084:	4313      	orrs	r3, r2
 8109086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109088:	687b      	ldr	r3, [r7, #4]
 810908a:	4a18      	ldr	r2, [pc, #96]	; (81090ec <TIM_OC6_SetConfig+0xb8>)
 810908c:	4293      	cmp	r3, r2
 810908e:	d00f      	beq.n	81090b0 <TIM_OC6_SetConfig+0x7c>
 8109090:	687b      	ldr	r3, [r7, #4]
 8109092:	4a17      	ldr	r2, [pc, #92]	; (81090f0 <TIM_OC6_SetConfig+0xbc>)
 8109094:	4293      	cmp	r3, r2
 8109096:	d00b      	beq.n	81090b0 <TIM_OC6_SetConfig+0x7c>
 8109098:	687b      	ldr	r3, [r7, #4]
 810909a:	4a16      	ldr	r2, [pc, #88]	; (81090f4 <TIM_OC6_SetConfig+0xc0>)
 810909c:	4293      	cmp	r3, r2
 810909e:	d007      	beq.n	81090b0 <TIM_OC6_SetConfig+0x7c>
 81090a0:	687b      	ldr	r3, [r7, #4]
 81090a2:	4a15      	ldr	r2, [pc, #84]	; (81090f8 <TIM_OC6_SetConfig+0xc4>)
 81090a4:	4293      	cmp	r3, r2
 81090a6:	d003      	beq.n	81090b0 <TIM_OC6_SetConfig+0x7c>
 81090a8:	687b      	ldr	r3, [r7, #4]
 81090aa:	4a14      	ldr	r2, [pc, #80]	; (81090fc <TIM_OC6_SetConfig+0xc8>)
 81090ac:	4293      	cmp	r3, r2
 81090ae:	d109      	bne.n	81090c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81090b0:	697b      	ldr	r3, [r7, #20]
 81090b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81090b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81090b8:	683b      	ldr	r3, [r7, #0]
 81090ba:	695b      	ldr	r3, [r3, #20]
 81090bc:	029b      	lsls	r3, r3, #10
 81090be:	697a      	ldr	r2, [r7, #20]
 81090c0:	4313      	orrs	r3, r2
 81090c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81090c4:	687b      	ldr	r3, [r7, #4]
 81090c6:	697a      	ldr	r2, [r7, #20]
 81090c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81090ca:	687b      	ldr	r3, [r7, #4]
 81090cc:	68fa      	ldr	r2, [r7, #12]
 81090ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81090d0:	683b      	ldr	r3, [r7, #0]
 81090d2:	685a      	ldr	r2, [r3, #4]
 81090d4:	687b      	ldr	r3, [r7, #4]
 81090d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	693a      	ldr	r2, [r7, #16]
 81090dc:	621a      	str	r2, [r3, #32]
}
 81090de:	bf00      	nop
 81090e0:	371c      	adds	r7, #28
 81090e2:	46bd      	mov	sp, r7
 81090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090e8:	4770      	bx	lr
 81090ea:	bf00      	nop
 81090ec:	40010000 	.word	0x40010000
 81090f0:	40010400 	.word	0x40010400
 81090f4:	40014000 	.word	0x40014000
 81090f8:	40014400 	.word	0x40014400
 81090fc:	40014800 	.word	0x40014800

08109100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8109100:	b480      	push	{r7}
 8109102:	b087      	sub	sp, #28
 8109104:	af00      	add	r7, sp, #0
 8109106:	60f8      	str	r0, [r7, #12]
 8109108:	60b9      	str	r1, [r7, #8]
 810910a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810910c:	68bb      	ldr	r3, [r7, #8]
 810910e:	f003 031f 	and.w	r3, r3, #31
 8109112:	2201      	movs	r2, #1
 8109114:	fa02 f303 	lsl.w	r3, r2, r3
 8109118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810911a:	68fb      	ldr	r3, [r7, #12]
 810911c:	6a1a      	ldr	r2, [r3, #32]
 810911e:	697b      	ldr	r3, [r7, #20]
 8109120:	43db      	mvns	r3, r3
 8109122:	401a      	ands	r2, r3
 8109124:	68fb      	ldr	r3, [r7, #12]
 8109126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8109128:	68fb      	ldr	r3, [r7, #12]
 810912a:	6a1a      	ldr	r2, [r3, #32]
 810912c:	68bb      	ldr	r3, [r7, #8]
 810912e:	f003 031f 	and.w	r3, r3, #31
 8109132:	6879      	ldr	r1, [r7, #4]
 8109134:	fa01 f303 	lsl.w	r3, r1, r3
 8109138:	431a      	orrs	r2, r3
 810913a:	68fb      	ldr	r3, [r7, #12]
 810913c:	621a      	str	r2, [r3, #32]
}
 810913e:	bf00      	nop
 8109140:	371c      	adds	r7, #28
 8109142:	46bd      	mov	sp, r7
 8109144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109148:	4770      	bx	lr
	...

0810914c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810914c:	b480      	push	{r7}
 810914e:	b085      	sub	sp, #20
 8109150:	af00      	add	r7, sp, #0
 8109152:	6078      	str	r0, [r7, #4]
 8109154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8109156:	687b      	ldr	r3, [r7, #4]
 8109158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810915c:	2b01      	cmp	r3, #1
 810915e:	d101      	bne.n	8109164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8109160:	2302      	movs	r3, #2
 8109162:	e06d      	b.n	8109240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8109164:	687b      	ldr	r3, [r7, #4]
 8109166:	2201      	movs	r2, #1
 8109168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810916c:	687b      	ldr	r3, [r7, #4]
 810916e:	2202      	movs	r2, #2
 8109170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8109174:	687b      	ldr	r3, [r7, #4]
 8109176:	681b      	ldr	r3, [r3, #0]
 8109178:	685b      	ldr	r3, [r3, #4]
 810917a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810917c:	687b      	ldr	r3, [r7, #4]
 810917e:	681b      	ldr	r3, [r3, #0]
 8109180:	689b      	ldr	r3, [r3, #8]
 8109182:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8109184:	687b      	ldr	r3, [r7, #4]
 8109186:	681b      	ldr	r3, [r3, #0]
 8109188:	4a30      	ldr	r2, [pc, #192]	; (810924c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810918a:	4293      	cmp	r3, r2
 810918c:	d004      	beq.n	8109198 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810918e:	687b      	ldr	r3, [r7, #4]
 8109190:	681b      	ldr	r3, [r3, #0]
 8109192:	4a2f      	ldr	r2, [pc, #188]	; (8109250 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8109194:	4293      	cmp	r3, r2
 8109196:	d108      	bne.n	81091aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8109198:	68fb      	ldr	r3, [r7, #12]
 810919a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810919e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81091a0:	683b      	ldr	r3, [r7, #0]
 81091a2:	685b      	ldr	r3, [r3, #4]
 81091a4:	68fa      	ldr	r2, [r7, #12]
 81091a6:	4313      	orrs	r3, r2
 81091a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81091aa:	68fb      	ldr	r3, [r7, #12]
 81091ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81091b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81091b2:	683b      	ldr	r3, [r7, #0]
 81091b4:	681b      	ldr	r3, [r3, #0]
 81091b6:	68fa      	ldr	r2, [r7, #12]
 81091b8:	4313      	orrs	r3, r2
 81091ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81091bc:	687b      	ldr	r3, [r7, #4]
 81091be:	681b      	ldr	r3, [r3, #0]
 81091c0:	68fa      	ldr	r2, [r7, #12]
 81091c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81091c4:	687b      	ldr	r3, [r7, #4]
 81091c6:	681b      	ldr	r3, [r3, #0]
 81091c8:	4a20      	ldr	r2, [pc, #128]	; (810924c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81091ca:	4293      	cmp	r3, r2
 81091cc:	d022      	beq.n	8109214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81091ce:	687b      	ldr	r3, [r7, #4]
 81091d0:	681b      	ldr	r3, [r3, #0]
 81091d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81091d6:	d01d      	beq.n	8109214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81091d8:	687b      	ldr	r3, [r7, #4]
 81091da:	681b      	ldr	r3, [r3, #0]
 81091dc:	4a1d      	ldr	r2, [pc, #116]	; (8109254 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81091de:	4293      	cmp	r3, r2
 81091e0:	d018      	beq.n	8109214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81091e2:	687b      	ldr	r3, [r7, #4]
 81091e4:	681b      	ldr	r3, [r3, #0]
 81091e6:	4a1c      	ldr	r2, [pc, #112]	; (8109258 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81091e8:	4293      	cmp	r3, r2
 81091ea:	d013      	beq.n	8109214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81091ec:	687b      	ldr	r3, [r7, #4]
 81091ee:	681b      	ldr	r3, [r3, #0]
 81091f0:	4a1a      	ldr	r2, [pc, #104]	; (810925c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81091f2:	4293      	cmp	r3, r2
 81091f4:	d00e      	beq.n	8109214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81091f6:	687b      	ldr	r3, [r7, #4]
 81091f8:	681b      	ldr	r3, [r3, #0]
 81091fa:	4a15      	ldr	r2, [pc, #84]	; (8109250 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81091fc:	4293      	cmp	r3, r2
 81091fe:	d009      	beq.n	8109214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109200:	687b      	ldr	r3, [r7, #4]
 8109202:	681b      	ldr	r3, [r3, #0]
 8109204:	4a16      	ldr	r2, [pc, #88]	; (8109260 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8109206:	4293      	cmp	r3, r2
 8109208:	d004      	beq.n	8109214 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810920a:	687b      	ldr	r3, [r7, #4]
 810920c:	681b      	ldr	r3, [r3, #0]
 810920e:	4a15      	ldr	r2, [pc, #84]	; (8109264 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8109210:	4293      	cmp	r3, r2
 8109212:	d10c      	bne.n	810922e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8109214:	68bb      	ldr	r3, [r7, #8]
 8109216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810921a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810921c:	683b      	ldr	r3, [r7, #0]
 810921e:	689b      	ldr	r3, [r3, #8]
 8109220:	68ba      	ldr	r2, [r7, #8]
 8109222:	4313      	orrs	r3, r2
 8109224:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8109226:	687b      	ldr	r3, [r7, #4]
 8109228:	681b      	ldr	r3, [r3, #0]
 810922a:	68ba      	ldr	r2, [r7, #8]
 810922c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810922e:	687b      	ldr	r3, [r7, #4]
 8109230:	2201      	movs	r2, #1
 8109232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8109236:	687b      	ldr	r3, [r7, #4]
 8109238:	2200      	movs	r2, #0
 810923a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810923e:	2300      	movs	r3, #0
}
 8109240:	4618      	mov	r0, r3
 8109242:	3714      	adds	r7, #20
 8109244:	46bd      	mov	sp, r7
 8109246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810924a:	4770      	bx	lr
 810924c:	40010000 	.word	0x40010000
 8109250:	40010400 	.word	0x40010400
 8109254:	40000400 	.word	0x40000400
 8109258:	40000800 	.word	0x40000800
 810925c:	40000c00 	.word	0x40000c00
 8109260:	40001800 	.word	0x40001800
 8109264:	40014000 	.word	0x40014000

08109268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8109268:	b480      	push	{r7}
 810926a:	b083      	sub	sp, #12
 810926c:	af00      	add	r7, sp, #0
 810926e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8109270:	bf00      	nop
 8109272:	370c      	adds	r7, #12
 8109274:	46bd      	mov	sp, r7
 8109276:	f85d 7b04 	ldr.w	r7, [sp], #4
 810927a:	4770      	bx	lr

0810927c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810927c:	b480      	push	{r7}
 810927e:	b083      	sub	sp, #12
 8109280:	af00      	add	r7, sp, #0
 8109282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8109284:	bf00      	nop
 8109286:	370c      	adds	r7, #12
 8109288:	46bd      	mov	sp, r7
 810928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810928e:	4770      	bx	lr

08109290 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8109290:	b480      	push	{r7}
 8109292:	b083      	sub	sp, #12
 8109294:	af00      	add	r7, sp, #0
 8109296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109298:	bf00      	nop
 810929a:	370c      	adds	r7, #12
 810929c:	46bd      	mov	sp, r7
 810929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092a2:	4770      	bx	lr

081092a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81092a4:	b580      	push	{r7, lr}
 81092a6:	b082      	sub	sp, #8
 81092a8:	af00      	add	r7, sp, #0
 81092aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81092ac:	687b      	ldr	r3, [r7, #4]
 81092ae:	2b00      	cmp	r3, #0
 81092b0:	d101      	bne.n	81092b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81092b2:	2301      	movs	r3, #1
 81092b4:	e042      	b.n	810933c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81092b6:	687b      	ldr	r3, [r7, #4]
 81092b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81092bc:	2b00      	cmp	r3, #0
 81092be:	d106      	bne.n	81092ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81092c0:	687b      	ldr	r3, [r7, #4]
 81092c2:	2200      	movs	r2, #0
 81092c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81092c8:	6878      	ldr	r0, [r7, #4]
 81092ca:	f7f9 fdc5 	bl	8102e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81092ce:	687b      	ldr	r3, [r7, #4]
 81092d0:	2224      	movs	r2, #36	; 0x24
 81092d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81092d6:	687b      	ldr	r3, [r7, #4]
 81092d8:	681b      	ldr	r3, [r3, #0]
 81092da:	681a      	ldr	r2, [r3, #0]
 81092dc:	687b      	ldr	r3, [r7, #4]
 81092de:	681b      	ldr	r3, [r3, #0]
 81092e0:	f022 0201 	bic.w	r2, r2, #1
 81092e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81092e6:	6878      	ldr	r0, [r7, #4]
 81092e8:	f000 f8c2 	bl	8109470 <UART_SetConfig>
 81092ec:	4603      	mov	r3, r0
 81092ee:	2b01      	cmp	r3, #1
 81092f0:	d101      	bne.n	81092f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81092f2:	2301      	movs	r3, #1
 81092f4:	e022      	b.n	810933c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81092f6:	687b      	ldr	r3, [r7, #4]
 81092f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81092fa:	2b00      	cmp	r3, #0
 81092fc:	d002      	beq.n	8109304 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81092fe:	6878      	ldr	r0, [r7, #4]
 8109300:	f000 fe1e 	bl	8109f40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8109304:	687b      	ldr	r3, [r7, #4]
 8109306:	681b      	ldr	r3, [r3, #0]
 8109308:	685a      	ldr	r2, [r3, #4]
 810930a:	687b      	ldr	r3, [r7, #4]
 810930c:	681b      	ldr	r3, [r3, #0]
 810930e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8109312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8109314:	687b      	ldr	r3, [r7, #4]
 8109316:	681b      	ldr	r3, [r3, #0]
 8109318:	689a      	ldr	r2, [r3, #8]
 810931a:	687b      	ldr	r3, [r7, #4]
 810931c:	681b      	ldr	r3, [r3, #0]
 810931e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8109322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8109324:	687b      	ldr	r3, [r7, #4]
 8109326:	681b      	ldr	r3, [r3, #0]
 8109328:	681a      	ldr	r2, [r3, #0]
 810932a:	687b      	ldr	r3, [r7, #4]
 810932c:	681b      	ldr	r3, [r3, #0]
 810932e:	f042 0201 	orr.w	r2, r2, #1
 8109332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8109334:	6878      	ldr	r0, [r7, #4]
 8109336:	f000 fea5 	bl	810a084 <UART_CheckIdleState>
 810933a:	4603      	mov	r3, r0
}
 810933c:	4618      	mov	r0, r3
 810933e:	3708      	adds	r7, #8
 8109340:	46bd      	mov	sp, r7
 8109342:	bd80      	pop	{r7, pc}

08109344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8109344:	b580      	push	{r7, lr}
 8109346:	b08a      	sub	sp, #40	; 0x28
 8109348:	af02      	add	r7, sp, #8
 810934a:	60f8      	str	r0, [r7, #12]
 810934c:	60b9      	str	r1, [r7, #8]
 810934e:	603b      	str	r3, [r7, #0]
 8109350:	4613      	mov	r3, r2
 8109352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8109354:	68fb      	ldr	r3, [r7, #12]
 8109356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810935a:	2b20      	cmp	r3, #32
 810935c:	f040 8083 	bne.w	8109466 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8109360:	68bb      	ldr	r3, [r7, #8]
 8109362:	2b00      	cmp	r3, #0
 8109364:	d002      	beq.n	810936c <HAL_UART_Transmit+0x28>
 8109366:	88fb      	ldrh	r3, [r7, #6]
 8109368:	2b00      	cmp	r3, #0
 810936a:	d101      	bne.n	8109370 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 810936c:	2301      	movs	r3, #1
 810936e:	e07b      	b.n	8109468 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8109370:	68fb      	ldr	r3, [r7, #12]
 8109372:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109376:	2b01      	cmp	r3, #1
 8109378:	d101      	bne.n	810937e <HAL_UART_Transmit+0x3a>
 810937a:	2302      	movs	r3, #2
 810937c:	e074      	b.n	8109468 <HAL_UART_Transmit+0x124>
 810937e:	68fb      	ldr	r3, [r7, #12]
 8109380:	2201      	movs	r2, #1
 8109382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109386:	68fb      	ldr	r3, [r7, #12]
 8109388:	2200      	movs	r2, #0
 810938a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810938e:	68fb      	ldr	r3, [r7, #12]
 8109390:	2221      	movs	r2, #33	; 0x21
 8109392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8109396:	f7f9 ff49 	bl	810322c <HAL_GetTick>
 810939a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810939c:	68fb      	ldr	r3, [r7, #12]
 810939e:	88fa      	ldrh	r2, [r7, #6]
 81093a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81093a4:	68fb      	ldr	r3, [r7, #12]
 81093a6:	88fa      	ldrh	r2, [r7, #6]
 81093a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81093ac:	68fb      	ldr	r3, [r7, #12]
 81093ae:	689b      	ldr	r3, [r3, #8]
 81093b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81093b4:	d108      	bne.n	81093c8 <HAL_UART_Transmit+0x84>
 81093b6:	68fb      	ldr	r3, [r7, #12]
 81093b8:	691b      	ldr	r3, [r3, #16]
 81093ba:	2b00      	cmp	r3, #0
 81093bc:	d104      	bne.n	81093c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81093be:	2300      	movs	r3, #0
 81093c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81093c2:	68bb      	ldr	r3, [r7, #8]
 81093c4:	61bb      	str	r3, [r7, #24]
 81093c6:	e003      	b.n	81093d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 81093c8:	68bb      	ldr	r3, [r7, #8]
 81093ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81093cc:	2300      	movs	r3, #0
 81093ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81093d0:	68fb      	ldr	r3, [r7, #12]
 81093d2:	2200      	movs	r2, #0
 81093d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 81093d8:	e02c      	b.n	8109434 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81093da:	683b      	ldr	r3, [r7, #0]
 81093dc:	9300      	str	r3, [sp, #0]
 81093de:	697b      	ldr	r3, [r7, #20]
 81093e0:	2200      	movs	r2, #0
 81093e2:	2180      	movs	r1, #128	; 0x80
 81093e4:	68f8      	ldr	r0, [r7, #12]
 81093e6:	f000 fe98 	bl	810a11a <UART_WaitOnFlagUntilTimeout>
 81093ea:	4603      	mov	r3, r0
 81093ec:	2b00      	cmp	r3, #0
 81093ee:	d001      	beq.n	81093f4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 81093f0:	2303      	movs	r3, #3
 81093f2:	e039      	b.n	8109468 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 81093f4:	69fb      	ldr	r3, [r7, #28]
 81093f6:	2b00      	cmp	r3, #0
 81093f8:	d10b      	bne.n	8109412 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81093fa:	69bb      	ldr	r3, [r7, #24]
 81093fc:	881b      	ldrh	r3, [r3, #0]
 81093fe:	461a      	mov	r2, r3
 8109400:	68fb      	ldr	r3, [r7, #12]
 8109402:	681b      	ldr	r3, [r3, #0]
 8109404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8109408:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 810940a:	69bb      	ldr	r3, [r7, #24]
 810940c:	3302      	adds	r3, #2
 810940e:	61bb      	str	r3, [r7, #24]
 8109410:	e007      	b.n	8109422 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8109412:	69fb      	ldr	r3, [r7, #28]
 8109414:	781a      	ldrb	r2, [r3, #0]
 8109416:	68fb      	ldr	r3, [r7, #12]
 8109418:	681b      	ldr	r3, [r3, #0]
 810941a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 810941c:	69fb      	ldr	r3, [r7, #28]
 810941e:	3301      	adds	r3, #1
 8109420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8109422:	68fb      	ldr	r3, [r7, #12]
 8109424:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109428:	b29b      	uxth	r3, r3
 810942a:	3b01      	subs	r3, #1
 810942c:	b29a      	uxth	r2, r3
 810942e:	68fb      	ldr	r3, [r7, #12]
 8109430:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8109434:	68fb      	ldr	r3, [r7, #12]
 8109436:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810943a:	b29b      	uxth	r3, r3
 810943c:	2b00      	cmp	r3, #0
 810943e:	d1cc      	bne.n	81093da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8109440:	683b      	ldr	r3, [r7, #0]
 8109442:	9300      	str	r3, [sp, #0]
 8109444:	697b      	ldr	r3, [r7, #20]
 8109446:	2200      	movs	r2, #0
 8109448:	2140      	movs	r1, #64	; 0x40
 810944a:	68f8      	ldr	r0, [r7, #12]
 810944c:	f000 fe65 	bl	810a11a <UART_WaitOnFlagUntilTimeout>
 8109450:	4603      	mov	r3, r0
 8109452:	2b00      	cmp	r3, #0
 8109454:	d001      	beq.n	810945a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8109456:	2303      	movs	r3, #3
 8109458:	e006      	b.n	8109468 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810945a:	68fb      	ldr	r3, [r7, #12]
 810945c:	2220      	movs	r2, #32
 810945e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8109462:	2300      	movs	r3, #0
 8109464:	e000      	b.n	8109468 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8109466:	2302      	movs	r3, #2
  }
}
 8109468:	4618      	mov	r0, r3
 810946a:	3720      	adds	r7, #32
 810946c:	46bd      	mov	sp, r7
 810946e:	bd80      	pop	{r7, pc}

08109470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8109470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109474:	b092      	sub	sp, #72	; 0x48
 8109476:	af00      	add	r7, sp, #0
 8109478:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810947a:	2300      	movs	r3, #0
 810947c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8109480:	697b      	ldr	r3, [r7, #20]
 8109482:	689a      	ldr	r2, [r3, #8]
 8109484:	697b      	ldr	r3, [r7, #20]
 8109486:	691b      	ldr	r3, [r3, #16]
 8109488:	431a      	orrs	r2, r3
 810948a:	697b      	ldr	r3, [r7, #20]
 810948c:	695b      	ldr	r3, [r3, #20]
 810948e:	431a      	orrs	r2, r3
 8109490:	697b      	ldr	r3, [r7, #20]
 8109492:	69db      	ldr	r3, [r3, #28]
 8109494:	4313      	orrs	r3, r2
 8109496:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8109498:	697b      	ldr	r3, [r7, #20]
 810949a:	681b      	ldr	r3, [r3, #0]
 810949c:	681a      	ldr	r2, [r3, #0]
 810949e:	4bbd      	ldr	r3, [pc, #756]	; (8109794 <UART_SetConfig+0x324>)
 81094a0:	4013      	ands	r3, r2
 81094a2:	697a      	ldr	r2, [r7, #20]
 81094a4:	6812      	ldr	r2, [r2, #0]
 81094a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81094a8:	430b      	orrs	r3, r1
 81094aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81094ac:	697b      	ldr	r3, [r7, #20]
 81094ae:	681b      	ldr	r3, [r3, #0]
 81094b0:	685b      	ldr	r3, [r3, #4]
 81094b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81094b6:	697b      	ldr	r3, [r7, #20]
 81094b8:	68da      	ldr	r2, [r3, #12]
 81094ba:	697b      	ldr	r3, [r7, #20]
 81094bc:	681b      	ldr	r3, [r3, #0]
 81094be:	430a      	orrs	r2, r1
 81094c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81094c2:	697b      	ldr	r3, [r7, #20]
 81094c4:	699b      	ldr	r3, [r3, #24]
 81094c6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81094c8:	697b      	ldr	r3, [r7, #20]
 81094ca:	681b      	ldr	r3, [r3, #0]
 81094cc:	4ab2      	ldr	r2, [pc, #712]	; (8109798 <UART_SetConfig+0x328>)
 81094ce:	4293      	cmp	r3, r2
 81094d0:	d004      	beq.n	81094dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81094d2:	697b      	ldr	r3, [r7, #20]
 81094d4:	6a1b      	ldr	r3, [r3, #32]
 81094d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81094d8:	4313      	orrs	r3, r2
 81094da:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81094dc:	697b      	ldr	r3, [r7, #20]
 81094de:	681b      	ldr	r3, [r3, #0]
 81094e0:	689b      	ldr	r3, [r3, #8]
 81094e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81094e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81094ea:	697a      	ldr	r2, [r7, #20]
 81094ec:	6812      	ldr	r2, [r2, #0]
 81094ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81094f0:	430b      	orrs	r3, r1
 81094f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81094f4:	697b      	ldr	r3, [r7, #20]
 81094f6:	681b      	ldr	r3, [r3, #0]
 81094f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81094fa:	f023 010f 	bic.w	r1, r3, #15
 81094fe:	697b      	ldr	r3, [r7, #20]
 8109500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8109502:	697b      	ldr	r3, [r7, #20]
 8109504:	681b      	ldr	r3, [r3, #0]
 8109506:	430a      	orrs	r2, r1
 8109508:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810950a:	697b      	ldr	r3, [r7, #20]
 810950c:	681b      	ldr	r3, [r3, #0]
 810950e:	4aa3      	ldr	r2, [pc, #652]	; (810979c <UART_SetConfig+0x32c>)
 8109510:	4293      	cmp	r3, r2
 8109512:	d177      	bne.n	8109604 <UART_SetConfig+0x194>
 8109514:	4ba2      	ldr	r3, [pc, #648]	; (81097a0 <UART_SetConfig+0x330>)
 8109516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810951c:	2b28      	cmp	r3, #40	; 0x28
 810951e:	d86d      	bhi.n	81095fc <UART_SetConfig+0x18c>
 8109520:	a201      	add	r2, pc, #4	; (adr r2, 8109528 <UART_SetConfig+0xb8>)
 8109522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109526:	bf00      	nop
 8109528:	081095cd 	.word	0x081095cd
 810952c:	081095fd 	.word	0x081095fd
 8109530:	081095fd 	.word	0x081095fd
 8109534:	081095fd 	.word	0x081095fd
 8109538:	081095fd 	.word	0x081095fd
 810953c:	081095fd 	.word	0x081095fd
 8109540:	081095fd 	.word	0x081095fd
 8109544:	081095fd 	.word	0x081095fd
 8109548:	081095d5 	.word	0x081095d5
 810954c:	081095fd 	.word	0x081095fd
 8109550:	081095fd 	.word	0x081095fd
 8109554:	081095fd 	.word	0x081095fd
 8109558:	081095fd 	.word	0x081095fd
 810955c:	081095fd 	.word	0x081095fd
 8109560:	081095fd 	.word	0x081095fd
 8109564:	081095fd 	.word	0x081095fd
 8109568:	081095dd 	.word	0x081095dd
 810956c:	081095fd 	.word	0x081095fd
 8109570:	081095fd 	.word	0x081095fd
 8109574:	081095fd 	.word	0x081095fd
 8109578:	081095fd 	.word	0x081095fd
 810957c:	081095fd 	.word	0x081095fd
 8109580:	081095fd 	.word	0x081095fd
 8109584:	081095fd 	.word	0x081095fd
 8109588:	081095e5 	.word	0x081095e5
 810958c:	081095fd 	.word	0x081095fd
 8109590:	081095fd 	.word	0x081095fd
 8109594:	081095fd 	.word	0x081095fd
 8109598:	081095fd 	.word	0x081095fd
 810959c:	081095fd 	.word	0x081095fd
 81095a0:	081095fd 	.word	0x081095fd
 81095a4:	081095fd 	.word	0x081095fd
 81095a8:	081095ed 	.word	0x081095ed
 81095ac:	081095fd 	.word	0x081095fd
 81095b0:	081095fd 	.word	0x081095fd
 81095b4:	081095fd 	.word	0x081095fd
 81095b8:	081095fd 	.word	0x081095fd
 81095bc:	081095fd 	.word	0x081095fd
 81095c0:	081095fd 	.word	0x081095fd
 81095c4:	081095fd 	.word	0x081095fd
 81095c8:	081095f5 	.word	0x081095f5
 81095cc:	2301      	movs	r3, #1
 81095ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81095d2:	e220      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81095d4:	2304      	movs	r3, #4
 81095d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81095da:	e21c      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81095dc:	2308      	movs	r3, #8
 81095de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81095e2:	e218      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81095e4:	2310      	movs	r3, #16
 81095e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81095ea:	e214      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81095ec:	2320      	movs	r3, #32
 81095ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81095f2:	e210      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81095f4:	2340      	movs	r3, #64	; 0x40
 81095f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81095fa:	e20c      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81095fc:	2380      	movs	r3, #128	; 0x80
 81095fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109602:	e208      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109604:	697b      	ldr	r3, [r7, #20]
 8109606:	681b      	ldr	r3, [r3, #0]
 8109608:	4a66      	ldr	r2, [pc, #408]	; (81097a4 <UART_SetConfig+0x334>)
 810960a:	4293      	cmp	r3, r2
 810960c:	d130      	bne.n	8109670 <UART_SetConfig+0x200>
 810960e:	4b64      	ldr	r3, [pc, #400]	; (81097a0 <UART_SetConfig+0x330>)
 8109610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109612:	f003 0307 	and.w	r3, r3, #7
 8109616:	2b05      	cmp	r3, #5
 8109618:	d826      	bhi.n	8109668 <UART_SetConfig+0x1f8>
 810961a:	a201      	add	r2, pc, #4	; (adr r2, 8109620 <UART_SetConfig+0x1b0>)
 810961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109620:	08109639 	.word	0x08109639
 8109624:	08109641 	.word	0x08109641
 8109628:	08109649 	.word	0x08109649
 810962c:	08109651 	.word	0x08109651
 8109630:	08109659 	.word	0x08109659
 8109634:	08109661 	.word	0x08109661
 8109638:	2300      	movs	r3, #0
 810963a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810963e:	e1ea      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109640:	2304      	movs	r3, #4
 8109642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109646:	e1e6      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109648:	2308      	movs	r3, #8
 810964a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810964e:	e1e2      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109650:	2310      	movs	r3, #16
 8109652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109656:	e1de      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109658:	2320      	movs	r3, #32
 810965a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810965e:	e1da      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109660:	2340      	movs	r3, #64	; 0x40
 8109662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109666:	e1d6      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109668:	2380      	movs	r3, #128	; 0x80
 810966a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810966e:	e1d2      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109670:	697b      	ldr	r3, [r7, #20]
 8109672:	681b      	ldr	r3, [r3, #0]
 8109674:	4a4c      	ldr	r2, [pc, #304]	; (81097a8 <UART_SetConfig+0x338>)
 8109676:	4293      	cmp	r3, r2
 8109678:	d130      	bne.n	81096dc <UART_SetConfig+0x26c>
 810967a:	4b49      	ldr	r3, [pc, #292]	; (81097a0 <UART_SetConfig+0x330>)
 810967c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810967e:	f003 0307 	and.w	r3, r3, #7
 8109682:	2b05      	cmp	r3, #5
 8109684:	d826      	bhi.n	81096d4 <UART_SetConfig+0x264>
 8109686:	a201      	add	r2, pc, #4	; (adr r2, 810968c <UART_SetConfig+0x21c>)
 8109688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810968c:	081096a5 	.word	0x081096a5
 8109690:	081096ad 	.word	0x081096ad
 8109694:	081096b5 	.word	0x081096b5
 8109698:	081096bd 	.word	0x081096bd
 810969c:	081096c5 	.word	0x081096c5
 81096a0:	081096cd 	.word	0x081096cd
 81096a4:	2300      	movs	r3, #0
 81096a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096aa:	e1b4      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81096ac:	2304      	movs	r3, #4
 81096ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096b2:	e1b0      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81096b4:	2308      	movs	r3, #8
 81096b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096ba:	e1ac      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81096bc:	2310      	movs	r3, #16
 81096be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096c2:	e1a8      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81096c4:	2320      	movs	r3, #32
 81096c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096ca:	e1a4      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81096cc:	2340      	movs	r3, #64	; 0x40
 81096ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096d2:	e1a0      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81096d4:	2380      	movs	r3, #128	; 0x80
 81096d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096da:	e19c      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81096dc:	697b      	ldr	r3, [r7, #20]
 81096de:	681b      	ldr	r3, [r3, #0]
 81096e0:	4a32      	ldr	r2, [pc, #200]	; (81097ac <UART_SetConfig+0x33c>)
 81096e2:	4293      	cmp	r3, r2
 81096e4:	d130      	bne.n	8109748 <UART_SetConfig+0x2d8>
 81096e6:	4b2e      	ldr	r3, [pc, #184]	; (81097a0 <UART_SetConfig+0x330>)
 81096e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81096ea:	f003 0307 	and.w	r3, r3, #7
 81096ee:	2b05      	cmp	r3, #5
 81096f0:	d826      	bhi.n	8109740 <UART_SetConfig+0x2d0>
 81096f2:	a201      	add	r2, pc, #4	; (adr r2, 81096f8 <UART_SetConfig+0x288>)
 81096f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81096f8:	08109711 	.word	0x08109711
 81096fc:	08109719 	.word	0x08109719
 8109700:	08109721 	.word	0x08109721
 8109704:	08109729 	.word	0x08109729
 8109708:	08109731 	.word	0x08109731
 810970c:	08109739 	.word	0x08109739
 8109710:	2300      	movs	r3, #0
 8109712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109716:	e17e      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109718:	2304      	movs	r3, #4
 810971a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810971e:	e17a      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109720:	2308      	movs	r3, #8
 8109722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109726:	e176      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109728:	2310      	movs	r3, #16
 810972a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810972e:	e172      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109730:	2320      	movs	r3, #32
 8109732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109736:	e16e      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109738:	2340      	movs	r3, #64	; 0x40
 810973a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810973e:	e16a      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109740:	2380      	movs	r3, #128	; 0x80
 8109742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109746:	e166      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109748:	697b      	ldr	r3, [r7, #20]
 810974a:	681b      	ldr	r3, [r3, #0]
 810974c:	4a18      	ldr	r2, [pc, #96]	; (81097b0 <UART_SetConfig+0x340>)
 810974e:	4293      	cmp	r3, r2
 8109750:	d140      	bne.n	81097d4 <UART_SetConfig+0x364>
 8109752:	4b13      	ldr	r3, [pc, #76]	; (81097a0 <UART_SetConfig+0x330>)
 8109754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109756:	f003 0307 	and.w	r3, r3, #7
 810975a:	2b05      	cmp	r3, #5
 810975c:	d836      	bhi.n	81097cc <UART_SetConfig+0x35c>
 810975e:	a201      	add	r2, pc, #4	; (adr r2, 8109764 <UART_SetConfig+0x2f4>)
 8109760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109764:	0810977d 	.word	0x0810977d
 8109768:	08109785 	.word	0x08109785
 810976c:	0810978d 	.word	0x0810978d
 8109770:	081097b5 	.word	0x081097b5
 8109774:	081097bd 	.word	0x081097bd
 8109778:	081097c5 	.word	0x081097c5
 810977c:	2300      	movs	r3, #0
 810977e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109782:	e148      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109784:	2304      	movs	r3, #4
 8109786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810978a:	e144      	b.n	8109a16 <UART_SetConfig+0x5a6>
 810978c:	2308      	movs	r3, #8
 810978e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109792:	e140      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109794:	cfff69f3 	.word	0xcfff69f3
 8109798:	58000c00 	.word	0x58000c00
 810979c:	40011000 	.word	0x40011000
 81097a0:	58024400 	.word	0x58024400
 81097a4:	40004400 	.word	0x40004400
 81097a8:	40004800 	.word	0x40004800
 81097ac:	40004c00 	.word	0x40004c00
 81097b0:	40005000 	.word	0x40005000
 81097b4:	2310      	movs	r3, #16
 81097b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097ba:	e12c      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81097bc:	2320      	movs	r3, #32
 81097be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097c2:	e128      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81097c4:	2340      	movs	r3, #64	; 0x40
 81097c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097ca:	e124      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81097cc:	2380      	movs	r3, #128	; 0x80
 81097ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097d2:	e120      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81097d4:	697b      	ldr	r3, [r7, #20]
 81097d6:	681b      	ldr	r3, [r3, #0]
 81097d8:	4acb      	ldr	r2, [pc, #812]	; (8109b08 <UART_SetConfig+0x698>)
 81097da:	4293      	cmp	r3, r2
 81097dc:	d176      	bne.n	81098cc <UART_SetConfig+0x45c>
 81097de:	4bcb      	ldr	r3, [pc, #812]	; (8109b0c <UART_SetConfig+0x69c>)
 81097e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81097e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81097e6:	2b28      	cmp	r3, #40	; 0x28
 81097e8:	d86c      	bhi.n	81098c4 <UART_SetConfig+0x454>
 81097ea:	a201      	add	r2, pc, #4	; (adr r2, 81097f0 <UART_SetConfig+0x380>)
 81097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81097f0:	08109895 	.word	0x08109895
 81097f4:	081098c5 	.word	0x081098c5
 81097f8:	081098c5 	.word	0x081098c5
 81097fc:	081098c5 	.word	0x081098c5
 8109800:	081098c5 	.word	0x081098c5
 8109804:	081098c5 	.word	0x081098c5
 8109808:	081098c5 	.word	0x081098c5
 810980c:	081098c5 	.word	0x081098c5
 8109810:	0810989d 	.word	0x0810989d
 8109814:	081098c5 	.word	0x081098c5
 8109818:	081098c5 	.word	0x081098c5
 810981c:	081098c5 	.word	0x081098c5
 8109820:	081098c5 	.word	0x081098c5
 8109824:	081098c5 	.word	0x081098c5
 8109828:	081098c5 	.word	0x081098c5
 810982c:	081098c5 	.word	0x081098c5
 8109830:	081098a5 	.word	0x081098a5
 8109834:	081098c5 	.word	0x081098c5
 8109838:	081098c5 	.word	0x081098c5
 810983c:	081098c5 	.word	0x081098c5
 8109840:	081098c5 	.word	0x081098c5
 8109844:	081098c5 	.word	0x081098c5
 8109848:	081098c5 	.word	0x081098c5
 810984c:	081098c5 	.word	0x081098c5
 8109850:	081098ad 	.word	0x081098ad
 8109854:	081098c5 	.word	0x081098c5
 8109858:	081098c5 	.word	0x081098c5
 810985c:	081098c5 	.word	0x081098c5
 8109860:	081098c5 	.word	0x081098c5
 8109864:	081098c5 	.word	0x081098c5
 8109868:	081098c5 	.word	0x081098c5
 810986c:	081098c5 	.word	0x081098c5
 8109870:	081098b5 	.word	0x081098b5
 8109874:	081098c5 	.word	0x081098c5
 8109878:	081098c5 	.word	0x081098c5
 810987c:	081098c5 	.word	0x081098c5
 8109880:	081098c5 	.word	0x081098c5
 8109884:	081098c5 	.word	0x081098c5
 8109888:	081098c5 	.word	0x081098c5
 810988c:	081098c5 	.word	0x081098c5
 8109890:	081098bd 	.word	0x081098bd
 8109894:	2301      	movs	r3, #1
 8109896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810989a:	e0bc      	b.n	8109a16 <UART_SetConfig+0x5a6>
 810989c:	2304      	movs	r3, #4
 810989e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81098a2:	e0b8      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81098a4:	2308      	movs	r3, #8
 81098a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81098aa:	e0b4      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81098ac:	2310      	movs	r3, #16
 81098ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81098b2:	e0b0      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81098b4:	2320      	movs	r3, #32
 81098b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81098ba:	e0ac      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81098bc:	2340      	movs	r3, #64	; 0x40
 81098be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81098c2:	e0a8      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81098c4:	2380      	movs	r3, #128	; 0x80
 81098c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81098ca:	e0a4      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81098cc:	697b      	ldr	r3, [r7, #20]
 81098ce:	681b      	ldr	r3, [r3, #0]
 81098d0:	4a8f      	ldr	r2, [pc, #572]	; (8109b10 <UART_SetConfig+0x6a0>)
 81098d2:	4293      	cmp	r3, r2
 81098d4:	d130      	bne.n	8109938 <UART_SetConfig+0x4c8>
 81098d6:	4b8d      	ldr	r3, [pc, #564]	; (8109b0c <UART_SetConfig+0x69c>)
 81098d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81098da:	f003 0307 	and.w	r3, r3, #7
 81098de:	2b05      	cmp	r3, #5
 81098e0:	d826      	bhi.n	8109930 <UART_SetConfig+0x4c0>
 81098e2:	a201      	add	r2, pc, #4	; (adr r2, 81098e8 <UART_SetConfig+0x478>)
 81098e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81098e8:	08109901 	.word	0x08109901
 81098ec:	08109909 	.word	0x08109909
 81098f0:	08109911 	.word	0x08109911
 81098f4:	08109919 	.word	0x08109919
 81098f8:	08109921 	.word	0x08109921
 81098fc:	08109929 	.word	0x08109929
 8109900:	2300      	movs	r3, #0
 8109902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109906:	e086      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109908:	2304      	movs	r3, #4
 810990a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810990e:	e082      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109910:	2308      	movs	r3, #8
 8109912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109916:	e07e      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109918:	2310      	movs	r3, #16
 810991a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810991e:	e07a      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109920:	2320      	movs	r3, #32
 8109922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109926:	e076      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109928:	2340      	movs	r3, #64	; 0x40
 810992a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810992e:	e072      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109930:	2380      	movs	r3, #128	; 0x80
 8109932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109936:	e06e      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109938:	697b      	ldr	r3, [r7, #20]
 810993a:	681b      	ldr	r3, [r3, #0]
 810993c:	4a75      	ldr	r2, [pc, #468]	; (8109b14 <UART_SetConfig+0x6a4>)
 810993e:	4293      	cmp	r3, r2
 8109940:	d130      	bne.n	81099a4 <UART_SetConfig+0x534>
 8109942:	4b72      	ldr	r3, [pc, #456]	; (8109b0c <UART_SetConfig+0x69c>)
 8109944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109946:	f003 0307 	and.w	r3, r3, #7
 810994a:	2b05      	cmp	r3, #5
 810994c:	d826      	bhi.n	810999c <UART_SetConfig+0x52c>
 810994e:	a201      	add	r2, pc, #4	; (adr r2, 8109954 <UART_SetConfig+0x4e4>)
 8109950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109954:	0810996d 	.word	0x0810996d
 8109958:	08109975 	.word	0x08109975
 810995c:	0810997d 	.word	0x0810997d
 8109960:	08109985 	.word	0x08109985
 8109964:	0810998d 	.word	0x0810998d
 8109968:	08109995 	.word	0x08109995
 810996c:	2300      	movs	r3, #0
 810996e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109972:	e050      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109974:	2304      	movs	r3, #4
 8109976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810997a:	e04c      	b.n	8109a16 <UART_SetConfig+0x5a6>
 810997c:	2308      	movs	r3, #8
 810997e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109982:	e048      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109984:	2310      	movs	r3, #16
 8109986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810998a:	e044      	b.n	8109a16 <UART_SetConfig+0x5a6>
 810998c:	2320      	movs	r3, #32
 810998e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109992:	e040      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109994:	2340      	movs	r3, #64	; 0x40
 8109996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810999a:	e03c      	b.n	8109a16 <UART_SetConfig+0x5a6>
 810999c:	2380      	movs	r3, #128	; 0x80
 810999e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099a2:	e038      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81099a4:	697b      	ldr	r3, [r7, #20]
 81099a6:	681b      	ldr	r3, [r3, #0]
 81099a8:	4a5b      	ldr	r2, [pc, #364]	; (8109b18 <UART_SetConfig+0x6a8>)
 81099aa:	4293      	cmp	r3, r2
 81099ac:	d130      	bne.n	8109a10 <UART_SetConfig+0x5a0>
 81099ae:	4b57      	ldr	r3, [pc, #348]	; (8109b0c <UART_SetConfig+0x69c>)
 81099b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81099b2:	f003 0307 	and.w	r3, r3, #7
 81099b6:	2b05      	cmp	r3, #5
 81099b8:	d826      	bhi.n	8109a08 <UART_SetConfig+0x598>
 81099ba:	a201      	add	r2, pc, #4	; (adr r2, 81099c0 <UART_SetConfig+0x550>)
 81099bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81099c0:	081099d9 	.word	0x081099d9
 81099c4:	081099e1 	.word	0x081099e1
 81099c8:	081099e9 	.word	0x081099e9
 81099cc:	081099f1 	.word	0x081099f1
 81099d0:	081099f9 	.word	0x081099f9
 81099d4:	08109a01 	.word	0x08109a01
 81099d8:	2302      	movs	r3, #2
 81099da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099de:	e01a      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81099e0:	2304      	movs	r3, #4
 81099e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099e6:	e016      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81099e8:	2308      	movs	r3, #8
 81099ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099ee:	e012      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81099f0:	2310      	movs	r3, #16
 81099f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099f6:	e00e      	b.n	8109a16 <UART_SetConfig+0x5a6>
 81099f8:	2320      	movs	r3, #32
 81099fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099fe:	e00a      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109a00:	2340      	movs	r3, #64	; 0x40
 8109a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a06:	e006      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109a08:	2380      	movs	r3, #128	; 0x80
 8109a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a0e:	e002      	b.n	8109a16 <UART_SetConfig+0x5a6>
 8109a10:	2380      	movs	r3, #128	; 0x80
 8109a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8109a16:	697b      	ldr	r3, [r7, #20]
 8109a18:	681b      	ldr	r3, [r3, #0]
 8109a1a:	4a3f      	ldr	r2, [pc, #252]	; (8109b18 <UART_SetConfig+0x6a8>)
 8109a1c:	4293      	cmp	r3, r2
 8109a1e:	f040 80f8 	bne.w	8109c12 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8109a22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109a26:	2b20      	cmp	r3, #32
 8109a28:	dc46      	bgt.n	8109ab8 <UART_SetConfig+0x648>
 8109a2a:	2b02      	cmp	r3, #2
 8109a2c:	f2c0 8082 	blt.w	8109b34 <UART_SetConfig+0x6c4>
 8109a30:	3b02      	subs	r3, #2
 8109a32:	2b1e      	cmp	r3, #30
 8109a34:	d87e      	bhi.n	8109b34 <UART_SetConfig+0x6c4>
 8109a36:	a201      	add	r2, pc, #4	; (adr r2, 8109a3c <UART_SetConfig+0x5cc>)
 8109a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109a3c:	08109abf 	.word	0x08109abf
 8109a40:	08109b35 	.word	0x08109b35
 8109a44:	08109ac7 	.word	0x08109ac7
 8109a48:	08109b35 	.word	0x08109b35
 8109a4c:	08109b35 	.word	0x08109b35
 8109a50:	08109b35 	.word	0x08109b35
 8109a54:	08109ad7 	.word	0x08109ad7
 8109a58:	08109b35 	.word	0x08109b35
 8109a5c:	08109b35 	.word	0x08109b35
 8109a60:	08109b35 	.word	0x08109b35
 8109a64:	08109b35 	.word	0x08109b35
 8109a68:	08109b35 	.word	0x08109b35
 8109a6c:	08109b35 	.word	0x08109b35
 8109a70:	08109b35 	.word	0x08109b35
 8109a74:	08109ae7 	.word	0x08109ae7
 8109a78:	08109b35 	.word	0x08109b35
 8109a7c:	08109b35 	.word	0x08109b35
 8109a80:	08109b35 	.word	0x08109b35
 8109a84:	08109b35 	.word	0x08109b35
 8109a88:	08109b35 	.word	0x08109b35
 8109a8c:	08109b35 	.word	0x08109b35
 8109a90:	08109b35 	.word	0x08109b35
 8109a94:	08109b35 	.word	0x08109b35
 8109a98:	08109b35 	.word	0x08109b35
 8109a9c:	08109b35 	.word	0x08109b35
 8109aa0:	08109b35 	.word	0x08109b35
 8109aa4:	08109b35 	.word	0x08109b35
 8109aa8:	08109b35 	.word	0x08109b35
 8109aac:	08109b35 	.word	0x08109b35
 8109ab0:	08109b35 	.word	0x08109b35
 8109ab4:	08109b27 	.word	0x08109b27
 8109ab8:	2b40      	cmp	r3, #64	; 0x40
 8109aba:	d037      	beq.n	8109b2c <UART_SetConfig+0x6bc>
 8109abc:	e03a      	b.n	8109b34 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8109abe:	f7fd fc55 	bl	810736c <HAL_RCCEx_GetD3PCLK1Freq>
 8109ac2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109ac4:	e03c      	b.n	8109b40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109aca:	4618      	mov	r0, r3
 8109acc:	f7fd fc64 	bl	8107398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109ad4:	e034      	b.n	8109b40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109ad6:	f107 0318 	add.w	r3, r7, #24
 8109ada:	4618      	mov	r0, r3
 8109adc:	f7fd fdb0 	bl	8107640 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109ae0:	69fb      	ldr	r3, [r7, #28]
 8109ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109ae4:	e02c      	b.n	8109b40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109ae6:	4b09      	ldr	r3, [pc, #36]	; (8109b0c <UART_SetConfig+0x69c>)
 8109ae8:	681b      	ldr	r3, [r3, #0]
 8109aea:	f003 0320 	and.w	r3, r3, #32
 8109aee:	2b00      	cmp	r3, #0
 8109af0:	d016      	beq.n	8109b20 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109af2:	4b06      	ldr	r3, [pc, #24]	; (8109b0c <UART_SetConfig+0x69c>)
 8109af4:	681b      	ldr	r3, [r3, #0]
 8109af6:	08db      	lsrs	r3, r3, #3
 8109af8:	f003 0303 	and.w	r3, r3, #3
 8109afc:	4a07      	ldr	r2, [pc, #28]	; (8109b1c <UART_SetConfig+0x6ac>)
 8109afe:	fa22 f303 	lsr.w	r3, r2, r3
 8109b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109b04:	e01c      	b.n	8109b40 <UART_SetConfig+0x6d0>
 8109b06:	bf00      	nop
 8109b08:	40011400 	.word	0x40011400
 8109b0c:	58024400 	.word	0x58024400
 8109b10:	40007800 	.word	0x40007800
 8109b14:	40007c00 	.word	0x40007c00
 8109b18:	58000c00 	.word	0x58000c00
 8109b1c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8109b20:	4b9d      	ldr	r3, [pc, #628]	; (8109d98 <UART_SetConfig+0x928>)
 8109b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b24:	e00c      	b.n	8109b40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109b26:	4b9d      	ldr	r3, [pc, #628]	; (8109d9c <UART_SetConfig+0x92c>)
 8109b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b2a:	e009      	b.n	8109b40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b32:	e005      	b.n	8109b40 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8109b34:	2300      	movs	r3, #0
 8109b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109b38:	2301      	movs	r3, #1
 8109b3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109b3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8109b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109b42:	2b00      	cmp	r3, #0
 8109b44:	f000 81de 	beq.w	8109f04 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8109b48:	697b      	ldr	r3, [r7, #20]
 8109b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109b4c:	4a94      	ldr	r2, [pc, #592]	; (8109da0 <UART_SetConfig+0x930>)
 8109b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109b52:	461a      	mov	r2, r3
 8109b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109b56:	fbb3 f3f2 	udiv	r3, r3, r2
 8109b5a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109b5c:	697b      	ldr	r3, [r7, #20]
 8109b5e:	685a      	ldr	r2, [r3, #4]
 8109b60:	4613      	mov	r3, r2
 8109b62:	005b      	lsls	r3, r3, #1
 8109b64:	4413      	add	r3, r2
 8109b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109b68:	429a      	cmp	r2, r3
 8109b6a:	d305      	bcc.n	8109b78 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8109b6c:	697b      	ldr	r3, [r7, #20]
 8109b6e:	685b      	ldr	r3, [r3, #4]
 8109b70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109b74:	429a      	cmp	r2, r3
 8109b76:	d903      	bls.n	8109b80 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8109b78:	2301      	movs	r3, #1
 8109b7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109b7e:	e1c1      	b.n	8109f04 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109b82:	2200      	movs	r2, #0
 8109b84:	60bb      	str	r3, [r7, #8]
 8109b86:	60fa      	str	r2, [r7, #12]
 8109b88:	697b      	ldr	r3, [r7, #20]
 8109b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109b8c:	4a84      	ldr	r2, [pc, #528]	; (8109da0 <UART_SetConfig+0x930>)
 8109b8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109b92:	b29b      	uxth	r3, r3
 8109b94:	2200      	movs	r2, #0
 8109b96:	603b      	str	r3, [r7, #0]
 8109b98:	607a      	str	r2, [r7, #4]
 8109b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109b9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8109ba2:	f7f6 fe59 	bl	8100858 <__aeabi_uldivmod>
 8109ba6:	4602      	mov	r2, r0
 8109ba8:	460b      	mov	r3, r1
 8109baa:	4610      	mov	r0, r2
 8109bac:	4619      	mov	r1, r3
 8109bae:	f04f 0200 	mov.w	r2, #0
 8109bb2:	f04f 0300 	mov.w	r3, #0
 8109bb6:	020b      	lsls	r3, r1, #8
 8109bb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8109bbc:	0202      	lsls	r2, r0, #8
 8109bbe:	6979      	ldr	r1, [r7, #20]
 8109bc0:	6849      	ldr	r1, [r1, #4]
 8109bc2:	0849      	lsrs	r1, r1, #1
 8109bc4:	2000      	movs	r0, #0
 8109bc6:	460c      	mov	r4, r1
 8109bc8:	4605      	mov	r5, r0
 8109bca:	eb12 0804 	adds.w	r8, r2, r4
 8109bce:	eb43 0905 	adc.w	r9, r3, r5
 8109bd2:	697b      	ldr	r3, [r7, #20]
 8109bd4:	685b      	ldr	r3, [r3, #4]
 8109bd6:	2200      	movs	r2, #0
 8109bd8:	469a      	mov	sl, r3
 8109bda:	4693      	mov	fp, r2
 8109bdc:	4652      	mov	r2, sl
 8109bde:	465b      	mov	r3, fp
 8109be0:	4640      	mov	r0, r8
 8109be2:	4649      	mov	r1, r9
 8109be4:	f7f6 fe38 	bl	8100858 <__aeabi_uldivmod>
 8109be8:	4602      	mov	r2, r0
 8109bea:	460b      	mov	r3, r1
 8109bec:	4613      	mov	r3, r2
 8109bee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8109bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109bf6:	d308      	bcc.n	8109c0a <UART_SetConfig+0x79a>
 8109bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109bfe:	d204      	bcs.n	8109c0a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8109c00:	697b      	ldr	r3, [r7, #20]
 8109c02:	681b      	ldr	r3, [r3, #0]
 8109c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8109c06:	60da      	str	r2, [r3, #12]
 8109c08:	e17c      	b.n	8109f04 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8109c0a:	2301      	movs	r3, #1
 8109c0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109c10:	e178      	b.n	8109f04 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8109c12:	697b      	ldr	r3, [r7, #20]
 8109c14:	69db      	ldr	r3, [r3, #28]
 8109c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109c1a:	f040 80c5 	bne.w	8109da8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8109c1e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109c22:	2b20      	cmp	r3, #32
 8109c24:	dc48      	bgt.n	8109cb8 <UART_SetConfig+0x848>
 8109c26:	2b00      	cmp	r3, #0
 8109c28:	db7b      	blt.n	8109d22 <UART_SetConfig+0x8b2>
 8109c2a:	2b20      	cmp	r3, #32
 8109c2c:	d879      	bhi.n	8109d22 <UART_SetConfig+0x8b2>
 8109c2e:	a201      	add	r2, pc, #4	; (adr r2, 8109c34 <UART_SetConfig+0x7c4>)
 8109c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109c34:	08109cbf 	.word	0x08109cbf
 8109c38:	08109cc7 	.word	0x08109cc7
 8109c3c:	08109d23 	.word	0x08109d23
 8109c40:	08109d23 	.word	0x08109d23
 8109c44:	08109ccf 	.word	0x08109ccf
 8109c48:	08109d23 	.word	0x08109d23
 8109c4c:	08109d23 	.word	0x08109d23
 8109c50:	08109d23 	.word	0x08109d23
 8109c54:	08109cdf 	.word	0x08109cdf
 8109c58:	08109d23 	.word	0x08109d23
 8109c5c:	08109d23 	.word	0x08109d23
 8109c60:	08109d23 	.word	0x08109d23
 8109c64:	08109d23 	.word	0x08109d23
 8109c68:	08109d23 	.word	0x08109d23
 8109c6c:	08109d23 	.word	0x08109d23
 8109c70:	08109d23 	.word	0x08109d23
 8109c74:	08109cef 	.word	0x08109cef
 8109c78:	08109d23 	.word	0x08109d23
 8109c7c:	08109d23 	.word	0x08109d23
 8109c80:	08109d23 	.word	0x08109d23
 8109c84:	08109d23 	.word	0x08109d23
 8109c88:	08109d23 	.word	0x08109d23
 8109c8c:	08109d23 	.word	0x08109d23
 8109c90:	08109d23 	.word	0x08109d23
 8109c94:	08109d23 	.word	0x08109d23
 8109c98:	08109d23 	.word	0x08109d23
 8109c9c:	08109d23 	.word	0x08109d23
 8109ca0:	08109d23 	.word	0x08109d23
 8109ca4:	08109d23 	.word	0x08109d23
 8109ca8:	08109d23 	.word	0x08109d23
 8109cac:	08109d23 	.word	0x08109d23
 8109cb0:	08109d23 	.word	0x08109d23
 8109cb4:	08109d15 	.word	0x08109d15
 8109cb8:	2b40      	cmp	r3, #64	; 0x40
 8109cba:	d02e      	beq.n	8109d1a <UART_SetConfig+0x8aa>
 8109cbc:	e031      	b.n	8109d22 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109cbe:	f7fb ff11 	bl	8105ae4 <HAL_RCC_GetPCLK1Freq>
 8109cc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109cc4:	e033      	b.n	8109d2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109cc6:	f7fb ff23 	bl	8105b10 <HAL_RCC_GetPCLK2Freq>
 8109cca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109ccc:	e02f      	b.n	8109d2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109cd2:	4618      	mov	r0, r3
 8109cd4:	f7fd fb60 	bl	8107398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109cdc:	e027      	b.n	8109d2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109cde:	f107 0318 	add.w	r3, r7, #24
 8109ce2:	4618      	mov	r0, r3
 8109ce4:	f7fd fcac 	bl	8107640 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109ce8:	69fb      	ldr	r3, [r7, #28]
 8109cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109cec:	e01f      	b.n	8109d2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109cee:	4b2d      	ldr	r3, [pc, #180]	; (8109da4 <UART_SetConfig+0x934>)
 8109cf0:	681b      	ldr	r3, [r3, #0]
 8109cf2:	f003 0320 	and.w	r3, r3, #32
 8109cf6:	2b00      	cmp	r3, #0
 8109cf8:	d009      	beq.n	8109d0e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109cfa:	4b2a      	ldr	r3, [pc, #168]	; (8109da4 <UART_SetConfig+0x934>)
 8109cfc:	681b      	ldr	r3, [r3, #0]
 8109cfe:	08db      	lsrs	r3, r3, #3
 8109d00:	f003 0303 	and.w	r3, r3, #3
 8109d04:	4a24      	ldr	r2, [pc, #144]	; (8109d98 <UART_SetConfig+0x928>)
 8109d06:	fa22 f303 	lsr.w	r3, r2, r3
 8109d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109d0c:	e00f      	b.n	8109d2e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8109d0e:	4b22      	ldr	r3, [pc, #136]	; (8109d98 <UART_SetConfig+0x928>)
 8109d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d12:	e00c      	b.n	8109d2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109d14:	4b21      	ldr	r3, [pc, #132]	; (8109d9c <UART_SetConfig+0x92c>)
 8109d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d18:	e009      	b.n	8109d2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d20:	e005      	b.n	8109d2e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8109d22:	2300      	movs	r3, #0
 8109d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109d26:	2301      	movs	r3, #1
 8109d28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109d2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8109d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109d30:	2b00      	cmp	r3, #0
 8109d32:	f000 80e7 	beq.w	8109f04 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109d36:	697b      	ldr	r3, [r7, #20]
 8109d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109d3a:	4a19      	ldr	r2, [pc, #100]	; (8109da0 <UART_SetConfig+0x930>)
 8109d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109d40:	461a      	mov	r2, r3
 8109d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8109d48:	005a      	lsls	r2, r3, #1
 8109d4a:	697b      	ldr	r3, [r7, #20]
 8109d4c:	685b      	ldr	r3, [r3, #4]
 8109d4e:	085b      	lsrs	r3, r3, #1
 8109d50:	441a      	add	r2, r3
 8109d52:	697b      	ldr	r3, [r7, #20]
 8109d54:	685b      	ldr	r3, [r3, #4]
 8109d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8109d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109d5e:	2b0f      	cmp	r3, #15
 8109d60:	d916      	bls.n	8109d90 <UART_SetConfig+0x920>
 8109d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109d68:	d212      	bcs.n	8109d90 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8109d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109d6c:	b29b      	uxth	r3, r3
 8109d6e:	f023 030f 	bic.w	r3, r3, #15
 8109d72:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8109d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109d76:	085b      	lsrs	r3, r3, #1
 8109d78:	b29b      	uxth	r3, r3
 8109d7a:	f003 0307 	and.w	r3, r3, #7
 8109d7e:	b29a      	uxth	r2, r3
 8109d80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8109d82:	4313      	orrs	r3, r2
 8109d84:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8109d86:	697b      	ldr	r3, [r7, #20]
 8109d88:	681b      	ldr	r3, [r3, #0]
 8109d8a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8109d8c:	60da      	str	r2, [r3, #12]
 8109d8e:	e0b9      	b.n	8109f04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109d90:	2301      	movs	r3, #1
 8109d92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109d96:	e0b5      	b.n	8109f04 <UART_SetConfig+0xa94>
 8109d98:	03d09000 	.word	0x03d09000
 8109d9c:	003d0900 	.word	0x003d0900
 8109da0:	0810b300 	.word	0x0810b300
 8109da4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8109da8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109dac:	2b20      	cmp	r3, #32
 8109dae:	dc49      	bgt.n	8109e44 <UART_SetConfig+0x9d4>
 8109db0:	2b00      	cmp	r3, #0
 8109db2:	db7c      	blt.n	8109eae <UART_SetConfig+0xa3e>
 8109db4:	2b20      	cmp	r3, #32
 8109db6:	d87a      	bhi.n	8109eae <UART_SetConfig+0xa3e>
 8109db8:	a201      	add	r2, pc, #4	; (adr r2, 8109dc0 <UART_SetConfig+0x950>)
 8109dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109dbe:	bf00      	nop
 8109dc0:	08109e4b 	.word	0x08109e4b
 8109dc4:	08109e53 	.word	0x08109e53
 8109dc8:	08109eaf 	.word	0x08109eaf
 8109dcc:	08109eaf 	.word	0x08109eaf
 8109dd0:	08109e5b 	.word	0x08109e5b
 8109dd4:	08109eaf 	.word	0x08109eaf
 8109dd8:	08109eaf 	.word	0x08109eaf
 8109ddc:	08109eaf 	.word	0x08109eaf
 8109de0:	08109e6b 	.word	0x08109e6b
 8109de4:	08109eaf 	.word	0x08109eaf
 8109de8:	08109eaf 	.word	0x08109eaf
 8109dec:	08109eaf 	.word	0x08109eaf
 8109df0:	08109eaf 	.word	0x08109eaf
 8109df4:	08109eaf 	.word	0x08109eaf
 8109df8:	08109eaf 	.word	0x08109eaf
 8109dfc:	08109eaf 	.word	0x08109eaf
 8109e00:	08109e7b 	.word	0x08109e7b
 8109e04:	08109eaf 	.word	0x08109eaf
 8109e08:	08109eaf 	.word	0x08109eaf
 8109e0c:	08109eaf 	.word	0x08109eaf
 8109e10:	08109eaf 	.word	0x08109eaf
 8109e14:	08109eaf 	.word	0x08109eaf
 8109e18:	08109eaf 	.word	0x08109eaf
 8109e1c:	08109eaf 	.word	0x08109eaf
 8109e20:	08109eaf 	.word	0x08109eaf
 8109e24:	08109eaf 	.word	0x08109eaf
 8109e28:	08109eaf 	.word	0x08109eaf
 8109e2c:	08109eaf 	.word	0x08109eaf
 8109e30:	08109eaf 	.word	0x08109eaf
 8109e34:	08109eaf 	.word	0x08109eaf
 8109e38:	08109eaf 	.word	0x08109eaf
 8109e3c:	08109eaf 	.word	0x08109eaf
 8109e40:	08109ea1 	.word	0x08109ea1
 8109e44:	2b40      	cmp	r3, #64	; 0x40
 8109e46:	d02e      	beq.n	8109ea6 <UART_SetConfig+0xa36>
 8109e48:	e031      	b.n	8109eae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109e4a:	f7fb fe4b 	bl	8105ae4 <HAL_RCC_GetPCLK1Freq>
 8109e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109e50:	e033      	b.n	8109eba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109e52:	f7fb fe5d 	bl	8105b10 <HAL_RCC_GetPCLK2Freq>
 8109e56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109e58:	e02f      	b.n	8109eba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109e5e:	4618      	mov	r0, r3
 8109e60:	f7fd fa9a 	bl	8107398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109e68:	e027      	b.n	8109eba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109e6a:	f107 0318 	add.w	r3, r7, #24
 8109e6e:	4618      	mov	r0, r3
 8109e70:	f7fd fbe6 	bl	8107640 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109e74:	69fb      	ldr	r3, [r7, #28]
 8109e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109e78:	e01f      	b.n	8109eba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109e7a:	4b2d      	ldr	r3, [pc, #180]	; (8109f30 <UART_SetConfig+0xac0>)
 8109e7c:	681b      	ldr	r3, [r3, #0]
 8109e7e:	f003 0320 	and.w	r3, r3, #32
 8109e82:	2b00      	cmp	r3, #0
 8109e84:	d009      	beq.n	8109e9a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109e86:	4b2a      	ldr	r3, [pc, #168]	; (8109f30 <UART_SetConfig+0xac0>)
 8109e88:	681b      	ldr	r3, [r3, #0]
 8109e8a:	08db      	lsrs	r3, r3, #3
 8109e8c:	f003 0303 	and.w	r3, r3, #3
 8109e90:	4a28      	ldr	r2, [pc, #160]	; (8109f34 <UART_SetConfig+0xac4>)
 8109e92:	fa22 f303 	lsr.w	r3, r2, r3
 8109e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109e98:	e00f      	b.n	8109eba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8109e9a:	4b26      	ldr	r3, [pc, #152]	; (8109f34 <UART_SetConfig+0xac4>)
 8109e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109e9e:	e00c      	b.n	8109eba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109ea0:	4b25      	ldr	r3, [pc, #148]	; (8109f38 <UART_SetConfig+0xac8>)
 8109ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109ea4:	e009      	b.n	8109eba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109eac:	e005      	b.n	8109eba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8109eae:	2300      	movs	r3, #0
 8109eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109eb2:	2301      	movs	r3, #1
 8109eb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109eb8:	bf00      	nop
    }

    if (pclk != 0U)
 8109eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109ebc:	2b00      	cmp	r3, #0
 8109ebe:	d021      	beq.n	8109f04 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109ec0:	697b      	ldr	r3, [r7, #20]
 8109ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109ec4:	4a1d      	ldr	r2, [pc, #116]	; (8109f3c <UART_SetConfig+0xacc>)
 8109ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109eca:	461a      	mov	r2, r3
 8109ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109ece:	fbb3 f2f2 	udiv	r2, r3, r2
 8109ed2:	697b      	ldr	r3, [r7, #20]
 8109ed4:	685b      	ldr	r3, [r3, #4]
 8109ed6:	085b      	lsrs	r3, r3, #1
 8109ed8:	441a      	add	r2, r3
 8109eda:	697b      	ldr	r3, [r7, #20]
 8109edc:	685b      	ldr	r3, [r3, #4]
 8109ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8109ee2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109ee6:	2b0f      	cmp	r3, #15
 8109ee8:	d909      	bls.n	8109efe <UART_SetConfig+0xa8e>
 8109eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109ef0:	d205      	bcs.n	8109efe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8109ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109ef4:	b29a      	uxth	r2, r3
 8109ef6:	697b      	ldr	r3, [r7, #20]
 8109ef8:	681b      	ldr	r3, [r3, #0]
 8109efa:	60da      	str	r2, [r3, #12]
 8109efc:	e002      	b.n	8109f04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109efe:	2301      	movs	r3, #1
 8109f00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8109f04:	697b      	ldr	r3, [r7, #20]
 8109f06:	2201      	movs	r2, #1
 8109f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8109f0c:	697b      	ldr	r3, [r7, #20]
 8109f0e:	2201      	movs	r2, #1
 8109f10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8109f14:	697b      	ldr	r3, [r7, #20]
 8109f16:	2200      	movs	r2, #0
 8109f18:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8109f1a:	697b      	ldr	r3, [r7, #20]
 8109f1c:	2200      	movs	r2, #0
 8109f1e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8109f20:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8109f24:	4618      	mov	r0, r3
 8109f26:	3748      	adds	r7, #72	; 0x48
 8109f28:	46bd      	mov	sp, r7
 8109f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8109f2e:	bf00      	nop
 8109f30:	58024400 	.word	0x58024400
 8109f34:	03d09000 	.word	0x03d09000
 8109f38:	003d0900 	.word	0x003d0900
 8109f3c:	0810b300 	.word	0x0810b300

08109f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109f40:	b480      	push	{r7}
 8109f42:	b083      	sub	sp, #12
 8109f44:	af00      	add	r7, sp, #0
 8109f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109f48:	687b      	ldr	r3, [r7, #4]
 8109f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f4c:	f003 0301 	and.w	r3, r3, #1
 8109f50:	2b00      	cmp	r3, #0
 8109f52:	d00a      	beq.n	8109f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8109f54:	687b      	ldr	r3, [r7, #4]
 8109f56:	681b      	ldr	r3, [r3, #0]
 8109f58:	685b      	ldr	r3, [r3, #4]
 8109f5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8109f5e:	687b      	ldr	r3, [r7, #4]
 8109f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f62:	687b      	ldr	r3, [r7, #4]
 8109f64:	681b      	ldr	r3, [r3, #0]
 8109f66:	430a      	orrs	r2, r1
 8109f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8109f6a:	687b      	ldr	r3, [r7, #4]
 8109f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f6e:	f003 0302 	and.w	r3, r3, #2
 8109f72:	2b00      	cmp	r3, #0
 8109f74:	d00a      	beq.n	8109f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8109f76:	687b      	ldr	r3, [r7, #4]
 8109f78:	681b      	ldr	r3, [r3, #0]
 8109f7a:	685b      	ldr	r3, [r3, #4]
 8109f7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8109f80:	687b      	ldr	r3, [r7, #4]
 8109f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8109f84:	687b      	ldr	r3, [r7, #4]
 8109f86:	681b      	ldr	r3, [r3, #0]
 8109f88:	430a      	orrs	r2, r1
 8109f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8109f8c:	687b      	ldr	r3, [r7, #4]
 8109f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f90:	f003 0304 	and.w	r3, r3, #4
 8109f94:	2b00      	cmp	r3, #0
 8109f96:	d00a      	beq.n	8109fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8109f98:	687b      	ldr	r3, [r7, #4]
 8109f9a:	681b      	ldr	r3, [r3, #0]
 8109f9c:	685b      	ldr	r3, [r3, #4]
 8109f9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8109fa2:	687b      	ldr	r3, [r7, #4]
 8109fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109fa6:	687b      	ldr	r3, [r7, #4]
 8109fa8:	681b      	ldr	r3, [r3, #0]
 8109faa:	430a      	orrs	r2, r1
 8109fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8109fae:	687b      	ldr	r3, [r7, #4]
 8109fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109fb2:	f003 0308 	and.w	r3, r3, #8
 8109fb6:	2b00      	cmp	r3, #0
 8109fb8:	d00a      	beq.n	8109fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8109fba:	687b      	ldr	r3, [r7, #4]
 8109fbc:	681b      	ldr	r3, [r3, #0]
 8109fbe:	685b      	ldr	r3, [r3, #4]
 8109fc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8109fc4:	687b      	ldr	r3, [r7, #4]
 8109fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109fc8:	687b      	ldr	r3, [r7, #4]
 8109fca:	681b      	ldr	r3, [r3, #0]
 8109fcc:	430a      	orrs	r2, r1
 8109fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8109fd0:	687b      	ldr	r3, [r7, #4]
 8109fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109fd4:	f003 0310 	and.w	r3, r3, #16
 8109fd8:	2b00      	cmp	r3, #0
 8109fda:	d00a      	beq.n	8109ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8109fdc:	687b      	ldr	r3, [r7, #4]
 8109fde:	681b      	ldr	r3, [r3, #0]
 8109fe0:	689b      	ldr	r3, [r3, #8]
 8109fe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8109fe6:	687b      	ldr	r3, [r7, #4]
 8109fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8109fea:	687b      	ldr	r3, [r7, #4]
 8109fec:	681b      	ldr	r3, [r3, #0]
 8109fee:	430a      	orrs	r2, r1
 8109ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8109ff2:	687b      	ldr	r3, [r7, #4]
 8109ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109ff6:	f003 0320 	and.w	r3, r3, #32
 8109ffa:	2b00      	cmp	r3, #0
 8109ffc:	d00a      	beq.n	810a014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8109ffe:	687b      	ldr	r3, [r7, #4]
 810a000:	681b      	ldr	r3, [r3, #0]
 810a002:	689b      	ldr	r3, [r3, #8]
 810a004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810a008:	687b      	ldr	r3, [r7, #4]
 810a00a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810a00c:	687b      	ldr	r3, [r7, #4]
 810a00e:	681b      	ldr	r3, [r3, #0]
 810a010:	430a      	orrs	r2, r1
 810a012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810a014:	687b      	ldr	r3, [r7, #4]
 810a016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a01c:	2b00      	cmp	r3, #0
 810a01e:	d01a      	beq.n	810a056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810a020:	687b      	ldr	r3, [r7, #4]
 810a022:	681b      	ldr	r3, [r3, #0]
 810a024:	685b      	ldr	r3, [r3, #4]
 810a026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810a02a:	687b      	ldr	r3, [r7, #4]
 810a02c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810a02e:	687b      	ldr	r3, [r7, #4]
 810a030:	681b      	ldr	r3, [r3, #0]
 810a032:	430a      	orrs	r2, r1
 810a034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810a036:	687b      	ldr	r3, [r7, #4]
 810a038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a03a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a03e:	d10a      	bne.n	810a056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a040:	687b      	ldr	r3, [r7, #4]
 810a042:	681b      	ldr	r3, [r3, #0]
 810a044:	685b      	ldr	r3, [r3, #4]
 810a046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810a04a:	687b      	ldr	r3, [r7, #4]
 810a04c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810a04e:	687b      	ldr	r3, [r7, #4]
 810a050:	681b      	ldr	r3, [r3, #0]
 810a052:	430a      	orrs	r2, r1
 810a054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a056:	687b      	ldr	r3, [r7, #4]
 810a058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a05a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a05e:	2b00      	cmp	r3, #0
 810a060:	d00a      	beq.n	810a078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a062:	687b      	ldr	r3, [r7, #4]
 810a064:	681b      	ldr	r3, [r3, #0]
 810a066:	685b      	ldr	r3, [r3, #4]
 810a068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810a06c:	687b      	ldr	r3, [r7, #4]
 810a06e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810a070:	687b      	ldr	r3, [r7, #4]
 810a072:	681b      	ldr	r3, [r3, #0]
 810a074:	430a      	orrs	r2, r1
 810a076:	605a      	str	r2, [r3, #4]
  }
}
 810a078:	bf00      	nop
 810a07a:	370c      	adds	r7, #12
 810a07c:	46bd      	mov	sp, r7
 810a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a082:	4770      	bx	lr

0810a084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a084:	b580      	push	{r7, lr}
 810a086:	b086      	sub	sp, #24
 810a088:	af02      	add	r7, sp, #8
 810a08a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a08c:	687b      	ldr	r3, [r7, #4]
 810a08e:	2200      	movs	r2, #0
 810a090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810a094:	f7f9 f8ca 	bl	810322c <HAL_GetTick>
 810a098:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a09a:	687b      	ldr	r3, [r7, #4]
 810a09c:	681b      	ldr	r3, [r3, #0]
 810a09e:	681b      	ldr	r3, [r3, #0]
 810a0a0:	f003 0308 	and.w	r3, r3, #8
 810a0a4:	2b08      	cmp	r3, #8
 810a0a6:	d10e      	bne.n	810a0c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a0a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a0ac:	9300      	str	r3, [sp, #0]
 810a0ae:	68fb      	ldr	r3, [r7, #12]
 810a0b0:	2200      	movs	r2, #0
 810a0b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810a0b6:	6878      	ldr	r0, [r7, #4]
 810a0b8:	f000 f82f 	bl	810a11a <UART_WaitOnFlagUntilTimeout>
 810a0bc:	4603      	mov	r3, r0
 810a0be:	2b00      	cmp	r3, #0
 810a0c0:	d001      	beq.n	810a0c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a0c2:	2303      	movs	r3, #3
 810a0c4:	e025      	b.n	810a112 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810a0c6:	687b      	ldr	r3, [r7, #4]
 810a0c8:	681b      	ldr	r3, [r3, #0]
 810a0ca:	681b      	ldr	r3, [r3, #0]
 810a0cc:	f003 0304 	and.w	r3, r3, #4
 810a0d0:	2b04      	cmp	r3, #4
 810a0d2:	d10e      	bne.n	810a0f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a0d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a0d8:	9300      	str	r3, [sp, #0]
 810a0da:	68fb      	ldr	r3, [r7, #12]
 810a0dc:	2200      	movs	r2, #0
 810a0de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810a0e2:	6878      	ldr	r0, [r7, #4]
 810a0e4:	f000 f819 	bl	810a11a <UART_WaitOnFlagUntilTimeout>
 810a0e8:	4603      	mov	r3, r0
 810a0ea:	2b00      	cmp	r3, #0
 810a0ec:	d001      	beq.n	810a0f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a0ee:	2303      	movs	r3, #3
 810a0f0:	e00f      	b.n	810a112 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810a0f2:	687b      	ldr	r3, [r7, #4]
 810a0f4:	2220      	movs	r2, #32
 810a0f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810a0fa:	687b      	ldr	r3, [r7, #4]
 810a0fc:	2220      	movs	r2, #32
 810a0fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a102:	687b      	ldr	r3, [r7, #4]
 810a104:	2200      	movs	r2, #0
 810a106:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810a108:	687b      	ldr	r3, [r7, #4]
 810a10a:	2200      	movs	r2, #0
 810a10c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810a110:	2300      	movs	r3, #0
}
 810a112:	4618      	mov	r0, r3
 810a114:	3710      	adds	r7, #16
 810a116:	46bd      	mov	sp, r7
 810a118:	bd80      	pop	{r7, pc}

0810a11a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810a11a:	b580      	push	{r7, lr}
 810a11c:	b09c      	sub	sp, #112	; 0x70
 810a11e:	af00      	add	r7, sp, #0
 810a120:	60f8      	str	r0, [r7, #12]
 810a122:	60b9      	str	r1, [r7, #8]
 810a124:	603b      	str	r3, [r7, #0]
 810a126:	4613      	mov	r3, r2
 810a128:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a12a:	e0a9      	b.n	810a280 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810a12c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810a12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a132:	f000 80a5 	beq.w	810a280 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810a136:	f7f9 f879 	bl	810322c <HAL_GetTick>
 810a13a:	4602      	mov	r2, r0
 810a13c:	683b      	ldr	r3, [r7, #0]
 810a13e:	1ad3      	subs	r3, r2, r3
 810a140:	6fba      	ldr	r2, [r7, #120]	; 0x78
 810a142:	429a      	cmp	r2, r3
 810a144:	d302      	bcc.n	810a14c <UART_WaitOnFlagUntilTimeout+0x32>
 810a146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810a148:	2b00      	cmp	r3, #0
 810a14a:	d140      	bne.n	810a1ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810a14c:	68fb      	ldr	r3, [r7, #12]
 810a14e:	681b      	ldr	r3, [r3, #0]
 810a150:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810a154:	e853 3f00 	ldrex	r3, [r3]
 810a158:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810a15a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810a15c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810a160:	667b      	str	r3, [r7, #100]	; 0x64
 810a162:	68fb      	ldr	r3, [r7, #12]
 810a164:	681b      	ldr	r3, [r3, #0]
 810a166:	461a      	mov	r2, r3
 810a168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810a16a:	65fb      	str	r3, [r7, #92]	; 0x5c
 810a16c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a16e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810a170:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810a172:	e841 2300 	strex	r3, r2, [r1]
 810a176:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 810a178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810a17a:	2b00      	cmp	r3, #0
 810a17c:	d1e6      	bne.n	810a14c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a17e:	68fb      	ldr	r3, [r7, #12]
 810a180:	681b      	ldr	r3, [r3, #0]
 810a182:	3308      	adds	r3, #8
 810a184:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a188:	e853 3f00 	ldrex	r3, [r3]
 810a18c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a190:	f023 0301 	bic.w	r3, r3, #1
 810a194:	663b      	str	r3, [r7, #96]	; 0x60
 810a196:	68fb      	ldr	r3, [r7, #12]
 810a198:	681b      	ldr	r3, [r3, #0]
 810a19a:	3308      	adds	r3, #8
 810a19c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810a19e:	64ba      	str	r2, [r7, #72]	; 0x48
 810a1a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a1a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810a1a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810a1a6:	e841 2300 	strex	r3, r2, [r1]
 810a1aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 810a1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810a1ae:	2b00      	cmp	r3, #0
 810a1b0:	d1e5      	bne.n	810a17e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810a1b2:	68fb      	ldr	r3, [r7, #12]
 810a1b4:	2220      	movs	r2, #32
 810a1b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810a1ba:	68fb      	ldr	r3, [r7, #12]
 810a1bc:	2220      	movs	r2, #32
 810a1be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810a1c2:	68fb      	ldr	r3, [r7, #12]
 810a1c4:	2200      	movs	r2, #0
 810a1c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810a1ca:	2303      	movs	r3, #3
 810a1cc:	e069      	b.n	810a2a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810a1ce:	68fb      	ldr	r3, [r7, #12]
 810a1d0:	681b      	ldr	r3, [r3, #0]
 810a1d2:	681b      	ldr	r3, [r3, #0]
 810a1d4:	f003 0304 	and.w	r3, r3, #4
 810a1d8:	2b00      	cmp	r3, #0
 810a1da:	d051      	beq.n	810a280 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810a1dc:	68fb      	ldr	r3, [r7, #12]
 810a1de:	681b      	ldr	r3, [r3, #0]
 810a1e0:	69db      	ldr	r3, [r3, #28]
 810a1e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810a1e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a1ea:	d149      	bne.n	810a280 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810a1ec:	68fb      	ldr	r3, [r7, #12]
 810a1ee:	681b      	ldr	r3, [r3, #0]
 810a1f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810a1f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810a1f6:	68fb      	ldr	r3, [r7, #12]
 810a1f8:	681b      	ldr	r3, [r3, #0]
 810a1fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a1fe:	e853 3f00 	ldrex	r3, [r3]
 810a202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a206:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810a20a:	66fb      	str	r3, [r7, #108]	; 0x6c
 810a20c:	68fb      	ldr	r3, [r7, #12]
 810a20e:	681b      	ldr	r3, [r3, #0]
 810a210:	461a      	mov	r2, r3
 810a212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810a214:	637b      	str	r3, [r7, #52]	; 0x34
 810a216:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810a21a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810a21c:	e841 2300 	strex	r3, r2, [r1]
 810a220:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810a222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a224:	2b00      	cmp	r3, #0
 810a226:	d1e6      	bne.n	810a1f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a228:	68fb      	ldr	r3, [r7, #12]
 810a22a:	681b      	ldr	r3, [r3, #0]
 810a22c:	3308      	adds	r3, #8
 810a22e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a230:	697b      	ldr	r3, [r7, #20]
 810a232:	e853 3f00 	ldrex	r3, [r3]
 810a236:	613b      	str	r3, [r7, #16]
   return(result);
 810a238:	693b      	ldr	r3, [r7, #16]
 810a23a:	f023 0301 	bic.w	r3, r3, #1
 810a23e:	66bb      	str	r3, [r7, #104]	; 0x68
 810a240:	68fb      	ldr	r3, [r7, #12]
 810a242:	681b      	ldr	r3, [r3, #0]
 810a244:	3308      	adds	r3, #8
 810a246:	6eba      	ldr	r2, [r7, #104]	; 0x68
 810a248:	623a      	str	r2, [r7, #32]
 810a24a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a24c:	69f9      	ldr	r1, [r7, #28]
 810a24e:	6a3a      	ldr	r2, [r7, #32]
 810a250:	e841 2300 	strex	r3, r2, [r1]
 810a254:	61bb      	str	r3, [r7, #24]
   return(result);
 810a256:	69bb      	ldr	r3, [r7, #24]
 810a258:	2b00      	cmp	r3, #0
 810a25a:	d1e5      	bne.n	810a228 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 810a25c:	68fb      	ldr	r3, [r7, #12]
 810a25e:	2220      	movs	r2, #32
 810a260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810a264:	68fb      	ldr	r3, [r7, #12]
 810a266:	2220      	movs	r2, #32
 810a268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810a26c:	68fb      	ldr	r3, [r7, #12]
 810a26e:	2220      	movs	r2, #32
 810a270:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a274:	68fb      	ldr	r3, [r7, #12]
 810a276:	2200      	movs	r2, #0
 810a278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810a27c:	2303      	movs	r3, #3
 810a27e:	e010      	b.n	810a2a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a280:	68fb      	ldr	r3, [r7, #12]
 810a282:	681b      	ldr	r3, [r3, #0]
 810a284:	69da      	ldr	r2, [r3, #28]
 810a286:	68bb      	ldr	r3, [r7, #8]
 810a288:	4013      	ands	r3, r2
 810a28a:	68ba      	ldr	r2, [r7, #8]
 810a28c:	429a      	cmp	r2, r3
 810a28e:	bf0c      	ite	eq
 810a290:	2301      	moveq	r3, #1
 810a292:	2300      	movne	r3, #0
 810a294:	b2db      	uxtb	r3, r3
 810a296:	461a      	mov	r2, r3
 810a298:	79fb      	ldrb	r3, [r7, #7]
 810a29a:	429a      	cmp	r2, r3
 810a29c:	f43f af46 	beq.w	810a12c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810a2a0:	2300      	movs	r3, #0
}
 810a2a2:	4618      	mov	r0, r3
 810a2a4:	3770      	adds	r7, #112	; 0x70
 810a2a6:	46bd      	mov	sp, r7
 810a2a8:	bd80      	pop	{r7, pc}

0810a2aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810a2aa:	b480      	push	{r7}
 810a2ac:	b085      	sub	sp, #20
 810a2ae:	af00      	add	r7, sp, #0
 810a2b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a2b2:	687b      	ldr	r3, [r7, #4]
 810a2b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a2b8:	2b01      	cmp	r3, #1
 810a2ba:	d101      	bne.n	810a2c0 <HAL_UARTEx_DisableFifoMode+0x16>
 810a2bc:	2302      	movs	r3, #2
 810a2be:	e027      	b.n	810a310 <HAL_UARTEx_DisableFifoMode+0x66>
 810a2c0:	687b      	ldr	r3, [r7, #4]
 810a2c2:	2201      	movs	r2, #1
 810a2c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810a2c8:	687b      	ldr	r3, [r7, #4]
 810a2ca:	2224      	movs	r2, #36	; 0x24
 810a2cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a2d0:	687b      	ldr	r3, [r7, #4]
 810a2d2:	681b      	ldr	r3, [r3, #0]
 810a2d4:	681b      	ldr	r3, [r3, #0]
 810a2d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a2d8:	687b      	ldr	r3, [r7, #4]
 810a2da:	681b      	ldr	r3, [r3, #0]
 810a2dc:	681a      	ldr	r2, [r3, #0]
 810a2de:	687b      	ldr	r3, [r7, #4]
 810a2e0:	681b      	ldr	r3, [r3, #0]
 810a2e2:	f022 0201 	bic.w	r2, r2, #1
 810a2e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810a2e8:	68fb      	ldr	r3, [r7, #12]
 810a2ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810a2ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810a2f0:	687b      	ldr	r3, [r7, #4]
 810a2f2:	2200      	movs	r2, #0
 810a2f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a2f6:	687b      	ldr	r3, [r7, #4]
 810a2f8:	681b      	ldr	r3, [r3, #0]
 810a2fa:	68fa      	ldr	r2, [r7, #12]
 810a2fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a2fe:	687b      	ldr	r3, [r7, #4]
 810a300:	2220      	movs	r2, #32
 810a302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a306:	687b      	ldr	r3, [r7, #4]
 810a308:	2200      	movs	r2, #0
 810a30a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810a30e:	2300      	movs	r3, #0
}
 810a310:	4618      	mov	r0, r3
 810a312:	3714      	adds	r7, #20
 810a314:	46bd      	mov	sp, r7
 810a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a31a:	4770      	bx	lr

0810a31c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810a31c:	b580      	push	{r7, lr}
 810a31e:	b084      	sub	sp, #16
 810a320:	af00      	add	r7, sp, #0
 810a322:	6078      	str	r0, [r7, #4]
 810a324:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a326:	687b      	ldr	r3, [r7, #4]
 810a328:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a32c:	2b01      	cmp	r3, #1
 810a32e:	d101      	bne.n	810a334 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810a330:	2302      	movs	r3, #2
 810a332:	e02d      	b.n	810a390 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810a334:	687b      	ldr	r3, [r7, #4]
 810a336:	2201      	movs	r2, #1
 810a338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810a33c:	687b      	ldr	r3, [r7, #4]
 810a33e:	2224      	movs	r2, #36	; 0x24
 810a340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a344:	687b      	ldr	r3, [r7, #4]
 810a346:	681b      	ldr	r3, [r3, #0]
 810a348:	681b      	ldr	r3, [r3, #0]
 810a34a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a34c:	687b      	ldr	r3, [r7, #4]
 810a34e:	681b      	ldr	r3, [r3, #0]
 810a350:	681a      	ldr	r2, [r3, #0]
 810a352:	687b      	ldr	r3, [r7, #4]
 810a354:	681b      	ldr	r3, [r3, #0]
 810a356:	f022 0201 	bic.w	r2, r2, #1
 810a35a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810a35c:	687b      	ldr	r3, [r7, #4]
 810a35e:	681b      	ldr	r3, [r3, #0]
 810a360:	689b      	ldr	r3, [r3, #8]
 810a362:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810a366:	687b      	ldr	r3, [r7, #4]
 810a368:	681b      	ldr	r3, [r3, #0]
 810a36a:	683a      	ldr	r2, [r7, #0]
 810a36c:	430a      	orrs	r2, r1
 810a36e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810a370:	6878      	ldr	r0, [r7, #4]
 810a372:	f000 f84f 	bl	810a414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a376:	687b      	ldr	r3, [r7, #4]
 810a378:	681b      	ldr	r3, [r3, #0]
 810a37a:	68fa      	ldr	r2, [r7, #12]
 810a37c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a37e:	687b      	ldr	r3, [r7, #4]
 810a380:	2220      	movs	r2, #32
 810a382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a386:	687b      	ldr	r3, [r7, #4]
 810a388:	2200      	movs	r2, #0
 810a38a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810a38e:	2300      	movs	r3, #0
}
 810a390:	4618      	mov	r0, r3
 810a392:	3710      	adds	r7, #16
 810a394:	46bd      	mov	sp, r7
 810a396:	bd80      	pop	{r7, pc}

0810a398 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810a398:	b580      	push	{r7, lr}
 810a39a:	b084      	sub	sp, #16
 810a39c:	af00      	add	r7, sp, #0
 810a39e:	6078      	str	r0, [r7, #4]
 810a3a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a3a2:	687b      	ldr	r3, [r7, #4]
 810a3a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a3a8:	2b01      	cmp	r3, #1
 810a3aa:	d101      	bne.n	810a3b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810a3ac:	2302      	movs	r3, #2
 810a3ae:	e02d      	b.n	810a40c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810a3b0:	687b      	ldr	r3, [r7, #4]
 810a3b2:	2201      	movs	r2, #1
 810a3b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810a3b8:	687b      	ldr	r3, [r7, #4]
 810a3ba:	2224      	movs	r2, #36	; 0x24
 810a3bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a3c0:	687b      	ldr	r3, [r7, #4]
 810a3c2:	681b      	ldr	r3, [r3, #0]
 810a3c4:	681b      	ldr	r3, [r3, #0]
 810a3c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a3c8:	687b      	ldr	r3, [r7, #4]
 810a3ca:	681b      	ldr	r3, [r3, #0]
 810a3cc:	681a      	ldr	r2, [r3, #0]
 810a3ce:	687b      	ldr	r3, [r7, #4]
 810a3d0:	681b      	ldr	r3, [r3, #0]
 810a3d2:	f022 0201 	bic.w	r2, r2, #1
 810a3d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810a3d8:	687b      	ldr	r3, [r7, #4]
 810a3da:	681b      	ldr	r3, [r3, #0]
 810a3dc:	689b      	ldr	r3, [r3, #8]
 810a3de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810a3e2:	687b      	ldr	r3, [r7, #4]
 810a3e4:	681b      	ldr	r3, [r3, #0]
 810a3e6:	683a      	ldr	r2, [r7, #0]
 810a3e8:	430a      	orrs	r2, r1
 810a3ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810a3ec:	6878      	ldr	r0, [r7, #4]
 810a3ee:	f000 f811 	bl	810a414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a3f2:	687b      	ldr	r3, [r7, #4]
 810a3f4:	681b      	ldr	r3, [r3, #0]
 810a3f6:	68fa      	ldr	r2, [r7, #12]
 810a3f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a3fa:	687b      	ldr	r3, [r7, #4]
 810a3fc:	2220      	movs	r2, #32
 810a3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a402:	687b      	ldr	r3, [r7, #4]
 810a404:	2200      	movs	r2, #0
 810a406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810a40a:	2300      	movs	r3, #0
}
 810a40c:	4618      	mov	r0, r3
 810a40e:	3710      	adds	r7, #16
 810a410:	46bd      	mov	sp, r7
 810a412:	bd80      	pop	{r7, pc}

0810a414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810a414:	b480      	push	{r7}
 810a416:	b085      	sub	sp, #20
 810a418:	af00      	add	r7, sp, #0
 810a41a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810a41c:	687b      	ldr	r3, [r7, #4]
 810a41e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a420:	2b00      	cmp	r3, #0
 810a422:	d108      	bne.n	810a436 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810a424:	687b      	ldr	r3, [r7, #4]
 810a426:	2201      	movs	r2, #1
 810a428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810a42c:	687b      	ldr	r3, [r7, #4]
 810a42e:	2201      	movs	r2, #1
 810a430:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810a434:	e031      	b.n	810a49a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810a436:	2310      	movs	r3, #16
 810a438:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810a43a:	2310      	movs	r3, #16
 810a43c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810a43e:	687b      	ldr	r3, [r7, #4]
 810a440:	681b      	ldr	r3, [r3, #0]
 810a442:	689b      	ldr	r3, [r3, #8]
 810a444:	0e5b      	lsrs	r3, r3, #25
 810a446:	b2db      	uxtb	r3, r3
 810a448:	f003 0307 	and.w	r3, r3, #7
 810a44c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810a44e:	687b      	ldr	r3, [r7, #4]
 810a450:	681b      	ldr	r3, [r3, #0]
 810a452:	689b      	ldr	r3, [r3, #8]
 810a454:	0f5b      	lsrs	r3, r3, #29
 810a456:	b2db      	uxtb	r3, r3
 810a458:	f003 0307 	and.w	r3, r3, #7
 810a45c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810a45e:	7bbb      	ldrb	r3, [r7, #14]
 810a460:	7b3a      	ldrb	r2, [r7, #12]
 810a462:	4911      	ldr	r1, [pc, #68]	; (810a4a8 <UARTEx_SetNbDataToProcess+0x94>)
 810a464:	5c8a      	ldrb	r2, [r1, r2]
 810a466:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810a46a:	7b3a      	ldrb	r2, [r7, #12]
 810a46c:	490f      	ldr	r1, [pc, #60]	; (810a4ac <UARTEx_SetNbDataToProcess+0x98>)
 810a46e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810a470:	fb93 f3f2 	sdiv	r3, r3, r2
 810a474:	b29a      	uxth	r2, r3
 810a476:	687b      	ldr	r3, [r7, #4]
 810a478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810a47c:	7bfb      	ldrb	r3, [r7, #15]
 810a47e:	7b7a      	ldrb	r2, [r7, #13]
 810a480:	4909      	ldr	r1, [pc, #36]	; (810a4a8 <UARTEx_SetNbDataToProcess+0x94>)
 810a482:	5c8a      	ldrb	r2, [r1, r2]
 810a484:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810a488:	7b7a      	ldrb	r2, [r7, #13]
 810a48a:	4908      	ldr	r1, [pc, #32]	; (810a4ac <UARTEx_SetNbDataToProcess+0x98>)
 810a48c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810a48e:	fb93 f3f2 	sdiv	r3, r3, r2
 810a492:	b29a      	uxth	r2, r3
 810a494:	687b      	ldr	r3, [r7, #4]
 810a496:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810a49a:	bf00      	nop
 810a49c:	3714      	adds	r7, #20
 810a49e:	46bd      	mov	sp, r7
 810a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4a4:	4770      	bx	lr
 810a4a6:	bf00      	nop
 810a4a8:	0810b318 	.word	0x0810b318
 810a4ac:	0810b320 	.word	0x0810b320

0810a4b0 <__libc_init_array>:
 810a4b0:	b570      	push	{r4, r5, r6, lr}
 810a4b2:	4d0d      	ldr	r5, [pc, #52]	; (810a4e8 <__libc_init_array+0x38>)
 810a4b4:	4c0d      	ldr	r4, [pc, #52]	; (810a4ec <__libc_init_array+0x3c>)
 810a4b6:	1b64      	subs	r4, r4, r5
 810a4b8:	10a4      	asrs	r4, r4, #2
 810a4ba:	2600      	movs	r6, #0
 810a4bc:	42a6      	cmp	r6, r4
 810a4be:	d109      	bne.n	810a4d4 <__libc_init_array+0x24>
 810a4c0:	4d0b      	ldr	r5, [pc, #44]	; (810a4f0 <__libc_init_array+0x40>)
 810a4c2:	4c0c      	ldr	r4, [pc, #48]	; (810a4f4 <__libc_init_array+0x44>)
 810a4c4:	f000 fc9c 	bl	810ae00 <_init>
 810a4c8:	1b64      	subs	r4, r4, r5
 810a4ca:	10a4      	asrs	r4, r4, #2
 810a4cc:	2600      	movs	r6, #0
 810a4ce:	42a6      	cmp	r6, r4
 810a4d0:	d105      	bne.n	810a4de <__libc_init_array+0x2e>
 810a4d2:	bd70      	pop	{r4, r5, r6, pc}
 810a4d4:	f855 3b04 	ldr.w	r3, [r5], #4
 810a4d8:	4798      	blx	r3
 810a4da:	3601      	adds	r6, #1
 810a4dc:	e7ee      	b.n	810a4bc <__libc_init_array+0xc>
 810a4de:	f855 3b04 	ldr.w	r3, [r5], #4
 810a4e2:	4798      	blx	r3
 810a4e4:	3601      	adds	r6, #1
 810a4e6:	e7f2      	b.n	810a4ce <__libc_init_array+0x1e>
 810a4e8:	0810b364 	.word	0x0810b364
 810a4ec:	0810b364 	.word	0x0810b364
 810a4f0:	0810b364 	.word	0x0810b364
 810a4f4:	0810b368 	.word	0x0810b368

0810a4f8 <memset>:
 810a4f8:	4402      	add	r2, r0
 810a4fa:	4603      	mov	r3, r0
 810a4fc:	4293      	cmp	r3, r2
 810a4fe:	d100      	bne.n	810a502 <memset+0xa>
 810a500:	4770      	bx	lr
 810a502:	f803 1b01 	strb.w	r1, [r3], #1
 810a506:	e7f9      	b.n	810a4fc <memset+0x4>

0810a508 <siprintf>:
 810a508:	b40e      	push	{r1, r2, r3}
 810a50a:	b500      	push	{lr}
 810a50c:	b09c      	sub	sp, #112	; 0x70
 810a50e:	ab1d      	add	r3, sp, #116	; 0x74
 810a510:	9002      	str	r0, [sp, #8]
 810a512:	9006      	str	r0, [sp, #24]
 810a514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810a518:	4809      	ldr	r0, [pc, #36]	; (810a540 <siprintf+0x38>)
 810a51a:	9107      	str	r1, [sp, #28]
 810a51c:	9104      	str	r1, [sp, #16]
 810a51e:	4909      	ldr	r1, [pc, #36]	; (810a544 <siprintf+0x3c>)
 810a520:	f853 2b04 	ldr.w	r2, [r3], #4
 810a524:	9105      	str	r1, [sp, #20]
 810a526:	6800      	ldr	r0, [r0, #0]
 810a528:	9301      	str	r3, [sp, #4]
 810a52a:	a902      	add	r1, sp, #8
 810a52c:	f000 f868 	bl	810a600 <_svfiprintf_r>
 810a530:	9b02      	ldr	r3, [sp, #8]
 810a532:	2200      	movs	r2, #0
 810a534:	701a      	strb	r2, [r3, #0]
 810a536:	b01c      	add	sp, #112	; 0x70
 810a538:	f85d eb04 	ldr.w	lr, [sp], #4
 810a53c:	b003      	add	sp, #12
 810a53e:	4770      	bx	lr
 810a540:	10000020 	.word	0x10000020
 810a544:	ffff0208 	.word	0xffff0208

0810a548 <__ssputs_r>:
 810a548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a54c:	688e      	ldr	r6, [r1, #8]
 810a54e:	429e      	cmp	r6, r3
 810a550:	4682      	mov	sl, r0
 810a552:	460c      	mov	r4, r1
 810a554:	4690      	mov	r8, r2
 810a556:	461f      	mov	r7, r3
 810a558:	d838      	bhi.n	810a5cc <__ssputs_r+0x84>
 810a55a:	898a      	ldrh	r2, [r1, #12]
 810a55c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810a560:	d032      	beq.n	810a5c8 <__ssputs_r+0x80>
 810a562:	6825      	ldr	r5, [r4, #0]
 810a564:	6909      	ldr	r1, [r1, #16]
 810a566:	eba5 0901 	sub.w	r9, r5, r1
 810a56a:	6965      	ldr	r5, [r4, #20]
 810a56c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810a570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810a574:	3301      	adds	r3, #1
 810a576:	444b      	add	r3, r9
 810a578:	106d      	asrs	r5, r5, #1
 810a57a:	429d      	cmp	r5, r3
 810a57c:	bf38      	it	cc
 810a57e:	461d      	movcc	r5, r3
 810a580:	0553      	lsls	r3, r2, #21
 810a582:	d531      	bpl.n	810a5e8 <__ssputs_r+0xa0>
 810a584:	4629      	mov	r1, r5
 810a586:	f000 fb63 	bl	810ac50 <_malloc_r>
 810a58a:	4606      	mov	r6, r0
 810a58c:	b950      	cbnz	r0, 810a5a4 <__ssputs_r+0x5c>
 810a58e:	230c      	movs	r3, #12
 810a590:	f8ca 3000 	str.w	r3, [sl]
 810a594:	89a3      	ldrh	r3, [r4, #12]
 810a596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a59a:	81a3      	strh	r3, [r4, #12]
 810a59c:	f04f 30ff 	mov.w	r0, #4294967295
 810a5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a5a4:	6921      	ldr	r1, [r4, #16]
 810a5a6:	464a      	mov	r2, r9
 810a5a8:	f000 fabe 	bl	810ab28 <memcpy>
 810a5ac:	89a3      	ldrh	r3, [r4, #12]
 810a5ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810a5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a5b6:	81a3      	strh	r3, [r4, #12]
 810a5b8:	6126      	str	r6, [r4, #16]
 810a5ba:	6165      	str	r5, [r4, #20]
 810a5bc:	444e      	add	r6, r9
 810a5be:	eba5 0509 	sub.w	r5, r5, r9
 810a5c2:	6026      	str	r6, [r4, #0]
 810a5c4:	60a5      	str	r5, [r4, #8]
 810a5c6:	463e      	mov	r6, r7
 810a5c8:	42be      	cmp	r6, r7
 810a5ca:	d900      	bls.n	810a5ce <__ssputs_r+0x86>
 810a5cc:	463e      	mov	r6, r7
 810a5ce:	6820      	ldr	r0, [r4, #0]
 810a5d0:	4632      	mov	r2, r6
 810a5d2:	4641      	mov	r1, r8
 810a5d4:	f000 fab6 	bl	810ab44 <memmove>
 810a5d8:	68a3      	ldr	r3, [r4, #8]
 810a5da:	1b9b      	subs	r3, r3, r6
 810a5dc:	60a3      	str	r3, [r4, #8]
 810a5de:	6823      	ldr	r3, [r4, #0]
 810a5e0:	4433      	add	r3, r6
 810a5e2:	6023      	str	r3, [r4, #0]
 810a5e4:	2000      	movs	r0, #0
 810a5e6:	e7db      	b.n	810a5a0 <__ssputs_r+0x58>
 810a5e8:	462a      	mov	r2, r5
 810a5ea:	f000 fba5 	bl	810ad38 <_realloc_r>
 810a5ee:	4606      	mov	r6, r0
 810a5f0:	2800      	cmp	r0, #0
 810a5f2:	d1e1      	bne.n	810a5b8 <__ssputs_r+0x70>
 810a5f4:	6921      	ldr	r1, [r4, #16]
 810a5f6:	4650      	mov	r0, sl
 810a5f8:	f000 fabe 	bl	810ab78 <_free_r>
 810a5fc:	e7c7      	b.n	810a58e <__ssputs_r+0x46>
	...

0810a600 <_svfiprintf_r>:
 810a600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a604:	4698      	mov	r8, r3
 810a606:	898b      	ldrh	r3, [r1, #12]
 810a608:	061b      	lsls	r3, r3, #24
 810a60a:	b09d      	sub	sp, #116	; 0x74
 810a60c:	4607      	mov	r7, r0
 810a60e:	460d      	mov	r5, r1
 810a610:	4614      	mov	r4, r2
 810a612:	d50e      	bpl.n	810a632 <_svfiprintf_r+0x32>
 810a614:	690b      	ldr	r3, [r1, #16]
 810a616:	b963      	cbnz	r3, 810a632 <_svfiprintf_r+0x32>
 810a618:	2140      	movs	r1, #64	; 0x40
 810a61a:	f000 fb19 	bl	810ac50 <_malloc_r>
 810a61e:	6028      	str	r0, [r5, #0]
 810a620:	6128      	str	r0, [r5, #16]
 810a622:	b920      	cbnz	r0, 810a62e <_svfiprintf_r+0x2e>
 810a624:	230c      	movs	r3, #12
 810a626:	603b      	str	r3, [r7, #0]
 810a628:	f04f 30ff 	mov.w	r0, #4294967295
 810a62c:	e0d1      	b.n	810a7d2 <_svfiprintf_r+0x1d2>
 810a62e:	2340      	movs	r3, #64	; 0x40
 810a630:	616b      	str	r3, [r5, #20]
 810a632:	2300      	movs	r3, #0
 810a634:	9309      	str	r3, [sp, #36]	; 0x24
 810a636:	2320      	movs	r3, #32
 810a638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810a63c:	f8cd 800c 	str.w	r8, [sp, #12]
 810a640:	2330      	movs	r3, #48	; 0x30
 810a642:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810a7ec <_svfiprintf_r+0x1ec>
 810a646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810a64a:	f04f 0901 	mov.w	r9, #1
 810a64e:	4623      	mov	r3, r4
 810a650:	469a      	mov	sl, r3
 810a652:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a656:	b10a      	cbz	r2, 810a65c <_svfiprintf_r+0x5c>
 810a658:	2a25      	cmp	r2, #37	; 0x25
 810a65a:	d1f9      	bne.n	810a650 <_svfiprintf_r+0x50>
 810a65c:	ebba 0b04 	subs.w	fp, sl, r4
 810a660:	d00b      	beq.n	810a67a <_svfiprintf_r+0x7a>
 810a662:	465b      	mov	r3, fp
 810a664:	4622      	mov	r2, r4
 810a666:	4629      	mov	r1, r5
 810a668:	4638      	mov	r0, r7
 810a66a:	f7ff ff6d 	bl	810a548 <__ssputs_r>
 810a66e:	3001      	adds	r0, #1
 810a670:	f000 80aa 	beq.w	810a7c8 <_svfiprintf_r+0x1c8>
 810a674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a676:	445a      	add	r2, fp
 810a678:	9209      	str	r2, [sp, #36]	; 0x24
 810a67a:	f89a 3000 	ldrb.w	r3, [sl]
 810a67e:	2b00      	cmp	r3, #0
 810a680:	f000 80a2 	beq.w	810a7c8 <_svfiprintf_r+0x1c8>
 810a684:	2300      	movs	r3, #0
 810a686:	f04f 32ff 	mov.w	r2, #4294967295
 810a68a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a68e:	f10a 0a01 	add.w	sl, sl, #1
 810a692:	9304      	str	r3, [sp, #16]
 810a694:	9307      	str	r3, [sp, #28]
 810a696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810a69a:	931a      	str	r3, [sp, #104]	; 0x68
 810a69c:	4654      	mov	r4, sl
 810a69e:	2205      	movs	r2, #5
 810a6a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a6a4:	4851      	ldr	r0, [pc, #324]	; (810a7ec <_svfiprintf_r+0x1ec>)
 810a6a6:	f7f5 fe1b 	bl	81002e0 <memchr>
 810a6aa:	9a04      	ldr	r2, [sp, #16]
 810a6ac:	b9d8      	cbnz	r0, 810a6e6 <_svfiprintf_r+0xe6>
 810a6ae:	06d0      	lsls	r0, r2, #27
 810a6b0:	bf44      	itt	mi
 810a6b2:	2320      	movmi	r3, #32
 810a6b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a6b8:	0711      	lsls	r1, r2, #28
 810a6ba:	bf44      	itt	mi
 810a6bc:	232b      	movmi	r3, #43	; 0x2b
 810a6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a6c2:	f89a 3000 	ldrb.w	r3, [sl]
 810a6c6:	2b2a      	cmp	r3, #42	; 0x2a
 810a6c8:	d015      	beq.n	810a6f6 <_svfiprintf_r+0xf6>
 810a6ca:	9a07      	ldr	r2, [sp, #28]
 810a6cc:	4654      	mov	r4, sl
 810a6ce:	2000      	movs	r0, #0
 810a6d0:	f04f 0c0a 	mov.w	ip, #10
 810a6d4:	4621      	mov	r1, r4
 810a6d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a6da:	3b30      	subs	r3, #48	; 0x30
 810a6dc:	2b09      	cmp	r3, #9
 810a6de:	d94e      	bls.n	810a77e <_svfiprintf_r+0x17e>
 810a6e0:	b1b0      	cbz	r0, 810a710 <_svfiprintf_r+0x110>
 810a6e2:	9207      	str	r2, [sp, #28]
 810a6e4:	e014      	b.n	810a710 <_svfiprintf_r+0x110>
 810a6e6:	eba0 0308 	sub.w	r3, r0, r8
 810a6ea:	fa09 f303 	lsl.w	r3, r9, r3
 810a6ee:	4313      	orrs	r3, r2
 810a6f0:	9304      	str	r3, [sp, #16]
 810a6f2:	46a2      	mov	sl, r4
 810a6f4:	e7d2      	b.n	810a69c <_svfiprintf_r+0x9c>
 810a6f6:	9b03      	ldr	r3, [sp, #12]
 810a6f8:	1d19      	adds	r1, r3, #4
 810a6fa:	681b      	ldr	r3, [r3, #0]
 810a6fc:	9103      	str	r1, [sp, #12]
 810a6fe:	2b00      	cmp	r3, #0
 810a700:	bfbb      	ittet	lt
 810a702:	425b      	neglt	r3, r3
 810a704:	f042 0202 	orrlt.w	r2, r2, #2
 810a708:	9307      	strge	r3, [sp, #28]
 810a70a:	9307      	strlt	r3, [sp, #28]
 810a70c:	bfb8      	it	lt
 810a70e:	9204      	strlt	r2, [sp, #16]
 810a710:	7823      	ldrb	r3, [r4, #0]
 810a712:	2b2e      	cmp	r3, #46	; 0x2e
 810a714:	d10c      	bne.n	810a730 <_svfiprintf_r+0x130>
 810a716:	7863      	ldrb	r3, [r4, #1]
 810a718:	2b2a      	cmp	r3, #42	; 0x2a
 810a71a:	d135      	bne.n	810a788 <_svfiprintf_r+0x188>
 810a71c:	9b03      	ldr	r3, [sp, #12]
 810a71e:	1d1a      	adds	r2, r3, #4
 810a720:	681b      	ldr	r3, [r3, #0]
 810a722:	9203      	str	r2, [sp, #12]
 810a724:	2b00      	cmp	r3, #0
 810a726:	bfb8      	it	lt
 810a728:	f04f 33ff 	movlt.w	r3, #4294967295
 810a72c:	3402      	adds	r4, #2
 810a72e:	9305      	str	r3, [sp, #20]
 810a730:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810a7fc <_svfiprintf_r+0x1fc>
 810a734:	7821      	ldrb	r1, [r4, #0]
 810a736:	2203      	movs	r2, #3
 810a738:	4650      	mov	r0, sl
 810a73a:	f7f5 fdd1 	bl	81002e0 <memchr>
 810a73e:	b140      	cbz	r0, 810a752 <_svfiprintf_r+0x152>
 810a740:	2340      	movs	r3, #64	; 0x40
 810a742:	eba0 000a 	sub.w	r0, r0, sl
 810a746:	fa03 f000 	lsl.w	r0, r3, r0
 810a74a:	9b04      	ldr	r3, [sp, #16]
 810a74c:	4303      	orrs	r3, r0
 810a74e:	3401      	adds	r4, #1
 810a750:	9304      	str	r3, [sp, #16]
 810a752:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a756:	4826      	ldr	r0, [pc, #152]	; (810a7f0 <_svfiprintf_r+0x1f0>)
 810a758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810a75c:	2206      	movs	r2, #6
 810a75e:	f7f5 fdbf 	bl	81002e0 <memchr>
 810a762:	2800      	cmp	r0, #0
 810a764:	d038      	beq.n	810a7d8 <_svfiprintf_r+0x1d8>
 810a766:	4b23      	ldr	r3, [pc, #140]	; (810a7f4 <_svfiprintf_r+0x1f4>)
 810a768:	bb1b      	cbnz	r3, 810a7b2 <_svfiprintf_r+0x1b2>
 810a76a:	9b03      	ldr	r3, [sp, #12]
 810a76c:	3307      	adds	r3, #7
 810a76e:	f023 0307 	bic.w	r3, r3, #7
 810a772:	3308      	adds	r3, #8
 810a774:	9303      	str	r3, [sp, #12]
 810a776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a778:	4433      	add	r3, r6
 810a77a:	9309      	str	r3, [sp, #36]	; 0x24
 810a77c:	e767      	b.n	810a64e <_svfiprintf_r+0x4e>
 810a77e:	fb0c 3202 	mla	r2, ip, r2, r3
 810a782:	460c      	mov	r4, r1
 810a784:	2001      	movs	r0, #1
 810a786:	e7a5      	b.n	810a6d4 <_svfiprintf_r+0xd4>
 810a788:	2300      	movs	r3, #0
 810a78a:	3401      	adds	r4, #1
 810a78c:	9305      	str	r3, [sp, #20]
 810a78e:	4619      	mov	r1, r3
 810a790:	f04f 0c0a 	mov.w	ip, #10
 810a794:	4620      	mov	r0, r4
 810a796:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a79a:	3a30      	subs	r2, #48	; 0x30
 810a79c:	2a09      	cmp	r2, #9
 810a79e:	d903      	bls.n	810a7a8 <_svfiprintf_r+0x1a8>
 810a7a0:	2b00      	cmp	r3, #0
 810a7a2:	d0c5      	beq.n	810a730 <_svfiprintf_r+0x130>
 810a7a4:	9105      	str	r1, [sp, #20]
 810a7a6:	e7c3      	b.n	810a730 <_svfiprintf_r+0x130>
 810a7a8:	fb0c 2101 	mla	r1, ip, r1, r2
 810a7ac:	4604      	mov	r4, r0
 810a7ae:	2301      	movs	r3, #1
 810a7b0:	e7f0      	b.n	810a794 <_svfiprintf_r+0x194>
 810a7b2:	ab03      	add	r3, sp, #12
 810a7b4:	9300      	str	r3, [sp, #0]
 810a7b6:	462a      	mov	r2, r5
 810a7b8:	4b0f      	ldr	r3, [pc, #60]	; (810a7f8 <_svfiprintf_r+0x1f8>)
 810a7ba:	a904      	add	r1, sp, #16
 810a7bc:	4638      	mov	r0, r7
 810a7be:	f3af 8000 	nop.w
 810a7c2:	1c42      	adds	r2, r0, #1
 810a7c4:	4606      	mov	r6, r0
 810a7c6:	d1d6      	bne.n	810a776 <_svfiprintf_r+0x176>
 810a7c8:	89ab      	ldrh	r3, [r5, #12]
 810a7ca:	065b      	lsls	r3, r3, #25
 810a7cc:	f53f af2c 	bmi.w	810a628 <_svfiprintf_r+0x28>
 810a7d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a7d2:	b01d      	add	sp, #116	; 0x74
 810a7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a7d8:	ab03      	add	r3, sp, #12
 810a7da:	9300      	str	r3, [sp, #0]
 810a7dc:	462a      	mov	r2, r5
 810a7de:	4b06      	ldr	r3, [pc, #24]	; (810a7f8 <_svfiprintf_r+0x1f8>)
 810a7e0:	a904      	add	r1, sp, #16
 810a7e2:	4638      	mov	r0, r7
 810a7e4:	f000 f87a 	bl	810a8dc <_printf_i>
 810a7e8:	e7eb      	b.n	810a7c2 <_svfiprintf_r+0x1c2>
 810a7ea:	bf00      	nop
 810a7ec:	0810b328 	.word	0x0810b328
 810a7f0:	0810b332 	.word	0x0810b332
 810a7f4:	00000000 	.word	0x00000000
 810a7f8:	0810a549 	.word	0x0810a549
 810a7fc:	0810b32e 	.word	0x0810b32e

0810a800 <_printf_common>:
 810a800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a804:	4616      	mov	r6, r2
 810a806:	4699      	mov	r9, r3
 810a808:	688a      	ldr	r2, [r1, #8]
 810a80a:	690b      	ldr	r3, [r1, #16]
 810a80c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810a810:	4293      	cmp	r3, r2
 810a812:	bfb8      	it	lt
 810a814:	4613      	movlt	r3, r2
 810a816:	6033      	str	r3, [r6, #0]
 810a818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810a81c:	4607      	mov	r7, r0
 810a81e:	460c      	mov	r4, r1
 810a820:	b10a      	cbz	r2, 810a826 <_printf_common+0x26>
 810a822:	3301      	adds	r3, #1
 810a824:	6033      	str	r3, [r6, #0]
 810a826:	6823      	ldr	r3, [r4, #0]
 810a828:	0699      	lsls	r1, r3, #26
 810a82a:	bf42      	ittt	mi
 810a82c:	6833      	ldrmi	r3, [r6, #0]
 810a82e:	3302      	addmi	r3, #2
 810a830:	6033      	strmi	r3, [r6, #0]
 810a832:	6825      	ldr	r5, [r4, #0]
 810a834:	f015 0506 	ands.w	r5, r5, #6
 810a838:	d106      	bne.n	810a848 <_printf_common+0x48>
 810a83a:	f104 0a19 	add.w	sl, r4, #25
 810a83e:	68e3      	ldr	r3, [r4, #12]
 810a840:	6832      	ldr	r2, [r6, #0]
 810a842:	1a9b      	subs	r3, r3, r2
 810a844:	42ab      	cmp	r3, r5
 810a846:	dc26      	bgt.n	810a896 <_printf_common+0x96>
 810a848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810a84c:	1e13      	subs	r3, r2, #0
 810a84e:	6822      	ldr	r2, [r4, #0]
 810a850:	bf18      	it	ne
 810a852:	2301      	movne	r3, #1
 810a854:	0692      	lsls	r2, r2, #26
 810a856:	d42b      	bmi.n	810a8b0 <_printf_common+0xb0>
 810a858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810a85c:	4649      	mov	r1, r9
 810a85e:	4638      	mov	r0, r7
 810a860:	47c0      	blx	r8
 810a862:	3001      	adds	r0, #1
 810a864:	d01e      	beq.n	810a8a4 <_printf_common+0xa4>
 810a866:	6823      	ldr	r3, [r4, #0]
 810a868:	68e5      	ldr	r5, [r4, #12]
 810a86a:	6832      	ldr	r2, [r6, #0]
 810a86c:	f003 0306 	and.w	r3, r3, #6
 810a870:	2b04      	cmp	r3, #4
 810a872:	bf08      	it	eq
 810a874:	1aad      	subeq	r5, r5, r2
 810a876:	68a3      	ldr	r3, [r4, #8]
 810a878:	6922      	ldr	r2, [r4, #16]
 810a87a:	bf0c      	ite	eq
 810a87c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810a880:	2500      	movne	r5, #0
 810a882:	4293      	cmp	r3, r2
 810a884:	bfc4      	itt	gt
 810a886:	1a9b      	subgt	r3, r3, r2
 810a888:	18ed      	addgt	r5, r5, r3
 810a88a:	2600      	movs	r6, #0
 810a88c:	341a      	adds	r4, #26
 810a88e:	42b5      	cmp	r5, r6
 810a890:	d11a      	bne.n	810a8c8 <_printf_common+0xc8>
 810a892:	2000      	movs	r0, #0
 810a894:	e008      	b.n	810a8a8 <_printf_common+0xa8>
 810a896:	2301      	movs	r3, #1
 810a898:	4652      	mov	r2, sl
 810a89a:	4649      	mov	r1, r9
 810a89c:	4638      	mov	r0, r7
 810a89e:	47c0      	blx	r8
 810a8a0:	3001      	adds	r0, #1
 810a8a2:	d103      	bne.n	810a8ac <_printf_common+0xac>
 810a8a4:	f04f 30ff 	mov.w	r0, #4294967295
 810a8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a8ac:	3501      	adds	r5, #1
 810a8ae:	e7c6      	b.n	810a83e <_printf_common+0x3e>
 810a8b0:	18e1      	adds	r1, r4, r3
 810a8b2:	1c5a      	adds	r2, r3, #1
 810a8b4:	2030      	movs	r0, #48	; 0x30
 810a8b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810a8ba:	4422      	add	r2, r4
 810a8bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810a8c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810a8c4:	3302      	adds	r3, #2
 810a8c6:	e7c7      	b.n	810a858 <_printf_common+0x58>
 810a8c8:	2301      	movs	r3, #1
 810a8ca:	4622      	mov	r2, r4
 810a8cc:	4649      	mov	r1, r9
 810a8ce:	4638      	mov	r0, r7
 810a8d0:	47c0      	blx	r8
 810a8d2:	3001      	adds	r0, #1
 810a8d4:	d0e6      	beq.n	810a8a4 <_printf_common+0xa4>
 810a8d6:	3601      	adds	r6, #1
 810a8d8:	e7d9      	b.n	810a88e <_printf_common+0x8e>
	...

0810a8dc <_printf_i>:
 810a8dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a8e0:	7e0f      	ldrb	r7, [r1, #24]
 810a8e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810a8e4:	2f78      	cmp	r7, #120	; 0x78
 810a8e6:	4691      	mov	r9, r2
 810a8e8:	4680      	mov	r8, r0
 810a8ea:	460c      	mov	r4, r1
 810a8ec:	469a      	mov	sl, r3
 810a8ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810a8f2:	d807      	bhi.n	810a904 <_printf_i+0x28>
 810a8f4:	2f62      	cmp	r7, #98	; 0x62
 810a8f6:	d80a      	bhi.n	810a90e <_printf_i+0x32>
 810a8f8:	2f00      	cmp	r7, #0
 810a8fa:	f000 80d8 	beq.w	810aaae <_printf_i+0x1d2>
 810a8fe:	2f58      	cmp	r7, #88	; 0x58
 810a900:	f000 80a3 	beq.w	810aa4a <_printf_i+0x16e>
 810a904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810a90c:	e03a      	b.n	810a984 <_printf_i+0xa8>
 810a90e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810a912:	2b15      	cmp	r3, #21
 810a914:	d8f6      	bhi.n	810a904 <_printf_i+0x28>
 810a916:	a101      	add	r1, pc, #4	; (adr r1, 810a91c <_printf_i+0x40>)
 810a918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810a91c:	0810a975 	.word	0x0810a975
 810a920:	0810a989 	.word	0x0810a989
 810a924:	0810a905 	.word	0x0810a905
 810a928:	0810a905 	.word	0x0810a905
 810a92c:	0810a905 	.word	0x0810a905
 810a930:	0810a905 	.word	0x0810a905
 810a934:	0810a989 	.word	0x0810a989
 810a938:	0810a905 	.word	0x0810a905
 810a93c:	0810a905 	.word	0x0810a905
 810a940:	0810a905 	.word	0x0810a905
 810a944:	0810a905 	.word	0x0810a905
 810a948:	0810aa95 	.word	0x0810aa95
 810a94c:	0810a9b9 	.word	0x0810a9b9
 810a950:	0810aa77 	.word	0x0810aa77
 810a954:	0810a905 	.word	0x0810a905
 810a958:	0810a905 	.word	0x0810a905
 810a95c:	0810aab7 	.word	0x0810aab7
 810a960:	0810a905 	.word	0x0810a905
 810a964:	0810a9b9 	.word	0x0810a9b9
 810a968:	0810a905 	.word	0x0810a905
 810a96c:	0810a905 	.word	0x0810a905
 810a970:	0810aa7f 	.word	0x0810aa7f
 810a974:	682b      	ldr	r3, [r5, #0]
 810a976:	1d1a      	adds	r2, r3, #4
 810a978:	681b      	ldr	r3, [r3, #0]
 810a97a:	602a      	str	r2, [r5, #0]
 810a97c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810a984:	2301      	movs	r3, #1
 810a986:	e0a3      	b.n	810aad0 <_printf_i+0x1f4>
 810a988:	6820      	ldr	r0, [r4, #0]
 810a98a:	6829      	ldr	r1, [r5, #0]
 810a98c:	0606      	lsls	r6, r0, #24
 810a98e:	f101 0304 	add.w	r3, r1, #4
 810a992:	d50a      	bpl.n	810a9aa <_printf_i+0xce>
 810a994:	680e      	ldr	r6, [r1, #0]
 810a996:	602b      	str	r3, [r5, #0]
 810a998:	2e00      	cmp	r6, #0
 810a99a:	da03      	bge.n	810a9a4 <_printf_i+0xc8>
 810a99c:	232d      	movs	r3, #45	; 0x2d
 810a99e:	4276      	negs	r6, r6
 810a9a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a9a4:	485e      	ldr	r0, [pc, #376]	; (810ab20 <_printf_i+0x244>)
 810a9a6:	230a      	movs	r3, #10
 810a9a8:	e019      	b.n	810a9de <_printf_i+0x102>
 810a9aa:	680e      	ldr	r6, [r1, #0]
 810a9ac:	602b      	str	r3, [r5, #0]
 810a9ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 810a9b2:	bf18      	it	ne
 810a9b4:	b236      	sxthne	r6, r6
 810a9b6:	e7ef      	b.n	810a998 <_printf_i+0xbc>
 810a9b8:	682b      	ldr	r3, [r5, #0]
 810a9ba:	6820      	ldr	r0, [r4, #0]
 810a9bc:	1d19      	adds	r1, r3, #4
 810a9be:	6029      	str	r1, [r5, #0]
 810a9c0:	0601      	lsls	r1, r0, #24
 810a9c2:	d501      	bpl.n	810a9c8 <_printf_i+0xec>
 810a9c4:	681e      	ldr	r6, [r3, #0]
 810a9c6:	e002      	b.n	810a9ce <_printf_i+0xf2>
 810a9c8:	0646      	lsls	r6, r0, #25
 810a9ca:	d5fb      	bpl.n	810a9c4 <_printf_i+0xe8>
 810a9cc:	881e      	ldrh	r6, [r3, #0]
 810a9ce:	4854      	ldr	r0, [pc, #336]	; (810ab20 <_printf_i+0x244>)
 810a9d0:	2f6f      	cmp	r7, #111	; 0x6f
 810a9d2:	bf0c      	ite	eq
 810a9d4:	2308      	moveq	r3, #8
 810a9d6:	230a      	movne	r3, #10
 810a9d8:	2100      	movs	r1, #0
 810a9da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810a9de:	6865      	ldr	r5, [r4, #4]
 810a9e0:	60a5      	str	r5, [r4, #8]
 810a9e2:	2d00      	cmp	r5, #0
 810a9e4:	bfa2      	ittt	ge
 810a9e6:	6821      	ldrge	r1, [r4, #0]
 810a9e8:	f021 0104 	bicge.w	r1, r1, #4
 810a9ec:	6021      	strge	r1, [r4, #0]
 810a9ee:	b90e      	cbnz	r6, 810a9f4 <_printf_i+0x118>
 810a9f0:	2d00      	cmp	r5, #0
 810a9f2:	d04d      	beq.n	810aa90 <_printf_i+0x1b4>
 810a9f4:	4615      	mov	r5, r2
 810a9f6:	fbb6 f1f3 	udiv	r1, r6, r3
 810a9fa:	fb03 6711 	mls	r7, r3, r1, r6
 810a9fe:	5dc7      	ldrb	r7, [r0, r7]
 810aa00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810aa04:	4637      	mov	r7, r6
 810aa06:	42bb      	cmp	r3, r7
 810aa08:	460e      	mov	r6, r1
 810aa0a:	d9f4      	bls.n	810a9f6 <_printf_i+0x11a>
 810aa0c:	2b08      	cmp	r3, #8
 810aa0e:	d10b      	bne.n	810aa28 <_printf_i+0x14c>
 810aa10:	6823      	ldr	r3, [r4, #0]
 810aa12:	07de      	lsls	r6, r3, #31
 810aa14:	d508      	bpl.n	810aa28 <_printf_i+0x14c>
 810aa16:	6923      	ldr	r3, [r4, #16]
 810aa18:	6861      	ldr	r1, [r4, #4]
 810aa1a:	4299      	cmp	r1, r3
 810aa1c:	bfde      	ittt	le
 810aa1e:	2330      	movle	r3, #48	; 0x30
 810aa20:	f805 3c01 	strble.w	r3, [r5, #-1]
 810aa24:	f105 35ff 	addle.w	r5, r5, #4294967295
 810aa28:	1b52      	subs	r2, r2, r5
 810aa2a:	6122      	str	r2, [r4, #16]
 810aa2c:	f8cd a000 	str.w	sl, [sp]
 810aa30:	464b      	mov	r3, r9
 810aa32:	aa03      	add	r2, sp, #12
 810aa34:	4621      	mov	r1, r4
 810aa36:	4640      	mov	r0, r8
 810aa38:	f7ff fee2 	bl	810a800 <_printf_common>
 810aa3c:	3001      	adds	r0, #1
 810aa3e:	d14c      	bne.n	810aada <_printf_i+0x1fe>
 810aa40:	f04f 30ff 	mov.w	r0, #4294967295
 810aa44:	b004      	add	sp, #16
 810aa46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810aa4a:	4835      	ldr	r0, [pc, #212]	; (810ab20 <_printf_i+0x244>)
 810aa4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 810aa50:	6829      	ldr	r1, [r5, #0]
 810aa52:	6823      	ldr	r3, [r4, #0]
 810aa54:	f851 6b04 	ldr.w	r6, [r1], #4
 810aa58:	6029      	str	r1, [r5, #0]
 810aa5a:	061d      	lsls	r5, r3, #24
 810aa5c:	d514      	bpl.n	810aa88 <_printf_i+0x1ac>
 810aa5e:	07df      	lsls	r7, r3, #31
 810aa60:	bf44      	itt	mi
 810aa62:	f043 0320 	orrmi.w	r3, r3, #32
 810aa66:	6023      	strmi	r3, [r4, #0]
 810aa68:	b91e      	cbnz	r6, 810aa72 <_printf_i+0x196>
 810aa6a:	6823      	ldr	r3, [r4, #0]
 810aa6c:	f023 0320 	bic.w	r3, r3, #32
 810aa70:	6023      	str	r3, [r4, #0]
 810aa72:	2310      	movs	r3, #16
 810aa74:	e7b0      	b.n	810a9d8 <_printf_i+0xfc>
 810aa76:	6823      	ldr	r3, [r4, #0]
 810aa78:	f043 0320 	orr.w	r3, r3, #32
 810aa7c:	6023      	str	r3, [r4, #0]
 810aa7e:	2378      	movs	r3, #120	; 0x78
 810aa80:	4828      	ldr	r0, [pc, #160]	; (810ab24 <_printf_i+0x248>)
 810aa82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810aa86:	e7e3      	b.n	810aa50 <_printf_i+0x174>
 810aa88:	0659      	lsls	r1, r3, #25
 810aa8a:	bf48      	it	mi
 810aa8c:	b2b6      	uxthmi	r6, r6
 810aa8e:	e7e6      	b.n	810aa5e <_printf_i+0x182>
 810aa90:	4615      	mov	r5, r2
 810aa92:	e7bb      	b.n	810aa0c <_printf_i+0x130>
 810aa94:	682b      	ldr	r3, [r5, #0]
 810aa96:	6826      	ldr	r6, [r4, #0]
 810aa98:	6961      	ldr	r1, [r4, #20]
 810aa9a:	1d18      	adds	r0, r3, #4
 810aa9c:	6028      	str	r0, [r5, #0]
 810aa9e:	0635      	lsls	r5, r6, #24
 810aaa0:	681b      	ldr	r3, [r3, #0]
 810aaa2:	d501      	bpl.n	810aaa8 <_printf_i+0x1cc>
 810aaa4:	6019      	str	r1, [r3, #0]
 810aaa6:	e002      	b.n	810aaae <_printf_i+0x1d2>
 810aaa8:	0670      	lsls	r0, r6, #25
 810aaaa:	d5fb      	bpl.n	810aaa4 <_printf_i+0x1c8>
 810aaac:	8019      	strh	r1, [r3, #0]
 810aaae:	2300      	movs	r3, #0
 810aab0:	6123      	str	r3, [r4, #16]
 810aab2:	4615      	mov	r5, r2
 810aab4:	e7ba      	b.n	810aa2c <_printf_i+0x150>
 810aab6:	682b      	ldr	r3, [r5, #0]
 810aab8:	1d1a      	adds	r2, r3, #4
 810aaba:	602a      	str	r2, [r5, #0]
 810aabc:	681d      	ldr	r5, [r3, #0]
 810aabe:	6862      	ldr	r2, [r4, #4]
 810aac0:	2100      	movs	r1, #0
 810aac2:	4628      	mov	r0, r5
 810aac4:	f7f5 fc0c 	bl	81002e0 <memchr>
 810aac8:	b108      	cbz	r0, 810aace <_printf_i+0x1f2>
 810aaca:	1b40      	subs	r0, r0, r5
 810aacc:	6060      	str	r0, [r4, #4]
 810aace:	6863      	ldr	r3, [r4, #4]
 810aad0:	6123      	str	r3, [r4, #16]
 810aad2:	2300      	movs	r3, #0
 810aad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810aad8:	e7a8      	b.n	810aa2c <_printf_i+0x150>
 810aada:	6923      	ldr	r3, [r4, #16]
 810aadc:	462a      	mov	r2, r5
 810aade:	4649      	mov	r1, r9
 810aae0:	4640      	mov	r0, r8
 810aae2:	47d0      	blx	sl
 810aae4:	3001      	adds	r0, #1
 810aae6:	d0ab      	beq.n	810aa40 <_printf_i+0x164>
 810aae8:	6823      	ldr	r3, [r4, #0]
 810aaea:	079b      	lsls	r3, r3, #30
 810aaec:	d413      	bmi.n	810ab16 <_printf_i+0x23a>
 810aaee:	68e0      	ldr	r0, [r4, #12]
 810aaf0:	9b03      	ldr	r3, [sp, #12]
 810aaf2:	4298      	cmp	r0, r3
 810aaf4:	bfb8      	it	lt
 810aaf6:	4618      	movlt	r0, r3
 810aaf8:	e7a4      	b.n	810aa44 <_printf_i+0x168>
 810aafa:	2301      	movs	r3, #1
 810aafc:	4632      	mov	r2, r6
 810aafe:	4649      	mov	r1, r9
 810ab00:	4640      	mov	r0, r8
 810ab02:	47d0      	blx	sl
 810ab04:	3001      	adds	r0, #1
 810ab06:	d09b      	beq.n	810aa40 <_printf_i+0x164>
 810ab08:	3501      	adds	r5, #1
 810ab0a:	68e3      	ldr	r3, [r4, #12]
 810ab0c:	9903      	ldr	r1, [sp, #12]
 810ab0e:	1a5b      	subs	r3, r3, r1
 810ab10:	42ab      	cmp	r3, r5
 810ab12:	dcf2      	bgt.n	810aafa <_printf_i+0x21e>
 810ab14:	e7eb      	b.n	810aaee <_printf_i+0x212>
 810ab16:	2500      	movs	r5, #0
 810ab18:	f104 0619 	add.w	r6, r4, #25
 810ab1c:	e7f5      	b.n	810ab0a <_printf_i+0x22e>
 810ab1e:	bf00      	nop
 810ab20:	0810b339 	.word	0x0810b339
 810ab24:	0810b34a 	.word	0x0810b34a

0810ab28 <memcpy>:
 810ab28:	440a      	add	r2, r1
 810ab2a:	4291      	cmp	r1, r2
 810ab2c:	f100 33ff 	add.w	r3, r0, #4294967295
 810ab30:	d100      	bne.n	810ab34 <memcpy+0xc>
 810ab32:	4770      	bx	lr
 810ab34:	b510      	push	{r4, lr}
 810ab36:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ab3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810ab3e:	4291      	cmp	r1, r2
 810ab40:	d1f9      	bne.n	810ab36 <memcpy+0xe>
 810ab42:	bd10      	pop	{r4, pc}

0810ab44 <memmove>:
 810ab44:	4288      	cmp	r0, r1
 810ab46:	b510      	push	{r4, lr}
 810ab48:	eb01 0402 	add.w	r4, r1, r2
 810ab4c:	d902      	bls.n	810ab54 <memmove+0x10>
 810ab4e:	4284      	cmp	r4, r0
 810ab50:	4623      	mov	r3, r4
 810ab52:	d807      	bhi.n	810ab64 <memmove+0x20>
 810ab54:	1e43      	subs	r3, r0, #1
 810ab56:	42a1      	cmp	r1, r4
 810ab58:	d008      	beq.n	810ab6c <memmove+0x28>
 810ab5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810ab5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 810ab62:	e7f8      	b.n	810ab56 <memmove+0x12>
 810ab64:	4402      	add	r2, r0
 810ab66:	4601      	mov	r1, r0
 810ab68:	428a      	cmp	r2, r1
 810ab6a:	d100      	bne.n	810ab6e <memmove+0x2a>
 810ab6c:	bd10      	pop	{r4, pc}
 810ab6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810ab72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810ab76:	e7f7      	b.n	810ab68 <memmove+0x24>

0810ab78 <_free_r>:
 810ab78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810ab7a:	2900      	cmp	r1, #0
 810ab7c:	d044      	beq.n	810ac08 <_free_r+0x90>
 810ab7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ab82:	9001      	str	r0, [sp, #4]
 810ab84:	2b00      	cmp	r3, #0
 810ab86:	f1a1 0404 	sub.w	r4, r1, #4
 810ab8a:	bfb8      	it	lt
 810ab8c:	18e4      	addlt	r4, r4, r3
 810ab8e:	f000 f913 	bl	810adb8 <__malloc_lock>
 810ab92:	4a1e      	ldr	r2, [pc, #120]	; (810ac0c <_free_r+0x94>)
 810ab94:	9801      	ldr	r0, [sp, #4]
 810ab96:	6813      	ldr	r3, [r2, #0]
 810ab98:	b933      	cbnz	r3, 810aba8 <_free_r+0x30>
 810ab9a:	6063      	str	r3, [r4, #4]
 810ab9c:	6014      	str	r4, [r2, #0]
 810ab9e:	b003      	add	sp, #12
 810aba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810aba4:	f000 b90e 	b.w	810adc4 <__malloc_unlock>
 810aba8:	42a3      	cmp	r3, r4
 810abaa:	d908      	bls.n	810abbe <_free_r+0x46>
 810abac:	6825      	ldr	r5, [r4, #0]
 810abae:	1961      	adds	r1, r4, r5
 810abb0:	428b      	cmp	r3, r1
 810abb2:	bf01      	itttt	eq
 810abb4:	6819      	ldreq	r1, [r3, #0]
 810abb6:	685b      	ldreq	r3, [r3, #4]
 810abb8:	1949      	addeq	r1, r1, r5
 810abba:	6021      	streq	r1, [r4, #0]
 810abbc:	e7ed      	b.n	810ab9a <_free_r+0x22>
 810abbe:	461a      	mov	r2, r3
 810abc0:	685b      	ldr	r3, [r3, #4]
 810abc2:	b10b      	cbz	r3, 810abc8 <_free_r+0x50>
 810abc4:	42a3      	cmp	r3, r4
 810abc6:	d9fa      	bls.n	810abbe <_free_r+0x46>
 810abc8:	6811      	ldr	r1, [r2, #0]
 810abca:	1855      	adds	r5, r2, r1
 810abcc:	42a5      	cmp	r5, r4
 810abce:	d10b      	bne.n	810abe8 <_free_r+0x70>
 810abd0:	6824      	ldr	r4, [r4, #0]
 810abd2:	4421      	add	r1, r4
 810abd4:	1854      	adds	r4, r2, r1
 810abd6:	42a3      	cmp	r3, r4
 810abd8:	6011      	str	r1, [r2, #0]
 810abda:	d1e0      	bne.n	810ab9e <_free_r+0x26>
 810abdc:	681c      	ldr	r4, [r3, #0]
 810abde:	685b      	ldr	r3, [r3, #4]
 810abe0:	6053      	str	r3, [r2, #4]
 810abe2:	4421      	add	r1, r4
 810abe4:	6011      	str	r1, [r2, #0]
 810abe6:	e7da      	b.n	810ab9e <_free_r+0x26>
 810abe8:	d902      	bls.n	810abf0 <_free_r+0x78>
 810abea:	230c      	movs	r3, #12
 810abec:	6003      	str	r3, [r0, #0]
 810abee:	e7d6      	b.n	810ab9e <_free_r+0x26>
 810abf0:	6825      	ldr	r5, [r4, #0]
 810abf2:	1961      	adds	r1, r4, r5
 810abf4:	428b      	cmp	r3, r1
 810abf6:	bf04      	itt	eq
 810abf8:	6819      	ldreq	r1, [r3, #0]
 810abfa:	685b      	ldreq	r3, [r3, #4]
 810abfc:	6063      	str	r3, [r4, #4]
 810abfe:	bf04      	itt	eq
 810ac00:	1949      	addeq	r1, r1, r5
 810ac02:	6021      	streq	r1, [r4, #0]
 810ac04:	6054      	str	r4, [r2, #4]
 810ac06:	e7ca      	b.n	810ab9e <_free_r+0x26>
 810ac08:	b003      	add	sp, #12
 810ac0a:	bd30      	pop	{r4, r5, pc}
 810ac0c:	10000430 	.word	0x10000430

0810ac10 <sbrk_aligned>:
 810ac10:	b570      	push	{r4, r5, r6, lr}
 810ac12:	4e0e      	ldr	r6, [pc, #56]	; (810ac4c <sbrk_aligned+0x3c>)
 810ac14:	460c      	mov	r4, r1
 810ac16:	6831      	ldr	r1, [r6, #0]
 810ac18:	4605      	mov	r5, r0
 810ac1a:	b911      	cbnz	r1, 810ac22 <sbrk_aligned+0x12>
 810ac1c:	f000 f8bc 	bl	810ad98 <_sbrk_r>
 810ac20:	6030      	str	r0, [r6, #0]
 810ac22:	4621      	mov	r1, r4
 810ac24:	4628      	mov	r0, r5
 810ac26:	f000 f8b7 	bl	810ad98 <_sbrk_r>
 810ac2a:	1c43      	adds	r3, r0, #1
 810ac2c:	d00a      	beq.n	810ac44 <sbrk_aligned+0x34>
 810ac2e:	1cc4      	adds	r4, r0, #3
 810ac30:	f024 0403 	bic.w	r4, r4, #3
 810ac34:	42a0      	cmp	r0, r4
 810ac36:	d007      	beq.n	810ac48 <sbrk_aligned+0x38>
 810ac38:	1a21      	subs	r1, r4, r0
 810ac3a:	4628      	mov	r0, r5
 810ac3c:	f000 f8ac 	bl	810ad98 <_sbrk_r>
 810ac40:	3001      	adds	r0, #1
 810ac42:	d101      	bne.n	810ac48 <sbrk_aligned+0x38>
 810ac44:	f04f 34ff 	mov.w	r4, #4294967295
 810ac48:	4620      	mov	r0, r4
 810ac4a:	bd70      	pop	{r4, r5, r6, pc}
 810ac4c:	10000434 	.word	0x10000434

0810ac50 <_malloc_r>:
 810ac50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ac54:	1ccd      	adds	r5, r1, #3
 810ac56:	f025 0503 	bic.w	r5, r5, #3
 810ac5a:	3508      	adds	r5, #8
 810ac5c:	2d0c      	cmp	r5, #12
 810ac5e:	bf38      	it	cc
 810ac60:	250c      	movcc	r5, #12
 810ac62:	2d00      	cmp	r5, #0
 810ac64:	4607      	mov	r7, r0
 810ac66:	db01      	blt.n	810ac6c <_malloc_r+0x1c>
 810ac68:	42a9      	cmp	r1, r5
 810ac6a:	d905      	bls.n	810ac78 <_malloc_r+0x28>
 810ac6c:	230c      	movs	r3, #12
 810ac6e:	603b      	str	r3, [r7, #0]
 810ac70:	2600      	movs	r6, #0
 810ac72:	4630      	mov	r0, r6
 810ac74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ac78:	4e2e      	ldr	r6, [pc, #184]	; (810ad34 <_malloc_r+0xe4>)
 810ac7a:	f000 f89d 	bl	810adb8 <__malloc_lock>
 810ac7e:	6833      	ldr	r3, [r6, #0]
 810ac80:	461c      	mov	r4, r3
 810ac82:	bb34      	cbnz	r4, 810acd2 <_malloc_r+0x82>
 810ac84:	4629      	mov	r1, r5
 810ac86:	4638      	mov	r0, r7
 810ac88:	f7ff ffc2 	bl	810ac10 <sbrk_aligned>
 810ac8c:	1c43      	adds	r3, r0, #1
 810ac8e:	4604      	mov	r4, r0
 810ac90:	d14d      	bne.n	810ad2e <_malloc_r+0xde>
 810ac92:	6834      	ldr	r4, [r6, #0]
 810ac94:	4626      	mov	r6, r4
 810ac96:	2e00      	cmp	r6, #0
 810ac98:	d140      	bne.n	810ad1c <_malloc_r+0xcc>
 810ac9a:	6823      	ldr	r3, [r4, #0]
 810ac9c:	4631      	mov	r1, r6
 810ac9e:	4638      	mov	r0, r7
 810aca0:	eb04 0803 	add.w	r8, r4, r3
 810aca4:	f000 f878 	bl	810ad98 <_sbrk_r>
 810aca8:	4580      	cmp	r8, r0
 810acaa:	d13a      	bne.n	810ad22 <_malloc_r+0xd2>
 810acac:	6821      	ldr	r1, [r4, #0]
 810acae:	3503      	adds	r5, #3
 810acb0:	1a6d      	subs	r5, r5, r1
 810acb2:	f025 0503 	bic.w	r5, r5, #3
 810acb6:	3508      	adds	r5, #8
 810acb8:	2d0c      	cmp	r5, #12
 810acba:	bf38      	it	cc
 810acbc:	250c      	movcc	r5, #12
 810acbe:	4629      	mov	r1, r5
 810acc0:	4638      	mov	r0, r7
 810acc2:	f7ff ffa5 	bl	810ac10 <sbrk_aligned>
 810acc6:	3001      	adds	r0, #1
 810acc8:	d02b      	beq.n	810ad22 <_malloc_r+0xd2>
 810acca:	6823      	ldr	r3, [r4, #0]
 810accc:	442b      	add	r3, r5
 810acce:	6023      	str	r3, [r4, #0]
 810acd0:	e00e      	b.n	810acf0 <_malloc_r+0xa0>
 810acd2:	6822      	ldr	r2, [r4, #0]
 810acd4:	1b52      	subs	r2, r2, r5
 810acd6:	d41e      	bmi.n	810ad16 <_malloc_r+0xc6>
 810acd8:	2a0b      	cmp	r2, #11
 810acda:	d916      	bls.n	810ad0a <_malloc_r+0xba>
 810acdc:	1961      	adds	r1, r4, r5
 810acde:	42a3      	cmp	r3, r4
 810ace0:	6025      	str	r5, [r4, #0]
 810ace2:	bf18      	it	ne
 810ace4:	6059      	strne	r1, [r3, #4]
 810ace6:	6863      	ldr	r3, [r4, #4]
 810ace8:	bf08      	it	eq
 810acea:	6031      	streq	r1, [r6, #0]
 810acec:	5162      	str	r2, [r4, r5]
 810acee:	604b      	str	r3, [r1, #4]
 810acf0:	4638      	mov	r0, r7
 810acf2:	f104 060b 	add.w	r6, r4, #11
 810acf6:	f000 f865 	bl	810adc4 <__malloc_unlock>
 810acfa:	f026 0607 	bic.w	r6, r6, #7
 810acfe:	1d23      	adds	r3, r4, #4
 810ad00:	1af2      	subs	r2, r6, r3
 810ad02:	d0b6      	beq.n	810ac72 <_malloc_r+0x22>
 810ad04:	1b9b      	subs	r3, r3, r6
 810ad06:	50a3      	str	r3, [r4, r2]
 810ad08:	e7b3      	b.n	810ac72 <_malloc_r+0x22>
 810ad0a:	6862      	ldr	r2, [r4, #4]
 810ad0c:	42a3      	cmp	r3, r4
 810ad0e:	bf0c      	ite	eq
 810ad10:	6032      	streq	r2, [r6, #0]
 810ad12:	605a      	strne	r2, [r3, #4]
 810ad14:	e7ec      	b.n	810acf0 <_malloc_r+0xa0>
 810ad16:	4623      	mov	r3, r4
 810ad18:	6864      	ldr	r4, [r4, #4]
 810ad1a:	e7b2      	b.n	810ac82 <_malloc_r+0x32>
 810ad1c:	4634      	mov	r4, r6
 810ad1e:	6876      	ldr	r6, [r6, #4]
 810ad20:	e7b9      	b.n	810ac96 <_malloc_r+0x46>
 810ad22:	230c      	movs	r3, #12
 810ad24:	603b      	str	r3, [r7, #0]
 810ad26:	4638      	mov	r0, r7
 810ad28:	f000 f84c 	bl	810adc4 <__malloc_unlock>
 810ad2c:	e7a1      	b.n	810ac72 <_malloc_r+0x22>
 810ad2e:	6025      	str	r5, [r4, #0]
 810ad30:	e7de      	b.n	810acf0 <_malloc_r+0xa0>
 810ad32:	bf00      	nop
 810ad34:	10000430 	.word	0x10000430

0810ad38 <_realloc_r>:
 810ad38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ad3c:	4680      	mov	r8, r0
 810ad3e:	4614      	mov	r4, r2
 810ad40:	460e      	mov	r6, r1
 810ad42:	b921      	cbnz	r1, 810ad4e <_realloc_r+0x16>
 810ad44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810ad48:	4611      	mov	r1, r2
 810ad4a:	f7ff bf81 	b.w	810ac50 <_malloc_r>
 810ad4e:	b92a      	cbnz	r2, 810ad5c <_realloc_r+0x24>
 810ad50:	f7ff ff12 	bl	810ab78 <_free_r>
 810ad54:	4625      	mov	r5, r4
 810ad56:	4628      	mov	r0, r5
 810ad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ad5c:	f000 f838 	bl	810add0 <_malloc_usable_size_r>
 810ad60:	4284      	cmp	r4, r0
 810ad62:	4607      	mov	r7, r0
 810ad64:	d802      	bhi.n	810ad6c <_realloc_r+0x34>
 810ad66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810ad6a:	d812      	bhi.n	810ad92 <_realloc_r+0x5a>
 810ad6c:	4621      	mov	r1, r4
 810ad6e:	4640      	mov	r0, r8
 810ad70:	f7ff ff6e 	bl	810ac50 <_malloc_r>
 810ad74:	4605      	mov	r5, r0
 810ad76:	2800      	cmp	r0, #0
 810ad78:	d0ed      	beq.n	810ad56 <_realloc_r+0x1e>
 810ad7a:	42bc      	cmp	r4, r7
 810ad7c:	4622      	mov	r2, r4
 810ad7e:	4631      	mov	r1, r6
 810ad80:	bf28      	it	cs
 810ad82:	463a      	movcs	r2, r7
 810ad84:	f7ff fed0 	bl	810ab28 <memcpy>
 810ad88:	4631      	mov	r1, r6
 810ad8a:	4640      	mov	r0, r8
 810ad8c:	f7ff fef4 	bl	810ab78 <_free_r>
 810ad90:	e7e1      	b.n	810ad56 <_realloc_r+0x1e>
 810ad92:	4635      	mov	r5, r6
 810ad94:	e7df      	b.n	810ad56 <_realloc_r+0x1e>
	...

0810ad98 <_sbrk_r>:
 810ad98:	b538      	push	{r3, r4, r5, lr}
 810ad9a:	4d06      	ldr	r5, [pc, #24]	; (810adb4 <_sbrk_r+0x1c>)
 810ad9c:	2300      	movs	r3, #0
 810ad9e:	4604      	mov	r4, r0
 810ada0:	4608      	mov	r0, r1
 810ada2:	602b      	str	r3, [r5, #0]
 810ada4:	f000 f81e 	bl	810ade4 <_sbrk>
 810ada8:	1c43      	adds	r3, r0, #1
 810adaa:	d102      	bne.n	810adb2 <_sbrk_r+0x1a>
 810adac:	682b      	ldr	r3, [r5, #0]
 810adae:	b103      	cbz	r3, 810adb2 <_sbrk_r+0x1a>
 810adb0:	6023      	str	r3, [r4, #0]
 810adb2:	bd38      	pop	{r3, r4, r5, pc}
 810adb4:	10000438 	.word	0x10000438

0810adb8 <__malloc_lock>:
 810adb8:	4801      	ldr	r0, [pc, #4]	; (810adc0 <__malloc_lock+0x8>)
 810adba:	f000 b811 	b.w	810ade0 <__retarget_lock_acquire_recursive>
 810adbe:	bf00      	nop
 810adc0:	1000043c 	.word	0x1000043c

0810adc4 <__malloc_unlock>:
 810adc4:	4801      	ldr	r0, [pc, #4]	; (810adcc <__malloc_unlock+0x8>)
 810adc6:	f000 b80c 	b.w	810ade2 <__retarget_lock_release_recursive>
 810adca:	bf00      	nop
 810adcc:	1000043c 	.word	0x1000043c

0810add0 <_malloc_usable_size_r>:
 810add0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810add4:	1f18      	subs	r0, r3, #4
 810add6:	2b00      	cmp	r3, #0
 810add8:	bfbc      	itt	lt
 810adda:	580b      	ldrlt	r3, [r1, r0]
 810addc:	18c0      	addlt	r0, r0, r3
 810adde:	4770      	bx	lr

0810ade0 <__retarget_lock_acquire_recursive>:
 810ade0:	4770      	bx	lr

0810ade2 <__retarget_lock_release_recursive>:
 810ade2:	4770      	bx	lr

0810ade4 <_sbrk>:
 810ade4:	4a04      	ldr	r2, [pc, #16]	; (810adf8 <_sbrk+0x14>)
 810ade6:	6811      	ldr	r1, [r2, #0]
 810ade8:	4603      	mov	r3, r0
 810adea:	b909      	cbnz	r1, 810adf0 <_sbrk+0xc>
 810adec:	4903      	ldr	r1, [pc, #12]	; (810adfc <_sbrk+0x18>)
 810adee:	6011      	str	r1, [r2, #0]
 810adf0:	6810      	ldr	r0, [r2, #0]
 810adf2:	4403      	add	r3, r0
 810adf4:	6013      	str	r3, [r2, #0]
 810adf6:	4770      	bx	lr
 810adf8:	10000440 	.word	0x10000440
 810adfc:	10000448 	.word	0x10000448

0810ae00 <_init>:
 810ae00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ae02:	bf00      	nop
 810ae04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ae06:	bc08      	pop	{r3}
 810ae08:	469e      	mov	lr, r3
 810ae0a:	4770      	bx	lr

0810ae0c <_fini>:
 810ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ae0e:	bf00      	nop
 810ae10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ae12:	bc08      	pop	{r3}
 810ae14:	469e      	mov	lr, r3
 810ae16:	4770      	bx	lr
