
Dual_Core__High_Level_Arch_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003938  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be0  08003be0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003be0  08003be0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003be0  08003be0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  24000010  08003bf8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000544  08003bf8  00020544  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea1f  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ec  00000000  00000000  0002ea5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00030d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  000318f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039529  00000000  00000000  00032388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f728  00000000  00000000  0006b8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017556b  00000000  00000000  0007afd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f0544  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e60  00000000  00000000  001f0594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003bb8 	.word	0x08003bb8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003bb8 	.word	0x08003bb8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <MX_GPIO_Init+0x6c>)
 800040c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_GPIO_Init+0x6c>)
 800041c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000420:	f003 0304 	and.w	r3, r3, #4
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_GPIO_Init+0x6c>)
 800042a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800042e:	4a10      	ldr	r2, [pc, #64]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <MX_GPIO_Init+0x6c>)
 800043a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800043e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044c:	4a08      	ldr	r2, [pc, #32]	; (8000470 <MX_GPIO_Init+0x6c>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]

}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	58024400 	.word	0x58024400

08000474 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800047a:	4b5a      	ldr	r3, [pc, #360]	; (80005e4 <main+0x170>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000482:	2b00      	cmp	r3, #0
 8000484:	d11b      	bne.n	80004be <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000486:	f3bf 8f4f 	dsb	sy
}
 800048a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800048c:	f3bf 8f6f 	isb	sy
}
 8000490:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000492:	4b54      	ldr	r3, [pc, #336]	; (80005e4 <main+0x170>)
 8000494:	2200      	movs	r2, #0
 8000496:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800049a:	f3bf 8f4f 	dsb	sy
}
 800049e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a0:	f3bf 8f6f 	isb	sy
}
 80004a4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004a6:	4b4f      	ldr	r3, [pc, #316]	; (80005e4 <main+0x170>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a4e      	ldr	r2, [pc, #312]	; (80005e4 <main+0x170>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004b2:	f3bf 8f4f 	dsb	sy
}
 80004b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004b8:	f3bf 8f6f 	isb	sy
}
 80004bc:	e000      	b.n	80004c0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004be:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004c0:	4b48      	ldr	r3, [pc, #288]	; (80005e4 <main+0x170>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d138      	bne.n	800053e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004cc:	4b45      	ldr	r3, [pc, #276]	; (80005e4 <main+0x170>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004d4:	f3bf 8f4f 	dsb	sy
}
 80004d8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004da:	4b42      	ldr	r3, [pc, #264]	; (80005e4 <main+0x170>)
 80004dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004e0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	0b5b      	lsrs	r3, r3, #13
 80004e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004ea:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	08db      	lsrs	r3, r3, #3
 80004f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004f4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	015a      	lsls	r2, r3, #5
 80004fa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80004fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000504:	4937      	ldr	r1, [pc, #220]	; (80005e4 <main+0x170>)
 8000506:	4313      	orrs	r3, r2
 8000508:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	607a      	str	r2, [r7, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1ef      	bne.n	80004f6 <main+0x82>
    } while(sets-- != 0U);
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	60ba      	str	r2, [r7, #8]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1e5      	bne.n	80004ec <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000520:	f3bf 8f4f 	dsb	sy
}
 8000524:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000526:	4b2f      	ldr	r3, [pc, #188]	; (80005e4 <main+0x170>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a2e      	ldr	r2, [pc, #184]	; (80005e4 <main+0x170>)
 800052c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000530:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000532:	f3bf 8f4f 	dsb	sy
}
 8000536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000538:	f3bf 8f6f 	isb	sy
}
 800053c:	e000      	b.n	8000540 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800053e:	bf00      	nop
	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000544:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000546:	bf00      	nop
 8000548:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <main+0x174>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <main+0xea>
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	617a      	str	r2, [r7, #20]
 800055a:	2b00      	cmp	r3, #0
 800055c:	dcf4      	bgt.n	8000548 <main+0xd4>
		;
	if (timeout < 0)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	2b00      	cmp	r3, #0
 8000562:	da01      	bge.n	8000568 <main+0xf4>
	{
		Error_Handler();
 8000564:	f000 f8c8 	bl	80006f8 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000568:	f000 fa5a 	bl	8000a20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800056c:	f000 f83e 	bl	80005ec <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <main+0x174>)
 8000572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000576:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <main+0x174>)
 8000578:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800057c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <main+0x174>)
 8000582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 fdc8 	bl	8001124 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fdde 	bl	8001158 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800059c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a0:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80005a2:	bf00      	nop
 80005a4:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <main+0x174>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d104      	bne.n	80005ba <main+0x146>
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	1e5a      	subs	r2, r3, #1
 80005b4:	617a      	str	r2, [r7, #20]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	dcf4      	bgt.n	80005a4 <main+0x130>
		;
	if (timeout < 0)
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	da01      	bge.n	80005c4 <main+0x150>
	{
		Error_Handler();
 80005c0:	f000 f89a 	bl	80006f8 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c4:	f7ff ff1e 	bl	8000404 <MX_GPIO_Init>
	MX_USB_OTG_FS_PCD_Init();
 80005c8:	f000 f8ec 	bl	80007a4 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */
	int test_flag = 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	613b      	str	r3, [r7, #16]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		if (test_flag == 1)
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d1fc      	bne.n	80005d0 <main+0x15c>
		{
			taskToDo(TASK_CM4_INIT);
 80005d6:	2003      	movs	r0, #3
 80005d8:	f000 f990 	bl	80008fc <taskToDo>
			test_flag = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
		if (test_flag == 1)
 80005e0:	e7f6      	b.n	80005d0 <main+0x15c>
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00
 80005e8:	58024400 	.word	0x58024400

080005ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09c      	sub	sp, #112	; 0x70
 80005f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	224c      	movs	r2, #76	; 0x4c
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fad4 	bl	8003ba8 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2220      	movs	r2, #32
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 face 	bl	8003ba8 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800060c:	2004      	movs	r0, #4
 800060e:	f000 ff2b 	bl	8001468 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	4b35      	ldr	r3, [pc, #212]	; (80006ec <SystemClock_Config+0x100>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a34      	ldr	r2, [pc, #208]	; (80006ec <SystemClock_Config+0x100>)
 800061c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b32      	ldr	r3, [pc, #200]	; (80006ec <SystemClock_Config+0x100>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <SystemClock_Config+0x104>)
 800062e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000630:	4a2f      	ldr	r2, [pc, #188]	; (80006f0 <SystemClock_Config+0x104>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000638:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <SystemClock_Config+0x104>)
 800063a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000644:	bf00      	nop
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemClock_Config+0x100>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800064e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000652:	d1f8      	bne.n	8000646 <SystemClock_Config+0x5a>
	{
	}

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000654:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <SystemClock_Config+0x108>)
 8000656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000658:	f023 0303 	bic.w	r3, r3, #3
 800065c:	4a25      	ldr	r2, [pc, #148]	; (80006f4 <SystemClock_Config+0x108>)
 800065e:	f043 0302 	orr.w	r3, r3, #2
 8000662:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8000664:	2321      	movs	r3, #33	; 0x21
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800066e:	2301      	movs	r3, #1
 8000670:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	2302      	movs	r3, #2
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 120;
 800067e:	2378      	movs	r3, #120	; 0x78
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000686:	2304      	movs	r3, #4
 8000688:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800068e:	230c      	movs	r3, #12
 8000690:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000692:	2300      	movs	r3, #0
 8000694:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ff4c 	bl	800153c <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80006aa:	f000 f825 	bl	80006f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ae:	233f      	movs	r3, #63	; 0x3f
 80006b0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006ba:	2308      	movs	r3, #8
 80006bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006be:	2340      	movs	r3, #64	; 0x40
 80006c0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006c2:	2340      	movs	r3, #64	; 0x40
 80006c4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2104      	movs	r1, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fb5f 	bl	8001d98 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xf8>
	{
		Error_Handler();
 80006e0:	f000 f80a 	bl	80006f8 <Error_Handler>
	}
}
 80006e4:	bf00      	nop
 80006e6:	3770      	adds	r7, #112	; 0x70
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	58024800 	.word	0x58024800
 80006f0:	58000400 	.word	0x58000400
 80006f4:	58024400 	.word	0x58024400

080006f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <HAL_MspInit+0x3c>)
 800070c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000710:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <HAL_MspInit+0x3c>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_MspInit+0x3c>)
 800071c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	207d      	movs	r0, #125	; 0x7d
 800072e:	f000 fb14 	bl	8000d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000732:	207d      	movs	r0, #125	; 0x7d
 8000734:	f000 fb2b 	bl	8000d8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	58024400 	.word	0x58024400

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f9b8 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800079c:	f000 fd02 	bl	80011a4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80007ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007b0:	2209      	movs	r2, #9
 80007b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007b6:	2202      	movs	r2, #2
 80007b8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007c2:	2202      	movs	r2, #2
 80007c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007da:	2201      	movs	r2, #1
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007ec:	f000 fcf4 	bl	80011d8 <HAL_PCD_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80007f6:	f7ff ff7f 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2400002c 	.word	0x2400002c
 8000804:	40080000 	.word	0x40080000

08000808 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b0b8      	sub	sp, #224	; 0xe0
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	22bc      	movs	r2, #188	; 0xbc
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f003 f9bd 	bl	8003ba8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a2f      	ldr	r2, [pc, #188]	; (80008f0 <HAL_PCD_MspInit+0xe8>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d156      	bne.n	80008e6 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000838:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800083c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800083e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	4618      	mov	r0, r3
 800084c:	f001 fdd4 	bl	80023f8 <HAL_RCCEx_PeriphCLKConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000856:	f7ff ff4f 	bl	80006f8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800085a:	f000 fe5f 	bl	800151c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <HAL_PCD_MspInit+0xec>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <HAL_PCD_MspInit+0xec>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <HAL_PCD_MspInit+0xec>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800087c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000896:	230a      	movs	r3, #10
 8000898:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008a0:	4619      	mov	r1, r3
 80008a2:	4815      	ldr	r0, [pc, #84]	; (80008f8 <HAL_PCD_MspInit+0xf0>)
 80008a4:	f000 fa8e 	bl	8000dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008c0:	4619      	mov	r1, r3
 80008c2:	480d      	ldr	r0, [pc, #52]	; (80008f8 <HAL_PCD_MspInit+0xf0>)
 80008c4:	f000 fa7e 	bl	8000dc4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_PCD_MspInit+0xec>)
 80008ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008ce:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <HAL_PCD_MspInit+0xec>)
 80008d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_PCD_MspInit+0xec>)
 80008da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80008e6:	bf00      	nop
 80008e8:	37e0      	adds	r7, #224	; 0xe0
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40080000 	.word	0x40080000
 80008f4:	58024400 	.word	0x58024400
 80008f8:	58020000 	.word	0x58020000

080008fc <taskToDo>:
 * When an HSEM is released, changes occur in other core. Usually
 * this is a state change, or information copied/set to memory, local variables
 *
 * task: task to be sent to CM4
 */
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	switch (task)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b04      	cmp	r3, #4
 800090a:	d835      	bhi.n	8000978 <taskToDo+0x7c>
 800090c:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <taskToDo+0x18>)
 800090e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000912:	bf00      	nop
 8000914:	08000949 	.word	0x08000949
 8000918:	08000939 	.word	0x08000939
 800091c:	08000969 	.word	0x08000969
 8000920:	08000929 	.word	0x08000929
 8000924:	08000959 	.word	0x08000959
	{
	case TASK_CM4_INIT:
		HSEM_TAKE_RELEASE(HSEM_CM4_INIT);
 8000928:	2002      	movs	r0, #2
 800092a:	f000 fbfb 	bl	8001124 <HAL_HSEM_FastTake>
 800092e:	2100      	movs	r1, #0
 8000930:	2002      	movs	r0, #2
 8000932:	f000 fc11 	bl	8001158 <HAL_HSEM_Release>
		break;
 8000936:	e020      	b.n	800097a <taskToDo+0x7e>

	case TASK_ROBOT_TURN:
		HSEM_TAKE_RELEASE(HSEM_ROBOT_TURN);
 8000938:	2004      	movs	r0, #4
 800093a:	f000 fbf3 	bl	8001124 <HAL_HSEM_FastTake>
 800093e:	2100      	movs	r1, #0
 8000940:	2004      	movs	r0, #4
 8000942:	f000 fc09 	bl	8001158 <HAL_HSEM_Release>
		break;
 8000946:	e018      	b.n	800097a <taskToDo+0x7e>

	case TASK_USER_TURN:
		HSEM_TAKE_RELEASE(HSEM_USER_TURN);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 fbeb 	bl	8001124 <HAL_HSEM_FastTake>
 800094e:	2100      	movs	r1, #0
 8000950:	2003      	movs	r0, #3
 8000952:	f000 fc01 	bl	8001158 <HAL_HSEM_Release>
		break;
 8000956:	e010      	b.n	800097a <taskToDo+0x7e>

	case TASK_GAME_END:
		HSEM_TAKE_RELEASE(HSEM_GAME_END);
 8000958:	2005      	movs	r0, #5
 800095a:	f000 fbe3 	bl	8001124 <HAL_HSEM_FastTake>
 800095e:	2100      	movs	r1, #0
 8000960:	2005      	movs	r0, #5
 8000962:	f000 fbf9 	bl	8001158 <HAL_HSEM_Release>
		break;
 8000966:	e008      	b.n	800097a <taskToDo+0x7e>

	case TASK_CLEAN_UP:
		HSEM_TAKE_RELEASE(HSEM_CLEAN_UP);
 8000968:	2006      	movs	r0, #6
 800096a:	f000 fbdb 	bl	8001124 <HAL_HSEM_FastTake>
 800096e:	2100      	movs	r1, #0
 8000970:	2006      	movs	r0, #6
 8000972:	f000 fbf1 	bl	8001158 <HAL_HSEM_Release>
		break;
 8000976:	e000      	b.n	800097a <taskToDo+0x7e>

	default:
		break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop

08000984 <HAL_HSEM_FreeCallback>:

void HAL_HSEM_FreeCallback(uint32_t SemMask)
/* Function is called automatically when a semaphore is released.
 * This function takes care of HSEM's released from Cortex-M4.
 */
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	if (SemMask == HSEM_CM4_DONE_MASK) 	// Is CM4 done with it's current task ?
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d114      	bne.n	80009bc <HAL_HSEM_FreeCallback+0x38>
	{
		// chose next state based on current state
		if (*st == STATE_INIT)
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_HSEM_FreeCallback+0x40>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d103      	bne.n	80009a4 <HAL_HSEM_FreeCallback+0x20>
		{
			*st = STATE_INIT;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_HSEM_FreeCallback+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
		}
		if (*st == STATE_ROBOT_MOVE)
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <HAL_HSEM_FreeCallback+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d103      	bne.n	80009b6 <HAL_HSEM_FreeCallback+0x32>
		{
			*subRobotM = SUBSTATE_RM_CM4_DONE;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_HSEM_FreeCallback+0x44>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2204      	movs	r2, #4
 80009b4:	701a      	strb	r2, [r3, #0]
		}
		HAL_HSEM_ActivateNotification(HSEM_CM4_DONE_MASK); // reactivate notification
 80009b6:	2002      	movs	r0, #2
 80009b8:	f000 fbe2 	bl	8001180 <HAL_HSEM_ActivateNotification>
	}
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2400053c 	.word	0x2400053c
 80009c8:	24000538 	.word	0x24000538

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009d0:	f7ff fc82 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009d6:	490d      	ldr	r1, [pc, #52]	; (8000a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009ec:	4c0a      	ldr	r4, [pc, #40]	; (8000a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fa:	f003 f8b1 	bl	8003b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fd39 	bl	8000474 <main>
  bx  lr
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a0c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a10:	08003be8 	.word	0x08003be8
  ldr r2, =_sbss
 8000a14:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a18:	24000544 	.word	0x24000544

08000a1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC3_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a26:	2003      	movs	r0, #3
 8000a28:	f000 f98c 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a2c:	f001 fb6a 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8000a30:	4602      	mov	r2, r0
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_Init+0x68>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	f003 030f 	and.w	r3, r3, #15
 8000a3c:	4913      	ldr	r1, [pc, #76]	; (8000a8c <HAL_Init+0x6c>)
 8000a3e:	5ccb      	ldrb	r3, [r1, r3]
 8000a40:	f003 031f 	and.w	r3, r3, #31
 8000a44:	fa22 f303 	lsr.w	r3, r2, r3
 8000a48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_Init+0x68>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_Init+0x6c>)
 8000a54:	5cd3      	ldrb	r3, [r2, r3]
 8000a56:	f003 031f 	and.w	r3, r3, #31
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a60:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <HAL_Init+0x70>)
 8000a62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a64:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <HAL_Init+0x74>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f814 	bl	8000a98 <HAL_InitTick>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e002      	b.n	8000a80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7a:	f7ff fe43 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	58024400 	.word	0x58024400
 8000a8c:	08003bd0 	.word	0x08003bd0
 8000a90:	24000004 	.word	0x24000004
 8000a94:	24000000 	.word	0x24000000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_InitTick+0x60>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e021      	b.n	8000af0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <HAL_InitTick+0x64>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_InitTick+0x60>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f971 	bl	8000daa <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f93b 	bl	8000d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x68>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2400000c 	.word	0x2400000c
 8000afc:	24000000 	.word	0x24000000
 8000b00:	24000008 	.word	0x24000008

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2400000c 	.word	0x2400000c
 8000b28:	24000540 	.word	0x24000540

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	24000540 	.word	0x24000540

08000b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b4c:	f7ff ffee 	bl	8000b2c <HAL_GetTick>
 8000b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	d005      	beq.n	8000b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_Delay+0x44>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6a:	bf00      	nop
 8000b6c:	f7ff ffde 	bl	8000b2c <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f7      	bhi.n	8000b6c <HAL_Delay+0x28>
  {
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2400000c 	.word	0x2400000c

08000b8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetREVID+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	0c1b      	lsrs	r3, r3, #16
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	5c001000 	.word	0x5c001000

08000ba4 <__NVIC_SetPriorityGrouping>:
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <__NVIC_SetPriorityGrouping+0x40>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x40>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00
 8000be8:	05fa0000 	.word	0x05fa0000

08000bec <__NVIC_GetPriorityGrouping>:
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff29 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff40 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff90 	bl	8000c98 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5f 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff33 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffa4 	bl	8000d00 <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000dd2:	4b89      	ldr	r3, [pc, #548]	; (8000ff8 <HAL_GPIO_Init+0x234>)
 8000dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dd6:	e194      	b.n	8001102 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	2101      	movs	r1, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8186 	beq.w	80010fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d005      	beq.n	8000e08 <HAL_GPIO_Init+0x44>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d130      	bne.n	8000e6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3e:	2201      	movs	r2, #1
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	f003 0201 	and.w	r2, r3, #1
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d017      	beq.n	8000ea6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d123      	bne.n	8000efa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	691a      	ldr	r2, [r3, #16]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	69b9      	ldr	r1, [r7, #24]
 8000ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0203 	and.w	r2, r3, #3
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80e0 	beq.w	80010fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3c:	4b2f      	ldr	r3, [pc, #188]	; (8000ffc <HAL_GPIO_Init+0x238>)
 8000f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f42:	4a2e      	ldr	r2, [pc, #184]	; (8000ffc <HAL_GPIO_Init+0x238>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_GPIO_Init+0x238>)
 8000f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5a:	4a29      	ldr	r2, [pc, #164]	; (8001000 <HAL_GPIO_Init+0x23c>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a20      	ldr	r2, [pc, #128]	; (8001004 <HAL_GPIO_Init+0x240>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d052      	beq.n	800102c <HAL_GPIO_Init+0x268>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a1f      	ldr	r2, [pc, #124]	; (8001008 <HAL_GPIO_Init+0x244>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d031      	beq.n	8000ff2 <HAL_GPIO_Init+0x22e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a1e      	ldr	r2, [pc, #120]	; (800100c <HAL_GPIO_Init+0x248>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d02b      	beq.n	8000fee <HAL_GPIO_Init+0x22a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <HAL_GPIO_Init+0x24c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d025      	beq.n	8000fea <HAL_GPIO_Init+0x226>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <HAL_GPIO_Init+0x250>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d01f      	beq.n	8000fe6 <HAL_GPIO_Init+0x222>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <HAL_GPIO_Init+0x254>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d019      	beq.n	8000fe2 <HAL_GPIO_Init+0x21e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a1a      	ldr	r2, [pc, #104]	; (800101c <HAL_GPIO_Init+0x258>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d013      	beq.n	8000fde <HAL_GPIO_Init+0x21a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_GPIO_Init+0x25c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d00d      	beq.n	8000fda <HAL_GPIO_Init+0x216>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a18      	ldr	r2, [pc, #96]	; (8001024 <HAL_GPIO_Init+0x260>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d007      	beq.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_GPIO_Init+0x264>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_GPIO_Init+0x20e>
 8000fce:	2309      	movs	r3, #9
 8000fd0:	e02d      	b.n	800102e <HAL_GPIO_Init+0x26a>
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	e02b      	b.n	800102e <HAL_GPIO_Init+0x26a>
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	e029      	b.n	800102e <HAL_GPIO_Init+0x26a>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e027      	b.n	800102e <HAL_GPIO_Init+0x26a>
 8000fde:	2306      	movs	r3, #6
 8000fe0:	e025      	b.n	800102e <HAL_GPIO_Init+0x26a>
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	e023      	b.n	800102e <HAL_GPIO_Init+0x26a>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e021      	b.n	800102e <HAL_GPIO_Init+0x26a>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e01f      	b.n	800102e <HAL_GPIO_Init+0x26a>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e01d      	b.n	800102e <HAL_GPIO_Init+0x26a>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e01b      	b.n	800102e <HAL_GPIO_Init+0x26a>
 8000ff6:	bf00      	nop
 8000ff8:	58000080 	.word	0x58000080
 8000ffc:	58024400 	.word	0x58024400
 8001000:	58000400 	.word	0x58000400
 8001004:	58020000 	.word	0x58020000
 8001008:	58020400 	.word	0x58020400
 800100c:	58020800 	.word	0x58020800
 8001010:	58020c00 	.word	0x58020c00
 8001014:	58021000 	.word	0x58021000
 8001018:	58021400 	.word	0x58021400
 800101c:	58021800 	.word	0x58021800
 8001020:	58021c00 	.word	0x58021c00
 8001024:	58022000 	.word	0x58022000
 8001028:	58022400 	.word	0x58022400
 800102c:	2300      	movs	r3, #0
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	f002 0203 	and.w	r2, r2, #3
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	4093      	lsls	r3, r2
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800103e:	4938      	ldr	r1, [pc, #224]	; (8001120 <HAL_GPIO_Init+0x35c>)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800104c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800107a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80010a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	3301      	adds	r3, #1
 8001100:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa22 f303 	lsr.w	r3, r2, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	f47f ae63 	bne.w	8000dd8 <HAL_GPIO_Init+0x14>
  }
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3724      	adds	r7, #36	; 0x24
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	58000400 	.word	0x58000400

08001124 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800112c:	4a08      	ldr	r2, [pc, #32]	; (8001150 <HAL_HSEM_FastTake+0x2c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3320      	adds	r3, #32
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_HSEM_FastTake+0x30>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d101      	bne.n	8001140 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	e000      	b.n	8001142 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	58026400 	.word	0x58026400
 8001154:	80000300 	.word	0x80000300

08001158 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001162:	4906      	ldr	r1, [pc, #24]	; (800117c <HAL_HSEM_Release+0x24>)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	58026400 	.word	0x58026400

08001180 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_HSEM_ActivateNotification+0x20>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4904      	ldr	r1, [pc, #16]	; (80011a0 <HAL_HSEM_ActivateNotification+0x20>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4313      	orrs	r3, r2
 8001192:	600b      	str	r3, [r1, #0]
#endif
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	58026500 	.word	0x58026500

080011a4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_HSEM_IRQHandler+0x30>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_HSEM_IRQHandler+0x30>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4906      	ldr	r1, [pc, #24]	; (80011d4 <HAL_HSEM_IRQHandler+0x30>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <HAL_HSEM_IRQHandler+0x30>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fbdd 	bl	8000984 <HAL_HSEM_FreeCallback>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	58026500 	.word	0x58026500

080011d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011da:	b08f      	sub	sp, #60	; 0x3c
 80011dc:	af0a      	add	r7, sp, #40	; 0x28
 80011de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e116      	b.n	8001418 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d106      	bne.n	800120a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff faff 	bl	8000808 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f002 f9fd 	bl	8003628 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	687e      	ldr	r6, [r7, #4]
 8001236:	466d      	mov	r5, sp
 8001238:	f106 0410 	add.w	r4, r6, #16
 800123c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800123e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001244:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001248:	e885 0003 	stmia.w	r5, {r0, r1}
 800124c:	1d33      	adds	r3, r6, #4
 800124e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001250:	6838      	ldr	r0, [r7, #0]
 8001252:	f002 f97b 	bl	800354c <USB_CoreInit>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2202      	movs	r2, #2
 8001260:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0d7      	b.n	8001418 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f002 f9eb 	bl	800364a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e04a      	b.n	8001310 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	333d      	adds	r3, #61	; 0x3d
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4413      	add	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	333c      	adds	r3, #60	; 0x3c
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	b298      	uxth	r0, r3
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	3344      	adds	r3, #68	; 0x44
 80012b6:	4602      	mov	r2, r0
 80012b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	440b      	add	r3, r1
 80012c8:	3340      	adds	r3, #64	; 0x40
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	3348      	adds	r3, #72	; 0x48
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	334c      	adds	r3, #76	; 0x4c
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	3354      	adds	r3, #84	; 0x54
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	3301      	adds	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	429a      	cmp	r2, r3
 8001318:	d3af      	bcc.n	800127a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e044      	b.n	80013aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d3b5      	bcc.n	8001320 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	687e      	ldr	r6, [r7, #4]
 80013bc:	466d      	mov	r5, sp
 80013be:	f106 0410 	add.w	r4, r6, #16
 80013c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80013d2:	1d33      	adds	r3, r6, #4
 80013d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d6:	6838      	ldr	r0, [r7, #0]
 80013d8:	f002 f984 	bl	80036e4 <USB_DevInit>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2202      	movs	r2, #2
 80013e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e014      	b.n	8001418 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	2b01      	cmp	r3, #1
 8001404:	d102      	bne.n	800140c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f80a 	bl	8001420 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fb42 	bl	8003a9a <USB_DevDisconnect>

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001420 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_PCDEx_ActivateLPM+0x44>)
 8001450:	4313      	orrs	r3, r2
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	10000003 	.word	0x10000003

08001468 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_PWREx_ConfigSupply+0xb0>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	2b06      	cmp	r3, #6
 800147a:	d00a      	beq.n	8001492 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_PWREx_ConfigSupply+0xb0>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d001      	beq.n	800148e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e040      	b.n	8001510 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e03e      	b.n	8001510 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_PWREx_ConfigSupply+0xb0>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800149a:	491f      	ldr	r1, [pc, #124]	; (8001518 <HAL_PWREx_ConfigSupply+0xb0>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4313      	orrs	r3, r2
 80014a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014a2:	f7ff fb43 	bl	8000b2c <HAL_GetTick>
 80014a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014a8:	e009      	b.n	80014be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014aa:	f7ff fb3f 	bl	8000b2c <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b8:	d901      	bls.n	80014be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e028      	b.n	8001510 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_PWREx_ConfigSupply+0xb0>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ca:	d1ee      	bne.n	80014aa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b1e      	cmp	r3, #30
 80014d0:	d008      	beq.n	80014e4 <HAL_PWREx_ConfigSupply+0x7c>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b2e      	cmp	r3, #46	; 0x2e
 80014d6:	d005      	beq.n	80014e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b1d      	cmp	r3, #29
 80014dc:	d002      	beq.n	80014e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b2d      	cmp	r3, #45	; 0x2d
 80014e2:	d114      	bne.n	800150e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014e4:	f7ff fb22 	bl	8000b2c <HAL_GetTick>
 80014e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014ea:	e009      	b.n	8001500 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014ec:	f7ff fb1e 	bl	8000b2c <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fa:	d901      	bls.n	8001500 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e007      	b.n	8001510 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_PWREx_ConfigSupply+0xb0>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d1ee      	bne.n	80014ec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	58024800 	.word	0x58024800

0800151c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	58024800 	.word	0x58024800

0800153c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	; 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d102      	bne.n	8001550 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	f000 bc1d 	b.w	8001d8a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8087 	beq.w	800166c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800155e:	4b99      	ldr	r3, [pc, #612]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001568:	4b96      	ldr	r3, [pc, #600]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	2b10      	cmp	r3, #16
 8001572:	d007      	beq.n	8001584 <HAL_RCC_OscConfig+0x48>
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	2b18      	cmp	r3, #24
 8001578:	d110      	bne.n	800159c <HAL_RCC_OscConfig+0x60>
 800157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d10b      	bne.n	800159c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001584:	4b8f      	ldr	r3, [pc, #572]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d06c      	beq.n	800166a <HAL_RCC_OscConfig+0x12e>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d168      	bne.n	800166a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e3f6      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x78>
 80015a6:	4b87      	ldr	r3, [pc, #540]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a86      	ldr	r2, [pc, #536]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e02e      	b.n	8001612 <HAL_RCC_OscConfig+0xd6>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x9a>
 80015bc:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a80      	ldr	r2, [pc, #512]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80015c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b7e      	ldr	r3, [pc, #504]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a7d      	ldr	r2, [pc, #500]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e01d      	b.n	8001612 <HAL_RCC_OscConfig+0xd6>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0xbe>
 80015e0:	4b78      	ldr	r3, [pc, #480]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a77      	ldr	r2, [pc, #476]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80015e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b75      	ldr	r3, [pc, #468]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a74      	ldr	r2, [pc, #464]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0xd6>
 80015fa:	4b72      	ldr	r3, [pc, #456]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a71      	ldr	r2, [pc, #452]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 8001600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b6f      	ldr	r3, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a6e      	ldr	r2, [pc, #440]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 800160c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d013      	beq.n	8001642 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161a:	f7ff fa87 	bl	8000b2c <HAL_GetTick>
 800161e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001622:	f7ff fa83 	bl	8000b2c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b64      	cmp	r3, #100	; 0x64
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e3aa      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001634:	4b63      	ldr	r3, [pc, #396]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0xe6>
 8001640:	e014      	b.n	800166c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fa73 	bl	8000b2c <HAL_GetTick>
 8001646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800164a:	f7ff fa6f 	bl	8000b2c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b64      	cmp	r3, #100	; 0x64
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e396      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x10e>
 8001668:	e000      	b.n	800166c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80cb 	beq.w	8001810 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800167a:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001682:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001684:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <HAL_RCC_OscConfig+0x164>
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	2b18      	cmp	r3, #24
 8001694:	d156      	bne.n	8001744 <HAL_RCC_OscConfig+0x208>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d151      	bne.n	8001744 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a0:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_OscConfig+0x17c>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e368      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016b8:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 0219 	bic.w	r2, r3, #25
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	493f      	ldr	r1, [pc, #252]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016ca:	f7ff fa2f 	bl	8000b2c <HAL_GetTick>
 80016ce:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff fa2b 	bl	8000b2c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e352      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016e4:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	f7ff fa4c 	bl	8000b8c <HAL_GetREVID>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d817      	bhi.n	800172e <HAL_RCC_OscConfig+0x1f2>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2b40      	cmp	r3, #64	; 0x40
 8001704:	d108      	bne.n	8001718 <HAL_RCC_OscConfig+0x1dc>
 8001706:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800170e:	4a2d      	ldr	r2, [pc, #180]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001716:	e07b      	b.n	8001810 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	031b      	lsls	r3, r3, #12
 8001726:	4927      	ldr	r1, [pc, #156]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800172c:	e070      	b.n	8001810 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	061b      	lsls	r3, r3, #24
 800173c:	4921      	ldr	r1, [pc, #132]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001742:	e065      	b.n	8001810 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d048      	beq.n	80017de <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 0219 	bic.w	r2, r3, #25
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	491a      	ldr	r1, [pc, #104]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff f9e5 	bl	8000b2c <HAL_GetTick>
 8001762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001766:	f7ff f9e1 	bl	8000b2c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e308      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001784:	f7ff fa02 	bl	8000b8c <HAL_GetREVID>
 8001788:	4603      	mov	r3, r0
 800178a:	f241 0203 	movw	r2, #4099	; 0x1003
 800178e:	4293      	cmp	r3, r2
 8001790:	d81a      	bhi.n	80017c8 <HAL_RCC_OscConfig+0x28c>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	2b40      	cmp	r3, #64	; 0x40
 8001798:	d108      	bne.n	80017ac <HAL_RCC_OscConfig+0x270>
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	6053      	str	r3, [r2, #4]
 80017aa:	e031      	b.n	8001810 <HAL_RCC_OscConfig+0x2d4>
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	031b      	lsls	r3, r3, #12
 80017ba:	4902      	ldr	r1, [pc, #8]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e026      	b.n	8001810 <HAL_RCC_OscConfig+0x2d4>
 80017c2:	bf00      	nop
 80017c4:	58024400 	.word	0x58024400
 80017c8:	4b9a      	ldr	r3, [pc, #616]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	061b      	lsls	r3, r3, #24
 80017d6:	4997      	ldr	r1, [pc, #604]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
 80017dc:	e018      	b.n	8001810 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017de:	4b95      	ldr	r3, [pc, #596]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a94      	ldr	r2, [pc, #592]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff f99f 	bl	8000b2c <HAL_GetTick>
 80017ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff f99b 	bl	8000b2c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e2c2      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001804:	4b8b      	ldr	r3, [pc, #556]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80a9 	beq.w	8001970 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181e:	4b85      	ldr	r3, [pc, #532]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001826:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001828:	4b82      	ldr	r3, [pc, #520]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b08      	cmp	r3, #8
 8001832:	d007      	beq.n	8001844 <HAL_RCC_OscConfig+0x308>
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b18      	cmp	r3, #24
 8001838:	d13a      	bne.n	80018b0 <HAL_RCC_OscConfig+0x374>
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d135      	bne.n	80018b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001844:	4b7b      	ldr	r3, [pc, #492]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_OscConfig+0x320>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b80      	cmp	r3, #128	; 0x80
 8001856:	d001      	beq.n	800185c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e296      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800185c:	f7ff f996 	bl	8000b8c <HAL_GetREVID>
 8001860:	4603      	mov	r3, r0
 8001862:	f241 0203 	movw	r2, #4099	; 0x1003
 8001866:	4293      	cmp	r3, r2
 8001868:	d817      	bhi.n	800189a <HAL_RCC_OscConfig+0x35e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	2b20      	cmp	r3, #32
 8001870:	d108      	bne.n	8001884 <HAL_RCC_OscConfig+0x348>
 8001872:	4b70      	ldr	r3, [pc, #448]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800187a:	4a6e      	ldr	r2, [pc, #440]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 800187c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001880:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001882:	e075      	b.n	8001970 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001884:	4b6b      	ldr	r3, [pc, #428]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	069b      	lsls	r3, r3, #26
 8001892:	4968      	ldr	r1, [pc, #416]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001898:	e06a      	b.n	8001970 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800189a:	4b66      	ldr	r3, [pc, #408]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	061b      	lsls	r3, r3, #24
 80018a8:	4962      	ldr	r1, [pc, #392]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018ae:	e05f      	b.n	8001970 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d042      	beq.n	800193e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018b8:	4b5e      	ldr	r3, [pc, #376]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a5d      	ldr	r2, [pc, #372]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 80018be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff f932 	bl	8000b2c <HAL_GetTick>
 80018c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018cc:	f7ff f92e 	bl	8000b2c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e255      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018de:	4b55      	ldr	r3, [pc, #340]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018ea:	f7ff f94f 	bl	8000b8c <HAL_GetREVID>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d817      	bhi.n	8001928 <HAL_RCC_OscConfig+0x3ec>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d108      	bne.n	8001912 <HAL_RCC_OscConfig+0x3d6>
 8001900:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001908:	4a4a      	ldr	r2, [pc, #296]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 800190a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800190e:	6053      	str	r3, [r2, #4]
 8001910:	e02e      	b.n	8001970 <HAL_RCC_OscConfig+0x434>
 8001912:	4b48      	ldr	r3, [pc, #288]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	069b      	lsls	r3, r3, #26
 8001920:	4944      	ldr	r1, [pc, #272]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001922:	4313      	orrs	r3, r2
 8001924:	604b      	str	r3, [r1, #4]
 8001926:	e023      	b.n	8001970 <HAL_RCC_OscConfig+0x434>
 8001928:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	493f      	ldr	r1, [pc, #252]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001938:	4313      	orrs	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
 800193c:	e018      	b.n	8001970 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800193e:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a3c      	ldr	r2, [pc, #240]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff f8ef 	bl	8000b2c <HAL_GetTick>
 800194e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001952:	f7ff f8eb 	bl	8000b2c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e212      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001964:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d036      	beq.n	80019ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d019      	beq.n	80019b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001988:	4a2a      	ldr	r2, [pc, #168]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7ff f8cc 	bl	8000b2c <HAL_GetTick>
 8001994:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff f8c8 	bl	8000b2c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1ef      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 80019ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x45c>
 80019b6:	e018      	b.n	80019ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 80019ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff f8b2 	bl	8000b2c <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff f8ae 	bl	8000b2c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e1d5      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 80019e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d039      	beq.n	8001a6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d01c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f88f 	bl	8000b2c <HAL_GetTick>
 8001a0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a12:	f7ff f88b 	bl	8000b2c <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e1b2      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_RCC_OscConfig+0x4f8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x4d6>
 8001a30:	e01b      	b.n	8001a6a <HAL_RCC_OscConfig+0x52e>
 8001a32:	bf00      	nop
 8001a34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a38:	4b9b      	ldr	r3, [pc, #620]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a9a      	ldr	r2, [pc, #616]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a44:	f7ff f872 	bl	8000b2c <HAL_GetTick>
 8001a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a4c:	f7ff f86e 	bl	8000b2c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e195      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a5e:	4b92      	ldr	r3, [pc, #584]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8081 	beq.w	8001b7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a78:	4b8c      	ldr	r3, [pc, #560]	; (8001cac <HAL_RCC_OscConfig+0x770>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a8b      	ldr	r2, [pc, #556]	; (8001cac <HAL_RCC_OscConfig+0x770>)
 8001a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a84:	f7ff f852 	bl	8000b2c <HAL_GetTick>
 8001a88:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a8c:	f7ff f84e 	bl	8000b2c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e175      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a9e:	4b83      	ldr	r3, [pc, #524]	; (8001cac <HAL_RCC_OscConfig+0x770>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d106      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x584>
 8001ab2:	4b7d      	ldr	r3, [pc, #500]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	4a7c      	ldr	r2, [pc, #496]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6713      	str	r3, [r2, #112]	; 0x70
 8001abe:	e02d      	b.n	8001b1c <HAL_RCC_OscConfig+0x5e0>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x5a6>
 8001ac8:	4b77      	ldr	r3, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001acc:	4a76      	ldr	r2, [pc, #472]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad4:	4b74      	ldr	r3, [pc, #464]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a73      	ldr	r2, [pc, #460]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001ada:	f023 0304 	bic.w	r3, r3, #4
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	e01c      	b.n	8001b1c <HAL_RCC_OscConfig+0x5e0>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5c8>
 8001aea:	4b6f      	ldr	r3, [pc, #444]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	4a6e      	ldr	r2, [pc, #440]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6713      	str	r3, [r2, #112]	; 0x70
 8001af6:	4b6c      	ldr	r3, [pc, #432]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	4a6b      	ldr	r2, [pc, #428]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0x5e0>
 8001b04:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a67      	ldr	r2, [pc, #412]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b10:	4b65      	ldr	r3, [pc, #404]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a64      	ldr	r2, [pc, #400]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001b16:	f023 0304 	bic.w	r3, r3, #4
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d015      	beq.n	8001b50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff f802 	bl	8000b2c <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7fe fffe 	bl	8000b2c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e123      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b42:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0ee      	beq.n	8001b2c <HAL_RCC_OscConfig+0x5f0>
 8001b4e:	e014      	b.n	8001b7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7fe ffec 	bl	8000b2c <HAL_GetTick>
 8001b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7fe ffe8 	bl	8000b2c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e10d      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ee      	bne.n	8001b58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8102 	beq.w	8001d88 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b84:	4b48      	ldr	r3, [pc, #288]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b8c:	2b18      	cmp	r3, #24
 8001b8e:	f000 80bd 	beq.w	8001d0c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	f040 809e 	bne.w	8001cd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	4b42      	ldr	r3, [pc, #264]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a41      	ldr	r2, [pc, #260]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7fe ffc0 	bl	8000b2c <HAL_GetTick>
 8001bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7fe ffbc 	bl	8000b2c <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0e3      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bc2:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bce:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_RCC_OscConfig+0x774>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	430a      	orrs	r2, r1
 8001be2:	4931      	ldr	r1, [pc, #196]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	628b      	str	r3, [r1, #40]	; 0x28
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	3b01      	subs	r3, #1
 8001bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	025b      	lsls	r3, r3, #9
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c02:	3b01      	subs	r3, #1
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c10:	3b01      	subs	r3, #1
 8001c12:	061b      	lsls	r3, r3, #24
 8001c14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c18:	4923      	ldr	r1, [pc, #140]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	4a21      	ldr	r2, [pc, #132]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_RCC_OscConfig+0x778>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c36:	00d2      	lsls	r2, r2, #3
 8001c38:	491b      	ldr	r1, [pc, #108]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	f023 020c 	bic.w	r2, r3, #12
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4917      	ldr	r1, [pc, #92]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	f023 0202 	bic.w	r2, r3, #2
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5c:	4912      	ldr	r1, [pc, #72]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_RCC_OscConfig+0x76c>)
 8001c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7fe ff45 	bl	8000b2c <HAL_GetTick>
 8001ca2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ca4:	e011      	b.n	8001cca <HAL_RCC_OscConfig+0x78e>
 8001ca6:	bf00      	nop
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	58024800 	.word	0x58024800
 8001cb0:	fffffc0c 	.word	0xfffffc0c
 8001cb4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7fe ff38 	bl	8000b2c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e05f      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cca:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <HAL_RCC_OscConfig+0x858>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x77c>
 8001cd6:	e057      	b.n	8001d88 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <HAL_RCC_OscConfig+0x858>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a2d      	ldr	r2, [pc, #180]	; (8001d94 <HAL_RCC_OscConfig+0x858>)
 8001cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7fe ff22 	bl	8000b2c <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe ff1e 	bl	8000b2c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e045      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <HAL_RCC_OscConfig+0x858>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x7b0>
 8001d0a:	e03d      	b.n	8001d88 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_OscConfig+0x858>)
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_RCC_OscConfig+0x858>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d031      	beq.n	8001d84 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f003 0203 	and.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d12a      	bne.n	8001d84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d122      	bne.n	8001d84 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d11a      	bne.n	8001d84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	0a5b      	lsrs	r3, r3, #9
 8001d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d111      	bne.n	8001d84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	0c1b      	lsrs	r3, r3, #16
 8001d64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d108      	bne.n	8001d84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	0e1b      	lsrs	r3, r3, #24
 8001d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3730      	adds	r7, #48	; 0x30
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	58024400 	.word	0x58024400

08001d98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e19c      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dac:	4b8a      	ldr	r3, [pc, #552]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d910      	bls.n	8001ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b87      	ldr	r3, [pc, #540]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 020f 	bic.w	r2, r3, #15
 8001dc2:	4985      	ldr	r1, [pc, #532]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b83      	ldr	r3, [pc, #524]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e184      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d010      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d908      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001df8:	4b78      	ldr	r3, [pc, #480]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	4975      	ldr	r1, [pc, #468]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d010      	beq.n	8001e38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	4b70      	ldr	r3, [pc, #448]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d908      	bls.n	8001e38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e26:	4b6d      	ldr	r3, [pc, #436]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	496a      	ldr	r1, [pc, #424]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d010      	beq.n	8001e66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d908      	bls.n	8001e66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e54:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	495e      	ldr	r1, [pc, #376]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d010      	beq.n	8001e94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69da      	ldr	r2, [r3, #28]
 8001e76:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d908      	bls.n	8001e94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e82:	4b56      	ldr	r3, [pc, #344]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4953      	ldr	r1, [pc, #332]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d010      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d908      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb0:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f023 020f 	bic.w	r2, r3, #15
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4947      	ldr	r1, [pc, #284]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d055      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ece:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4940      	ldr	r1, [pc, #256]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee8:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d121      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0f6      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d115      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0ea      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0de      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f28:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d6      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f023 0207 	bic.w	r2, r3, #7
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4925      	ldr	r1, [pc, #148]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7fe fdef 	bl	8000b2c <HAL_GetTick>
 8001f4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f52:	f7fe fdeb 	bl	8000b2c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0be      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f68:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d1eb      	bne.n	8001f52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d010      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d208      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f023 020f 	bic.w	r2, r3, #15
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	490e      	ldr	r1, [pc, #56]	; (8001fdc <HAL_RCC_ClockConfig+0x244>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d214      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 020f 	bic.w	r2, r3, #15
 8001fbe:	4906      	ldr	r1, [pc, #24]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCC_ClockConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e086      	b.n	80020e6 <HAL_RCC_ClockConfig+0x34e>
 8001fd8:	52002000 	.word	0x52002000
 8001fdc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d010      	beq.n	800200e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	4b3f      	ldr	r3, [pc, #252]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d208      	bcs.n	800200e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	4939      	ldr	r1, [pc, #228]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800200a:	4313      	orrs	r3, r2
 800200c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d010      	beq.n	800203c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002026:	429a      	cmp	r2, r3
 8002028:	d208      	bcs.n	800203c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800202a:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	492e      	ldr	r1, [pc, #184]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002038:	4313      	orrs	r3, r2
 800203a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d010      	beq.n	800206a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002054:	429a      	cmp	r2, r3
 8002056:	d208      	bcs.n	800206a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4922      	ldr	r1, [pc, #136]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002066:	4313      	orrs	r3, r2
 8002068:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002082:	429a      	cmp	r2, r3
 8002084:	d208      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4917      	ldr	r1, [pc, #92]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 8002094:	4313      	orrs	r3, r2
 8002096:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002098:	f000 f834 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	4912      	ldr	r1, [pc, #72]	; (80020f4 <HAL_RCC_ClockConfig+0x35c>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_RCC_ClockConfig+0x358>)
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_RCC_ClockConfig+0x35c>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
 80020cc:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <HAL_RCC_ClockConfig+0x360>)
 80020ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <HAL_RCC_ClockConfig+0x364>)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_RCC_ClockConfig+0x368>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fcdc 	bl	8000a98 <HAL_InitTick>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	58024400 	.word	0x58024400
 80020f4:	08003bd0 	.word	0x08003bd0
 80020f8:	24000004 	.word	0x24000004
 80020fc:	24000000 	.word	0x24000000
 8002100:	24000008 	.word	0x24000008

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800210a:	4bb3      	ldr	r3, [pc, #716]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002112:	2b18      	cmp	r3, #24
 8002114:	f200 8155 	bhi.w	80023c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002118:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <HAL_RCC_GetSysClockFreq+0x1c>)
 800211a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211e:	bf00      	nop
 8002120:	08002185 	.word	0x08002185
 8002124:	080023c3 	.word	0x080023c3
 8002128:	080023c3 	.word	0x080023c3
 800212c:	080023c3 	.word	0x080023c3
 8002130:	080023c3 	.word	0x080023c3
 8002134:	080023c3 	.word	0x080023c3
 8002138:	080023c3 	.word	0x080023c3
 800213c:	080023c3 	.word	0x080023c3
 8002140:	080021ab 	.word	0x080021ab
 8002144:	080023c3 	.word	0x080023c3
 8002148:	080023c3 	.word	0x080023c3
 800214c:	080023c3 	.word	0x080023c3
 8002150:	080023c3 	.word	0x080023c3
 8002154:	080023c3 	.word	0x080023c3
 8002158:	080023c3 	.word	0x080023c3
 800215c:	080023c3 	.word	0x080023c3
 8002160:	080021b1 	.word	0x080021b1
 8002164:	080023c3 	.word	0x080023c3
 8002168:	080023c3 	.word	0x080023c3
 800216c:	080023c3 	.word	0x080023c3
 8002170:	080023c3 	.word	0x080023c3
 8002174:	080023c3 	.word	0x080023c3
 8002178:	080023c3 	.word	0x080023c3
 800217c:	080023c3 	.word	0x080023c3
 8002180:	080021b7 	.word	0x080021b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002184:	4b94      	ldr	r3, [pc, #592]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002190:	4b91      	ldr	r3, [pc, #580]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	4a90      	ldr	r2, [pc, #576]	; (80023dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80021a2:	e111      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021a4:	4b8d      	ldr	r3, [pc, #564]	; (80023dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021a6:	61bb      	str	r3, [r7, #24]
    break;
 80021a8:	e10e      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80021aa:	4b8d      	ldr	r3, [pc, #564]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021ac:	61bb      	str	r3, [r7, #24]
    break;
 80021ae:	e10b      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80021b0:	4b8c      	ldr	r3, [pc, #560]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021b2:	61bb      	str	r3, [r7, #24]
    break;
 80021b4:	e108      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021b6:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80021c0:	4b85      	ldr	r3, [pc, #532]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021cc:	4b82      	ldr	r3, [pc, #520]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021d6:	4b80      	ldr	r3, [pc, #512]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021da:	08db      	lsrs	r3, r3, #3
 80021dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80e1 	beq.w	80023bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	f000 8083 	beq.w	8002308 <HAL_RCC_GetSysClockFreq+0x204>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b02      	cmp	r3, #2
 8002206:	f200 80a1 	bhi.w	800234c <HAL_RCC_GetSysClockFreq+0x248>
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x114>
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d056      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002216:	e099      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002218:	4b6f      	ldr	r3, [pc, #444]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b00      	cmp	r3, #0
 8002222:	d02d      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002224:	4b6c      	ldr	r3, [pc, #432]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	08db      	lsrs	r3, r3, #3
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	4a6b      	ldr	r2, [pc, #428]	; (80023dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800224a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800224e:	4b62      	ldr	r3, [pc, #392]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800225e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002262:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800226a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800226e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800227e:	e087      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800228a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800228e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002292:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022c2:	e065      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022d6:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002306:	e043      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002312:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800231a:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800232a:	ed97 6a02 	vldr	s12, [r7, #8]
 800232e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800233a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800233e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800234a:	e021      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002356:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800235a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800236e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002372:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800237a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800237e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800238e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	0a5b      	lsrs	r3, r3, #9
 8002396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800239a:	3301      	adds	r3, #1
 800239c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80023ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023b4:	ee17 3a90 	vmov	r3, s15
 80023b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80023ba:	e005      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    break;
 80023c0:	e002      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023c4:	61bb      	str	r3, [r7, #24]
    break;
 80023c6:	bf00      	nop
  }

  return sysclockfreq;
 80023c8:	69bb      	ldr	r3, [r7, #24]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	; 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	58024400 	.word	0x58024400
 80023dc:	03d09000 	.word	0x03d09000
 80023e0:	003d0900 	.word	0x003d0900
 80023e4:	007a1200 	.word	0x007a1200
 80023e8:	46000000 	.word	0x46000000
 80023ec:	4c742400 	.word	0x4c742400
 80023f0:	4a742400 	.word	0x4a742400
 80023f4:	4af42400 	.word	0x4af42400

080023f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002400:	2300      	movs	r3, #0
 8002402:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002404:	2300      	movs	r3, #0
 8002406:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d03f      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002418:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800241c:	d02a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800241e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002422:	d824      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002428:	d018      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800242a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800242e:	d81e      	bhi.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002438:	d007      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800243a:	e018      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800243c:	4ba3      	ldr	r3, [pc, #652]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	4aa2      	ldr	r2, [pc, #648]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002446:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002448:	e015      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	2102      	movs	r1, #2
 8002450:	4618      	mov	r0, r3
 8002452:	f000 ff17 	bl	8003284 <RCCEx_PLL2_Config>
 8002456:	4603      	mov	r3, r0
 8002458:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800245a:	e00c      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3324      	adds	r3, #36	; 0x24
 8002460:	2102      	movs	r1, #2
 8002462:	4618      	mov	r0, r3
 8002464:	f000 ffc0 	bl	80033e8 <RCCEx_PLL3_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800246c:	e003      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
      break;
 8002472:	e000      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002476:	7dfb      	ldrb	r3, [r7, #23]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d109      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800247c:	4b93      	ldr	r3, [pc, #588]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800247e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002488:	4990      	ldr	r1, [pc, #576]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	650b      	str	r3, [r1, #80]	; 0x50
 800248e:	e001      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d03d      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d826      	bhi.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80024a8:	a201      	add	r2, pc, #4	; (adr r2, 80024b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80024aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ae:	bf00      	nop
 80024b0:	080024c5 	.word	0x080024c5
 80024b4:	080024d3 	.word	0x080024d3
 80024b8:	080024e5 	.word	0x080024e5
 80024bc:	080024fd 	.word	0x080024fd
 80024c0:	080024fd 	.word	0x080024fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024c4:	4b81      	ldr	r3, [pc, #516]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	4a80      	ldr	r2, [pc, #512]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024d0:	e015      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fed3 	bl	8003284 <RCCEx_PLL2_Config>
 80024de:	4603      	mov	r3, r0
 80024e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024e2:	e00c      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3324      	adds	r3, #36	; 0x24
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 ff7c 	bl	80033e8 <RCCEx_PLL3_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024f4:	e003      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	75fb      	strb	r3, [r7, #23]
      break;
 80024fa:	e000      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80024fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002504:	4b71      	ldr	r3, [pc, #452]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002508:	f023 0207 	bic.w	r2, r3, #7
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	496e      	ldr	r1, [pc, #440]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	650b      	str	r3, [r1, #80]	; 0x50
 8002516:	e001      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002518:	7dfb      	ldrb	r3, [r7, #23]
 800251a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002524:	2b00      	cmp	r3, #0
 8002526:	d042      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002530:	d02b      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002536:	d825      	bhi.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002538:	2bc0      	cmp	r3, #192	; 0xc0
 800253a:	d028      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800253c:	2bc0      	cmp	r3, #192	; 0xc0
 800253e:	d821      	bhi.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002540:	2b80      	cmp	r3, #128	; 0x80
 8002542:	d016      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002544:	2b80      	cmp	r3, #128	; 0x80
 8002546:	d81d      	bhi.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800254c:	2b40      	cmp	r3, #64	; 0x40
 800254e:	d007      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002550:	e018      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002552:	4b5e      	ldr	r3, [pc, #376]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	4a5d      	ldr	r2, [pc, #372]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800255e:	e017      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fe8c 	bl	8003284 <RCCEx_PLL2_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002570:	e00e      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3324      	adds	r3, #36	; 0x24
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f000 ff35 	bl	80033e8 <RCCEx_PLL3_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002582:	e005      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	75fb      	strb	r3, [r7, #23]
      break;
 8002588:	e002      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800258e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002596:	4b4d      	ldr	r3, [pc, #308]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	494a      	ldr	r1, [pc, #296]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	650b      	str	r3, [r1, #80]	; 0x50
 80025a8:	e001      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d049      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025c4:	d030      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80025c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025ca:	d82a      	bhi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025d0:	d02c      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80025d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025d6:	d824      	bhi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025dc:	d018      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80025de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e2:	d81e      	bhi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80025e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ec:	d007      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 80025ee:	e018      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f0:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	4a35      	ldr	r2, [pc, #212]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025fc:	e017      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3304      	adds	r3, #4
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fe3d 	bl	8003284 <RCCEx_PLL2_Config>
 800260a:	4603      	mov	r3, r0
 800260c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800260e:	e00e      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3324      	adds	r3, #36	; 0x24
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fee6 	bl	80033e8 <RCCEx_PLL3_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002620:	e005      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	75fb      	strb	r3, [r7, #23]
      break;
 8002626:	e002      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002628:	bf00      	nop
 800262a:	e000      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800262c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002634:	4b25      	ldr	r3, [pc, #148]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002642:	4922      	ldr	r1, [pc, #136]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	658b      	str	r3, [r1, #88]	; 0x58
 8002648:	e001      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002656:	2b00      	cmp	r3, #0
 8002658:	d04b      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002664:	d030      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800266a:	d82a      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800266c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002670:	d02e      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002672:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002676:	d824      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800267c:	d018      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800267e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002682:	d81e      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d007      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800268e:	e018      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	4a0d      	ldr	r2, [pc, #52]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800269c:	e019      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fded 	bl	8003284 <RCCEx_PLL2_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80026ae:	e010      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3324      	adds	r3, #36	; 0x24
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fe96 	bl	80033e8 <RCCEx_PLL3_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026c0:	e007      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
      break;
 80026c6:	e004      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80026c8:	bf00      	nop
 80026ca:	e002      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80026cc:	58024400 	.word	0x58024400
      break;
 80026d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10a      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80026d8:	4b99      	ldr	r3, [pc, #612]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80026e6:	4996      	ldr	r1, [pc, #600]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	658b      	str	r3, [r1, #88]	; 0x58
 80026ec:	e001      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
 80026f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d032      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002702:	2b30      	cmp	r3, #48	; 0x30
 8002704:	d01c      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002706:	2b30      	cmp	r3, #48	; 0x30
 8002708:	d817      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800270a:	2b20      	cmp	r3, #32
 800270c:	d00c      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800270e:	2b20      	cmp	r3, #32
 8002710:	d813      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002712:	2b00      	cmp	r3, #0
 8002714:	d016      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002716:	2b10      	cmp	r3, #16
 8002718:	d10f      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271a:	4b89      	ldr	r3, [pc, #548]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	4a88      	ldr	r2, [pc, #544]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002726:	e00e      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	2102      	movs	r1, #2
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fda8 	bl	8003284 <RCCEx_PLL2_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002738:	e005      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
      break;
 800273e:	e002      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002740:	bf00      	nop
 8002742:	e000      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002746:	7dfb      	ldrb	r3, [r7, #23]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800274c:	4b7c      	ldr	r3, [pc, #496]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800274e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002750:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002758:	4979      	ldr	r1, [pc, #484]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800275a:	4313      	orrs	r3, r2
 800275c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800275e:	e001      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d047      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002778:	d030      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800277a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800277e:	d82a      	bhi.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002780:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002784:	d02c      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002786:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800278a:	d824      	bhi.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800278c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002790:	d018      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002796:	d81e      	bhi.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800279c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a0:	d007      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80027a2:	e018      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a4:	4b66      	ldr	r3, [pc, #408]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	4a65      	ldr	r2, [pc, #404]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027b0:	e017      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fd63 	bl	8003284 <RCCEx_PLL2_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027c2:	e00e      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3324      	adds	r3, #36	; 0x24
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fe0c 	bl	80033e8 <RCCEx_PLL3_Config>
 80027d0:	4603      	mov	r3, r0
 80027d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027d4:	e005      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	75fb      	strb	r3, [r7, #23]
      break;
 80027da:	e002      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80027dc:	bf00      	nop
 80027de:	e000      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80027e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027e8:	4b55      	ldr	r3, [pc, #340]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f4:	4952      	ldr	r1, [pc, #328]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	650b      	str	r3, [r1, #80]	; 0x50
 80027fa:	e001      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d049      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002814:	d02e      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281a:	d828      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800281c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002820:	d02a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002822:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002826:	d822      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002828:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800282c:	d026      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800282e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002832:	d81c      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002838:	d010      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800283a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800283e:	d816      	bhi.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01d      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002848:	d111      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3304      	adds	r3, #4
 800284e:	2101      	movs	r1, #1
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fd17 	bl	8003284 <RCCEx_PLL2_Config>
 8002856:	4603      	mov	r3, r0
 8002858:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800285a:	e012      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3324      	adds	r3, #36	; 0x24
 8002860:	2101      	movs	r1, #1
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fdc0 	bl	80033e8 <RCCEx_PLL3_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800286c:	e009      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
      break;
 8002872:	e006      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002874:	bf00      	nop
 8002876:	e004      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002878:	bf00      	nop
 800287a:	e002      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800287c:	bf00      	nop
 800287e:	e000      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d109      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002888:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800288a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002894:	492a      	ldr	r1, [pc, #168]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002896:	4313      	orrs	r3, r2
 8002898:	650b      	str	r3, [r1, #80]	; 0x50
 800289a:	e001      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d04d      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80028b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b6:	d02e      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80028b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028bc:	d828      	bhi.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c2:	d02a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80028c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c8:	d822      	bhi.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028ce:	d026      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80028d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028d4:	d81c      	bhi.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028da:	d010      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80028dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028e0:	d816      	bhi.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d01d      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80028e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028ea:	d111      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	2101      	movs	r1, #1
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fcc6 	bl	8003284 <RCCEx_PLL2_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80028fc:	e012      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3324      	adds	r3, #36	; 0x24
 8002902:	2101      	movs	r1, #1
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fd6f 	bl	80033e8 <RCCEx_PLL3_Config>
 800290a:	4603      	mov	r3, r0
 800290c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800290e:	e009      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	75fb      	strb	r3, [r7, #23]
      break;
 8002914:	e006      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002916:	bf00      	nop
 8002918:	e004      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800291a:	bf00      	nop
 800291c:	e002      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800291e:	bf00      	nop
 8002920:	e000      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10c      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002938:	4901      	ldr	r1, [pc, #4]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800293a:	4313      	orrs	r3, r2
 800293c:	658b      	str	r3, [r1, #88]	; 0x58
 800293e:	e003      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002940:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d02f      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800295c:	d00e      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800295e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002962:	d814      	bhi.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002964:	2b00      	cmp	r3, #0
 8002966:	d015      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800296c:	d10f      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800296e:	4baf      	ldr	r3, [pc, #700]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	4aae      	ldr	r2, [pc, #696]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800297a:	e00c      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	2101      	movs	r1, #1
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fc7e 	bl	8003284 <RCCEx_PLL2_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800298c:	e003      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
      break;
 8002992:	e000      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800299c:	4ba3      	ldr	r3, [pc, #652]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800299e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a8:	49a0      	ldr	r1, [pc, #640]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	650b      	str	r3, [r1, #80]	; 0x50
 80029ae:	e001      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b0:	7dfb      	ldrb	r3, [r7, #23]
 80029b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d032      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d81b      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80029c8:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80029ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ce:	bf00      	nop
 80029d0:	08002a07 	.word	0x08002a07
 80029d4:	080029e1 	.word	0x080029e1
 80029d8:	080029ef 	.word	0x080029ef
 80029dc:	08002a07 	.word	0x08002a07
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e0:	4b92      	ldr	r3, [pc, #584]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	4a91      	ldr	r2, [pc, #580]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80029ec:	e00c      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2102      	movs	r1, #2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fc45 	bl	8003284 <RCCEx_PLL2_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80029fe:	e003      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	75fb      	strb	r3, [r7, #23]
      break;
 8002a04:	e000      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a0e:	4b87      	ldr	r3, [pc, #540]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4984      	ldr	r1, [pc, #528]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a20:	e001      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8086 	beq.w	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a34:	4b7e      	ldr	r3, [pc, #504]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a7d      	ldr	r2, [pc, #500]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a40:	f7fe f874 	bl	8000b2c <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a46:	e009      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe f870 	bl	8000b2c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d902      	bls.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	75fb      	strb	r3, [r7, #23]
        break;
 8002a5a:	e005      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a5c:	4b74      	ldr	r3, [pc, #464]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0ef      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d166      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002a6e:	4b6f      	ldr	r3, [pc, #444]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a78:	4053      	eors	r3, r2
 8002a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d013      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a82:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a8c:	4b67      	ldr	r3, [pc, #412]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	4a66      	ldr	r2, [pc, #408]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a96:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a98:	4b64      	ldr	r3, [pc, #400]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	4a63      	ldr	r2, [pc, #396]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002aa4:	4a61      	ldr	r2, [pc, #388]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab4:	d115      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7fe f839 	bl	8000b2c <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002abc:	e00b      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abe:	f7fe f835 	bl	8000b2c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d902      	bls.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	75fb      	strb	r3, [r7, #23]
            break;
 8002ad4:	e005      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ad6:	4b55      	ldr	r3, [pc, #340]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0ed      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d126      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002af6:	d10d      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002af8:	4b4c      	ldr	r3, [pc, #304]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b06:	0919      	lsrs	r1, r3, #4
 8002b08:	4b4a      	ldr	r3, [pc, #296]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002b0a:	400b      	ands	r3, r1
 8002b0c:	4947      	ldr	r1, [pc, #284]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	610b      	str	r3, [r1, #16]
 8002b12:	e005      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002b14:	4b45      	ldr	r3, [pc, #276]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	4a44      	ldr	r2, [pc, #272]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b1e:	6113      	str	r3, [r2, #16]
 8002b20:	4b42      	ldr	r3, [pc, #264]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2e:	493f      	ldr	r1, [pc, #252]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	670b      	str	r3, [r1, #112]	; 0x70
 8002b34:	e004      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	75bb      	strb	r3, [r7, #22]
 8002b3a:	e001      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8085 	beq.w	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b52:	2b28      	cmp	r3, #40	; 0x28
 8002b54:	d866      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002b56:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5c:	08002c39 	.word	0x08002c39
 8002b60:	08002c25 	.word	0x08002c25
 8002b64:	08002c25 	.word	0x08002c25
 8002b68:	08002c25 	.word	0x08002c25
 8002b6c:	08002c25 	.word	0x08002c25
 8002b70:	08002c25 	.word	0x08002c25
 8002b74:	08002c25 	.word	0x08002c25
 8002b78:	08002c25 	.word	0x08002c25
 8002b7c:	08002c01 	.word	0x08002c01
 8002b80:	08002c25 	.word	0x08002c25
 8002b84:	08002c25 	.word	0x08002c25
 8002b88:	08002c25 	.word	0x08002c25
 8002b8c:	08002c25 	.word	0x08002c25
 8002b90:	08002c25 	.word	0x08002c25
 8002b94:	08002c25 	.word	0x08002c25
 8002b98:	08002c25 	.word	0x08002c25
 8002b9c:	08002c13 	.word	0x08002c13
 8002ba0:	08002c25 	.word	0x08002c25
 8002ba4:	08002c25 	.word	0x08002c25
 8002ba8:	08002c25 	.word	0x08002c25
 8002bac:	08002c25 	.word	0x08002c25
 8002bb0:	08002c25 	.word	0x08002c25
 8002bb4:	08002c25 	.word	0x08002c25
 8002bb8:	08002c25 	.word	0x08002c25
 8002bbc:	08002c39 	.word	0x08002c39
 8002bc0:	08002c25 	.word	0x08002c25
 8002bc4:	08002c25 	.word	0x08002c25
 8002bc8:	08002c25 	.word	0x08002c25
 8002bcc:	08002c25 	.word	0x08002c25
 8002bd0:	08002c25 	.word	0x08002c25
 8002bd4:	08002c25 	.word	0x08002c25
 8002bd8:	08002c25 	.word	0x08002c25
 8002bdc:	08002c39 	.word	0x08002c39
 8002be0:	08002c25 	.word	0x08002c25
 8002be4:	08002c25 	.word	0x08002c25
 8002be8:	08002c25 	.word	0x08002c25
 8002bec:	08002c25 	.word	0x08002c25
 8002bf0:	08002c25 	.word	0x08002c25
 8002bf4:	08002c25 	.word	0x08002c25
 8002bf8:	08002c25 	.word	0x08002c25
 8002bfc:	08002c39 	.word	0x08002c39
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	2101      	movs	r1, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fb3c 	bl	8003284 <RCCEx_PLL2_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c10:	e013      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3324      	adds	r3, #36	; 0x24
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fbe5 	bl	80033e8 <RCCEx_PLL3_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c22:	e00a      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]
      break;
 8002c28:	e007      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002c2a:	bf00      	nop
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	58024800 	.word	0x58024800
 8002c34:	00ffffcf 	.word	0x00ffffcf
      break;
 8002c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002c40:	4b96      	ldr	r3, [pc, #600]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c4c:	4993      	ldr	r1, [pc, #588]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	654b      	str	r3, [r1, #84]	; 0x54
 8002c52:	e001      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d038      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	d821      	bhi.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002c6c:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002cb7 	.word	0x08002cb7
 8002c78:	08002c8d 	.word	0x08002c8d
 8002c7c:	08002c9f 	.word	0x08002c9f
 8002c80:	08002cb7 	.word	0x08002cb7
 8002c84:	08002cb7 	.word	0x08002cb7
 8002c88:	08002cb7 	.word	0x08002cb7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 faf6 	bl	8003284 <RCCEx_PLL2_Config>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c9c:	e00c      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3324      	adds	r3, #36	; 0x24
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fb9f 	bl	80033e8 <RCCEx_PLL3_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002cae:	e003      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002cbe:	4b77      	ldr	r3, [pc, #476]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	f023 0207 	bic.w	r2, r3, #7
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cca:	4974      	ldr	r1, [pc, #464]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	654b      	str	r3, [r1, #84]	; 0x54
 8002cd0:	e001      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd2:	7dfb      	ldrb	r3, [r7, #23]
 8002cd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d03a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d821      	bhi.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002cec:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf2:	bf00      	nop
 8002cf4:	08002d37 	.word	0x08002d37
 8002cf8:	08002d0d 	.word	0x08002d0d
 8002cfc:	08002d1f 	.word	0x08002d1f
 8002d00:	08002d37 	.word	0x08002d37
 8002d04:	08002d37 	.word	0x08002d37
 8002d08:	08002d37 	.word	0x08002d37
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	2101      	movs	r1, #1
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fab6 	bl	8003284 <RCCEx_PLL2_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d1c:	e00c      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3324      	adds	r3, #36	; 0x24
 8002d22:	2101      	movs	r1, #1
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fb5f 	bl	80033e8 <RCCEx_PLL3_Config>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d2e:	e003      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	75fb      	strb	r3, [r7, #23]
      break;
 8002d34:	e000      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d3e:	4b57      	ldr	r3, [pc, #348]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	f023 0207 	bic.w	r2, r3, #7
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4c:	4953      	ldr	r1, [pc, #332]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	658b      	str	r3, [r1, #88]	; 0x58
 8002d52:	e001      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d04b      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6e:	d02e      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d74:	d828      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7a:	d02a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d822      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002d82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d86:	d026      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002d88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d8c:	d81c      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d92:	d010      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d98:	d816      	bhi.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01d      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002da2:	d111      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fa6a 	bl	8003284 <RCCEx_PLL2_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002db4:	e012      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3324      	adds	r3, #36	; 0x24
 8002dba:	2102      	movs	r1, #2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fb13 	bl	80033e8 <RCCEx_PLL3_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002dc6:	e009      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
      break;
 8002dcc:	e006      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e004      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002de2:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df0:	492a      	ldr	r1, [pc, #168]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	654b      	str	r3, [r1, #84]	; 0x54
 8002df6:	e001      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d04d      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e12:	d02e      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002e14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e18:	d828      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1e:	d02a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d822      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002e26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e2a:	d026      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e30:	d81c      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e36:	d010      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e3c:	d816      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d01d      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e46:	d111      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fa18 	bl	8003284 <RCCEx_PLL2_Config>
 8002e54:	4603      	mov	r3, r0
 8002e56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e58:	e012      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3324      	adds	r3, #36	; 0x24
 8002e5e:	2102      	movs	r1, #2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fac1 	bl	80033e8 <RCCEx_PLL3_Config>
 8002e66:	4603      	mov	r3, r0
 8002e68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e6a:	e009      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e70:	e006      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002e72:	bf00      	nop
 8002e74:	e004      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002e76:	bf00      	nop
 8002e78:	e002      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e000      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e94:	4901      	ldr	r1, [pc, #4]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	658b      	str	r3, [r1, #88]	; 0x58
 8002e9a:	e003      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d04b      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002eb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002eba:	d02e      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002ebc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ec0:	d828      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec6:	d02a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ecc:	d822      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002ece:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ed2:	d026      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002ed4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ed8:	d81c      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002eda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ede:	d010      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ee4:	d816      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01d      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eee:	d111      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f9c4 	bl	8003284 <RCCEx_PLL2_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f00:	e012      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3324      	adds	r3, #36	; 0x24
 8002f06:	2102      	movs	r1, #2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fa6d 	bl	80033e8 <RCCEx_PLL3_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f12:	e009      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	75fb      	strb	r3, [r7, #23]
      break;
 8002f18:	e006      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e004      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f2e:	4b9d      	ldr	r3, [pc, #628]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f3c:	4999      	ldr	r1, [pc, #612]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	658b      	str	r3, [r1, #88]	; 0x58
 8002f42:	e001      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5e:	d10a      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3324      	adds	r3, #36	; 0x24
 8002f64:	2102      	movs	r1, #2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fa3e 	bl	80033e8 <RCCEx_PLL3_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f76:	4b8b      	ldr	r3, [pc, #556]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f84:	4987      	ldr	r1, [pc, #540]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3324      	adds	r3, #36	; 0x24
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fa1d 	bl	80033e8 <RCCEx_PLL3_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fb8:	4b7a      	ldr	r3, [pc, #488]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc6:	4977      	ldr	r1, [pc, #476]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d034      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fe2:	d01d      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fe8:	d817      	bhi.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff2:	d009      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002ff4:	e011      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 f941 	bl	8003284 <RCCEx_PLL2_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003006:	e00c      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3324      	adds	r3, #36	; 0x24
 800300c:	2102      	movs	r1, #2
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f9ea 	bl	80033e8 <RCCEx_PLL3_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003018:	e003      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	75fb      	strb	r3, [r7, #23]
      break;
 800301e:	e000      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003028:	4b5e      	ldr	r3, [pc, #376]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003036:	495b      	ldr	r1, [pc, #364]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003038:	4313      	orrs	r3, r2
 800303a:	658b      	str	r3, [r1, #88]	; 0x58
 800303c:	e001      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d033      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003054:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003058:	d01c      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800305a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800305e:	d816      	bhi.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003064:	d003      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800306a:	d007      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800306c:	e00f      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800306e:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	4a4c      	ldr	r2, [pc, #304]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003078:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800307a:	e00c      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3324      	adds	r3, #36	; 0x24
 8003080:	2101      	movs	r1, #1
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f9b0 	bl	80033e8 <RCCEx_PLL3_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800308c:	e003      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
      break;
 8003092:	e000      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003096:	7dfb      	ldrb	r3, [r7, #23]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800309c:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030aa:	493e      	ldr	r1, [pc, #248]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	654b      	str	r3, [r1, #84]	; 0x54
 80030b0:	e001      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b2:	7dfb      	ldrb	r3, [r7, #23]
 80030b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d029      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80030ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ce:	d007      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80030d0:	e00f      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030d2:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	4a33      	ldr	r2, [pc, #204]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030de:	e00b      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	2102      	movs	r1, #2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f8cc 	bl	8003284 <RCCEx_PLL2_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030f0:	e002      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
      break;
 80030f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80030fe:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310a:	4926      	ldr	r1, [pc, #152]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800310c:	4313      	orrs	r3, r2
 800310e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003110:	e001      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3324      	adds	r3, #36	; 0x24
 8003126:	2102      	movs	r1, #2
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f95d 	bl	80033e8 <RCCEx_PLL3_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d033      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800314c:	d017      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800314e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003152:	d811      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003158:	d013      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800315a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315e:	d80b      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d010      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003168:	d106      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003174:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003176:	e007      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	75fb      	strb	r3, [r7, #23]
      break;
 800317c:	e004      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800317e:	bf00      	nop
 8003180:	e002      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003182:	bf00      	nop
 8003184:	e000      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003188:	7dfb      	ldrb	r3, [r7, #23]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800318e:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800319a:	4902      	ldr	r1, [pc, #8]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800319c:	4313      	orrs	r3, r2
 800319e:	654b      	str	r3, [r1, #84]	; 0x54
 80031a0:	e004      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80031a2:	bf00      	nop
 80031a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031b8:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	492e      	ldr	r1, [pc, #184]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80031d6:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031e4:	4926      	ldr	r1, [pc, #152]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003202:	491f      	ldr	r1, [pc, #124]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003204:	4313      	orrs	r3, r2
 8003206:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00d      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800321a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800321e:	6113      	str	r3, [r2, #16]
 8003220:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800322a:	4915      	ldr	r1, [pc, #84]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800322c:	4313      	orrs	r3, r2
 800322e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	da08      	bge.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800323a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003244:	490e      	ldr	r1, [pc, #56]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003246:	4313      	orrs	r3, r2
 8003248:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003264:	4906      	ldr	r1, [pc, #24]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003266:	4313      	orrs	r3, r2
 8003268:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800326a:	7dbb      	ldrb	r3, [r7, #22]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	58024400 	.word	0x58024400

08003284 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003292:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b03      	cmp	r3, #3
 800329c:	d101      	bne.n	80032a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e099      	b.n	80033d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80032a2:	4b4f      	ldr	r3, [pc, #316]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4e      	ldr	r2, [pc, #312]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 80032a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ae:	f7fd fc3d 	bl	8000b2c <HAL_GetTick>
 80032b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032b4:	e008      	b.n	80032c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80032b6:	f7fd fc39 	bl	8000b2c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e086      	b.n	80033d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032c8:	4b45      	ldr	r3, [pc, #276]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80032d4:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	031b      	lsls	r3, r3, #12
 80032e2:	493f      	ldr	r1, [pc, #252]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	628b      	str	r3, [r1, #40]	; 0x28
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	025b      	lsls	r3, r3, #9
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	3b01      	subs	r3, #1
 8003304:	041b      	lsls	r3, r3, #16
 8003306:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	3b01      	subs	r3, #1
 8003312:	061b      	lsls	r3, r3, #24
 8003314:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003318:	4931      	ldr	r1, [pc, #196]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 800331a:	4313      	orrs	r3, r2
 800331c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800331e:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	492d      	ldr	r1, [pc, #180]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 800332c:	4313      	orrs	r3, r2
 800332e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003330:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	f023 0220 	bic.w	r2, r3, #32
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	4928      	ldr	r1, [pc, #160]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 800333e:	4313      	orrs	r3, r2
 8003340:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003342:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	4a26      	ldr	r2, [pc, #152]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 8003348:	f023 0310 	bic.w	r3, r3, #16
 800334c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800334e:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 8003350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <RCCEx_PLL2_Config+0x160>)
 8003354:	4013      	ands	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	69d2      	ldr	r2, [r2, #28]
 800335a:	00d2      	lsls	r2, r2, #3
 800335c:	4920      	ldr	r1, [pc, #128]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 800335e:	4313      	orrs	r3, r2
 8003360:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003362:	4b1f      	ldr	r3, [pc, #124]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 8003368:	f043 0310 	orr.w	r3, r3, #16
 800336c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d106      	bne.n	8003382 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 800337a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800337e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003380:	e00f      	b.n	80033a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d106      	bne.n	8003396 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	4a14      	ldr	r2, [pc, #80]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 800338e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003392:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003394:	e005      	b.n	80033a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	4a11      	ldr	r2, [pc, #68]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 800339c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80033a2:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 80033a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ae:	f7fd fbbd 	bl	8000b2c <HAL_GetTick>
 80033b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80033b4:	e008      	b.n	80033c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80033b6:	f7fd fbb9 	bl	8000b2c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e006      	b.n	80033d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <RCCEx_PLL2_Config+0x15c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	58024400 	.word	0x58024400
 80033e4:	ffff0007 	.word	0xffff0007

080033e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80033f6:	4b53      	ldr	r3, [pc, #332]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d101      	bne.n	8003406 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e099      	b.n	800353a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003406:	4b4f      	ldr	r3, [pc, #316]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a4e      	ldr	r2, [pc, #312]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 800340c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003412:	f7fd fb8b 	bl	8000b2c <HAL_GetTick>
 8003416:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003418:	e008      	b.n	800342c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800341a:	f7fd fb87 	bl	8000b2c <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e086      	b.n	800353a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800342c:	4b45      	ldr	r3, [pc, #276]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f0      	bne.n	800341a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003438:	4b42      	ldr	r3, [pc, #264]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	051b      	lsls	r3, r3, #20
 8003446:	493f      	ldr	r1, [pc, #252]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 8003448:	4313      	orrs	r3, r2
 800344a:	628b      	str	r3, [r1, #40]	; 0x28
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	3b01      	subs	r3, #1
 8003452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	3b01      	subs	r3, #1
 800345c:	025b      	lsls	r3, r3, #9
 800345e:	b29b      	uxth	r3, r3
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	3b01      	subs	r3, #1
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	3b01      	subs	r3, #1
 8003476:	061b      	lsls	r3, r3, #24
 8003478:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800347c:	4931      	ldr	r1, [pc, #196]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 800347e:	4313      	orrs	r3, r2
 8003480:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003482:	4b30      	ldr	r3, [pc, #192]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	492d      	ldr	r1, [pc, #180]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 8003490:	4313      	orrs	r3, r2
 8003492:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	4928      	ldr	r1, [pc, #160]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80034a6:	4b27      	ldr	r3, [pc, #156]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	4a26      	ldr	r2, [pc, #152]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80034ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80034b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <RCCEx_PLL3_Config+0x160>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	69d2      	ldr	r2, [r2, #28]
 80034be:	00d2      	lsls	r2, r2, #3
 80034c0:	4920      	ldr	r1, [pc, #128]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80034c6:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	4a1e      	ldr	r2, [pc, #120]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d106      	bne.n	80034e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	4a19      	ldr	r2, [pc, #100]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80034de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034e4:	e00f      	b.n	8003506 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d106      	bne.n	80034fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80034ec:	4b15      	ldr	r3, [pc, #84]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	4a14      	ldr	r2, [pc, #80]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80034f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034f8:	e005      	b.n	8003506 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	4a11      	ldr	r2, [pc, #68]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 8003500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003504:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003512:	f7fd fb0b 	bl	8000b2c <HAL_GetTick>
 8003516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003518:	e008      	b.n	800352c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800351a:	f7fd fb07 	bl	8000b2c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e006      	b.n	800353a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <RCCEx_PLL3_Config+0x15c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	58024400 	.word	0x58024400
 8003548:	ffff0007 	.word	0xffff0007

0800354c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800354c:	b084      	sub	sp, #16
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	f107 001c 	add.w	r0, r7, #28
 800355a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	2b01      	cmp	r3, #1
 8003562:	d120      	bne.n	80035a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	4b2a      	ldr	r3, [pc, #168]	; (8003620 <USB_CoreInit+0xd4>)
 8003576:	4013      	ands	r3, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d105      	bne.n	800359a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 faac 	bl	8003af8 <USB_CoreReset>
 80035a0:	4603      	mov	r3, r0
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	e01a      	b.n	80035dc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 faa0 	bl	8003af8 <USB_CoreReset>
 80035b8:	4603      	mov	r3, r0
 80035ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	639a      	str	r2, [r3, #56]	; 0x38
 80035ce:	e005      	b.n	80035dc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d116      	bne.n	8003610 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <USB_CoreInit+0xd8>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f043 0206 	orr.w	r2, r3, #6
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800361c:	b004      	add	sp, #16
 800361e:	4770      	bx	lr
 8003620:	ffbdffbf 	.word	0xffbdffbf
 8003624:	03ee0000 	.word	0x03ee0000

08003628 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 0201 	bic.w	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	460b      	mov	r3, r1
 8003654:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d115      	bne.n	8003698 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003678:	2001      	movs	r0, #1
 800367a:	f7fd fa63 	bl	8000b44 <HAL_Delay>
      ms++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3301      	adds	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fa29 	bl	8003adc <USB_GetMode>
 800368a:	4603      	mov	r3, r0
 800368c:	2b01      	cmp	r3, #1
 800368e:	d01e      	beq.n	80036ce <USB_SetCurrentMode+0x84>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b31      	cmp	r3, #49	; 0x31
 8003694:	d9f0      	bls.n	8003678 <USB_SetCurrentMode+0x2e>
 8003696:	e01a      	b.n	80036ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d115      	bne.n	80036ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036aa:	2001      	movs	r0, #1
 80036ac:	f7fd fa4a 	bl	8000b44 <HAL_Delay>
      ms++;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3301      	adds	r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fa10 	bl	8003adc <USB_GetMode>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <USB_SetCurrentMode+0x84>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b31      	cmp	r3, #49	; 0x31
 80036c6:	d9f0      	bls.n	80036aa <USB_SetCurrentMode+0x60>
 80036c8:	e001      	b.n	80036ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e005      	b.n	80036da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b32      	cmp	r3, #50	; 0x32
 80036d2:	d101      	bne.n	80036d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036e4:	b084      	sub	sp, #16
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	e009      	b.n	8003718 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	3340      	adds	r3, #64	; 0x40
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	2200      	movs	r2, #0
 8003710:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	3301      	adds	r3, #1
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b0e      	cmp	r3, #14
 800371c:	d9f2      	bls.n	8003704 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800371e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11c      	bne.n	800375e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003732:	f043 0302 	orr.w	r3, r3, #2
 8003736:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	e005      	b.n	800376a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003770:	461a      	mov	r2, r3
 8003772:	2300      	movs	r3, #0
 8003774:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377c:	4619      	mov	r1, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003784:	461a      	mov	r2, r3
 8003786:	680b      	ldr	r3, [r1, #0]
 8003788:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800378a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10c      	bne.n	80037aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003796:	2100      	movs	r1, #0
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f965 	bl	8003a68 <USB_SetDevSpeed>
 800379e:	e008      	b.n	80037b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80037a0:	2101      	movs	r1, #1
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f960 	bl	8003a68 <USB_SetDevSpeed>
 80037a8:	e003      	b.n	80037b2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037aa:	2103      	movs	r1, #3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f95b 	bl	8003a68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037b2:	2110      	movs	r1, #16
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f8f3 	bl	80039a0 <USB_FlushTxFifo>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f91f 	bl	8003a08 <USB_FlushRxFifo>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037da:	461a      	mov	r2, r3
 80037dc:	2300      	movs	r3, #0
 80037de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e6:	461a      	mov	r2, r3
 80037e8:	2300      	movs	r3, #0
 80037ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f2:	461a      	mov	r2, r3
 80037f4:	2300      	movs	r3, #0
 80037f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	e043      	b.n	8003886 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003814:	d118      	bne.n	8003848 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003828:	461a      	mov	r2, r3
 800382a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	e013      	b.n	800385a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	461a      	mov	r2, r3
 8003840:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e008      	b.n	800385a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003854:	461a      	mov	r2, r3
 8003856:	2300      	movs	r3, #0
 8003858:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003866:	461a      	mov	r2, r3
 8003868:	2300      	movs	r3, #0
 800386a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003878:	461a      	mov	r2, r3
 800387a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800387e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	3301      	adds	r3, #1
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3b7      	bcc.n	80037fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	e043      	b.n	800391c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038aa:	d118      	bne.n	80038de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038be:	461a      	mov	r2, r3
 80038c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e013      	b.n	80038f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d4:	461a      	mov	r2, r3
 80038d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e008      	b.n	80038f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ea:	461a      	mov	r2, r3
 80038ec:	2300      	movs	r3, #0
 80038ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fc:	461a      	mov	r2, r3
 80038fe:	2300      	movs	r3, #0
 8003900:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390e:	461a      	mov	r2, r3
 8003910:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003914:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	3301      	adds	r3, #1
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	429a      	cmp	r2, r3
 8003922:	d3b7      	bcc.n	8003894 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003936:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003944:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	2b00      	cmp	r3, #0
 800394a:	d105      	bne.n	8003958 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f043 0210 	orr.w	r2, r3, #16
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699a      	ldr	r2, [r3, #24]
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <USB_DevInit+0x2b4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f043 0208 	orr.w	r2, r3, #8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d105      	bne.n	8003988 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <USB_DevInit+0x2b8>)
 8003982:	4313      	orrs	r3, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003988:	7dfb      	ldrb	r3, [r7, #23]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003994:	b004      	add	sp, #16
 8003996:	4770      	bx	lr
 8003998:	803c3800 	.word	0x803c3800
 800399c:	40000004 	.word	0x40000004

080039a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3301      	adds	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <USB_FlushTxFifo+0x64>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e01b      	b.n	80039f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	daf2      	bge.n	80039ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	019b      	lsls	r3, r3, #6
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3301      	adds	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <USB_FlushTxFifo+0x64>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e006      	b.n	80039f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d0f0      	beq.n	80039d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	00030d40 	.word	0x00030d40

08003a08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3301      	adds	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a11      	ldr	r2, [pc, #68]	; (8003a64 <USB_FlushRxFifo+0x5c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e018      	b.n	8003a58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	daf2      	bge.n	8003a14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2210      	movs	r2, #16
 8003a36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <USB_FlushRxFifo+0x5c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e006      	b.n	8003a58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d0f0      	beq.n	8003a38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	00030d40 	.word	0x00030d40

08003a68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	68f9      	ldr	r1, [r7, #12]
 8003a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003ab4:	f023 0303 	bic.w	r3, r3, #3
 8003ab8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ac8:	f043 0302 	orr.w	r3, r3, #2
 8003acc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3301      	adds	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <USB_CoreReset+0x64>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e01b      	b.n	8003b4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	daf2      	bge.n	8003b04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3301      	adds	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <USB_CoreReset+0x64>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e006      	b.n	8003b4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d0f0      	beq.n	8003b2e <USB_CoreReset+0x36>

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	00030d40 	.word	0x00030d40

08003b60 <__libc_init_array>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4d0d      	ldr	r5, [pc, #52]	; (8003b98 <__libc_init_array+0x38>)
 8003b64:	4c0d      	ldr	r4, [pc, #52]	; (8003b9c <__libc_init_array+0x3c>)
 8003b66:	1b64      	subs	r4, r4, r5
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	42a6      	cmp	r6, r4
 8003b6e:	d109      	bne.n	8003b84 <__libc_init_array+0x24>
 8003b70:	4d0b      	ldr	r5, [pc, #44]	; (8003ba0 <__libc_init_array+0x40>)
 8003b72:	4c0c      	ldr	r4, [pc, #48]	; (8003ba4 <__libc_init_array+0x44>)
 8003b74:	f000 f820 	bl	8003bb8 <_init>
 8003b78:	1b64      	subs	r4, r4, r5
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	2600      	movs	r6, #0
 8003b7e:	42a6      	cmp	r6, r4
 8003b80:	d105      	bne.n	8003b8e <__libc_init_array+0x2e>
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b88:	4798      	blx	r3
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7ee      	b.n	8003b6c <__libc_init_array+0xc>
 8003b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b92:	4798      	blx	r3
 8003b94:	3601      	adds	r6, #1
 8003b96:	e7f2      	b.n	8003b7e <__libc_init_array+0x1e>
 8003b98:	08003be0 	.word	0x08003be0
 8003b9c:	08003be0 	.word	0x08003be0
 8003ba0:	08003be0 	.word	0x08003be0
 8003ba4:	08003be4 	.word	0x08003be4

08003ba8 <memset>:
 8003ba8:	4402      	add	r2, r0
 8003baa:	4603      	mov	r3, r0
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d100      	bne.n	8003bb2 <memset+0xa>
 8003bb0:	4770      	bx	lr
 8003bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb6:	e7f9      	b.n	8003bac <memset+0x4>

08003bb8 <_init>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	bf00      	nop
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr

08003bc4 <_fini>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr
