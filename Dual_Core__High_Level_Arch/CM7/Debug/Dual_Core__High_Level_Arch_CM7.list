
Dual_Core__High_Level_Arch_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003e44  08003e44  00013e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e54  08003e54  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003e54  08003e54  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e54  08003e54  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  24000000  08003e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  24000018  08003e74  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400054c  08003e74  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb34  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002369  00000000  00000000  0002eb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00030ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  00031ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003956f  00000000  00000000  000325c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8c6  00000000  00000000  0006bb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017569e  00000000  00000000  0007b3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f0a93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f88  00000000  00000000  001f0ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003e2c 	.word	0x08003e2c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	08003e2c 	.word	0x08003e2c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <MX_GPIO_Init+0x6c>)
 800040c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_GPIO_Init+0x6c>)
 800041c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000420:	f003 0304 	and.w	r3, r3, #4
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_GPIO_Init+0x6c>)
 800042a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800042e:	4a10      	ldr	r2, [pc, #64]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <MX_GPIO_Init+0x6c>)
 800043a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800043e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044c:	4a08      	ldr	r2, [pc, #32]	; (8000470 <MX_GPIO_Init+0x6c>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]

}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	58024400 	.word	0x58024400

08000474 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800047a:	4b9c      	ldr	r3, [pc, #624]	; (80006ec <main+0x278>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000482:	2b00      	cmp	r3, #0
 8000484:	d11b      	bne.n	80004be <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000486:	f3bf 8f4f 	dsb	sy
}
 800048a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800048c:	f3bf 8f6f 	isb	sy
}
 8000490:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000492:	4b96      	ldr	r3, [pc, #600]	; (80006ec <main+0x278>)
 8000494:	2200      	movs	r2, #0
 8000496:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800049a:	f3bf 8f4f 	dsb	sy
}
 800049e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a0:	f3bf 8f6f 	isb	sy
}
 80004a4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004a6:	4b91      	ldr	r3, [pc, #580]	; (80006ec <main+0x278>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a90      	ldr	r2, [pc, #576]	; (80006ec <main+0x278>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004b2:	f3bf 8f4f 	dsb	sy
}
 80004b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004b8:	f3bf 8f6f 	isb	sy
}
 80004bc:	e000      	b.n	80004c0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004be:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004c0:	4b8a      	ldr	r3, [pc, #552]	; (80006ec <main+0x278>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d138      	bne.n	800053e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004cc:	4b87      	ldr	r3, [pc, #540]	; (80006ec <main+0x278>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004d4:	f3bf 8f4f 	dsb	sy
}
 80004d8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004da:	4b84      	ldr	r3, [pc, #528]	; (80006ec <main+0x278>)
 80004dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004e0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	0b5b      	lsrs	r3, r3, #13
 80004e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004ea:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	08db      	lsrs	r3, r3, #3
 80004f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004f4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	015a      	lsls	r2, r3, #5
 80004fa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80004fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000504:	4979      	ldr	r1, [pc, #484]	; (80006ec <main+0x278>)
 8000506:	4313      	orrs	r3, r2
 8000508:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1ef      	bne.n	80004f6 <main+0x82>
    } while(sets-- != 0U);
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	60fa      	str	r2, [r7, #12]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1e5      	bne.n	80004ec <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000520:	f3bf 8f4f 	dsb	sy
}
 8000524:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000526:	4b71      	ldr	r3, [pc, #452]	; (80006ec <main+0x278>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a70      	ldr	r2, [pc, #448]	; (80006ec <main+0x278>)
 800052c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000530:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000532:	f3bf 8f4f 	dsb	sy
}
 8000536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000538:	f3bf 8f6f 	isb	sy
}
 800053c:	e000      	b.n	8000540 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800053e:	bf00      	nop
	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000544:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000546:	bf00      	nop
 8000548:	4b69      	ldr	r3, [pc, #420]	; (80006f0 <main+0x27c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <main+0xea>
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	617a      	str	r2, [r7, #20]
 800055a:	2b00      	cmp	r3, #0
 800055c:	dcf4      	bgt.n	8000548 <main+0xd4>
		;
	if (timeout < 0)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	2b00      	cmp	r3, #0
 8000562:	da01      	bge.n	8000568 <main+0xf4>
	{
		Error_Handler();
 8000564:	f000 f952 	bl	800080c <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000568:	f000 fb94 	bl	8000c94 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800056c:	f000 f8c8 	bl	8000700 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000570:	4b5f      	ldr	r3, [pc, #380]	; (80006f0 <main+0x27c>)
 8000572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000576:	4a5e      	ldr	r2, [pc, #376]	; (80006f0 <main+0x27c>)
 8000578:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800057c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000580:	4b5b      	ldr	r3, [pc, #364]	; (80006f0 <main+0x27c>)
 8000582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 ff02 	bl	8001398 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f000 ff18 	bl	80013cc <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800059c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a0:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80005a2:	bf00      	nop
 80005a4:	4b52      	ldr	r3, [pc, #328]	; (80006f0 <main+0x27c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d104      	bne.n	80005ba <main+0x146>
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	1e5a      	subs	r2, r3, #1
 80005b4:	617a      	str	r2, [r7, #20]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	dcf4      	bgt.n	80005a4 <main+0x130>
		;
	if (timeout < 0)
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	da01      	bge.n	80005c4 <main+0x150>
	{
		Error_Handler();
 80005c0:	f000 f924 	bl	800080c <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c4:	f7ff ff1e 	bl	8000404 <MX_GPIO_Init>
	MX_USB_OTG_FS_PCD_Init();
 80005c8:	f000 f976 	bl	80008b8 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */
	initTaskGenerator();
 80005cc:	f000 fa20 	bl	8000a10 <initTaskGenerator>
	{
		/* USER CODE END WHILE */

		// think of a way for the current_state to not be checked
		// after the callback for the HSEM has been executed
		if (been_HSEM == 0)
 80005d0:	4b48      	ldr	r3, [pc, #288]	; (80006f4 <main+0x280>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f083 0301 	eor.w	r3, r3, #1
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d004      	beq.n	80005e8 <main+0x174>
			current_state_CM7 = check_state();
 80005de:	f000 fb23 	bl	8000c28 <check_state>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a44      	ldr	r2, [pc, #272]	; (80006f8 <main+0x284>)
 80005e6:	6013      	str	r3, [r2, #0]

		if (current_state_CM7 != previous_state_CM7)
 80005e8:	4b43      	ldr	r3, [pc, #268]	; (80006f8 <main+0x284>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b43      	ldr	r3, [pc, #268]	; (80006fc <main+0x288>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d077      	beq.n	80006e4 <main+0x270>
		{
			switch (current_state_CM7)
 80005f4:	4b40      	ldr	r3, [pc, #256]	; (80006f8 <main+0x284>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b07      	cmp	r3, #7
 80005fa:	d875      	bhi.n	80006e8 <main+0x274>
 80005fc:	a201      	add	r2, pc, #4	; (adr r2, 8000604 <main+0x190>)
 80005fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000602:	bf00      	nop
 8000604:	08000625 	.word	0x08000625
 8000608:	08000651 	.word	0x08000651
 800060c:	08000663 	.word	0x08000663
 8000610:	0800067d 	.word	0x0800067d
 8000614:	08000697 	.word	0x08000697
 8000618:	080006b1 	.word	0x080006b1
 800061c:	080006cb 	.word	0x080006cb
 8000620:	0800063f 	.word	0x0800063f
			{
			case STATE_INIT:
				gameplay_loop_CM7(current_state_CM7);
 8000624:	4b34      	ldr	r3, [pc, #208]	; (80006f8 <main+0x284>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fa3d 	bl	8000aa8 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 800062e:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <main+0x284>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a32      	ldr	r2, [pc, #200]	; (80006fc <main+0x288>)
 8000634:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 8000636:	4b2f      	ldr	r3, [pc, #188]	; (80006f4 <main+0x280>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
				break;
 800063c:	e055      	b.n	80006ea <main+0x276>

			case STATE_START_GAME:
				gameplay_loop_CM7(current_state_CM7);
 800063e:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <main+0x284>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fa30 	bl	8000aa8 <gameplay_loop_CM7>
				been_HSEM = 0; // not sure about placement
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <main+0x280>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
				break;
 800064e:	e04c      	b.n	80006ea <main+0x276>

			case STATE_IDLE:
				gameplay_loop_CM7(current_state_CM7);
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <main+0x284>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fa27 	bl	8000aa8 <gameplay_loop_CM7>
				been_HSEM = 0; // not sure about placement
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <main+0x280>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
				break;
 8000660:	e043      	b.n	80006ea <main+0x276>

			case STATE_ROBOT_TURN:
				gameplay_loop_CM7(current_state_CM7);
 8000662:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <main+0x284>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fa1e 	bl	8000aa8 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <main+0x284>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a22      	ldr	r2, [pc, #136]	; (80006fc <main+0x288>)
 8000672:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <main+0x280>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
				break;
 800067a:	e036      	b.n	80006ea <main+0x276>

			case STATE_USER_TURN:
				gameplay_loop_CM7(current_state_CM7);
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <main+0x284>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fa11 	bl	8000aa8 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <main+0x284>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <main+0x288>)
 800068c:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <main+0x280>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
				break;
 8000694:	e029      	b.n	80006ea <main+0x276>

			case STATE_CLEAN_UP:
				gameplay_loop_CM7(current_state_CM7);
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <main+0x284>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fa04 	bl	8000aa8 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <main+0x284>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a15      	ldr	r2, [pc, #84]	; (80006fc <main+0x288>)
 80006a6:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <main+0x280>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
				break;
 80006ae:	e01c      	b.n	80006ea <main+0x276>

			case STATE_CHEAT_DETECTED:
				gameplay_loop_CM7(current_state_CM7);
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <main+0x284>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f9f7 	bl	8000aa8 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <main+0x284>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <main+0x288>)
 80006c0:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <main+0x280>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
				break;
 80006c8:	e00f      	b.n	80006ea <main+0x276>

			case STATE_GAME_END:
				gameplay_loop_CM7(current_state_CM7);
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <main+0x284>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 f9ea 	bl	8000aa8 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <main+0x284>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a08      	ldr	r2, [pc, #32]	; (80006fc <main+0x288>)
 80006da:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <main+0x280>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
				break;
 80006e2:	e002      	b.n	80006ea <main+0x276>

			default:
				break;
			}
		}
 80006e4:	bf00      	nop
 80006e6:	e773      	b.n	80005d0 <main+0x15c>
				break;
 80006e8:	bf00      	nop
		if (been_HSEM == 0)
 80006ea:	e771      	b.n	80005d0 <main+0x15c>
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	58024400 	.word	0x58024400
 80006f4:	24000544 	.word	0x24000544
 80006f8:	24000540 	.word	0x24000540
 80006fc:	24000008 	.word	0x24000008

08000700 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09c      	sub	sp, #112	; 0x70
 8000704:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070a:	224c      	movs	r2, #76	; 0x4c
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fb84 	bl	8003e1c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2220      	movs	r2, #32
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fb7e 	bl	8003e1c <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000720:	2004      	movs	r0, #4
 8000722:	f000 ffdb 	bl	80016dc <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b35      	ldr	r3, [pc, #212]	; (8000800 <SystemClock_Config+0x100>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4a34      	ldr	r2, [pc, #208]	; (8000800 <SystemClock_Config+0x100>)
 8000730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000734:	6193      	str	r3, [r2, #24]
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <SystemClock_Config+0x100>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b30      	ldr	r3, [pc, #192]	; (8000804 <SystemClock_Config+0x104>)
 8000742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000744:	4a2f      	ldr	r2, [pc, #188]	; (8000804 <SystemClock_Config+0x104>)
 8000746:	f043 0301 	orr.w	r3, r3, #1
 800074a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800074c:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <SystemClock_Config+0x104>)
 800074e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000758:	bf00      	nop
 800075a:	4b29      	ldr	r3, [pc, #164]	; (8000800 <SystemClock_Config+0x100>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000766:	d1f8      	bne.n	800075a <SystemClock_Config+0x5a>
	{
	}

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <SystemClock_Config+0x108>)
 800076a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800076c:	f023 0303 	bic.w	r3, r3, #3
 8000770:	4a25      	ldr	r2, [pc, #148]	; (8000808 <SystemClock_Config+0x108>)
 8000772:	f043 0302 	orr.w	r3, r3, #2
 8000776:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8000778:	2321      	movs	r3, #33	; 0x21
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000782:	2301      	movs	r3, #1
 8000784:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	2302      	movs	r3, #2
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 120;
 8000792:	2378      	movs	r3, #120	; 0x78
 8000794:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800079a:	2304      	movs	r3, #4
 800079c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007a2:	230c      	movs	r3, #12
 80007a4:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fffc 	bl	80017b0 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80007be:	f000 f825 	bl	800080c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007c2:	233f      	movs	r3, #63	; 0x3f
 80007c4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2303      	movs	r3, #3
 80007c8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ce:	2308      	movs	r3, #8
 80007d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007d2:	2340      	movs	r3, #64	; 0x40
 80007d4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007d6:	2340      	movs	r3, #64	; 0x40
 80007d8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007de:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007e0:	2340      	movs	r3, #64	; 0x40
 80007e2:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2104      	movs	r1, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fc0f 	bl	800200c <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xf8>
	{
		Error_Handler();
 80007f4:	f000 f80a 	bl	800080c <Error_Handler>
	}
}
 80007f8:	bf00      	nop
 80007fa:	3770      	adds	r7, #112	; 0x70
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	58024800 	.word	0x58024800
 8000804:	58000400 	.word	0x58000400
 8000808:	58024400 	.word	0x58024400

0800080c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <HAL_MspInit+0x3c>)
 8000820:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000824:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <HAL_MspInit+0x3c>)
 8000826:	f043 0302 	orr.w	r3, r3, #2
 800082a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_MspInit+0x3c>)
 8000830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	207d      	movs	r0, #125	; 0x7d
 8000842:	f000 fbc4 	bl	8000fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000846:	207d      	movs	r0, #125	; 0x7d
 8000848:	f000 fbdb 	bl	8001002 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	58024400 	.word	0x58024400

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 fa68 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80008b0:	f000 fdb2 	bl	8001418 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c4:	2209      	movs	r2, #9
 80008c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ca:	2202      	movs	r2, #2
 80008cc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000900:	f000 fda4 	bl	800144c <HAL_PCD_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800090a:	f7ff ff7f 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	24000034 	.word	0x24000034
 8000918:	40080000 	.word	0x40080000

0800091c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b0b8      	sub	sp, #224	; 0xe0
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	22bc      	movs	r2, #188	; 0xbc
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f003 fa6d 	bl	8003e1c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <HAL_PCD_MspInit+0xe8>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d156      	bne.n	80009fa <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800094c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000950:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000952:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	4618      	mov	r0, r3
 8000960:	f001 fe84 	bl	800266c <HAL_RCCEx_PeriphCLKConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800096a:	f7ff ff4f 	bl	800080c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800096e:	f000 ff0f 	bl	8001790 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <HAL_PCD_MspInit+0xec>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <HAL_PCD_MspInit+0xec>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <HAL_PCD_MspInit+0xec>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000990:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000994:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80009aa:	230a      	movs	r3, #10
 80009ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009b4:	4619      	mov	r1, r3
 80009b6:	4815      	ldr	r0, [pc, #84]	; (8000a0c <HAL_PCD_MspInit+0xf0>)
 80009b8:	f000 fb3e 	bl	8001038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009d4:	4619      	mov	r1, r3
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <HAL_PCD_MspInit+0xf0>)
 80009d8:	f000 fb2e 	bl	8001038 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <HAL_PCD_MspInit+0xec>)
 80009de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009e2:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <HAL_PCD_MspInit+0xec>)
 80009e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_PCD_MspInit+0xec>)
 80009ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80009fa:	bf00      	nop
 80009fc:	37e0      	adds	r7, #224	; 0xe0
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40080000 	.word	0x40080000
 8000a08:	58024400 	.word	0x58024400
 8000a0c:	58020000 	.word	0x58020000

08000a10 <initTaskGenerator>:
void initTaskGenerator()
/* initTaskGenerator: Initializes the states and variables.
 *
 * Activates HSEM notifications to look out for from CM4. Initializes the shared buffer.
 */
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

	HAL_HSEM_ActivateNotification(HSEM_CM4_DONE_MASK);
 8000a14:	2002      	movs	r0, #2
 8000a16:	f000 fced 	bl	80013f4 <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_CHEAT_MASK);
 8000a1a:	2080      	movs	r0, #128	; 0x80
 8000a1c:	f000 fcea 	bl	80013f4 <HAL_HSEM_ActivateNotification>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_HSEM_FreeCallback>:
 * This function takes care of HSEM's released from Cortex-M4.
 *
 * This progresses the FSM of Cortex-M7,
 * whenever a HSEM is released from CM4
 */
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	been_HSEM = 1;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <HAL_HSEM_FreeCallback+0x7c>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]

	switch (SemMask)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d006      	beq.n	8000a46 <HAL_HSEM_FreeCallback+0x22>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b80      	cmp	r3, #128	; 0x80
 8000a3c:	d12b      	bne.n	8000a96 <HAL_HSEM_FreeCallback+0x72>
	{
	case HSEM_CHEAT_MASK: // takes care of Cheater Semaphore

		HAL_HSEM_ActivateNotification(HSEM_CM4_DONE_MASK); // reactivate notification
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f000 fcd8 	bl	80013f4 <HAL_HSEM_ActivateNotification>
		break;
 8000a44:	e028      	b.n	8000a98 <HAL_HSEM_FreeCallback+0x74>

	case HSEM_CM4_DONE_MASK: // takes care of all cases when CM4 is done
		switch (current_state_CM7)
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_HSEM_FreeCallback+0x80>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b03      	cmp	r3, #3
 8000a4c:	d014      	beq.n	8000a78 <HAL_HSEM_FreeCallback+0x54>
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	dc19      	bgt.n	8000a86 <HAL_HSEM_FreeCallback+0x62>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <HAL_HSEM_FreeCallback+0x38>
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d007      	beq.n	8000a6a <HAL_HSEM_FreeCallback+0x46>
 8000a5a:	e014      	b.n	8000a86 <HAL_HSEM_FreeCallback+0x62>
		{
		case STATE_INIT: // entered whenever CM4 is done initialising
			current_state_CM7 = STATE_START_GAME;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_HSEM_FreeCallback+0x80>)
 8000a5e:	2207      	movs	r2, #7
 8000a60:	601a      	str	r2, [r3, #0]
			HAL_HSEM_ActivateNotification(HSEM_CM4_DONE_MASK); // reactivate notification
 8000a62:	2002      	movs	r0, #2
 8000a64:	f000 fcc6 	bl	80013f4 <HAL_HSEM_ActivateNotification>
			break;
 8000a68:	e011      	b.n	8000a8e <HAL_HSEM_FreeCallback+0x6a>

		case STATE_ROBOT_TURN: // entered whenever CM4 is done with robot move
			current_state_CM7 = STATE_IDLE;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_HSEM_FreeCallback+0x80>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
			HAL_HSEM_ActivateNotification(HSEM_CM4_DONE_MASK); // reactivate notification
 8000a70:	2002      	movs	r0, #2
 8000a72:	f000 fcbf 	bl	80013f4 <HAL_HSEM_ActivateNotification>
			break;
 8000a76:	e00a      	b.n	8000a8e <HAL_HSEM_FreeCallback+0x6a>

		case STATE_USER_TURN: // entered whenever CM4 is done with user move
			current_state_CM7 = STATE_IDLE;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_HSEM_FreeCallback+0x80>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
			HAL_HSEM_ActivateNotification(HSEM_CM4_DONE_MASK); // reactivate notification
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f000 fcb8 	bl	80013f4 <HAL_HSEM_ActivateNotification>
			break;
 8000a84:	e003      	b.n	8000a8e <HAL_HSEM_FreeCallback+0x6a>

		default:
			HAL_HSEM_ActivateNotification(HSEM_CM4_DONE_MASK); // reactivate notification
 8000a86:	2002      	movs	r0, #2
 8000a88:	f000 fcb4 	bl	80013f4 <HAL_HSEM_ActivateNotification>
			break;
 8000a8c:	bf00      	nop
		}
		HAL_HSEM_ActivateNotification(HSEM_CM4_DONE_MASK); // reactivate notification
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f000 fcb0 	bl	80013f4 <HAL_HSEM_ActivateNotification>
		break;
 8000a94:	e000      	b.n	8000a98 <HAL_HSEM_FreeCallback+0x74>

	default:
		break;
 8000a96:	bf00      	nop
	}
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	24000544 	.word	0x24000544
 8000aa4:	24000540 	.word	0x24000540

08000aa8 <gameplay_loop_CM7>:

void gameplay_loop_CM7(int state)
// gameplay_loop_CM7: The main logic of Cortex-M4
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	switch (state)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b07      	cmp	r3, #7
 8000ab4:	d82a      	bhi.n	8000b0c <gameplay_loop_CM7+0x64>
 8000ab6:	a201      	add	r2, pc, #4	; (adr r2, 8000abc <gameplay_loop_CM7+0x14>)
 8000ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abc:	08000add 	.word	0x08000add
 8000ac0:	08000ae3 	.word	0x08000ae3
 8000ac4:	08000ae9 	.word	0x08000ae9
 8000ac8:	08000aef 	.word	0x08000aef
 8000acc:	08000af5 	.word	0x08000af5
 8000ad0:	08000afb 	.word	0x08000afb
 8000ad4:	08000b01 	.word	0x08000b01
 8000ad8:	08000b07 	.word	0x08000b07
	{
	case STATE_INIT:
		exec_state_init();
 8000adc:	f000 f81c 	bl	8000b18 <exec_state_init>
		break;
 8000ae0:	e015      	b.n	8000b0e <gameplay_loop_CM7+0x66>

	case STATE_IDLE:
		exec_state_idle();
 8000ae2:	f000 f827 	bl	8000b34 <exec_state_idle>
		break;
 8000ae6:	e012      	b.n	8000b0e <gameplay_loop_CM7+0x66>

	case STATE_ROBOT_TURN:
		exec_state_robot_move();
 8000ae8:	f000 f858 	bl	8000b9c <exec_state_robot_move>
		break;
 8000aec:	e00f      	b.n	8000b0e <gameplay_loop_CM7+0x66>

	case STATE_USER_TURN:
		exec_state_user_move();
 8000aee:	f000 f860 	bl	8000bb2 <exec_state_user_move>
		break;
 8000af2:	e00c      	b.n	8000b0e <gameplay_loop_CM7+0x66>

	case STATE_CLEAN_UP:
		exec_state_clean_up();
 8000af4:	f000 f868 	bl	8000bc8 <exec_state_clean_up>
		break;
 8000af8:	e009      	b.n	8000b0e <gameplay_loop_CM7+0x66>

	case STATE_CHEAT_DETECTED:
		exec_state_cheat_detected();
 8000afa:	f000 f870 	bl	8000bde <exec_state_cheat_detected>
		break;
 8000afe:	e006      	b.n	8000b0e <gameplay_loop_CM7+0x66>

	case STATE_GAME_END:
		exec_state_game_end();
 8000b00:	f000 f874 	bl	8000bec <exec_state_game_end>
		break;
 8000b04:	e003      	b.n	8000b0e <gameplay_loop_CM7+0x66>

	case STATE_START_GAME:
		exec_state_start_game();
 8000b06:	f000 f87d 	bl	8000c04 <exec_state_start_game>
		break;
 8000b0a:	e000      	b.n	8000b0e <gameplay_loop_CM7+0x66>

	default: // im not sure what needs to happen here yet
		// maybe my default should be idle, maybe not
		break;
 8000b0c:	bf00      	nop
	}
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop

08000b18 <exec_state_init>:

void exec_state_init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	HSEM_TAKE_RELEASE(HSEM_CM4_INIT); // tell CM4 to initialise
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f000 fc3b 	bl	8001398 <HAL_HSEM_FastTake>
 8000b22:	2100      	movs	r1, #0
 8000b24:	2002      	movs	r0, #2
 8000b26:	f000 fc51 	bl	80013cc <HAL_HSEM_Release>
	HAL_Delay(5);
 8000b2a:	2005      	movs	r0, #5
 8000b2c:	f000 f944 	bl	8000db8 <HAL_Delay>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <exec_state_idle>:

void exec_state_idle(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	/* A function to toggle between both players
	 * depending on whoever played last */
	if (whos_turn == USER) // user's move
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <exec_state_idle+0x60>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d012      	beq.n	8000b66 <exec_state_idle+0x32>
	{
		whos_turn = !whos_turn; // robot's turn
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <exec_state_idle+0x60>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	bf14      	ite	ne
 8000b48:	2301      	movne	r3, #1
 8000b4a:	2300      	moveq	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f083 0301 	eor.w	r3, r3, #1
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <exec_state_idle+0x60>)
 8000b5c:	701a      	strb	r2, [r3, #0]
		current_state_CM7 = STATE_ROBOT_TURN; // go to robot move state
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <exec_state_idle+0x64>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	601a      	str	r2, [r3, #0]
	else // robot's turn
	{
		whos_turn = !whos_turn;	// user's turn
		current_state_CM7 = STATE_USER_TURN; // go to user move state
	}
}
 8000b64:	e011      	b.n	8000b8a <exec_state_idle+0x56>
		whos_turn = !whos_turn;	// user's turn
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <exec_state_idle+0x60>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	bf14      	ite	ne
 8000b6e:	2301      	movne	r3, #1
 8000b70:	2300      	moveq	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f083 0301 	eor.w	r3, r3, #1
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <exec_state_idle+0x60>)
 8000b82:	701a      	strb	r2, [r3, #0]
		current_state_CM7 = STATE_USER_TURN; // go to user move state
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <exec_state_idle+0x64>)
 8000b86:	2203      	movs	r2, #3
 8000b88:	601a      	str	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	2400000c 	.word	0x2400000c
 8000b98:	24000540 	.word	0x24000540

08000b9c <exec_state_robot_move>:

void exec_state_robot_move(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	HSEM_TAKE_RELEASE(HSEM_ROBOT_TURN); // tell CM4 to execute robot move
 8000ba0:	2004      	movs	r0, #4
 8000ba2:	f000 fbf9 	bl	8001398 <HAL_HSEM_FastTake>
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2004      	movs	r0, #4
 8000baa:	f000 fc0f 	bl	80013cc <HAL_HSEM_Release>
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <exec_state_user_move>:

void exec_state_user_move(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
	HSEM_TAKE_RELEASE(HSEM_USER_TURN); // tell CM4 that it can validate user inputs
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f000 fbee 	bl	8001398 <HAL_HSEM_FastTake>
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f000 fc04 	bl	80013cc <HAL_HSEM_Release>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <exec_state_clean_up>:

void exec_state_clean_up(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	HSEM_TAKE_RELEASE(HSEM_CLEAN_UP);	// tell CM4 to prepare for next game
 8000bcc:	2006      	movs	r0, #6
 8000bce:	f000 fbe3 	bl	8001398 <HAL_HSEM_FastTake>
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2006      	movs	r0, #6
 8000bd6:	f000 fbf9 	bl	80013cc <HAL_HSEM_Release>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <exec_state_cheat_detected>:

void exec_state_cheat_detected(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <exec_state_game_end>:

void exec_state_game_end(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	HSEM_TAKE_RELEASE(HSEM_GAME_END);// tell CM4 to display user msgs for game end
 8000bf0:	2005      	movs	r0, #5
 8000bf2:	f000 fbd1 	bl	8001398 <HAL_HSEM_FastTake>
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2005      	movs	r0, #5
 8000bfa:	f000 fbe7 	bl	80013cc <HAL_HSEM_Release>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <exec_state_start_game>:

void exec_state_start_game(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
	// TODO: prepare vars.c and others ?

	current_state_CM7 = STATE_USER_TURN; // go to next state
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <exec_state_start_game+0x1c>)
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	601a      	str	r2, [r3, #0]
	whos_turn = USER;
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <exec_state_start_game+0x20>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	24000540 	.word	0x24000540
 8000c24:	2400000c 	.word	0x2400000c

08000c28 <check_state>:
 STATE_CLEAN_UP						4
 STATE_CHEAT_DETECTED				5
 STATE_GAME_END						6
 */
int check_state(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
	return current_state_CM7;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <check_state+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	24000540 	.word	0x24000540

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c44:	f7ff fb48 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	; (8000c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f003 f8b1 	bl	8003dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fbff 	bl	8000474 <main>
  bx  lr
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c80:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8000c84:	08003e5c 	.word	0x08003e5c
  ldr r2, =_sbss
 8000c88:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8000c8c:	2400054c 	.word	0x2400054c

08000c90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC3_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	f000 f98c 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ca0:	f001 fb6a 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_Init+0x68>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	0a1b      	lsrs	r3, r3, #8
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	4913      	ldr	r1, [pc, #76]	; (8000d00 <HAL_Init+0x6c>)
 8000cb2:	5ccb      	ldrb	r3, [r1, r3]
 8000cb4:	f003 031f 	and.w	r3, r3, #31
 8000cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_Init+0x68>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_Init+0x6c>)
 8000cc8:	5cd3      	ldrb	r3, [r2, r3]
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <HAL_Init+0x70>)
 8000cd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_Init+0x74>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f814 	bl	8000d0c <HAL_InitTick>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e002      	b.n	8000cf4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cee:	f7ff fd93 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	08003e44 	.word	0x08003e44
 8000d04:	24000004 	.word	0x24000004
 8000d08:	24000000 	.word	0x24000000

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_InitTick+0x60>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e021      	b.n	8000d64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_InitTick+0x64>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_InitTick+0x60>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f971 	bl	800101e <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f93b 	bl	8000fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x68>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	24000014 	.word	0x24000014
 8000d70:	24000000 	.word	0x24000000
 8000d74:	24000010 	.word	0x24000010

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	24000014 	.word	0x24000014
 8000d9c:	24000548 	.word	0x24000548

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	24000548 	.word	0x24000548

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	24000014 	.word	0x24000014

08000e00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetREVID+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	0c1b      	lsrs	r3, r3, #16
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	5c001000 	.word	0x5c001000

08000e18 <__NVIC_SetPriorityGrouping>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <__NVIC_SetPriorityGrouping+0x40>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x40>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00
 8000e5c:	05fa0000 	.word	0x05fa0000

08000e60 <__NVIC_GetPriorityGrouping>:
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_EnableIRQ>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db0b      	blt.n	8000ea6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	f003 021f 	and.w	r2, r3, #31
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <__NVIC_EnableIRQ+0x38>)
 8000e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f84:	d301      	bcc.n	8000f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00f      	b.n	8000faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <SysTick_Config+0x40>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f92:	210f      	movs	r1, #15
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f7ff ff8e 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SysTick_Config+0x40>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <SysTick_Config+0x40>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff29 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff40 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff90 	bl	8000f0c <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5f 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff33 	bl	8000e7c <__NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffa4 	bl	8000f74 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001046:	4b89      	ldr	r3, [pc, #548]	; (800126c <HAL_GPIO_Init+0x234>)
 8001048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800104a:	e194      	b.n	8001376 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8186 	beq.w	8001370 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d005      	beq.n	800107c <HAL_GPIO_Init+0x44>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d130      	bne.n	80010de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b2:	2201      	movs	r2, #1
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	f003 0201 	and.w	r2, r3, #1
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d017      	beq.n	800111a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d123      	bne.n	800116e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	69b9      	ldr	r1, [r7, #24]
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0203 	and.w	r2, r3, #3
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80e0 	beq.w	8001370 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <HAL_GPIO_Init+0x238>)
 80011b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011b6:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <HAL_GPIO_Init+0x238>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_GPIO_Init+0x238>)
 80011c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ce:	4a29      	ldr	r2, [pc, #164]	; (8001274 <HAL_GPIO_Init+0x23c>)
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	220f      	movs	r2, #15
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a20      	ldr	r2, [pc, #128]	; (8001278 <HAL_GPIO_Init+0x240>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d052      	beq.n	80012a0 <HAL_GPIO_Init+0x268>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a1f      	ldr	r2, [pc, #124]	; (800127c <HAL_GPIO_Init+0x244>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d031      	beq.n	8001266 <HAL_GPIO_Init+0x22e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <HAL_GPIO_Init+0x248>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d02b      	beq.n	8001262 <HAL_GPIO_Init+0x22a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_GPIO_Init+0x24c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x226>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <HAL_GPIO_Init+0x250>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x222>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_GPIO_Init+0x254>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x21e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <HAL_GPIO_Init+0x258>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x21a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <HAL_GPIO_Init+0x25c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x216>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a18      	ldr	r2, [pc, #96]	; (8001298 <HAL_GPIO_Init+0x260>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x212>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_GPIO_Init+0x264>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x20e>
 8001242:	2309      	movs	r3, #9
 8001244:	e02d      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001246:	230a      	movs	r3, #10
 8001248:	e02b      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800124a:	2308      	movs	r3, #8
 800124c:	e029      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800124e:	2307      	movs	r3, #7
 8001250:	e027      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001252:	2306      	movs	r3, #6
 8001254:	e025      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001256:	2305      	movs	r3, #5
 8001258:	e023      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800125a:	2304      	movs	r3, #4
 800125c:	e021      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800125e:	2303      	movs	r3, #3
 8001260:	e01f      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001262:	2302      	movs	r3, #2
 8001264:	e01d      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001266:	2301      	movs	r3, #1
 8001268:	e01b      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800126a:	bf00      	nop
 800126c:	58000080 	.word	0x58000080
 8001270:	58024400 	.word	0x58024400
 8001274:	58000400 	.word	0x58000400
 8001278:	58020000 	.word	0x58020000
 800127c:	58020400 	.word	0x58020400
 8001280:	58020800 	.word	0x58020800
 8001284:	58020c00 	.word	0x58020c00
 8001288:	58021000 	.word	0x58021000
 800128c:	58021400 	.word	0x58021400
 8001290:	58021800 	.word	0x58021800
 8001294:	58021c00 	.word	0x58021c00
 8001298:	58022000 	.word	0x58022000
 800129c:	58022400 	.word	0x58022400
 80012a0:	2300      	movs	r3, #0
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	f002 0203 	and.w	r2, r2, #3
 80012a8:	0092      	lsls	r2, r2, #2
 80012aa:	4093      	lsls	r3, r2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b2:	4938      	ldr	r1, [pc, #224]	; (8001394 <HAL_GPIO_Init+0x35c>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	3301      	adds	r3, #1
 8001374:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	f47f ae63 	bne.w	800104c <HAL_GPIO_Init+0x14>
  }
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	3724      	adds	r7, #36	; 0x24
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	58000400 	.word	0x58000400

08001398 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_HSEM_FastTake+0x2c>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3320      	adds	r3, #32
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_HSEM_FastTake+0x30>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e000      	b.n	80013b6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	58026400 	.word	0x58026400
 80013c8:	80000300 	.word	0x80000300

080013cc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80013d6:	4906      	ldr	r1, [pc, #24]	; (80013f0 <HAL_HSEM_Release+0x24>)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	58026400 	.word	0x58026400

080013f4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_HSEM_ActivateNotification+0x20>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4904      	ldr	r1, [pc, #16]	; (8001414 <HAL_HSEM_ActivateNotification+0x20>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
#endif
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	58026500 	.word	0x58026500

08001418 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_HSEM_IRQHandler+0x30>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_HSEM_IRQHandler+0x30>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	43db      	mvns	r3, r3
 800142c:	4906      	ldr	r1, [pc, #24]	; (8001448 <HAL_HSEM_IRQHandler+0x30>)
 800142e:	4013      	ands	r3, r2
 8001430:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <HAL_HSEM_IRQHandler+0x30>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff faf3 	bl	8000a24 <HAL_HSEM_FreeCallback>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	58026500 	.word	0x58026500

0800144c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800144c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144e:	b08f      	sub	sp, #60	; 0x3c
 8001450:	af0a      	add	r7, sp, #40	; 0x28
 8001452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e116      	b.n	800168c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d106      	bne.n	800147e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff fa4f 	bl	800091c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2203      	movs	r2, #3
 8001482:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f002 f9fd 	bl	800389c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	687e      	ldr	r6, [r7, #4]
 80014aa:	466d      	mov	r5, sp
 80014ac:	f106 0410 	add.w	r4, r6, #16
 80014b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80014c0:	1d33      	adds	r3, r6, #4
 80014c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c4:	6838      	ldr	r0, [r7, #0]
 80014c6:	f002 f97b 	bl	80037c0 <USB_CoreInit>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2202      	movs	r2, #2
 80014d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0d7      	b.n	800168c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 f9eb 	bl	80038be <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e04a      	b.n	8001584 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	333d      	adds	r3, #61	; 0x3d
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	333c      	adds	r3, #60	; 0x3c
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	b298      	uxth	r0, r3
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	3344      	adds	r3, #68	; 0x44
 800152a:	4602      	mov	r2, r0
 800152c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3340      	adds	r3, #64	; 0x40
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	3348      	adds	r3, #72	; 0x48
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	334c      	adds	r3, #76	; 0x4c
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	3354      	adds	r3, #84	; 0x54
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	3301      	adds	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d3af      	bcc.n	80014ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e044      	b.n	800161e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	3301      	adds	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	429a      	cmp	r2, r3
 8001626:	d3b5      	bcc.n	8001594 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	687e      	ldr	r6, [r7, #4]
 8001630:	466d      	mov	r5, sp
 8001632:	f106 0410 	add.w	r4, r6, #16
 8001636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001642:	e885 0003 	stmia.w	r5, {r0, r1}
 8001646:	1d33      	adds	r3, r6, #4
 8001648:	cb0e      	ldmia	r3, {r1, r2, r3}
 800164a:	6838      	ldr	r0, [r7, #0]
 800164c:	f002 f984 	bl	8003958 <USB_DevInit>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2202      	movs	r2, #2
 800165a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e014      	b.n	800168c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f80a 	bl	8001694 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fb42 	bl	8003d0e <USB_DevDisconnect>

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001694 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	10000003 	.word	0x10000003

080016dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016e4:	4b29      	ldr	r3, [pc, #164]	; (800178c <HAL_PWREx_ConfigSupply+0xb0>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	2b06      	cmp	r3, #6
 80016ee:	d00a      	beq.n	8001706 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016f0:	4b26      	ldr	r3, [pc, #152]	; (800178c <HAL_PWREx_ConfigSupply+0xb0>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d001      	beq.n	8001702 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e040      	b.n	8001784 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e03e      	b.n	8001784 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <HAL_PWREx_ConfigSupply+0xb0>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800170e:	491f      	ldr	r1, [pc, #124]	; (800178c <HAL_PWREx_ConfigSupply+0xb0>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4313      	orrs	r3, r2
 8001714:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001716:	f7ff fb43 	bl	8000da0 <HAL_GetTick>
 800171a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800171c:	e009      	b.n	8001732 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800171e:	f7ff fb3f 	bl	8000da0 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800172c:	d901      	bls.n	8001732 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e028      	b.n	8001784 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_PWREx_ConfigSupply+0xb0>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800173a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800173e:	d1ee      	bne.n	800171e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b1e      	cmp	r3, #30
 8001744:	d008      	beq.n	8001758 <HAL_PWREx_ConfigSupply+0x7c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b2e      	cmp	r3, #46	; 0x2e
 800174a:	d005      	beq.n	8001758 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b1d      	cmp	r3, #29
 8001750:	d002      	beq.n	8001758 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b2d      	cmp	r3, #45	; 0x2d
 8001756:	d114      	bne.n	8001782 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001758:	f7ff fb22 	bl	8000da0 <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800175e:	e009      	b.n	8001774 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001760:	f7ff fb1e 	bl	8000da0 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800176e:	d901      	bls.n	8001774 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e007      	b.n	8001784 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_PWREx_ConfigSupply+0xb0>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001780:	d1ee      	bne.n	8001760 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	58024800 	.word	0x58024800

08001790 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800179a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	58024800 	.word	0x58024800

080017b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	; 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	f000 bc1d 	b.w	8001ffe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8087 	beq.w	80018e0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d2:	4b99      	ldr	r3, [pc, #612]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017dc:	4b96      	ldr	r3, [pc, #600]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	2b10      	cmp	r3, #16
 80017e6:	d007      	beq.n	80017f8 <HAL_RCC_OscConfig+0x48>
 80017e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ea:	2b18      	cmp	r3, #24
 80017ec:	d110      	bne.n	8001810 <HAL_RCC_OscConfig+0x60>
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d10b      	bne.n	8001810 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f8:	4b8f      	ldr	r3, [pc, #572]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d06c      	beq.n	80018de <HAL_RCC_OscConfig+0x12e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d168      	bne.n	80018de <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e3f6      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001818:	d106      	bne.n	8001828 <HAL_RCC_OscConfig+0x78>
 800181a:	4b87      	ldr	r3, [pc, #540]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a86      	ldr	r2, [pc, #536]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e02e      	b.n	8001886 <HAL_RCC_OscConfig+0xd6>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10c      	bne.n	800184a <HAL_RCC_OscConfig+0x9a>
 8001830:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a80      	ldr	r2, [pc, #512]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b7e      	ldr	r3, [pc, #504]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a7d      	ldr	r2, [pc, #500]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e01d      	b.n	8001886 <HAL_RCC_OscConfig+0xd6>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001852:	d10c      	bne.n	800186e <HAL_RCC_OscConfig+0xbe>
 8001854:	4b78      	ldr	r3, [pc, #480]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a77      	ldr	r2, [pc, #476]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 800185a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b75      	ldr	r3, [pc, #468]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a74      	ldr	r2, [pc, #464]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0xd6>
 800186e:	4b72      	ldr	r3, [pc, #456]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a71      	ldr	r2, [pc, #452]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b6f      	ldr	r3, [pc, #444]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a6e      	ldr	r2, [pc, #440]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d013      	beq.n	80018b6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff fa87 	bl	8000da0 <HAL_GetTick>
 8001892:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001896:	f7ff fa83 	bl	8000da0 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b64      	cmp	r3, #100	; 0x64
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e3aa      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018a8:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0xe6>
 80018b4:	e014      	b.n	80018e0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff fa73 	bl	8000da0 <HAL_GetTick>
 80018ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018be:	f7ff fa6f 	bl	8000da0 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	; 0x64
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e396      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018d0:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x10e>
 80018dc:	e000      	b.n	80018e0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80cb 	beq.w	8001a84 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ee:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018f6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018f8:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d007      	beq.n	8001914 <HAL_RCC_OscConfig+0x164>
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	2b18      	cmp	r3, #24
 8001908:	d156      	bne.n	80019b8 <HAL_RCC_OscConfig+0x208>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d151      	bne.n	80019b8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001914:	4b48      	ldr	r3, [pc, #288]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_OscConfig+0x17c>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e368      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800192c:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 0219 	bic.w	r2, r3, #25
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	493f      	ldr	r1, [pc, #252]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800193e:	f7ff fa2f 	bl	8000da0 <HAL_GetTick>
 8001942:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff fa2b 	bl	8000da0 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e352      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001958:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	f7ff fa4c 	bl	8000e00 <HAL_GetREVID>
 8001968:	4603      	mov	r3, r0
 800196a:	f241 0203 	movw	r2, #4099	; 0x1003
 800196e:	4293      	cmp	r3, r2
 8001970:	d817      	bhi.n	80019a2 <HAL_RCC_OscConfig+0x1f2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b40      	cmp	r3, #64	; 0x40
 8001978:	d108      	bne.n	800198c <HAL_RCC_OscConfig+0x1dc>
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001982:	4a2d      	ldr	r2, [pc, #180]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198a:	e07b      	b.n	8001a84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	031b      	lsls	r3, r3, #12
 800199a:	4927      	ldr	r1, [pc, #156]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a0:	e070      	b.n	8001a84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	061b      	lsls	r3, r3, #24
 80019b0:	4921      	ldr	r1, [pc, #132]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b6:	e065      	b.n	8001a84 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d048      	beq.n	8001a52 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 0219 	bic.w	r2, r3, #25
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	491a      	ldr	r1, [pc, #104]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff f9e5 	bl	8000da0 <HAL_GetTick>
 80019d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019da:	f7ff f9e1 	bl	8000da0 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e308      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	f7ff fa02 	bl	8000e00 <HAL_GetREVID>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d81a      	bhi.n	8001a3c <HAL_RCC_OscConfig+0x28c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b40      	cmp	r3, #64	; 0x40
 8001a0c:	d108      	bne.n	8001a20 <HAL_RCC_OscConfig+0x270>
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	6053      	str	r3, [r2, #4]
 8001a1e:	e031      	b.n	8001a84 <HAL_RCC_OscConfig+0x2d4>
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	031b      	lsls	r3, r3, #12
 8001a2e:	4902      	ldr	r1, [pc, #8]	; (8001a38 <HAL_RCC_OscConfig+0x288>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
 8001a34:	e026      	b.n	8001a84 <HAL_RCC_OscConfig+0x2d4>
 8001a36:	bf00      	nop
 8001a38:	58024400 	.word	0x58024400
 8001a3c:	4b9a      	ldr	r3, [pc, #616]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	061b      	lsls	r3, r3, #24
 8001a4a:	4997      	ldr	r1, [pc, #604]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
 8001a50:	e018      	b.n	8001a84 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4b95      	ldr	r3, [pc, #596]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a94      	ldr	r2, [pc, #592]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f99f 	bl	8000da0 <HAL_GetTick>
 8001a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a66:	f7ff f99b 	bl	8000da0 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e2c2      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a78:	4b8b      	ldr	r3, [pc, #556]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a9 	beq.w	8001be4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a92:	4b85      	ldr	r3, [pc, #532]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a9a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a9c:	4b82      	ldr	r3, [pc, #520]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d007      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x308>
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b18      	cmp	r3, #24
 8001aac:	d13a      	bne.n	8001b24 <HAL_RCC_OscConfig+0x374>
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d135      	bne.n	8001b24 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ab8:	4b7b      	ldr	r3, [pc, #492]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x320>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b80      	cmp	r3, #128	; 0x80
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e296      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ad0:	f7ff f996 	bl	8000e00 <HAL_GetREVID>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d817      	bhi.n	8001b0e <HAL_RCC_OscConfig+0x35e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	2b20      	cmp	r3, #32
 8001ae4:	d108      	bne.n	8001af8 <HAL_RCC_OscConfig+0x348>
 8001ae6:	4b70      	ldr	r3, [pc, #448]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001aee:	4a6e      	ldr	r2, [pc, #440]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001af0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001af4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001af6:	e075      	b.n	8001be4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001af8:	4b6b      	ldr	r3, [pc, #428]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	069b      	lsls	r3, r3, #26
 8001b06:	4968      	ldr	r1, [pc, #416]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b0c:	e06a      	b.n	8001be4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b0e:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	061b      	lsls	r3, r3, #24
 8001b1c:	4962      	ldr	r1, [pc, #392]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b22:	e05f      	b.n	8001be4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d042      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a5d      	ldr	r2, [pc, #372]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f932 	bl	8000da0 <HAL_GetTick>
 8001b3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b40:	f7ff f92e 	bl	8000da0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e255      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b52:	4b55      	ldr	r3, [pc, #340]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b5e:	f7ff f94f 	bl	8000e00 <HAL_GetREVID>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d817      	bhi.n	8001b9c <HAL_RCC_OscConfig+0x3ec>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d108      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3d6>
 8001b74:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b7c:	4a4a      	ldr	r2, [pc, #296]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001b7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b82:	6053      	str	r3, [r2, #4]
 8001b84:	e02e      	b.n	8001be4 <HAL_RCC_OscConfig+0x434>
 8001b86:	4b48      	ldr	r3, [pc, #288]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	069b      	lsls	r3, r3, #26
 8001b94:	4944      	ldr	r1, [pc, #272]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
 8001b9a:	e023      	b.n	8001be4 <HAL_RCC_OscConfig+0x434>
 8001b9c:	4b42      	ldr	r3, [pc, #264]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	061b      	lsls	r3, r3, #24
 8001baa:	493f      	ldr	r1, [pc, #252]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60cb      	str	r3, [r1, #12]
 8001bb0:	e018      	b.n	8001be4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001bb2:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a3c      	ldr	r2, [pc, #240]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f8ef 	bl	8000da0 <HAL_GetTick>
 8001bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001bc6:	f7ff f8eb 	bl	8000da0 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e212      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bd8:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d036      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d019      	beq.n	8001c2c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff f8cc 	bl	8000da0 <HAL_GetTick>
 8001c08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f8c8 	bl	8000da0 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1ef      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x45c>
 8001c2a:	e018      	b.n	8001c5e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c30:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c38:	f7ff f8b2 	bl	8000da0 <HAL_GetTick>
 8001c3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c40:	f7ff f8ae 	bl	8000da0 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1d5      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d039      	beq.n	8001cde <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d01c      	beq.n	8001cac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f88f 	bl	8000da0 <HAL_GetTick>
 8001c82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c86:	f7ff f88b 	bl	8000da0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e1b2      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x4d6>
 8001ca4:	e01b      	b.n	8001cde <HAL_RCC_OscConfig+0x52e>
 8001ca6:	bf00      	nop
 8001ca8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cac:	4b9b      	ldr	r3, [pc, #620]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a9a      	ldr	r2, [pc, #616]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f872 	bl	8000da0 <HAL_GetTick>
 8001cbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001cc0:	f7ff f86e 	bl	8000da0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e195      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cd2:	4b92      	ldr	r3, [pc, #584]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8081 	beq.w	8001dee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cec:	4b8c      	ldr	r3, [pc, #560]	; (8001f20 <HAL_RCC_OscConfig+0x770>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a8b      	ldr	r2, [pc, #556]	; (8001f20 <HAL_RCC_OscConfig+0x770>)
 8001cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cf8:	f7ff f852 	bl	8000da0 <HAL_GetTick>
 8001cfc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d00:	f7ff f84e 	bl	8000da0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e175      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d12:	4b83      	ldr	r3, [pc, #524]	; (8001f20 <HAL_RCC_OscConfig+0x770>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d106      	bne.n	8001d34 <HAL_RCC_OscConfig+0x584>
 8001d26:	4b7d      	ldr	r3, [pc, #500]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	4a7c      	ldr	r2, [pc, #496]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6713      	str	r3, [r2, #112]	; 0x70
 8001d32:	e02d      	b.n	8001d90 <HAL_RCC_OscConfig+0x5e0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10c      	bne.n	8001d56 <HAL_RCC_OscConfig+0x5a6>
 8001d3c:	4b77      	ldr	r3, [pc, #476]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	4a76      	ldr	r2, [pc, #472]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6713      	str	r3, [r2, #112]	; 0x70
 8001d48:	4b74      	ldr	r3, [pc, #464]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	4a73      	ldr	r2, [pc, #460]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d4e:	f023 0304 	bic.w	r3, r3, #4
 8001d52:	6713      	str	r3, [r2, #112]	; 0x70
 8001d54:	e01c      	b.n	8001d90 <HAL_RCC_OscConfig+0x5e0>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b05      	cmp	r3, #5
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x5c8>
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	4a6e      	ldr	r2, [pc, #440]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6a:	4b6c      	ldr	r3, [pc, #432]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	4a6b      	ldr	r2, [pc, #428]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6713      	str	r3, [r2, #112]	; 0x70
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0x5e0>
 8001d78:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	4a67      	ldr	r2, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
 8001d84:	4b65      	ldr	r3, [pc, #404]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a64      	ldr	r2, [pc, #400]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001d8a:	f023 0304 	bic.w	r3, r3, #4
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d015      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d98:	f7ff f802 	bl	8000da0 <HAL_GetTick>
 8001d9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7fe fffe 	bl	8000da0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e123      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001db6:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0ee      	beq.n	8001da0 <HAL_RCC_OscConfig+0x5f0>
 8001dc2:	e014      	b.n	8001dee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7fe ffec 	bl	8000da0 <HAL_GetTick>
 8001dc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7fe ffe8 	bl	8000da0 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e10d      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001de2:	4b4e      	ldr	r3, [pc, #312]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1ee      	bne.n	8001dcc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8102 	beq.w	8001ffc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001df8:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e00:	2b18      	cmp	r3, #24
 8001e02:	f000 80bd 	beq.w	8001f80 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	f040 809e 	bne.w	8001f4c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e10:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a41      	ldr	r2, [pc, #260]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7fe ffc0 	bl	8000da0 <HAL_GetTick>
 8001e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e24:	f7fe ffbc 	bl	8000da0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0e3      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e36:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e42:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e46:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <HAL_RCC_OscConfig+0x774>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	430a      	orrs	r2, r1
 8001e56:	4931      	ldr	r1, [pc, #196]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	628b      	str	r3, [r1, #40]	; 0x28
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	3b01      	subs	r3, #1
 8001e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	025b      	lsls	r3, r3, #9
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	3b01      	subs	r3, #1
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	3b01      	subs	r3, #1
 8001e86:	061b      	lsls	r3, r3, #24
 8001e88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e8c:	4923      	ldr	r1, [pc, #140]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_RCC_OscConfig+0x778>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001eaa:	00d2      	lsls	r2, r2, #3
 8001eac:	491b      	ldr	r1, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	f023 020c 	bic.w	r2, r3, #12
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4917      	ldr	r1, [pc, #92]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	f023 0202 	bic.w	r2, r3, #2
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	4912      	ldr	r1, [pc, #72]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_RCC_OscConfig+0x76c>)
 8001f0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7fe ff45 	bl	8000da0 <HAL_GetTick>
 8001f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f18:	e011      	b.n	8001f3e <HAL_RCC_OscConfig+0x78e>
 8001f1a:	bf00      	nop
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	58024800 	.word	0x58024800
 8001f24:	fffffc0c 	.word	0xfffffc0c
 8001f28:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe ff38 	bl	8000da0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e05f      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f3e:	4b32      	ldr	r3, [pc, #200]	; (8002008 <HAL_RCC_OscConfig+0x858>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x77c>
 8001f4a:	e057      	b.n	8001ffc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <HAL_RCC_OscConfig+0x858>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a2d      	ldr	r2, [pc, #180]	; (8002008 <HAL_RCC_OscConfig+0x858>)
 8001f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7fe ff22 	bl	8000da0 <HAL_GetTick>
 8001f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f60:	f7fe ff1e 	bl	8000da0 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e045      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_RCC_OscConfig+0x858>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x7b0>
 8001f7e:	e03d      	b.n	8001ffc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_RCC_OscConfig+0x858>)
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_RCC_OscConfig+0x858>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d031      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f003 0203 	and.w	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d12a      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d122      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d11a      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0a5b      	lsrs	r3, r3, #9
 8001fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d111      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	0c1b      	lsrs	r3, r3, #16
 8001fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d108      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	0e1b      	lsrs	r3, r3, #24
 8001fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3730      	adds	r7, #48	; 0x30
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	58024400 	.word	0x58024400

0800200c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e19c      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b8a      	ldr	r3, [pc, #552]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d910      	bls.n	8002050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b87      	ldr	r3, [pc, #540]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 020f 	bic.w	r2, r3, #15
 8002036:	4985      	ldr	r1, [pc, #532]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b83      	ldr	r3, [pc, #524]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e184      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d010      	beq.n	800207e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	4b7b      	ldr	r3, [pc, #492]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002068:	429a      	cmp	r2, r3
 800206a:	d908      	bls.n	800207e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800206c:	4b78      	ldr	r3, [pc, #480]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	4975      	ldr	r1, [pc, #468]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800207a:	4313      	orrs	r3, r2
 800207c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d010      	beq.n	80020ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	4b70      	ldr	r3, [pc, #448]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002096:	429a      	cmp	r2, r3
 8002098:	d908      	bls.n	80020ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800209a:	4b6d      	ldr	r3, [pc, #436]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	496a      	ldr	r1, [pc, #424]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699a      	ldr	r2, [r3, #24]
 80020bc:	4b64      	ldr	r3, [pc, #400]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d908      	bls.n	80020da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020c8:	4b61      	ldr	r3, [pc, #388]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	495e      	ldr	r1, [pc, #376]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d010      	beq.n	8002108 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	4b59      	ldr	r3, [pc, #356]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d908      	bls.n	8002108 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020f6:	4b56      	ldr	r3, [pc, #344]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4953      	ldr	r1, [pc, #332]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002104:	4313      	orrs	r3, r2
 8002106:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d010      	beq.n	8002136 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	4b4d      	ldr	r3, [pc, #308]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	429a      	cmp	r2, r3
 8002122:	d908      	bls.n	8002136 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002124:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f023 020f 	bic.w	r2, r3, #15
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4947      	ldr	r1, [pc, #284]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002132:	4313      	orrs	r3, r2
 8002134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d055      	beq.n	80021ee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002142:	4b43      	ldr	r3, [pc, #268]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	4940      	ldr	r1, [pc, #256]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002150:	4313      	orrs	r3, r2
 8002152:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d107      	bne.n	800216c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800215c:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d121      	bne.n	80021ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0f6      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d107      	bne.n	8002184 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002174:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d115      	bne.n	80021ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0ea      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800218c:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0de      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800219c:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0d6      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f023 0207 	bic.w	r2, r3, #7
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4925      	ldr	r1, [pc, #148]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021be:	f7fe fdef 	bl	8000da0 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c6:	f7fe fdeb 	bl	8000da0 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0be      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d1eb      	bne.n	80021c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d010      	beq.n	800221c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	429a      	cmp	r2, r3
 8002208:	d208      	bcs.n	800221c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f023 020f 	bic.w	r2, r3, #15
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	490e      	ldr	r1, [pc, #56]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002218:	4313      	orrs	r3, r2
 800221a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d214      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 020f 	bic.w	r2, r3, #15
 8002232:	4906      	ldr	r1, [pc, #24]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e086      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
 800224c:	52002000 	.word	0x52002000
 8002250:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d010      	beq.n	8002282 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	4b3f      	ldr	r3, [pc, #252]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800226c:	429a      	cmp	r2, r3
 800226e:	d208      	bcs.n	8002282 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002270:	4b3c      	ldr	r3, [pc, #240]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4939      	ldr	r1, [pc, #228]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 800227e:	4313      	orrs	r3, r2
 8002280:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800229a:	429a      	cmp	r2, r3
 800229c:	d208      	bcs.n	80022b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	492e      	ldr	r1, [pc, #184]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	4b28      	ldr	r3, [pc, #160]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d208      	bcs.n	80022de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	4922      	ldr	r1, [pc, #136]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d010      	beq.n	800230c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d208      	bcs.n	800230c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022fa:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4917      	ldr	r1, [pc, #92]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 8002308:	4313      	orrs	r3, r2
 800230a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800230c:	f000 f834 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8002310:	4602      	mov	r2, r0
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	4912      	ldr	r1, [pc, #72]	; (8002368 <HAL_RCC_ClockConfig+0x35c>)
 800231e:	5ccb      	ldrb	r3, [r1, r3]
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
 8002328:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	4a0d      	ldr	r2, [pc, #52]	; (8002368 <HAL_RCC_ClockConfig+0x35c>)
 8002334:	5cd3      	ldrb	r3, [r2, r3]
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_RCC_ClockConfig+0x360>)
 8002342:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <HAL_RCC_ClockConfig+0x364>)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_RCC_ClockConfig+0x368>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fcdc 	bl	8000d0c <HAL_InitTick>
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	58024400 	.word	0x58024400
 8002368:	08003e44 	.word	0x08003e44
 800236c:	24000004 	.word	0x24000004
 8002370:	24000000 	.word	0x24000000
 8002374:	24000010 	.word	0x24000010

08002378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800237e:	4bb3      	ldr	r3, [pc, #716]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002386:	2b18      	cmp	r3, #24
 8002388:	f200 8155 	bhi.w	8002636 <HAL_RCC_GetSysClockFreq+0x2be>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <HAL_RCC_GetSysClockFreq+0x1c>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023f9 	.word	0x080023f9
 8002398:	08002637 	.word	0x08002637
 800239c:	08002637 	.word	0x08002637
 80023a0:	08002637 	.word	0x08002637
 80023a4:	08002637 	.word	0x08002637
 80023a8:	08002637 	.word	0x08002637
 80023ac:	08002637 	.word	0x08002637
 80023b0:	08002637 	.word	0x08002637
 80023b4:	0800241f 	.word	0x0800241f
 80023b8:	08002637 	.word	0x08002637
 80023bc:	08002637 	.word	0x08002637
 80023c0:	08002637 	.word	0x08002637
 80023c4:	08002637 	.word	0x08002637
 80023c8:	08002637 	.word	0x08002637
 80023cc:	08002637 	.word	0x08002637
 80023d0:	08002637 	.word	0x08002637
 80023d4:	08002425 	.word	0x08002425
 80023d8:	08002637 	.word	0x08002637
 80023dc:	08002637 	.word	0x08002637
 80023e0:	08002637 	.word	0x08002637
 80023e4:	08002637 	.word	0x08002637
 80023e8:	08002637 	.word	0x08002637
 80023ec:	08002637 	.word	0x08002637
 80023f0:	08002637 	.word	0x08002637
 80023f4:	0800242b 	.word	0x0800242b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023f8:	4b94      	ldr	r3, [pc, #592]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002404:	4b91      	ldr	r3, [pc, #580]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	08db      	lsrs	r3, r3, #3
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	4a90      	ldr	r2, [pc, #576]	; (8002650 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002416:	e111      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002418:	4b8d      	ldr	r3, [pc, #564]	; (8002650 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800241a:	61bb      	str	r3, [r7, #24]
    break;
 800241c:	e10e      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800241e:	4b8d      	ldr	r3, [pc, #564]	; (8002654 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002420:	61bb      	str	r3, [r7, #24]
    break;
 8002422:	e10b      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002424:	4b8c      	ldr	r3, [pc, #560]	; (8002658 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002426:	61bb      	str	r3, [r7, #24]
    break;
 8002428:	e108      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800242a:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002434:	4b85      	ldr	r3, [pc, #532]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800243e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002440:	4b82      	ldr	r3, [pc, #520]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800244a:	4b80      	ldr	r3, [pc, #512]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244e:	08db      	lsrs	r3, r3, #3
 8002450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80e1 	beq.w	8002630 <HAL_RCC_GetSysClockFreq+0x2b8>
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b02      	cmp	r3, #2
 8002472:	f000 8083 	beq.w	800257c <HAL_RCC_GetSysClockFreq+0x204>
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b02      	cmp	r3, #2
 800247a:	f200 80a1 	bhi.w	80025c0 <HAL_RCC_GetSysClockFreq+0x248>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x114>
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d056      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x1c0>
 800248a:	e099      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800248c:	4b6f      	ldr	r3, [pc, #444]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02d      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002498:	4b6c      	ldr	r3, [pc, #432]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	4a6b      	ldr	r2, [pc, #428]	; (8002650 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
 80024a8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c2:	4b62      	ldr	r3, [pc, #392]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800265c <HAL_RCC_GetSysClockFreq+0x2e4>
 80024da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80024f2:	e087      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002660 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002506:	4b51      	ldr	r3, [pc, #324]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002516:	ed97 6a02 	vldr	s12, [r7, #8]
 800251a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800265c <HAL_RCC_GetSysClockFreq+0x2e4>
 800251e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800252a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800252e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002536:	e065      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002542:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002664 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800254a:	4b40      	ldr	r3, [pc, #256]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800255a:	ed97 6a02 	vldr	s12, [r7, #8]
 800255e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800265c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800256a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800256e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800257a:	e043      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002586:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002668 <HAL_RCC_GetSysClockFreq+0x2f0>
 800258a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258e:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800259e:	ed97 6a02 	vldr	s12, [r7, #8]
 80025a2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800265c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025be:	e021      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	ee07 3a90 	vmov	s15, r3
 80025c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002664 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800265c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002602:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	0a5b      	lsrs	r3, r3, #9
 800260a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800260e:	3301      	adds	r3, #1
 8002610:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	ee07 3a90 	vmov	s15, r3
 8002618:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800261c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002628:	ee17 3a90 	vmov	r3, s15
 800262c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800262e:	e005      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
    break;
 8002634:	e002      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002638:	61bb      	str	r3, [r7, #24]
    break;
 800263a:	bf00      	nop
  }

  return sysclockfreq;
 800263c:	69bb      	ldr	r3, [r7, #24]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	58024400 	.word	0x58024400
 8002650:	03d09000 	.word	0x03d09000
 8002654:	003d0900 	.word	0x003d0900
 8002658:	007a1200 	.word	0x007a1200
 800265c:	46000000 	.word	0x46000000
 8002660:	4c742400 	.word	0x4c742400
 8002664:	4a742400 	.word	0x4a742400
 8002668:	4af42400 	.word	0x4af42400

0800266c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002674:	2300      	movs	r3, #0
 8002676:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002678:	2300      	movs	r3, #0
 800267a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d03f      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800268c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002690:	d02a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002692:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002696:	d824      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800269c:	d018      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800269e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026a2:	d81e      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ac:	d007      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026ae:	e018      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026b0:	4ba3      	ldr	r3, [pc, #652]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	4aa2      	ldr	r2, [pc, #648]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026bc:	e015      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2102      	movs	r1, #2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 ff17 	bl	80034f8 <RCCEx_PLL2_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026ce:	e00c      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3324      	adds	r3, #36	; 0x24
 80026d4:	2102      	movs	r1, #2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 ffc0 	bl	800365c <RCCEx_PLL3_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026e0:	e003      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
      break;
 80026e6:	e000      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026f0:	4b93      	ldr	r3, [pc, #588]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026fc:	4990      	ldr	r1, [pc, #576]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	650b      	str	r3, [r1, #80]	; 0x50
 8002702:	e001      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d03d      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002718:	2b04      	cmp	r3, #4
 800271a:	d826      	bhi.n	800276a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800271c:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002739 	.word	0x08002739
 8002728:	08002747 	.word	0x08002747
 800272c:	08002759 	.word	0x08002759
 8002730:	08002771 	.word	0x08002771
 8002734:	08002771 	.word	0x08002771
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002738:	4b81      	ldr	r3, [pc, #516]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	4a80      	ldr	r2, [pc, #512]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800273e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002742:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002744:	e015      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fed3 	bl	80034f8 <RCCEx_PLL2_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002756:	e00c      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3324      	adds	r3, #36	; 0x24
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f000 ff7c 	bl	800365c <RCCEx_PLL3_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002768:	e003      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
      break;
 800276e:	e000      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002778:	4b71      	ldr	r3, [pc, #452]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800277a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277c:	f023 0207 	bic.w	r2, r3, #7
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	496e      	ldr	r1, [pc, #440]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	650b      	str	r3, [r1, #80]	; 0x50
 800278a:	e001      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278c:	7dfb      	ldrb	r3, [r7, #23]
 800278e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002798:	2b00      	cmp	r3, #0
 800279a:	d042      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a4:	d02b      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x192>
 80027a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027aa:	d825      	bhi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80027ac:	2bc0      	cmp	r3, #192	; 0xc0
 80027ae:	d028      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80027b0:	2bc0      	cmp	r3, #192	; 0xc0
 80027b2:	d821      	bhi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80027b4:	2b80      	cmp	r3, #128	; 0x80
 80027b6:	d016      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d81d      	bhi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80027c0:	2b40      	cmp	r3, #64	; 0x40
 80027c2:	d007      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80027c4:	e018      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c6:	4b5e      	ldr	r3, [pc, #376]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	4a5d      	ldr	r2, [pc, #372]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027d2:	e017      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fe8c 	bl	80034f8 <RCCEx_PLL2_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027e4:	e00e      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3324      	adds	r3, #36	; 0x24
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 ff35 	bl	800365c <RCCEx_PLL3_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027f6:	e005      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	75fb      	strb	r3, [r7, #23]
      break;
 80027fc:	e002      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80027fe:	bf00      	nop
 8002800:	e000      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800280a:	4b4d      	ldr	r3, [pc, #308]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	494a      	ldr	r1, [pc, #296]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	650b      	str	r3, [r1, #80]	; 0x50
 800281c:	e001      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282a:	2b00      	cmp	r3, #0
 800282c:	d049      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002838:	d030      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800283a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800283e:	d82a      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002840:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002844:	d02c      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002846:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800284a:	d824      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800284c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002850:	d018      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002856:	d81e      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800285c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002860:	d007      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002862:	e018      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002864:	4b36      	ldr	r3, [pc, #216]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	4a35      	ldr	r2, [pc, #212]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800286a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002870:	e017      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fe3d 	bl	80034f8 <RCCEx_PLL2_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002882:	e00e      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3324      	adds	r3, #36	; 0x24
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fee6 	bl	800365c <RCCEx_PLL3_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002894:	e005      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]
      break;
 800289a:	e002      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800289c:	bf00      	nop
 800289e:	e000      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80028a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028b6:	4922      	ldr	r1, [pc, #136]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	658b      	str	r3, [r1, #88]	; 0x58
 80028bc:	e001      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028be:	7dfb      	ldrb	r3, [r7, #23]
 80028c0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d04b      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028d8:	d030      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80028da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028de:	d82a      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028e4:	d02e      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80028e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028ea:	d824      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028f0:	d018      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80028f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028f6:	d81e      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80028fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002900:	d007      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002902:	e018      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800290a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002910:	e019      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fded 	bl	80034f8 <RCCEx_PLL2_Config>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002922:	e010      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3324      	adds	r3, #36	; 0x24
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fe96 	bl	800365c <RCCEx_PLL3_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002934:	e007      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	75fb      	strb	r3, [r7, #23]
      break;
 800293a:	e004      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800293c:	bf00      	nop
 800293e:	e002      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002940:	58024400 	.word	0x58024400
      break;
 8002944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800294c:	4b99      	ldr	r3, [pc, #612]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800295a:	4996      	ldr	r1, [pc, #600]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800295c:	4313      	orrs	r3, r2
 800295e:	658b      	str	r3, [r1, #88]	; 0x58
 8002960:	e001      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d032      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002976:	2b30      	cmp	r3, #48	; 0x30
 8002978:	d01c      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800297a:	2b30      	cmp	r3, #48	; 0x30
 800297c:	d817      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 800297e:	2b20      	cmp	r3, #32
 8002980:	d00c      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002982:	2b20      	cmp	r3, #32
 8002984:	d813      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002986:	2b00      	cmp	r3, #0
 8002988:	d016      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800298a:	2b10      	cmp	r3, #16
 800298c:	d10f      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800298e:	4b89      	ldr	r3, [pc, #548]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	4a88      	ldr	r2, [pc, #544]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002998:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800299a:	e00e      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	2102      	movs	r1, #2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fda8 	bl	80034f8 <RCCEx_PLL2_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80029ac:	e005      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
      break;
 80029b2:	e002      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80029b4:	bf00      	nop
 80029b6:	e000      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80029b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029c0:	4b7c      	ldr	r3, [pc, #496]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029cc:	4979      	ldr	r1, [pc, #484]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80029d2:	e001      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d047      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ec:	d030      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80029ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029f2:	d82a      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80029f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029f8:	d02c      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80029fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029fe:	d824      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a04:	d018      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0a:	d81e      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a14:	d007      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002a16:	e018      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a18:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	4a65      	ldr	r2, [pc, #404]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a24:	e017      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fd63 	bl	80034f8 <RCCEx_PLL2_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a36:	e00e      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3324      	adds	r3, #36	; 0x24
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fe0c 	bl	800365c <RCCEx_PLL3_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a48:	e005      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a4e:	e002      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002a50:	bf00      	nop
 8002a52:	e000      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d109      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a5c:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a60:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	4952      	ldr	r1, [pc, #328]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8002a6e:	e001      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d049      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a88:	d02e      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a8e:	d828      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002a90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a94:	d02a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002a96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a9a:	d822      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002a9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002aa0:	d026      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002aa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002aa6:	d81c      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aac:	d010      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002aae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ab2:	d816      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01d      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abc:	d111      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fd17 	bl	80034f8 <RCCEx_PLL2_Config>
 8002aca:	4603      	mov	r3, r0
 8002acc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ace:	e012      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3324      	adds	r3, #36	; 0x24
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fdc0 	bl	800365c <RCCEx_PLL3_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ae0:	e009      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ae6:	e006      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002ae8:	bf00      	nop
 8002aea:	e004      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002aec:	bf00      	nop
 8002aee:	e002      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002af0:	bf00      	nop
 8002af2:	e000      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b00:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b08:	492a      	ldr	r1, [pc, #168]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	650b      	str	r3, [r1, #80]	; 0x50
 8002b0e:	e001      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
 8002b12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d04d      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b2a:	d02e      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b30:	d828      	bhi.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b36:	d02a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3c:	d822      	bhi.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b42:	d026      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002b44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b48:	d81c      	bhi.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b4e:	d010      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b54:	d816      	bhi.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01d      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b5e:	d111      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3304      	adds	r3, #4
 8002b64:	2101      	movs	r1, #1
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fcc6 	bl	80034f8 <RCCEx_PLL2_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b70:	e012      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3324      	adds	r3, #36	; 0x24
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fd6f 	bl	800365c <RCCEx_PLL3_Config>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b82:	e009      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	75fb      	strb	r3, [r7, #23]
      break;
 8002b88:	e006      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e004      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e002      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002b92:	bf00      	nop
 8002b94:	e000      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b98:	7dfb      	ldrb	r3, [r7, #23]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002bac:	4901      	ldr	r1, [pc, #4]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	658b      	str	r3, [r1, #88]	; 0x58
 8002bb2:	e003      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002bb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d02f      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd0:	d00e      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd6:	d814      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d015      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002be0:	d10f      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002be2:	4baf      	ldr	r3, [pc, #700]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	4aae      	ldr	r2, [pc, #696]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bee:	e00c      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fc7e 	bl	80034f8 <RCCEx_PLL2_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c00:	e003      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
      break;
 8002c06:	e000      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d109      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c10:	4ba3      	ldr	r3, [pc, #652]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1c:	49a0      	ldr	r1, [pc, #640]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	650b      	str	r3, [r1, #80]	; 0x50
 8002c22:	e001      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d032      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d81b      	bhi.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002c3c:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c42:	bf00      	nop
 8002c44:	08002c7b 	.word	0x08002c7b
 8002c48:	08002c55 	.word	0x08002c55
 8002c4c:	08002c63 	.word	0x08002c63
 8002c50:	08002c7b 	.word	0x08002c7b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c54:	4b92      	ldr	r3, [pc, #584]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	4a91      	ldr	r2, [pc, #580]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c60:	e00c      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2102      	movs	r1, #2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fc45 	bl	80034f8 <RCCEx_PLL2_Config>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c72:	e003      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	75fb      	strb	r3, [r7, #23]
      break;
 8002c78:	e000      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c82:	4b87      	ldr	r3, [pc, #540]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	f023 0203 	bic.w	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4984      	ldr	r1, [pc, #528]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c94:	e001      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8086 	beq.w	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ca8:	4b7e      	ldr	r3, [pc, #504]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a7d      	ldr	r2, [pc, #500]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cb4:	f7fe f874 	bl	8000da0 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cba:	e009      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbc:	f7fe f870 	bl	8000da0 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d902      	bls.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	75fb      	strb	r3, [r7, #23]
        break;
 8002cce:	e005      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cd0:	4b74      	ldr	r3, [pc, #464]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ef      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d166      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ce2:	4b6f      	ldr	r3, [pc, #444]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ce4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cec:	4053      	eors	r3, r2
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d013      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf6:	4b6a      	ldr	r3, [pc, #424]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d00:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4a66      	ldr	r2, [pc, #408]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d0c:	4b64      	ldr	r3, [pc, #400]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a63      	ldr	r2, [pc, #396]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d16:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d18:	4a61      	ldr	r2, [pc, #388]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d28:	d115      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fe f839 	bl	8000da0 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d30:	e00b      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fe f835 	bl	8000da0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d902      	bls.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	75fb      	strb	r3, [r7, #23]
            break;
 8002d48:	e005      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d4a:	4b55      	ldr	r3, [pc, #340]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0ed      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002d56:	7dfb      	ldrb	r3, [r7, #23]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d126      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d6a:	d10d      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002d6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d7a:	0919      	lsrs	r1, r3, #4
 8002d7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002d7e:	400b      	ands	r3, r1
 8002d80:	4947      	ldr	r1, [pc, #284]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	610b      	str	r3, [r1, #16]
 8002d86:	e005      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002d88:	4b45      	ldr	r3, [pc, #276]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	4a44      	ldr	r2, [pc, #272]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d92:	6113      	str	r3, [r2, #16]
 8002d94:	4b42      	ldr	r3, [pc, #264]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da2:	493f      	ldr	r1, [pc, #252]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	670b      	str	r3, [r1, #112]	; 0x70
 8002da8:	e004      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	75bb      	strb	r3, [r7, #22]
 8002dae:	e001      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8085 	beq.w	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc6:	2b28      	cmp	r3, #40	; 0x28
 8002dc8:	d866      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002ead 	.word	0x08002ead
 8002dd4:	08002e99 	.word	0x08002e99
 8002dd8:	08002e99 	.word	0x08002e99
 8002ddc:	08002e99 	.word	0x08002e99
 8002de0:	08002e99 	.word	0x08002e99
 8002de4:	08002e99 	.word	0x08002e99
 8002de8:	08002e99 	.word	0x08002e99
 8002dec:	08002e99 	.word	0x08002e99
 8002df0:	08002e75 	.word	0x08002e75
 8002df4:	08002e99 	.word	0x08002e99
 8002df8:	08002e99 	.word	0x08002e99
 8002dfc:	08002e99 	.word	0x08002e99
 8002e00:	08002e99 	.word	0x08002e99
 8002e04:	08002e99 	.word	0x08002e99
 8002e08:	08002e99 	.word	0x08002e99
 8002e0c:	08002e99 	.word	0x08002e99
 8002e10:	08002e87 	.word	0x08002e87
 8002e14:	08002e99 	.word	0x08002e99
 8002e18:	08002e99 	.word	0x08002e99
 8002e1c:	08002e99 	.word	0x08002e99
 8002e20:	08002e99 	.word	0x08002e99
 8002e24:	08002e99 	.word	0x08002e99
 8002e28:	08002e99 	.word	0x08002e99
 8002e2c:	08002e99 	.word	0x08002e99
 8002e30:	08002ead 	.word	0x08002ead
 8002e34:	08002e99 	.word	0x08002e99
 8002e38:	08002e99 	.word	0x08002e99
 8002e3c:	08002e99 	.word	0x08002e99
 8002e40:	08002e99 	.word	0x08002e99
 8002e44:	08002e99 	.word	0x08002e99
 8002e48:	08002e99 	.word	0x08002e99
 8002e4c:	08002e99 	.word	0x08002e99
 8002e50:	08002ead 	.word	0x08002ead
 8002e54:	08002e99 	.word	0x08002e99
 8002e58:	08002e99 	.word	0x08002e99
 8002e5c:	08002e99 	.word	0x08002e99
 8002e60:	08002e99 	.word	0x08002e99
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08002e99 	.word	0x08002e99
 8002e6c:	08002e99 	.word	0x08002e99
 8002e70:	08002ead 	.word	0x08002ead
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fb3c 	bl	80034f8 <RCCEx_PLL2_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e84:	e013      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3324      	adds	r3, #36	; 0x24
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fbe5 	bl	800365c <RCCEx_PLL3_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e96:	e00a      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e9c:	e007      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002e9e:	bf00      	nop
 8002ea0:	58024400 	.word	0x58024400
 8002ea4:	58024800 	.word	0x58024800
 8002ea8:	00ffffcf 	.word	0x00ffffcf
      break;
 8002eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002eb4:	4b96      	ldr	r3, [pc, #600]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec0:	4993      	ldr	r1, [pc, #588]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	654b      	str	r3, [r1, #84]	; 0x54
 8002ec6:	e001      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d038      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d821      	bhi.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002f2b 	.word	0x08002f2b
 8002eec:	08002f01 	.word	0x08002f01
 8002ef0:	08002f13 	.word	0x08002f13
 8002ef4:	08002f2b 	.word	0x08002f2b
 8002ef8:	08002f2b 	.word	0x08002f2b
 8002efc:	08002f2b 	.word	0x08002f2b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	2101      	movs	r1, #1
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 faf6 	bl	80034f8 <RCCEx_PLL2_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f10:	e00c      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3324      	adds	r3, #36	; 0x24
 8002f16:	2101      	movs	r1, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fb9f 	bl	800365c <RCCEx_PLL3_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f22:	e003      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	75fb      	strb	r3, [r7, #23]
      break;
 8002f28:	e000      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002f2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f32:	4b77      	ldr	r3, [pc, #476]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	f023 0207 	bic.w	r2, r3, #7
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3e:	4974      	ldr	r1, [pc, #464]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	654b      	str	r3, [r1, #84]	; 0x54
 8002f44:	e001      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d03a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	2b05      	cmp	r3, #5
 8002f5e:	d821      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002fab 	.word	0x08002fab
 8002f6c:	08002f81 	.word	0x08002f81
 8002f70:	08002f93 	.word	0x08002f93
 8002f74:	08002fab 	.word	0x08002fab
 8002f78:	08002fab 	.word	0x08002fab
 8002f7c:	08002fab 	.word	0x08002fab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	2101      	movs	r1, #1
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fab6 	bl	80034f8 <RCCEx_PLL2_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f90:	e00c      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3324      	adds	r3, #36	; 0x24
 8002f96:	2101      	movs	r1, #1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fb5f 	bl	800365c <RCCEx_PLL3_Config>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002fa2:	e003      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa8:	e000      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fb2:	4b57      	ldr	r3, [pc, #348]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	4953      	ldr	r1, [pc, #332]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	658b      	str	r3, [r1, #88]	; 0x58
 8002fc6:	e001      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d04b      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe2:	d02e      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe8:	d828      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fee:	d02a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff4:	d822      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002ff6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ffa:	d026      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002ffc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003000:	d81c      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003006:	d010      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800300c:	d816      	bhi.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800300e:	2b00      	cmp	r3, #0
 8003010:	d01d      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003016:	d111      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	2100      	movs	r1, #0
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fa6a 	bl	80034f8 <RCCEx_PLL2_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003028:	e012      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3324      	adds	r3, #36	; 0x24
 800302e:	2102      	movs	r1, #2
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fb13 	bl	800365c <RCCEx_PLL3_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800303a:	e009      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	75fb      	strb	r3, [r7, #23]
      break;
 8003040:	e006      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003042:	bf00      	nop
 8003044:	e004      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003046:	bf00      	nop
 8003048:	e002      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800304a:	bf00      	nop
 800304c:	e000      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800304e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10a      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003056:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003064:	492a      	ldr	r1, [pc, #168]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	654b      	str	r3, [r1, #84]	; 0x54
 800306a:	e001      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d04d      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003082:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003086:	d02e      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003088:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800308c:	d828      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800308e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003092:	d02a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003098:	d822      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800309a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800309e:	d026      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80030a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030a4:	d81c      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80030a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030aa:	d010      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80030ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b0:	d816      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01d      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ba:	d111      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3304      	adds	r3, #4
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fa18 	bl	80034f8 <RCCEx_PLL2_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80030cc:	e012      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3324      	adds	r3, #36	; 0x24
 80030d2:	2102      	movs	r1, #2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fac1 	bl	800365c <RCCEx_PLL3_Config>
 80030da:	4603      	mov	r3, r0
 80030dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80030de:	e009      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	75fb      	strb	r3, [r7, #23]
      break;
 80030e4:	e006      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80030e6:	bf00      	nop
 80030e8:	e004      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80030ea:	bf00      	nop
 80030ec:	e002      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80030ee:	bf00      	nop
 80030f0:	e000      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80030f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10c      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003108:	4901      	ldr	r1, [pc, #4]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	658b      	str	r3, [r1, #88]	; 0x58
 800310e:	e003      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003110:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003114:	7dfb      	ldrb	r3, [r7, #23]
 8003116:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003120:	2b00      	cmp	r3, #0
 8003122:	d04b      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800312a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800312e:	d02e      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003130:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003134:	d828      	bhi.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800313a:	d02a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800313c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003140:	d822      	bhi.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003142:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003146:	d026      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003148:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800314c:	d81c      	bhi.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800314e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003152:	d010      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003158:	d816      	bhi.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01d      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800315e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003162:	d111      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3304      	adds	r3, #4
 8003168:	2100      	movs	r1, #0
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f9c4 	bl	80034f8 <RCCEx_PLL2_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003174:	e012      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3324      	adds	r3, #36	; 0x24
 800317a:	2102      	movs	r1, #2
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fa6d 	bl	800365c <RCCEx_PLL3_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003186:	e009      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	75fb      	strb	r3, [r7, #23]
      break;
 800318c:	e006      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800318e:	bf00      	nop
 8003190:	e004      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003192:	bf00      	nop
 8003194:	e002      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003196:	bf00      	nop
 8003198:	e000      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800319a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80031a2:	4b9d      	ldr	r3, [pc, #628]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031b0:	4999      	ldr	r1, [pc, #612]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	658b      	str	r3, [r1, #88]	; 0x58
 80031b6:	e001      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d2:	d10a      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3324      	adds	r3, #36	; 0x24
 80031d8:	2102      	movs	r1, #2
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fa3e 	bl	800365c <RCCEx_PLL3_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80031ea:	4b8b      	ldr	r3, [pc, #556]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f8:	4987      	ldr	r1, [pc, #540]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003214:	d10a      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3324      	adds	r3, #36	; 0x24
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fa1d 	bl	800365c <RCCEx_PLL3_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800322c:	4b7a      	ldr	r3, [pc, #488]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003230:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323a:	4977      	ldr	r1, [pc, #476]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800323c:	4313      	orrs	r3, r2
 800323e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d034      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003256:	d01d      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800325c:	d817      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003266:	d009      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003268:	e011      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f000 f941 	bl	80034f8 <RCCEx_PLL2_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800327a:	e00c      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3324      	adds	r3, #36	; 0x24
 8003280:	2102      	movs	r1, #2
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f9ea 	bl	800365c <RCCEx_PLL3_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800328c:	e003      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	75fb      	strb	r3, [r7, #23]
      break;
 8003292:	e000      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800329c:	4b5e      	ldr	r3, [pc, #376]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032aa:	495b      	ldr	r1, [pc, #364]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	658b      	str	r3, [r1, #88]	; 0x58
 80032b0:	e001      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
 80032b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d033      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032cc:	d01c      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80032ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032d2:	d816      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80032d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d8:	d003      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80032da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032de:	d007      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80032e0:	e00f      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e2:	4b4d      	ldr	r3, [pc, #308]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	4a4c      	ldr	r2, [pc, #304]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80032ee:	e00c      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3324      	adds	r3, #36	; 0x24
 80032f4:	2101      	movs	r1, #1
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f9b0 	bl	800365c <RCCEx_PLL3_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003300:	e003      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	75fb      	strb	r3, [r7, #23]
      break;
 8003306:	e000      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003310:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800331e:	493e      	ldr	r1, [pc, #248]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003320:	4313      	orrs	r3, r2
 8003322:	654b      	str	r3, [r1, #84]	; 0x54
 8003324:	e001      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003326:	7dfb      	ldrb	r3, [r7, #23]
 8003328:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d029      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800333e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003342:	d007      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003344:	e00f      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003346:	4b34      	ldr	r3, [pc, #208]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	4a33      	ldr	r2, [pc, #204]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800334c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003350:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003352:	e00b      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	2102      	movs	r1, #2
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f8cc 	bl	80034f8 <RCCEx_PLL2_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003364:	e002      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
      break;
 800336a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003372:	4b29      	ldr	r3, [pc, #164]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003376:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	4926      	ldr	r1, [pc, #152]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003380:	4313      	orrs	r3, r2
 8003382:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003384:	e001      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3324      	adds	r3, #36	; 0x24
 800339a:	2102      	movs	r1, #2
 800339c:	4618      	mov	r0, r3
 800339e:	f000 f95d 	bl	800365c <RCCEx_PLL3_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d033      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033c0:	d017      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80033c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033c6:	d811      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033cc:	d013      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80033ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d2:	d80b      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d010      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80033d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033dc:	d106      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033de:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	4a0d      	ldr	r2, [pc, #52]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80033ea:	e007      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	75fb      	strb	r3, [r7, #23]
      break;
 80033f0:	e004      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80033f2:	bf00      	nop
 80033f4:	e002      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80033fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10c      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800340e:	4902      	ldr	r1, [pc, #8]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003410:	4313      	orrs	r3, r2
 8003412:	654b      	str	r3, [r1, #84]	; 0x54
 8003414:	e004      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003416:	bf00      	nop
 8003418:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800342c:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800342e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003430:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	492e      	ldr	r1, [pc, #184]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800343a:	4313      	orrs	r3, r2
 800343c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800344a:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003458:	4926      	ldr	r1, [pc, #152]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800345a:	4313      	orrs	r3, r2
 800345c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800346a:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800346c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003476:	491f      	ldr	r1, [pc, #124]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003478:	4313      	orrs	r3, r2
 800347a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00d      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003488:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800348e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003492:	6113      	str	r3, [r2, #16]
 8003494:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800349e:	4915      	ldr	r1, [pc, #84]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	da08      	bge.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b8:	490e      	ldr	r1, [pc, #56]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	4906      	ldr	r1, [pc, #24]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80034de:	7dbb      	ldrb	r3, [r7, #22]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e000      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	58024400 	.word	0x58024400

080034f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003506:	4b53      	ldr	r3, [pc, #332]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b03      	cmp	r3, #3
 8003510:	d101      	bne.n	8003516 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e099      	b.n	800364a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003516:	4b4f      	ldr	r3, [pc, #316]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a4e      	ldr	r2, [pc, #312]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 800351c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003522:	f7fd fc3d 	bl	8000da0 <HAL_GetTick>
 8003526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003528:	e008      	b.n	800353c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800352a:	f7fd fc39 	bl	8000da0 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e086      	b.n	800364a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800353c:	4b45      	ldr	r3, [pc, #276]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f0      	bne.n	800352a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003548:	4b42      	ldr	r3, [pc, #264]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	031b      	lsls	r3, r3, #12
 8003556:	493f      	ldr	r1, [pc, #252]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 8003558:	4313      	orrs	r3, r2
 800355a:	628b      	str	r3, [r1, #40]	; 0x28
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	3b01      	subs	r3, #1
 8003562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	3b01      	subs	r3, #1
 800356c:	025b      	lsls	r3, r3, #9
 800356e:	b29b      	uxth	r3, r3
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	3b01      	subs	r3, #1
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	3b01      	subs	r3, #1
 8003586:	061b      	lsls	r3, r3, #24
 8003588:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800358c:	4931      	ldr	r1, [pc, #196]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 800358e:	4313      	orrs	r3, r2
 8003590:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	492d      	ldr	r1, [pc, #180]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80035a4:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	f023 0220 	bic.w	r2, r3, #32
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	4928      	ldr	r1, [pc, #160]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80035b6:	4b27      	ldr	r3, [pc, #156]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	4a26      	ldr	r2, [pc, #152]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 80035bc:	f023 0310 	bic.w	r3, r3, #16
 80035c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 80035c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c6:	4b24      	ldr	r3, [pc, #144]	; (8003658 <RCCEx_PLL2_Config+0x160>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	69d2      	ldr	r2, [r2, #28]
 80035ce:	00d2      	lsls	r2, r2, #3
 80035d0:	4920      	ldr	r1, [pc, #128]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80035d6:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	4a1e      	ldr	r2, [pc, #120]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 80035dc:	f043 0310 	orr.w	r3, r3, #16
 80035e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	4a19      	ldr	r2, [pc, #100]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 80035ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035f4:	e00f      	b.n	8003616 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d106      	bne.n	800360a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80035fc:	4b15      	ldr	r3, [pc, #84]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	4a14      	ldr	r2, [pc, #80]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 8003602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003608:	e005      	b.n	8003616 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800360a:	4b12      	ldr	r3, [pc, #72]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	4a11      	ldr	r2, [pc, #68]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 8003610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003614:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003616:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 800361c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003622:	f7fd fbbd 	bl	8000da0 <HAL_GetTick>
 8003626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003628:	e008      	b.n	800363c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800362a:	f7fd fbb9 	bl	8000da0 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e006      	b.n	800364a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <RCCEx_PLL2_Config+0x15c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	58024400 	.word	0x58024400
 8003658:	ffff0007 	.word	0xffff0007

0800365c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800366a:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b03      	cmp	r3, #3
 8003674:	d101      	bne.n	800367a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e099      	b.n	80037ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800367a:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a4e      	ldr	r2, [pc, #312]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003686:	f7fd fb8b 	bl	8000da0 <HAL_GetTick>
 800368a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800368c:	e008      	b.n	80036a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800368e:	f7fd fb87 	bl	8000da0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e086      	b.n	80037ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036a0:	4b45      	ldr	r3, [pc, #276]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80036ac:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	051b      	lsls	r3, r3, #20
 80036ba:	493f      	ldr	r1, [pc, #252]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	628b      	str	r3, [r1, #40]	; 0x28
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	025b      	lsls	r3, r3, #9
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	3b01      	subs	r3, #1
 80036dc:	041b      	lsls	r3, r3, #16
 80036de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	061b      	lsls	r3, r3, #24
 80036ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036f0:	4931      	ldr	r1, [pc, #196]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80036f6:	4b30      	ldr	r3, [pc, #192]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	492d      	ldr	r1, [pc, #180]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003704:	4313      	orrs	r3, r2
 8003706:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	4928      	ldr	r1, [pc, #160]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800371a:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003724:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <RCCEx_PLL3_Config+0x160>)
 800372c:	4013      	ands	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	69d2      	ldr	r2, [r2, #28]
 8003732:	00d2      	lsls	r2, r2, #3
 8003734:	4920      	ldr	r1, [pc, #128]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003736:	4313      	orrs	r3, r2
 8003738:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800373a:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003744:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d106      	bne.n	800375a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003752:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003756:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003758:	e00f      	b.n	800377a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d106      	bne.n	800376e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003766:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800376a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800376c:	e005      	b.n	800377a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003778:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003786:	f7fd fb0b 	bl	8000da0 <HAL_GetTick>
 800378a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800378c:	e008      	b.n	80037a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800378e:	f7fd fb07 	bl	8000da0 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e006      	b.n	80037ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <RCCEx_PLL3_Config+0x15c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	58024400 	.word	0x58024400
 80037bc:	ffff0007 	.word	0xffff0007

080037c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037c0:	b084      	sub	sp, #16
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	f107 001c 	add.w	r0, r7, #28
 80037ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d120      	bne.n	800381a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <USB_CoreInit+0xd4>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d105      	bne.n	800380e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 faac 	bl	8003d6c <USB_CoreReset>
 8003814:	4603      	mov	r3, r0
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	e01a      	b.n	8003850 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 faa0 	bl	8003d6c <USB_CoreReset>
 800382c:	4603      	mov	r3, r0
 800382e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	639a      	str	r2, [r3, #56]	; 0x38
 8003842:	e005      	b.n	8003850 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	2b01      	cmp	r3, #1
 8003854:	d116      	bne.n	8003884 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	b29a      	uxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <USB_CoreInit+0xd8>)
 8003866:	4313      	orrs	r3, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f043 0206 	orr.w	r2, r3, #6
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f043 0220 	orr.w	r2, r3, #32
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003890:	b004      	add	sp, #16
 8003892:	4770      	bx	lr
 8003894:	ffbdffbf 	.word	0xffbdffbf
 8003898:	03ee0000 	.word	0x03ee0000

0800389c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f023 0201 	bic.w	r2, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d115      	bne.n	800390c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038ec:	2001      	movs	r0, #1
 80038ee:	f7fd fa63 	bl	8000db8 <HAL_Delay>
      ms++;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3301      	adds	r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fa29 	bl	8003d50 <USB_GetMode>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b01      	cmp	r3, #1
 8003902:	d01e      	beq.n	8003942 <USB_SetCurrentMode+0x84>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b31      	cmp	r3, #49	; 0x31
 8003908:	d9f0      	bls.n	80038ec <USB_SetCurrentMode+0x2e>
 800390a:	e01a      	b.n	8003942 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d115      	bne.n	800393e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800391e:	2001      	movs	r0, #1
 8003920:	f7fd fa4a 	bl	8000db8 <HAL_Delay>
      ms++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3301      	adds	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fa10 	bl	8003d50 <USB_GetMode>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <USB_SetCurrentMode+0x84>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b31      	cmp	r3, #49	; 0x31
 800393a:	d9f0      	bls.n	800391e <USB_SetCurrentMode+0x60>
 800393c:	e001      	b.n	8003942 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e005      	b.n	800394e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b32      	cmp	r3, #50	; 0x32
 8003946:	d101      	bne.n	800394c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003958:	b084      	sub	sp, #16
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	e009      	b.n	800398c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	3340      	adds	r3, #64	; 0x40
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	2200      	movs	r2, #0
 8003984:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	3301      	adds	r3, #1
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b0e      	cmp	r3, #14
 8003990:	d9f2      	bls.n	8003978 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d11c      	bne.n	80039d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a6:	f043 0302 	orr.w	r3, r3, #2
 80039aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e005      	b.n	80039de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039e4:	461a      	mov	r2, r3
 80039e6:	2300      	movs	r3, #0
 80039e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f0:	4619      	mov	r1, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f8:	461a      	mov	r2, r3
 80039fa:	680b      	ldr	r3, [r1, #0]
 80039fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d10c      	bne.n	8003a1e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d104      	bne.n	8003a14 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f965 	bl	8003cdc <USB_SetDevSpeed>
 8003a12:	e008      	b.n	8003a26 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a14:	2101      	movs	r1, #1
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f960 	bl	8003cdc <USB_SetDevSpeed>
 8003a1c:	e003      	b.n	8003a26 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a1e:	2103      	movs	r1, #3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f95b 	bl	8003cdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a26:	2110      	movs	r1, #16
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f8f3 	bl	8003c14 <USB_FlushTxFifo>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f91f 	bl	8003c7c <USB_FlushRxFifo>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2300      	movs	r3, #0
 8003a52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a66:	461a      	mov	r2, r3
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	e043      	b.n	8003afa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a88:	d118      	bne.n	8003abc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	e013      	b.n	8003ace <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e008      	b.n	8003ace <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2300      	movs	r3, #0
 8003acc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ada:	461a      	mov	r2, r3
 8003adc:	2300      	movs	r3, #0
 8003ade:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aec:	461a      	mov	r2, r3
 8003aee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003af2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	3301      	adds	r3, #1
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d3b7      	bcc.n	8003a72 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	e043      	b.n	8003b90 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b1e:	d118      	bne.n	8003b52 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b32:	461a      	mov	r2, r3
 8003b34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e013      	b.n	8003b64 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	e008      	b.n	8003b64 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2300      	movs	r3, #0
 8003b62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b70:	461a      	mov	r2, r3
 8003b72:	2300      	movs	r3, #0
 8003b74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b82:	461a      	mov	r2, r3
 8003b84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d3b7      	bcc.n	8003b08 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003baa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003bb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f043 0210 	orr.w	r2, r3, #16
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699a      	ldr	r2, [r3, #24]
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <USB_DevInit+0x2b4>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f043 0208 	orr.w	r2, r3, #8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <USB_DevInit+0x2b8>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c08:	b004      	add	sp, #16
 8003c0a:	4770      	bx	lr
 8003c0c:	803c3800 	.word	0x803c3800
 8003c10:	40000004 	.word	0x40000004

08003c14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3301      	adds	r3, #1
 8003c26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <USB_FlushTxFifo+0x64>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e01b      	b.n	8003c6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	daf2      	bge.n	8003c22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	019b      	lsls	r3, r3, #6
 8003c44:	f043 0220 	orr.w	r2, r3, #32
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <USB_FlushTxFifo+0x64>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e006      	b.n	8003c6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d0f0      	beq.n	8003c4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	00030d40 	.word	0x00030d40

08003c7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <USB_FlushRxFifo+0x5c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e018      	b.n	8003ccc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	daf2      	bge.n	8003c88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2210      	movs	r2, #16
 8003caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <USB_FlushRxFifo+0x5c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e006      	b.n	8003ccc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d0f0      	beq.n	8003cac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	00030d40 	.word	0x00030d40

08003cdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d28:	f023 0303 	bic.w	r3, r3, #3
 8003d2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d3c:	f043 0302 	orr.w	r3, r3, #2
 8003d40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <USB_CoreReset+0x64>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e01b      	b.n	8003dc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	daf2      	bge.n	8003d78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f043 0201 	orr.w	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3301      	adds	r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <USB_CoreReset+0x64>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e006      	b.n	8003dc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d0f0      	beq.n	8003da2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	00030d40 	.word	0x00030d40

08003dd4 <__libc_init_array>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4d0d      	ldr	r5, [pc, #52]	; (8003e0c <__libc_init_array+0x38>)
 8003dd8:	4c0d      	ldr	r4, [pc, #52]	; (8003e10 <__libc_init_array+0x3c>)
 8003dda:	1b64      	subs	r4, r4, r5
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	2600      	movs	r6, #0
 8003de0:	42a6      	cmp	r6, r4
 8003de2:	d109      	bne.n	8003df8 <__libc_init_array+0x24>
 8003de4:	4d0b      	ldr	r5, [pc, #44]	; (8003e14 <__libc_init_array+0x40>)
 8003de6:	4c0c      	ldr	r4, [pc, #48]	; (8003e18 <__libc_init_array+0x44>)
 8003de8:	f000 f820 	bl	8003e2c <_init>
 8003dec:	1b64      	subs	r4, r4, r5
 8003dee:	10a4      	asrs	r4, r4, #2
 8003df0:	2600      	movs	r6, #0
 8003df2:	42a6      	cmp	r6, r4
 8003df4:	d105      	bne.n	8003e02 <__libc_init_array+0x2e>
 8003df6:	bd70      	pop	{r4, r5, r6, pc}
 8003df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfc:	4798      	blx	r3
 8003dfe:	3601      	adds	r6, #1
 8003e00:	e7ee      	b.n	8003de0 <__libc_init_array+0xc>
 8003e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e06:	4798      	blx	r3
 8003e08:	3601      	adds	r6, #1
 8003e0a:	e7f2      	b.n	8003df2 <__libc_init_array+0x1e>
 8003e0c:	08003e54 	.word	0x08003e54
 8003e10:	08003e54 	.word	0x08003e54
 8003e14:	08003e54 	.word	0x08003e54
 8003e18:	08003e58 	.word	0x08003e58

08003e1c <memset>:
 8003e1c:	4402      	add	r2, r0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d100      	bne.n	8003e26 <memset+0xa>
 8003e24:	4770      	bx	lr
 8003e26:	f803 1b01 	strb.w	r1, [r3], #1
 8003e2a:	e7f9      	b.n	8003e20 <memset+0x4>

08003e2c <_init>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	bf00      	nop
 8003e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e32:	bc08      	pop	{r3}
 8003e34:	469e      	mov	lr, r3
 8003e36:	4770      	bx	lr

08003e38 <_fini>:
 8003e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3a:	bf00      	nop
 8003e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3e:	bc08      	pop	{r3}
 8003e40:	469e      	mov	lr, r3
 8003e42:	4770      	bx	lr
