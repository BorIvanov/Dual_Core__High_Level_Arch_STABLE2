
Dual_Core__High_Level_Arch_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b90  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e38  08003e38  00020022  2**0
                  CONTENTS
  4 .ARM          00000000  08003e38  08003e38  00020022  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e38  08003e38  00020022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e38  08003e38  00013e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  24000000  08003e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .SharedBuffer 0000000a  24000018  08003e58  00020018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000534  24000024  08003e62  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  24000558  08003e62  00020558  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00020022  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb4f  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000235b  00000000  00000000  0002eb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00030f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ae0  00000000  00000000  00031af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003956f  00000000  00000000  000325d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f8c6  00000000  00000000  0006bb47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001756a5  00000000  00000000  0007b40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001f0ab2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f88  00000000  00000000  001f0b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000024 	.word	0x24000024
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003e10 	.word	0x08003e10

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000028 	.word	0x24000028
 80002d4:	08003e10 	.word	0x08003e10

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <MX_GPIO_Init+0x6c>)
 800040c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_GPIO_Init+0x6c>)
 800041c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000420:	f003 0304 	and.w	r3, r3, #4
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_GPIO_Init+0x6c>)
 800042a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800042e:	4a10      	ldr	r2, [pc, #64]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <MX_GPIO_Init+0x6c>)
 800043a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800043e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044c:	4a08      	ldr	r2, [pc, #32]	; (8000470 <MX_GPIO_Init+0x6c>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]

}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	58024400 	.word	0x58024400

08000474 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800047a:	4b9e      	ldr	r3, [pc, #632]	; (80006f4 <main+0x280>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000482:	2b00      	cmp	r3, #0
 8000484:	d11b      	bne.n	80004be <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000486:	f3bf 8f4f 	dsb	sy
}
 800048a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800048c:	f3bf 8f6f 	isb	sy
}
 8000490:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000492:	4b98      	ldr	r3, [pc, #608]	; (80006f4 <main+0x280>)
 8000494:	2200      	movs	r2, #0
 8000496:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800049a:	f3bf 8f4f 	dsb	sy
}
 800049e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a0:	f3bf 8f6f 	isb	sy
}
 80004a4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004a6:	4b93      	ldr	r3, [pc, #588]	; (80006f4 <main+0x280>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a92      	ldr	r2, [pc, #584]	; (80006f4 <main+0x280>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004b2:	f3bf 8f4f 	dsb	sy
}
 80004b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004b8:	f3bf 8f6f 	isb	sy
}
 80004bc:	e000      	b.n	80004c0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004be:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004c0:	4b8c      	ldr	r3, [pc, #560]	; (80006f4 <main+0x280>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d138      	bne.n	800053e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004cc:	4b89      	ldr	r3, [pc, #548]	; (80006f4 <main+0x280>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004d4:	f3bf 8f4f 	dsb	sy
}
 80004d8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004da:	4b86      	ldr	r3, [pc, #536]	; (80006f4 <main+0x280>)
 80004dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004e0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	0b5b      	lsrs	r3, r3, #13
 80004e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004ea:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	08db      	lsrs	r3, r3, #3
 80004f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004f4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	015a      	lsls	r2, r3, #5
 80004fa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80004fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000504:	497b      	ldr	r1, [pc, #492]	; (80006f4 <main+0x280>)
 8000506:	4313      	orrs	r3, r2
 8000508:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1ef      	bne.n	80004f6 <main+0x82>
    } while(sets-- != 0U);
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	60fa      	str	r2, [r7, #12]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1e5      	bne.n	80004ec <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000520:	f3bf 8f4f 	dsb	sy
}
 8000524:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000526:	4b73      	ldr	r3, [pc, #460]	; (80006f4 <main+0x280>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a72      	ldr	r2, [pc, #456]	; (80006f4 <main+0x280>)
 800052c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000530:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000532:	f3bf 8f4f 	dsb	sy
}
 8000536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000538:	f3bf 8f6f 	isb	sy
}
 800053c:	e000      	b.n	8000540 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800053e:	bf00      	nop
	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000544:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000546:	bf00      	nop
 8000548:	4b6b      	ldr	r3, [pc, #428]	; (80006f8 <main+0x284>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <main+0xea>
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	617a      	str	r2, [r7, #20]
 800055a:	2b00      	cmp	r3, #0
 800055c:	dcf4      	bgt.n	8000548 <main+0xd4>
		;
	if (timeout < 0)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	2b00      	cmp	r3, #0
 8000562:	da01      	bge.n	8000568 <main+0xf4>
	{
		Error_Handler();
 8000564:	f000 f956 	bl	8000814 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000568:	f000 fb86 	bl	8000c78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800056c:	f000 f8cc 	bl	8000708 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000570:	4b61      	ldr	r3, [pc, #388]	; (80006f8 <main+0x284>)
 8000572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000576:	4a60      	ldr	r2, [pc, #384]	; (80006f8 <main+0x284>)
 8000578:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800057c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000580:	4b5d      	ldr	r3, [pc, #372]	; (80006f8 <main+0x284>)
 8000582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 fef4 	bl	800137c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f000 ff0a 	bl	80013b0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800059c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a0:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80005a2:	bf00      	nop
 80005a4:	4b54      	ldr	r3, [pc, #336]	; (80006f8 <main+0x284>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d104      	bne.n	80005ba <main+0x146>
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	1e5a      	subs	r2, r3, #1
 80005b4:	617a      	str	r2, [r7, #20]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	dcf4      	bgt.n	80005a4 <main+0x130>
		;
	if (timeout < 0)
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	da01      	bge.n	80005c4 <main+0x150>
	{
		Error_Handler();
 80005c0:	f000 f928 	bl	8000814 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c4:	f7ff ff1e 	bl	8000404 <MX_GPIO_Init>
	MX_USB_OTG_FS_PCD_Init();
 80005c8:	f000 f97a 	bl	80008c0 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */
	initTaskGenerator();
 80005cc:	f000 fa24 	bl	8000a18 <initTaskGenerator>
	{
		/* USER CODE END WHILE */

		// think of a way for the current_state to not be checked
		// after the callback for the HSEM has been executed
		if (been_HSEM == 0)
 80005d0:	4b4a      	ldr	r3, [pc, #296]	; (80006fc <main+0x288>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f083 0301 	eor.w	r3, r3, #1
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d004      	beq.n	80005e8 <main+0x174>
			current_state_CM7 = check_state();
 80005de:	f000 fb15 	bl	8000c0c <check_state>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a46      	ldr	r2, [pc, #280]	; (8000700 <main+0x28c>)
 80005e6:	6013      	str	r3, [r2, #0]

		if (current_state_CM7 != previous_state_CM7)
 80005e8:	4b45      	ldr	r3, [pc, #276]	; (8000700 <main+0x28c>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b45      	ldr	r3, [pc, #276]	; (8000704 <main+0x290>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d07b      	beq.n	80006ec <main+0x278>
		{
			switch (current_state_CM7)
 80005f4:	4b42      	ldr	r3, [pc, #264]	; (8000700 <main+0x28c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b07      	cmp	r3, #7
 80005fa:	d879      	bhi.n	80006f0 <main+0x27c>
 80005fc:	a201      	add	r2, pc, #4	; (adr r2, 8000604 <main+0x190>)
 80005fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000602:	bf00      	nop
 8000604:	08000625 	.word	0x08000625
 8000608:	08000651 	.word	0x08000651
 800060c:	0800066b 	.word	0x0800066b
 8000610:	08000685 	.word	0x08000685
 8000614:	0800069f 	.word	0x0800069f
 8000618:	080006b9 	.word	0x080006b9
 800061c:	080006d3 	.word	0x080006d3
 8000620:	0800063f 	.word	0x0800063f
			{
			case STATE_INIT:
				gameplay_loop_CM7(current_state_CM7);
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <main+0x28c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fa31 	bl	8000a90 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 800062e:	4b34      	ldr	r3, [pc, #208]	; (8000700 <main+0x28c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a34      	ldr	r2, [pc, #208]	; (8000704 <main+0x290>)
 8000634:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 8000636:	4b31      	ldr	r3, [pc, #196]	; (80006fc <main+0x288>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
				break;
 800063c:	e059      	b.n	80006f2 <main+0x27e>

			case STATE_START_GAME:
				gameplay_loop_CM7(current_state_CM7);
 800063e:	4b30      	ldr	r3, [pc, #192]	; (8000700 <main+0x28c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fa24 	bl	8000a90 <gameplay_loop_CM7>
				been_HSEM = 0; // not sure about placement
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <main+0x288>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
				break;
 800064e:	e050      	b.n	80006f2 <main+0x27e>

			case STATE_IDLE:
				gameplay_loop_CM7(current_state_CM7);
 8000650:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <main+0x28c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fa1b 	bl	8000a90 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <main+0x28c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a29      	ldr	r2, [pc, #164]	; (8000704 <main+0x290>)
 8000660:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <main+0x288>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
				break;
 8000668:	e043      	b.n	80006f2 <main+0x27e>

			case STATE_ROBOT_TURN:
				gameplay_loop_CM7(current_state_CM7);
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <main+0x28c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fa0e 	bl	8000a90 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <main+0x28c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a22      	ldr	r2, [pc, #136]	; (8000704 <main+0x290>)
 800067a:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <main+0x288>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
				break;
 8000682:	e036      	b.n	80006f2 <main+0x27e>

			case STATE_USER_TURN:
				gameplay_loop_CM7(current_state_CM7);
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <main+0x28c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fa01 	bl	8000a90 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <main+0x28c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <main+0x290>)
 8000694:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <main+0x288>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
				break;
 800069c:	e029      	b.n	80006f2 <main+0x27e>

			case STATE_CLEAN_UP:
				gameplay_loop_CM7(current_state_CM7);
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <main+0x28c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f9f4 	bl	8000a90 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <main+0x28c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a15      	ldr	r2, [pc, #84]	; (8000704 <main+0x290>)
 80006ae:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <main+0x288>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
				break;
 80006b6:	e01c      	b.n	80006f2 <main+0x27e>

			case STATE_CHEAT_DETECTED:
				gameplay_loop_CM7(current_state_CM7);
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <main+0x28c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f9e7 	bl	8000a90 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <main+0x28c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <main+0x290>)
 80006c8:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <main+0x288>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
				break;
 80006d0:	e00f      	b.n	80006f2 <main+0x27e>

			case STATE_GAME_END:
				gameplay_loop_CM7(current_state_CM7);
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <main+0x28c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f9da 	bl	8000a90 <gameplay_loop_CM7>
				previous_state_CM7 = current_state_CM7;
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <main+0x28c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <main+0x290>)
 80006e2:	6013      	str	r3, [r2, #0]
				been_HSEM = 0; // not sure about placement
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <main+0x288>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
				break;
 80006ea:	e002      	b.n	80006f2 <main+0x27e>

			default:
				break;
			}
		}
 80006ec:	bf00      	nop
 80006ee:	e76f      	b.n	80005d0 <main+0x15c>
				break;
 80006f0:	bf00      	nop
		if (been_HSEM == 0)
 80006f2:	e76d      	b.n	80005d0 <main+0x15c>
 80006f4:	e000ed00 	.word	0xe000ed00
 80006f8:	58024400 	.word	0x58024400
 80006fc:	24000550 	.word	0x24000550
 8000700:	2400054c 	.word	0x2400054c
 8000704:	24000008 	.word	0x24000008

08000708 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b09c      	sub	sp, #112	; 0x70
 800070c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	224c      	movs	r2, #76	; 0x4c
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fb72 	bl	8003e00 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2220      	movs	r2, #32
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fb6c 	bl	8003e00 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000728:	2004      	movs	r0, #4
 800072a:	f000 ffc9 	bl	80016c0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b35      	ldr	r3, [pc, #212]	; (8000808 <SystemClock_Config+0x100>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a34      	ldr	r2, [pc, #208]	; (8000808 <SystemClock_Config+0x100>)
 8000738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <SystemClock_Config+0x100>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b30      	ldr	r3, [pc, #192]	; (800080c <SystemClock_Config+0x104>)
 800074a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074c:	4a2f      	ldr	r2, [pc, #188]	; (800080c <SystemClock_Config+0x104>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000754:	4b2d      	ldr	r3, [pc, #180]	; (800080c <SystemClock_Config+0x104>)
 8000756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000760:	bf00      	nop
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <SystemClock_Config+0x100>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076e:	d1f8      	bne.n	8000762 <SystemClock_Config+0x5a>
	{
	}

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <SystemClock_Config+0x108>)
 8000772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000774:	f023 0303 	bic.w	r3, r3, #3
 8000778:	4a25      	ldr	r2, [pc, #148]	; (8000810 <SystemClock_Config+0x108>)
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8000780:	2321      	movs	r3, #33	; 0x21
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800078a:	2301      	movs	r3, #1
 800078c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	2302      	movs	r3, #2
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 120;
 800079a:	2378      	movs	r3, #120	; 0x78
 800079c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a2:	2304      	movs	r3, #4
 80007a4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007aa:	230c      	movs	r3, #12
 80007ac:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 ffea 	bl	8001794 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80007c6:	f000 f825 	bl	8000814 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007ca:	233f      	movs	r3, #63	; 0x3f
 80007cc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2303      	movs	r3, #3
 80007d0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007d6:	2308      	movs	r3, #8
 80007d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007da:	2340      	movs	r3, #64	; 0x40
 80007dc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007e8:	2340      	movs	r3, #64	; 0x40
 80007ea:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2104      	movs	r1, #4
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fbfd 	bl	8001ff0 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xf8>
	{
		Error_Handler();
 80007fc:	f000 f80a 	bl	8000814 <Error_Handler>
	}
}
 8000800:	bf00      	nop
 8000802:	3770      	adds	r7, #112	; 0x70
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	58024800 	.word	0x58024800
 800080c:	58000400 	.word	0x58000400
 8000810:	58024400 	.word	0x58024400

08000814 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <HAL_MspInit+0x3c>)
 8000828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800082c:	4a0b      	ldr	r2, [pc, #44]	; (800085c <HAL_MspInit+0x3c>)
 800082e:	f043 0302 	orr.w	r3, r3, #2
 8000832:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_MspInit+0x3c>)
 8000838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800083c:	f003 0302 	and.w	r3, r3, #2
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	207d      	movs	r0, #125	; 0x7d
 800084a:	f000 fbb2 	bl	8000fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800084e:	207d      	movs	r0, #125	; 0x7d
 8000850:	f000 fbc9 	bl	8000fe6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	58024400 	.word	0x58024400

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 fa56 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80008b8:	f000 fda0 	bl	80013fc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c6:	4a16      	ldr	r2, [pc, #88]	; (8000920 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008cc:	2209      	movs	r2, #9
 80008ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008de:	2202      	movs	r2, #2
 80008e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000902:	2200      	movs	r2, #0
 8000904:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000908:	f000 fd92 	bl	8001430 <HAL_PCD_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000912:	f7ff ff7f 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	24000040 	.word	0x24000040
 8000920:	40080000 	.word	0x40080000

08000924 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b0b8      	sub	sp, #224	; 0xe0
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	22bc      	movs	r2, #188	; 0xbc
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fa5b 	bl	8003e00 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a2f      	ldr	r2, [pc, #188]	; (8000a0c <HAL_PCD_MspInit+0xe8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d156      	bne.n	8000a02 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000954:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000958:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800095a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800095e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fe72 	bl	8002650 <HAL_RCCEx_PeriphCLKConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000972:	f7ff ff4f 	bl	8000814 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000976:	f000 fefd 	bl	8001774 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <HAL_PCD_MspInit+0xec>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <HAL_PCD_MspInit+0xec>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <HAL_PCD_MspInit+0xec>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000998:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800099c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80009b2:	230a      	movs	r3, #10
 80009b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009bc:	4619      	mov	r1, r3
 80009be:	4815      	ldr	r0, [pc, #84]	; (8000a14 <HAL_PCD_MspInit+0xf0>)
 80009c0:	f000 fb2c 	bl	800101c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009dc:	4619      	mov	r1, r3
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <HAL_PCD_MspInit+0xf0>)
 80009e0:	f000 fb1c 	bl	800101c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_PCD_MspInit+0xec>)
 80009e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <HAL_PCD_MspInit+0xec>)
 80009ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_PCD_MspInit+0xec>)
 80009f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000a02:	bf00      	nop
 8000a04:	37e0      	adds	r7, #224	; 0xe0
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40080000 	.word	0x40080000
 8000a10:	58024400 	.word	0x58024400
 8000a14:	58020000 	.word	0x58020000

08000a18 <initTaskGenerator>:
void initTaskGenerator()
/* initTaskGenerator: Initializes the states and variables.
 *
 * Activates HSEM notifications to look out for from CM4. Initializes the shared buffer.
 */
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0


	HAL_HSEM_ActivateNotification(HSEM_CM4_DONE_MASK);
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f000 fcdb 	bl	80013d8 <HAL_HSEM_ActivateNotification>
	HAL_HSEM_ActivateNotification(HSEM_CHEAT_MASK);
 8000a22:	2080      	movs	r0, #128	; 0x80
 8000a24:	f000 fcd8 	bl	80013d8 <HAL_HSEM_ActivateNotification>
	memset(SharedBuf, 0, 10); // init shared buffer
 8000a28:	220a      	movs	r2, #10
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <initTaskGenerator+0x20>)
 8000a2e:	f003 f9e7 	bl	8003e00 <memset>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	24000018 	.word	0x24000018

08000a3c <HAL_HSEM_FreeCallback>:
 * This function takes care of HSEM's released from Cortex-M4.
 *
 * This progresses the FSM of Cortex-M7,
 * whenever a HSEM is released from CM4
 */
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	been_HSEM = 1;
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_HSEM_FreeCallback+0x4c>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
	if (SemMask == HSEM_CM4_DONE_MASK) 	// Is CM4 done with it's current task ?
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d117      	bne.n	8000a80 <HAL_HSEM_FreeCallback+0x44>
	{
		// chose next state based on current state
		if (current_state_CM7 == STATE_INIT)
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_HSEM_FreeCallback+0x50>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <HAL_HSEM_FreeCallback+0x22>
		{
			current_state_CM7 = STATE_START_GAME;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_HSEM_FreeCallback+0x50>)
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	601a      	str	r2, [r3, #0]
		}
		if (current_state_CM7 == STATE_ROBOT_TURN)
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_HSEM_FreeCallback+0x50>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d102      	bne.n	8000a6c <HAL_HSEM_FreeCallback+0x30>
		{
			current_state_CM7 = STATE_IDLE;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_HSEM_FreeCallback+0x50>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
		}
		if (current_state_CM7 == STATE_USER_TURN)
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <HAL_HSEM_FreeCallback+0x50>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d102      	bne.n	8000a7a <HAL_HSEM_FreeCallback+0x3e>
		{
			current_state_CM7 = STATE_IDLE;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_HSEM_FreeCallback+0x50>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
		}
		HAL_HSEM_ActivateNotification(HSEM_CM4_DONE_MASK); // reactivate notification
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f000 fcac 	bl	80013d8 <HAL_HSEM_ActivateNotification>
	}
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	24000550 	.word	0x24000550
 8000a8c:	2400054c 	.word	0x2400054c

08000a90 <gameplay_loop_CM7>:

void gameplay_loop_CM7(int state)
// gameplay_loop_CM7: The main logic of Cortex-M4
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	switch (state)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b07      	cmp	r3, #7
 8000a9c:	d82a      	bhi.n	8000af4 <gameplay_loop_CM7+0x64>
 8000a9e:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <gameplay_loop_CM7+0x14>)
 8000aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa4:	08000ac5 	.word	0x08000ac5
 8000aa8:	08000acb 	.word	0x08000acb
 8000aac:	08000ad1 	.word	0x08000ad1
 8000ab0:	08000ad7 	.word	0x08000ad7
 8000ab4:	08000add 	.word	0x08000add
 8000ab8:	08000ae3 	.word	0x08000ae3
 8000abc:	08000ae9 	.word	0x08000ae9
 8000ac0:	08000aef 	.word	0x08000aef
	{
	case STATE_INIT:
		exec_state_init();
 8000ac4:	f000 f81c 	bl	8000b00 <exec_state_init>
		break;
 8000ac8:	e015      	b.n	8000af6 <gameplay_loop_CM7+0x66>

	case STATE_IDLE:
		exec_state_idle();
 8000aca:	f000 f825 	bl	8000b18 <exec_state_idle>
		break;
 8000ace:	e012      	b.n	8000af6 <gameplay_loop_CM7+0x66>

	case STATE_ROBOT_TURN:
		exec_state_robot_move();
 8000ad0:	f000 f856 	bl	8000b80 <exec_state_robot_move>
		break;
 8000ad4:	e00f      	b.n	8000af6 <gameplay_loop_CM7+0x66>

	case STATE_USER_TURN:
		exec_state_user_move();
 8000ad6:	f000 f85e 	bl	8000b96 <exec_state_user_move>
		break;
 8000ada:	e00c      	b.n	8000af6 <gameplay_loop_CM7+0x66>

	case STATE_CLEAN_UP:
		exec_state_clean_up();
 8000adc:	f000 f866 	bl	8000bac <exec_state_clean_up>
		break;
 8000ae0:	e009      	b.n	8000af6 <gameplay_loop_CM7+0x66>

	case STATE_CHEAT_DETECTED:
		exec_state_cheat_detected();
 8000ae2:	f000 f86e 	bl	8000bc2 <exec_state_cheat_detected>
		break;
 8000ae6:	e006      	b.n	8000af6 <gameplay_loop_CM7+0x66>

	case STATE_GAME_END:
		exec_state_game_end();
 8000ae8:	f000 f872 	bl	8000bd0 <exec_state_game_end>
		break;
 8000aec:	e003      	b.n	8000af6 <gameplay_loop_CM7+0x66>

	case STATE_START_GAME:
		exec_state_start_game();
 8000aee:	f000 f87b 	bl	8000be8 <exec_state_start_game>
		break;
 8000af2:	e000      	b.n	8000af6 <gameplay_loop_CM7+0x66>

	default: // im not sure what needs to happen here yet
		// maybe my default should be idle, maybe not
		break;
 8000af4:	bf00      	nop
	}
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop

08000b00 <exec_state_init>:

void exec_state_init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	HSEM_TAKE_RELEASE(HSEM_CM4_INIT); // tell CM4 to initialise
 8000b04:	2002      	movs	r0, #2
 8000b06:	f000 fc39 	bl	800137c <HAL_HSEM_FastTake>
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f000 fc4f 	bl	80013b0 <HAL_HSEM_Release>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <exec_state_idle>:

void exec_state_idle(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
	if (whos_turn == USER)
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <exec_state_idle+0x60>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d012      	beq.n	8000b4a <exec_state_idle+0x32>
	{
		whos_turn = !whos_turn; // robot's turn
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <exec_state_idle+0x60>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	bf14      	ite	ne
 8000b2c:	2301      	movne	r3, #1
 8000b2e:	2300      	moveq	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f083 0301 	eor.w	r3, r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <exec_state_idle+0x60>)
 8000b40:	701a      	strb	r2, [r3, #0]
		current_state_CM7 = STATE_ROBOT_TURN; // go to robot move state
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <exec_state_idle+0x64>)
 8000b44:	2202      	movs	r2, #2
 8000b46:	601a      	str	r2, [r3, #0]
	else // robot's turn
	{
		whos_turn = !whos_turn;	// user's turn
		current_state_CM7 = STATE_USER_TURN; // go to user move state
	}
}
 8000b48:	e011      	b.n	8000b6e <exec_state_idle+0x56>
		whos_turn = !whos_turn;	// user's turn
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <exec_state_idle+0x60>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bf14      	ite	ne
 8000b52:	2301      	movne	r3, #1
 8000b54:	2300      	moveq	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f083 0301 	eor.w	r3, r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <exec_state_idle+0x60>)
 8000b66:	701a      	strb	r2, [r3, #0]
		current_state_CM7 = STATE_USER_TURN; // go to user move state
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <exec_state_idle+0x64>)
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	601a      	str	r2, [r3, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	2400000c 	.word	0x2400000c
 8000b7c:	2400054c 	.word	0x2400054c

08000b80 <exec_state_robot_move>:

void exec_state_robot_move(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	HSEM_TAKE_RELEASE(HSEM_ROBOT_TURN); // tell CM4 to execute robot move
 8000b84:	2004      	movs	r0, #4
 8000b86:	f000 fbf9 	bl	800137c <HAL_HSEM_FastTake>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2004      	movs	r0, #4
 8000b8e:	f000 fc0f 	bl	80013b0 <HAL_HSEM_Release>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <exec_state_user_move>:

void exec_state_user_move(void)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	af00      	add	r7, sp, #0
	HSEM_TAKE_RELEASE(HSEM_USER_TURN);// tell CM4 that it can validate user inputs
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f000 fbee 	bl	800137c <HAL_HSEM_FastTake>
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	f000 fc04 	bl	80013b0 <HAL_HSEM_Release>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <exec_state_clean_up>:

void exec_state_clean_up(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	HSEM_TAKE_RELEASE(HSEM_CLEAN_UP);	// tell CM4 to prepare for next game
 8000bb0:	2006      	movs	r0, #6
 8000bb2:	f000 fbe3 	bl	800137c <HAL_HSEM_FastTake>
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2006      	movs	r0, #6
 8000bba:	f000 fbf9 	bl	80013b0 <HAL_HSEM_Release>
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <exec_state_cheat_detected>:

void exec_state_cheat_detected(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <exec_state_game_end>:

void exec_state_game_end(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	HSEM_TAKE_RELEASE(HSEM_GAME_END);// tell CM4 to display user msgs for game end
 8000bd4:	2005      	movs	r0, #5
 8000bd6:	f000 fbd1 	bl	800137c <HAL_HSEM_FastTake>
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2005      	movs	r0, #5
 8000bde:	f000 fbe7 	bl	80013b0 <HAL_HSEM_Release>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <exec_state_start_game>:

void exec_state_start_game(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
	// TODO: prepare vars.c and others ?

	current_state_CM7 = STATE_USER_TURN; // go to next state
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <exec_state_start_game+0x1c>)
 8000bee:	2203      	movs	r2, #3
 8000bf0:	601a      	str	r2, [r3, #0]
	whos_turn = USER;
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <exec_state_start_game+0x20>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2400054c 	.word	0x2400054c
 8000c08:	2400000c 	.word	0x2400000c

08000c0c <check_state>:
 STATE_CLEAN_UP						4
 STATE_CHEAT_DETECTED				5
 STATE_GAME_END						6
 */
int check_state(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
	return current_state_CM7;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <check_state+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2400054c 	.word	0x2400054c

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c28:	f7ff fb56 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	; (8000c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f003 f8b1 	bl	8003db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc0d 	bl	8000474 <main>
  bx  lr
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c5c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c64:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8000c68:	08003e40 	.word	0x08003e40
  ldr r2, =_sbss
 8000c6c:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8000c70:	24000558 	.word	0x24000558

08000c74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC3_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7e:	2003      	movs	r0, #3
 8000c80:	f000 f98c 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c84:	f001 fb6a 	bl	800235c <HAL_RCC_GetSysClockFreq>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_Init+0x68>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	f003 030f 	and.w	r3, r3, #15
 8000c94:	4913      	ldr	r1, [pc, #76]	; (8000ce4 <HAL_Init+0x6c>)
 8000c96:	5ccb      	ldrb	r3, [r1, r3]
 8000c98:	f003 031f 	and.w	r3, r3, #31
 8000c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_Init+0x68>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_Init+0x6c>)
 8000cac:	5cd3      	ldrb	r3, [r2, r3]
 8000cae:	f003 031f 	and.w	r3, r3, #31
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_Init+0x70>)
 8000cba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cbc:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <HAL_Init+0x74>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f814 	bl	8000cf0 <HAL_InitTick>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e002      	b.n	8000cd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd2:	f7ff fda5 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	08003e28 	.word	0x08003e28
 8000ce8:	24000004 	.word	0x24000004
 8000cec:	24000000 	.word	0x24000000

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_InitTick+0x60>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e021      	b.n	8000d48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_InitTick+0x64>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_InitTick+0x60>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f971 	bl	8001002 <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f93b 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <HAL_InitTick+0x68>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	24000014 	.word	0x24000014
 8000d54:	24000000 	.word	0x24000000
 8000d58:	24000010 	.word	0x24000010

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	24000014 	.word	0x24000014
 8000d80:	24000554 	.word	0x24000554

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	24000554 	.word	0x24000554

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff ffee 	bl	8000d84 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d005      	beq.n	8000dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_Delay+0x44>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc2:	bf00      	nop
 8000dc4:	f7ff ffde 	bl	8000d84 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8f7      	bhi.n	8000dc4 <HAL_Delay+0x28>
  {
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	24000014 	.word	0x24000014

08000de4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetREVID+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	0c1b      	lsrs	r3, r3, #16
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	5c001000 	.word	0x5c001000

08000dfc <__NVIC_SetPriorityGrouping>:
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <__NVIC_SetPriorityGrouping+0x40>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x40>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	05fa0000 	.word	0x05fa0000

08000e44 <__NVIC_GetPriorityGrouping>:
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff29 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff40 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff90 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5f 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff33 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa4 	bl	8000f58 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800102a:	4b89      	ldr	r3, [pc, #548]	; (8001250 <HAL_GPIO_Init+0x234>)
 800102c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800102e:	e194      	b.n	800135a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2101      	movs	r1, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8186 	beq.w	8001354 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d005      	beq.n	8001060 <HAL_GPIO_Init+0x44>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d130      	bne.n	80010c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001096:	2201      	movs	r2, #1
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	f003 0201 	and.w	r2, r3, #1
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d017      	beq.n	80010fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d123      	bne.n	8001152 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	69b9      	ldr	r1, [r7, #24]
 800114e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0203 	and.w	r2, r3, #3
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 80e0 	beq.w	8001354 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <HAL_GPIO_Init+0x238>)
 8001196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800119a:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <HAL_GPIO_Init+0x238>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <HAL_GPIO_Init+0x238>)
 80011a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b2:	4a29      	ldr	r2, [pc, #164]	; (8001258 <HAL_GPIO_Init+0x23c>)
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a20      	ldr	r2, [pc, #128]	; (800125c <HAL_GPIO_Init+0x240>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d052      	beq.n	8001284 <HAL_GPIO_Init+0x268>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <HAL_GPIO_Init+0x244>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d031      	beq.n	800124a <HAL_GPIO_Init+0x22e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <HAL_GPIO_Init+0x248>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d02b      	beq.n	8001246 <HAL_GPIO_Init+0x22a>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_GPIO_Init+0x24c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d025      	beq.n	8001242 <HAL_GPIO_Init+0x226>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_GPIO_Init+0x250>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d01f      	beq.n	800123e <HAL_GPIO_Init+0x222>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_GPIO_Init+0x254>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d019      	beq.n	800123a <HAL_GPIO_Init+0x21e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <HAL_GPIO_Init+0x258>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_Init+0x21a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a19      	ldr	r2, [pc, #100]	; (8001278 <HAL_GPIO_Init+0x25c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00d      	beq.n	8001232 <HAL_GPIO_Init+0x216>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <HAL_GPIO_Init+0x260>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d007      	beq.n	800122e <HAL_GPIO_Init+0x212>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_GPIO_Init+0x264>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <HAL_GPIO_Init+0x20e>
 8001226:	2309      	movs	r3, #9
 8001228:	e02d      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 800122a:	230a      	movs	r3, #10
 800122c:	e02b      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 800122e:	2308      	movs	r3, #8
 8001230:	e029      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 8001232:	2307      	movs	r3, #7
 8001234:	e027      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 8001236:	2306      	movs	r3, #6
 8001238:	e025      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 800123a:	2305      	movs	r3, #5
 800123c:	e023      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 800123e:	2304      	movs	r3, #4
 8001240:	e021      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 8001242:	2303      	movs	r3, #3
 8001244:	e01f      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 8001246:	2302      	movs	r3, #2
 8001248:	e01d      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 800124a:	2301      	movs	r3, #1
 800124c:	e01b      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 800124e:	bf00      	nop
 8001250:	58000080 	.word	0x58000080
 8001254:	58024400 	.word	0x58024400
 8001258:	58000400 	.word	0x58000400
 800125c:	58020000 	.word	0x58020000
 8001260:	58020400 	.word	0x58020400
 8001264:	58020800 	.word	0x58020800
 8001268:	58020c00 	.word	0x58020c00
 800126c:	58021000 	.word	0x58021000
 8001270:	58021400 	.word	0x58021400
 8001274:	58021800 	.word	0x58021800
 8001278:	58021c00 	.word	0x58021c00
 800127c:	58022000 	.word	0x58022000
 8001280:	58022400 	.word	0x58022400
 8001284:	2300      	movs	r3, #0
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	f002 0203 	and.w	r2, r2, #3
 800128c:	0092      	lsls	r2, r2, #2
 800128e:	4093      	lsls	r3, r2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001296:	4938      	ldr	r1, [pc, #224]	; (8001378 <HAL_GPIO_Init+0x35c>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	3301      	adds	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	f47f ae63 	bne.w	8001030 <HAL_GPIO_Init+0x14>
  }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	3724      	adds	r7, #36	; 0x24
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	58000400 	.word	0x58000400

0800137c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001384:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <HAL_HSEM_FastTake+0x2c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3320      	adds	r3, #32
 800138a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_HSEM_FastTake+0x30>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d101      	bne.n	8001398 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	e000      	b.n	800139a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	58026400 	.word	0x58026400
 80013ac:	80000300 	.word	0x80000300

080013b0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80013ba:	4906      	ldr	r1, [pc, #24]	; (80013d4 <HAL_HSEM_Release+0x24>)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	58026400 	.word	0x58026400

080013d8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_HSEM_ActivateNotification+0x20>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4904      	ldr	r1, [pc, #16]	; (80013f8 <HAL_HSEM_ActivateNotification+0x20>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
#endif
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	58026500 	.word	0x58026500

080013fc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_HSEM_IRQHandler+0x30>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_HSEM_IRQHandler+0x30>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	43db      	mvns	r3, r3
 8001410:	4906      	ldr	r1, [pc, #24]	; (800142c <HAL_HSEM_IRQHandler+0x30>)
 8001412:	4013      	ands	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <HAL_HSEM_IRQHandler+0x30>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fb0d 	bl	8000a3c <HAL_HSEM_FreeCallback>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	58026500 	.word	0x58026500

08001430 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	b08f      	sub	sp, #60	; 0x3c
 8001434:	af0a      	add	r7, sp, #40	; 0x28
 8001436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e116      	b.n	8001670 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fa61 	bl	8000924 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f002 f9fd 	bl	8003880 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	687e      	ldr	r6, [r7, #4]
 800148e:	466d      	mov	r5, sp
 8001490:	f106 0410 	add.w	r4, r6, #16
 8001494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80014a4:	1d33      	adds	r3, r6, #4
 80014a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a8:	6838      	ldr	r0, [r7, #0]
 80014aa:	f002 f97b 	bl	80037a4 <USB_CoreInit>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0d7      	b.n	8001670 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 f9eb 	bl	80038a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e04a      	b.n	8001568 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	333d      	adds	r3, #61	; 0x3d
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	333c      	adds	r3, #60	; 0x3c
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	b298      	uxth	r0, r3
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	3344      	adds	r3, #68	; 0x44
 800150e:	4602      	mov	r2, r0
 8001510:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3340      	adds	r3, #64	; 0x40
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	3348      	adds	r3, #72	; 0x48
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	334c      	adds	r3, #76	; 0x4c
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	3354      	adds	r3, #84	; 0x54
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	3301      	adds	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3af      	bcc.n	80014d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	e044      	b.n	8001602 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	3301      	adds	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	d3b5      	bcc.n	8001578 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	687e      	ldr	r6, [r7, #4]
 8001614:	466d      	mov	r5, sp
 8001616:	f106 0410 	add.w	r4, r6, #16
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001626:	e885 0003 	stmia.w	r5, {r0, r1}
 800162a:	1d33      	adds	r3, r6, #4
 800162c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f002 f984 	bl	800393c <USB_DevInit>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2202      	movs	r2, #2
 800163e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e014      	b.n	8001670 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	2b01      	cmp	r3, #1
 800165c:	d102      	bne.n	8001664 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f80a 	bl	8001678 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fb42 	bl	8003cf2 <USB_DevDisconnect>

  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001678 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_PCDEx_ActivateLPM+0x44>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	10000003 	.word	0x10000003

080016c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016c8:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d00a      	beq.n	80016ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016d4:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d001      	beq.n	80016e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e040      	b.n	8001768 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e03e      	b.n	8001768 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80016f2:	491f      	ldr	r1, [pc, #124]	; (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016fa:	f7ff fb43 	bl	8000d84 <HAL_GetTick>
 80016fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001700:	e009      	b.n	8001716 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001702:	f7ff fb3f 	bl	8000d84 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001710:	d901      	bls.n	8001716 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e028      	b.n	8001768 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800171e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001722:	d1ee      	bne.n	8001702 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b1e      	cmp	r3, #30
 8001728:	d008      	beq.n	800173c <HAL_PWREx_ConfigSupply+0x7c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b2e      	cmp	r3, #46	; 0x2e
 800172e:	d005      	beq.n	800173c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b1d      	cmp	r3, #29
 8001734:	d002      	beq.n	800173c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b2d      	cmp	r3, #45	; 0x2d
 800173a:	d114      	bne.n	8001766 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800173c:	f7ff fb22 	bl	8000d84 <HAL_GetTick>
 8001740:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001742:	e009      	b.n	8001758 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001744:	f7ff fb1e 	bl	8000d84 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001752:	d901      	bls.n	8001758 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e007      	b.n	8001768 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_PWREx_ConfigSupply+0xb0>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001764:	d1ee      	bne.n	8001744 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	58024800 	.word	0x58024800

08001774 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800177e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	58024800 	.word	0x58024800

08001794 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f000 bc1d 	b.w	8001fe2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 8087 	beq.w	80018c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b6:	4b99      	ldr	r3, [pc, #612]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017c0:	4b96      	ldr	r3, [pc, #600]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	2b10      	cmp	r3, #16
 80017ca:	d007      	beq.n	80017dc <HAL_RCC_OscConfig+0x48>
 80017cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ce:	2b18      	cmp	r3, #24
 80017d0:	d110      	bne.n	80017f4 <HAL_RCC_OscConfig+0x60>
 80017d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d10b      	bne.n	80017f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	4b8f      	ldr	r3, [pc, #572]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d06c      	beq.n	80018c2 <HAL_RCC_OscConfig+0x12e>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d168      	bne.n	80018c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e3f6      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fc:	d106      	bne.n	800180c <HAL_RCC_OscConfig+0x78>
 80017fe:	4b87      	ldr	r3, [pc, #540]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a86      	ldr	r2, [pc, #536]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e02e      	b.n	800186a <HAL_RCC_OscConfig+0xd6>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10c      	bne.n	800182e <HAL_RCC_OscConfig+0x9a>
 8001814:	4b81      	ldr	r3, [pc, #516]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a80      	ldr	r2, [pc, #512]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800181a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b7e      	ldr	r3, [pc, #504]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a7d      	ldr	r2, [pc, #500]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	e01d      	b.n	800186a <HAL_RCC_OscConfig+0xd6>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001836:	d10c      	bne.n	8001852 <HAL_RCC_OscConfig+0xbe>
 8001838:	4b78      	ldr	r3, [pc, #480]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a77      	ldr	r2, [pc, #476]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800183e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a74      	ldr	r2, [pc, #464]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e00b      	b.n	800186a <HAL_RCC_OscConfig+0xd6>
 8001852:	4b72      	ldr	r3, [pc, #456]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a71      	ldr	r2, [pc, #452]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d013      	beq.n	800189a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001872:	f7ff fa87 	bl	8000d84 <HAL_GetTick>
 8001876:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187a:	f7ff fa83 	bl	8000d84 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b64      	cmp	r3, #100	; 0x64
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e3aa      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800188c:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0xe6>
 8001898:	e014      	b.n	80018c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff fa73 	bl	8000d84 <HAL_GetTick>
 800189e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a2:	f7ff fa6f 	bl	8000d84 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b64      	cmp	r3, #100	; 0x64
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e396      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f0      	bne.n	80018a2 <HAL_RCC_OscConfig+0x10e>
 80018c0:	e000      	b.n	80018c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80cb 	beq.w	8001a68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d2:	4b52      	ldr	r3, [pc, #328]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018dc:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d007      	beq.n	80018f8 <HAL_RCC_OscConfig+0x164>
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	2b18      	cmp	r3, #24
 80018ec:	d156      	bne.n	800199c <HAL_RCC_OscConfig+0x208>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d151      	bne.n	800199c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f8:	4b48      	ldr	r3, [pc, #288]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_OscConfig+0x17c>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e368      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001910:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f023 0219 	bic.w	r2, r3, #25
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	493f      	ldr	r1, [pc, #252]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001922:	f7ff fa2f 	bl	8000d84 <HAL_GetTick>
 8001926:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff fa2b 	bl	8000d84 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e352      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	f7ff fa4c 	bl	8000de4 <HAL_GetREVID>
 800194c:	4603      	mov	r3, r0
 800194e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001952:	4293      	cmp	r3, r2
 8001954:	d817      	bhi.n	8001986 <HAL_RCC_OscConfig+0x1f2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	2b40      	cmp	r3, #64	; 0x40
 800195c:	d108      	bne.n	8001970 <HAL_RCC_OscConfig+0x1dc>
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001966:	4a2d      	ldr	r2, [pc, #180]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196e:	e07b      	b.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	031b      	lsls	r3, r3, #12
 800197e:	4927      	ldr	r1, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001984:	e070      	b.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	061b      	lsls	r3, r3, #24
 8001994:	4921      	ldr	r1, [pc, #132]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199a:	e065      	b.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d048      	beq.n	8001a36 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 0219 	bic.w	r2, r3, #25
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	491a      	ldr	r1, [pc, #104]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff f9e5 	bl	8000d84 <HAL_GetTick>
 80019ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff f9e1 	bl	8000d84 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e308      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	f7ff fa02 	bl	8000de4 <HAL_GetREVID>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d81a      	bhi.n	8001a20 <HAL_RCC_OscConfig+0x28c>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b40      	cmp	r3, #64	; 0x40
 80019f0:	d108      	bne.n	8001a04 <HAL_RCC_OscConfig+0x270>
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	6053      	str	r3, [r2, #4]
 8001a02:	e031      	b.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	031b      	lsls	r3, r3, #12
 8001a12:	4902      	ldr	r1, [pc, #8]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
 8001a18:	e026      	b.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
 8001a1a:	bf00      	nop
 8001a1c:	58024400 	.word	0x58024400
 8001a20:	4b9a      	ldr	r3, [pc, #616]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	4997      	ldr	r1, [pc, #604]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
 8001a34:	e018      	b.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a36:	4b95      	ldr	r3, [pc, #596]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a94      	ldr	r2, [pc, #592]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f99f 	bl	8000d84 <HAL_GetTick>
 8001a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff f99b 	bl	8000d84 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e2c2      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a5c:	4b8b      	ldr	r3, [pc, #556]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80a9 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a76:	4b85      	ldr	r3, [pc, #532]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a80:	4b82      	ldr	r3, [pc, #520]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d007      	beq.n	8001a9c <HAL_RCC_OscConfig+0x308>
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b18      	cmp	r3, #24
 8001a90:	d13a      	bne.n	8001b08 <HAL_RCC_OscConfig+0x374>
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d135      	bne.n	8001b08 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a9c:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x320>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b80      	cmp	r3, #128	; 0x80
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e296      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ab4:	f7ff f996 	bl	8000de4 <HAL_GetREVID>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f241 0203 	movw	r2, #4099	; 0x1003
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d817      	bhi.n	8001af2 <HAL_RCC_OscConfig+0x35e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d108      	bne.n	8001adc <HAL_RCC_OscConfig+0x348>
 8001aca:	4b70      	ldr	r3, [pc, #448]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ad2:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ad8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ada:	e075      	b.n	8001bc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001adc:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	069b      	lsls	r3, r3, #26
 8001aea:	4968      	ldr	r1, [pc, #416]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001af0:	e06a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001af2:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	061b      	lsls	r3, r3, #24
 8001b00:	4962      	ldr	r1, [pc, #392]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b06:	e05f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d042      	beq.n	8001b96 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b10:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a5d      	ldr	r2, [pc, #372]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f932 	bl	8000d84 <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b24:	f7ff f92e 	bl	8000d84 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e255      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b36:	4b55      	ldr	r3, [pc, #340]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b42:	f7ff f94f 	bl	8000de4 <HAL_GetREVID>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d817      	bhi.n	8001b80 <HAL_RCC_OscConfig+0x3ec>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d108      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3d6>
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b60:	4a4a      	ldr	r2, [pc, #296]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b66:	6053      	str	r3, [r2, #4]
 8001b68:	e02e      	b.n	8001bc8 <HAL_RCC_OscConfig+0x434>
 8001b6a:	4b48      	ldr	r3, [pc, #288]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	069b      	lsls	r3, r3, #26
 8001b78:	4944      	ldr	r1, [pc, #272]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]
 8001b7e:	e023      	b.n	8001bc8 <HAL_RCC_OscConfig+0x434>
 8001b80:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	493f      	ldr	r1, [pc, #252]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
 8001b94:	e018      	b.n	8001bc8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a3c      	ldr	r2, [pc, #240]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f8ef 	bl	8000d84 <HAL_GetTick>
 8001ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001baa:	f7ff f8eb 	bl	8000d84 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e212      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bbc:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d036      	beq.n	8001c42 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d019      	beq.n	8001c10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be0:	4a2a      	ldr	r2, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be8:	f7ff f8cc 	bl	8000d84 <HAL_GetTick>
 8001bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7ff f8c8 	bl	8000d84 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1ef      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x45c>
 8001c0e:	e018      	b.n	8001c42 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c14:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7ff f8b2 	bl	8000d84 <HAL_GetTick>
 8001c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff f8ae 	bl	8000d84 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1d5      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d039      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c62:	f7ff f88f 	bl	8000d84 <HAL_GetTick>
 8001c66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c6a:	f7ff f88b 	bl	8000d84 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1b2      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x4d6>
 8001c88:	e01b      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
 8001c8a:	bf00      	nop
 8001c8c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c90:	4b9b      	ldr	r3, [pc, #620]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a9a      	ldr	r2, [pc, #616]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f872 	bl	8000d84 <HAL_GetTick>
 8001ca0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ca4:	f7ff f86e 	bl	8000d84 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e195      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cb6:	4b92      	ldr	r3, [pc, #584]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8081 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <HAL_RCC_OscConfig+0x770>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a8b      	ldr	r2, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x770>)
 8001cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff f852 	bl	8000d84 <HAL_GetTick>
 8001ce0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ce4:	f7ff f84e 	bl	8000d84 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e175      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cf6:	4b83      	ldr	r3, [pc, #524]	; (8001f04 <HAL_RCC_OscConfig+0x770>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_OscConfig+0x584>
 8001d0a:	4b7d      	ldr	r3, [pc, #500]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	4a7c      	ldr	r2, [pc, #496]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6713      	str	r3, [r2, #112]	; 0x70
 8001d16:	e02d      	b.n	8001d74 <HAL_RCC_OscConfig+0x5e0>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10c      	bne.n	8001d3a <HAL_RCC_OscConfig+0x5a6>
 8001d20:	4b77      	ldr	r3, [pc, #476]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a76      	ldr	r2, [pc, #472]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2c:	4b74      	ldr	r3, [pc, #464]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	4a73      	ldr	r2, [pc, #460]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d32:	f023 0304 	bic.w	r3, r3, #4
 8001d36:	6713      	str	r3, [r2, #112]	; 0x70
 8001d38:	e01c      	b.n	8001d74 <HAL_RCC_OscConfig+0x5e0>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b05      	cmp	r3, #5
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c8>
 8001d42:	4b6f      	ldr	r3, [pc, #444]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d46:	4a6e      	ldr	r2, [pc, #440]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4e:	4b6c      	ldr	r3, [pc, #432]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	4a6b      	ldr	r2, [pc, #428]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0x5e0>
 8001d5c:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	4a67      	ldr	r2, [pc, #412]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70
 8001d68:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a64      	ldr	r2, [pc, #400]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d6e:	f023 0304 	bic.w	r3, r3, #4
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d015      	beq.n	8001da8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f7ff f802 	bl	8000d84 <HAL_GetTick>
 8001d80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d82:	e00a      	b.n	8001d9a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d84:	f7fe fffe 	bl	8000d84 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e123      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d9a:	4b59      	ldr	r3, [pc, #356]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0ee      	beq.n	8001d84 <HAL_RCC_OscConfig+0x5f0>
 8001da6:	e014      	b.n	8001dd2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7fe ffec 	bl	8000d84 <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7fe ffe8 	bl	8000d84 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e10d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ee      	bne.n	8001db0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8102 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ddc:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001de4:	2b18      	cmp	r3, #24
 8001de6:	f000 80bd 	beq.w	8001f64 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	f040 809e 	bne.w	8001f30 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a41      	ldr	r2, [pc, #260]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7fe ffc0 	bl	8000d84 <HAL_GetTick>
 8001e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e08:	f7fe ffbc 	bl	8000d84 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e0e3      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e2a:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <HAL_RCC_OscConfig+0x774>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	4931      	ldr	r1, [pc, #196]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	628b      	str	r3, [r1, #40]	; 0x28
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	3b01      	subs	r3, #1
 8001e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	025b      	lsls	r3, r3, #9
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	061b      	lsls	r3, r3, #24
 8001e6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e70:	4923      	ldr	r1, [pc, #140]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e76:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	4a21      	ldr	r2, [pc, #132]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e8e:	00d2      	lsls	r2, r2, #3
 8001e90:	491b      	ldr	r1, [pc, #108]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	f023 020c 	bic.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4917      	ldr	r1, [pc, #92]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	f023 0202 	bic.w	r2, r3, #2
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	4912      	ldr	r1, [pc, #72]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7fe ff45 	bl	8000d84 <HAL_GetTick>
 8001efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001efc:	e011      	b.n	8001f22 <HAL_RCC_OscConfig+0x78e>
 8001efe:	bf00      	nop
 8001f00:	58024400 	.word	0x58024400
 8001f04:	58024800 	.word	0x58024800
 8001f08:	fffffc0c 	.word	0xfffffc0c
 8001f0c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f10:	f7fe ff38 	bl	8000d84 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e05f      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f22:	4b32      	ldr	r3, [pc, #200]	; (8001fec <HAL_RCC_OscConfig+0x858>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x77c>
 8001f2e:	e057      	b.n	8001fe0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <HAL_RCC_OscConfig+0x858>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a2d      	ldr	r2, [pc, #180]	; (8001fec <HAL_RCC_OscConfig+0x858>)
 8001f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7fe ff22 	bl	8000d84 <HAL_GetTick>
 8001f40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe ff1e 	bl	8000d84 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e045      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f56:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_RCC_OscConfig+0x858>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x7b0>
 8001f62:	e03d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_RCC_OscConfig+0x858>)
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_RCC_OscConfig+0x858>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d031      	beq.n	8001fdc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f003 0203 	and.w	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d12a      	bne.n	8001fdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d122      	bne.n	8001fdc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d11a      	bne.n	8001fdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	0a5b      	lsrs	r3, r3, #9
 8001faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d111      	bne.n	8001fdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	0c1b      	lsrs	r3, r3, #16
 8001fbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	0e1b      	lsrs	r3, r3, #24
 8001fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3730      	adds	r7, #48	; 0x30
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	58024400 	.word	0x58024400

08001ff0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e19c      	b.n	800233e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b8a      	ldr	r3, [pc, #552]	; (8002230 <HAL_RCC_ClockConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d910      	bls.n	8002034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b87      	ldr	r3, [pc, #540]	; (8002230 <HAL_RCC_ClockConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 020f 	bic.w	r2, r3, #15
 800201a:	4985      	ldr	r1, [pc, #532]	; (8002230 <HAL_RCC_ClockConfig+0x240>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b83      	ldr	r3, [pc, #524]	; (8002230 <HAL_RCC_ClockConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e184      	b.n	800233e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d010      	beq.n	8002062 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800204c:	429a      	cmp	r2, r3
 800204e:	d908      	bls.n	8002062 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002050:	4b78      	ldr	r3, [pc, #480]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	4975      	ldr	r1, [pc, #468]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 800205e:	4313      	orrs	r3, r2
 8002060:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d010      	beq.n	8002090 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	4b70      	ldr	r3, [pc, #448]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800207a:	429a      	cmp	r2, r3
 800207c:	d908      	bls.n	8002090 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800207e:	4b6d      	ldr	r3, [pc, #436]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	496a      	ldr	r1, [pc, #424]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 800208c:	4313      	orrs	r3, r2
 800208e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699a      	ldr	r2, [r3, #24]
 80020a0:	4b64      	ldr	r3, [pc, #400]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d908      	bls.n	80020be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020ac:	4b61      	ldr	r3, [pc, #388]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	495e      	ldr	r1, [pc, #376]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d010      	beq.n	80020ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d908      	bls.n	80020ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020da:	4b56      	ldr	r3, [pc, #344]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4953      	ldr	r1, [pc, #332]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	4b4d      	ldr	r3, [pc, #308]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	429a      	cmp	r2, r3
 8002106:	d908      	bls.n	800211a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f023 020f 	bic.w	r2, r3, #15
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4947      	ldr	r1, [pc, #284]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 8002116:	4313      	orrs	r3, r2
 8002118:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d055      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002126:	4b43      	ldr	r3, [pc, #268]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	4940      	ldr	r1, [pc, #256]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 8002134:	4313      	orrs	r3, r2
 8002136:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d107      	bne.n	8002150 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002140:	4b3c      	ldr	r3, [pc, #240]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d121      	bne.n	8002190 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0f6      	b.n	800233e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d107      	bne.n	8002168 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002158:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d115      	bne.n	8002190 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0ea      	b.n	800233e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d107      	bne.n	8002180 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002170:	4b30      	ldr	r3, [pc, #192]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0de      	b.n	800233e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002180:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0d6      	b.n	800233e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	f023 0207 	bic.w	r2, r3, #7
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4925      	ldr	r1, [pc, #148]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a2:	f7fe fdef 	bl	8000d84 <HAL_GetTick>
 80021a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021aa:	f7fe fdeb 	bl	8000d84 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0be      	b.n	800233e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c0:	4b1c      	ldr	r3, [pc, #112]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d1eb      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d010      	beq.n	8002200 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d208      	bcs.n	8002200 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f023 020f 	bic.w	r2, r3, #15
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	490e      	ldr	r1, [pc, #56]	; (8002234 <HAL_RCC_ClockConfig+0x244>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_ClockConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d214      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCC_ClockConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 020f 	bic.w	r2, r3, #15
 8002216:	4906      	ldr	r1, [pc, #24]	; (8002230 <HAL_RCC_ClockConfig+0x240>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <HAL_RCC_ClockConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e086      	b.n	800233e <HAL_RCC_ClockConfig+0x34e>
 8002230:	52002000 	.word	0x52002000
 8002234:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d010      	beq.n	8002266 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002250:	429a      	cmp	r2, r3
 8002252:	d208      	bcs.n	8002266 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002254:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	4939      	ldr	r1, [pc, #228]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 8002262:	4313      	orrs	r3, r2
 8002264:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d010      	beq.n	8002294 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	4b34      	ldr	r3, [pc, #208]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800227e:	429a      	cmp	r2, r3
 8002280:	d208      	bcs.n	8002294 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	492e      	ldr	r1, [pc, #184]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 8002290:	4313      	orrs	r3, r2
 8002292:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	d010      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d208      	bcs.n	80022c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022b0:	4b25      	ldr	r3, [pc, #148]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4922      	ldr	r1, [pc, #136]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d010      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69da      	ldr	r2, [r3, #28]
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022da:	429a      	cmp	r2, r3
 80022dc:	d208      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4917      	ldr	r1, [pc, #92]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022f0:	f000 f834 	bl	800235c <HAL_RCC_GetSysClockFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	4912      	ldr	r1, [pc, #72]	; (800234c <HAL_RCC_ClockConfig+0x35c>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
 800230c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <HAL_RCC_ClockConfig+0x358>)
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	4a0d      	ldr	r2, [pc, #52]	; (800234c <HAL_RCC_ClockConfig+0x35c>)
 8002318:	5cd3      	ldrb	r3, [r2, r3]
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_RCC_ClockConfig+0x360>)
 8002326:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <HAL_RCC_ClockConfig+0x364>)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_RCC_ClockConfig+0x368>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fcdc 	bl	8000cf0 <HAL_InitTick>
 8002338:	4603      	mov	r3, r0
 800233a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800233c:	7bfb      	ldrb	r3, [r7, #15]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	58024400 	.word	0x58024400
 800234c:	08003e28 	.word	0x08003e28
 8002350:	24000004 	.word	0x24000004
 8002354:	24000000 	.word	0x24000000
 8002358:	24000010 	.word	0x24000010

0800235c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002362:	4bb3      	ldr	r3, [pc, #716]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800236a:	2b18      	cmp	r3, #24
 800236c:	f200 8155 	bhi.w	800261a <HAL_RCC_GetSysClockFreq+0x2be>
 8002370:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	080023dd 	.word	0x080023dd
 800237c:	0800261b 	.word	0x0800261b
 8002380:	0800261b 	.word	0x0800261b
 8002384:	0800261b 	.word	0x0800261b
 8002388:	0800261b 	.word	0x0800261b
 800238c:	0800261b 	.word	0x0800261b
 8002390:	0800261b 	.word	0x0800261b
 8002394:	0800261b 	.word	0x0800261b
 8002398:	08002403 	.word	0x08002403
 800239c:	0800261b 	.word	0x0800261b
 80023a0:	0800261b 	.word	0x0800261b
 80023a4:	0800261b 	.word	0x0800261b
 80023a8:	0800261b 	.word	0x0800261b
 80023ac:	0800261b 	.word	0x0800261b
 80023b0:	0800261b 	.word	0x0800261b
 80023b4:	0800261b 	.word	0x0800261b
 80023b8:	08002409 	.word	0x08002409
 80023bc:	0800261b 	.word	0x0800261b
 80023c0:	0800261b 	.word	0x0800261b
 80023c4:	0800261b 	.word	0x0800261b
 80023c8:	0800261b 	.word	0x0800261b
 80023cc:	0800261b 	.word	0x0800261b
 80023d0:	0800261b 	.word	0x0800261b
 80023d4:	0800261b 	.word	0x0800261b
 80023d8:	0800240f 	.word	0x0800240f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023dc:	4b94      	ldr	r3, [pc, #592]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d009      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023e8:	4b91      	ldr	r3, [pc, #580]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	08db      	lsrs	r3, r3, #3
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	4a90      	ldr	r2, [pc, #576]	; (8002634 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
 80023f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80023fa:	e111      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023fc:	4b8d      	ldr	r3, [pc, #564]	; (8002634 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023fe:	61bb      	str	r3, [r7, #24]
    break;
 8002400:	e10e      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002402:	4b8d      	ldr	r3, [pc, #564]	; (8002638 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002404:	61bb      	str	r3, [r7, #24]
    break;
 8002406:	e10b      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002408:	4b8c      	ldr	r3, [pc, #560]	; (800263c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800240a:	61bb      	str	r3, [r7, #24]
    break;
 800240c:	e108      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800240e:	4b88      	ldr	r3, [pc, #544]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002418:	4b85      	ldr	r3, [pc, #532]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002422:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002424:	4b82      	ldr	r3, [pc, #520]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800242e:	4b80      	ldr	r3, [pc, #512]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002432:	08db      	lsrs	r3, r3, #3
 8002434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002446:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80e1 	beq.w	8002614 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b02      	cmp	r3, #2
 8002456:	f000 8083 	beq.w	8002560 <HAL_RCC_GetSysClockFreq+0x204>
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b02      	cmp	r3, #2
 800245e:	f200 80a1 	bhi.w	80025a4 <HAL_RCC_GetSysClockFreq+0x248>
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x114>
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d056      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x1c0>
 800246e:	e099      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002470:	4b6f      	ldr	r3, [pc, #444]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	d02d      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800247c:	4b6c      	ldr	r3, [pc, #432]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	08db      	lsrs	r3, r3, #3
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	4a6b      	ldr	r2, [pc, #428]	; (8002634 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
 800248c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a6:	4b62      	ldr	r3, [pc, #392]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ae:	ee07 3a90 	vmov	s15, r3
 80024b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002640 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80024d6:	e087      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002644 <HAL_RCC_GetSysClockFreq+0x2e8>
 80024e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ea:	4b51      	ldr	r3, [pc, #324]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80024fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002640 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800250a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800250e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800251a:	e065      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002526:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002648 <HAL_RCC_GetSysClockFreq+0x2ec>
 800252a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800252e:	4b40      	ldr	r3, [pc, #256]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800253e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002542:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002640 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800254a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800254e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800255e:	e043      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800256a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800264c <HAL_RCC_GetSysClockFreq+0x2f0>
 800256e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002582:	ed97 6a02 	vldr	s12, [r7, #8]
 8002586:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002640 <HAL_RCC_GetSysClockFreq+0x2e4>
 800258a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800258e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025a2:	e021      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002648 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002640 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	0a5b      	lsrs	r3, r3, #9
 80025ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f2:	3301      	adds	r3, #1
 80025f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	ee07 3a90 	vmov	s15, r3
 80025fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002600:	edd7 6a07 	vldr	s13, [r7, #28]
 8002604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260c:	ee17 3a90 	vmov	r3, s15
 8002610:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002612:	e005      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	61bb      	str	r3, [r7, #24]
    break;
 8002618:	e002      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800261c:	61bb      	str	r3, [r7, #24]
    break;
 800261e:	bf00      	nop
  }

  return sysclockfreq;
 8002620:	69bb      	ldr	r3, [r7, #24]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	; 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	58024400 	.word	0x58024400
 8002634:	03d09000 	.word	0x03d09000
 8002638:	003d0900 	.word	0x003d0900
 800263c:	007a1200 	.word	0x007a1200
 8002640:	46000000 	.word	0x46000000
 8002644:	4c742400 	.word	0x4c742400
 8002648:	4a742400 	.word	0x4a742400
 800264c:	4af42400 	.word	0x4af42400

08002650 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002658:	2300      	movs	r3, #0
 800265a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800265c:	2300      	movs	r3, #0
 800265e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d03f      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002674:	d02a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002676:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800267a:	d824      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800267c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002680:	d018      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002686:	d81e      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800268c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002690:	d007      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002692:	e018      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002694:	4ba3      	ldr	r3, [pc, #652]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	4aa2      	ldr	r2, [pc, #648]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800269a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026a0:	e015      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2102      	movs	r1, #2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 ff17 	bl	80034dc <RCCEx_PLL2_Config>
 80026ae:	4603      	mov	r3, r0
 80026b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026b2:	e00c      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3324      	adds	r3, #36	; 0x24
 80026b8:	2102      	movs	r1, #2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 ffc0 	bl	8003640 <RCCEx_PLL3_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026c4:	e003      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
      break;
 80026ca:	e000      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80026d4:	4b93      	ldr	r3, [pc, #588]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026e0:	4990      	ldr	r1, [pc, #576]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	650b      	str	r3, [r1, #80]	; 0x50
 80026e6:	e001      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d03d      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d826      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002700:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002706:	bf00      	nop
 8002708:	0800271d 	.word	0x0800271d
 800270c:	0800272b 	.word	0x0800272b
 8002710:	0800273d 	.word	0x0800273d
 8002714:	08002755 	.word	0x08002755
 8002718:	08002755 	.word	0x08002755
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271c:	4b81      	ldr	r3, [pc, #516]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	4a80      	ldr	r2, [pc, #512]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002726:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002728:	e015      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fed3 	bl	80034dc <RCCEx_PLL2_Config>
 8002736:	4603      	mov	r3, r0
 8002738:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800273a:	e00c      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3324      	adds	r3, #36	; 0x24
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f000 ff7c 	bl	8003640 <RCCEx_PLL3_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800274c:	e003      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	75fb      	strb	r3, [r7, #23]
      break;
 8002752:	e000      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002756:	7dfb      	ldrb	r3, [r7, #23]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800275c:	4b71      	ldr	r3, [pc, #452]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800275e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002760:	f023 0207 	bic.w	r2, r3, #7
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	496e      	ldr	r1, [pc, #440]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	650b      	str	r3, [r1, #80]	; 0x50
 800276e:	e001      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002770:	7dfb      	ldrb	r3, [r7, #23]
 8002772:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277c:	2b00      	cmp	r3, #0
 800277e:	d042      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002788:	d02b      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800278a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278e:	d825      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002790:	2bc0      	cmp	r3, #192	; 0xc0
 8002792:	d028      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002794:	2bc0      	cmp	r3, #192	; 0xc0
 8002796:	d821      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002798:	2b80      	cmp	r3, #128	; 0x80
 800279a:	d016      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800279c:	2b80      	cmp	r3, #128	; 0x80
 800279e:	d81d      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80027a4:	2b40      	cmp	r3, #64	; 0x40
 80027a6:	d007      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80027a8:	e018      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027aa:	4b5e      	ldr	r3, [pc, #376]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	4a5d      	ldr	r2, [pc, #372]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027b6:	e017      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3304      	adds	r3, #4
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fe8c 	bl	80034dc <RCCEx_PLL2_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027c8:	e00e      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3324      	adds	r3, #36	; 0x24
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 ff35 	bl	8003640 <RCCEx_PLL3_Config>
 80027d6:	4603      	mov	r3, r0
 80027d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027da:	e005      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	75fb      	strb	r3, [r7, #23]
      break;
 80027e0:	e002      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80027e2:	bf00      	nop
 80027e4:	e000      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80027e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80027ee:	4b4d      	ldr	r3, [pc, #308]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fa:	494a      	ldr	r1, [pc, #296]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	650b      	str	r3, [r1, #80]	; 0x50
 8002800:	e001      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280e:	2b00      	cmp	r3, #0
 8002810:	d049      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002818:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800281c:	d030      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800281e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002822:	d82a      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002824:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002828:	d02c      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800282a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800282e:	d824      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002834:	d018      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800283a:	d81e      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002844:	d007      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002846:	e018      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002848:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	4a35      	ldr	r2, [pc, #212]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800284e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002854:	e017      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fe3d 	bl	80034dc <RCCEx_PLL2_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002866:	e00e      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3324      	adds	r3, #36	; 0x24
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fee6 	bl	8003640 <RCCEx_PLL3_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002878:	e005      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
      break;
 800287e:	e002      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002880:	bf00      	nop
 8002882:	e000      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002884:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800289a:	4922      	ldr	r1, [pc, #136]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	658b      	str	r3, [r1, #88]	; 0x58
 80028a0:	e001      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d04b      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028bc:	d030      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80028be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028c2:	d82a      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028c8:	d02e      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80028ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028ce:	d824      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028d4:	d018      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80028d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028da:	d81e      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80028e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e4:	d007      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80028e6:	e018      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028f4:	e019      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 fded 	bl	80034dc <RCCEx_PLL2_Config>
 8002902:	4603      	mov	r3, r0
 8002904:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002906:	e010      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3324      	adds	r3, #36	; 0x24
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fe96 	bl	8003640 <RCCEx_PLL3_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002918:	e007      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	75fb      	strb	r3, [r7, #23]
      break;
 800291e:	e004      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002920:	bf00      	nop
 8002922:	e002      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002924:	58024400 	.word	0x58024400
      break;
 8002928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800292a:	7dfb      	ldrb	r3, [r7, #23]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002930:	4b99      	ldr	r3, [pc, #612]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800293e:	4996      	ldr	r1, [pc, #600]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002940:	4313      	orrs	r3, r2
 8002942:	658b      	str	r3, [r1, #88]	; 0x58
 8002944:	e001      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d032      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295a:	2b30      	cmp	r3, #48	; 0x30
 800295c:	d01c      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800295e:	2b30      	cmp	r3, #48	; 0x30
 8002960:	d817      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002962:	2b20      	cmp	r3, #32
 8002964:	d00c      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002966:	2b20      	cmp	r3, #32
 8002968:	d813      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d016      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800296e:	2b10      	cmp	r3, #16
 8002970:	d10f      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002972:	4b89      	ldr	r3, [pc, #548]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	4a88      	ldr	r2, [pc, #544]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800297e:	e00e      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3304      	adds	r3, #4
 8002984:	2102      	movs	r1, #2
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fda8 	bl	80034dc <RCCEx_PLL2_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002990:	e005      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
      break;
 8002996:	e002      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002998:	bf00      	nop
 800299a:	e000      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800299c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029a4:	4b7c      	ldr	r3, [pc, #496]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b0:	4979      	ldr	r1, [pc, #484]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80029b6:	e001      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b8:	7dfb      	ldrb	r3, [r7, #23]
 80029ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d047      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029d0:	d030      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80029d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029d6:	d82a      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80029d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029dc:	d02c      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80029de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029e2:	d824      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80029e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e8:	d018      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80029ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ee:	d81e      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f8:	d007      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80029fa:	e018      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029fc:	4b66      	ldr	r3, [pc, #408]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	4a65      	ldr	r2, [pc, #404]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a08:	e017      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fd63 	bl	80034dc <RCCEx_PLL2_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a1a:	e00e      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3324      	adds	r3, #36	; 0x24
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fe0c 	bl	8003640 <RCCEx_PLL3_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a2c:	e005      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
      break;
 8002a32:	e002      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002a34:	bf00      	nop
 8002a36:	e000      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a40:	4b55      	ldr	r3, [pc, #340]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	4952      	ldr	r1, [pc, #328]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	650b      	str	r3, [r1, #80]	; 0x50
 8002a52:	e001      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d049      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d02e      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a72:	d828      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002a74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a78:	d02a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002a7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a7e:	d822      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002a80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a84:	d026      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002a86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a8a:	d81c      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a90:	d010      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a96:	d816      	bhi.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01d      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d111      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fd17 	bl	80034dc <RCCEx_PLL2_Config>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ab2:	e012      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3324      	adds	r3, #36	; 0x24
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fdc0 	bl	8003640 <RCCEx_PLL3_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ac4:	e009      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8002aca:	e006      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002acc:	bf00      	nop
 8002ace:	e004      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002ad0:	bf00      	nop
 8002ad2:	e002      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002ad4:	bf00      	nop
 8002ad6:	e000      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aec:	492a      	ldr	r1, [pc, #168]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	650b      	str	r3, [r1, #80]	; 0x50
 8002af2:	e001      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d04d      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b0e:	d02e      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b14:	d828      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1a:	d02a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b20:	d822      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b26:	d026      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002b28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b2c:	d81c      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b32:	d010      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b38:	d816      	bhi.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01d      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002b3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b42:	d111      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3304      	adds	r3, #4
 8002b48:	2101      	movs	r1, #1
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fcc6 	bl	80034dc <RCCEx_PLL2_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b54:	e012      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3324      	adds	r3, #36	; 0x24
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fd6f 	bl	8003640 <RCCEx_PLL3_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b66:	e009      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6c:	e006      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e004      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002b72:	bf00      	nop
 8002b74:	e002      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002b76:	bf00      	nop
 8002b78:	e000      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b90:	4901      	ldr	r1, [pc, #4]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	658b      	str	r3, [r1, #88]	; 0x58
 8002b96:	e003      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002b98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02f      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb4:	d00e      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bba:	d814      	bhi.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d015      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002bc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc4:	d10f      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc6:	4baf      	ldr	r3, [pc, #700]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	4aae      	ldr	r2, [pc, #696]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bd2:	e00c      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	2101      	movs	r1, #1
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fc7e 	bl	80034dc <RCCEx_PLL2_Config>
 8002be0:	4603      	mov	r3, r0
 8002be2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002be4:	e003      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bea:	e000      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bee:	7dfb      	ldrb	r3, [r7, #23]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bf4:	4ba3      	ldr	r3, [pc, #652]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c00:	49a0      	ldr	r1, [pc, #640]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	650b      	str	r3, [r1, #80]	; 0x50
 8002c06:	e001      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d032      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d81b      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002c20:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c26:	bf00      	nop
 8002c28:	08002c5f 	.word	0x08002c5f
 8002c2c:	08002c39 	.word	0x08002c39
 8002c30:	08002c47 	.word	0x08002c47
 8002c34:	08002c5f 	.word	0x08002c5f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c38:	4b92      	ldr	r3, [pc, #584]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	4a91      	ldr	r2, [pc, #580]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c44:	e00c      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fc45 	bl	80034dc <RCCEx_PLL2_Config>
 8002c52:	4603      	mov	r3, r0
 8002c54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c56:	e003      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c5c:	e000      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c66:	4b87      	ldr	r3, [pc, #540]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	f023 0203 	bic.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	4984      	ldr	r1, [pc, #528]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c78:	e001      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8086 	beq.w	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8c:	4b7e      	ldr	r3, [pc, #504]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a7d      	ldr	r2, [pc, #500]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c98:	f7fe f874 	bl	8000d84 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c9e:	e009      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca0:	f7fe f870 	bl	8000d84 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d902      	bls.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	75fb      	strb	r3, [r7, #23]
        break;
 8002cb2:	e005      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cb4:	4b74      	ldr	r3, [pc, #464]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0ef      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002cc0:	7dfb      	ldrb	r3, [r7, #23]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d166      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002cc6:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cd0:	4053      	eors	r3, r2
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d013      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cda:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ce4:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	4a66      	ldr	r2, [pc, #408]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf0:	4b64      	ldr	r3, [pc, #400]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	4a63      	ldr	r2, [pc, #396]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002cfc:	4a61      	ldr	r2, [pc, #388]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0c:	d115      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fe f839 	bl	8000d84 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d14:	e00b      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7fe f835 	bl	8000d84 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d902      	bls.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	75fb      	strb	r3, [r7, #23]
            break;
 8002d2c:	e005      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d2e:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0ed      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d126      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d4e:	d10d      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002d50:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d5e:	0919      	lsrs	r1, r3, #4
 8002d60:	4b4a      	ldr	r3, [pc, #296]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002d62:	400b      	ands	r3, r1
 8002d64:	4947      	ldr	r1, [pc, #284]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	610b      	str	r3, [r1, #16]
 8002d6a:	e005      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002d6c:	4b45      	ldr	r3, [pc, #276]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4a44      	ldr	r2, [pc, #272]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d76:	6113      	str	r3, [r2, #16]
 8002d78:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d86:	493f      	ldr	r1, [pc, #252]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	670b      	str	r3, [r1, #112]	; 0x70
 8002d8c:	e004      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	75bb      	strb	r3, [r7, #22]
 8002d92:	e001      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8085 	beq.w	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002daa:	2b28      	cmp	r3, #40	; 0x28
 8002dac:	d866      	bhi.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002e91 	.word	0x08002e91
 8002db8:	08002e7d 	.word	0x08002e7d
 8002dbc:	08002e7d 	.word	0x08002e7d
 8002dc0:	08002e7d 	.word	0x08002e7d
 8002dc4:	08002e7d 	.word	0x08002e7d
 8002dc8:	08002e7d 	.word	0x08002e7d
 8002dcc:	08002e7d 	.word	0x08002e7d
 8002dd0:	08002e7d 	.word	0x08002e7d
 8002dd4:	08002e59 	.word	0x08002e59
 8002dd8:	08002e7d 	.word	0x08002e7d
 8002ddc:	08002e7d 	.word	0x08002e7d
 8002de0:	08002e7d 	.word	0x08002e7d
 8002de4:	08002e7d 	.word	0x08002e7d
 8002de8:	08002e7d 	.word	0x08002e7d
 8002dec:	08002e7d 	.word	0x08002e7d
 8002df0:	08002e7d 	.word	0x08002e7d
 8002df4:	08002e6b 	.word	0x08002e6b
 8002df8:	08002e7d 	.word	0x08002e7d
 8002dfc:	08002e7d 	.word	0x08002e7d
 8002e00:	08002e7d 	.word	0x08002e7d
 8002e04:	08002e7d 	.word	0x08002e7d
 8002e08:	08002e7d 	.word	0x08002e7d
 8002e0c:	08002e7d 	.word	0x08002e7d
 8002e10:	08002e7d 	.word	0x08002e7d
 8002e14:	08002e91 	.word	0x08002e91
 8002e18:	08002e7d 	.word	0x08002e7d
 8002e1c:	08002e7d 	.word	0x08002e7d
 8002e20:	08002e7d 	.word	0x08002e7d
 8002e24:	08002e7d 	.word	0x08002e7d
 8002e28:	08002e7d 	.word	0x08002e7d
 8002e2c:	08002e7d 	.word	0x08002e7d
 8002e30:	08002e7d 	.word	0x08002e7d
 8002e34:	08002e91 	.word	0x08002e91
 8002e38:	08002e7d 	.word	0x08002e7d
 8002e3c:	08002e7d 	.word	0x08002e7d
 8002e40:	08002e7d 	.word	0x08002e7d
 8002e44:	08002e7d 	.word	0x08002e7d
 8002e48:	08002e7d 	.word	0x08002e7d
 8002e4c:	08002e7d 	.word	0x08002e7d
 8002e50:	08002e7d 	.word	0x08002e7d
 8002e54:	08002e91 	.word	0x08002e91
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fb3c 	bl	80034dc <RCCEx_PLL2_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e68:	e013      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3324      	adds	r3, #36	; 0x24
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fbe5 	bl	8003640 <RCCEx_PLL3_Config>
 8002e76:	4603      	mov	r3, r0
 8002e78:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e80:	e007      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002e82:	bf00      	nop
 8002e84:	58024400 	.word	0x58024400
 8002e88:	58024800 	.word	0x58024800
 8002e8c:	00ffffcf 	.word	0x00ffffcf
      break;
 8002e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e98:	4b96      	ldr	r3, [pc, #600]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea4:	4993      	ldr	r1, [pc, #588]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	654b      	str	r3, [r1, #84]	; 0x54
 8002eaa:	e001      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d038      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d821      	bhi.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002ec4:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002f0f 	.word	0x08002f0f
 8002ed0:	08002ee5 	.word	0x08002ee5
 8002ed4:	08002ef7 	.word	0x08002ef7
 8002ed8:	08002f0f 	.word	0x08002f0f
 8002edc:	08002f0f 	.word	0x08002f0f
 8002ee0:	08002f0f 	.word	0x08002f0f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	2101      	movs	r1, #1
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 faf6 	bl	80034dc <RCCEx_PLL2_Config>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ef4:	e00c      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3324      	adds	r3, #36	; 0x24
 8002efa:	2101      	movs	r1, #1
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fb9f 	bl	8003640 <RCCEx_PLL3_Config>
 8002f02:	4603      	mov	r3, r0
 8002f04:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f06:	e003      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f0c:	e000      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f16:	4b77      	ldr	r3, [pc, #476]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	f023 0207 	bic.w	r2, r3, #7
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f22:	4974      	ldr	r1, [pc, #464]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	654b      	str	r3, [r1, #84]	; 0x54
 8002f28:	e001      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d03a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	d821      	bhi.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002f44:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002f8f 	.word	0x08002f8f
 8002f50:	08002f65 	.word	0x08002f65
 8002f54:	08002f77 	.word	0x08002f77
 8002f58:	08002f8f 	.word	0x08002f8f
 8002f5c:	08002f8f 	.word	0x08002f8f
 8002f60:	08002f8f 	.word	0x08002f8f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3304      	adds	r3, #4
 8002f68:	2101      	movs	r1, #1
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fab6 	bl	80034dc <RCCEx_PLL2_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f74:	e00c      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3324      	adds	r3, #36	; 0x24
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fb5f 	bl	8003640 <RCCEx_PLL3_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f86:	e003      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f8c:	e000      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10a      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f96:	4b57      	ldr	r3, [pc, #348]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	4953      	ldr	r1, [pc, #332]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8002faa:	e001      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d04b      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc6:	d02e      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fcc:	d828      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd2:	d02a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd8:	d822      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002fda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fde:	d026      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002fe0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fe4:	d81c      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fea:	d010      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff0:	d816      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01d      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002ff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ffa:	d111      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fa6a 	bl	80034dc <RCCEx_PLL2_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800300c:	e012      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3324      	adds	r3, #36	; 0x24
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fb13 	bl	8003640 <RCCEx_PLL3_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800301e:	e009      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	75fb      	strb	r3, [r7, #23]
      break;
 8003024:	e006      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003026:	bf00      	nop
 8003028:	e004      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003034:	7dfb      	ldrb	r3, [r7, #23]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800303a:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003048:	492a      	ldr	r1, [pc, #168]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	654b      	str	r3, [r1, #84]	; 0x54
 800304e:	e001      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d04d      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003066:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800306a:	d02e      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800306c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003070:	d828      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003076:	d02a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307c:	d822      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800307e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003082:	d026      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003084:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003088:	d81c      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800308a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308e:	d010      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003094:	d816      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01d      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d111      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3304      	adds	r3, #4
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fa18 	bl	80034dc <RCCEx_PLL2_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80030b0:	e012      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3324      	adds	r3, #36	; 0x24
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fac1 	bl	8003640 <RCCEx_PLL3_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80030c2:	e009      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75fb      	strb	r3, [r7, #23]
      break;
 80030c8:	e006      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80030ca:	bf00      	nop
 80030cc:	e004      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80030ce:	bf00      	nop
 80030d0:	e002      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80030d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030ec:	4901      	ldr	r1, [pc, #4]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	658b      	str	r3, [r1, #88]	; 0x58
 80030f2:	e003      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80030f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003104:	2b00      	cmp	r3, #0
 8003106:	d04b      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800310e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003112:	d02e      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003114:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003118:	d828      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800311a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800311e:	d02a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003124:	d822      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003126:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800312a:	d026      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800312c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003130:	d81c      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003136:	d010      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003138:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800313c:	d816      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01d      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003146:	d111      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f9c4 	bl	80034dc <RCCEx_PLL2_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003158:	e012      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3324      	adds	r3, #36	; 0x24
 800315e:	2102      	movs	r1, #2
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fa6d 	bl	8003640 <RCCEx_PLL3_Config>
 8003166:	4603      	mov	r3, r0
 8003168:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800316a:	e009      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	75fb      	strb	r3, [r7, #23]
      break;
 8003170:	e006      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003172:	bf00      	nop
 8003174:	e004      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003176:	bf00      	nop
 8003178:	e002      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800317a:	bf00      	nop
 800317c:	e000      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800317e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003186:	4b9d      	ldr	r3, [pc, #628]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003194:	4999      	ldr	r1, [pc, #612]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003196:	4313      	orrs	r3, r2
 8003198:	658b      	str	r3, [r1, #88]	; 0x58
 800319a:	e001      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b6:	d10a      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3324      	adds	r3, #36	; 0x24
 80031bc:	2102      	movs	r1, #2
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fa3e 	bl	8003640 <RCCEx_PLL3_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80031ce:	4b8b      	ldr	r3, [pc, #556]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031dc:	4987      	ldr	r1, [pc, #540]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f8:	d10a      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3324      	adds	r3, #36	; 0x24
 80031fe:	2102      	movs	r1, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fa1d 	bl	8003640 <RCCEx_PLL3_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003210:	4b7a      	ldr	r3, [pc, #488]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800321e:	4977      	ldr	r1, [pc, #476]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003220:	4313      	orrs	r3, r2
 8003222:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d034      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800323a:	d01d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800323c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003240:	d817      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324a:	d009      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800324c:	e011      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f000 f941 	bl	80034dc <RCCEx_PLL2_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800325e:	e00c      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3324      	adds	r3, #36	; 0x24
 8003264:	2102      	movs	r1, #2
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f9ea 	bl	8003640 <RCCEx_PLL3_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003270:	e003      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
      break;
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10a      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003280:	4b5e      	ldr	r3, [pc, #376]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800328e:	495b      	ldr	r1, [pc, #364]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003290:	4313      	orrs	r3, r2
 8003292:	658b      	str	r3, [r1, #88]	; 0x58
 8003294:	e001      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d033      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032b0:	d01c      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80032b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032b6:	d816      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80032b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032bc:	d003      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80032be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032c2:	d007      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80032c4:	e00f      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c6:	4b4d      	ldr	r3, [pc, #308]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	4a4c      	ldr	r2, [pc, #304]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80032d2:	e00c      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3324      	adds	r3, #36	; 0x24
 80032d8:	2101      	movs	r1, #1
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f9b0 	bl	8003640 <RCCEx_PLL3_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80032e4:	e003      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
      break;
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80032ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003302:	493e      	ldr	r1, [pc, #248]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003304:	4313      	orrs	r3, r2
 8003306:	654b      	str	r3, [r1, #84]	; 0x54
 8003308:	e001      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330a:	7dfb      	ldrb	r3, [r7, #23]
 800330c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d029      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003326:	d007      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003328:	e00f      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800332a:	4b34      	ldr	r3, [pc, #208]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	4a33      	ldr	r2, [pc, #204]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003334:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003336:	e00b      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	2102      	movs	r1, #2
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f8cc 	bl	80034dc <RCCEx_PLL2_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003348:	e002      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	75fb      	strb	r3, [r7, #23]
      break;
 800334e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003362:	4926      	ldr	r1, [pc, #152]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003364:	4313      	orrs	r3, r2
 8003366:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003368:	e001      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3324      	adds	r3, #36	; 0x24
 800337e:	2102      	movs	r1, #2
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f95d 	bl	8003640 <RCCEx_PLL3_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d033      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a4:	d017      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80033a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033aa:	d811      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80033ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b0:	d013      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80033b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b6:	d80b      	bhi.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80033bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c0:	d106      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	4a0d      	ldr	r2, [pc, #52]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80033ce:	e007      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	75fb      	strb	r3, [r7, #23]
      break;
 80033d4:	e004      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80033d6:	bf00      	nop
 80033d8:	e002      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80033da:	bf00      	nop
 80033dc:	e000      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80033de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10c      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033f2:	4902      	ldr	r1, [pc, #8]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	654b      	str	r3, [r1, #84]	; 0x54
 80033f8:	e004      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80033fa:	bf00      	nop
 80033fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003410:	4b31      	ldr	r3, [pc, #196]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003414:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	492e      	ldr	r1, [pc, #184]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800341e:	4313      	orrs	r3, r2
 8003420:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800342e:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800343c:	4926      	ldr	r1, [pc, #152]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800343e:	4313      	orrs	r3, r2
 8003440:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800344e:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003452:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800345a:	491f      	ldr	r1, [pc, #124]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800345c:	4313      	orrs	r3, r2
 800345e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00d      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	4a19      	ldr	r2, [pc, #100]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003472:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003476:	6113      	str	r3, [r2, #16]
 8003478:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003482:	4915      	ldr	r1, [pc, #84]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003484:	4313      	orrs	r3, r2
 8003486:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	da08      	bge.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003494:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349c:	490e      	ldr	r1, [pc, #56]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034ae:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034bc:	4906      	ldr	r1, [pc, #24]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80034c2:	7dbb      	ldrb	r3, [r7, #22]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	58024400 	.word	0x58024400

080034dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80034ea:	4b53      	ldr	r3, [pc, #332]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d101      	bne.n	80034fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e099      	b.n	800362e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80034fa:	4b4f      	ldr	r3, [pc, #316]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a4e      	ldr	r2, [pc, #312]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 8003500:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003506:	f7fd fc3d 	bl	8000d84 <HAL_GetTick>
 800350a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800350c:	e008      	b.n	8003520 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800350e:	f7fd fc39 	bl	8000d84 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e086      	b.n	800362e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003520:	4b45      	ldr	r3, [pc, #276]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f0      	bne.n	800350e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800352c:	4b42      	ldr	r3, [pc, #264]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	031b      	lsls	r3, r3, #12
 800353a:	493f      	ldr	r1, [pc, #252]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 800353c:	4313      	orrs	r3, r2
 800353e:	628b      	str	r3, [r1, #40]	; 0x28
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	3b01      	subs	r3, #1
 8003546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	3b01      	subs	r3, #1
 8003550:	025b      	lsls	r3, r3, #9
 8003552:	b29b      	uxth	r3, r3
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	3b01      	subs	r3, #1
 800355c:	041b      	lsls	r3, r3, #16
 800355e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	3b01      	subs	r3, #1
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003570:	4931      	ldr	r1, [pc, #196]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 8003572:	4313      	orrs	r3, r2
 8003574:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003576:	4b30      	ldr	r3, [pc, #192]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	492d      	ldr	r1, [pc, #180]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 8003584:	4313      	orrs	r3, r2
 8003586:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003588:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	f023 0220 	bic.w	r2, r3, #32
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	4928      	ldr	r1, [pc, #160]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 8003596:	4313      	orrs	r3, r2
 8003598:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800359a:	4b27      	ldr	r3, [pc, #156]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	4a26      	ldr	r2, [pc, #152]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80035a0:	f023 0310 	bic.w	r3, r3, #16
 80035a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80035a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035aa:	4b24      	ldr	r3, [pc, #144]	; (800363c <RCCEx_PLL2_Config+0x160>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	69d2      	ldr	r2, [r2, #28]
 80035b2:	00d2      	lsls	r2, r2, #3
 80035b4:	4920      	ldr	r1, [pc, #128]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80035ba:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	4a1e      	ldr	r2, [pc, #120]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80035c0:	f043 0310 	orr.w	r3, r3, #16
 80035c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80035cc:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80035d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035d8:	e00f      	b.n	80035fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d106      	bne.n	80035ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80035e0:	4b15      	ldr	r3, [pc, #84]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80035e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035ec:	e005      	b.n	80035fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	4a11      	ldr	r2, [pc, #68]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80035f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80035fa:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 8003600:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003606:	f7fd fbbd 	bl	8000d84 <HAL_GetTick>
 800360a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800360c:	e008      	b.n	8003620 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800360e:	f7fd fbb9 	bl	8000d84 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e006      	b.n	800362e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <RCCEx_PLL2_Config+0x15c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	58024400 	.word	0x58024400
 800363c:	ffff0007 	.word	0xffff0007

08003640 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800364e:	4b53      	ldr	r3, [pc, #332]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b03      	cmp	r3, #3
 8003658:	d101      	bne.n	800365e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e099      	b.n	8003792 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800365e:	4b4f      	ldr	r3, [pc, #316]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a4e      	ldr	r2, [pc, #312]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366a:	f7fd fb8b 	bl	8000d84 <HAL_GetTick>
 800366e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003670:	e008      	b.n	8003684 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003672:	f7fd fb87 	bl	8000d84 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e086      	b.n	8003792 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003684:	4b45      	ldr	r3, [pc, #276]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f0      	bne.n	8003672 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003690:	4b42      	ldr	r3, [pc, #264]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	051b      	lsls	r3, r3, #20
 800369e:	493f      	ldr	r1, [pc, #252]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	628b      	str	r3, [r1, #40]	; 0x28
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	025b      	lsls	r3, r3, #9
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	3b01      	subs	r3, #1
 80036c0:	041b      	lsls	r3, r3, #16
 80036c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	061b      	lsls	r3, r3, #24
 80036d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036d4:	4931      	ldr	r1, [pc, #196]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80036da:	4b30      	ldr	r3, [pc, #192]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	492d      	ldr	r1, [pc, #180]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80036ec:	4b2b      	ldr	r3, [pc, #172]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	4928      	ldr	r1, [pc, #160]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80036fe:	4b27      	ldr	r3, [pc, #156]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	4a26      	ldr	r2, [pc, #152]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003708:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 800370c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <RCCEx_PLL3_Config+0x160>)
 8003710:	4013      	ands	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	69d2      	ldr	r2, [r2, #28]
 8003716:	00d2      	lsls	r2, r2, #3
 8003718:	4920      	ldr	r1, [pc, #128]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	4a1e      	ldr	r2, [pc, #120]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003728:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d106      	bne.n	800373e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	4a19      	ldr	r2, [pc, #100]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003736:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800373a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800373c:	e00f      	b.n	800375e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d106      	bne.n	8003752 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003744:	4b15      	ldr	r3, [pc, #84]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	4a14      	ldr	r2, [pc, #80]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 800374a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800374e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003750:	e005      	b.n	800375e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003752:	4b12      	ldr	r3, [pc, #72]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	4a11      	ldr	r2, [pc, #68]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800375e:	4b0f      	ldr	r3, [pc, #60]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a0e      	ldr	r2, [pc, #56]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376a:	f7fd fb0b 	bl	8000d84 <HAL_GetTick>
 800376e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003770:	e008      	b.n	8003784 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003772:	f7fd fb07 	bl	8000d84 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e006      	b.n	8003792 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <RCCEx_PLL3_Config+0x15c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	58024400 	.word	0x58024400
 80037a0:	ffff0007 	.word	0xffff0007

080037a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037a4:	b084      	sub	sp, #16
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	f107 001c 	add.w	r0, r7, #28
 80037b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d120      	bne.n	80037fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <USB_CoreInit+0xd4>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d105      	bne.n	80037f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 faac 	bl	8003d50 <USB_CoreReset>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	e01a      	b.n	8003834 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 faa0 	bl	8003d50 <USB_CoreReset>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	639a      	str	r2, [r3, #56]	; 0x38
 8003826:	e005      	b.n	8003834 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	2b01      	cmp	r3, #1
 8003838:	d116      	bne.n	8003868 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <USB_CoreInit+0xd8>)
 800384a:	4313      	orrs	r3, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f043 0206 	orr.w	r2, r3, #6
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003874:	b004      	add	sp, #16
 8003876:	4770      	bx	lr
 8003878:	ffbdffbf 	.word	0xffbdffbf
 800387c:	03ee0000 	.word	0x03ee0000

08003880 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f023 0201 	bic.w	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	460b      	mov	r3, r1
 80038ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d115      	bne.n	80038f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038d0:	2001      	movs	r0, #1
 80038d2:	f7fd fa63 	bl	8000d9c <HAL_Delay>
      ms++;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3301      	adds	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fa29 	bl	8003d34 <USB_GetMode>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d01e      	beq.n	8003926 <USB_SetCurrentMode+0x84>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b31      	cmp	r3, #49	; 0x31
 80038ec:	d9f0      	bls.n	80038d0 <USB_SetCurrentMode+0x2e>
 80038ee:	e01a      	b.n	8003926 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d115      	bne.n	8003922 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003902:	2001      	movs	r0, #1
 8003904:	f7fd fa4a 	bl	8000d9c <HAL_Delay>
      ms++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3301      	adds	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fa10 	bl	8003d34 <USB_GetMode>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <USB_SetCurrentMode+0x84>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b31      	cmp	r3, #49	; 0x31
 800391e:	d9f0      	bls.n	8003902 <USB_SetCurrentMode+0x60>
 8003920:	e001      	b.n	8003926 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e005      	b.n	8003932 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b32      	cmp	r3, #50	; 0x32
 800392a:	d101      	bne.n	8003930 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800393c:	b084      	sub	sp, #16
 800393e:	b580      	push	{r7, lr}
 8003940:	b086      	sub	sp, #24
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800394a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	e009      	b.n	8003970 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	3340      	adds	r3, #64	; 0x40
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	2200      	movs	r2, #0
 8003968:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	3301      	adds	r3, #1
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b0e      	cmp	r3, #14
 8003974:	d9f2      	bls.n	800395c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d11c      	bne.n	80039b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800398a:	f043 0302 	orr.w	r3, r3, #2
 800398e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e005      	b.n	80039c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039c8:	461a      	mov	r2, r3
 80039ca:	2300      	movs	r3, #0
 80039cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d4:	4619      	mov	r1, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039dc:	461a      	mov	r2, r3
 80039de:	680b      	ldr	r3, [r1, #0]
 80039e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d10c      	bne.n	8003a02 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d104      	bne.n	80039f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039ee:	2100      	movs	r1, #0
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f965 	bl	8003cc0 <USB_SetDevSpeed>
 80039f6:	e008      	b.n	8003a0a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039f8:	2101      	movs	r1, #1
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f960 	bl	8003cc0 <USB_SetDevSpeed>
 8003a00:	e003      	b.n	8003a0a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a02:	2103      	movs	r1, #3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f95b 	bl	8003cc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f8f3 	bl	8003bf8 <USB_FlushTxFifo>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f91f 	bl	8003c60 <USB_FlushRxFifo>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	461a      	mov	r2, r3
 8003a34:	2300      	movs	r3, #0
 8003a36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2300      	movs	r3, #0
 8003a42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	e043      	b.n	8003ade <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a6c:	d118      	bne.n	8003aa0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a80:	461a      	mov	r2, r3
 8003a82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	e013      	b.n	8003ab2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a96:	461a      	mov	r2, r3
 8003a98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e008      	b.n	8003ab2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aac:	461a      	mov	r2, r3
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ad6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	3301      	adds	r3, #1
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d3b7      	bcc.n	8003a56 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	e043      	b.n	8003b74 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b02:	d118      	bne.n	8003b36 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b16:	461a      	mov	r2, r3
 8003b18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e013      	b.n	8003b48 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	e008      	b.n	8003b48 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b42:	461a      	mov	r2, r3
 8003b44:	2300      	movs	r3, #0
 8003b46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b54:	461a      	mov	r2, r3
 8003b56:	2300      	movs	r3, #0
 8003b58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b66:	461a      	mov	r2, r3
 8003b68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	3301      	adds	r3, #1
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d3b7      	bcc.n	8003aec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f043 0210 	orr.w	r2, r3, #16
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <USB_DevInit+0x2b4>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f043 0208 	orr.w	r2, r3, #8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699a      	ldr	r2, [r3, #24]
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <USB_DevInit+0x2b8>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bec:	b004      	add	sp, #16
 8003bee:	4770      	bx	lr
 8003bf0:	803c3800 	.word	0x803c3800
 8003bf4:	40000004 	.word	0x40000004

08003bf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <USB_FlushTxFifo+0x64>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e01b      	b.n	8003c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	daf2      	bge.n	8003c06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	019b      	lsls	r3, r3, #6
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3301      	adds	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <USB_FlushTxFifo+0x64>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e006      	b.n	8003c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d0f0      	beq.n	8003c30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	00030d40 	.word	0x00030d40

08003c60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a11      	ldr	r2, [pc, #68]	; (8003cbc <USB_FlushRxFifo+0x5c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e018      	b.n	8003cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	daf2      	bge.n	8003c6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3301      	adds	r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <USB_FlushRxFifo+0x5c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e006      	b.n	8003cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d0f0      	beq.n	8003c90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	00030d40 	.word	0x00030d40

08003cc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	68f9      	ldr	r1, [r7, #12]
 8003cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d0c:	f023 0303 	bic.w	r3, r3, #3
 8003d10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d20:	f043 0302 	orr.w	r3, r3, #2
 8003d24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f003 0301 	and.w	r3, r3, #1
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4a13      	ldr	r2, [pc, #76]	; (8003db4 <USB_CoreReset+0x64>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e01b      	b.n	8003da6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	daf2      	bge.n	8003d5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f043 0201 	orr.w	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a09      	ldr	r2, [pc, #36]	; (8003db4 <USB_CoreReset+0x64>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e006      	b.n	8003da6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d0f0      	beq.n	8003d86 <USB_CoreReset+0x36>

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	00030d40 	.word	0x00030d40

08003db8 <__libc_init_array>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	4d0d      	ldr	r5, [pc, #52]	; (8003df0 <__libc_init_array+0x38>)
 8003dbc:	4c0d      	ldr	r4, [pc, #52]	; (8003df4 <__libc_init_array+0x3c>)
 8003dbe:	1b64      	subs	r4, r4, r5
 8003dc0:	10a4      	asrs	r4, r4, #2
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	42a6      	cmp	r6, r4
 8003dc6:	d109      	bne.n	8003ddc <__libc_init_array+0x24>
 8003dc8:	4d0b      	ldr	r5, [pc, #44]	; (8003df8 <__libc_init_array+0x40>)
 8003dca:	4c0c      	ldr	r4, [pc, #48]	; (8003dfc <__libc_init_array+0x44>)
 8003dcc:	f000 f820 	bl	8003e10 <_init>
 8003dd0:	1b64      	subs	r4, r4, r5
 8003dd2:	10a4      	asrs	r4, r4, #2
 8003dd4:	2600      	movs	r6, #0
 8003dd6:	42a6      	cmp	r6, r4
 8003dd8:	d105      	bne.n	8003de6 <__libc_init_array+0x2e>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de0:	4798      	blx	r3
 8003de2:	3601      	adds	r6, #1
 8003de4:	e7ee      	b.n	8003dc4 <__libc_init_array+0xc>
 8003de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dea:	4798      	blx	r3
 8003dec:	3601      	adds	r6, #1
 8003dee:	e7f2      	b.n	8003dd6 <__libc_init_array+0x1e>
 8003df0:	08003e38 	.word	0x08003e38
 8003df4:	08003e38 	.word	0x08003e38
 8003df8:	08003e38 	.word	0x08003e38
 8003dfc:	08003e3c 	.word	0x08003e3c

08003e00 <memset>:
 8003e00:	4402      	add	r2, r0
 8003e02:	4603      	mov	r3, r0
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d100      	bne.n	8003e0a <memset+0xa>
 8003e08:	4770      	bx	lr
 8003e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e0e:	e7f9      	b.n	8003e04 <memset+0x4>

08003e10 <_init>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	bf00      	nop
 8003e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e16:	bc08      	pop	{r3}
 8003e18:	469e      	mov	lr, r3
 8003e1a:	4770      	bx	lr

08003e1c <_fini>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	bf00      	nop
 8003e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e22:	bc08      	pop	{r3}
 8003e24:	469e      	mov	lr, r3
 8003e26:	4770      	bx	lr
