
Dual_Core__High_Level_Arch_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003844  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003adc  08003adc  00013adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aec  08003aec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003aec  08003aec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003aec  08003aec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  24000010  08003b04  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400053c  08003b04  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e776  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c1  00000000  00000000  0002e7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00030978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  000314f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039076  00000000  00000000  00031f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec50  00000000  00000000  0006afd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00174f0c  00000000  00000000  00079c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001eeb32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002de4  00000000  00000000  001eeb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003ac4 	.word	0x08003ac4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003ac4 	.word	0x08003ac4

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <MX_GPIO_Init+0x6c>)
 800040c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_GPIO_Init+0x6c>)
 800041c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000420:	f003 0304 	and.w	r3, r3, #4
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_GPIO_Init+0x6c>)
 800042a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800042e:	4a10      	ldr	r2, [pc, #64]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <MX_GPIO_Init+0x6c>)
 800043a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800043e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044c:	4a08      	ldr	r2, [pc, #32]	; (8000470 <MX_GPIO_Init+0x6c>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_GPIO_Init+0x6c>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]

}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	58024400 	.word	0x58024400

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800047a:	4b55      	ldr	r3, [pc, #340]	; (80005d0 <main+0x15c>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000482:	2b00      	cmp	r3, #0
 8000484:	d11b      	bne.n	80004be <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000486:	f3bf 8f4f 	dsb	sy
}
 800048a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800048c:	f3bf 8f6f 	isb	sy
}
 8000490:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000492:	4b4f      	ldr	r3, [pc, #316]	; (80005d0 <main+0x15c>)
 8000494:	2200      	movs	r2, #0
 8000496:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800049a:	f3bf 8f4f 	dsb	sy
}
 800049e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a0:	f3bf 8f6f 	isb	sy
}
 80004a4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004a6:	4b4a      	ldr	r3, [pc, #296]	; (80005d0 <main+0x15c>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a49      	ldr	r2, [pc, #292]	; (80005d0 <main+0x15c>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004b2:	f3bf 8f4f 	dsb	sy
}
 80004b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004b8:	f3bf 8f6f 	isb	sy
}
 80004bc:	e000      	b.n	80004c0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004be:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004c0:	4b43      	ldr	r3, [pc, #268]	; (80005d0 <main+0x15c>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d138      	bne.n	800053e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004cc:	4b40      	ldr	r3, [pc, #256]	; (80005d0 <main+0x15c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004d4:	f3bf 8f4f 	dsb	sy
}
 80004d8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004da:	4b3d      	ldr	r3, [pc, #244]	; (80005d0 <main+0x15c>)
 80004dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004e0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	0b5b      	lsrs	r3, r3, #13
 80004e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004ea:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	08db      	lsrs	r3, r3, #3
 80004f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004f4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	015a      	lsls	r2, r3, #5
 80004fa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80004fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000504:	4932      	ldr	r1, [pc, #200]	; (80005d0 <main+0x15c>)
 8000506:	4313      	orrs	r3, r2
 8000508:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1ef      	bne.n	80004f6 <main+0x82>
    } while(sets-- != 0U);
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	60fa      	str	r2, [r7, #12]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1e5      	bne.n	80004ec <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000520:	f3bf 8f4f 	dsb	sy
}
 8000524:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000526:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <main+0x15c>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a29      	ldr	r2, [pc, #164]	; (80005d0 <main+0x15c>)
 800052c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000530:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000532:	f3bf 8f4f 	dsb	sy
}
 8000536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000538:	f3bf 8f6f 	isb	sy
}
 800053c:	e000      	b.n	8000540 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800053e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000544:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000546:	bf00      	nop
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <main+0x160>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <main+0xea>
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	617a      	str	r2, [r7, #20]
 800055a:	2b00      	cmp	r3, #0
 800055c:	dcf4      	bgt.n	8000548 <main+0xd4>
  if ( timeout < 0 )
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	2b00      	cmp	r3, #0
 8000562:	da01      	bge.n	8000568 <main+0xf4>
  {
  Error_Handler();
 8000564:	f000 f8be 	bl	80006e4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 f9e8 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f834 	bl	80005d8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <main+0x160>)
 8000572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <main+0x160>)
 8000578:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800057c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <main+0x160>)
 8000582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 fd56 	bl	8001040 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fd6c 	bl	8001074 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800059c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a0:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80005a2:	bf00      	nop
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <main+0x160>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d104      	bne.n	80005ba <main+0x146>
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	1e5a      	subs	r2, r3, #1
 80005b4:	617a      	str	r2, [r7, #20]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	dcf4      	bgt.n	80005a4 <main+0x130>
if ( timeout < 0 )
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	da01      	bge.n	80005c4 <main+0x150>
{
Error_Handler();
 80005c0:	f000 f890 	bl	80006e4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f7ff ff1e 	bl	8000404 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c8:	f000 f8e2 	bl	8000790 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x158>
 80005ce:	bf00      	nop
 80005d0:	e000ed00 	.word	0xe000ed00
 80005d4:	58024400 	.word	0x58024400

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09c      	sub	sp, #112	; 0x70
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e2:	224c      	movs	r2, #76	; 0x4c
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fa64 	bl	8003ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2220      	movs	r2, #32
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fa5e 	bl	8003ab4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005f8:	2004      	movs	r0, #4
 80005fa:	f000 febb 	bl	8001374 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <SystemClock_Config+0x100>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemClock_Config+0x100>)
 8000608:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <SystemClock_Config+0x100>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemClock_Config+0x104>)
 800061a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061c:	4a2f      	ldr	r2, [pc, #188]	; (80006dc <SystemClock_Config+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000624:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <SystemClock_Config+0x104>)
 8000626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000630:	bf00      	nop
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <SystemClock_Config+0x100>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800063a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800063e:	d1f8      	bne.n	8000632 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0x108>)
 8000642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000644:	f023 0303 	bic.w	r3, r3, #3
 8000648:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <SystemClock_Config+0x108>)
 800064a:	f043 0302 	orr.w	r3, r3, #2
 800064e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000650:	2321      	movs	r3, #33	; 0x21
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800065a:	2301      	movs	r3, #1
 800065c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	2302      	movs	r3, #2
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800066a:	2378      	movs	r3, #120	; 0x78
 800066c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800066e:	2302      	movs	r3, #2
 8000670:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000672:	2304      	movs	r3, #4
 8000674:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800067a:	230c      	movs	r3, #12
 800067c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800067e:	2300      	movs	r3, #0
 8000680:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fedc 	bl	8001448 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000696:	f000 f825 	bl	80006e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	233f      	movs	r3, #63	; 0x3f
 800069c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2303      	movs	r3, #3
 80006a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006a6:	2308      	movs	r3, #8
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006aa:	2340      	movs	r3, #64	; 0x40
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ae:	2340      	movs	r3, #64	; 0x40
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2104      	movs	r1, #4
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 faef 	bl	8001ca4 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80006cc:	f000 f80a 	bl	80006e4 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3770      	adds	r7, #112	; 0x70
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	58024800 	.word	0x58024800
 80006dc:	58000400 	.word	0x58000400
 80006e0:	58024400 	.word	0x58024400

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <HAL_MspInit+0x3c>)
 80006f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006fc:	4a0b      	ldr	r2, [pc, #44]	; (800072c <HAL_MspInit+0x3c>)
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_MspInit+0x3c>)
 8000708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800070c:	f003 0302 	and.w	r3, r3, #2
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	207d      	movs	r0, #125	; 0x7d
 800071a:	f000 faac 	bl	8000c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800071e:	207d      	movs	r0, #125	; 0x7d
 8000720:	f000 fac3 	bl	8000caa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58024400 	.word	0x58024400

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077c:	f000 f950 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000788:	f000 fc88 	bl	800109c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000798:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800079c:	2209      	movs	r2, #9
 800079e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007a2:	2202      	movs	r2, #2
 80007a4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007d8:	f000 fc84 	bl	80010e4 <HAL_PCD_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80007e2:	f7ff ff7f 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2400002c 	.word	0x2400002c
 80007f0:	40080000 	.word	0x40080000

080007f4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b0b8      	sub	sp, #224	; 0xe0
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	22bc      	movs	r2, #188	; 0xbc
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f003 f94d 	bl	8003ab4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a2f      	ldr	r2, [pc, #188]	; (80008dc <HAL_PCD_MspInit+0xe8>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d156      	bne.n	80008d2 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000824:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000828:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800082a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800082e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fd64 	bl	8002304 <HAL_RCCEx_PeriphCLKConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000842:	f7ff ff4f 	bl	80006e4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000846:	f000 fdef 	bl	8001428 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <HAL_PCD_MspInit+0xec>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000850:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <HAL_PCD_MspInit+0xec>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <HAL_PCD_MspInit+0xec>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000868:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800086c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000882:	230a      	movs	r3, #10
 8000884:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800088c:	4619      	mov	r1, r3
 800088e:	4815      	ldr	r0, [pc, #84]	; (80008e4 <HAL_PCD_MspInit+0xf0>)
 8000890:	f000 fa26 	bl	8000ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000898:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008ac:	4619      	mov	r1, r3
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <HAL_PCD_MspInit+0xf0>)
 80008b0:	f000 fa16 	bl	8000ce0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <HAL_PCD_MspInit+0xec>)
 80008b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008ba:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <HAL_PCD_MspInit+0xec>)
 80008bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80008c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_PCD_MspInit+0xec>)
 80008c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80008d2:	bf00      	nop
 80008d4:	37e0      	adds	r7, #224	; 0xe0
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40080000 	.word	0x40080000
 80008e0:	58024400 	.word	0x58024400
 80008e4:	58020000 	.word	0x58020000

080008e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000920 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008ec:	f7ff fcf4 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	; (8000928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	; (8000934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000916:	f003 f8a9 	bl	8003a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800091a:	f7ff fdab 	bl	8000474 <main>
  bx  lr
 800091e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000920:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000924:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000928:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800092c:	08003af4 	.word	0x08003af4
  ldr r2, =_sbss
 8000930:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000934:	2400053c 	.word	0x2400053c

08000938 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC3_IRQHandler>
	...

0800093c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000942:	2003      	movs	r0, #3
 8000944:	f000 f98c 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000948:	f001 fb62 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 800094c:	4602      	mov	r2, r0
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_Init+0x68>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	0a1b      	lsrs	r3, r3, #8
 8000954:	f003 030f 	and.w	r3, r3, #15
 8000958:	4913      	ldr	r1, [pc, #76]	; (80009a8 <HAL_Init+0x6c>)
 800095a:	5ccb      	ldrb	r3, [r1, r3]
 800095c:	f003 031f 	and.w	r3, r3, #31
 8000960:	fa22 f303 	lsr.w	r3, r2, r3
 8000964:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_Init+0x68>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_Init+0x6c>)
 8000970:	5cd3      	ldrb	r3, [r2, r3]
 8000972:	f003 031f 	and.w	r3, r3, #31
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	fa22 f303 	lsr.w	r3, r2, r3
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <HAL_Init+0x70>)
 800097e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000980:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <HAL_Init+0x74>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f814 	bl	80009b4 <HAL_InitTick>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e002      	b.n	800099c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000996:	f7ff feab 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	58024400 	.word	0x58024400
 80009a8:	08003adc 	.word	0x08003adc
 80009ac:	24000004 	.word	0x24000004
 80009b0:	24000000 	.word	0x24000000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_InitTick+0x60>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d101      	bne.n	80009c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	e021      	b.n	8000a0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <HAL_InitTick+0x64>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_InitTick+0x60>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f971 	bl	8000cc6 <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f000 f93b 	bl	8000c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_InitTick+0x68>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2400000c 	.word	0x2400000c
 8000a18:	24000000 	.word	0x24000000
 8000a1c:	24000008 	.word	0x24000008

08000a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x20>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x24>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_IncTick+0x24>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	2400000c 	.word	0x2400000c
 8000a44:	24000538 	.word	0x24000538

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	24000538 	.word	0x24000538

08000a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a68:	f7ff ffee 	bl	8000a48 <HAL_GetTick>
 8000a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a78:	d005      	beq.n	8000a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_Delay+0x44>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a86:	bf00      	nop
 8000a88:	f7ff ffde 	bl	8000a48 <HAL_GetTick>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d8f7      	bhi.n	8000a88 <HAL_Delay+0x28>
  {
  }
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2400000c 	.word	0x2400000c

08000aa8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetREVID+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	0c1b      	lsrs	r3, r3, #16
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	5c001000 	.word	0x5c001000

08000ac0 <__NVIC_SetPriorityGrouping>:
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <__NVIC_SetPriorityGrouping+0x40>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	4313      	orrs	r3, r2
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <__NVIC_SetPriorityGrouping+0x40>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00
 8000b04:	05fa0000 	.word	0x05fa0000

08000b08 <__NVIC_GetPriorityGrouping>:
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_EnableIRQ>:
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db0b      	blt.n	8000b4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	f003 021f 	and.w	r2, r3, #31
 8000b3c:	4907      	ldr	r1, [pc, #28]	; (8000b5c <__NVIC_EnableIRQ+0x38>)
 8000b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	2001      	movs	r0, #1
 8000b46:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c2c:	d301      	bcc.n	8000c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00f      	b.n	8000c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <SysTick_Config+0x40>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f7ff ff8e 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <SysTick_Config+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SysTick_Config+0x40>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ff29 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c84:	f7ff ff40 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	6978      	ldr	r0, [r7, #20]
 8000c90:	f7ff ff90 	bl	8000bb4 <NVIC_EncodePriority>
 8000c94:	4602      	mov	r2, r0
 8000c96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff5f 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff33 	bl	8000b24 <__NVIC_EnableIRQ>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffa4 	bl	8000c1c <SysTick_Config>
 8000cd4:	4603      	mov	r3, r0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cee:	4b89      	ldr	r3, [pc, #548]	; (8000f14 <HAL_GPIO_Init+0x234>)
 8000cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cf2:	e194      	b.n	800101e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 8186 	beq.w	8001018 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d005      	beq.n	8000d24 <HAL_GPIO_Init+0x44>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	f003 0201 	and.w	r2, r3, #1
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d017      	beq.n	8000dc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d123      	bne.n	8000e16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	69b9      	ldr	r1, [r7, #24]
 8000e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0203 	and.w	r2, r3, #3
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 80e0 	beq.w	8001018 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_GPIO_Init+0x238>)
 8000e5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e5e:	4a2e      	ldr	r2, [pc, #184]	; (8000f18 <HAL_GPIO_Init+0x238>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <HAL_GPIO_Init+0x238>)
 8000e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e76:	4a29      	ldr	r2, [pc, #164]	; (8000f1c <HAL_GPIO_Init+0x23c>)
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a20      	ldr	r2, [pc, #128]	; (8000f20 <HAL_GPIO_Init+0x240>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d052      	beq.n	8000f48 <HAL_GPIO_Init+0x268>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <HAL_GPIO_Init+0x244>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d031      	beq.n	8000f0e <HAL_GPIO_Init+0x22e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <HAL_GPIO_Init+0x248>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d02b      	beq.n	8000f0a <HAL_GPIO_Init+0x22a>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <HAL_GPIO_Init+0x24c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d025      	beq.n	8000f06 <HAL_GPIO_Init+0x226>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <HAL_GPIO_Init+0x250>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d01f      	beq.n	8000f02 <HAL_GPIO_Init+0x222>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <HAL_GPIO_Init+0x254>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d019      	beq.n	8000efe <HAL_GPIO_Init+0x21e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <HAL_GPIO_Init+0x258>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d013      	beq.n	8000efa <HAL_GPIO_Init+0x21a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <HAL_GPIO_Init+0x25c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d00d      	beq.n	8000ef6 <HAL_GPIO_Init+0x216>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <HAL_GPIO_Init+0x260>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d007      	beq.n	8000ef2 <HAL_GPIO_Init+0x212>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <HAL_GPIO_Init+0x264>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_GPIO_Init+0x20e>
 8000eea:	2309      	movs	r3, #9
 8000eec:	e02d      	b.n	8000f4a <HAL_GPIO_Init+0x26a>
 8000eee:	230a      	movs	r3, #10
 8000ef0:	e02b      	b.n	8000f4a <HAL_GPIO_Init+0x26a>
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	e029      	b.n	8000f4a <HAL_GPIO_Init+0x26a>
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	e027      	b.n	8000f4a <HAL_GPIO_Init+0x26a>
 8000efa:	2306      	movs	r3, #6
 8000efc:	e025      	b.n	8000f4a <HAL_GPIO_Init+0x26a>
 8000efe:	2305      	movs	r3, #5
 8000f00:	e023      	b.n	8000f4a <HAL_GPIO_Init+0x26a>
 8000f02:	2304      	movs	r3, #4
 8000f04:	e021      	b.n	8000f4a <HAL_GPIO_Init+0x26a>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e01f      	b.n	8000f4a <HAL_GPIO_Init+0x26a>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e01d      	b.n	8000f4a <HAL_GPIO_Init+0x26a>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e01b      	b.n	8000f4a <HAL_GPIO_Init+0x26a>
 8000f12:	bf00      	nop
 8000f14:	58000080 	.word	0x58000080
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58000400 	.word	0x58000400
 8000f20:	58020000 	.word	0x58020000
 8000f24:	58020400 	.word	0x58020400
 8000f28:	58020800 	.word	0x58020800
 8000f2c:	58020c00 	.word	0x58020c00
 8000f30:	58021000 	.word	0x58021000
 8000f34:	58021400 	.word	0x58021400
 8000f38:	58021800 	.word	0x58021800
 8000f3c:	58021c00 	.word	0x58021c00
 8000f40:	58022000 	.word	0x58022000
 8000f44:	58022400 	.word	0x58022400
 8000f48:	2300      	movs	r3, #0
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	f002 0203 	and.w	r2, r2, #3
 8000f50:	0092      	lsls	r2, r2, #2
 8000f52:	4093      	lsls	r3, r2
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5a:	4938      	ldr	r1, [pc, #224]	; (800103c <HAL_GPIO_Init+0x35c>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	3301      	adds	r3, #1
 800101c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa22 f303 	lsr.w	r3, r2, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	f47f ae63 	bne.w	8000cf4 <HAL_GPIO_Init+0x14>
  }
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3724      	adds	r7, #36	; 0x24
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	58000400 	.word	0x58000400

08001040 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_HSEM_FastTake+0x2c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3320      	adds	r3, #32
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_HSEM_FastTake+0x30>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d101      	bne.n	800105c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e000      	b.n	800105e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	58026400 	.word	0x58026400
 8001070:	80000300 	.word	0x80000300

08001074 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800107e:	4906      	ldr	r1, [pc, #24]	; (8001098 <HAL_HSEM_Release+0x24>)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	58026400 	.word	0x58026400

0800109c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_HSEM_IRQHandler+0x30>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_HSEM_IRQHandler+0x30>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	4906      	ldr	r1, [pc, #24]	; (80010cc <HAL_HSEM_IRQHandler+0x30>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <HAL_HSEM_IRQHandler+0x30>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 f807 	bl	80010d0 <HAL_HSEM_FreeCallback>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	58026500 	.word	0x58026500

080010d0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e6:	b08f      	sub	sp, #60	; 0x3c
 80010e8:	af0a      	add	r7, sp, #40	; 0x28
 80010ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e116      	b.n	8001324 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d106      	bne.n	8001116 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fb6f 	bl	80007f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2203      	movs	r2, #3
 800111a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f002 f9fd 	bl	8003534 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	687e      	ldr	r6, [r7, #4]
 8001142:	466d      	mov	r5, sp
 8001144:	f106 0410 	add.w	r4, r6, #16
 8001148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001150:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001154:	e885 0003 	stmia.w	r5, {r0, r1}
 8001158:	1d33      	adds	r3, r6, #4
 800115a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f002 f97b 	bl	8003458 <USB_CoreInit>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2202      	movs	r2, #2
 800116c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0d7      	b.n	8001324 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f002 f9eb 	bl	8003556 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e04a      	b.n	800121c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	333d      	adds	r3, #61	; 0x3d
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	333c      	adds	r3, #60	; 0x3c
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	b298      	uxth	r0, r3
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	3344      	adds	r3, #68	; 0x44
 80011c2:	4602      	mov	r2, r0
 80011c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011c6:	7bfa      	ldrb	r2, [r7, #15]
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	3340      	adds	r3, #64	; 0x40
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011da:	7bfa      	ldrb	r2, [r7, #15]
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4413      	add	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	3348      	adds	r3, #72	; 0x48
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4413      	add	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	334c      	adds	r3, #76	; 0x4c
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	3354      	adds	r3, #84	; 0x54
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	3301      	adds	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d3af      	bcc.n	8001186 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e044      	b.n	80012b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	3301      	adds	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d3b5      	bcc.n	800122c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	687e      	ldr	r6, [r7, #4]
 80012c8:	466d      	mov	r5, sp
 80012ca:	f106 0410 	add.w	r4, r6, #16
 80012ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012da:	e885 0003 	stmia.w	r5, {r0, r1}
 80012de:	1d33      	adds	r3, r6, #4
 80012e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e2:	6838      	ldr	r0, [r7, #0]
 80012e4:	f002 f984 	bl	80035f0 <USB_DevInit>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2202      	movs	r2, #2
 80012f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e014      	b.n	8001324 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	2b01      	cmp	r3, #1
 8001310:	d102      	bne.n	8001318 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f80a 	bl	800132c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fb42 	bl	80039a6 <USB_DevDisconnect>

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800132c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_PCDEx_ActivateLPM+0x44>)
 800135c:	4313      	orrs	r3, r2
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	10000003 	.word	0x10000003

08001374 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800137c:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_PWREx_ConfigSupply+0xb0>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	2b06      	cmp	r3, #6
 8001386:	d00a      	beq.n	800139e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <HAL_PWREx_ConfigSupply+0xb0>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	d001      	beq.n	800139a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e040      	b.n	800141c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e03e      	b.n	800141c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <HAL_PWREx_ConfigSupply+0xb0>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80013a6:	491f      	ldr	r1, [pc, #124]	; (8001424 <HAL_PWREx_ConfigSupply+0xb0>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80013ae:	f7ff fb4b 	bl	8000a48 <HAL_GetTick>
 80013b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013b4:	e009      	b.n	80013ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013b6:	f7ff fb47 	bl	8000a48 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013c4:	d901      	bls.n	80013ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e028      	b.n	800141c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_PWREx_ConfigSupply+0xb0>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013d6:	d1ee      	bne.n	80013b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b1e      	cmp	r3, #30
 80013dc:	d008      	beq.n	80013f0 <HAL_PWREx_ConfigSupply+0x7c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b2e      	cmp	r3, #46	; 0x2e
 80013e2:	d005      	beq.n	80013f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b1d      	cmp	r3, #29
 80013e8:	d002      	beq.n	80013f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b2d      	cmp	r3, #45	; 0x2d
 80013ee:	d114      	bne.n	800141a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80013f0:	f7ff fb2a 	bl	8000a48 <HAL_GetTick>
 80013f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013f6:	e009      	b.n	800140c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013f8:	f7ff fb26 	bl	8000a48 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001406:	d901      	bls.n	800140c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e007      	b.n	800141c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_PWREx_ConfigSupply+0xb0>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001418:	d1ee      	bne.n	80013f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	58024800 	.word	0x58024800

08001428 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	58024800 	.word	0x58024800

08001448 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	f000 bc1d 	b.w	8001c96 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8087 	beq.w	8001578 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146a:	4b99      	ldr	r3, [pc, #612]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001474:	4b96      	ldr	r3, [pc, #600]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147c:	2b10      	cmp	r3, #16
 800147e:	d007      	beq.n	8001490 <HAL_RCC_OscConfig+0x48>
 8001480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001482:	2b18      	cmp	r3, #24
 8001484:	d110      	bne.n	80014a8 <HAL_RCC_OscConfig+0x60>
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d10b      	bne.n	80014a8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	4b8f      	ldr	r3, [pc, #572]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d06c      	beq.n	8001576 <HAL_RCC_OscConfig+0x12e>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d168      	bne.n	8001576 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e3f6      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x78>
 80014b2:	4b87      	ldr	r3, [pc, #540]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a86      	ldr	r2, [pc, #536]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e02e      	b.n	800151e <HAL_RCC_OscConfig+0xd6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d10c      	bne.n	80014e2 <HAL_RCC_OscConfig+0x9a>
 80014c8:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a80      	ldr	r2, [pc, #512]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80014ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b7e      	ldr	r3, [pc, #504]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a7d      	ldr	r2, [pc, #500]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	e01d      	b.n	800151e <HAL_RCC_OscConfig+0xd6>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ea:	d10c      	bne.n	8001506 <HAL_RCC_OscConfig+0xbe>
 80014ec:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a77      	ldr	r2, [pc, #476]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80014f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b75      	ldr	r3, [pc, #468]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a74      	ldr	r2, [pc, #464]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80014fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e00b      	b.n	800151e <HAL_RCC_OscConfig+0xd6>
 8001506:	4b72      	ldr	r3, [pc, #456]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a71      	ldr	r2, [pc, #452]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 800150c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6e      	ldr	r2, [pc, #440]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d013      	beq.n	800154e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fa8f 	bl	8000a48 <HAL_GetTick>
 800152a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152e:	f7ff fa8b 	bl	8000a48 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	; 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e3aa      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001540:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0xe6>
 800154c:	e014      	b.n	8001578 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fa7b 	bl	8000a48 <HAL_GetTick>
 8001552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001556:	f7ff fa77 	bl	8000a48 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b64      	cmp	r3, #100	; 0x64
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e396      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001568:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x10e>
 8001574:	e000      	b.n	8001578 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001576:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80cb 	beq.w	800171c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001586:	4b52      	ldr	r3, [pc, #328]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800158e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001590:	4b4f      	ldr	r3, [pc, #316]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d007      	beq.n	80015ac <HAL_RCC_OscConfig+0x164>
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	2b18      	cmp	r3, #24
 80015a0:	d156      	bne.n	8001650 <HAL_RCC_OscConfig+0x208>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d151      	bne.n	8001650 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ac:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_OscConfig+0x17c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e368      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 0219 	bic.w	r2, r3, #25
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	493f      	ldr	r1, [pc, #252]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015d6:	f7ff fa37 	bl	8000a48 <HAL_GetTick>
 80015da:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fa33 	bl	8000a48 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e352      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	f7ff fa54 	bl	8000aa8 <HAL_GetREVID>
 8001600:	4603      	mov	r3, r0
 8001602:	f241 0203 	movw	r2, #4099	; 0x1003
 8001606:	4293      	cmp	r3, r2
 8001608:	d817      	bhi.n	800163a <HAL_RCC_OscConfig+0x1f2>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	2b40      	cmp	r3, #64	; 0x40
 8001610:	d108      	bne.n	8001624 <HAL_RCC_OscConfig+0x1dc>
 8001612:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800161a:	4a2d      	ldr	r2, [pc, #180]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001622:	e07b      	b.n	800171c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	031b      	lsls	r3, r3, #12
 8001632:	4927      	ldr	r1, [pc, #156]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001638:	e070      	b.n	800171c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	061b      	lsls	r3, r3, #24
 8001648:	4921      	ldr	r1, [pc, #132]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164e:	e065      	b.n	800171c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d048      	beq.n	80016ea <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 0219 	bic.w	r2, r3, #25
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	491a      	ldr	r1, [pc, #104]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7ff f9ed 	bl	8000a48 <HAL_GetTick>
 800166e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001672:	f7ff f9e9 	bl	8000a48 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e308      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	f7ff fa0a 	bl	8000aa8 <HAL_GetREVID>
 8001694:	4603      	mov	r3, r0
 8001696:	f241 0203 	movw	r2, #4099	; 0x1003
 800169a:	4293      	cmp	r3, r2
 800169c:	d81a      	bhi.n	80016d4 <HAL_RCC_OscConfig+0x28c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	2b40      	cmp	r3, #64	; 0x40
 80016a4:	d108      	bne.n	80016b8 <HAL_RCC_OscConfig+0x270>
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	6053      	str	r3, [r2, #4]
 80016b6:	e031      	b.n	800171c <HAL_RCC_OscConfig+0x2d4>
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	031b      	lsls	r3, r3, #12
 80016c6:	4902      	ldr	r1, [pc, #8]	; (80016d0 <HAL_RCC_OscConfig+0x288>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
 80016cc:	e026      	b.n	800171c <HAL_RCC_OscConfig+0x2d4>
 80016ce:	bf00      	nop
 80016d0:	58024400 	.word	0x58024400
 80016d4:	4b9a      	ldr	r3, [pc, #616]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	4997      	ldr	r1, [pc, #604]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
 80016e8:	e018      	b.n	800171c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ea:	4b95      	ldr	r3, [pc, #596]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a94      	ldr	r2, [pc, #592]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f6:	f7ff f9a7 	bl	8000a48 <HAL_GetTick>
 80016fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff f9a3 	bl	8000a48 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e2c2      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001710:	4b8b      	ldr	r3, [pc, #556]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80a9 	beq.w	800187c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800172a:	4b85      	ldr	r3, [pc, #532]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001732:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001734:	4b82      	ldr	r3, [pc, #520]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b08      	cmp	r3, #8
 800173e:	d007      	beq.n	8001750 <HAL_RCC_OscConfig+0x308>
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2b18      	cmp	r3, #24
 8001744:	d13a      	bne.n	80017bc <HAL_RCC_OscConfig+0x374>
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d135      	bne.n	80017bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001750:	4b7b      	ldr	r3, [pc, #492]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_OscConfig+0x320>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	2b80      	cmp	r3, #128	; 0x80
 8001762:	d001      	beq.n	8001768 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e296      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001768:	f7ff f99e 	bl	8000aa8 <HAL_GetREVID>
 800176c:	4603      	mov	r3, r0
 800176e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001772:	4293      	cmp	r3, r2
 8001774:	d817      	bhi.n	80017a6 <HAL_RCC_OscConfig+0x35e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	2b20      	cmp	r3, #32
 800177c:	d108      	bne.n	8001790 <HAL_RCC_OscConfig+0x348>
 800177e:	4b70      	ldr	r3, [pc, #448]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001786:	4a6e      	ldr	r2, [pc, #440]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800178c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800178e:	e075      	b.n	800187c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001790:	4b6b      	ldr	r3, [pc, #428]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	069b      	lsls	r3, r3, #26
 800179e:	4968      	ldr	r1, [pc, #416]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017a4:	e06a      	b.n	800187c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017a6:	4b66      	ldr	r3, [pc, #408]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	061b      	lsls	r3, r3, #24
 80017b4:	4962      	ldr	r1, [pc, #392]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017ba:	e05f      	b.n	800187c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d042      	beq.n	800184a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017c4:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a5d      	ldr	r2, [pc, #372]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80017ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff f93a 	bl	8000a48 <HAL_GetTick>
 80017d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017d8:	f7ff f936 	bl	8000a48 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e255      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017ea:	4b55      	ldr	r3, [pc, #340]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017f6:	f7ff f957 	bl	8000aa8 <HAL_GetREVID>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001800:	4293      	cmp	r3, r2
 8001802:	d817      	bhi.n	8001834 <HAL_RCC_OscConfig+0x3ec>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	2b20      	cmp	r3, #32
 800180a:	d108      	bne.n	800181e <HAL_RCC_OscConfig+0x3d6>
 800180c:	4b4c      	ldr	r3, [pc, #304]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001814:	4a4a      	ldr	r2, [pc, #296]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001816:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800181a:	6053      	str	r3, [r2, #4]
 800181c:	e02e      	b.n	800187c <HAL_RCC_OscConfig+0x434>
 800181e:	4b48      	ldr	r3, [pc, #288]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	069b      	lsls	r3, r3, #26
 800182c:	4944      	ldr	r1, [pc, #272]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
 8001832:	e023      	b.n	800187c <HAL_RCC_OscConfig+0x434>
 8001834:	4b42      	ldr	r3, [pc, #264]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	493f      	ldr	r1, [pc, #252]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001844:	4313      	orrs	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
 8001848:	e018      	b.n	800187c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800184a:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a3c      	ldr	r2, [pc, #240]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff f8f7 	bl	8000a48 <HAL_GetTick>
 800185a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800185e:	f7ff f8f3 	bl	8000a48 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e212      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001870:	4b33      	ldr	r3, [pc, #204]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d036      	beq.n	80018f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d019      	beq.n	80018c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001894:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff f8d4 	bl	8000a48 <HAL_GetTick>
 80018a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a4:	f7ff f8d0 	bl	8000a48 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e1ef      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80018b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x45c>
 80018c2:	e018      	b.n	80018f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80018c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c8:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7ff f8ba 	bl	8000a48 <HAL_GetTick>
 80018d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff f8b6 	bl	8000a48 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e1d5      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 80018ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d039      	beq.n	8001976 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d01c      	beq.n	8001944 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001914:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001916:	f7ff f897 	bl	8000a48 <HAL_GetTick>
 800191a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800191e:	f7ff f893 	bl	8000a48 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e1b2      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_RCC_OscConfig+0x4f8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x4d6>
 800193c:	e01b      	b.n	8001976 <HAL_RCC_OscConfig+0x52e>
 800193e:	bf00      	nop
 8001940:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001944:	4b9b      	ldr	r3, [pc, #620]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a9a      	ldr	r2, [pc, #616]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 800194a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800194e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001950:	f7ff f87a 	bl	8000a48 <HAL_GetTick>
 8001954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001958:	f7ff f876 	bl	8000a48 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e195      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800196a:	4b92      	ldr	r3, [pc, #584]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8081 	beq.w	8001a86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001984:	4b8c      	ldr	r3, [pc, #560]	; (8001bb8 <HAL_RCC_OscConfig+0x770>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a8b      	ldr	r2, [pc, #556]	; (8001bb8 <HAL_RCC_OscConfig+0x770>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001990:	f7ff f85a 	bl	8000a48 <HAL_GetTick>
 8001994:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7ff f856 	bl	8000a48 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e175      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019aa:	4b83      	ldr	r3, [pc, #524]	; (8001bb8 <HAL_RCC_OscConfig+0x770>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d106      	bne.n	80019cc <HAL_RCC_OscConfig+0x584>
 80019be:	4b7d      	ldr	r3, [pc, #500]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	4a7c      	ldr	r2, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ca:	e02d      	b.n	8001a28 <HAL_RCC_OscConfig+0x5e0>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10c      	bne.n	80019ee <HAL_RCC_OscConfig+0x5a6>
 80019d4:	4b77      	ldr	r3, [pc, #476]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	4a76      	ldr	r2, [pc, #472]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	6713      	str	r3, [r2, #112]	; 0x70
 80019e0:	4b74      	ldr	r3, [pc, #464]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	4a73      	ldr	r2, [pc, #460]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 80019e6:	f023 0304 	bic.w	r3, r3, #4
 80019ea:	6713      	str	r3, [r2, #112]	; 0x70
 80019ec:	e01c      	b.n	8001a28 <HAL_RCC_OscConfig+0x5e0>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x5c8>
 80019f6:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fa:	4a6e      	ldr	r2, [pc, #440]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6713      	str	r3, [r2, #112]	; 0x70
 8001a02:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	4a6b      	ldr	r2, [pc, #428]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0x5e0>
 8001a10:	4b68      	ldr	r3, [pc, #416]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a67      	ldr	r2, [pc, #412]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1c:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	4a64      	ldr	r2, [pc, #400]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001a22:	f023 0304 	bic.w	r3, r3, #4
 8001a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d015      	beq.n	8001a5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff f80a 	bl	8000a48 <HAL_GetTick>
 8001a34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff f806 	bl	8000a48 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e123      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a4e:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0ee      	beq.n	8001a38 <HAL_RCC_OscConfig+0x5f0>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7fe fff4 	bl	8000a48 <HAL_GetTick>
 8001a60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7fe fff0 	bl	8000a48 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e10d      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a7a:	4b4e      	ldr	r3, [pc, #312]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ee      	bne.n	8001a64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8102 	beq.w	8001c94 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a90:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a98:	2b18      	cmp	r3, #24
 8001a9a:	f000 80bd 	beq.w	8001c18 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	f040 809e 	bne.w	8001be4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa8:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a41      	ldr	r2, [pc, #260]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7fe ffc8 	bl	8000a48 <HAL_GetTick>
 8001ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abc:	f7fe ffc4 	bl	8000a48 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0e3      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <HAL_RCC_OscConfig+0x774>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	430a      	orrs	r2, r1
 8001aee:	4931      	ldr	r1, [pc, #196]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	628b      	str	r3, [r1, #40]	; 0x28
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	3b01      	subs	r3, #1
 8001afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b02:	3b01      	subs	r3, #1
 8001b04:	025b      	lsls	r3, r3, #9
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	061b      	lsls	r3, r3, #24
 8001b20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b24:	4923      	ldr	r1, [pc, #140]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_RCC_OscConfig+0x778>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b42:	00d2      	lsls	r2, r2, #3
 8001b44:	491b      	ldr	r1, [pc, #108]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	f023 020c 	bic.w	r2, r3, #12
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4917      	ldr	r1, [pc, #92]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	f023 0202 	bic.w	r2, r3, #2
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	4912      	ldr	r1, [pc, #72]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7e:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <HAL_RCC_OscConfig+0x76c>)
 8001ba4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7fe ff4d 	bl	8000a48 <HAL_GetTick>
 8001bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bb0:	e011      	b.n	8001bd6 <HAL_RCC_OscConfig+0x78e>
 8001bb2:	bf00      	nop
 8001bb4:	58024400 	.word	0x58024400
 8001bb8:	58024800 	.word	0x58024800
 8001bbc:	fffffc0c 	.word	0xfffffc0c
 8001bc0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7fe ff40 	bl	8000a48 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e05f      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bd6:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <HAL_RCC_OscConfig+0x858>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x77c>
 8001be2:	e057      	b.n	8001c94 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be4:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <HAL_RCC_OscConfig+0x858>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_RCC_OscConfig+0x858>)
 8001bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7fe ff2a 	bl	8000a48 <HAL_GetTick>
 8001bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7fe ff26 	bl	8000a48 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e045      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_RCC_OscConfig+0x858>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x7b0>
 8001c16:	e03d      	b.n	8001c94 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_OscConfig+0x858>)
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_RCC_OscConfig+0x858>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d031      	beq.n	8001c90 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f003 0203 	and.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d12a      	bne.n	8001c90 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d122      	bne.n	8001c90 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d11a      	bne.n	8001c90 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	0a5b      	lsrs	r3, r3, #9
 8001c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c66:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d111      	bne.n	8001c90 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c78:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d108      	bne.n	8001c90 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	0e1b      	lsrs	r3, r3, #24
 8001c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3730      	adds	r7, #48	; 0x30
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	58024400 	.word	0x58024400

08001ca4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e19c      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b8a      	ldr	r3, [pc, #552]	; (8001ee4 <HAL_RCC_ClockConfig+0x240>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d910      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b87      	ldr	r3, [pc, #540]	; (8001ee4 <HAL_RCC_ClockConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 020f 	bic.w	r2, r3, #15
 8001cce:	4985      	ldr	r1, [pc, #532]	; (8001ee4 <HAL_RCC_ClockConfig+0x240>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b83      	ldr	r3, [pc, #524]	; (8001ee4 <HAL_RCC_ClockConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e184      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d010      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	4b7b      	ldr	r3, [pc, #492]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d908      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d04:	4b78      	ldr	r3, [pc, #480]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	4975      	ldr	r1, [pc, #468]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d010      	beq.n	8001d44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	4b70      	ldr	r3, [pc, #448]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d908      	bls.n	8001d44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d32:	4b6d      	ldr	r3, [pc, #436]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	496a      	ldr	r1, [pc, #424]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d010      	beq.n	8001d72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	4b64      	ldr	r3, [pc, #400]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d908      	bls.n	8001d72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d60:	4b61      	ldr	r3, [pc, #388]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	495e      	ldr	r1, [pc, #376]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d010      	beq.n	8001da0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d908      	bls.n	8001da0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001d8e:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4953      	ldr	r1, [pc, #332]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d010      	beq.n	8001dce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d908      	bls.n	8001dce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b4a      	ldr	r3, [pc, #296]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f023 020f 	bic.w	r2, r3, #15
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4947      	ldr	r1, [pc, #284]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d055      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001dda:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	4940      	ldr	r1, [pc, #256]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001df4:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d121      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0f6      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d115      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0ea      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0de      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e34:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0d6      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e44:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f023 0207 	bic.w	r2, r3, #7
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4925      	ldr	r1, [pc, #148]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7fe fdf7 	bl	8000a48 <HAL_GetTick>
 8001e5a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5e:	f7fe fdf3 	bl	8000a48 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e0be      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d1eb      	bne.n	8001e5e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d010      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d208      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f023 020f 	bic.w	r2, r3, #15
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <HAL_RCC_ClockConfig+0x244>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_ClockConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d214      	bcs.n	8001eec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_RCC_ClockConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 020f 	bic.w	r2, r3, #15
 8001eca:	4906      	ldr	r1, [pc, #24]	; (8001ee4 <HAL_RCC_ClockConfig+0x240>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_RCC_ClockConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e086      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x34e>
 8001ee4:	52002000 	.word	0x52002000
 8001ee8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d010      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d208      	bcs.n	8001f1a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f08:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	4939      	ldr	r1, [pc, #228]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d010      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d208      	bcs.n	8001f48 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	492e      	ldr	r1, [pc, #184]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d010      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699a      	ldr	r2, [r3, #24]
 8001f58:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d208      	bcs.n	8001f76 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f64:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4922      	ldr	r1, [pc, #136]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d010      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69da      	ldr	r2, [r3, #28]
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d208      	bcs.n	8001fa4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f92:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4917      	ldr	r1, [pc, #92]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fa4:	f000 f834 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	4912      	ldr	r1, [pc, #72]	; (8002000 <HAL_RCC_ClockConfig+0x35c>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_RCC_ClockConfig+0x358>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <HAL_RCC_ClockConfig+0x35c>)
 8001fcc:	5cd3      	ldrb	r3, [r2, r3]
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_RCC_ClockConfig+0x360>)
 8001fda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_RCC_ClockConfig+0x364>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x368>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fce4 	bl	80009b4 <HAL_InitTick>
 8001fec:	4603      	mov	r3, r0
 8001fee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	58024400 	.word	0x58024400
 8002000:	08003adc 	.word	0x08003adc
 8002004:	24000004 	.word	0x24000004
 8002008:	24000000 	.word	0x24000000
 800200c:	24000008 	.word	0x24000008

08002010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002016:	4bb3      	ldr	r3, [pc, #716]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800201e:	2b18      	cmp	r3, #24
 8002020:	f200 8155 	bhi.w	80022ce <HAL_RCC_GetSysClockFreq+0x2be>
 8002024:	a201      	add	r2, pc, #4	; (adr r2, 800202c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202a:	bf00      	nop
 800202c:	08002091 	.word	0x08002091
 8002030:	080022cf 	.word	0x080022cf
 8002034:	080022cf 	.word	0x080022cf
 8002038:	080022cf 	.word	0x080022cf
 800203c:	080022cf 	.word	0x080022cf
 8002040:	080022cf 	.word	0x080022cf
 8002044:	080022cf 	.word	0x080022cf
 8002048:	080022cf 	.word	0x080022cf
 800204c:	080020b7 	.word	0x080020b7
 8002050:	080022cf 	.word	0x080022cf
 8002054:	080022cf 	.word	0x080022cf
 8002058:	080022cf 	.word	0x080022cf
 800205c:	080022cf 	.word	0x080022cf
 8002060:	080022cf 	.word	0x080022cf
 8002064:	080022cf 	.word	0x080022cf
 8002068:	080022cf 	.word	0x080022cf
 800206c:	080020bd 	.word	0x080020bd
 8002070:	080022cf 	.word	0x080022cf
 8002074:	080022cf 	.word	0x080022cf
 8002078:	080022cf 	.word	0x080022cf
 800207c:	080022cf 	.word	0x080022cf
 8002080:	080022cf 	.word	0x080022cf
 8002084:	080022cf 	.word	0x080022cf
 8002088:	080022cf 	.word	0x080022cf
 800208c:	080020c3 	.word	0x080020c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002090:	4b94      	ldr	r3, [pc, #592]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	2b00      	cmp	r3, #0
 800209a:	d009      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800209c:	4b91      	ldr	r3, [pc, #580]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	4a90      	ldr	r2, [pc, #576]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80020ae:	e111      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80020b0:	4b8d      	ldr	r3, [pc, #564]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020b2:	61bb      	str	r3, [r7, #24]
    break;
 80020b4:	e10e      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80020b6:	4b8d      	ldr	r3, [pc, #564]	; (80022ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020b8:	61bb      	str	r3, [r7, #24]
    break;
 80020ba:	e10b      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80020bc:	4b8c      	ldr	r3, [pc, #560]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80020be:	61bb      	str	r3, [r7, #24]
    break;
 80020c0:	e108      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020c2:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80020cc:	4b85      	ldr	r3, [pc, #532]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020d8:	4b82      	ldr	r3, [pc, #520]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80020e2:	4b80      	ldr	r3, [pc, #512]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	08db      	lsrs	r3, r3, #3
 80020e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80e1 	beq.w	80022c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b02      	cmp	r3, #2
 800210a:	f000 8083 	beq.w	8002214 <HAL_RCC_GetSysClockFreq+0x204>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b02      	cmp	r3, #2
 8002112:	f200 80a1 	bhi.w	8002258 <HAL_RCC_GetSysClockFreq+0x248>
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x114>
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d056      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002122:	e099      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002124:	4b6f      	ldr	r3, [pc, #444]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d02d      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002130:	4b6c      	ldr	r3, [pc, #432]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	4a6b      	ldr	r2, [pc, #428]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
 8002140:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800215a:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800216a:	ed97 6a02 	vldr	s12, [r7, #8]
 800216e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80022f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800217a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800217e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002186:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800218a:	e087      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002196:	eddf 6a58 	vldr	s13, [pc, #352]	; 80022f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800219a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800219e:	4b51      	ldr	r3, [pc, #324]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80021b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80022f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021ce:	e065      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80022fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80021de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021e2:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80022f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002212:	e043      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800221e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002300 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002226:	4b2f      	ldr	r3, [pc, #188]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002236:	ed97 6a02 	vldr	s12, [r7, #8]
 800223a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80022f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800223e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800224a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800224e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002256:	e021      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002262:	eddf 6a26 	vldr	s13, [pc, #152]	; 80022fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800227a:	ed97 6a02 	vldr	s12, [r7, #8]
 800227e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80022f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800228a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800228e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800229a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	0a5b      	lsrs	r3, r3, #9
 80022a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022a6:	3301      	adds	r3, #1
 80022a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	ee07 3a90 	vmov	s15, r3
 80022b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80022b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022c0:	ee17 3a90 	vmov	r3, s15
 80022c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80022c6:	e005      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
    break;
 80022cc:	e002      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022d0:	61bb      	str	r3, [r7, #24]
    break;
 80022d2:	bf00      	nop
  }

  return sysclockfreq;
 80022d4:	69bb      	ldr	r3, [r7, #24]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	58024400 	.word	0x58024400
 80022e8:	03d09000 	.word	0x03d09000
 80022ec:	003d0900 	.word	0x003d0900
 80022f0:	007a1200 	.word	0x007a1200
 80022f4:	46000000 	.word	0x46000000
 80022f8:	4c742400 	.word	0x4c742400
 80022fc:	4a742400 	.word	0x4a742400
 8002300:	4af42400 	.word	0x4af42400

08002304 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800230c:	2300      	movs	r3, #0
 800230e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002310:	2300      	movs	r3, #0
 8002312:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d03f      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002324:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002328:	d02a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800232a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800232e:	d824      	bhi.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002330:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002334:	d018      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800233a:	d81e      	bhi.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002344:	d007      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002346:	e018      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002348:	4ba3      	ldr	r3, [pc, #652]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	4aa2      	ldr	r2, [pc, #648]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800234e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002354:	e015      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3304      	adds	r3, #4
 800235a:	2102      	movs	r1, #2
 800235c:	4618      	mov	r0, r3
 800235e:	f000 ff17 	bl	8003190 <RCCEx_PLL2_Config>
 8002362:	4603      	mov	r3, r0
 8002364:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002366:	e00c      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3324      	adds	r3, #36	; 0x24
 800236c:	2102      	movs	r1, #2
 800236e:	4618      	mov	r0, r3
 8002370:	f000 ffc0 	bl	80032f4 <RCCEx_PLL3_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002378:	e003      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
      break;
 800237e:	e000      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002388:	4b93      	ldr	r3, [pc, #588]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800238a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002394:	4990      	ldr	r1, [pc, #576]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	650b      	str	r3, [r1, #80]	; 0x50
 800239a:	e001      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d03d      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d826      	bhi.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80023b4:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80023b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ba:	bf00      	nop
 80023bc:	080023d1 	.word	0x080023d1
 80023c0:	080023df 	.word	0x080023df
 80023c4:	080023f1 	.word	0x080023f1
 80023c8:	08002409 	.word	0x08002409
 80023cc:	08002409 	.word	0x08002409
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023d0:	4b81      	ldr	r3, [pc, #516]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	4a80      	ldr	r2, [pc, #512]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023dc:	e015      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fed3 	bl	8003190 <RCCEx_PLL2_Config>
 80023ea:	4603      	mov	r3, r0
 80023ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023ee:	e00c      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3324      	adds	r3, #36	; 0x24
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 ff7c 	bl	80032f4 <RCCEx_PLL3_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002400:	e003      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
      break;
 8002406:	e000      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800240a:	7dfb      	ldrb	r3, [r7, #23]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002410:	4b71      	ldr	r3, [pc, #452]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002414:	f023 0207 	bic.w	r2, r3, #7
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	496e      	ldr	r1, [pc, #440]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	650b      	str	r3, [r1, #80]	; 0x50
 8002422:	e001      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002430:	2b00      	cmp	r3, #0
 8002432:	d042      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243c:	d02b      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800243e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002442:	d825      	bhi.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002444:	2bc0      	cmp	r3, #192	; 0xc0
 8002446:	d028      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002448:	2bc0      	cmp	r3, #192	; 0xc0
 800244a:	d821      	bhi.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800244c:	2b80      	cmp	r3, #128	; 0x80
 800244e:	d016      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002450:	2b80      	cmp	r3, #128	; 0x80
 8002452:	d81d      	bhi.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d007      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800245c:	e018      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800245e:	4b5e      	ldr	r3, [pc, #376]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	4a5d      	ldr	r2, [pc, #372]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800246a:	e017      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fe8c 	bl	8003190 <RCCEx_PLL2_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800247c:	e00e      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3324      	adds	r3, #36	; 0x24
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f000 ff35 	bl	80032f4 <RCCEx_PLL3_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800248e:	e005      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	75fb      	strb	r3, [r7, #23]
      break;
 8002494:	e002      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002496:	bf00      	nop
 8002498:	e000      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800249a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80024a2:	4b4d      	ldr	r3, [pc, #308]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	494a      	ldr	r1, [pc, #296]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	650b      	str	r3, [r1, #80]	; 0x50
 80024b4:	e001      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d049      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80024cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024d0:	d030      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80024d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024d6:	d82a      	bhi.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80024d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80024dc:	d02c      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80024de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80024e2:	d824      	bhi.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80024e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e8:	d018      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80024ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ee:	d81e      	bhi.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80024f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024f8:	d007      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80024fa:	e018      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024fc:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	4a35      	ldr	r2, [pc, #212]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002508:	e017      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fe3d 	bl	8003190 <RCCEx_PLL2_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800251a:	e00e      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3324      	adds	r3, #36	; 0x24
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fee6 	bl	80032f4 <RCCEx_PLL3_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800252c:	e005      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
      break;
 8002532:	e002      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002534:	bf00      	nop
 8002536:	e000      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002540:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800254e:	4922      	ldr	r1, [pc, #136]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	658b      	str	r3, [r1, #88]	; 0x58
 8002554:	e001      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002556:	7dfb      	ldrb	r3, [r7, #23]
 8002558:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002562:	2b00      	cmp	r3, #0
 8002564:	d04b      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800256c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002570:	d030      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002576:	d82a      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002578:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800257c:	d02e      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800257e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002582:	d824      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002588:	d018      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800258a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800258e:	d81e      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002598:	d007      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800259a:	e018      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025a8:	e019      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fded 	bl	8003190 <RCCEx_PLL2_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80025ba:	e010      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3324      	adds	r3, #36	; 0x24
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fe96 	bl	80032f4 <RCCEx_PLL3_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025cc:	e007      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
      break;
 80025d2:	e004      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80025d4:	bf00      	nop
 80025d6:	e002      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80025d8:	58024400 	.word	0x58024400
      break;
 80025dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025de:	7dfb      	ldrb	r3, [r7, #23]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80025e4:	4b99      	ldr	r3, [pc, #612]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80025f2:	4996      	ldr	r1, [pc, #600]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	658b      	str	r3, [r1, #88]	; 0x58
 80025f8:	e001      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d032      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260e:	2b30      	cmp	r3, #48	; 0x30
 8002610:	d01c      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002612:	2b30      	cmp	r3, #48	; 0x30
 8002614:	d817      	bhi.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002616:	2b20      	cmp	r3, #32
 8002618:	d00c      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800261a:	2b20      	cmp	r3, #32
 800261c:	d813      	bhi.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002622:	2b10      	cmp	r3, #16
 8002624:	d10f      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002626:	4b89      	ldr	r3, [pc, #548]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	4a88      	ldr	r2, [pc, #544]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800262c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002630:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002632:	e00e      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	2102      	movs	r1, #2
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fda8 	bl	8003190 <RCCEx_PLL2_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002644:	e005      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
      break;
 800264a:	e002      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002652:	7dfb      	ldrb	r3, [r7, #23]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002658:	4b7c      	ldr	r3, [pc, #496]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002664:	4979      	ldr	r1, [pc, #484]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002666:	4313      	orrs	r3, r2
 8002668:	64cb      	str	r3, [r1, #76]	; 0x4c
 800266a:	e001      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d047      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002684:	d030      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800268a:	d82a      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800268c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002690:	d02c      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002692:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002696:	d824      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269c:	d018      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800269e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a2:	d81e      	bhi.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80026a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ac:	d007      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80026ae:	e018      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026b0:	4b66      	ldr	r3, [pc, #408]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	4a65      	ldr	r2, [pc, #404]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80026bc:	e017      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fd63 	bl	8003190 <RCCEx_PLL2_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80026ce:	e00e      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3324      	adds	r3, #36	; 0x24
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fe0c 	bl	80032f4 <RCCEx_PLL3_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80026e0:	e005      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
      break;
 80026e6:	e002      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80026e8:	bf00      	nop
 80026ea:	e000      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80026ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80026f4:	4b55      	ldr	r3, [pc, #340]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	4952      	ldr	r1, [pc, #328]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002702:	4313      	orrs	r3, r2
 8002704:	650b      	str	r3, [r1, #80]	; 0x50
 8002706:	e001      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d049      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002720:	d02e      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002726:	d828      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002728:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800272c:	d02a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800272e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002732:	d822      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002734:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002738:	d026      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800273a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800273e:	d81c      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002744:	d010      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800274a:	d816      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01d      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002754:	d111      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3304      	adds	r3, #4
 800275a:	2101      	movs	r1, #1
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fd17 	bl	8003190 <RCCEx_PLL2_Config>
 8002762:	4603      	mov	r3, r0
 8002764:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002766:	e012      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3324      	adds	r3, #36	; 0x24
 800276c:	2101      	movs	r1, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fdc0 	bl	80032f4 <RCCEx_PLL3_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002778:	e009      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
      break;
 800277e:	e006      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002780:	bf00      	nop
 8002782:	e004      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002784:	bf00      	nop
 8002786:	e002      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002788:	bf00      	nop
 800278a:	e000      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800278c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002798:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a0:	492a      	ldr	r1, [pc, #168]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	650b      	str	r3, [r1, #80]	; 0x50
 80027a6:	e001      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d04d      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c2:	d02e      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80027c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c8:	d828      	bhi.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80027ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ce:	d02a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80027d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d4:	d822      	bhi.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80027d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80027da:	d026      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80027dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80027e0:	d81c      	bhi.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80027e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e6:	d010      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80027e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ec:	d816      	bhi.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01d      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80027f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f6:	d111      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	2101      	movs	r1, #1
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fcc6 	bl	8003190 <RCCEx_PLL2_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002808:	e012      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3324      	adds	r3, #36	; 0x24
 800280e:	2101      	movs	r1, #1
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fd6f 	bl	80032f4 <RCCEx_PLL3_Config>
 8002816:	4603      	mov	r3, r0
 8002818:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800281a:	e009      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	75fb      	strb	r3, [r7, #23]
      break;
 8002820:	e006      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002822:	bf00      	nop
 8002824:	e004      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002826:	bf00      	nop
 8002828:	e002      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800282a:	bf00      	nop
 800282c:	e000      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800282e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10c      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002844:	4901      	ldr	r1, [pc, #4]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002846:	4313      	orrs	r3, r2
 8002848:	658b      	str	r3, [r1, #88]	; 0x58
 800284a:	e003      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800284c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d02f      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002868:	d00e      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800286a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800286e:	d814      	bhi.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002870:	2b00      	cmp	r3, #0
 8002872:	d015      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002874:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002878:	d10f      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800287a:	4baf      	ldr	r3, [pc, #700]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	4aae      	ldr	r2, [pc, #696]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002886:	e00c      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	2101      	movs	r1, #1
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fc7e 	bl	8003190 <RCCEx_PLL2_Config>
 8002894:	4603      	mov	r3, r0
 8002896:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002898:	e003      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
      break;
 800289e:	e000      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80028a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028a8:	4ba3      	ldr	r3, [pc, #652]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b4:	49a0      	ldr	r1, [pc, #640]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	650b      	str	r3, [r1, #80]	; 0x50
 80028ba:	e001      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d81b      	bhi.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80028d4:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80028d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028da:	bf00      	nop
 80028dc:	08002913 	.word	0x08002913
 80028e0:	080028ed 	.word	0x080028ed
 80028e4:	080028fb 	.word	0x080028fb
 80028e8:	08002913 	.word	0x08002913
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ec:	4b92      	ldr	r3, [pc, #584]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	4a91      	ldr	r2, [pc, #580]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80028f8:	e00c      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2102      	movs	r1, #2
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fc45 	bl	8003190 <RCCEx_PLL2_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800290a:	e003      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	75fb      	strb	r3, [r7, #23]
      break;
 8002910:	e000      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800291a:	4b87      	ldr	r3, [pc, #540]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	4984      	ldr	r1, [pc, #528]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002928:	4313      	orrs	r3, r2
 800292a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800292c:	e001      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8086 	beq.w	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002940:	4b7e      	ldr	r3, [pc, #504]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a7d      	ldr	r2, [pc, #500]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800294c:	f7fe f87c 	bl	8000a48 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002952:	e009      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fe f878 	bl	8000a48 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d902      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	75fb      	strb	r3, [r7, #23]
        break;
 8002966:	e005      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002968:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d166      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800297a:	4b6f      	ldr	r3, [pc, #444]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800297c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002984:	4053      	eors	r3, r2
 8002986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298a:	2b00      	cmp	r3, #0
 800298c:	d013      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800298e:	4b6a      	ldr	r3, [pc, #424]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002996:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002998:	4b67      	ldr	r3, [pc, #412]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a66      	ldr	r2, [pc, #408]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800299e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029a4:	4b64      	ldr	r3, [pc, #400]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a63      	ldr	r2, [pc, #396]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80029b0:	4a61      	ldr	r2, [pc, #388]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c0:	d115      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c2:	f7fe f841 	bl	8000a48 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029c8:	e00b      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe f83d 	bl	8000a48 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d902      	bls.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	75fb      	strb	r3, [r7, #23]
            break;
 80029e0:	e005      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e2:	4b55      	ldr	r3, [pc, #340]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0ed      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d126      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a02:	d10d      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002a04:	4b4c      	ldr	r3, [pc, #304]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a12:	0919      	lsrs	r1, r3, #4
 8002a14:	4b4a      	ldr	r3, [pc, #296]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002a16:	400b      	ands	r3, r1
 8002a18:	4947      	ldr	r1, [pc, #284]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	610b      	str	r3, [r1, #16]
 8002a1e:	e005      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002a20:	4b45      	ldr	r3, [pc, #276]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	4a44      	ldr	r2, [pc, #272]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a2a:	6113      	str	r3, [r2, #16]
 8002a2c:	4b42      	ldr	r3, [pc, #264]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3a:	493f      	ldr	r1, [pc, #252]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	670b      	str	r3, [r1, #112]	; 0x70
 8002a40:	e004      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	75bb      	strb	r3, [r7, #22]
 8002a46:	e001      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8085 	beq.w	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5e:	2b28      	cmp	r3, #40	; 0x28
 8002a60:	d866      	bhi.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002a62:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a68:	08002b45 	.word	0x08002b45
 8002a6c:	08002b31 	.word	0x08002b31
 8002a70:	08002b31 	.word	0x08002b31
 8002a74:	08002b31 	.word	0x08002b31
 8002a78:	08002b31 	.word	0x08002b31
 8002a7c:	08002b31 	.word	0x08002b31
 8002a80:	08002b31 	.word	0x08002b31
 8002a84:	08002b31 	.word	0x08002b31
 8002a88:	08002b0d 	.word	0x08002b0d
 8002a8c:	08002b31 	.word	0x08002b31
 8002a90:	08002b31 	.word	0x08002b31
 8002a94:	08002b31 	.word	0x08002b31
 8002a98:	08002b31 	.word	0x08002b31
 8002a9c:	08002b31 	.word	0x08002b31
 8002aa0:	08002b31 	.word	0x08002b31
 8002aa4:	08002b31 	.word	0x08002b31
 8002aa8:	08002b1f 	.word	0x08002b1f
 8002aac:	08002b31 	.word	0x08002b31
 8002ab0:	08002b31 	.word	0x08002b31
 8002ab4:	08002b31 	.word	0x08002b31
 8002ab8:	08002b31 	.word	0x08002b31
 8002abc:	08002b31 	.word	0x08002b31
 8002ac0:	08002b31 	.word	0x08002b31
 8002ac4:	08002b31 	.word	0x08002b31
 8002ac8:	08002b45 	.word	0x08002b45
 8002acc:	08002b31 	.word	0x08002b31
 8002ad0:	08002b31 	.word	0x08002b31
 8002ad4:	08002b31 	.word	0x08002b31
 8002ad8:	08002b31 	.word	0x08002b31
 8002adc:	08002b31 	.word	0x08002b31
 8002ae0:	08002b31 	.word	0x08002b31
 8002ae4:	08002b31 	.word	0x08002b31
 8002ae8:	08002b45 	.word	0x08002b45
 8002aec:	08002b31 	.word	0x08002b31
 8002af0:	08002b31 	.word	0x08002b31
 8002af4:	08002b31 	.word	0x08002b31
 8002af8:	08002b31 	.word	0x08002b31
 8002afc:	08002b31 	.word	0x08002b31
 8002b00:	08002b31 	.word	0x08002b31
 8002b04:	08002b31 	.word	0x08002b31
 8002b08:	08002b45 	.word	0x08002b45
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2101      	movs	r1, #1
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fb3c 	bl	8003190 <RCCEx_PLL2_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b1c:	e013      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3324      	adds	r3, #36	; 0x24
 8002b22:	2101      	movs	r1, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fbe5 	bl	80032f4 <RCCEx_PLL3_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	75fb      	strb	r3, [r7, #23]
      break;
 8002b34:	e007      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002b36:	bf00      	nop
 8002b38:	58024400 	.word	0x58024400
 8002b3c:	58024800 	.word	0x58024800
 8002b40:	00ffffcf 	.word	0x00ffffcf
      break;
 8002b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b4c:	4b96      	ldr	r3, [pc, #600]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b50:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b58:	4993      	ldr	r1, [pc, #588]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	654b      	str	r3, [r1, #84]	; 0x54
 8002b5e:	e001      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d038      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d821      	bhi.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002b78:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7e:	bf00      	nop
 8002b80:	08002bc3 	.word	0x08002bc3
 8002b84:	08002b99 	.word	0x08002b99
 8002b88:	08002bab 	.word	0x08002bab
 8002b8c:	08002bc3 	.word	0x08002bc3
 8002b90:	08002bc3 	.word	0x08002bc3
 8002b94:	08002bc3 	.word	0x08002bc3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 faf6 	bl	8003190 <RCCEx_PLL2_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ba8:	e00c      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3324      	adds	r3, #36	; 0x24
 8002bae:	2101      	movs	r1, #1
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fb9f 	bl	80032f4 <RCCEx_PLL3_Config>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002bba:	e003      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc0:	e000      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002bca:	4b77      	ldr	r3, [pc, #476]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	f023 0207 	bic.w	r2, r3, #7
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd6:	4974      	ldr	r1, [pc, #464]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	654b      	str	r3, [r1, #84]	; 0x54
 8002bdc:	e001      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d03a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d821      	bhi.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002bf8:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c43 	.word	0x08002c43
 8002c04:	08002c19 	.word	0x08002c19
 8002c08:	08002c2b 	.word	0x08002c2b
 8002c0c:	08002c43 	.word	0x08002c43
 8002c10:	08002c43 	.word	0x08002c43
 8002c14:	08002c43 	.word	0x08002c43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fab6 	bl	8003190 <RCCEx_PLL2_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c28:	e00c      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3324      	adds	r3, #36	; 0x24
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fb5f 	bl	80032f4 <RCCEx_PLL3_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c3a:	e003      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c40:	e000      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10a      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c4a:	4b57      	ldr	r3, [pc, #348]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c58:	4953      	ldr	r1, [pc, #332]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	658b      	str	r3, [r1, #88]	; 0x58
 8002c5e:	e001      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d04b      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c7a:	d02e      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c80:	d828      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c86:	d02a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8c:	d822      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002c8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c92:	d026      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002c94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c98:	d81c      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c9e:	d010      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca4:	d816      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01d      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cae:	d111      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fa6a 	bl	8003190 <RCCEx_PLL2_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002cc0:	e012      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3324      	adds	r3, #36	; 0x24
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fb13 	bl	80032f4 <RCCEx_PLL3_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002cd2:	e009      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd8:	e006      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e004      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cee:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfc:	492a      	ldr	r1, [pc, #168]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	654b      	str	r3, [r1, #84]	; 0x54
 8002d02:	e001      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d04d      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d1e:	d02e      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002d20:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d24:	d828      	bhi.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2a:	d02a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d30:	d822      	bhi.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d36:	d026      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002d38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d3c:	d81c      	bhi.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d42:	d010      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d48:	d816      	bhi.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01d      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d52:	d111      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3304      	adds	r3, #4
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fa18 	bl	8003190 <RCCEx_PLL2_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002d64:	e012      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3324      	adds	r3, #36	; 0x24
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fac1 	bl	80032f4 <RCCEx_PLL3_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002d76:	e009      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d7c:	e006      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e004      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002d82:	bf00      	nop
 8002d84:	e002      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10c      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da0:	4901      	ldr	r1, [pc, #4]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	658b      	str	r3, [r1, #88]	; 0x58
 8002da6:	e003      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002da8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d04b      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002dc6:	d02e      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002dc8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002dcc:	d828      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd2:	d02a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd8:	d822      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002dda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002dde:	d026      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002de0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002de4:	d81c      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dea:	d010      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002df0:	d816      	bhi.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01d      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfa:	d111      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f9c4 	bl	8003190 <RCCEx_PLL2_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e0c:	e012      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3324      	adds	r3, #36	; 0x24
 8002e12:	2102      	movs	r1, #2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fa6d 	bl	80032f4 <RCCEx_PLL3_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e1e:	e009      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	75fb      	strb	r3, [r7, #23]
      break;
 8002e24:	e006      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e26:	bf00      	nop
 8002e28:	e004      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e002      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e000      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002e3a:	4b9d      	ldr	r3, [pc, #628]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e48:	4999      	ldr	r1, [pc, #612]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	658b      	str	r3, [r1, #88]	; 0x58
 8002e4e:	e001      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6a:	d10a      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3324      	adds	r3, #36	; 0x24
 8002e70:	2102      	movs	r1, #2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fa3e 	bl	80032f4 <RCCEx_PLL3_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002e82:	4b8b      	ldr	r3, [pc, #556]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e90:	4987      	ldr	r1, [pc, #540]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eac:	d10a      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3324      	adds	r3, #36	; 0x24
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fa1d 	bl	80032f4 <RCCEx_PLL3_Config>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ec4:	4b7a      	ldr	r3, [pc, #488]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed2:	4977      	ldr	r1, [pc, #476]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d034      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eee:	d01d      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ef4:	d817      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efe:	d009      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002f00:	e011      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 f941 	bl	8003190 <RCCEx_PLL2_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f12:	e00c      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3324      	adds	r3, #36	; 0x24
 8002f18:	2102      	movs	r1, #2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f9ea 	bl	80032f4 <RCCEx_PLL3_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f24:	e003      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	75fb      	strb	r3, [r7, #23]
      break;
 8002f2a:	e000      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f34:	4b5e      	ldr	r3, [pc, #376]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f42:	495b      	ldr	r1, [pc, #364]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	658b      	str	r3, [r1, #88]	; 0x58
 8002f48:	e001      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d033      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f64:	d01c      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002f66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f6a:	d816      	bhi.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f70:	d003      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002f72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f76:	d007      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002f78:	e00f      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f7a:	4b4d      	ldr	r3, [pc, #308]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	4a4c      	ldr	r2, [pc, #304]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002f86:	e00c      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3324      	adds	r3, #36	; 0x24
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f9b0 	bl	80032f4 <RCCEx_PLL3_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002f98:	e003      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fa8:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb6:	493e      	ldr	r1, [pc, #248]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	654b      	str	r3, [r1, #84]	; 0x54
 8002fbc:	e001      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
 8002fc0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d029      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8002fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fda:	d007      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8002fdc:	e00f      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fde:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	4a33      	ldr	r2, [pc, #204]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002fea:	e00b      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f8cc 	bl	8003190 <RCCEx_PLL2_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002ffc:	e002      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
      break;
 8003002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	4926      	ldr	r1, [pc, #152]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003018:	4313      	orrs	r3, r2
 800301a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800301c:	e001      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3324      	adds	r3, #36	; 0x24
 8003032:	2102      	movs	r1, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f000 f95d 	bl	80032f4 <RCCEx_PLL3_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d033      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003054:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003058:	d017      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800305a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800305e:	d811      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003064:	d013      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800306a:	d80b      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d010      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003074:	d106      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003076:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800307c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003080:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003082:	e007      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	75fb      	strb	r3, [r7, #23]
      break;
 8003088:	e004      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800308a:	bf00      	nop
 800308c:	e002      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800308e:	bf00      	nop
 8003090:	e000      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10c      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030a6:	4902      	ldr	r1, [pc, #8]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	654b      	str	r3, [r1, #84]	; 0x54
 80030ac:	e004      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80030ae:	bf00      	nop
 80030b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030c4:	4b31      	ldr	r3, [pc, #196]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	492e      	ldr	r1, [pc, #184]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80030e2:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80030f0:	4926      	ldr	r1, [pc, #152]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003102:	4b22      	ldr	r3, [pc, #136]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003106:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800310e:	491f      	ldr	r1, [pc, #124]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003110:	4313      	orrs	r3, r2
 8003112:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003126:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800312a:	6113      	str	r3, [r2, #16]
 800312c:	4b17      	ldr	r3, [pc, #92]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003136:	4915      	ldr	r1, [pc, #84]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003138:	4313      	orrs	r3, r2
 800313a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	da08      	bge.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003148:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003150:	490e      	ldr	r1, [pc, #56]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003152:	4313      	orrs	r3, r2
 8003154:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	4906      	ldr	r1, [pc, #24]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003172:	4313      	orrs	r3, r2
 8003174:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003176:	7dbb      	ldrb	r3, [r7, #22]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	58024400 	.word	0x58024400

08003190 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800319e:	4b53      	ldr	r3, [pc, #332]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d101      	bne.n	80031ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e099      	b.n	80032e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80031ae:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a4e      	ldr	r2, [pc, #312]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 80031b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ba:	f7fd fc45 	bl	8000a48 <HAL_GetTick>
 80031be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80031c0:	e008      	b.n	80031d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80031c2:	f7fd fc41 	bl	8000a48 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e086      	b.n	80032e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80031d4:	4b45      	ldr	r3, [pc, #276]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f0      	bne.n	80031c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80031e0:	4b42      	ldr	r3, [pc, #264]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	031b      	lsls	r3, r3, #12
 80031ee:	493f      	ldr	r1, [pc, #252]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	628b      	str	r3, [r1, #40]	; 0x28
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	3b01      	subs	r3, #1
 8003204:	025b      	lsls	r3, r3, #9
 8003206:	b29b      	uxth	r3, r3
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	3b01      	subs	r3, #1
 8003210:	041b      	lsls	r3, r3, #16
 8003212:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	3b01      	subs	r3, #1
 800321e:	061b      	lsls	r3, r3, #24
 8003220:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003224:	4931      	ldr	r1, [pc, #196]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 8003226:	4313      	orrs	r3, r2
 8003228:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800322a:	4b30      	ldr	r3, [pc, #192]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	492d      	ldr	r1, [pc, #180]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 8003238:	4313      	orrs	r3, r2
 800323a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800323c:	4b2b      	ldr	r3, [pc, #172]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	f023 0220 	bic.w	r2, r3, #32
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	4928      	ldr	r1, [pc, #160]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 800324a:	4313      	orrs	r3, r2
 800324c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800324e:	4b27      	ldr	r3, [pc, #156]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	4a26      	ldr	r2, [pc, #152]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 8003254:	f023 0310 	bic.w	r3, r3, #16
 8003258:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800325a:	4b24      	ldr	r3, [pc, #144]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 800325c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <RCCEx_PLL2_Config+0x160>)
 8003260:	4013      	ands	r3, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	69d2      	ldr	r2, [r2, #28]
 8003266:	00d2      	lsls	r2, r2, #3
 8003268:	4920      	ldr	r1, [pc, #128]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 800326a:	4313      	orrs	r3, r2
 800326c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800326e:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 8003274:	f043 0310 	orr.w	r3, r3, #16
 8003278:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003280:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	4a19      	ldr	r2, [pc, #100]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 8003286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800328a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800328c:	e00f      	b.n	80032ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d106      	bne.n	80032a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003294:	4b15      	ldr	r3, [pc, #84]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 800329a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800329e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80032a0:	e005      	b.n	80032ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	4a11      	ldr	r2, [pc, #68]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 80032a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80032ae:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 80032b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ba:	f7fd fbc5 	bl	8000a48 <HAL_GetTick>
 80032be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80032c0:	e008      	b.n	80032d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80032c2:	f7fd fbc1 	bl	8000a48 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e006      	b.n	80032e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <RCCEx_PLL2_Config+0x15c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	58024400 	.word	0x58024400
 80032f0:	ffff0007 	.word	0xffff0007

080032f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003302:	4b53      	ldr	r3, [pc, #332]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b03      	cmp	r3, #3
 800330c:	d101      	bne.n	8003312 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e099      	b.n	8003446 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003312:	4b4f      	ldr	r3, [pc, #316]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a4e      	ldr	r2, [pc, #312]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 8003318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800331e:	f7fd fb93 	bl	8000a48 <HAL_GetTick>
 8003322:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003324:	e008      	b.n	8003338 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003326:	f7fd fb8f 	bl	8000a48 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e086      	b.n	8003446 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003338:	4b45      	ldr	r3, [pc, #276]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003344:	4b42      	ldr	r3, [pc, #264]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	051b      	lsls	r3, r3, #20
 8003352:	493f      	ldr	r1, [pc, #252]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 8003354:	4313      	orrs	r3, r2
 8003356:	628b      	str	r3, [r1, #40]	; 0x28
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	3b01      	subs	r3, #1
 800335e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	3b01      	subs	r3, #1
 8003368:	025b      	lsls	r3, r3, #9
 800336a:	b29b      	uxth	r3, r3
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	3b01      	subs	r3, #1
 8003374:	041b      	lsls	r3, r3, #16
 8003376:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	3b01      	subs	r3, #1
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003388:	4931      	ldr	r1, [pc, #196]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 800338a:	4313      	orrs	r3, r2
 800338c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800338e:	4b30      	ldr	r3, [pc, #192]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	492d      	ldr	r1, [pc, #180]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 800339c:	4313      	orrs	r3, r2
 800339e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	4928      	ldr	r1, [pc, #160]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80033b2:	4b27      	ldr	r3, [pc, #156]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	4a26      	ldr	r2, [pc, #152]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 80033b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 80033c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <RCCEx_PLL3_Config+0x160>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	69d2      	ldr	r2, [r2, #28]
 80033ca:	00d2      	lsls	r2, r2, #3
 80033cc:	4920      	ldr	r1, [pc, #128]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80033d2:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 80033d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d106      	bne.n	80033f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80033e4:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	4a19      	ldr	r2, [pc, #100]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 80033ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033f0:	e00f      	b.n	8003412 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d106      	bne.n	8003406 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80033f8:	4b15      	ldr	r3, [pc, #84]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	4a14      	ldr	r2, [pc, #80]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 80033fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003402:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003404:	e005      	b.n	8003412 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	4a11      	ldr	r2, [pc, #68]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 800340c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003410:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003412:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a0e      	ldr	r2, [pc, #56]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 8003418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341e:	f7fd fb13 	bl	8000a48 <HAL_GetTick>
 8003422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003424:	e008      	b.n	8003438 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003426:	f7fd fb0f 	bl	8000a48 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e006      	b.n	8003446 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <RCCEx_PLL3_Config+0x15c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	58024400 	.word	0x58024400
 8003454:	ffff0007 	.word	0xffff0007

08003458 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003458:	b084      	sub	sp, #16
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	f107 001c 	add.w	r0, r7, #28
 8003466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	2b01      	cmp	r3, #1
 800346e:	d120      	bne.n	80034b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <USB_CoreInit+0xd4>)
 8003482:	4013      	ands	r3, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003496:	2b01      	cmp	r3, #1
 8003498:	d105      	bne.n	80034a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 faac 	bl	8003a04 <USB_CoreReset>
 80034ac:	4603      	mov	r3, r0
 80034ae:	73fb      	strb	r3, [r7, #15]
 80034b0:	e01a      	b.n	80034e8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 faa0 	bl	8003a04 <USB_CoreReset>
 80034c4:	4603      	mov	r3, r0
 80034c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80034c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
 80034da:	e005      	b.n	80034e8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d116      	bne.n	800351c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <USB_CoreInit+0xd8>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f043 0206 	orr.w	r2, r3, #6
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003528:	b004      	add	sp, #16
 800352a:	4770      	bx	lr
 800352c:	ffbdffbf 	.word	0xffbdffbf
 8003530:	03ee0000 	.word	0x03ee0000

08003534 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 0201 	bic.w	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d115      	bne.n	80035a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003584:	2001      	movs	r0, #1
 8003586:	f7fd fa6b 	bl	8000a60 <HAL_Delay>
      ms++;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3301      	adds	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fa29 	bl	80039e8 <USB_GetMode>
 8003596:	4603      	mov	r3, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d01e      	beq.n	80035da <USB_SetCurrentMode+0x84>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b31      	cmp	r3, #49	; 0x31
 80035a0:	d9f0      	bls.n	8003584 <USB_SetCurrentMode+0x2e>
 80035a2:	e01a      	b.n	80035da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d115      	bne.n	80035d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035b6:	2001      	movs	r0, #1
 80035b8:	f7fd fa52 	bl	8000a60 <HAL_Delay>
      ms++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3301      	adds	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fa10 	bl	80039e8 <USB_GetMode>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <USB_SetCurrentMode+0x84>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b31      	cmp	r3, #49	; 0x31
 80035d2:	d9f0      	bls.n	80035b6 <USB_SetCurrentMode+0x60>
 80035d4:	e001      	b.n	80035da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e005      	b.n	80035e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b32      	cmp	r3, #50	; 0x32
 80035de:	d101      	bne.n	80035e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035f0:	b084      	sub	sp, #16
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b086      	sub	sp, #24
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	e009      	b.n	8003624 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	3340      	adds	r3, #64	; 0x40
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	2200      	movs	r2, #0
 800361c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	3301      	adds	r3, #1
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b0e      	cmp	r3, #14
 8003628:	d9f2      	bls.n	8003610 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800362a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11c      	bne.n	800366a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800363e:	f043 0302 	orr.w	r3, r3, #2
 8003642:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e005      	b.n	8003676 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800367c:	461a      	mov	r2, r3
 800367e:	2300      	movs	r3, #0
 8003680:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003688:	4619      	mov	r1, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003690:	461a      	mov	r2, r3
 8003692:	680b      	ldr	r3, [r1, #0]
 8003694:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	2b01      	cmp	r3, #1
 800369a:	d10c      	bne.n	80036b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036a2:	2100      	movs	r1, #0
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f965 	bl	8003974 <USB_SetDevSpeed>
 80036aa:	e008      	b.n	80036be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036ac:	2101      	movs	r1, #1
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f960 	bl	8003974 <USB_SetDevSpeed>
 80036b4:	e003      	b.n	80036be <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036b6:	2103      	movs	r1, #3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f95b 	bl	8003974 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036be:	2110      	movs	r1, #16
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f8f3 	bl	80038ac <USB_FlushTxFifo>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f91f 	bl	8003914 <USB_FlushRxFifo>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e6:	461a      	mov	r2, r3
 80036e8:	2300      	movs	r3, #0
 80036ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f2:	461a      	mov	r2, r3
 80036f4:	2300      	movs	r3, #0
 80036f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	461a      	mov	r2, r3
 8003700:	2300      	movs	r3, #0
 8003702:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003704:	2300      	movs	r3, #0
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	e043      	b.n	8003792 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800371c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003720:	d118      	bne.n	8003754 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003734:	461a      	mov	r2, r3
 8003736:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	e013      	b.n	8003766 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374a:	461a      	mov	r2, r3
 800374c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e008      	b.n	8003766 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003760:	461a      	mov	r2, r3
 8003762:	2300      	movs	r3, #0
 8003764:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003772:	461a      	mov	r2, r3
 8003774:	2300      	movs	r3, #0
 8003776:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003784:	461a      	mov	r2, r3
 8003786:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800378a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	3301      	adds	r3, #1
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	429a      	cmp	r2, r3
 8003798:	d3b7      	bcc.n	800370a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	e043      	b.n	8003828 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037b6:	d118      	bne.n	80037ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10a      	bne.n	80037d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ca:	461a      	mov	r2, r3
 80037cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e013      	b.n	80037fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e0:	461a      	mov	r2, r3
 80037e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	e008      	b.n	80037fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f6:	461a      	mov	r2, r3
 80037f8:	2300      	movs	r3, #0
 80037fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003808:	461a      	mov	r2, r3
 800380a:	2300      	movs	r3, #0
 800380c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381a:	461a      	mov	r2, r3
 800381c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003820:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	3301      	adds	r3, #1
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d3b7      	bcc.n	80037a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800383e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003842:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003850:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	2b00      	cmp	r3, #0
 8003856:	d105      	bne.n	8003864 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f043 0210 	orr.w	r2, r3, #16
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <USB_DevInit+0x2b4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f043 0208 	orr.w	r2, r3, #8
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699a      	ldr	r2, [r3, #24]
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <USB_DevInit+0x2b8>)
 800388e:	4313      	orrs	r3, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003894:	7dfb      	ldrb	r3, [r7, #23]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038a0:	b004      	add	sp, #16
 80038a2:	4770      	bx	lr
 80038a4:	803c3800 	.word	0x803c3800
 80038a8:	40000004 	.word	0x40000004

080038ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3301      	adds	r3, #1
 80038be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a13      	ldr	r2, [pc, #76]	; (8003910 <USB_FlushTxFifo+0x64>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d901      	bls.n	80038cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e01b      	b.n	8003904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	daf2      	bge.n	80038ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	019b      	lsls	r3, r3, #6
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3301      	adds	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a08      	ldr	r2, [pc, #32]	; (8003910 <USB_FlushTxFifo+0x64>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e006      	b.n	8003904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d0f0      	beq.n	80038e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	00030d40 	.word	0x00030d40

08003914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3301      	adds	r3, #1
 8003924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4a11      	ldr	r2, [pc, #68]	; (8003970 <USB_FlushRxFifo+0x5c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e018      	b.n	8003964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	daf2      	bge.n	8003920 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2210      	movs	r2, #16
 8003942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3301      	adds	r3, #1
 8003948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a08      	ldr	r2, [pc, #32]	; (8003970 <USB_FlushRxFifo+0x5c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e006      	b.n	8003964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b10      	cmp	r3, #16
 8003960:	d0f0      	beq.n	8003944 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	00030d40 	.word	0x00030d40

08003974 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	68f9      	ldr	r1, [r7, #12]
 8003990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80039c0:	f023 0303 	bic.w	r3, r3, #3
 80039c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039d4:	f043 0302 	orr.w	r3, r3, #2
 80039d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0301 	and.w	r3, r3, #1
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3301      	adds	r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a13      	ldr	r2, [pc, #76]	; (8003a68 <USB_CoreReset+0x64>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e01b      	b.n	8003a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	daf2      	bge.n	8003a10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f043 0201 	orr.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <USB_CoreReset+0x64>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e006      	b.n	8003a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d0f0      	beq.n	8003a3a <USB_CoreReset+0x36>

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	00030d40 	.word	0x00030d40

08003a6c <__libc_init_array>:
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	4d0d      	ldr	r5, [pc, #52]	; (8003aa4 <__libc_init_array+0x38>)
 8003a70:	4c0d      	ldr	r4, [pc, #52]	; (8003aa8 <__libc_init_array+0x3c>)
 8003a72:	1b64      	subs	r4, r4, r5
 8003a74:	10a4      	asrs	r4, r4, #2
 8003a76:	2600      	movs	r6, #0
 8003a78:	42a6      	cmp	r6, r4
 8003a7a:	d109      	bne.n	8003a90 <__libc_init_array+0x24>
 8003a7c:	4d0b      	ldr	r5, [pc, #44]	; (8003aac <__libc_init_array+0x40>)
 8003a7e:	4c0c      	ldr	r4, [pc, #48]	; (8003ab0 <__libc_init_array+0x44>)
 8003a80:	f000 f820 	bl	8003ac4 <_init>
 8003a84:	1b64      	subs	r4, r4, r5
 8003a86:	10a4      	asrs	r4, r4, #2
 8003a88:	2600      	movs	r6, #0
 8003a8a:	42a6      	cmp	r6, r4
 8003a8c:	d105      	bne.n	8003a9a <__libc_init_array+0x2e>
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a94:	4798      	blx	r3
 8003a96:	3601      	adds	r6, #1
 8003a98:	e7ee      	b.n	8003a78 <__libc_init_array+0xc>
 8003a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9e:	4798      	blx	r3
 8003aa0:	3601      	adds	r6, #1
 8003aa2:	e7f2      	b.n	8003a8a <__libc_init_array+0x1e>
 8003aa4:	08003aec 	.word	0x08003aec
 8003aa8:	08003aec 	.word	0x08003aec
 8003aac:	08003aec 	.word	0x08003aec
 8003ab0:	08003af0 	.word	0x08003af0

08003ab4 <memset>:
 8003ab4:	4402      	add	r2, r0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d100      	bne.n	8003abe <memset+0xa>
 8003abc:	4770      	bx	lr
 8003abe:	f803 1b01 	strb.w	r1, [r3], #1
 8003ac2:	e7f9      	b.n	8003ab8 <memset+0x4>

08003ac4 <_init>:
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	bf00      	nop
 8003ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aca:	bc08      	pop	{r3}
 8003acc:	469e      	mov	lr, r3
 8003ace:	4770      	bx	lr

08003ad0 <_fini>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	bf00      	nop
 8003ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad6:	bc08      	pop	{r3}
 8003ad8:	469e      	mov	lr, r3
 8003ada:	4770      	bx	lr
